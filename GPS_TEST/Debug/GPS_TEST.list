
GPS_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  080073f8  080073f8  000173f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078e4  080078e4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080078e4  080078e4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078e4  080078e4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078e4  080078e4  000178e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078e8  080078e8  000178e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080078ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001e0  08007acc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08007acc  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000948d  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e2a  00000000  00000000  00029696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0002b4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000698  00000000  00000000  0002bc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018436  00000000  00000000  0002c2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000917e  00000000  00000000  0004471e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e65  00000000  00000000  0004d89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1701  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031e0  00000000  00000000  000d1754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080073e0 	.word	0x080073e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080073e0 	.word	0x080073e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	460c      	mov	r4, r1
 8000b6c:	4605      	mov	r5, r0
 8000b6e:	4621      	mov	r1, r4
 8000b70:	4628      	mov	r0, r5
 8000b72:	2200      	movs	r2, #0
 8000b74:	2300      	movs	r3, #0
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <GpsToDecimalDegrees>:
void GPS_Init(void);
char *strtok_fr (char *s, char delim, char **save_ptr);
char *strtok_f (char *s, char delim);

/* Main Code */
float GpsToDecimalDegrees(char* nmeaPos, char quadrant){
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	70fb      	strb	r3, [r7, #3]
	float v= 0;
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
	if(strlen(nmeaPos)>5){
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fab0 	bl	8000150 <strlen>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b05      	cmp	r3, #5
 8000bf4:	d944      	bls.n	8000c80 <GpsToDecimalDegrees+0xa8>
		char integerPart[3+1];
		int digitCount= (nmeaPos[4]=='.' ? 2 : 3);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b2e      	cmp	r3, #46	; 0x2e
 8000bfe:	d101      	bne.n	8000c04 <GpsToDecimalDegrees+0x2c>
 8000c00:	2302      	movs	r3, #2
 8000c02:	e000      	b.n	8000c06 <GpsToDecimalDegrees+0x2e>
 8000c04:	2303      	movs	r3, #3
 8000c06:	613b      	str	r3, [r7, #16]
		memcpy(integerPart, nmeaPos, digitCount);
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f001 ffa7 	bl	8002b64 <memcpy>
		integerPart[digitCount]= 0;
 8000c16:	f107 020c 	add.w	r2, r7, #12
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
		nmeaPos+= digitCount;
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	607b      	str	r3, [r7, #4]
		v= atoi(integerPart) + atof(nmeaPos)/60.;
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 ff69 	bl	8002b06 <atoi>
 8000c34:	4603      	mov	r3, r0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fbe4 	bl	8000404 <__aeabi_i2d>
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	460d      	mov	r5, r1
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f001 ff5d 	bl	8002b00 <atof>
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <GpsToDecimalDegrees+0xb4>)
 8000c4c:	f7ff fd6e 	bl	800072c <__aeabi_ddiv>
 8000c50:	4602      	mov	r2, r0
 8000c52:	460b      	mov	r3, r1
 8000c54:	4620      	mov	r0, r4
 8000c56:	4629      	mov	r1, r5
 8000c58:	f7ff fa88 	bl	800016c <__adddf3>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4610      	mov	r0, r2
 8000c62:	4619      	mov	r1, r3
 8000c64:	f7ff ff30 	bl	8000ac8 <__aeabi_d2f>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	617b      	str	r3, [r7, #20]
		if(quadrant=='W' || quadrant=='S')
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	2b57      	cmp	r3, #87	; 0x57
 8000c70:	d002      	beq.n	8000c78 <GpsToDecimalDegrees+0xa0>
 8000c72:	78fb      	ldrb	r3, [r7, #3]
 8000c74:	2b53      	cmp	r3, #83	; 0x53
 8000c76:	d103      	bne.n	8000c80 <GpsToDecimalDegrees+0xa8>
		  v= -v;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000c7e:	617b      	str	r3, [r7, #20]
	}
	return v;
 8000c80:	697b      	ldr	r3, [r7, #20]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bdb0      	pop	{r4, r5, r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	404e0000 	.word	0x404e0000

08000c90 <GPS_Init>:

void GPS_Init(void){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	GPS.rxIndex=0;
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <GPS_Init+0x1c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);	
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4904      	ldr	r1, [pc, #16]	; (8000cb0 <GPS_Init+0x20>)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <GPS_Init+0x24>)
 8000ca2:	f001 fc20 	bl	80024e6 <HAL_UART_Receive_IT>
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000210 	.word	0x20000210
 8000cb0:	20000312 	.word	0x20000312
 8000cb4:	20000394 	.word	0x20000394

08000cb8 <GPS_CallBack>:

void GPS_CallBack(void){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 8000cbc:	f000 fc9a 	bl	80015f4 <HAL_GetTick>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <GPS_CallBack+0x4c>)
 8000cc4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	if(GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <GPS_CallBack+0x4c>)
 8000cca:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000cce:	2bfd      	cmp	r3, #253	; 0xfd
 8000cd0:	d810      	bhi.n	8000cf4 <GPS_CallBack+0x3c>
	{
		GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <GPS_CallBack+0x4c>)
 8000cd4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <GPS_CallBack+0x4c>)
 8000cdc:	f893 1102 	ldrb.w	r1, [r3, #258]	; 0x102
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <GPS_CallBack+0x4c>)
 8000ce2:	5499      	strb	r1, [r3, r2]
		GPS.rxIndex++;
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <GPS_CallBack+0x4c>)
 8000ce6:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000cea:	3301      	adds	r3, #1
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <GPS_CallBack+0x4c>)
 8000cf0:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	}
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4904      	ldr	r1, [pc, #16]	; (8000d08 <GPS_CallBack+0x50>)
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <GPS_CallBack+0x54>)
 8000cfa:	f001 fbf4 	bl	80024e6 <HAL_UART_Receive_IT>
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000210 	.word	0x20000210
 8000d08:	20000312 	.word	0x20000312
 8000d0c:	20000394 	.word	0x20000394

08000d10 <strtok_fr>:

char *strtok_fr (char *s, char delim, char **save_ptr){
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	72fb      	strb	r3, [r7, #11]
    char *tail;
    char c;

    if (s == NULL) {
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <strtok_fr+0x1a>
        s = *save_ptr;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60fb      	str	r3, [r7, #12]
    }
    tail = s;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	617b      	str	r3, [r7, #20]
    if ((c = *tail) == '\0') {
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	74fb      	strb	r3, [r7, #19]
 8000d34:	7cfb      	ldrb	r3, [r7, #19]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d102      	bne.n	8000d40 <strtok_fr+0x30>
        s = NULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	e012      	b.n	8000d66 <strtok_fr+0x56>
    }
    else {
        do {
            if (c == delim) {
 8000d40:	7cfa      	ldrb	r2, [r7, #19]
 8000d42:	7afb      	ldrb	r3, [r7, #11]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d105      	bne.n	8000d54 <strtok_fr+0x44>
                *tail++ = '\0';
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	617a      	str	r2, [r7, #20]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
                break;
 8000d52:	e008      	b.n	8000d66 <strtok_fr+0x56>
           }
        }while ((c = *++tail) != '\0');
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	3301      	adds	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	74fb      	strb	r3, [r7, #19]
 8000d60:	7cfb      	ldrb	r3, [r7, #19]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1ec      	bne.n	8000d40 <strtok_fr+0x30>
    }
    *save_ptr = tail;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	601a      	str	r2, [r3, #0]
    return s;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	371c      	adds	r7, #28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <strtok_f>:

char *strtok_f (char *s, char delim)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	70fb      	strb	r3, [r7, #3]
    static char *save_ptr;
    return strtok_fr (s, delim, &save_ptr);
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <strtok_f+0x24>)
 8000d88:	4619      	mov	r1, r3
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffc0 	bl	8000d10 <strtok_fr>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200001fc 	.word	0x200001fc

08000da0 <GPS_Process>:

void GPS_Process(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	//$GPGGA,031956,2218.2035,N,11410.7595,E,1,04,3,9,005.9,M,-001.3,M,,*51
	//$GPRMC,081836,A,3751.65,S,14507.36,E,000.0,360.0,130998,011.3,E*62
	if( (HAL_GetTick()-GPS.LastTime>50) && (GPS.rxIndex>0)){
 8000da4:	f000 fc26 	bl	80015f4 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	4b83      	ldr	r3, [pc, #524]	; (8000fb8 <GPS_Process+0x218>)
 8000dac:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b32      	cmp	r3, #50	; 0x32
 8000db4:	f240 80f3 	bls.w	8000f9e <GPS_Process+0x1fe>
 8000db8:	4b7f      	ldr	r3, [pc, #508]	; (8000fb8 <GPS_Process+0x218>)
 8000dba:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 80ed 	beq.w	8000f9e <GPS_Process+0x1fe>

		str_gpgga = strstr((char*)GPS.rxBuffer,"$GPGGA,");
 8000dc4:	497d      	ldr	r1, [pc, #500]	; (8000fbc <GPS_Process+0x21c>)
 8000dc6:	487c      	ldr	r0, [pc, #496]	; (8000fb8 <GPS_Process+0x218>)
 8000dc8:	f002 fd78 	bl	80038bc <strstr>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4a7c      	ldr	r2, [pc, #496]	; (8000fc0 <GPS_Process+0x220>)
 8000dd0:	6013      	str	r3, [r2, #0]
		str_gprmc = strstr((char*)GPS.rxBuffer,"$GPRMC,");
 8000dd2:	497c      	ldr	r1, [pc, #496]	; (8000fc4 <GPS_Process+0x224>)
 8000dd4:	4878      	ldr	r0, [pc, #480]	; (8000fb8 <GPS_Process+0x218>)
 8000dd6:	f002 fd71 	bl	80038bc <strstr>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a7a      	ldr	r2, [pc, #488]	; (8000fc8 <GPS_Process+0x228>)
 8000dde:	6013      	str	r3, [r2, #0]

		if(str_gpgga != NULL && str_gprmc != NULL){
 8000de0:	4b77      	ldr	r3, [pc, #476]	; (8000fc0 <GPS_Process+0x220>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 80d0 	beq.w	8000f8a <GPS_Process+0x1ea>
 8000dea:	4b77      	ldr	r3, [pc, #476]	; (8000fc8 <GPS_Process+0x228>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 80cb 	beq.w	8000f8a <GPS_Process+0x1ea>
		    GPS.GPGGA.Message_ID = strtok_f(str_gpgga,',');
 8000df4:	4b72      	ldr	r3, [pc, #456]	; (8000fc0 <GPS_Process+0x220>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	212c      	movs	r1, #44	; 0x2c
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ffbc 	bl	8000d78 <strtok_f>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4a6d      	ldr	r2, [pc, #436]	; (8000fb8 <GPS_Process+0x218>)
 8000e04:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
		    GPS.GPGGA.Time = strtok_f(NULL,',');
 8000e08:	212c      	movs	r1, #44	; 0x2c
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff ffb4 	bl	8000d78 <strtok_f>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4a69      	ldr	r2, [pc, #420]	; (8000fb8 <GPS_Process+0x218>)
 8000e14:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
//		    GPS.GPGGA.Data_Valid = strtok_f(NULL,',');
		    GPS.GPGGA.Raw_Latitude = strtok_f(NULL,',');
 8000e18:	212c      	movs	r1, #44	; 0x2c
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff ffac 	bl	8000d78 <strtok_f>
 8000e20:	4603      	mov	r3, r0
 8000e22:	4a65      	ldr	r2, [pc, #404]	; (8000fb8 <GPS_Process+0x218>)
 8000e24:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		    GPS.GPGGA.N_S = strtok_f(NULL,',');
 8000e28:	212c      	movs	r1, #44	; 0x2c
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff ffa4 	bl	8000d78 <strtok_f>
 8000e30:	4603      	mov	r3, r0
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b60      	ldr	r3, [pc, #384]	; (8000fb8 <GPS_Process+0x218>)
 8000e36:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		    GPS.GPGGA.Raw_Longitude = strtok_f(NULL,',');
 8000e3a:	212c      	movs	r1, #44	; 0x2c
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff ff9b 	bl	8000d78 <strtok_f>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4a5c      	ldr	r2, [pc, #368]	; (8000fb8 <GPS_Process+0x218>)
 8000e46:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
		    GPS.GPGGA.E_W = strtok_f(NULL,',');
 8000e4a:	212c      	movs	r1, #44	; 0x2c
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f7ff ff93 	bl	8000d78 <strtok_f>
 8000e52:	4603      	mov	r3, r0
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4b58      	ldr	r3, [pc, #352]	; (8000fb8 <GPS_Process+0x218>)
 8000e58:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
		    GPS.GPGGA.tmp_misc = strtok_f(NULL,',');
 8000e5c:	212c      	movs	r1, #44	; 0x2c
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff ff8a 	bl	8000d78 <strtok_f>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4a54      	ldr	r2, [pc, #336]	; (8000fb8 <GPS_Process+0x218>)
 8000e68:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
		    GPS.GPGGA.tmp_misc = strtok_f(NULL,',');
 8000e6c:	212c      	movs	r1, #44	; 0x2c
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff ff82 	bl	8000d78 <strtok_f>
 8000e74:	4603      	mov	r3, r0
 8000e76:	4a50      	ldr	r2, [pc, #320]	; (8000fb8 <GPS_Process+0x218>)
 8000e78:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
		    GPS.GPGGA.tmp_misc = strtok_f(NULL,',');
 8000e7c:	212c      	movs	r1, #44	; 0x2c
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f7ff ff7a 	bl	8000d78 <strtok_f>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a4c      	ldr	r2, [pc, #304]	; (8000fb8 <GPS_Process+0x218>)
 8000e88:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
		    GPS.GPGGA.Altitude = atof(strtok_f(NULL,','));
 8000e8c:	212c      	movs	r1, #44	; 0x2c
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f7ff ff72 	bl	8000d78 <strtok_f>
 8000e94:	4603      	mov	r3, r0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f001 fe32 	bl	8002b00 <atof>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f7ff fe10 	bl	8000ac8 <__aeabi_d2f>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a43      	ldr	r2, [pc, #268]	; (8000fb8 <GPS_Process+0x218>)
 8000eac:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

		    GPS.GPGGA.Latitude = GpsToDecimalDegrees(GPS.GPGGA.Raw_Latitude, GPS.GPGGA.N_S);
 8000eb0:	4b41      	ldr	r3, [pc, #260]	; (8000fb8 <GPS_Process+0x218>)
 8000eb2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000eb6:	4a40      	ldr	r2, [pc, #256]	; (8000fb8 <GPS_Process+0x218>)
 8000eb8:	f892 2118 	ldrb.w	r2, [r2, #280]	; 0x118
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fe8a 	bl	8000bd8 <GpsToDecimalDegrees>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4a3c      	ldr	r2, [pc, #240]	; (8000fb8 <GPS_Process+0x218>)
 8000ec8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
		    GPS.GPGGA.Longitude = GpsToDecimalDegrees(GPS.GPGGA.Raw_Longitude, GPS.GPGGA.E_W);
 8000ecc:	4b3a      	ldr	r3, [pc, #232]	; (8000fb8 <GPS_Process+0x218>)
 8000ece:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8000ed2:	4a39      	ldr	r2, [pc, #228]	; (8000fb8 <GPS_Process+0x218>)
 8000ed4:	f892 2120 	ldrb.w	r2, [r2, #288]	; 0x120
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fe7c 	bl	8000bd8 <GpsToDecimalDegrees>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a35      	ldr	r2, [pc, #212]	; (8000fb8 <GPS_Process+0x218>)
 8000ee4:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

		    GPS.GPRMC.Message_ID = strtok_f(str_gprmc,',');
 8000ee8:	4b37      	ldr	r3, [pc, #220]	; (8000fc8 <GPS_Process+0x228>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	212c      	movs	r1, #44	; 0x2c
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff42 	bl	8000d78 <strtok_f>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a30      	ldr	r2, [pc, #192]	; (8000fb8 <GPS_Process+0x218>)
 8000ef8:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
		    GPS.GPRMC.tmp_misc = strtok_f(NULL,',');
 8000efc:	212c      	movs	r1, #44	; 0x2c
 8000efe:	2000      	movs	r0, #0
 8000f00:	f7ff ff3a 	bl	8000d78 <strtok_f>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a2c      	ldr	r2, [pc, #176]	; (8000fb8 <GPS_Process+0x218>)
 8000f08:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
		    GPS.GPRMC.tmp_misc = strtok_f(NULL,',');
 8000f0c:	212c      	movs	r1, #44	; 0x2c
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff ff32 	bl	8000d78 <strtok_f>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a28      	ldr	r2, [pc, #160]	; (8000fb8 <GPS_Process+0x218>)
 8000f18:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
		    GPS.GPRMC.tmp_misc = strtok_f(NULL,',');
 8000f1c:	212c      	movs	r1, #44	; 0x2c
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f7ff ff2a 	bl	8000d78 <strtok_f>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a24      	ldr	r2, [pc, #144]	; (8000fb8 <GPS_Process+0x218>)
 8000f28:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
		    GPS.GPRMC.tmp_misc = strtok_f(NULL,',');
 8000f2c:	212c      	movs	r1, #44	; 0x2c
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff ff22 	bl	8000d78 <strtok_f>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a20      	ldr	r2, [pc, #128]	; (8000fb8 <GPS_Process+0x218>)
 8000f38:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
		    GPS.GPRMC.tmp_misc = strtok_f(NULL,',');
 8000f3c:	212c      	movs	r1, #44	; 0x2c
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f7ff ff1a 	bl	8000d78 <strtok_f>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <GPS_Process+0x218>)
 8000f48:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
		    GPS.GPRMC.tmp_misc = strtok_f(NULL,',');
 8000f4c:	212c      	movs	r1, #44	; 0x2c
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ff12 	bl	8000d78 <strtok_f>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a18      	ldr	r2, [pc, #96]	; (8000fb8 <GPS_Process+0x218>)
 8000f58:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138

		    GPS.GPRMC.Speed_ms = atof(strtok_f(NULL,',')) * 0.514; //knots to m/s conversion.
 8000f5c:	212c      	movs	r1, #44	; 0x2c
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f7ff ff0a 	bl	8000d78 <strtok_f>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f001 fdca 	bl	8002b00 <atof>
 8000f6c:	a310      	add	r3, pc, #64	; (adr r3, 8000fb0 <GPS_Process+0x210>)
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	f7ff fab1 	bl	80004d8 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f7ff fda3 	bl	8000ac8 <__aeabi_d2f>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <GPS_Process+0x218>)
 8000f86:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
		}		
		memset(GPS.rxBuffer,0,sizeof(GPS.rxBuffer));
 8000f8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <GPS_Process+0x218>)
 8000f92:	f001 fdf5 	bl	8002b80 <memset>
		GPS.rxIndex=0;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <GPS_Process+0x218>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	}
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	490a      	ldr	r1, [pc, #40]	; (8000fcc <GPS_Process+0x22c>)
 8000fa2:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <GPS_Process+0x230>)
 8000fa4:	f001 fa9f 	bl	80024e6 <HAL_UART_Receive_IT>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	f3af 8000 	nop.w
 8000fb0:	20c49ba6 	.word	0x20c49ba6
 8000fb4:	3fe072b0 	.word	0x3fe072b0
 8000fb8:	20000210 	.word	0x20000210
 8000fbc:	080073f8 	.word	0x080073f8
 8000fc0:	20000350 	.word	0x20000350
 8000fc4:	08007400 	.word	0x08007400
 8000fc8:	2000020c 	.word	0x2000020c
 8000fcc:	20000312 	.word	0x20000312
 8000fd0:	20000394 	.word	0x20000394

08000fd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_GPIO_Init+0x40>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <MX_GPIO_Init+0x40>)
 8000fe0:	f043 0320 	orr.w	r3, r3, #32
 8000fe4:	6193      	str	r3, [r2, #24]
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <MX_GPIO_Init+0x40>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	f003 0320 	and.w	r3, r3, #32
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <MX_GPIO_Init+0x40>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	4a07      	ldr	r2, [pc, #28]	; (8001014 <MX_GPIO_Init+0x40>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	6193      	str	r3, [r2, #24]
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <MX_GPIO_Init+0x40>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]

}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	40021000 	.word	0x40021000

08001018 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPS_CallBack();
 8001020:	f7ff fe4a 	bl	8000cb8 <GPS_CallBack>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001030:	f000 fa88 	bl	8001544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001034:	f000 f80b 	bl	800104e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001038:	f7ff ffcc 	bl	8000fd4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800103c:	f000 f97c 	bl	8001338 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001040:	f000 f9a4 	bl	800138c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 8001044:	f7ff fe24 	bl	8000c90 <GPS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GPS_Process();
 8001048:	f7ff feaa 	bl	8000da0 <GPS_Process>
 800104c:	e7fc      	b.n	8001048 <main+0x1c>

0800104e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b090      	sub	sp, #64	; 0x40
 8001052:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001054:	f107 0318 	add.w	r3, r7, #24
 8001058:	2228      	movs	r2, #40	; 0x28
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fd8f 	bl	8002b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001070:	2301      	movs	r3, #1
 8001072:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001074:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001078:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107e:	2301      	movs	r3, #1
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001082:	2302      	movs	r3, #2
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001086:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800108a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800108c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001090:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001092:	f107 0318 	add.w	r3, r7, #24
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fdbe 	bl	8001c18 <HAL_RCC_OscConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010a2:	f000 f819 	bl	80010d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a6:	230f      	movs	r3, #15
 80010a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010aa:	2302      	movs	r3, #2
 80010ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2102      	movs	r1, #2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 f829 	bl	8002118 <HAL_RCC_ClockConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010cc:	f000 f804 	bl	80010d8 <Error_Handler>
  }
}
 80010d0:	bf00      	nop
 80010d2:	3740      	adds	r7, #64	; 0x40
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <Error_Handler+0x8>
	...

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_MspInit+0x5c>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	4a14      	ldr	r2, [pc, #80]	; (8001140 <HAL_MspInit+0x5c>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6193      	str	r3, [r2, #24]
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_MspInit+0x5c>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_MspInit+0x5c>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <HAL_MspInit+0x5c>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110c:	61d3      	str	r3, [r2, #28]
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_MspInit+0x5c>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <HAL_MspInit+0x60>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_MspInit+0x60>)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	40021000 	.word	0x40021000
 8001144:	40010000 	.word	0x40010000

08001148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800114c:	e7fe      	b.n	800114c <NMI_Handler+0x4>

0800114e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <HardFault_Handler+0x4>

08001154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <MemManage_Handler+0x4>

0800115a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <BusFault_Handler+0x4>

08001160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <UsageFault_Handler+0x4>

08001166 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr

08001172 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr

0800118a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118e:	f000 fa1f 	bl	80015d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <USART2_IRQHandler+0x10>)
 800119e:	f001 f9f7 	bl	8002590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000394 	.word	0x20000394

080011ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
	return 1;
 80011b0:	2301      	movs	r3, #1
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <_kill>:

int _kill(int pid, int sig)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011c4:	f001 fca4 	bl	8002b10 <__errno>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2216      	movs	r2, #22
 80011cc:	601a      	str	r2, [r3, #0]
	return -1;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <_exit>:

void _exit (int status)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011e2:	f04f 31ff 	mov.w	r1, #4294967295
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffe7 	bl	80011ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80011ec:	e7fe      	b.n	80011ec <_exit+0x12>

080011ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	e00a      	b.n	8001216 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001200:	f3af 8000 	nop.w
 8001204:	4601      	mov	r1, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	60ba      	str	r2, [r7, #8]
 800120c:	b2ca      	uxtb	r2, r1
 800120e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3301      	adds	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	429a      	cmp	r2, r3
 800121c:	dbf0      	blt.n	8001200 <_read+0x12>
	}

return len;
 800121e:	687b      	ldr	r3, [r7, #4]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	e009      	b.n	800124e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	60ba      	str	r2, [r7, #8]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	3301      	adds	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	429a      	cmp	r2, r3
 8001254:	dbf1      	blt.n	800123a <_write+0x12>
	}
	return len;
 8001256:	687b      	ldr	r3, [r7, #4]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <_close>:

int _close(int file)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	return -1;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001286:	605a      	str	r2, [r3, #4]
	return 0;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <_isatty>:

int _isatty(int file)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	return 1;
 800129c:	2301      	movs	r3, #1
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
	return 0;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <_sbrk+0x5c>)
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <_sbrk+0x60>)
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <_sbrk+0x64>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <_sbrk+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d207      	bcs.n	8001300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f0:	f001 fc0e 	bl	8002b10 <__errno>
 80012f4:	4603      	mov	r3, r0
 80012f6:	220c      	movs	r2, #12
 80012f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	e009      	b.n	8001314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <_sbrk+0x64>)
 8001310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20005000 	.word	0x20005000
 8001320:	00000400 	.word	0x00000400
 8001324:	20000200 	.word	0x20000200
 8001328:	200003e8 	.word	0x200003e8

0800132c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <MX_USART1_UART_Init+0x50>)
 8001340:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 8001344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001348:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 800135e:	220c      	movs	r2, #12
 8001360:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 8001370:	f001 f86c 	bl	800244c <HAL_UART_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800137a:	f7ff fead 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000354 	.word	0x20000354
 8001388:	40013800 	.word	0x40013800

0800138c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <MX_USART2_UART_Init+0x50>)
 8001394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 8001398:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800139c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013c4:	f001 f842 	bl	800244c <HAL_UART_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ce:	f7ff fe83 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000394 	.word	0x20000394
 80013dc:	40004400 	.word	0x40004400

080013e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0318 	add.w	r3, r7, #24
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a3b      	ldr	r2, [pc, #236]	; (80014e8 <HAL_UART_MspInit+0x108>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d132      	bne.n	8001466 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001400:	4b3a      	ldr	r3, [pc, #232]	; (80014ec <HAL_UART_MspInit+0x10c>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a39      	ldr	r2, [pc, #228]	; (80014ec <HAL_UART_MspInit+0x10c>)
 8001406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b37      	ldr	r3, [pc, #220]	; (80014ec <HAL_UART_MspInit+0x10c>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001418:	4b34      	ldr	r3, [pc, #208]	; (80014ec <HAL_UART_MspInit+0x10c>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a33      	ldr	r2, [pc, #204]	; (80014ec <HAL_UART_MspInit+0x10c>)
 800141e:	f043 0304 	orr.w	r3, r3, #4
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b31      	ldr	r3, [pc, #196]	; (80014ec <HAL_UART_MspInit+0x10c>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001430:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 0318 	add.w	r3, r7, #24
 8001442:	4619      	mov	r1, r3
 8001444:	482a      	ldr	r0, [pc, #168]	; (80014f0 <HAL_UART_MspInit+0x110>)
 8001446:	f000 fa63 	bl	8001910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800144a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800144e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	4619      	mov	r1, r3
 800145e:	4824      	ldr	r0, [pc, #144]	; (80014f0 <HAL_UART_MspInit+0x110>)
 8001460:	f000 fa56 	bl	8001910 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001464:	e03c      	b.n	80014e0 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a22      	ldr	r2, [pc, #136]	; (80014f4 <HAL_UART_MspInit+0x114>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d137      	bne.n	80014e0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <HAL_UART_MspInit+0x10c>)
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <HAL_UART_MspInit+0x10c>)
 8001476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147a:	61d3      	str	r3, [r2, #28]
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <HAL_UART_MspInit+0x10c>)
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <HAL_UART_MspInit+0x10c>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a17      	ldr	r2, [pc, #92]	; (80014ec <HAL_UART_MspInit+0x10c>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_UART_MspInit+0x10c>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014a0:	2304      	movs	r3, #4
 80014a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f107 0318 	add.w	r3, r7, #24
 80014b0:	4619      	mov	r1, r3
 80014b2:	480f      	ldr	r0, [pc, #60]	; (80014f0 <HAL_UART_MspInit+0x110>)
 80014b4:	f000 fa2c 	bl	8001910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014b8:	2308      	movs	r3, #8
 80014ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0318 	add.w	r3, r7, #24
 80014c8:	4619      	mov	r1, r3
 80014ca:	4809      	ldr	r0, [pc, #36]	; (80014f0 <HAL_UART_MspInit+0x110>)
 80014cc:	f000 fa20 	bl	8001910 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	2026      	movs	r0, #38	; 0x26
 80014d6:	f000 f96e 	bl	80017b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014da:	2026      	movs	r0, #38	; 0x26
 80014dc:	f000 f987 	bl	80017ee <HAL_NVIC_EnableIRQ>
}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40013800 	.word	0x40013800
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010800 	.word	0x40010800
 80014f4:	40004400 	.word	0x40004400

080014f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80014f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80014fa:	e003      	b.n	8001504 <LoopCopyDataInit>

080014fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80014fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001500:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001502:	3104      	adds	r1, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001504:	480a      	ldr	r0, [pc, #40]	; (8001530 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001508:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800150a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800150c:	d3f6      	bcc.n	80014fc <CopyDataInit>
  ldr r2, =_sbss
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001510:	e002      	b.n	8001518 <LoopFillZerobss>

08001512 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001514:	f842 3b04 	str.w	r3, [r2], #4

08001518 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800151a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800151c:	d3f9      	bcc.n	8001512 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800151e:	f7ff ff05 	bl	800132c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001522:	f001 fafb 	bl	8002b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001526:	f7ff fd81 	bl	800102c <main>
  bx lr
 800152a:	4770      	bx	lr
  ldr r3, =_sidata
 800152c:	080078ec 	.word	0x080078ec
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001534:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001538:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 800153c:	200003e8 	.word	0x200003e8

08001540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC1_2_IRQHandler>
	...

08001544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_Init+0x28>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <HAL_Init+0x28>)
 800154e:	f043 0310 	orr.w	r3, r3, #16
 8001552:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001554:	2003      	movs	r0, #3
 8001556:	f000 f923 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155a:	2000      	movs	r0, #0
 800155c:	f000 f808 	bl	8001570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001560:	f7ff fdc0 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40022000 	.word	0x40022000

08001570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_InitTick+0x54>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_InitTick+0x58>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001586:	fbb3 f3f1 	udiv	r3, r3, r1
 800158a:	fbb2 f3f3 	udiv	r3, r2, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f93b 	bl	800180a <HAL_SYSTICK_Config>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e00e      	b.n	80015bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b0f      	cmp	r3, #15
 80015a2:	d80a      	bhi.n	80015ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a4:	2200      	movs	r2, #0
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f000 f903 	bl	80017b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b0:	4a06      	ldr	r2, [pc, #24]	; (80015cc <HAL_InitTick+0x5c>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e000      	b.n	80015bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20000008 	.word	0x20000008
 80015cc:	20000004 	.word	0x20000004

080015d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_IncTick+0x1c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_IncTick+0x20>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	4a03      	ldr	r2, [pc, #12]	; (80015f0 <HAL_IncTick+0x20>)
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	20000008 	.word	0x20000008
 80015f0:	200003d4 	.word	0x200003d4

080015f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return uwTick;
 80015f8:	4b02      	ldr	r3, [pc, #8]	; (8001604 <HAL_GetTick+0x10>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	200003d4 	.word	0x200003d4

08001608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001624:	4013      	ands	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <__NVIC_GetPriorityGrouping+0x18>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	f003 0307 	and.w	r3, r3, #7
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	2b00      	cmp	r3, #0
 800167c:	db0b      	blt.n	8001696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f003 021f 	and.w	r2, r3, #31
 8001684:	4906      	ldr	r1, [pc, #24]	; (80016a0 <__NVIC_EnableIRQ+0x34>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	095b      	lsrs	r3, r3, #5
 800168c:	2001      	movs	r0, #1
 800168e:	fa00 f202 	lsl.w	r2, r0, r2
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db0a      	blt.n	80016ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	490c      	ldr	r1, [pc, #48]	; (80016f0 <__NVIC_SetPriority+0x4c>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016cc:	e00a      	b.n	80016e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <__NVIC_SetPriority+0x50>)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3b04      	subs	r3, #4
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	440b      	add	r3, r1
 80016e2:	761a      	strb	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000e100 	.word	0xe000e100
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f1c3 0307 	rsb	r3, r3, #7
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf28      	it	cs
 8001716:	2304      	movcs	r3, #4
 8001718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3304      	adds	r3, #4
 800171e:	2b06      	cmp	r3, #6
 8001720:	d902      	bls.n	8001728 <NVIC_EncodePriority+0x30>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b03      	subs	r3, #3
 8001726:	e000      	b.n	800172a <NVIC_EncodePriority+0x32>
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	f04f 32ff 	mov.w	r2, #4294967295
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43d9      	mvns	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	4313      	orrs	r3, r2
         );
}
 8001752:	4618      	mov	r0, r3
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800176c:	d301      	bcc.n	8001772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176e:	2301      	movs	r3, #1
 8001770:	e00f      	b.n	8001792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <SysTick_Config+0x40>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177a:	210f      	movs	r1, #15
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f7ff ff90 	bl	80016a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <SysTick_Config+0x40>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <SysTick_Config+0x40>)
 800178c:	2207      	movs	r2, #7
 800178e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	e000e010 	.word	0xe000e010

080017a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff2d 	bl	8001608 <__NVIC_SetPriorityGrouping>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c8:	f7ff ff42 	bl	8001650 <__NVIC_GetPriorityGrouping>
 80017cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff ff90 	bl	80016f8 <NVIC_EncodePriority>
 80017d8:	4602      	mov	r2, r0
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff5f 	bl	80016a4 <__NVIC_SetPriority>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff35 	bl	800166c <__NVIC_EnableIRQ>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ffa2 	bl	800175c <SysTick_Config>
 8001818:	4603      	mov	r3, r0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001836:	2b02      	cmp	r3, #2
 8001838:	d005      	beq.n	8001846 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2204      	movs	r2, #4
 800183e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
 8001844:	e051      	b.n	80018ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 020e 	bic.w	r2, r2, #14
 8001854:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0201 	bic.w	r2, r2, #1
 8001864:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a22      	ldr	r2, [pc, #136]	; (80018f4 <HAL_DMA_Abort_IT+0xd0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d029      	beq.n	80018c4 <HAL_DMA_Abort_IT+0xa0>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a20      	ldr	r2, [pc, #128]	; (80018f8 <HAL_DMA_Abort_IT+0xd4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d022      	beq.n	80018c0 <HAL_DMA_Abort_IT+0x9c>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a1f      	ldr	r2, [pc, #124]	; (80018fc <HAL_DMA_Abort_IT+0xd8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d01a      	beq.n	80018ba <HAL_DMA_Abort_IT+0x96>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1d      	ldr	r2, [pc, #116]	; (8001900 <HAL_DMA_Abort_IT+0xdc>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d012      	beq.n	80018b4 <HAL_DMA_Abort_IT+0x90>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1c      	ldr	r2, [pc, #112]	; (8001904 <HAL_DMA_Abort_IT+0xe0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d00a      	beq.n	80018ae <HAL_DMA_Abort_IT+0x8a>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <HAL_DMA_Abort_IT+0xe4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d102      	bne.n	80018a8 <HAL_DMA_Abort_IT+0x84>
 80018a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018a6:	e00e      	b.n	80018c6 <HAL_DMA_Abort_IT+0xa2>
 80018a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018ac:	e00b      	b.n	80018c6 <HAL_DMA_Abort_IT+0xa2>
 80018ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018b2:	e008      	b.n	80018c6 <HAL_DMA_Abort_IT+0xa2>
 80018b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b8:	e005      	b.n	80018c6 <HAL_DMA_Abort_IT+0xa2>
 80018ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018be:	e002      	b.n	80018c6 <HAL_DMA_Abort_IT+0xa2>
 80018c0:	2310      	movs	r3, #16
 80018c2:	e000      	b.n	80018c6 <HAL_DMA_Abort_IT+0xa2>
 80018c4:	2301      	movs	r3, #1
 80018c6:	4a11      	ldr	r2, [pc, #68]	; (800190c <HAL_DMA_Abort_IT+0xe8>)
 80018c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	4798      	blx	r3
    } 
  }
  return status;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40020008 	.word	0x40020008
 80018f8:	4002001c 	.word	0x4002001c
 80018fc:	40020030 	.word	0x40020030
 8001900:	40020044 	.word	0x40020044
 8001904:	40020058 	.word	0x40020058
 8001908:	4002006c 	.word	0x4002006c
 800190c:	40020000 	.word	0x40020000

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b08b      	sub	sp, #44	; 0x2c
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001922:	e169      	b.n	8001bf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001924:	2201      	movs	r2, #1
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	429a      	cmp	r2, r3
 800193e:	f040 8158 	bne.w	8001bf2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4a9a      	ldr	r2, [pc, #616]	; (8001bb0 <HAL_GPIO_Init+0x2a0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d05e      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 800194c:	4a98      	ldr	r2, [pc, #608]	; (8001bb0 <HAL_GPIO_Init+0x2a0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d875      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 8001952:	4a98      	ldr	r2, [pc, #608]	; (8001bb4 <HAL_GPIO_Init+0x2a4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d058      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 8001958:	4a96      	ldr	r2, [pc, #600]	; (8001bb4 <HAL_GPIO_Init+0x2a4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d86f      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 800195e:	4a96      	ldr	r2, [pc, #600]	; (8001bb8 <HAL_GPIO_Init+0x2a8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d052      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 8001964:	4a94      	ldr	r2, [pc, #592]	; (8001bb8 <HAL_GPIO_Init+0x2a8>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d869      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 800196a:	4a94      	ldr	r2, [pc, #592]	; (8001bbc <HAL_GPIO_Init+0x2ac>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d04c      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 8001970:	4a92      	ldr	r2, [pc, #584]	; (8001bbc <HAL_GPIO_Init+0x2ac>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d863      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 8001976:	4a92      	ldr	r2, [pc, #584]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d046      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
 800197c:	4a90      	ldr	r2, [pc, #576]	; (8001bc0 <HAL_GPIO_Init+0x2b0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d85d      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 8001982:	2b12      	cmp	r3, #18
 8001984:	d82a      	bhi.n	80019dc <HAL_GPIO_Init+0xcc>
 8001986:	2b12      	cmp	r3, #18
 8001988:	d859      	bhi.n	8001a3e <HAL_GPIO_Init+0x12e>
 800198a:	a201      	add	r2, pc, #4	; (adr r2, 8001990 <HAL_GPIO_Init+0x80>)
 800198c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001990:	08001a0b 	.word	0x08001a0b
 8001994:	080019e5 	.word	0x080019e5
 8001998:	080019f7 	.word	0x080019f7
 800199c:	08001a39 	.word	0x08001a39
 80019a0:	08001a3f 	.word	0x08001a3f
 80019a4:	08001a3f 	.word	0x08001a3f
 80019a8:	08001a3f 	.word	0x08001a3f
 80019ac:	08001a3f 	.word	0x08001a3f
 80019b0:	08001a3f 	.word	0x08001a3f
 80019b4:	08001a3f 	.word	0x08001a3f
 80019b8:	08001a3f 	.word	0x08001a3f
 80019bc:	08001a3f 	.word	0x08001a3f
 80019c0:	08001a3f 	.word	0x08001a3f
 80019c4:	08001a3f 	.word	0x08001a3f
 80019c8:	08001a3f 	.word	0x08001a3f
 80019cc:	08001a3f 	.word	0x08001a3f
 80019d0:	08001a3f 	.word	0x08001a3f
 80019d4:	080019ed 	.word	0x080019ed
 80019d8:	08001a01 	.word	0x08001a01
 80019dc:	4a79      	ldr	r2, [pc, #484]	; (8001bc4 <HAL_GPIO_Init+0x2b4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d013      	beq.n	8001a0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019e2:	e02c      	b.n	8001a3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	623b      	str	r3, [r7, #32]
          break;
 80019ea:	e029      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	3304      	adds	r3, #4
 80019f2:	623b      	str	r3, [r7, #32]
          break;
 80019f4:	e024      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	3308      	adds	r3, #8
 80019fc:	623b      	str	r3, [r7, #32]
          break;
 80019fe:	e01f      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	330c      	adds	r3, #12
 8001a06:	623b      	str	r3, [r7, #32]
          break;
 8001a08:	e01a      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a12:	2304      	movs	r3, #4
 8001a14:	623b      	str	r3, [r7, #32]
          break;
 8001a16:	e013      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a20:	2308      	movs	r3, #8
 8001a22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	611a      	str	r2, [r3, #16]
          break;
 8001a2a:	e009      	b.n	8001a40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	615a      	str	r2, [r3, #20]
          break;
 8001a36:	e003      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
          break;
 8001a3c:	e000      	b.n	8001a40 <HAL_GPIO_Init+0x130>
          break;
 8001a3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2bff      	cmp	r3, #255	; 0xff
 8001a44:	d801      	bhi.n	8001a4a <HAL_GPIO_Init+0x13a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	e001      	b.n	8001a4e <HAL_GPIO_Init+0x13e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2bff      	cmp	r3, #255	; 0xff
 8001a54:	d802      	bhi.n	8001a5c <HAL_GPIO_Init+0x14c>
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	e002      	b.n	8001a62 <HAL_GPIO_Init+0x152>
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	3b08      	subs	r3, #8
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	210f      	movs	r1, #15
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	401a      	ands	r2, r3
 8001a74:	6a39      	ldr	r1, [r7, #32]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 80b1 	beq.w	8001bf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a90:	4b4d      	ldr	r3, [pc, #308]	; (8001bc8 <HAL_GPIO_Init+0x2b8>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a4c      	ldr	r2, [pc, #304]	; (8001bc8 <HAL_GPIO_Init+0x2b8>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <HAL_GPIO_Init+0x2b8>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa8:	4a48      	ldr	r2, [pc, #288]	; (8001bcc <HAL_GPIO_Init+0x2bc>)
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a40      	ldr	r2, [pc, #256]	; (8001bd0 <HAL_GPIO_Init+0x2c0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d013      	beq.n	8001afc <HAL_GPIO_Init+0x1ec>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a3f      	ldr	r2, [pc, #252]	; (8001bd4 <HAL_GPIO_Init+0x2c4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d00d      	beq.n	8001af8 <HAL_GPIO_Init+0x1e8>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a3e      	ldr	r2, [pc, #248]	; (8001bd8 <HAL_GPIO_Init+0x2c8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d007      	beq.n	8001af4 <HAL_GPIO_Init+0x1e4>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a3d      	ldr	r2, [pc, #244]	; (8001bdc <HAL_GPIO_Init+0x2cc>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d101      	bne.n	8001af0 <HAL_GPIO_Init+0x1e0>
 8001aec:	2303      	movs	r3, #3
 8001aee:	e006      	b.n	8001afe <HAL_GPIO_Init+0x1ee>
 8001af0:	2304      	movs	r3, #4
 8001af2:	e004      	b.n	8001afe <HAL_GPIO_Init+0x1ee>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e002      	b.n	8001afe <HAL_GPIO_Init+0x1ee>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_GPIO_Init+0x1ee>
 8001afc:	2300      	movs	r3, #0
 8001afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b00:	f002 0203 	and.w	r2, r2, #3
 8001b04:	0092      	lsls	r2, r2, #2
 8001b06:	4093      	lsls	r3, r2
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b0e:	492f      	ldr	r1, [pc, #188]	; (8001bcc <HAL_GPIO_Init+0x2bc>)
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	3302      	adds	r3, #2
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b28:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	492c      	ldr	r1, [pc, #176]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b36:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	4928      	ldr	r1, [pc, #160]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b50:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	4922      	ldr	r1, [pc, #136]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	491e      	ldr	r1, [pc, #120]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d006      	beq.n	8001b86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b78:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	4918      	ldr	r1, [pc, #96]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]
 8001b84:	e006      	b.n	8001b94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b86:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	4914      	ldr	r1, [pc, #80]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d021      	beq.n	8001be4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	490e      	ldr	r1, [pc, #56]	; (8001be0 <HAL_GPIO_Init+0x2d0>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	60cb      	str	r3, [r1, #12]
 8001bac:	e021      	b.n	8001bf2 <HAL_GPIO_Init+0x2e2>
 8001bae:	bf00      	nop
 8001bb0:	10320000 	.word	0x10320000
 8001bb4:	10310000 	.word	0x10310000
 8001bb8:	10220000 	.word	0x10220000
 8001bbc:	10210000 	.word	0x10210000
 8001bc0:	10120000 	.word	0x10120000
 8001bc4:	10110000 	.word	0x10110000
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010000 	.word	0x40010000
 8001bd0:	40010800 	.word	0x40010800
 8001bd4:	40010c00 	.word	0x40010c00
 8001bd8:	40011000 	.word	0x40011000
 8001bdc:	40011400 	.word	0x40011400
 8001be0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_GPIO_Init+0x304>)
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	4909      	ldr	r1, [pc, #36]	; (8001c14 <HAL_GPIO_Init+0x304>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f47f ae8e 	bne.w	8001924 <HAL_GPIO_Init+0x14>
  }
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	372c      	adds	r7, #44	; 0x2c
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	40010400 	.word	0x40010400

08001c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e26c      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 8087 	beq.w	8001d46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c38:	4b92      	ldr	r3, [pc, #584]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d00c      	beq.n	8001c5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c44:	4b8f      	ldr	r3, [pc, #572]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d112      	bne.n	8001c76 <HAL_RCC_OscConfig+0x5e>
 8001c50:	4b8c      	ldr	r3, [pc, #560]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5c:	d10b      	bne.n	8001c76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5e:	4b89      	ldr	r3, [pc, #548]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d06c      	beq.n	8001d44 <HAL_RCC_OscConfig+0x12c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d168      	bne.n	8001d44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e246      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7e:	d106      	bne.n	8001c8e <HAL_RCC_OscConfig+0x76>
 8001c80:	4b80      	ldr	r3, [pc, #512]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a7f      	ldr	r2, [pc, #508]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	e02e      	b.n	8001cec <HAL_RCC_OscConfig+0xd4>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x98>
 8001c96:	4b7b      	ldr	r3, [pc, #492]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a7a      	ldr	r2, [pc, #488]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	4b78      	ldr	r3, [pc, #480]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a77      	ldr	r2, [pc, #476]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e01d      	b.n	8001cec <HAL_RCC_OscConfig+0xd4>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0xbc>
 8001cba:	4b72      	ldr	r3, [pc, #456]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a71      	ldr	r2, [pc, #452]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b6f      	ldr	r3, [pc, #444]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a6e      	ldr	r2, [pc, #440]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e00b      	b.n	8001cec <HAL_RCC_OscConfig+0xd4>
 8001cd4:	4b6b      	ldr	r3, [pc, #428]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a6a      	ldr	r2, [pc, #424]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b68      	ldr	r3, [pc, #416]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a67      	ldr	r2, [pc, #412]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d013      	beq.n	8001d1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fc7e 	bl	80015f4 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cfc:	f7ff fc7a 	bl	80015f4 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	; 0x64
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e1fa      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	4b5d      	ldr	r3, [pc, #372]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0xe4>
 8001d1a:	e014      	b.n	8001d46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fc6a 	bl	80015f4 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff fc66 	bl	80015f4 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e1e6      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	4b53      	ldr	r3, [pc, #332]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x10c>
 8001d42:	e000      	b.n	8001d46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d063      	beq.n	8001e1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d52:	4b4c      	ldr	r3, [pc, #304]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00b      	beq.n	8001d76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d5e:	4b49      	ldr	r3, [pc, #292]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d11c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x18c>
 8001d6a:	4b46      	ldr	r3, [pc, #280]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d116      	bne.n	8001da4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d76:	4b43      	ldr	r3, [pc, #268]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d005      	beq.n	8001d8e <HAL_RCC_OscConfig+0x176>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d001      	beq.n	8001d8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e1ba      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8e:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4939      	ldr	r1, [pc, #228]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da2:	e03a      	b.n	8001e1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d020      	beq.n	8001dee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dac:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db2:	f7ff fc1f 	bl	80015f4 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dba:	f7ff fc1b 	bl	80015f4 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e19b      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4927      	ldr	r1, [pc, #156]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]
 8001dec:	e015      	b.n	8001e1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dee:	4b26      	ldr	r3, [pc, #152]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fbfe 	bl	80015f4 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfc:	f7ff fbfa 	bl	80015f4 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e17a      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d03a      	beq.n	8001e9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d019      	beq.n	8001e62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e2e:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_RCC_OscConfig+0x274>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e34:	f7ff fbde 	bl	80015f4 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7ff fbda 	bl	80015f4 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e15a      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f000 fad8 	bl	8002410 <RCC_Delay>
 8001e60:	e01c      	b.n	8001e9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_RCC_OscConfig+0x274>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e68:	f7ff fbc4 	bl	80015f4 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6e:	e00f      	b.n	8001e90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e70:	f7ff fbc0 	bl	80015f4 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d908      	bls.n	8001e90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e140      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	42420000 	.word	0x42420000
 8001e8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e90:	4b9e      	ldr	r3, [pc, #632]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1e9      	bne.n	8001e70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80a6 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eae:	4b97      	ldr	r3, [pc, #604]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10d      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	4b94      	ldr	r3, [pc, #592]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	4a93      	ldr	r2, [pc, #588]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	61d3      	str	r3, [r2, #28]
 8001ec6:	4b91      	ldr	r3, [pc, #580]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	4b8e      	ldr	r3, [pc, #568]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d118      	bne.n	8001f14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee2:	4b8b      	ldr	r3, [pc, #556]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a8a      	ldr	r2, [pc, #552]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eee:	f7ff fb81 	bl	80015f4 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef6:	f7ff fb7d 	bl	80015f4 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b64      	cmp	r3, #100	; 0x64
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e0fd      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	4b81      	ldr	r3, [pc, #516]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x312>
 8001f1c:	4b7b      	ldr	r3, [pc, #492]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	4a7a      	ldr	r2, [pc, #488]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6213      	str	r3, [r2, #32]
 8001f28:	e02d      	b.n	8001f86 <HAL_RCC_OscConfig+0x36e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x334>
 8001f32:	4b76      	ldr	r3, [pc, #472]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	4a75      	ldr	r2, [pc, #468]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	6213      	str	r3, [r2, #32]
 8001f3e:	4b73      	ldr	r3, [pc, #460]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4a72      	ldr	r2, [pc, #456]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	f023 0304 	bic.w	r3, r3, #4
 8001f48:	6213      	str	r3, [r2, #32]
 8001f4a:	e01c      	b.n	8001f86 <HAL_RCC_OscConfig+0x36e>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d10c      	bne.n	8001f6e <HAL_RCC_OscConfig+0x356>
 8001f54:	4b6d      	ldr	r3, [pc, #436]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	4a6c      	ldr	r2, [pc, #432]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	6213      	str	r3, [r2, #32]
 8001f60:	4b6a      	ldr	r3, [pc, #424]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	4a69      	ldr	r2, [pc, #420]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6213      	str	r3, [r2, #32]
 8001f6c:	e00b      	b.n	8001f86 <HAL_RCC_OscConfig+0x36e>
 8001f6e:	4b67      	ldr	r3, [pc, #412]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	4a66      	ldr	r2, [pc, #408]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	6213      	str	r3, [r2, #32]
 8001f7a:	4b64      	ldr	r3, [pc, #400]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4a63      	ldr	r2, [pc, #396]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f80:	f023 0304 	bic.w	r3, r3, #4
 8001f84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d015      	beq.n	8001fba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff fb31 	bl	80015f4 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f7ff fb2d 	bl	80015f4 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e0ab      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fac:	4b57      	ldr	r3, [pc, #348]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0ee      	beq.n	8001f96 <HAL_RCC_OscConfig+0x37e>
 8001fb8:	e014      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7ff fb1b 	bl	80015f4 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7ff fb17 	bl	80015f4 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e095      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd8:	4b4c      	ldr	r3, [pc, #304]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1ee      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fe4:	7dfb      	ldrb	r3, [r7, #23]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fea:	4b48      	ldr	r3, [pc, #288]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4a47      	ldr	r2, [pc, #284]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8081 	beq.w	8002102 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002000:	4b42      	ldr	r3, [pc, #264]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b08      	cmp	r3, #8
 800200a:	d061      	beq.n	80020d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d146      	bne.n	80020a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002014:	4b3f      	ldr	r3, [pc, #252]	; (8002114 <HAL_RCC_OscConfig+0x4fc>)
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7ff faeb 	bl	80015f4 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002022:	f7ff fae7 	bl	80015f4 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e067      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002034:	4b35      	ldr	r3, [pc, #212]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f0      	bne.n	8002022 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002048:	d108      	bne.n	800205c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800204a:	4b30      	ldr	r3, [pc, #192]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	492d      	ldr	r1, [pc, #180]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800205c:	4b2b      	ldr	r3, [pc, #172]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a19      	ldr	r1, [r3, #32]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	430b      	orrs	r3, r1
 800206e:	4927      	ldr	r1, [pc, #156]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002074:	4b27      	ldr	r3, [pc, #156]	; (8002114 <HAL_RCC_OscConfig+0x4fc>)
 8002076:	2201      	movs	r2, #1
 8002078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7ff fabb 	bl	80015f4 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002082:	f7ff fab7 	bl	80015f4 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e037      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002094:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x46a>
 80020a0:	e02f      	b.n	8002102 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a2:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <HAL_RCC_OscConfig+0x4fc>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7ff faa4 	bl	80015f4 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b0:	f7ff faa0 	bl	80015f4 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e020      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x498>
 80020ce:	e018      	b.n	8002102 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e013      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d106      	bne.n	80020fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d001      	beq.n	8002102 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40021000 	.word	0x40021000
 8002110:	40007000 	.word	0x40007000
 8002114:	42420060 	.word	0x42420060

08002118 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0d0      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800212c:	4b6a      	ldr	r3, [pc, #424]	; (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d910      	bls.n	800215c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b67      	ldr	r3, [pc, #412]	; (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 0207 	bic.w	r2, r3, #7
 8002142:	4965      	ldr	r1, [pc, #404]	; (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b63      	ldr	r3, [pc, #396]	; (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0b8      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d020      	beq.n	80021aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002174:	4b59      	ldr	r3, [pc, #356]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4a58      	ldr	r2, [pc, #352]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800217e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800218c:	4b53      	ldr	r3, [pc, #332]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a52      	ldr	r2, [pc, #328]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002196:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002198:	4b50      	ldr	r3, [pc, #320]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	494d      	ldr	r1, [pc, #308]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d040      	beq.n	8002238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	4b47      	ldr	r3, [pc, #284]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d115      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e07f      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	4b41      	ldr	r3, [pc, #260]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e073      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e6:	4b3d      	ldr	r3, [pc, #244]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e06b      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f6:	4b39      	ldr	r3, [pc, #228]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f023 0203 	bic.w	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4936      	ldr	r1, [pc, #216]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002208:	f7ff f9f4 	bl	80015f4 <HAL_GetTick>
 800220c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	e00a      	b.n	8002226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002210:	f7ff f9f0 	bl	80015f4 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	; 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e053      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 020c 	and.w	r2, r3, #12
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	429a      	cmp	r2, r3
 8002236:	d1eb      	bne.n	8002210 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002238:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d210      	bcs.n	8002268 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 0207 	bic.w	r2, r3, #7
 800224e:	4922      	ldr	r1, [pc, #136]	; (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e032      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002274:	4b19      	ldr	r3, [pc, #100]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4916      	ldr	r1, [pc, #88]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d009      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	490e      	ldr	r1, [pc, #56]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022a6:	f000 f821 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 80022aa:	4602      	mov	r2, r0
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	490a      	ldr	r1, [pc, #40]	; (80022e0 <HAL_RCC_ClockConfig+0x1c8>)
 80022b8:	5ccb      	ldrb	r3, [r1, r3]
 80022ba:	fa22 f303 	lsr.w	r3, r2, r3
 80022be:	4a09      	ldr	r2, [pc, #36]	; (80022e4 <HAL_RCC_ClockConfig+0x1cc>)
 80022c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <HAL_RCC_ClockConfig+0x1d0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff f952 	bl	8001570 <HAL_InitTick>

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40022000 	.word	0x40022000
 80022dc:	40021000 	.word	0x40021000
 80022e0:	08007418 	.word	0x08007418
 80022e4:	20000000 	.word	0x20000000
 80022e8:	20000004 	.word	0x20000004

080022ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ec:	b490      	push	{r4, r7}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022f2:	4b2a      	ldr	r3, [pc, #168]	; (800239c <HAL_RCC_GetSysClockFreq+0xb0>)
 80022f4:	1d3c      	adds	r4, r7, #4
 80022f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022fc:	f240 2301 	movw	r3, #513	; 0x201
 8002300:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	2300      	movs	r3, #0
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002312:	2300      	movs	r3, #0
 8002314:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002316:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b04      	cmp	r3, #4
 8002324:	d002      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0x40>
 8002326:	2b08      	cmp	r3, #8
 8002328:	d003      	beq.n	8002332 <HAL_RCC_GetSysClockFreq+0x46>
 800232a:	e02d      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800232e:	623b      	str	r3, [r7, #32]
      break;
 8002330:	e02d      	b.n	800238e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	0c9b      	lsrs	r3, r3, #18
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800233e:	4413      	add	r3, r2
 8002340:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002344:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	0c5b      	lsrs	r3, r3, #17
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800235e:	4413      	add	r3, r2
 8002360:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002364:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	4a0e      	ldr	r2, [pc, #56]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800236a:	fb02 f203 	mul.w	r2, r2, r3
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	fbb2 f3f3 	udiv	r3, r2, r3
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
 8002376:	e004      	b.n	8002382 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800237c:	fb02 f303 	mul.w	r3, r2, r3
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	623b      	str	r3, [r7, #32]
      break;
 8002386:	e002      	b.n	800238e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800238a:	623b      	str	r3, [r7, #32]
      break;
 800238c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800238e:	6a3b      	ldr	r3, [r7, #32]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3728      	adds	r7, #40	; 0x28
 8002394:	46bd      	mov	sp, r7
 8002396:	bc90      	pop	{r4, r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	08007408 	.word	0x08007408
 80023a0:	40021000 	.word	0x40021000
 80023a4:	007a1200 	.word	0x007a1200
 80023a8:	003d0900 	.word	0x003d0900

080023ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b0:	4b02      	ldr	r3, [pc, #8]	; (80023bc <HAL_RCC_GetHCLKFreq+0x10>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	20000000 	.word	0x20000000

080023c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023c4:	f7ff fff2 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023c8:	4602      	mov	r2, r0
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	4903      	ldr	r1, [pc, #12]	; (80023e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d6:	5ccb      	ldrb	r3, [r1, r3]
 80023d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08007428 	.word	0x08007428

080023e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023ec:	f7ff ffde 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	0adb      	lsrs	r3, r3, #11
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	4903      	ldr	r1, [pc, #12]	; (800240c <HAL_RCC_GetPCLK2Freq+0x24>)
 80023fe:	5ccb      	ldrb	r3, [r1, r3]
 8002400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002404:	4618      	mov	r0, r3
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40021000 	.word	0x40021000
 800240c:	08007428 	.word	0x08007428

08002410 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002418:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <RCC_Delay+0x34>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <RCC_Delay+0x38>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	0a5b      	lsrs	r3, r3, #9
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	fb02 f303 	mul.w	r3, r2, r3
 800242a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800242c:	bf00      	nop
  }
  while (Delay --);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1e5a      	subs	r2, r3, #1
 8002432:	60fa      	str	r2, [r7, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f9      	bne.n	800242c <RCC_Delay+0x1c>
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	20000000 	.word	0x20000000
 8002448:	10624dd3 	.word	0x10624dd3

0800244c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e03f      	b.n	80024de <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe ffb4 	bl	80013e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2224      	movs	r2, #36	; 0x24
 800247c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800248e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 faa7 	bl	80029e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695a      	ldr	r2, [r3, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	4613      	mov	r3, r2
 80024f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b20      	cmp	r3, #32
 80024fe:	d140      	bne.n	8002582 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <HAL_UART_Receive_IT+0x26>
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e039      	b.n	8002584 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_UART_Receive_IT+0x38>
 800251a:	2302      	movs	r3, #2
 800251c:	e032      	b.n	8002584 <HAL_UART_Receive_IT+0x9e>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	88fa      	ldrh	r2, [r7, #6]
 8002530:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	88fa      	ldrh	r2, [r7, #6]
 8002536:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2222      	movs	r2, #34	; 0x22
 8002542:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800255c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0201 	orr.w	r2, r2, #1
 800256c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0220 	orr.w	r2, r2, #32
 800257c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
	...

08002590 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10d      	bne.n	80025e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_UART_IRQHandler+0x52>
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f982 	bl	80028e4 <UART_Receive_IT>
      return;
 80025e0:	e0d0      	b.n	8002784 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80b0 	beq.w	800274a <HAL_UART_IRQHandler+0x1ba>
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d105      	bne.n	8002600 <HAL_UART_IRQHandler+0x70>
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80a5 	beq.w	800274a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_UART_IRQHandler+0x90>
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002618:	f043 0201 	orr.w	r2, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_UART_IRQHandler+0xb0>
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002638:	f043 0202 	orr.w	r2, r3, #2
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_UART_IRQHandler+0xd0>
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002658:	f043 0204 	orr.w	r2, r3, #4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00f      	beq.n	800268a <HAL_UART_IRQHandler+0xfa>
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b00      	cmp	r3, #0
 8002672:	d104      	bne.n	800267e <HAL_UART_IRQHandler+0xee>
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002682:	f043 0208 	orr.w	r2, r3, #8
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268e:	2b00      	cmp	r3, #0
 8002690:	d077      	beq.n	8002782 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <HAL_UART_IRQHandler+0x11c>
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f91c 	bl	80028e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf14      	ite	ne
 80026ba:	2301      	movne	r3, #1
 80026bc:	2300      	moveq	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d102      	bne.n	80026d4 <HAL_UART_IRQHandler+0x144>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d031      	beq.n	8002738 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f86d 	bl	80027b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d023      	beq.n	8002730 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026f6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002704:	4a21      	ldr	r2, [pc, #132]	; (800278c <HAL_UART_IRQHandler+0x1fc>)
 8002706:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff f889 	bl	8001824 <HAL_DMA_Abort_IT>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d016      	beq.n	8002746 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002722:	4610      	mov	r0, r2
 8002724:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002726:	e00e      	b.n	8002746 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f83a 	bl	80027a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800272e:	e00a      	b.n	8002746 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f836 	bl	80027a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002736:	e006      	b.n	8002746 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f832 	bl	80027a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002744:	e01d      	b.n	8002782 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002746:	bf00      	nop
    return;
 8002748:	e01b      	b.n	8002782 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_UART_IRQHandler+0x1d6>
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f859 	bl	8002816 <UART_Transmit_IT>
    return;
 8002764:	e00e      	b.n	8002784 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276c:	2b00      	cmp	r3, #0
 800276e:	d009      	beq.n	8002784 <HAL_UART_IRQHandler+0x1f4>
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f89a 	bl	80028b4 <UART_EndTransmit_IT>
    return;
 8002780:	e000      	b.n	8002784 <HAL_UART_IRQHandler+0x1f4>
    return;
 8002782:	bf00      	nop
  }
}
 8002784:	3720      	adds	r7, #32
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	080027ef 	.word	0x080027ef

08002790 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027ca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0201 	bic.w	r2, r2, #1
 80027da:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f7ff ffca 	bl	80027a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002816:	b480      	push	{r7}
 8002818:	b085      	sub	sp, #20
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b21      	cmp	r3, #33	; 0x21
 8002828:	d13e      	bne.n	80028a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002832:	d114      	bne.n	800285e <UART_Transmit_IT+0x48>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d110      	bne.n	800285e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002850:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	1c9a      	adds	r2, r3, #2
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	621a      	str	r2, [r3, #32]
 800285c:	e008      	b.n	8002870 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	1c59      	adds	r1, r3, #1
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6211      	str	r1, [r2, #32]
 8002868:	781a      	ldrb	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b29b      	uxth	r3, r3
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	4619      	mov	r1, r3
 800287e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10f      	bne.n	80028a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002892:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e000      	b.n	80028aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028a8:	2302      	movs	r3, #2
  }
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff5b 	bl	8002790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b22      	cmp	r3, #34	; 0x22
 80028f6:	d170      	bne.n	80029da <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002900:	d117      	bne.n	8002932 <UART_Receive_IT+0x4e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d113      	bne.n	8002932 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	b29b      	uxth	r3, r3
 800291c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002920:	b29a      	uxth	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	1c9a      	adds	r2, r3, #2
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	629a      	str	r2, [r3, #40]	; 0x28
 8002930:	e026      	b.n	8002980 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002938:	2300      	movs	r3, #0
 800293a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002944:	d007      	beq.n	8002956 <UART_Receive_IT+0x72>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10a      	bne.n	8002964 <UART_Receive_IT+0x80>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e008      	b.n	8002976 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002970:	b2da      	uxtb	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29b      	uxth	r3, r3
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4619      	mov	r1, r3
 800298e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002990:	2b00      	cmp	r3, #0
 8002992:	d120      	bne.n	80029d6 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0220 	bic.w	r2, r2, #32
 80029a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7fe fb23 	bl	8001018 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e002      	b.n	80029dc <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80029da:	2302      	movs	r3, #2
  }
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a1e:	f023 030c 	bic.w	r3, r3, #12
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a2c      	ldr	r2, [pc, #176]	; (8002af8 <UART_SetConfig+0x114>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d103      	bne.n	8002a54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a4c:	f7ff fccc 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	e002      	b.n	8002a5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a54:	f7ff fcb4 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 8002a58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	009a      	lsls	r2, r3, #2
 8002a64:	441a      	add	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a70:	4a22      	ldr	r2, [pc, #136]	; (8002afc <UART_SetConfig+0x118>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	0119      	lsls	r1, r3, #4
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	009a      	lsls	r2, r3, #2
 8002a84:	441a      	add	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a90:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <UART_SetConfig+0x118>)
 8002a92:	fba3 0302 	umull	r0, r3, r3, r2
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	2064      	movs	r0, #100	; 0x64
 8002a9a:	fb00 f303 	mul.w	r3, r0, r3
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	3332      	adds	r3, #50	; 0x32
 8002aa4:	4a15      	ldr	r2, [pc, #84]	; (8002afc <UART_SetConfig+0x118>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ab0:	4419      	add	r1, r3
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	009a      	lsls	r2, r3, #2
 8002abc:	441a      	add	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <UART_SetConfig+0x118>)
 8002aca:	fba3 0302 	umull	r0, r3, r3, r2
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2064      	movs	r0, #100	; 0x64
 8002ad2:	fb00 f303 	mul.w	r3, r0, r3
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	3332      	adds	r3, #50	; 0x32
 8002adc:	4a07      	ldr	r2, [pc, #28]	; (8002afc <UART_SetConfig+0x118>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	f003 020f 	and.w	r2, r3, #15
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	440a      	add	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002af0:	bf00      	nop
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40013800 	.word	0x40013800
 8002afc:	51eb851f 	.word	0x51eb851f

08002b00 <atof>:
 8002b00:	2100      	movs	r1, #0
 8002b02:	f001 bd0f 	b.w	8004524 <strtod>

08002b06 <atoi>:
 8002b06:	220a      	movs	r2, #10
 8002b08:	2100      	movs	r1, #0
 8002b0a:	f001 bd9f 	b.w	800464c <strtol>
	...

08002b10 <__errno>:
 8002b10:	4b01      	ldr	r3, [pc, #4]	; (8002b18 <__errno+0x8>)
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	2000000c 	.word	0x2000000c

08002b1c <__libc_init_array>:
 8002b1c:	b570      	push	{r4, r5, r6, lr}
 8002b1e:	2600      	movs	r6, #0
 8002b20:	4d0c      	ldr	r5, [pc, #48]	; (8002b54 <__libc_init_array+0x38>)
 8002b22:	4c0d      	ldr	r4, [pc, #52]	; (8002b58 <__libc_init_array+0x3c>)
 8002b24:	1b64      	subs	r4, r4, r5
 8002b26:	10a4      	asrs	r4, r4, #2
 8002b28:	42a6      	cmp	r6, r4
 8002b2a:	d109      	bne.n	8002b40 <__libc_init_array+0x24>
 8002b2c:	f004 fc58 	bl	80073e0 <_init>
 8002b30:	2600      	movs	r6, #0
 8002b32:	4d0a      	ldr	r5, [pc, #40]	; (8002b5c <__libc_init_array+0x40>)
 8002b34:	4c0a      	ldr	r4, [pc, #40]	; (8002b60 <__libc_init_array+0x44>)
 8002b36:	1b64      	subs	r4, r4, r5
 8002b38:	10a4      	asrs	r4, r4, #2
 8002b3a:	42a6      	cmp	r6, r4
 8002b3c:	d105      	bne.n	8002b4a <__libc_init_array+0x2e>
 8002b3e:	bd70      	pop	{r4, r5, r6, pc}
 8002b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b44:	4798      	blx	r3
 8002b46:	3601      	adds	r6, #1
 8002b48:	e7ee      	b.n	8002b28 <__libc_init_array+0xc>
 8002b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b4e:	4798      	blx	r3
 8002b50:	3601      	adds	r6, #1
 8002b52:	e7f2      	b.n	8002b3a <__libc_init_array+0x1e>
 8002b54:	080078e4 	.word	0x080078e4
 8002b58:	080078e4 	.word	0x080078e4
 8002b5c:	080078e4 	.word	0x080078e4
 8002b60:	080078e8 	.word	0x080078e8

08002b64 <memcpy>:
 8002b64:	440a      	add	r2, r1
 8002b66:	4291      	cmp	r1, r2
 8002b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b6c:	d100      	bne.n	8002b70 <memcpy+0xc>
 8002b6e:	4770      	bx	lr
 8002b70:	b510      	push	{r4, lr}
 8002b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b76:	4291      	cmp	r1, r2
 8002b78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b7c:	d1f9      	bne.n	8002b72 <memcpy+0xe>
 8002b7e:	bd10      	pop	{r4, pc}

08002b80 <memset>:
 8002b80:	4603      	mov	r3, r0
 8002b82:	4402      	add	r2, r0
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d100      	bne.n	8002b8a <memset+0xa>
 8002b88:	4770      	bx	lr
 8002b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b8e:	e7f9      	b.n	8002b84 <memset+0x4>

08002b90 <__cvt>:
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b96:	461f      	mov	r7, r3
 8002b98:	bfbb      	ittet	lt
 8002b9a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002b9e:	461f      	movlt	r7, r3
 8002ba0:	2300      	movge	r3, #0
 8002ba2:	232d      	movlt	r3, #45	; 0x2d
 8002ba4:	b088      	sub	sp, #32
 8002ba6:	4614      	mov	r4, r2
 8002ba8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002baa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002bac:	7013      	strb	r3, [r2, #0]
 8002bae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002bb0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002bb4:	f023 0820 	bic.w	r8, r3, #32
 8002bb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002bbc:	d005      	beq.n	8002bca <__cvt+0x3a>
 8002bbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002bc2:	d100      	bne.n	8002bc6 <__cvt+0x36>
 8002bc4:	3501      	adds	r5, #1
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e000      	b.n	8002bcc <__cvt+0x3c>
 8002bca:	2303      	movs	r3, #3
 8002bcc:	aa07      	add	r2, sp, #28
 8002bce:	9204      	str	r2, [sp, #16]
 8002bd0:	aa06      	add	r2, sp, #24
 8002bd2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002bd6:	e9cd 3500 	strd	r3, r5, [sp]
 8002bda:	4622      	mov	r2, r4
 8002bdc:	463b      	mov	r3, r7
 8002bde:	f001 fdcf 	bl	8004780 <_dtoa_r>
 8002be2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002be6:	4606      	mov	r6, r0
 8002be8:	d102      	bne.n	8002bf0 <__cvt+0x60>
 8002bea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002bec:	07db      	lsls	r3, r3, #31
 8002bee:	d522      	bpl.n	8002c36 <__cvt+0xa6>
 8002bf0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002bf4:	eb06 0905 	add.w	r9, r6, r5
 8002bf8:	d110      	bne.n	8002c1c <__cvt+0x8c>
 8002bfa:	7833      	ldrb	r3, [r6, #0]
 8002bfc:	2b30      	cmp	r3, #48	; 0x30
 8002bfe:	d10a      	bne.n	8002c16 <__cvt+0x86>
 8002c00:	2200      	movs	r2, #0
 8002c02:	2300      	movs	r3, #0
 8002c04:	4620      	mov	r0, r4
 8002c06:	4639      	mov	r1, r7
 8002c08:	f7fd fece 	bl	80009a8 <__aeabi_dcmpeq>
 8002c0c:	b918      	cbnz	r0, 8002c16 <__cvt+0x86>
 8002c0e:	f1c5 0501 	rsb	r5, r5, #1
 8002c12:	f8ca 5000 	str.w	r5, [sl]
 8002c16:	f8da 3000 	ldr.w	r3, [sl]
 8002c1a:	4499      	add	r9, r3
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2300      	movs	r3, #0
 8002c20:	4620      	mov	r0, r4
 8002c22:	4639      	mov	r1, r7
 8002c24:	f7fd fec0 	bl	80009a8 <__aeabi_dcmpeq>
 8002c28:	b108      	cbz	r0, 8002c2e <__cvt+0x9e>
 8002c2a:	f8cd 901c 	str.w	r9, [sp, #28]
 8002c2e:	2230      	movs	r2, #48	; 0x30
 8002c30:	9b07      	ldr	r3, [sp, #28]
 8002c32:	454b      	cmp	r3, r9
 8002c34:	d307      	bcc.n	8002c46 <__cvt+0xb6>
 8002c36:	4630      	mov	r0, r6
 8002c38:	9b07      	ldr	r3, [sp, #28]
 8002c3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002c3c:	1b9b      	subs	r3, r3, r6
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	b008      	add	sp, #32
 8002c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c46:	1c59      	adds	r1, r3, #1
 8002c48:	9107      	str	r1, [sp, #28]
 8002c4a:	701a      	strb	r2, [r3, #0]
 8002c4c:	e7f0      	b.n	8002c30 <__cvt+0xa0>

08002c4e <__exponent>:
 8002c4e:	4603      	mov	r3, r0
 8002c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c52:	2900      	cmp	r1, #0
 8002c54:	f803 2b02 	strb.w	r2, [r3], #2
 8002c58:	bfb6      	itet	lt
 8002c5a:	222d      	movlt	r2, #45	; 0x2d
 8002c5c:	222b      	movge	r2, #43	; 0x2b
 8002c5e:	4249      	neglt	r1, r1
 8002c60:	2909      	cmp	r1, #9
 8002c62:	7042      	strb	r2, [r0, #1]
 8002c64:	dd2b      	ble.n	8002cbe <__exponent+0x70>
 8002c66:	f10d 0407 	add.w	r4, sp, #7
 8002c6a:	46a4      	mov	ip, r4
 8002c6c:	270a      	movs	r7, #10
 8002c6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8002c72:	460a      	mov	r2, r1
 8002c74:	46a6      	mov	lr, r4
 8002c76:	fb07 1516 	mls	r5, r7, r6, r1
 8002c7a:	2a63      	cmp	r2, #99	; 0x63
 8002c7c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002c80:	4631      	mov	r1, r6
 8002c82:	f104 34ff 	add.w	r4, r4, #4294967295
 8002c86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002c8a:	dcf0      	bgt.n	8002c6e <__exponent+0x20>
 8002c8c:	3130      	adds	r1, #48	; 0x30
 8002c8e:	f1ae 0502 	sub.w	r5, lr, #2
 8002c92:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002c96:	4629      	mov	r1, r5
 8002c98:	1c44      	adds	r4, r0, #1
 8002c9a:	4561      	cmp	r1, ip
 8002c9c:	d30a      	bcc.n	8002cb4 <__exponent+0x66>
 8002c9e:	f10d 0209 	add.w	r2, sp, #9
 8002ca2:	eba2 020e 	sub.w	r2, r2, lr
 8002ca6:	4565      	cmp	r5, ip
 8002ca8:	bf88      	it	hi
 8002caa:	2200      	movhi	r2, #0
 8002cac:	4413      	add	r3, r2
 8002cae:	1a18      	subs	r0, r3, r0
 8002cb0:	b003      	add	sp, #12
 8002cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002cb8:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002cbc:	e7ed      	b.n	8002c9a <__exponent+0x4c>
 8002cbe:	2330      	movs	r3, #48	; 0x30
 8002cc0:	3130      	adds	r1, #48	; 0x30
 8002cc2:	7083      	strb	r3, [r0, #2]
 8002cc4:	70c1      	strb	r1, [r0, #3]
 8002cc6:	1d03      	adds	r3, r0, #4
 8002cc8:	e7f1      	b.n	8002cae <__exponent+0x60>
	...

08002ccc <_printf_float>:
 8002ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cd0:	b091      	sub	sp, #68	; 0x44
 8002cd2:	460c      	mov	r4, r1
 8002cd4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002cd8:	4616      	mov	r6, r2
 8002cda:	461f      	mov	r7, r3
 8002cdc:	4605      	mov	r5, r0
 8002cde:	f002 fea3 	bl	8005a28 <_localeconv_r>
 8002ce2:	6803      	ldr	r3, [r0, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ce8:	f7fd fa32 	bl	8000150 <strlen>
 8002cec:	2300      	movs	r3, #0
 8002cee:	930e      	str	r3, [sp, #56]	; 0x38
 8002cf0:	f8d8 3000 	ldr.w	r3, [r8]
 8002cf4:	900a      	str	r0, [sp, #40]	; 0x28
 8002cf6:	3307      	adds	r3, #7
 8002cf8:	f023 0307 	bic.w	r3, r3, #7
 8002cfc:	f103 0208 	add.w	r2, r3, #8
 8002d00:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002d04:	f8d4 b000 	ldr.w	fp, [r4]
 8002d08:	f8c8 2000 	str.w	r2, [r8]
 8002d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d10:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002d14:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002d18:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002d1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d22:	4640      	mov	r0, r8
 8002d24:	4b9c      	ldr	r3, [pc, #624]	; (8002f98 <_printf_float+0x2cc>)
 8002d26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d28:	f7fd fe70 	bl	8000a0c <__aeabi_dcmpun>
 8002d2c:	bb70      	cbnz	r0, 8002d8c <_printf_float+0xc0>
 8002d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d32:	4640      	mov	r0, r8
 8002d34:	4b98      	ldr	r3, [pc, #608]	; (8002f98 <_printf_float+0x2cc>)
 8002d36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d38:	f7fd fe4a 	bl	80009d0 <__aeabi_dcmple>
 8002d3c:	bb30      	cbnz	r0, 8002d8c <_printf_float+0xc0>
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2300      	movs	r3, #0
 8002d42:	4640      	mov	r0, r8
 8002d44:	4651      	mov	r1, sl
 8002d46:	f7fd fe39 	bl	80009bc <__aeabi_dcmplt>
 8002d4a:	b110      	cbz	r0, 8002d52 <_printf_float+0x86>
 8002d4c:	232d      	movs	r3, #45	; 0x2d
 8002d4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d52:	4b92      	ldr	r3, [pc, #584]	; (8002f9c <_printf_float+0x2d0>)
 8002d54:	4892      	ldr	r0, [pc, #584]	; (8002fa0 <_printf_float+0x2d4>)
 8002d56:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002d5a:	bf94      	ite	ls
 8002d5c:	4698      	movls	r8, r3
 8002d5e:	4680      	movhi	r8, r0
 8002d60:	2303      	movs	r3, #3
 8002d62:	f04f 0a00 	mov.w	sl, #0
 8002d66:	6123      	str	r3, [r4, #16]
 8002d68:	f02b 0304 	bic.w	r3, fp, #4
 8002d6c:	6023      	str	r3, [r4, #0]
 8002d6e:	4633      	mov	r3, r6
 8002d70:	4621      	mov	r1, r4
 8002d72:	4628      	mov	r0, r5
 8002d74:	9700      	str	r7, [sp, #0]
 8002d76:	aa0f      	add	r2, sp, #60	; 0x3c
 8002d78:	f000 f9d4 	bl	8003124 <_printf_common>
 8002d7c:	3001      	adds	r0, #1
 8002d7e:	f040 8090 	bne.w	8002ea2 <_printf_float+0x1d6>
 8002d82:	f04f 30ff 	mov.w	r0, #4294967295
 8002d86:	b011      	add	sp, #68	; 0x44
 8002d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d8c:	4642      	mov	r2, r8
 8002d8e:	4653      	mov	r3, sl
 8002d90:	4640      	mov	r0, r8
 8002d92:	4651      	mov	r1, sl
 8002d94:	f7fd fe3a 	bl	8000a0c <__aeabi_dcmpun>
 8002d98:	b148      	cbz	r0, 8002dae <_printf_float+0xe2>
 8002d9a:	f1ba 0f00 	cmp.w	sl, #0
 8002d9e:	bfb8      	it	lt
 8002da0:	232d      	movlt	r3, #45	; 0x2d
 8002da2:	4880      	ldr	r0, [pc, #512]	; (8002fa4 <_printf_float+0x2d8>)
 8002da4:	bfb8      	it	lt
 8002da6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002daa:	4b7f      	ldr	r3, [pc, #508]	; (8002fa8 <_printf_float+0x2dc>)
 8002dac:	e7d3      	b.n	8002d56 <_printf_float+0x8a>
 8002dae:	6863      	ldr	r3, [r4, #4]
 8002db0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	d142      	bne.n	8002e3e <_printf_float+0x172>
 8002db8:	2306      	movs	r3, #6
 8002dba:	6063      	str	r3, [r4, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	9206      	str	r2, [sp, #24]
 8002dc0:	aa0e      	add	r2, sp, #56	; 0x38
 8002dc2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002dc6:	aa0d      	add	r2, sp, #52	; 0x34
 8002dc8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002dcc:	9203      	str	r2, [sp, #12]
 8002dce:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002dd2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002dd6:	6023      	str	r3, [r4, #0]
 8002dd8:	6863      	ldr	r3, [r4, #4]
 8002dda:	4642      	mov	r2, r8
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	4628      	mov	r0, r5
 8002de0:	4653      	mov	r3, sl
 8002de2:	910b      	str	r1, [sp, #44]	; 0x2c
 8002de4:	f7ff fed4 	bl	8002b90 <__cvt>
 8002de8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002dea:	4680      	mov	r8, r0
 8002dec:	2947      	cmp	r1, #71	; 0x47
 8002dee:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002df0:	d108      	bne.n	8002e04 <_printf_float+0x138>
 8002df2:	1cc8      	adds	r0, r1, #3
 8002df4:	db02      	blt.n	8002dfc <_printf_float+0x130>
 8002df6:	6863      	ldr	r3, [r4, #4]
 8002df8:	4299      	cmp	r1, r3
 8002dfa:	dd40      	ble.n	8002e7e <_printf_float+0x1b2>
 8002dfc:	f1a9 0902 	sub.w	r9, r9, #2
 8002e00:	fa5f f989 	uxtb.w	r9, r9
 8002e04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002e08:	d81f      	bhi.n	8002e4a <_printf_float+0x17e>
 8002e0a:	464a      	mov	r2, r9
 8002e0c:	3901      	subs	r1, #1
 8002e0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002e12:	910d      	str	r1, [sp, #52]	; 0x34
 8002e14:	f7ff ff1b 	bl	8002c4e <__exponent>
 8002e18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e1a:	4682      	mov	sl, r0
 8002e1c:	1813      	adds	r3, r2, r0
 8002e1e:	2a01      	cmp	r2, #1
 8002e20:	6123      	str	r3, [r4, #16]
 8002e22:	dc02      	bgt.n	8002e2a <_printf_float+0x15e>
 8002e24:	6822      	ldr	r2, [r4, #0]
 8002e26:	07d2      	lsls	r2, r2, #31
 8002e28:	d501      	bpl.n	8002e2e <_printf_float+0x162>
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	6123      	str	r3, [r4, #16]
 8002e2e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d09b      	beq.n	8002d6e <_printf_float+0xa2>
 8002e36:	232d      	movs	r3, #45	; 0x2d
 8002e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e3c:	e797      	b.n	8002d6e <_printf_float+0xa2>
 8002e3e:	2947      	cmp	r1, #71	; 0x47
 8002e40:	d1bc      	bne.n	8002dbc <_printf_float+0xf0>
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1ba      	bne.n	8002dbc <_printf_float+0xf0>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e7b7      	b.n	8002dba <_printf_float+0xee>
 8002e4a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002e4e:	d118      	bne.n	8002e82 <_printf_float+0x1b6>
 8002e50:	2900      	cmp	r1, #0
 8002e52:	6863      	ldr	r3, [r4, #4]
 8002e54:	dd0b      	ble.n	8002e6e <_printf_float+0x1a2>
 8002e56:	6121      	str	r1, [r4, #16]
 8002e58:	b913      	cbnz	r3, 8002e60 <_printf_float+0x194>
 8002e5a:	6822      	ldr	r2, [r4, #0]
 8002e5c:	07d0      	lsls	r0, r2, #31
 8002e5e:	d502      	bpl.n	8002e66 <_printf_float+0x19a>
 8002e60:	3301      	adds	r3, #1
 8002e62:	440b      	add	r3, r1
 8002e64:	6123      	str	r3, [r4, #16]
 8002e66:	f04f 0a00 	mov.w	sl, #0
 8002e6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8002e6c:	e7df      	b.n	8002e2e <_printf_float+0x162>
 8002e6e:	b913      	cbnz	r3, 8002e76 <_printf_float+0x1aa>
 8002e70:	6822      	ldr	r2, [r4, #0]
 8002e72:	07d2      	lsls	r2, r2, #31
 8002e74:	d501      	bpl.n	8002e7a <_printf_float+0x1ae>
 8002e76:	3302      	adds	r3, #2
 8002e78:	e7f4      	b.n	8002e64 <_printf_float+0x198>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e7f2      	b.n	8002e64 <_printf_float+0x198>
 8002e7e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002e82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e84:	4299      	cmp	r1, r3
 8002e86:	db05      	blt.n	8002e94 <_printf_float+0x1c8>
 8002e88:	6823      	ldr	r3, [r4, #0]
 8002e8a:	6121      	str	r1, [r4, #16]
 8002e8c:	07d8      	lsls	r0, r3, #31
 8002e8e:	d5ea      	bpl.n	8002e66 <_printf_float+0x19a>
 8002e90:	1c4b      	adds	r3, r1, #1
 8002e92:	e7e7      	b.n	8002e64 <_printf_float+0x198>
 8002e94:	2900      	cmp	r1, #0
 8002e96:	bfcc      	ite	gt
 8002e98:	2201      	movgt	r2, #1
 8002e9a:	f1c1 0202 	rsble	r2, r1, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	e7e0      	b.n	8002e64 <_printf_float+0x198>
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	055a      	lsls	r2, r3, #21
 8002ea6:	d407      	bmi.n	8002eb8 <_printf_float+0x1ec>
 8002ea8:	6923      	ldr	r3, [r4, #16]
 8002eaa:	4642      	mov	r2, r8
 8002eac:	4631      	mov	r1, r6
 8002eae:	4628      	mov	r0, r5
 8002eb0:	47b8      	blx	r7
 8002eb2:	3001      	adds	r0, #1
 8002eb4:	d12b      	bne.n	8002f0e <_printf_float+0x242>
 8002eb6:	e764      	b.n	8002d82 <_printf_float+0xb6>
 8002eb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002ebc:	f240 80dd 	bls.w	800307a <_printf_float+0x3ae>
 8002ec0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f7fd fd6e 	bl	80009a8 <__aeabi_dcmpeq>
 8002ecc:	2800      	cmp	r0, #0
 8002ece:	d033      	beq.n	8002f38 <_printf_float+0x26c>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	4631      	mov	r1, r6
 8002ed4:	4628      	mov	r0, r5
 8002ed6:	4a35      	ldr	r2, [pc, #212]	; (8002fac <_printf_float+0x2e0>)
 8002ed8:	47b8      	blx	r7
 8002eda:	3001      	adds	r0, #1
 8002edc:	f43f af51 	beq.w	8002d82 <_printf_float+0xb6>
 8002ee0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	db02      	blt.n	8002eee <_printf_float+0x222>
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	07d8      	lsls	r0, r3, #31
 8002eec:	d50f      	bpl.n	8002f0e <_printf_float+0x242>
 8002eee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ef2:	4631      	mov	r1, r6
 8002ef4:	4628      	mov	r0, r5
 8002ef6:	47b8      	blx	r7
 8002ef8:	3001      	adds	r0, #1
 8002efa:	f43f af42 	beq.w	8002d82 <_printf_float+0xb6>
 8002efe:	f04f 0800 	mov.w	r8, #0
 8002f02:	f104 091a 	add.w	r9, r4, #26
 8002f06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	4543      	cmp	r3, r8
 8002f0c:	dc09      	bgt.n	8002f22 <_printf_float+0x256>
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	079b      	lsls	r3, r3, #30
 8002f12:	f100 8102 	bmi.w	800311a <_printf_float+0x44e>
 8002f16:	68e0      	ldr	r0, [r4, #12]
 8002f18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002f1a:	4298      	cmp	r0, r3
 8002f1c:	bfb8      	it	lt
 8002f1e:	4618      	movlt	r0, r3
 8002f20:	e731      	b.n	8002d86 <_printf_float+0xba>
 8002f22:	2301      	movs	r3, #1
 8002f24:	464a      	mov	r2, r9
 8002f26:	4631      	mov	r1, r6
 8002f28:	4628      	mov	r0, r5
 8002f2a:	47b8      	blx	r7
 8002f2c:	3001      	adds	r0, #1
 8002f2e:	f43f af28 	beq.w	8002d82 <_printf_float+0xb6>
 8002f32:	f108 0801 	add.w	r8, r8, #1
 8002f36:	e7e6      	b.n	8002f06 <_printf_float+0x23a>
 8002f38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	dc38      	bgt.n	8002fb0 <_printf_float+0x2e4>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	4631      	mov	r1, r6
 8002f42:	4628      	mov	r0, r5
 8002f44:	4a19      	ldr	r2, [pc, #100]	; (8002fac <_printf_float+0x2e0>)
 8002f46:	47b8      	blx	r7
 8002f48:	3001      	adds	r0, #1
 8002f4a:	f43f af1a 	beq.w	8002d82 <_printf_float+0xb6>
 8002f4e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f52:	4313      	orrs	r3, r2
 8002f54:	d102      	bne.n	8002f5c <_printf_float+0x290>
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	07d9      	lsls	r1, r3, #31
 8002f5a:	d5d8      	bpl.n	8002f0e <_printf_float+0x242>
 8002f5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f60:	4631      	mov	r1, r6
 8002f62:	4628      	mov	r0, r5
 8002f64:	47b8      	blx	r7
 8002f66:	3001      	adds	r0, #1
 8002f68:	f43f af0b 	beq.w	8002d82 <_printf_float+0xb6>
 8002f6c:	f04f 0900 	mov.w	r9, #0
 8002f70:	f104 0a1a 	add.w	sl, r4, #26
 8002f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f76:	425b      	negs	r3, r3
 8002f78:	454b      	cmp	r3, r9
 8002f7a:	dc01      	bgt.n	8002f80 <_printf_float+0x2b4>
 8002f7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f7e:	e794      	b.n	8002eaa <_printf_float+0x1de>
 8002f80:	2301      	movs	r3, #1
 8002f82:	4652      	mov	r2, sl
 8002f84:	4631      	mov	r1, r6
 8002f86:	4628      	mov	r0, r5
 8002f88:	47b8      	blx	r7
 8002f8a:	3001      	adds	r0, #1
 8002f8c:	f43f aef9 	beq.w	8002d82 <_printf_float+0xb6>
 8002f90:	f109 0901 	add.w	r9, r9, #1
 8002f94:	e7ee      	b.n	8002f74 <_printf_float+0x2a8>
 8002f96:	bf00      	nop
 8002f98:	7fefffff 	.word	0x7fefffff
 8002f9c:	08007434 	.word	0x08007434
 8002fa0:	08007438 	.word	0x08007438
 8002fa4:	08007440 	.word	0x08007440
 8002fa8:	0800743c 	.word	0x0800743c
 8002fac:	08007444 	.word	0x08007444
 8002fb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	bfa8      	it	ge
 8002fb8:	461a      	movge	r2, r3
 8002fba:	2a00      	cmp	r2, #0
 8002fbc:	4691      	mov	r9, r2
 8002fbe:	dc37      	bgt.n	8003030 <_printf_float+0x364>
 8002fc0:	f04f 0b00 	mov.w	fp, #0
 8002fc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002fc8:	f104 021a 	add.w	r2, r4, #26
 8002fcc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002fd0:	ebaa 0309 	sub.w	r3, sl, r9
 8002fd4:	455b      	cmp	r3, fp
 8002fd6:	dc33      	bgt.n	8003040 <_printf_float+0x374>
 8002fd8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	db3b      	blt.n	8003058 <_printf_float+0x38c>
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	07da      	lsls	r2, r3, #31
 8002fe4:	d438      	bmi.n	8003058 <_printf_float+0x38c>
 8002fe6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fe8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002fea:	eba2 030a 	sub.w	r3, r2, sl
 8002fee:	eba2 0901 	sub.w	r9, r2, r1
 8002ff2:	4599      	cmp	r9, r3
 8002ff4:	bfa8      	it	ge
 8002ff6:	4699      	movge	r9, r3
 8002ff8:	f1b9 0f00 	cmp.w	r9, #0
 8002ffc:	dc34      	bgt.n	8003068 <_printf_float+0x39c>
 8002ffe:	f04f 0800 	mov.w	r8, #0
 8003002:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003006:	f104 0a1a 	add.w	sl, r4, #26
 800300a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	eba3 0309 	sub.w	r3, r3, r9
 8003014:	4543      	cmp	r3, r8
 8003016:	f77f af7a 	ble.w	8002f0e <_printf_float+0x242>
 800301a:	2301      	movs	r3, #1
 800301c:	4652      	mov	r2, sl
 800301e:	4631      	mov	r1, r6
 8003020:	4628      	mov	r0, r5
 8003022:	47b8      	blx	r7
 8003024:	3001      	adds	r0, #1
 8003026:	f43f aeac 	beq.w	8002d82 <_printf_float+0xb6>
 800302a:	f108 0801 	add.w	r8, r8, #1
 800302e:	e7ec      	b.n	800300a <_printf_float+0x33e>
 8003030:	4613      	mov	r3, r2
 8003032:	4631      	mov	r1, r6
 8003034:	4642      	mov	r2, r8
 8003036:	4628      	mov	r0, r5
 8003038:	47b8      	blx	r7
 800303a:	3001      	adds	r0, #1
 800303c:	d1c0      	bne.n	8002fc0 <_printf_float+0x2f4>
 800303e:	e6a0      	b.n	8002d82 <_printf_float+0xb6>
 8003040:	2301      	movs	r3, #1
 8003042:	4631      	mov	r1, r6
 8003044:	4628      	mov	r0, r5
 8003046:	920b      	str	r2, [sp, #44]	; 0x2c
 8003048:	47b8      	blx	r7
 800304a:	3001      	adds	r0, #1
 800304c:	f43f ae99 	beq.w	8002d82 <_printf_float+0xb6>
 8003050:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003052:	f10b 0b01 	add.w	fp, fp, #1
 8003056:	e7b9      	b.n	8002fcc <_printf_float+0x300>
 8003058:	4631      	mov	r1, r6
 800305a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800305e:	4628      	mov	r0, r5
 8003060:	47b8      	blx	r7
 8003062:	3001      	adds	r0, #1
 8003064:	d1bf      	bne.n	8002fe6 <_printf_float+0x31a>
 8003066:	e68c      	b.n	8002d82 <_printf_float+0xb6>
 8003068:	464b      	mov	r3, r9
 800306a:	4631      	mov	r1, r6
 800306c:	4628      	mov	r0, r5
 800306e:	eb08 020a 	add.w	r2, r8, sl
 8003072:	47b8      	blx	r7
 8003074:	3001      	adds	r0, #1
 8003076:	d1c2      	bne.n	8002ffe <_printf_float+0x332>
 8003078:	e683      	b.n	8002d82 <_printf_float+0xb6>
 800307a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800307c:	2a01      	cmp	r2, #1
 800307e:	dc01      	bgt.n	8003084 <_printf_float+0x3b8>
 8003080:	07db      	lsls	r3, r3, #31
 8003082:	d537      	bpl.n	80030f4 <_printf_float+0x428>
 8003084:	2301      	movs	r3, #1
 8003086:	4642      	mov	r2, r8
 8003088:	4631      	mov	r1, r6
 800308a:	4628      	mov	r0, r5
 800308c:	47b8      	blx	r7
 800308e:	3001      	adds	r0, #1
 8003090:	f43f ae77 	beq.w	8002d82 <_printf_float+0xb6>
 8003094:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003098:	4631      	mov	r1, r6
 800309a:	4628      	mov	r0, r5
 800309c:	47b8      	blx	r7
 800309e:	3001      	adds	r0, #1
 80030a0:	f43f ae6f 	beq.w	8002d82 <_printf_float+0xb6>
 80030a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80030a8:	2200      	movs	r2, #0
 80030aa:	2300      	movs	r3, #0
 80030ac:	f7fd fc7c 	bl	80009a8 <__aeabi_dcmpeq>
 80030b0:	b9d8      	cbnz	r0, 80030ea <_printf_float+0x41e>
 80030b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030b4:	f108 0201 	add.w	r2, r8, #1
 80030b8:	3b01      	subs	r3, #1
 80030ba:	4631      	mov	r1, r6
 80030bc:	4628      	mov	r0, r5
 80030be:	47b8      	blx	r7
 80030c0:	3001      	adds	r0, #1
 80030c2:	d10e      	bne.n	80030e2 <_printf_float+0x416>
 80030c4:	e65d      	b.n	8002d82 <_printf_float+0xb6>
 80030c6:	2301      	movs	r3, #1
 80030c8:	464a      	mov	r2, r9
 80030ca:	4631      	mov	r1, r6
 80030cc:	4628      	mov	r0, r5
 80030ce:	47b8      	blx	r7
 80030d0:	3001      	adds	r0, #1
 80030d2:	f43f ae56 	beq.w	8002d82 <_printf_float+0xb6>
 80030d6:	f108 0801 	add.w	r8, r8, #1
 80030da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030dc:	3b01      	subs	r3, #1
 80030de:	4543      	cmp	r3, r8
 80030e0:	dcf1      	bgt.n	80030c6 <_printf_float+0x3fa>
 80030e2:	4653      	mov	r3, sl
 80030e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80030e8:	e6e0      	b.n	8002eac <_printf_float+0x1e0>
 80030ea:	f04f 0800 	mov.w	r8, #0
 80030ee:	f104 091a 	add.w	r9, r4, #26
 80030f2:	e7f2      	b.n	80030da <_printf_float+0x40e>
 80030f4:	2301      	movs	r3, #1
 80030f6:	4642      	mov	r2, r8
 80030f8:	e7df      	b.n	80030ba <_printf_float+0x3ee>
 80030fa:	2301      	movs	r3, #1
 80030fc:	464a      	mov	r2, r9
 80030fe:	4631      	mov	r1, r6
 8003100:	4628      	mov	r0, r5
 8003102:	47b8      	blx	r7
 8003104:	3001      	adds	r0, #1
 8003106:	f43f ae3c 	beq.w	8002d82 <_printf_float+0xb6>
 800310a:	f108 0801 	add.w	r8, r8, #1
 800310e:	68e3      	ldr	r3, [r4, #12]
 8003110:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003112:	1a5b      	subs	r3, r3, r1
 8003114:	4543      	cmp	r3, r8
 8003116:	dcf0      	bgt.n	80030fa <_printf_float+0x42e>
 8003118:	e6fd      	b.n	8002f16 <_printf_float+0x24a>
 800311a:	f04f 0800 	mov.w	r8, #0
 800311e:	f104 0919 	add.w	r9, r4, #25
 8003122:	e7f4      	b.n	800310e <_printf_float+0x442>

08003124 <_printf_common>:
 8003124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003128:	4616      	mov	r6, r2
 800312a:	4699      	mov	r9, r3
 800312c:	688a      	ldr	r2, [r1, #8]
 800312e:	690b      	ldr	r3, [r1, #16]
 8003130:	4607      	mov	r7, r0
 8003132:	4293      	cmp	r3, r2
 8003134:	bfb8      	it	lt
 8003136:	4613      	movlt	r3, r2
 8003138:	6033      	str	r3, [r6, #0]
 800313a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800313e:	460c      	mov	r4, r1
 8003140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003144:	b10a      	cbz	r2, 800314a <_printf_common+0x26>
 8003146:	3301      	adds	r3, #1
 8003148:	6033      	str	r3, [r6, #0]
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	0699      	lsls	r1, r3, #26
 800314e:	bf42      	ittt	mi
 8003150:	6833      	ldrmi	r3, [r6, #0]
 8003152:	3302      	addmi	r3, #2
 8003154:	6033      	strmi	r3, [r6, #0]
 8003156:	6825      	ldr	r5, [r4, #0]
 8003158:	f015 0506 	ands.w	r5, r5, #6
 800315c:	d106      	bne.n	800316c <_printf_common+0x48>
 800315e:	f104 0a19 	add.w	sl, r4, #25
 8003162:	68e3      	ldr	r3, [r4, #12]
 8003164:	6832      	ldr	r2, [r6, #0]
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	42ab      	cmp	r3, r5
 800316a:	dc28      	bgt.n	80031be <_printf_common+0x9a>
 800316c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003170:	1e13      	subs	r3, r2, #0
 8003172:	6822      	ldr	r2, [r4, #0]
 8003174:	bf18      	it	ne
 8003176:	2301      	movne	r3, #1
 8003178:	0692      	lsls	r2, r2, #26
 800317a:	d42d      	bmi.n	80031d8 <_printf_common+0xb4>
 800317c:	4649      	mov	r1, r9
 800317e:	4638      	mov	r0, r7
 8003180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003184:	47c0      	blx	r8
 8003186:	3001      	adds	r0, #1
 8003188:	d020      	beq.n	80031cc <_printf_common+0xa8>
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	68e5      	ldr	r5, [r4, #12]
 800318e:	f003 0306 	and.w	r3, r3, #6
 8003192:	2b04      	cmp	r3, #4
 8003194:	bf18      	it	ne
 8003196:	2500      	movne	r5, #0
 8003198:	6832      	ldr	r2, [r6, #0]
 800319a:	f04f 0600 	mov.w	r6, #0
 800319e:	68a3      	ldr	r3, [r4, #8]
 80031a0:	bf08      	it	eq
 80031a2:	1aad      	subeq	r5, r5, r2
 80031a4:	6922      	ldr	r2, [r4, #16]
 80031a6:	bf08      	it	eq
 80031a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031ac:	4293      	cmp	r3, r2
 80031ae:	bfc4      	itt	gt
 80031b0:	1a9b      	subgt	r3, r3, r2
 80031b2:	18ed      	addgt	r5, r5, r3
 80031b4:	341a      	adds	r4, #26
 80031b6:	42b5      	cmp	r5, r6
 80031b8:	d11a      	bne.n	80031f0 <_printf_common+0xcc>
 80031ba:	2000      	movs	r0, #0
 80031bc:	e008      	b.n	80031d0 <_printf_common+0xac>
 80031be:	2301      	movs	r3, #1
 80031c0:	4652      	mov	r2, sl
 80031c2:	4649      	mov	r1, r9
 80031c4:	4638      	mov	r0, r7
 80031c6:	47c0      	blx	r8
 80031c8:	3001      	adds	r0, #1
 80031ca:	d103      	bne.n	80031d4 <_printf_common+0xb0>
 80031cc:	f04f 30ff 	mov.w	r0, #4294967295
 80031d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031d4:	3501      	adds	r5, #1
 80031d6:	e7c4      	b.n	8003162 <_printf_common+0x3e>
 80031d8:	2030      	movs	r0, #48	; 0x30
 80031da:	18e1      	adds	r1, r4, r3
 80031dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031e6:	4422      	add	r2, r4
 80031e8:	3302      	adds	r3, #2
 80031ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031ee:	e7c5      	b.n	800317c <_printf_common+0x58>
 80031f0:	2301      	movs	r3, #1
 80031f2:	4622      	mov	r2, r4
 80031f4:	4649      	mov	r1, r9
 80031f6:	4638      	mov	r0, r7
 80031f8:	47c0      	blx	r8
 80031fa:	3001      	adds	r0, #1
 80031fc:	d0e6      	beq.n	80031cc <_printf_common+0xa8>
 80031fe:	3601      	adds	r6, #1
 8003200:	e7d9      	b.n	80031b6 <_printf_common+0x92>
	...

08003204 <_printf_i>:
 8003204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003208:	460c      	mov	r4, r1
 800320a:	7e27      	ldrb	r7, [r4, #24]
 800320c:	4691      	mov	r9, r2
 800320e:	2f78      	cmp	r7, #120	; 0x78
 8003210:	4680      	mov	r8, r0
 8003212:	469a      	mov	sl, r3
 8003214:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003216:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800321a:	d807      	bhi.n	800322c <_printf_i+0x28>
 800321c:	2f62      	cmp	r7, #98	; 0x62
 800321e:	d80a      	bhi.n	8003236 <_printf_i+0x32>
 8003220:	2f00      	cmp	r7, #0
 8003222:	f000 80d9 	beq.w	80033d8 <_printf_i+0x1d4>
 8003226:	2f58      	cmp	r7, #88	; 0x58
 8003228:	f000 80a4 	beq.w	8003374 <_printf_i+0x170>
 800322c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003234:	e03a      	b.n	80032ac <_printf_i+0xa8>
 8003236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800323a:	2b15      	cmp	r3, #21
 800323c:	d8f6      	bhi.n	800322c <_printf_i+0x28>
 800323e:	a001      	add	r0, pc, #4	; (adr r0, 8003244 <_printf_i+0x40>)
 8003240:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003244:	0800329d 	.word	0x0800329d
 8003248:	080032b1 	.word	0x080032b1
 800324c:	0800322d 	.word	0x0800322d
 8003250:	0800322d 	.word	0x0800322d
 8003254:	0800322d 	.word	0x0800322d
 8003258:	0800322d 	.word	0x0800322d
 800325c:	080032b1 	.word	0x080032b1
 8003260:	0800322d 	.word	0x0800322d
 8003264:	0800322d 	.word	0x0800322d
 8003268:	0800322d 	.word	0x0800322d
 800326c:	0800322d 	.word	0x0800322d
 8003270:	080033bf 	.word	0x080033bf
 8003274:	080032e1 	.word	0x080032e1
 8003278:	080033a1 	.word	0x080033a1
 800327c:	0800322d 	.word	0x0800322d
 8003280:	0800322d 	.word	0x0800322d
 8003284:	080033e1 	.word	0x080033e1
 8003288:	0800322d 	.word	0x0800322d
 800328c:	080032e1 	.word	0x080032e1
 8003290:	0800322d 	.word	0x0800322d
 8003294:	0800322d 	.word	0x0800322d
 8003298:	080033a9 	.word	0x080033a9
 800329c:	680b      	ldr	r3, [r1, #0]
 800329e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80032a2:	1d1a      	adds	r2, r3, #4
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	600a      	str	r2, [r1, #0]
 80032a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0a4      	b.n	80033fa <_printf_i+0x1f6>
 80032b0:	6825      	ldr	r5, [r4, #0]
 80032b2:	6808      	ldr	r0, [r1, #0]
 80032b4:	062e      	lsls	r6, r5, #24
 80032b6:	f100 0304 	add.w	r3, r0, #4
 80032ba:	d50a      	bpl.n	80032d2 <_printf_i+0xce>
 80032bc:	6805      	ldr	r5, [r0, #0]
 80032be:	600b      	str	r3, [r1, #0]
 80032c0:	2d00      	cmp	r5, #0
 80032c2:	da03      	bge.n	80032cc <_printf_i+0xc8>
 80032c4:	232d      	movs	r3, #45	; 0x2d
 80032c6:	426d      	negs	r5, r5
 80032c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032cc:	230a      	movs	r3, #10
 80032ce:	485e      	ldr	r0, [pc, #376]	; (8003448 <_printf_i+0x244>)
 80032d0:	e019      	b.n	8003306 <_printf_i+0x102>
 80032d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80032d6:	6805      	ldr	r5, [r0, #0]
 80032d8:	600b      	str	r3, [r1, #0]
 80032da:	bf18      	it	ne
 80032dc:	b22d      	sxthne	r5, r5
 80032de:	e7ef      	b.n	80032c0 <_printf_i+0xbc>
 80032e0:	680b      	ldr	r3, [r1, #0]
 80032e2:	6825      	ldr	r5, [r4, #0]
 80032e4:	1d18      	adds	r0, r3, #4
 80032e6:	6008      	str	r0, [r1, #0]
 80032e8:	0628      	lsls	r0, r5, #24
 80032ea:	d501      	bpl.n	80032f0 <_printf_i+0xec>
 80032ec:	681d      	ldr	r5, [r3, #0]
 80032ee:	e002      	b.n	80032f6 <_printf_i+0xf2>
 80032f0:	0669      	lsls	r1, r5, #25
 80032f2:	d5fb      	bpl.n	80032ec <_printf_i+0xe8>
 80032f4:	881d      	ldrh	r5, [r3, #0]
 80032f6:	2f6f      	cmp	r7, #111	; 0x6f
 80032f8:	bf0c      	ite	eq
 80032fa:	2308      	moveq	r3, #8
 80032fc:	230a      	movne	r3, #10
 80032fe:	4852      	ldr	r0, [pc, #328]	; (8003448 <_printf_i+0x244>)
 8003300:	2100      	movs	r1, #0
 8003302:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003306:	6866      	ldr	r6, [r4, #4]
 8003308:	2e00      	cmp	r6, #0
 800330a:	bfa8      	it	ge
 800330c:	6821      	ldrge	r1, [r4, #0]
 800330e:	60a6      	str	r6, [r4, #8]
 8003310:	bfa4      	itt	ge
 8003312:	f021 0104 	bicge.w	r1, r1, #4
 8003316:	6021      	strge	r1, [r4, #0]
 8003318:	b90d      	cbnz	r5, 800331e <_printf_i+0x11a>
 800331a:	2e00      	cmp	r6, #0
 800331c:	d04d      	beq.n	80033ba <_printf_i+0x1b6>
 800331e:	4616      	mov	r6, r2
 8003320:	fbb5 f1f3 	udiv	r1, r5, r3
 8003324:	fb03 5711 	mls	r7, r3, r1, r5
 8003328:	5dc7      	ldrb	r7, [r0, r7]
 800332a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800332e:	462f      	mov	r7, r5
 8003330:	42bb      	cmp	r3, r7
 8003332:	460d      	mov	r5, r1
 8003334:	d9f4      	bls.n	8003320 <_printf_i+0x11c>
 8003336:	2b08      	cmp	r3, #8
 8003338:	d10b      	bne.n	8003352 <_printf_i+0x14e>
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	07df      	lsls	r7, r3, #31
 800333e:	d508      	bpl.n	8003352 <_printf_i+0x14e>
 8003340:	6923      	ldr	r3, [r4, #16]
 8003342:	6861      	ldr	r1, [r4, #4]
 8003344:	4299      	cmp	r1, r3
 8003346:	bfde      	ittt	le
 8003348:	2330      	movle	r3, #48	; 0x30
 800334a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800334e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003352:	1b92      	subs	r2, r2, r6
 8003354:	6122      	str	r2, [r4, #16]
 8003356:	464b      	mov	r3, r9
 8003358:	4621      	mov	r1, r4
 800335a:	4640      	mov	r0, r8
 800335c:	f8cd a000 	str.w	sl, [sp]
 8003360:	aa03      	add	r2, sp, #12
 8003362:	f7ff fedf 	bl	8003124 <_printf_common>
 8003366:	3001      	adds	r0, #1
 8003368:	d14c      	bne.n	8003404 <_printf_i+0x200>
 800336a:	f04f 30ff 	mov.w	r0, #4294967295
 800336e:	b004      	add	sp, #16
 8003370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003374:	4834      	ldr	r0, [pc, #208]	; (8003448 <_printf_i+0x244>)
 8003376:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800337a:	680e      	ldr	r6, [r1, #0]
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003382:	061f      	lsls	r7, r3, #24
 8003384:	600e      	str	r6, [r1, #0]
 8003386:	d514      	bpl.n	80033b2 <_printf_i+0x1ae>
 8003388:	07d9      	lsls	r1, r3, #31
 800338a:	bf44      	itt	mi
 800338c:	f043 0320 	orrmi.w	r3, r3, #32
 8003390:	6023      	strmi	r3, [r4, #0]
 8003392:	b91d      	cbnz	r5, 800339c <_printf_i+0x198>
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	f023 0320 	bic.w	r3, r3, #32
 800339a:	6023      	str	r3, [r4, #0]
 800339c:	2310      	movs	r3, #16
 800339e:	e7af      	b.n	8003300 <_printf_i+0xfc>
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	f043 0320 	orr.w	r3, r3, #32
 80033a6:	6023      	str	r3, [r4, #0]
 80033a8:	2378      	movs	r3, #120	; 0x78
 80033aa:	4828      	ldr	r0, [pc, #160]	; (800344c <_printf_i+0x248>)
 80033ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033b0:	e7e3      	b.n	800337a <_printf_i+0x176>
 80033b2:	065e      	lsls	r6, r3, #25
 80033b4:	bf48      	it	mi
 80033b6:	b2ad      	uxthmi	r5, r5
 80033b8:	e7e6      	b.n	8003388 <_printf_i+0x184>
 80033ba:	4616      	mov	r6, r2
 80033bc:	e7bb      	b.n	8003336 <_printf_i+0x132>
 80033be:	680b      	ldr	r3, [r1, #0]
 80033c0:	6826      	ldr	r6, [r4, #0]
 80033c2:	1d1d      	adds	r5, r3, #4
 80033c4:	6960      	ldr	r0, [r4, #20]
 80033c6:	600d      	str	r5, [r1, #0]
 80033c8:	0635      	lsls	r5, r6, #24
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	d501      	bpl.n	80033d2 <_printf_i+0x1ce>
 80033ce:	6018      	str	r0, [r3, #0]
 80033d0:	e002      	b.n	80033d8 <_printf_i+0x1d4>
 80033d2:	0671      	lsls	r1, r6, #25
 80033d4:	d5fb      	bpl.n	80033ce <_printf_i+0x1ca>
 80033d6:	8018      	strh	r0, [r3, #0]
 80033d8:	2300      	movs	r3, #0
 80033da:	4616      	mov	r6, r2
 80033dc:	6123      	str	r3, [r4, #16]
 80033de:	e7ba      	b.n	8003356 <_printf_i+0x152>
 80033e0:	680b      	ldr	r3, [r1, #0]
 80033e2:	1d1a      	adds	r2, r3, #4
 80033e4:	600a      	str	r2, [r1, #0]
 80033e6:	681e      	ldr	r6, [r3, #0]
 80033e8:	2100      	movs	r1, #0
 80033ea:	4630      	mov	r0, r6
 80033ec:	6862      	ldr	r2, [r4, #4]
 80033ee:	f002 fb39 	bl	8005a64 <memchr>
 80033f2:	b108      	cbz	r0, 80033f8 <_printf_i+0x1f4>
 80033f4:	1b80      	subs	r0, r0, r6
 80033f6:	6060      	str	r0, [r4, #4]
 80033f8:	6863      	ldr	r3, [r4, #4]
 80033fa:	6123      	str	r3, [r4, #16]
 80033fc:	2300      	movs	r3, #0
 80033fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003402:	e7a8      	b.n	8003356 <_printf_i+0x152>
 8003404:	4632      	mov	r2, r6
 8003406:	4649      	mov	r1, r9
 8003408:	4640      	mov	r0, r8
 800340a:	6923      	ldr	r3, [r4, #16]
 800340c:	47d0      	blx	sl
 800340e:	3001      	adds	r0, #1
 8003410:	d0ab      	beq.n	800336a <_printf_i+0x166>
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	079b      	lsls	r3, r3, #30
 8003416:	d413      	bmi.n	8003440 <_printf_i+0x23c>
 8003418:	68e0      	ldr	r0, [r4, #12]
 800341a:	9b03      	ldr	r3, [sp, #12]
 800341c:	4298      	cmp	r0, r3
 800341e:	bfb8      	it	lt
 8003420:	4618      	movlt	r0, r3
 8003422:	e7a4      	b.n	800336e <_printf_i+0x16a>
 8003424:	2301      	movs	r3, #1
 8003426:	4632      	mov	r2, r6
 8003428:	4649      	mov	r1, r9
 800342a:	4640      	mov	r0, r8
 800342c:	47d0      	blx	sl
 800342e:	3001      	adds	r0, #1
 8003430:	d09b      	beq.n	800336a <_printf_i+0x166>
 8003432:	3501      	adds	r5, #1
 8003434:	68e3      	ldr	r3, [r4, #12]
 8003436:	9903      	ldr	r1, [sp, #12]
 8003438:	1a5b      	subs	r3, r3, r1
 800343a:	42ab      	cmp	r3, r5
 800343c:	dcf2      	bgt.n	8003424 <_printf_i+0x220>
 800343e:	e7eb      	b.n	8003418 <_printf_i+0x214>
 8003440:	2500      	movs	r5, #0
 8003442:	f104 0619 	add.w	r6, r4, #25
 8003446:	e7f5      	b.n	8003434 <_printf_i+0x230>
 8003448:	08007446 	.word	0x08007446
 800344c:	08007457 	.word	0x08007457

08003450 <_scanf_float>:
 8003450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003454:	b087      	sub	sp, #28
 8003456:	9303      	str	r3, [sp, #12]
 8003458:	688b      	ldr	r3, [r1, #8]
 800345a:	4617      	mov	r7, r2
 800345c:	1e5a      	subs	r2, r3, #1
 800345e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003462:	bf85      	ittet	hi
 8003464:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003468:	195b      	addhi	r3, r3, r5
 800346a:	2300      	movls	r3, #0
 800346c:	9302      	strhi	r3, [sp, #8]
 800346e:	bf88      	it	hi
 8003470:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003474:	468b      	mov	fp, r1
 8003476:	f04f 0500 	mov.w	r5, #0
 800347a:	bf8c      	ite	hi
 800347c:	608b      	strhi	r3, [r1, #8]
 800347e:	9302      	strls	r3, [sp, #8]
 8003480:	680b      	ldr	r3, [r1, #0]
 8003482:	4680      	mov	r8, r0
 8003484:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003488:	f84b 3b1c 	str.w	r3, [fp], #28
 800348c:	460c      	mov	r4, r1
 800348e:	465e      	mov	r6, fp
 8003490:	46aa      	mov	sl, r5
 8003492:	46a9      	mov	r9, r5
 8003494:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003498:	9501      	str	r5, [sp, #4]
 800349a:	68a2      	ldr	r2, [r4, #8]
 800349c:	b152      	cbz	r2, 80034b4 <_scanf_float+0x64>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b4e      	cmp	r3, #78	; 0x4e
 80034a4:	d864      	bhi.n	8003570 <_scanf_float+0x120>
 80034a6:	2b40      	cmp	r3, #64	; 0x40
 80034a8:	d83c      	bhi.n	8003524 <_scanf_float+0xd4>
 80034aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80034ae:	b2c8      	uxtb	r0, r1
 80034b0:	280e      	cmp	r0, #14
 80034b2:	d93a      	bls.n	800352a <_scanf_float+0xda>
 80034b4:	f1b9 0f00 	cmp.w	r9, #0
 80034b8:	d003      	beq.n	80034c2 <_scanf_float+0x72>
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034c0:	6023      	str	r3, [r4, #0]
 80034c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80034c6:	f1ba 0f01 	cmp.w	sl, #1
 80034ca:	f200 8113 	bhi.w	80036f4 <_scanf_float+0x2a4>
 80034ce:	455e      	cmp	r6, fp
 80034d0:	f200 8105 	bhi.w	80036de <_scanf_float+0x28e>
 80034d4:	2501      	movs	r5, #1
 80034d6:	4628      	mov	r0, r5
 80034d8:	b007      	add	sp, #28
 80034da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80034e2:	2a0d      	cmp	r2, #13
 80034e4:	d8e6      	bhi.n	80034b4 <_scanf_float+0x64>
 80034e6:	a101      	add	r1, pc, #4	; (adr r1, 80034ec <_scanf_float+0x9c>)
 80034e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80034ec:	0800362b 	.word	0x0800362b
 80034f0:	080034b5 	.word	0x080034b5
 80034f4:	080034b5 	.word	0x080034b5
 80034f8:	080034b5 	.word	0x080034b5
 80034fc:	0800368b 	.word	0x0800368b
 8003500:	08003663 	.word	0x08003663
 8003504:	080034b5 	.word	0x080034b5
 8003508:	080034b5 	.word	0x080034b5
 800350c:	08003639 	.word	0x08003639
 8003510:	080034b5 	.word	0x080034b5
 8003514:	080034b5 	.word	0x080034b5
 8003518:	080034b5 	.word	0x080034b5
 800351c:	080034b5 	.word	0x080034b5
 8003520:	080035f1 	.word	0x080035f1
 8003524:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003528:	e7db      	b.n	80034e2 <_scanf_float+0x92>
 800352a:	290e      	cmp	r1, #14
 800352c:	d8c2      	bhi.n	80034b4 <_scanf_float+0x64>
 800352e:	a001      	add	r0, pc, #4	; (adr r0, 8003534 <_scanf_float+0xe4>)
 8003530:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003534:	080035e3 	.word	0x080035e3
 8003538:	080034b5 	.word	0x080034b5
 800353c:	080035e3 	.word	0x080035e3
 8003540:	08003677 	.word	0x08003677
 8003544:	080034b5 	.word	0x080034b5
 8003548:	08003591 	.word	0x08003591
 800354c:	080035cd 	.word	0x080035cd
 8003550:	080035cd 	.word	0x080035cd
 8003554:	080035cd 	.word	0x080035cd
 8003558:	080035cd 	.word	0x080035cd
 800355c:	080035cd 	.word	0x080035cd
 8003560:	080035cd 	.word	0x080035cd
 8003564:	080035cd 	.word	0x080035cd
 8003568:	080035cd 	.word	0x080035cd
 800356c:	080035cd 	.word	0x080035cd
 8003570:	2b6e      	cmp	r3, #110	; 0x6e
 8003572:	d809      	bhi.n	8003588 <_scanf_float+0x138>
 8003574:	2b60      	cmp	r3, #96	; 0x60
 8003576:	d8b2      	bhi.n	80034de <_scanf_float+0x8e>
 8003578:	2b54      	cmp	r3, #84	; 0x54
 800357a:	d077      	beq.n	800366c <_scanf_float+0x21c>
 800357c:	2b59      	cmp	r3, #89	; 0x59
 800357e:	d199      	bne.n	80034b4 <_scanf_float+0x64>
 8003580:	2d07      	cmp	r5, #7
 8003582:	d197      	bne.n	80034b4 <_scanf_float+0x64>
 8003584:	2508      	movs	r5, #8
 8003586:	e029      	b.n	80035dc <_scanf_float+0x18c>
 8003588:	2b74      	cmp	r3, #116	; 0x74
 800358a:	d06f      	beq.n	800366c <_scanf_float+0x21c>
 800358c:	2b79      	cmp	r3, #121	; 0x79
 800358e:	e7f6      	b.n	800357e <_scanf_float+0x12e>
 8003590:	6821      	ldr	r1, [r4, #0]
 8003592:	05c8      	lsls	r0, r1, #23
 8003594:	d51a      	bpl.n	80035cc <_scanf_float+0x17c>
 8003596:	9b02      	ldr	r3, [sp, #8]
 8003598:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800359c:	6021      	str	r1, [r4, #0]
 800359e:	f109 0901 	add.w	r9, r9, #1
 80035a2:	b11b      	cbz	r3, 80035ac <_scanf_float+0x15c>
 80035a4:	3b01      	subs	r3, #1
 80035a6:	3201      	adds	r2, #1
 80035a8:	9302      	str	r3, [sp, #8]
 80035aa:	60a2      	str	r2, [r4, #8]
 80035ac:	68a3      	ldr	r3, [r4, #8]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	60a3      	str	r3, [r4, #8]
 80035b2:	6923      	ldr	r3, [r4, #16]
 80035b4:	3301      	adds	r3, #1
 80035b6:	6123      	str	r3, [r4, #16]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	607b      	str	r3, [r7, #4]
 80035c0:	f340 8084 	ble.w	80036cc <_scanf_float+0x27c>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	3301      	adds	r3, #1
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	e766      	b.n	800349a <_scanf_float+0x4a>
 80035cc:	eb1a 0f05 	cmn.w	sl, r5
 80035d0:	f47f af70 	bne.w	80034b4 <_scanf_float+0x64>
 80035d4:	6822      	ldr	r2, [r4, #0]
 80035d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80035da:	6022      	str	r2, [r4, #0]
 80035dc:	f806 3b01 	strb.w	r3, [r6], #1
 80035e0:	e7e4      	b.n	80035ac <_scanf_float+0x15c>
 80035e2:	6822      	ldr	r2, [r4, #0]
 80035e4:	0610      	lsls	r0, r2, #24
 80035e6:	f57f af65 	bpl.w	80034b4 <_scanf_float+0x64>
 80035ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035ee:	e7f4      	b.n	80035da <_scanf_float+0x18a>
 80035f0:	f1ba 0f00 	cmp.w	sl, #0
 80035f4:	d10e      	bne.n	8003614 <_scanf_float+0x1c4>
 80035f6:	f1b9 0f00 	cmp.w	r9, #0
 80035fa:	d10e      	bne.n	800361a <_scanf_float+0x1ca>
 80035fc:	6822      	ldr	r2, [r4, #0]
 80035fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003602:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003606:	d108      	bne.n	800361a <_scanf_float+0x1ca>
 8003608:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800360c:	f04f 0a01 	mov.w	sl, #1
 8003610:	6022      	str	r2, [r4, #0]
 8003612:	e7e3      	b.n	80035dc <_scanf_float+0x18c>
 8003614:	f1ba 0f02 	cmp.w	sl, #2
 8003618:	d055      	beq.n	80036c6 <_scanf_float+0x276>
 800361a:	2d01      	cmp	r5, #1
 800361c:	d002      	beq.n	8003624 <_scanf_float+0x1d4>
 800361e:	2d04      	cmp	r5, #4
 8003620:	f47f af48 	bne.w	80034b4 <_scanf_float+0x64>
 8003624:	3501      	adds	r5, #1
 8003626:	b2ed      	uxtb	r5, r5
 8003628:	e7d8      	b.n	80035dc <_scanf_float+0x18c>
 800362a:	f1ba 0f01 	cmp.w	sl, #1
 800362e:	f47f af41 	bne.w	80034b4 <_scanf_float+0x64>
 8003632:	f04f 0a02 	mov.w	sl, #2
 8003636:	e7d1      	b.n	80035dc <_scanf_float+0x18c>
 8003638:	b97d      	cbnz	r5, 800365a <_scanf_float+0x20a>
 800363a:	f1b9 0f00 	cmp.w	r9, #0
 800363e:	f47f af3c 	bne.w	80034ba <_scanf_float+0x6a>
 8003642:	6822      	ldr	r2, [r4, #0]
 8003644:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003648:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800364c:	f47f af39 	bne.w	80034c2 <_scanf_float+0x72>
 8003650:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003654:	2501      	movs	r5, #1
 8003656:	6022      	str	r2, [r4, #0]
 8003658:	e7c0      	b.n	80035dc <_scanf_float+0x18c>
 800365a:	2d03      	cmp	r5, #3
 800365c:	d0e2      	beq.n	8003624 <_scanf_float+0x1d4>
 800365e:	2d05      	cmp	r5, #5
 8003660:	e7de      	b.n	8003620 <_scanf_float+0x1d0>
 8003662:	2d02      	cmp	r5, #2
 8003664:	f47f af26 	bne.w	80034b4 <_scanf_float+0x64>
 8003668:	2503      	movs	r5, #3
 800366a:	e7b7      	b.n	80035dc <_scanf_float+0x18c>
 800366c:	2d06      	cmp	r5, #6
 800366e:	f47f af21 	bne.w	80034b4 <_scanf_float+0x64>
 8003672:	2507      	movs	r5, #7
 8003674:	e7b2      	b.n	80035dc <_scanf_float+0x18c>
 8003676:	6822      	ldr	r2, [r4, #0]
 8003678:	0591      	lsls	r1, r2, #22
 800367a:	f57f af1b 	bpl.w	80034b4 <_scanf_float+0x64>
 800367e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003682:	6022      	str	r2, [r4, #0]
 8003684:	f8cd 9004 	str.w	r9, [sp, #4]
 8003688:	e7a8      	b.n	80035dc <_scanf_float+0x18c>
 800368a:	6822      	ldr	r2, [r4, #0]
 800368c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003690:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003694:	d006      	beq.n	80036a4 <_scanf_float+0x254>
 8003696:	0550      	lsls	r0, r2, #21
 8003698:	f57f af0c 	bpl.w	80034b4 <_scanf_float+0x64>
 800369c:	f1b9 0f00 	cmp.w	r9, #0
 80036a0:	f43f af0f 	beq.w	80034c2 <_scanf_float+0x72>
 80036a4:	0591      	lsls	r1, r2, #22
 80036a6:	bf58      	it	pl
 80036a8:	9901      	ldrpl	r1, [sp, #4]
 80036aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80036ae:	bf58      	it	pl
 80036b0:	eba9 0101 	subpl.w	r1, r9, r1
 80036b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80036b8:	f04f 0900 	mov.w	r9, #0
 80036bc:	bf58      	it	pl
 80036be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80036c2:	6022      	str	r2, [r4, #0]
 80036c4:	e78a      	b.n	80035dc <_scanf_float+0x18c>
 80036c6:	f04f 0a03 	mov.w	sl, #3
 80036ca:	e787      	b.n	80035dc <_scanf_float+0x18c>
 80036cc:	4639      	mov	r1, r7
 80036ce:	4640      	mov	r0, r8
 80036d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80036d4:	4798      	blx	r3
 80036d6:	2800      	cmp	r0, #0
 80036d8:	f43f aedf 	beq.w	800349a <_scanf_float+0x4a>
 80036dc:	e6ea      	b.n	80034b4 <_scanf_float+0x64>
 80036de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036e2:	463a      	mov	r2, r7
 80036e4:	4640      	mov	r0, r8
 80036e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80036ea:	4798      	blx	r3
 80036ec:	6923      	ldr	r3, [r4, #16]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	6123      	str	r3, [r4, #16]
 80036f2:	e6ec      	b.n	80034ce <_scanf_float+0x7e>
 80036f4:	1e6b      	subs	r3, r5, #1
 80036f6:	2b06      	cmp	r3, #6
 80036f8:	d825      	bhi.n	8003746 <_scanf_float+0x2f6>
 80036fa:	2d02      	cmp	r5, #2
 80036fc:	d836      	bhi.n	800376c <_scanf_float+0x31c>
 80036fe:	455e      	cmp	r6, fp
 8003700:	f67f aee8 	bls.w	80034d4 <_scanf_float+0x84>
 8003704:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003708:	463a      	mov	r2, r7
 800370a:	4640      	mov	r0, r8
 800370c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003710:	4798      	blx	r3
 8003712:	6923      	ldr	r3, [r4, #16]
 8003714:	3b01      	subs	r3, #1
 8003716:	6123      	str	r3, [r4, #16]
 8003718:	e7f1      	b.n	80036fe <_scanf_float+0x2ae>
 800371a:	9802      	ldr	r0, [sp, #8]
 800371c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003720:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003724:	463a      	mov	r2, r7
 8003726:	9002      	str	r0, [sp, #8]
 8003728:	4640      	mov	r0, r8
 800372a:	4798      	blx	r3
 800372c:	6923      	ldr	r3, [r4, #16]
 800372e:	3b01      	subs	r3, #1
 8003730:	6123      	str	r3, [r4, #16]
 8003732:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003736:	fa5f fa8a 	uxtb.w	sl, sl
 800373a:	f1ba 0f02 	cmp.w	sl, #2
 800373e:	d1ec      	bne.n	800371a <_scanf_float+0x2ca>
 8003740:	3d03      	subs	r5, #3
 8003742:	b2ed      	uxtb	r5, r5
 8003744:	1b76      	subs	r6, r6, r5
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	05da      	lsls	r2, r3, #23
 800374a:	d52f      	bpl.n	80037ac <_scanf_float+0x35c>
 800374c:	055b      	lsls	r3, r3, #21
 800374e:	d510      	bpl.n	8003772 <_scanf_float+0x322>
 8003750:	455e      	cmp	r6, fp
 8003752:	f67f aebf 	bls.w	80034d4 <_scanf_float+0x84>
 8003756:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800375a:	463a      	mov	r2, r7
 800375c:	4640      	mov	r0, r8
 800375e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003762:	4798      	blx	r3
 8003764:	6923      	ldr	r3, [r4, #16]
 8003766:	3b01      	subs	r3, #1
 8003768:	6123      	str	r3, [r4, #16]
 800376a:	e7f1      	b.n	8003750 <_scanf_float+0x300>
 800376c:	46aa      	mov	sl, r5
 800376e:	9602      	str	r6, [sp, #8]
 8003770:	e7df      	b.n	8003732 <_scanf_float+0x2e2>
 8003772:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003776:	6923      	ldr	r3, [r4, #16]
 8003778:	2965      	cmp	r1, #101	; 0x65
 800377a:	f103 33ff 	add.w	r3, r3, #4294967295
 800377e:	f106 35ff 	add.w	r5, r6, #4294967295
 8003782:	6123      	str	r3, [r4, #16]
 8003784:	d00c      	beq.n	80037a0 <_scanf_float+0x350>
 8003786:	2945      	cmp	r1, #69	; 0x45
 8003788:	d00a      	beq.n	80037a0 <_scanf_float+0x350>
 800378a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800378e:	463a      	mov	r2, r7
 8003790:	4640      	mov	r0, r8
 8003792:	4798      	blx	r3
 8003794:	6923      	ldr	r3, [r4, #16]
 8003796:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800379a:	3b01      	subs	r3, #1
 800379c:	1eb5      	subs	r5, r6, #2
 800379e:	6123      	str	r3, [r4, #16]
 80037a0:	463a      	mov	r2, r7
 80037a2:	4640      	mov	r0, r8
 80037a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80037a8:	4798      	blx	r3
 80037aa:	462e      	mov	r6, r5
 80037ac:	6825      	ldr	r5, [r4, #0]
 80037ae:	f015 0510 	ands.w	r5, r5, #16
 80037b2:	d159      	bne.n	8003868 <_scanf_float+0x418>
 80037b4:	7035      	strb	r5, [r6, #0]
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c0:	d11c      	bne.n	80037fc <_scanf_float+0x3ac>
 80037c2:	9b01      	ldr	r3, [sp, #4]
 80037c4:	454b      	cmp	r3, r9
 80037c6:	eba3 0209 	sub.w	r2, r3, r9
 80037ca:	d124      	bne.n	8003816 <_scanf_float+0x3c6>
 80037cc:	2200      	movs	r2, #0
 80037ce:	4659      	mov	r1, fp
 80037d0:	4640      	mov	r0, r8
 80037d2:	f000 fea1 	bl	8004518 <_strtod_r>
 80037d6:	f8d4 c000 	ldr.w	ip, [r4]
 80037da:	9b03      	ldr	r3, [sp, #12]
 80037dc:	f01c 0f02 	tst.w	ip, #2
 80037e0:	4606      	mov	r6, r0
 80037e2:	460f      	mov	r7, r1
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	d021      	beq.n	800382c <_scanf_float+0x3dc>
 80037e8:	9903      	ldr	r1, [sp, #12]
 80037ea:	1d1a      	adds	r2, r3, #4
 80037ec:	600a      	str	r2, [r1, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	e9c3 6700 	strd	r6, r7, [r3]
 80037f4:	68e3      	ldr	r3, [r4, #12]
 80037f6:	3301      	adds	r3, #1
 80037f8:	60e3      	str	r3, [r4, #12]
 80037fa:	e66c      	b.n	80034d6 <_scanf_float+0x86>
 80037fc:	9b04      	ldr	r3, [sp, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0e4      	beq.n	80037cc <_scanf_float+0x37c>
 8003802:	9905      	ldr	r1, [sp, #20]
 8003804:	230a      	movs	r3, #10
 8003806:	462a      	mov	r2, r5
 8003808:	4640      	mov	r0, r8
 800380a:	3101      	adds	r1, #1
 800380c:	f000 ff1c 	bl	8004648 <_strtol_r>
 8003810:	9b04      	ldr	r3, [sp, #16]
 8003812:	9e05      	ldr	r6, [sp, #20]
 8003814:	1ac2      	subs	r2, r0, r3
 8003816:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800381a:	429e      	cmp	r6, r3
 800381c:	bf28      	it	cs
 800381e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003822:	4630      	mov	r0, r6
 8003824:	4911      	ldr	r1, [pc, #68]	; (800386c <_scanf_float+0x41c>)
 8003826:	f000 f829 	bl	800387c <siprintf>
 800382a:	e7cf      	b.n	80037cc <_scanf_float+0x37c>
 800382c:	f01c 0f04 	tst.w	ip, #4
 8003830:	f103 0e04 	add.w	lr, r3, #4
 8003834:	d003      	beq.n	800383e <_scanf_float+0x3ee>
 8003836:	9903      	ldr	r1, [sp, #12]
 8003838:	f8c1 e000 	str.w	lr, [r1]
 800383c:	e7d7      	b.n	80037ee <_scanf_float+0x39e>
 800383e:	9a03      	ldr	r2, [sp, #12]
 8003840:	f8c2 e000 	str.w	lr, [r2]
 8003844:	f8d3 8000 	ldr.w	r8, [r3]
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	f7fd f8de 	bl	8000a0c <__aeabi_dcmpun>
 8003850:	b128      	cbz	r0, 800385e <_scanf_float+0x40e>
 8003852:	4807      	ldr	r0, [pc, #28]	; (8003870 <_scanf_float+0x420>)
 8003854:	f000 f80e 	bl	8003874 <nanf>
 8003858:	f8c8 0000 	str.w	r0, [r8]
 800385c:	e7ca      	b.n	80037f4 <_scanf_float+0x3a4>
 800385e:	4630      	mov	r0, r6
 8003860:	4639      	mov	r1, r7
 8003862:	f7fd f931 	bl	8000ac8 <__aeabi_d2f>
 8003866:	e7f7      	b.n	8003858 <_scanf_float+0x408>
 8003868:	2500      	movs	r5, #0
 800386a:	e634      	b.n	80034d6 <_scanf_float+0x86>
 800386c:	08007468 	.word	0x08007468
 8003870:	08007880 	.word	0x08007880

08003874 <nanf>:
 8003874:	4800      	ldr	r0, [pc, #0]	; (8003878 <nanf+0x4>)
 8003876:	4770      	bx	lr
 8003878:	7fc00000 	.word	0x7fc00000

0800387c <siprintf>:
 800387c:	b40e      	push	{r1, r2, r3}
 800387e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003882:	b500      	push	{lr}
 8003884:	b09c      	sub	sp, #112	; 0x70
 8003886:	ab1d      	add	r3, sp, #116	; 0x74
 8003888:	9002      	str	r0, [sp, #8]
 800388a:	9006      	str	r0, [sp, #24]
 800388c:	9107      	str	r1, [sp, #28]
 800388e:	9104      	str	r1, [sp, #16]
 8003890:	4808      	ldr	r0, [pc, #32]	; (80038b4 <siprintf+0x38>)
 8003892:	4909      	ldr	r1, [pc, #36]	; (80038b8 <siprintf+0x3c>)
 8003894:	f853 2b04 	ldr.w	r2, [r3], #4
 8003898:	9105      	str	r1, [sp, #20]
 800389a:	6800      	ldr	r0, [r0, #0]
 800389c:	a902      	add	r1, sp, #8
 800389e:	9301      	str	r3, [sp, #4]
 80038a0:	f002 feb6 	bl	8006610 <_svfiprintf_r>
 80038a4:	2200      	movs	r2, #0
 80038a6:	9b02      	ldr	r3, [sp, #8]
 80038a8:	701a      	strb	r2, [r3, #0]
 80038aa:	b01c      	add	sp, #112	; 0x70
 80038ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80038b0:	b003      	add	sp, #12
 80038b2:	4770      	bx	lr
 80038b4:	2000000c 	.word	0x2000000c
 80038b8:	ffff0208 	.word	0xffff0208

080038bc <strstr>:
 80038bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038be:	780c      	ldrb	r4, [r1, #0]
 80038c0:	b164      	cbz	r4, 80038dc <strstr+0x20>
 80038c2:	4603      	mov	r3, r0
 80038c4:	781a      	ldrb	r2, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	1c5e      	adds	r6, r3, #1
 80038ca:	b90a      	cbnz	r2, 80038d0 <strstr+0x14>
 80038cc:	4610      	mov	r0, r2
 80038ce:	e005      	b.n	80038dc <strstr+0x20>
 80038d0:	4294      	cmp	r4, r2
 80038d2:	d108      	bne.n	80038e6 <strstr+0x2a>
 80038d4:	460d      	mov	r5, r1
 80038d6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80038da:	b902      	cbnz	r2, 80038de <strstr+0x22>
 80038dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038de:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80038e2:	4297      	cmp	r7, r2
 80038e4:	d0f7      	beq.n	80038d6 <strstr+0x1a>
 80038e6:	4633      	mov	r3, r6
 80038e8:	e7ec      	b.n	80038c4 <strstr+0x8>

080038ea <sulp>:
 80038ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038ee:	460f      	mov	r7, r1
 80038f0:	4690      	mov	r8, r2
 80038f2:	f002 fc35 	bl	8006160 <__ulp>
 80038f6:	4604      	mov	r4, r0
 80038f8:	460d      	mov	r5, r1
 80038fa:	f1b8 0f00 	cmp.w	r8, #0
 80038fe:	d011      	beq.n	8003924 <sulp+0x3a>
 8003900:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003904:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003908:	2b00      	cmp	r3, #0
 800390a:	dd0b      	ble.n	8003924 <sulp+0x3a>
 800390c:	2400      	movs	r4, #0
 800390e:	051b      	lsls	r3, r3, #20
 8003910:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003914:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003918:	4622      	mov	r2, r4
 800391a:	462b      	mov	r3, r5
 800391c:	f7fc fddc 	bl	80004d8 <__aeabi_dmul>
 8003920:	4604      	mov	r4, r0
 8003922:	460d      	mov	r5, r1
 8003924:	4620      	mov	r0, r4
 8003926:	4629      	mov	r1, r5
 8003928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800392c:	0000      	movs	r0, r0
	...

08003930 <_strtod_l>:
 8003930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003934:	469b      	mov	fp, r3
 8003936:	2300      	movs	r3, #0
 8003938:	b0a1      	sub	sp, #132	; 0x84
 800393a:	931c      	str	r3, [sp, #112]	; 0x70
 800393c:	4ba1      	ldr	r3, [pc, #644]	; (8003bc4 <_strtod_l+0x294>)
 800393e:	4682      	mov	sl, r0
 8003940:	681f      	ldr	r7, [r3, #0]
 8003942:	460e      	mov	r6, r1
 8003944:	4638      	mov	r0, r7
 8003946:	9217      	str	r2, [sp, #92]	; 0x5c
 8003948:	f7fc fc02 	bl	8000150 <strlen>
 800394c:	f04f 0800 	mov.w	r8, #0
 8003950:	4604      	mov	r4, r0
 8003952:	f04f 0900 	mov.w	r9, #0
 8003956:	961b      	str	r6, [sp, #108]	; 0x6c
 8003958:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	2a2b      	cmp	r2, #43	; 0x2b
 800395e:	d04c      	beq.n	80039fa <_strtod_l+0xca>
 8003960:	d83a      	bhi.n	80039d8 <_strtod_l+0xa8>
 8003962:	2a0d      	cmp	r2, #13
 8003964:	d833      	bhi.n	80039ce <_strtod_l+0x9e>
 8003966:	2a08      	cmp	r2, #8
 8003968:	d833      	bhi.n	80039d2 <_strtod_l+0xa2>
 800396a:	2a00      	cmp	r2, #0
 800396c:	d03d      	beq.n	80039ea <_strtod_l+0xba>
 800396e:	2300      	movs	r3, #0
 8003970:	930c      	str	r3, [sp, #48]	; 0x30
 8003972:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003974:	782b      	ldrb	r3, [r5, #0]
 8003976:	2b30      	cmp	r3, #48	; 0x30
 8003978:	f040 80af 	bne.w	8003ada <_strtod_l+0x1aa>
 800397c:	786b      	ldrb	r3, [r5, #1]
 800397e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003982:	2b58      	cmp	r3, #88	; 0x58
 8003984:	d16c      	bne.n	8003a60 <_strtod_l+0x130>
 8003986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003988:	4650      	mov	r0, sl
 800398a:	9301      	str	r3, [sp, #4]
 800398c:	ab1c      	add	r3, sp, #112	; 0x70
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	4a8d      	ldr	r2, [pc, #564]	; (8003bc8 <_strtod_l+0x298>)
 8003992:	f8cd b008 	str.w	fp, [sp, #8]
 8003996:	ab1d      	add	r3, sp, #116	; 0x74
 8003998:	a91b      	add	r1, sp, #108	; 0x6c
 800399a:	f001 fd47 	bl	800542c <__gethex>
 800399e:	f010 0607 	ands.w	r6, r0, #7
 80039a2:	4604      	mov	r4, r0
 80039a4:	d005      	beq.n	80039b2 <_strtod_l+0x82>
 80039a6:	2e06      	cmp	r6, #6
 80039a8:	d129      	bne.n	80039fe <_strtod_l+0xce>
 80039aa:	2300      	movs	r3, #0
 80039ac:	3501      	adds	r5, #1
 80039ae:	951b      	str	r5, [sp, #108]	; 0x6c
 80039b0:	930c      	str	r3, [sp, #48]	; 0x30
 80039b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f040 8596 	bne.w	80044e6 <_strtod_l+0xbb6>
 80039ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039bc:	b1d3      	cbz	r3, 80039f4 <_strtod_l+0xc4>
 80039be:	4642      	mov	r2, r8
 80039c0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80039c4:	4610      	mov	r0, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	b021      	add	sp, #132	; 0x84
 80039ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ce:	2a20      	cmp	r2, #32
 80039d0:	d1cd      	bne.n	800396e <_strtod_l+0x3e>
 80039d2:	3301      	adds	r3, #1
 80039d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80039d6:	e7bf      	b.n	8003958 <_strtod_l+0x28>
 80039d8:	2a2d      	cmp	r2, #45	; 0x2d
 80039da:	d1c8      	bne.n	800396e <_strtod_l+0x3e>
 80039dc:	2201      	movs	r2, #1
 80039de:	920c      	str	r2, [sp, #48]	; 0x30
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80039e4:	785b      	ldrb	r3, [r3, #1]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1c3      	bne.n	8003972 <_strtod_l+0x42>
 80039ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80039ec:	961b      	str	r6, [sp, #108]	; 0x6c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f040 8577 	bne.w	80044e2 <_strtod_l+0xbb2>
 80039f4:	4642      	mov	r2, r8
 80039f6:	464b      	mov	r3, r9
 80039f8:	e7e4      	b.n	80039c4 <_strtod_l+0x94>
 80039fa:	2200      	movs	r2, #0
 80039fc:	e7ef      	b.n	80039de <_strtod_l+0xae>
 80039fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003a00:	b13a      	cbz	r2, 8003a12 <_strtod_l+0xe2>
 8003a02:	2135      	movs	r1, #53	; 0x35
 8003a04:	a81e      	add	r0, sp, #120	; 0x78
 8003a06:	f002 fcaf 	bl	8006368 <__copybits>
 8003a0a:	4650      	mov	r0, sl
 8003a0c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003a0e:	f002 f877 	bl	8005b00 <_Bfree>
 8003a12:	3e01      	subs	r6, #1
 8003a14:	2e05      	cmp	r6, #5
 8003a16:	d807      	bhi.n	8003a28 <_strtod_l+0xf8>
 8003a18:	e8df f006 	tbb	[pc, r6]
 8003a1c:	1d180b0e 	.word	0x1d180b0e
 8003a20:	030e      	.short	0x030e
 8003a22:	f04f 0900 	mov.w	r9, #0
 8003a26:	46c8      	mov	r8, r9
 8003a28:	0721      	lsls	r1, r4, #28
 8003a2a:	d5c2      	bpl.n	80039b2 <_strtod_l+0x82>
 8003a2c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003a30:	e7bf      	b.n	80039b2 <_strtod_l+0x82>
 8003a32:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8003a36:	e7f7      	b.n	8003a28 <_strtod_l+0xf8>
 8003a38:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003a3a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8003a3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003a42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a46:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003a4a:	e7ed      	b.n	8003a28 <_strtod_l+0xf8>
 8003a4c:	f04f 0800 	mov.w	r8, #0
 8003a50:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003bcc <_strtod_l+0x29c>
 8003a54:	e7e8      	b.n	8003a28 <_strtod_l+0xf8>
 8003a56:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003a5a:	f04f 38ff 	mov.w	r8, #4294967295
 8003a5e:	e7e3      	b.n	8003a28 <_strtod_l+0xf8>
 8003a60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	921b      	str	r2, [sp, #108]	; 0x6c
 8003a66:	785b      	ldrb	r3, [r3, #1]
 8003a68:	2b30      	cmp	r3, #48	; 0x30
 8003a6a:	d0f9      	beq.n	8003a60 <_strtod_l+0x130>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0a0      	beq.n	80039b2 <_strtod_l+0x82>
 8003a70:	2301      	movs	r3, #1
 8003a72:	9307      	str	r3, [sp, #28]
 8003a74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a76:	220a      	movs	r2, #10
 8003a78:	9308      	str	r3, [sp, #32]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	469b      	mov	fp, r3
 8003a7e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003a82:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003a84:	7805      	ldrb	r5, [r0, #0]
 8003a86:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003a8a:	b2d9      	uxtb	r1, r3
 8003a8c:	2909      	cmp	r1, #9
 8003a8e:	d926      	bls.n	8003ade <_strtod_l+0x1ae>
 8003a90:	4622      	mov	r2, r4
 8003a92:	4639      	mov	r1, r7
 8003a94:	f002 fed2 	bl	800683c <strncmp>
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d032      	beq.n	8003b02 <_strtod_l+0x1d2>
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	462b      	mov	r3, r5
 8003aa0:	465c      	mov	r4, fp
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	9004      	str	r0, [sp, #16]
 8003aa6:	2b65      	cmp	r3, #101	; 0x65
 8003aa8:	d001      	beq.n	8003aae <_strtod_l+0x17e>
 8003aaa:	2b45      	cmp	r3, #69	; 0x45
 8003aac:	d113      	bne.n	8003ad6 <_strtod_l+0x1a6>
 8003aae:	b91c      	cbnz	r4, 8003ab8 <_strtod_l+0x188>
 8003ab0:	9b07      	ldr	r3, [sp, #28]
 8003ab2:	4303      	orrs	r3, r0
 8003ab4:	d099      	beq.n	80039ea <_strtod_l+0xba>
 8003ab6:	2400      	movs	r4, #0
 8003ab8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8003aba:	1c73      	adds	r3, r6, #1
 8003abc:	931b      	str	r3, [sp, #108]	; 0x6c
 8003abe:	7873      	ldrb	r3, [r6, #1]
 8003ac0:	2b2b      	cmp	r3, #43	; 0x2b
 8003ac2:	d078      	beq.n	8003bb6 <_strtod_l+0x286>
 8003ac4:	2b2d      	cmp	r3, #45	; 0x2d
 8003ac6:	d07b      	beq.n	8003bc0 <_strtod_l+0x290>
 8003ac8:	2700      	movs	r7, #0
 8003aca:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003ace:	2909      	cmp	r1, #9
 8003ad0:	f240 8082 	bls.w	8003bd8 <_strtod_l+0x2a8>
 8003ad4:	961b      	str	r6, [sp, #108]	; 0x6c
 8003ad6:	2500      	movs	r5, #0
 8003ad8:	e09e      	b.n	8003c18 <_strtod_l+0x2e8>
 8003ada:	2300      	movs	r3, #0
 8003adc:	e7c9      	b.n	8003a72 <_strtod_l+0x142>
 8003ade:	f1bb 0f08 	cmp.w	fp, #8
 8003ae2:	bfd5      	itete	le
 8003ae4:	9906      	ldrle	r1, [sp, #24]
 8003ae6:	9905      	ldrgt	r1, [sp, #20]
 8003ae8:	fb02 3301 	mlale	r3, r2, r1, r3
 8003aec:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003af0:	f100 0001 	add.w	r0, r0, #1
 8003af4:	bfd4      	ite	le
 8003af6:	9306      	strle	r3, [sp, #24]
 8003af8:	9305      	strgt	r3, [sp, #20]
 8003afa:	f10b 0b01 	add.w	fp, fp, #1
 8003afe:	901b      	str	r0, [sp, #108]	; 0x6c
 8003b00:	e7bf      	b.n	8003a82 <_strtod_l+0x152>
 8003b02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b04:	191a      	adds	r2, r3, r4
 8003b06:	921b      	str	r2, [sp, #108]	; 0x6c
 8003b08:	5d1b      	ldrb	r3, [r3, r4]
 8003b0a:	f1bb 0f00 	cmp.w	fp, #0
 8003b0e:	d036      	beq.n	8003b7e <_strtod_l+0x24e>
 8003b10:	465c      	mov	r4, fp
 8003b12:	9004      	str	r0, [sp, #16]
 8003b14:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003b18:	2a09      	cmp	r2, #9
 8003b1a:	d912      	bls.n	8003b42 <_strtod_l+0x212>
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	e7c2      	b.n	8003aa6 <_strtod_l+0x176>
 8003b20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b22:	3001      	adds	r0, #1
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	921b      	str	r2, [sp, #108]	; 0x6c
 8003b28:	785b      	ldrb	r3, [r3, #1]
 8003b2a:	2b30      	cmp	r3, #48	; 0x30
 8003b2c:	d0f8      	beq.n	8003b20 <_strtod_l+0x1f0>
 8003b2e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003b32:	2a08      	cmp	r2, #8
 8003b34:	f200 84dc 	bhi.w	80044f0 <_strtod_l+0xbc0>
 8003b38:	9004      	str	r0, [sp, #16]
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	4604      	mov	r4, r0
 8003b3e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003b40:	9208      	str	r2, [sp, #32]
 8003b42:	3b30      	subs	r3, #48	; 0x30
 8003b44:	f100 0201 	add.w	r2, r0, #1
 8003b48:	d013      	beq.n	8003b72 <_strtod_l+0x242>
 8003b4a:	9904      	ldr	r1, [sp, #16]
 8003b4c:	1905      	adds	r5, r0, r4
 8003b4e:	4411      	add	r1, r2
 8003b50:	9104      	str	r1, [sp, #16]
 8003b52:	4622      	mov	r2, r4
 8003b54:	210a      	movs	r1, #10
 8003b56:	42aa      	cmp	r2, r5
 8003b58:	d113      	bne.n	8003b82 <_strtod_l+0x252>
 8003b5a:	1822      	adds	r2, r4, r0
 8003b5c:	2a08      	cmp	r2, #8
 8003b5e:	f104 0401 	add.w	r4, r4, #1
 8003b62:	4404      	add	r4, r0
 8003b64:	dc1b      	bgt.n	8003b9e <_strtod_l+0x26e>
 8003b66:	220a      	movs	r2, #10
 8003b68:	9906      	ldr	r1, [sp, #24]
 8003b6a:	fb02 3301 	mla	r3, r2, r1, r3
 8003b6e:	9306      	str	r3, [sp, #24]
 8003b70:	2200      	movs	r2, #0
 8003b72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b74:	4610      	mov	r0, r2
 8003b76:	1c59      	adds	r1, r3, #1
 8003b78:	911b      	str	r1, [sp, #108]	; 0x6c
 8003b7a:	785b      	ldrb	r3, [r3, #1]
 8003b7c:	e7ca      	b.n	8003b14 <_strtod_l+0x1e4>
 8003b7e:	4658      	mov	r0, fp
 8003b80:	e7d3      	b.n	8003b2a <_strtod_l+0x1fa>
 8003b82:	2a08      	cmp	r2, #8
 8003b84:	dc04      	bgt.n	8003b90 <_strtod_l+0x260>
 8003b86:	9f06      	ldr	r7, [sp, #24]
 8003b88:	434f      	muls	r7, r1
 8003b8a:	9706      	str	r7, [sp, #24]
 8003b8c:	3201      	adds	r2, #1
 8003b8e:	e7e2      	b.n	8003b56 <_strtod_l+0x226>
 8003b90:	1c57      	adds	r7, r2, #1
 8003b92:	2f10      	cmp	r7, #16
 8003b94:	bfde      	ittt	le
 8003b96:	9f05      	ldrle	r7, [sp, #20]
 8003b98:	434f      	mulle	r7, r1
 8003b9a:	9705      	strle	r7, [sp, #20]
 8003b9c:	e7f6      	b.n	8003b8c <_strtod_l+0x25c>
 8003b9e:	2c10      	cmp	r4, #16
 8003ba0:	bfdf      	itttt	le
 8003ba2:	220a      	movle	r2, #10
 8003ba4:	9905      	ldrle	r1, [sp, #20]
 8003ba6:	fb02 3301 	mlale	r3, r2, r1, r3
 8003baa:	9305      	strle	r3, [sp, #20]
 8003bac:	e7e0      	b.n	8003b70 <_strtod_l+0x240>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	9304      	str	r3, [sp, #16]
 8003bb4:	e77c      	b.n	8003ab0 <_strtod_l+0x180>
 8003bb6:	2700      	movs	r7, #0
 8003bb8:	1cb3      	adds	r3, r6, #2
 8003bba:	931b      	str	r3, [sp, #108]	; 0x6c
 8003bbc:	78b3      	ldrb	r3, [r6, #2]
 8003bbe:	e784      	b.n	8003aca <_strtod_l+0x19a>
 8003bc0:	2701      	movs	r7, #1
 8003bc2:	e7f9      	b.n	8003bb8 <_strtod_l+0x288>
 8003bc4:	080076c0 	.word	0x080076c0
 8003bc8:	08007470 	.word	0x08007470
 8003bcc:	7ff00000 	.word	0x7ff00000
 8003bd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bd2:	1c59      	adds	r1, r3, #1
 8003bd4:	911b      	str	r1, [sp, #108]	; 0x6c
 8003bd6:	785b      	ldrb	r3, [r3, #1]
 8003bd8:	2b30      	cmp	r3, #48	; 0x30
 8003bda:	d0f9      	beq.n	8003bd0 <_strtod_l+0x2a0>
 8003bdc:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8003be0:	2908      	cmp	r1, #8
 8003be2:	f63f af78 	bhi.w	8003ad6 <_strtod_l+0x1a6>
 8003be6:	f04f 0e0a 	mov.w	lr, #10
 8003bea:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8003bee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8003bf2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bf4:	1c59      	adds	r1, r3, #1
 8003bf6:	911b      	str	r1, [sp, #108]	; 0x6c
 8003bf8:	785b      	ldrb	r3, [r3, #1]
 8003bfa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8003bfe:	2d09      	cmp	r5, #9
 8003c00:	d935      	bls.n	8003c6e <_strtod_l+0x33e>
 8003c02:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003c04:	1b49      	subs	r1, r1, r5
 8003c06:	2908      	cmp	r1, #8
 8003c08:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8003c0c:	dc02      	bgt.n	8003c14 <_strtod_l+0x2e4>
 8003c0e:	4565      	cmp	r5, ip
 8003c10:	bfa8      	it	ge
 8003c12:	4665      	movge	r5, ip
 8003c14:	b107      	cbz	r7, 8003c18 <_strtod_l+0x2e8>
 8003c16:	426d      	negs	r5, r5
 8003c18:	2c00      	cmp	r4, #0
 8003c1a:	d14c      	bne.n	8003cb6 <_strtod_l+0x386>
 8003c1c:	9907      	ldr	r1, [sp, #28]
 8003c1e:	4301      	orrs	r1, r0
 8003c20:	f47f aec7 	bne.w	80039b2 <_strtod_l+0x82>
 8003c24:	2a00      	cmp	r2, #0
 8003c26:	f47f aee0 	bne.w	80039ea <_strtod_l+0xba>
 8003c2a:	2b69      	cmp	r3, #105	; 0x69
 8003c2c:	d026      	beq.n	8003c7c <_strtod_l+0x34c>
 8003c2e:	dc23      	bgt.n	8003c78 <_strtod_l+0x348>
 8003c30:	2b49      	cmp	r3, #73	; 0x49
 8003c32:	d023      	beq.n	8003c7c <_strtod_l+0x34c>
 8003c34:	2b4e      	cmp	r3, #78	; 0x4e
 8003c36:	f47f aed8 	bne.w	80039ea <_strtod_l+0xba>
 8003c3a:	499c      	ldr	r1, [pc, #624]	; (8003eac <_strtod_l+0x57c>)
 8003c3c:	a81b      	add	r0, sp, #108	; 0x6c
 8003c3e:	f001 fe43 	bl	80058c8 <__match>
 8003c42:	2800      	cmp	r0, #0
 8003c44:	f43f aed1 	beq.w	80039ea <_strtod_l+0xba>
 8003c48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b28      	cmp	r3, #40	; 0x28
 8003c4e:	d12c      	bne.n	8003caa <_strtod_l+0x37a>
 8003c50:	4997      	ldr	r1, [pc, #604]	; (8003eb0 <_strtod_l+0x580>)
 8003c52:	aa1e      	add	r2, sp, #120	; 0x78
 8003c54:	a81b      	add	r0, sp, #108	; 0x6c
 8003c56:	f001 fe4b 	bl	80058f0 <__hexnan>
 8003c5a:	2805      	cmp	r0, #5
 8003c5c:	d125      	bne.n	8003caa <_strtod_l+0x37a>
 8003c5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003c60:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8003c64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003c68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003c6c:	e6a1      	b.n	80039b2 <_strtod_l+0x82>
 8003c6e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8003c72:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003c76:	e7bc      	b.n	8003bf2 <_strtod_l+0x2c2>
 8003c78:	2b6e      	cmp	r3, #110	; 0x6e
 8003c7a:	e7dc      	b.n	8003c36 <_strtod_l+0x306>
 8003c7c:	498d      	ldr	r1, [pc, #564]	; (8003eb4 <_strtod_l+0x584>)
 8003c7e:	a81b      	add	r0, sp, #108	; 0x6c
 8003c80:	f001 fe22 	bl	80058c8 <__match>
 8003c84:	2800      	cmp	r0, #0
 8003c86:	f43f aeb0 	beq.w	80039ea <_strtod_l+0xba>
 8003c8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c8c:	498a      	ldr	r1, [pc, #552]	; (8003eb8 <_strtod_l+0x588>)
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	a81b      	add	r0, sp, #108	; 0x6c
 8003c92:	931b      	str	r3, [sp, #108]	; 0x6c
 8003c94:	f001 fe18 	bl	80058c8 <__match>
 8003c98:	b910      	cbnz	r0, 8003ca0 <_strtod_l+0x370>
 8003c9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	931b      	str	r3, [sp, #108]	; 0x6c
 8003ca0:	f04f 0800 	mov.w	r8, #0
 8003ca4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8003ec8 <_strtod_l+0x598>
 8003ca8:	e683      	b.n	80039b2 <_strtod_l+0x82>
 8003caa:	4884      	ldr	r0, [pc, #528]	; (8003ebc <_strtod_l+0x58c>)
 8003cac:	f002 fdb0 	bl	8006810 <nan>
 8003cb0:	4680      	mov	r8, r0
 8003cb2:	4689      	mov	r9, r1
 8003cb4:	e67d      	b.n	80039b2 <_strtod_l+0x82>
 8003cb6:	9b04      	ldr	r3, [sp, #16]
 8003cb8:	f1bb 0f00 	cmp.w	fp, #0
 8003cbc:	bf08      	it	eq
 8003cbe:	46a3      	moveq	fp, r4
 8003cc0:	1aeb      	subs	r3, r5, r3
 8003cc2:	2c10      	cmp	r4, #16
 8003cc4:	9806      	ldr	r0, [sp, #24]
 8003cc6:	4626      	mov	r6, r4
 8003cc8:	9307      	str	r3, [sp, #28]
 8003cca:	bfa8      	it	ge
 8003ccc:	2610      	movge	r6, #16
 8003cce:	f7fc fb89 	bl	80003e4 <__aeabi_ui2d>
 8003cd2:	2c09      	cmp	r4, #9
 8003cd4:	4680      	mov	r8, r0
 8003cd6:	4689      	mov	r9, r1
 8003cd8:	dd13      	ble.n	8003d02 <_strtod_l+0x3d2>
 8003cda:	4b79      	ldr	r3, [pc, #484]	; (8003ec0 <_strtod_l+0x590>)
 8003cdc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003ce0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003ce4:	f7fc fbf8 	bl	80004d8 <__aeabi_dmul>
 8003ce8:	4680      	mov	r8, r0
 8003cea:	9805      	ldr	r0, [sp, #20]
 8003cec:	4689      	mov	r9, r1
 8003cee:	f7fc fb79 	bl	80003e4 <__aeabi_ui2d>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4640      	mov	r0, r8
 8003cf8:	4649      	mov	r1, r9
 8003cfa:	f7fc fa37 	bl	800016c <__adddf3>
 8003cfe:	4680      	mov	r8, r0
 8003d00:	4689      	mov	r9, r1
 8003d02:	2c0f      	cmp	r4, #15
 8003d04:	dc36      	bgt.n	8003d74 <_strtod_l+0x444>
 8003d06:	9b07      	ldr	r3, [sp, #28]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f43f ae52 	beq.w	80039b2 <_strtod_l+0x82>
 8003d0e:	dd22      	ble.n	8003d56 <_strtod_l+0x426>
 8003d10:	2b16      	cmp	r3, #22
 8003d12:	dc09      	bgt.n	8003d28 <_strtod_l+0x3f8>
 8003d14:	4c6a      	ldr	r4, [pc, #424]	; (8003ec0 <_strtod_l+0x590>)
 8003d16:	4642      	mov	r2, r8
 8003d18:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003d22:	f7fc fbd9 	bl	80004d8 <__aeabi_dmul>
 8003d26:	e7c3      	b.n	8003cb0 <_strtod_l+0x380>
 8003d28:	9a07      	ldr	r2, [sp, #28]
 8003d2a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	db20      	blt.n	8003d74 <_strtod_l+0x444>
 8003d32:	4d63      	ldr	r5, [pc, #396]	; (8003ec0 <_strtod_l+0x590>)
 8003d34:	f1c4 040f 	rsb	r4, r4, #15
 8003d38:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003d3c:	4642      	mov	r2, r8
 8003d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d42:	464b      	mov	r3, r9
 8003d44:	f7fc fbc8 	bl	80004d8 <__aeabi_dmul>
 8003d48:	9b07      	ldr	r3, [sp, #28]
 8003d4a:	1b1c      	subs	r4, r3, r4
 8003d4c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003d50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003d54:	e7e5      	b.n	8003d22 <_strtod_l+0x3f2>
 8003d56:	9b07      	ldr	r3, [sp, #28]
 8003d58:	3316      	adds	r3, #22
 8003d5a:	db0b      	blt.n	8003d74 <_strtod_l+0x444>
 8003d5c:	9b04      	ldr	r3, [sp, #16]
 8003d5e:	4a58      	ldr	r2, [pc, #352]	; (8003ec0 <_strtod_l+0x590>)
 8003d60:	1b5d      	subs	r5, r3, r5
 8003d62:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8003d66:	4640      	mov	r0, r8
 8003d68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003d6c:	4649      	mov	r1, r9
 8003d6e:	f7fc fcdd 	bl	800072c <__aeabi_ddiv>
 8003d72:	e79d      	b.n	8003cb0 <_strtod_l+0x380>
 8003d74:	9b07      	ldr	r3, [sp, #28]
 8003d76:	1ba6      	subs	r6, r4, r6
 8003d78:	441e      	add	r6, r3
 8003d7a:	2e00      	cmp	r6, #0
 8003d7c:	dd71      	ble.n	8003e62 <_strtod_l+0x532>
 8003d7e:	f016 030f 	ands.w	r3, r6, #15
 8003d82:	d00a      	beq.n	8003d9a <_strtod_l+0x46a>
 8003d84:	494e      	ldr	r1, [pc, #312]	; (8003ec0 <_strtod_l+0x590>)
 8003d86:	4642      	mov	r2, r8
 8003d88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d90:	464b      	mov	r3, r9
 8003d92:	f7fc fba1 	bl	80004d8 <__aeabi_dmul>
 8003d96:	4680      	mov	r8, r0
 8003d98:	4689      	mov	r9, r1
 8003d9a:	f036 060f 	bics.w	r6, r6, #15
 8003d9e:	d050      	beq.n	8003e42 <_strtod_l+0x512>
 8003da0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8003da4:	dd27      	ble.n	8003df6 <_strtod_l+0x4c6>
 8003da6:	f04f 0b00 	mov.w	fp, #0
 8003daa:	f8cd b010 	str.w	fp, [sp, #16]
 8003dae:	f8cd b020 	str.w	fp, [sp, #32]
 8003db2:	f8cd b018 	str.w	fp, [sp, #24]
 8003db6:	2322      	movs	r3, #34	; 0x22
 8003db8:	f04f 0800 	mov.w	r8, #0
 8003dbc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8003ec8 <_strtod_l+0x598>
 8003dc0:	f8ca 3000 	str.w	r3, [sl]
 8003dc4:	9b08      	ldr	r3, [sp, #32]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f43f adf3 	beq.w	80039b2 <_strtod_l+0x82>
 8003dcc:	4650      	mov	r0, sl
 8003dce:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003dd0:	f001 fe96 	bl	8005b00 <_Bfree>
 8003dd4:	4650      	mov	r0, sl
 8003dd6:	9906      	ldr	r1, [sp, #24]
 8003dd8:	f001 fe92 	bl	8005b00 <_Bfree>
 8003ddc:	4650      	mov	r0, sl
 8003dde:	9904      	ldr	r1, [sp, #16]
 8003de0:	f001 fe8e 	bl	8005b00 <_Bfree>
 8003de4:	4650      	mov	r0, sl
 8003de6:	9908      	ldr	r1, [sp, #32]
 8003de8:	f001 fe8a 	bl	8005b00 <_Bfree>
 8003dec:	4659      	mov	r1, fp
 8003dee:	4650      	mov	r0, sl
 8003df0:	f001 fe86 	bl	8005b00 <_Bfree>
 8003df4:	e5dd      	b.n	80039b2 <_strtod_l+0x82>
 8003df6:	2300      	movs	r3, #0
 8003df8:	4640      	mov	r0, r8
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	461f      	mov	r7, r3
 8003dfe:	1136      	asrs	r6, r6, #4
 8003e00:	2e01      	cmp	r6, #1
 8003e02:	dc21      	bgt.n	8003e48 <_strtod_l+0x518>
 8003e04:	b10b      	cbz	r3, 8003e0a <_strtod_l+0x4da>
 8003e06:	4680      	mov	r8, r0
 8003e08:	4689      	mov	r9, r1
 8003e0a:	4b2e      	ldr	r3, [pc, #184]	; (8003ec4 <_strtod_l+0x594>)
 8003e0c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8003e10:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003e14:	4642      	mov	r2, r8
 8003e16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	f7fc fb5c 	bl	80004d8 <__aeabi_dmul>
 8003e20:	4b29      	ldr	r3, [pc, #164]	; (8003ec8 <_strtod_l+0x598>)
 8003e22:	460a      	mov	r2, r1
 8003e24:	400b      	ands	r3, r1
 8003e26:	4929      	ldr	r1, [pc, #164]	; (8003ecc <_strtod_l+0x59c>)
 8003e28:	4680      	mov	r8, r0
 8003e2a:	428b      	cmp	r3, r1
 8003e2c:	d8bb      	bhi.n	8003da6 <_strtod_l+0x476>
 8003e2e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003e32:	428b      	cmp	r3, r1
 8003e34:	bf86      	itte	hi
 8003e36:	f04f 38ff 	movhi.w	r8, #4294967295
 8003e3a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8003ed0 <_strtod_l+0x5a0>
 8003e3e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8003e42:	2300      	movs	r3, #0
 8003e44:	9305      	str	r3, [sp, #20]
 8003e46:	e07e      	b.n	8003f46 <_strtod_l+0x616>
 8003e48:	07f2      	lsls	r2, r6, #31
 8003e4a:	d507      	bpl.n	8003e5c <_strtod_l+0x52c>
 8003e4c:	4b1d      	ldr	r3, [pc, #116]	; (8003ec4 <_strtod_l+0x594>)
 8003e4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e56:	f7fc fb3f 	bl	80004d8 <__aeabi_dmul>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	3701      	adds	r7, #1
 8003e5e:	1076      	asrs	r6, r6, #1
 8003e60:	e7ce      	b.n	8003e00 <_strtod_l+0x4d0>
 8003e62:	d0ee      	beq.n	8003e42 <_strtod_l+0x512>
 8003e64:	4276      	negs	r6, r6
 8003e66:	f016 020f 	ands.w	r2, r6, #15
 8003e6a:	d00a      	beq.n	8003e82 <_strtod_l+0x552>
 8003e6c:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <_strtod_l+0x590>)
 8003e6e:	4640      	mov	r0, r8
 8003e70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e74:	4649      	mov	r1, r9
 8003e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7a:	f7fc fc57 	bl	800072c <__aeabi_ddiv>
 8003e7e:	4680      	mov	r8, r0
 8003e80:	4689      	mov	r9, r1
 8003e82:	1136      	asrs	r6, r6, #4
 8003e84:	d0dd      	beq.n	8003e42 <_strtod_l+0x512>
 8003e86:	2e1f      	cmp	r6, #31
 8003e88:	dd24      	ble.n	8003ed4 <_strtod_l+0x5a4>
 8003e8a:	f04f 0b00 	mov.w	fp, #0
 8003e8e:	f8cd b010 	str.w	fp, [sp, #16]
 8003e92:	f8cd b020 	str.w	fp, [sp, #32]
 8003e96:	f8cd b018 	str.w	fp, [sp, #24]
 8003e9a:	2322      	movs	r3, #34	; 0x22
 8003e9c:	f04f 0800 	mov.w	r8, #0
 8003ea0:	f04f 0900 	mov.w	r9, #0
 8003ea4:	f8ca 3000 	str.w	r3, [sl]
 8003ea8:	e78c      	b.n	8003dc4 <_strtod_l+0x494>
 8003eaa:	bf00      	nop
 8003eac:	08007441 	.word	0x08007441
 8003eb0:	08007484 	.word	0x08007484
 8003eb4:	08007439 	.word	0x08007439
 8003eb8:	080075c4 	.word	0x080075c4
 8003ebc:	08007880 	.word	0x08007880
 8003ec0:	08007760 	.word	0x08007760
 8003ec4:	08007738 	.word	0x08007738
 8003ec8:	7ff00000 	.word	0x7ff00000
 8003ecc:	7ca00000 	.word	0x7ca00000
 8003ed0:	7fefffff 	.word	0x7fefffff
 8003ed4:	f016 0310 	ands.w	r3, r6, #16
 8003ed8:	bf18      	it	ne
 8003eda:	236a      	movne	r3, #106	; 0x6a
 8003edc:	4640      	mov	r0, r8
 8003ede:	9305      	str	r3, [sp, #20]
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	4fb2      	ldr	r7, [pc, #712]	; (80041b0 <_strtod_l+0x880>)
 8003ee6:	07f2      	lsls	r2, r6, #31
 8003ee8:	d504      	bpl.n	8003ef4 <_strtod_l+0x5c4>
 8003eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eee:	f7fc faf3 	bl	80004d8 <__aeabi_dmul>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	1076      	asrs	r6, r6, #1
 8003ef6:	f107 0708 	add.w	r7, r7, #8
 8003efa:	d1f4      	bne.n	8003ee6 <_strtod_l+0x5b6>
 8003efc:	b10b      	cbz	r3, 8003f02 <_strtod_l+0x5d2>
 8003efe:	4680      	mov	r8, r0
 8003f00:	4689      	mov	r9, r1
 8003f02:	9b05      	ldr	r3, [sp, #20]
 8003f04:	b1bb      	cbz	r3, 8003f36 <_strtod_l+0x606>
 8003f06:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8003f0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	4649      	mov	r1, r9
 8003f12:	dd10      	ble.n	8003f36 <_strtod_l+0x606>
 8003f14:	2b1f      	cmp	r3, #31
 8003f16:	f340 812b 	ble.w	8004170 <_strtod_l+0x840>
 8003f1a:	2b34      	cmp	r3, #52	; 0x34
 8003f1c:	bfd8      	it	le
 8003f1e:	f04f 32ff 	movle.w	r2, #4294967295
 8003f22:	f04f 0800 	mov.w	r8, #0
 8003f26:	bfcf      	iteee	gt
 8003f28:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8003f2c:	3b20      	suble	r3, #32
 8003f2e:	fa02 f303 	lslle.w	r3, r2, r3
 8003f32:	ea03 0901 	andle.w	r9, r3, r1
 8003f36:	2200      	movs	r2, #0
 8003f38:	2300      	movs	r3, #0
 8003f3a:	4640      	mov	r0, r8
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	f7fc fd33 	bl	80009a8 <__aeabi_dcmpeq>
 8003f42:	2800      	cmp	r0, #0
 8003f44:	d1a1      	bne.n	8003e8a <_strtod_l+0x55a>
 8003f46:	9b06      	ldr	r3, [sp, #24]
 8003f48:	465a      	mov	r2, fp
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	4650      	mov	r0, sl
 8003f4e:	4623      	mov	r3, r4
 8003f50:	9908      	ldr	r1, [sp, #32]
 8003f52:	f001 fe41 	bl	8005bd8 <__s2b>
 8003f56:	9008      	str	r0, [sp, #32]
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	f43f af24 	beq.w	8003da6 <_strtod_l+0x476>
 8003f5e:	9b04      	ldr	r3, [sp, #16]
 8003f60:	f04f 0b00 	mov.w	fp, #0
 8003f64:	1b5d      	subs	r5, r3, r5
 8003f66:	9b07      	ldr	r3, [sp, #28]
 8003f68:	f8cd b010 	str.w	fp, [sp, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	bfb4      	ite	lt
 8003f70:	462b      	movlt	r3, r5
 8003f72:	2300      	movge	r3, #0
 8003f74:	930e      	str	r3, [sp, #56]	; 0x38
 8003f76:	9b07      	ldr	r3, [sp, #28]
 8003f78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003f7c:	9316      	str	r3, [sp, #88]	; 0x58
 8003f7e:	9b08      	ldr	r3, [sp, #32]
 8003f80:	4650      	mov	r0, sl
 8003f82:	6859      	ldr	r1, [r3, #4]
 8003f84:	f001 fd7c 	bl	8005a80 <_Balloc>
 8003f88:	9006      	str	r0, [sp, #24]
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	f43f af13 	beq.w	8003db6 <_strtod_l+0x486>
 8003f90:	9b08      	ldr	r3, [sp, #32]
 8003f92:	300c      	adds	r0, #12
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	f103 010c 	add.w	r1, r3, #12
 8003f9a:	3202      	adds	r2, #2
 8003f9c:	0092      	lsls	r2, r2, #2
 8003f9e:	f7fe fde1 	bl	8002b64 <memcpy>
 8003fa2:	ab1e      	add	r3, sp, #120	; 0x78
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	ab1d      	add	r3, sp, #116	; 0x74
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	4642      	mov	r2, r8
 8003fac:	464b      	mov	r3, r9
 8003fae:	4650      	mov	r0, sl
 8003fb0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8003fb4:	f002 f94e 	bl	8006254 <__d2b>
 8003fb8:	901c      	str	r0, [sp, #112]	; 0x70
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	f43f aefb 	beq.w	8003db6 <_strtod_l+0x486>
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4650      	mov	r0, sl
 8003fc4:	f001 fea0 	bl	8005d08 <__i2b>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	9004      	str	r0, [sp, #16]
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	f43f aef2 	beq.w	8003db6 <_strtod_l+0x486>
 8003fd2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8003fd4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003fd6:	2d00      	cmp	r5, #0
 8003fd8:	bfab      	itete	ge
 8003fda:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8003fdc:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8003fde:	18ee      	addge	r6, r5, r3
 8003fe0:	1b5c      	sublt	r4, r3, r5
 8003fe2:	9b05      	ldr	r3, [sp, #20]
 8003fe4:	bfa8      	it	ge
 8003fe6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8003fe8:	eba5 0503 	sub.w	r5, r5, r3
 8003fec:	4415      	add	r5, r2
 8003fee:	4b71      	ldr	r3, [pc, #452]	; (80041b4 <_strtod_l+0x884>)
 8003ff0:	f105 35ff 	add.w	r5, r5, #4294967295
 8003ff4:	bfb8      	it	lt
 8003ff6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8003ff8:	429d      	cmp	r5, r3
 8003ffa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003ffe:	f280 80c9 	bge.w	8004194 <_strtod_l+0x864>
 8004002:	1b5b      	subs	r3, r3, r5
 8004004:	2b1f      	cmp	r3, #31
 8004006:	f04f 0701 	mov.w	r7, #1
 800400a:	eba2 0203 	sub.w	r2, r2, r3
 800400e:	f300 80b6 	bgt.w	800417e <_strtod_l+0x84e>
 8004012:	2500      	movs	r5, #0
 8004014:	fa07 f303 	lsl.w	r3, r7, r3
 8004018:	930f      	str	r3, [sp, #60]	; 0x3c
 800401a:	18b7      	adds	r7, r6, r2
 800401c:	9b05      	ldr	r3, [sp, #20]
 800401e:	42be      	cmp	r6, r7
 8004020:	4414      	add	r4, r2
 8004022:	441c      	add	r4, r3
 8004024:	4633      	mov	r3, r6
 8004026:	bfa8      	it	ge
 8004028:	463b      	movge	r3, r7
 800402a:	42a3      	cmp	r3, r4
 800402c:	bfa8      	it	ge
 800402e:	4623      	movge	r3, r4
 8004030:	2b00      	cmp	r3, #0
 8004032:	bfc2      	ittt	gt
 8004034:	1aff      	subgt	r7, r7, r3
 8004036:	1ae4      	subgt	r4, r4, r3
 8004038:	1af6      	subgt	r6, r6, r3
 800403a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800403c:	2b00      	cmp	r3, #0
 800403e:	dd17      	ble.n	8004070 <_strtod_l+0x740>
 8004040:	461a      	mov	r2, r3
 8004042:	4650      	mov	r0, sl
 8004044:	9904      	ldr	r1, [sp, #16]
 8004046:	f001 ff19 	bl	8005e7c <__pow5mult>
 800404a:	9004      	str	r0, [sp, #16]
 800404c:	2800      	cmp	r0, #0
 800404e:	f43f aeb2 	beq.w	8003db6 <_strtod_l+0x486>
 8004052:	4601      	mov	r1, r0
 8004054:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004056:	4650      	mov	r0, sl
 8004058:	f001 fe6c 	bl	8005d34 <__multiply>
 800405c:	9009      	str	r0, [sp, #36]	; 0x24
 800405e:	2800      	cmp	r0, #0
 8004060:	f43f aea9 	beq.w	8003db6 <_strtod_l+0x486>
 8004064:	4650      	mov	r0, sl
 8004066:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004068:	f001 fd4a 	bl	8005b00 <_Bfree>
 800406c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800406e:	931c      	str	r3, [sp, #112]	; 0x70
 8004070:	2f00      	cmp	r7, #0
 8004072:	f300 8093 	bgt.w	800419c <_strtod_l+0x86c>
 8004076:	9b07      	ldr	r3, [sp, #28]
 8004078:	2b00      	cmp	r3, #0
 800407a:	dd08      	ble.n	800408e <_strtod_l+0x75e>
 800407c:	4650      	mov	r0, sl
 800407e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004080:	9906      	ldr	r1, [sp, #24]
 8004082:	f001 fefb 	bl	8005e7c <__pow5mult>
 8004086:	9006      	str	r0, [sp, #24]
 8004088:	2800      	cmp	r0, #0
 800408a:	f43f ae94 	beq.w	8003db6 <_strtod_l+0x486>
 800408e:	2c00      	cmp	r4, #0
 8004090:	dd08      	ble.n	80040a4 <_strtod_l+0x774>
 8004092:	4622      	mov	r2, r4
 8004094:	4650      	mov	r0, sl
 8004096:	9906      	ldr	r1, [sp, #24]
 8004098:	f001 ff4a 	bl	8005f30 <__lshift>
 800409c:	9006      	str	r0, [sp, #24]
 800409e:	2800      	cmp	r0, #0
 80040a0:	f43f ae89 	beq.w	8003db6 <_strtod_l+0x486>
 80040a4:	2e00      	cmp	r6, #0
 80040a6:	dd08      	ble.n	80040ba <_strtod_l+0x78a>
 80040a8:	4632      	mov	r2, r6
 80040aa:	4650      	mov	r0, sl
 80040ac:	9904      	ldr	r1, [sp, #16]
 80040ae:	f001 ff3f 	bl	8005f30 <__lshift>
 80040b2:	9004      	str	r0, [sp, #16]
 80040b4:	2800      	cmp	r0, #0
 80040b6:	f43f ae7e 	beq.w	8003db6 <_strtod_l+0x486>
 80040ba:	4650      	mov	r0, sl
 80040bc:	9a06      	ldr	r2, [sp, #24]
 80040be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80040c0:	f001 ffbe 	bl	8006040 <__mdiff>
 80040c4:	4683      	mov	fp, r0
 80040c6:	2800      	cmp	r0, #0
 80040c8:	f43f ae75 	beq.w	8003db6 <_strtod_l+0x486>
 80040cc:	2400      	movs	r4, #0
 80040ce:	68c3      	ldr	r3, [r0, #12]
 80040d0:	9904      	ldr	r1, [sp, #16]
 80040d2:	60c4      	str	r4, [r0, #12]
 80040d4:	930d      	str	r3, [sp, #52]	; 0x34
 80040d6:	f001 ff97 	bl	8006008 <__mcmp>
 80040da:	42a0      	cmp	r0, r4
 80040dc:	da70      	bge.n	80041c0 <_strtod_l+0x890>
 80040de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040e0:	ea53 0308 	orrs.w	r3, r3, r8
 80040e4:	f040 8096 	bne.w	8004214 <_strtod_l+0x8e4>
 80040e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f040 8091 	bne.w	8004214 <_strtod_l+0x8e4>
 80040f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80040f6:	0d1b      	lsrs	r3, r3, #20
 80040f8:	051b      	lsls	r3, r3, #20
 80040fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80040fe:	f240 8089 	bls.w	8004214 <_strtod_l+0x8e4>
 8004102:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004106:	b923      	cbnz	r3, 8004112 <_strtod_l+0x7e2>
 8004108:	f8db 3010 	ldr.w	r3, [fp, #16]
 800410c:	2b01      	cmp	r3, #1
 800410e:	f340 8081 	ble.w	8004214 <_strtod_l+0x8e4>
 8004112:	4659      	mov	r1, fp
 8004114:	2201      	movs	r2, #1
 8004116:	4650      	mov	r0, sl
 8004118:	f001 ff0a 	bl	8005f30 <__lshift>
 800411c:	9904      	ldr	r1, [sp, #16]
 800411e:	4683      	mov	fp, r0
 8004120:	f001 ff72 	bl	8006008 <__mcmp>
 8004124:	2800      	cmp	r0, #0
 8004126:	dd75      	ble.n	8004214 <_strtod_l+0x8e4>
 8004128:	9905      	ldr	r1, [sp, #20]
 800412a:	464b      	mov	r3, r9
 800412c:	4a22      	ldr	r2, [pc, #136]	; (80041b8 <_strtod_l+0x888>)
 800412e:	2900      	cmp	r1, #0
 8004130:	f000 8091 	beq.w	8004256 <_strtod_l+0x926>
 8004134:	ea02 0109 	and.w	r1, r2, r9
 8004138:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800413c:	f300 808b 	bgt.w	8004256 <_strtod_l+0x926>
 8004140:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004144:	f77f aea9 	ble.w	8003e9a <_strtod_l+0x56a>
 8004148:	2300      	movs	r3, #0
 800414a:	4a1c      	ldr	r2, [pc, #112]	; (80041bc <_strtod_l+0x88c>)
 800414c:	4640      	mov	r0, r8
 800414e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004152:	4649      	mov	r1, r9
 8004154:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004158:	f7fc f9be 	bl	80004d8 <__aeabi_dmul>
 800415c:	460b      	mov	r3, r1
 800415e:	4303      	orrs	r3, r0
 8004160:	bf08      	it	eq
 8004162:	2322      	moveq	r3, #34	; 0x22
 8004164:	4680      	mov	r8, r0
 8004166:	4689      	mov	r9, r1
 8004168:	bf08      	it	eq
 800416a:	f8ca 3000 	streq.w	r3, [sl]
 800416e:	e62d      	b.n	8003dcc <_strtod_l+0x49c>
 8004170:	f04f 32ff 	mov.w	r2, #4294967295
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	ea03 0808 	and.w	r8, r3, r8
 800417c:	e6db      	b.n	8003f36 <_strtod_l+0x606>
 800417e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004182:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004186:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800418a:	35e2      	adds	r5, #226	; 0xe2
 800418c:	fa07 f505 	lsl.w	r5, r7, r5
 8004190:	970f      	str	r7, [sp, #60]	; 0x3c
 8004192:	e742      	b.n	800401a <_strtod_l+0x6ea>
 8004194:	2301      	movs	r3, #1
 8004196:	2500      	movs	r5, #0
 8004198:	930f      	str	r3, [sp, #60]	; 0x3c
 800419a:	e73e      	b.n	800401a <_strtod_l+0x6ea>
 800419c:	463a      	mov	r2, r7
 800419e:	4650      	mov	r0, sl
 80041a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80041a2:	f001 fec5 	bl	8005f30 <__lshift>
 80041a6:	901c      	str	r0, [sp, #112]	; 0x70
 80041a8:	2800      	cmp	r0, #0
 80041aa:	f47f af64 	bne.w	8004076 <_strtod_l+0x746>
 80041ae:	e602      	b.n	8003db6 <_strtod_l+0x486>
 80041b0:	08007498 	.word	0x08007498
 80041b4:	fffffc02 	.word	0xfffffc02
 80041b8:	7ff00000 	.word	0x7ff00000
 80041bc:	39500000 	.word	0x39500000
 80041c0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80041c4:	d166      	bne.n	8004294 <_strtod_l+0x964>
 80041c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80041c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80041cc:	b35a      	cbz	r2, 8004226 <_strtod_l+0x8f6>
 80041ce:	4a9c      	ldr	r2, [pc, #624]	; (8004440 <_strtod_l+0xb10>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d12c      	bne.n	800422e <_strtod_l+0x8fe>
 80041d4:	9b05      	ldr	r3, [sp, #20]
 80041d6:	4640      	mov	r0, r8
 80041d8:	b303      	cbz	r3, 800421c <_strtod_l+0x8ec>
 80041da:	464b      	mov	r3, r9
 80041dc:	4a99      	ldr	r2, [pc, #612]	; (8004444 <_strtod_l+0xb14>)
 80041de:	f04f 31ff 	mov.w	r1, #4294967295
 80041e2:	401a      	ands	r2, r3
 80041e4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80041e8:	d81b      	bhi.n	8004222 <_strtod_l+0x8f2>
 80041ea:	0d12      	lsrs	r2, r2, #20
 80041ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80041f0:	fa01 f303 	lsl.w	r3, r1, r3
 80041f4:	4298      	cmp	r0, r3
 80041f6:	d11a      	bne.n	800422e <_strtod_l+0x8fe>
 80041f8:	4b93      	ldr	r3, [pc, #588]	; (8004448 <_strtod_l+0xb18>)
 80041fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d102      	bne.n	8004206 <_strtod_l+0x8d6>
 8004200:	3001      	adds	r0, #1
 8004202:	f43f add8 	beq.w	8003db6 <_strtod_l+0x486>
 8004206:	f04f 0800 	mov.w	r8, #0
 800420a:	4b8e      	ldr	r3, [pc, #568]	; (8004444 <_strtod_l+0xb14>)
 800420c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800420e:	401a      	ands	r2, r3
 8004210:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004214:	9b05      	ldr	r3, [sp, #20]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d196      	bne.n	8004148 <_strtod_l+0x818>
 800421a:	e5d7      	b.n	8003dcc <_strtod_l+0x49c>
 800421c:	f04f 33ff 	mov.w	r3, #4294967295
 8004220:	e7e8      	b.n	80041f4 <_strtod_l+0x8c4>
 8004222:	460b      	mov	r3, r1
 8004224:	e7e6      	b.n	80041f4 <_strtod_l+0x8c4>
 8004226:	ea53 0308 	orrs.w	r3, r3, r8
 800422a:	f43f af7d 	beq.w	8004128 <_strtod_l+0x7f8>
 800422e:	b1e5      	cbz	r5, 800426a <_strtod_l+0x93a>
 8004230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004232:	421d      	tst	r5, r3
 8004234:	d0ee      	beq.n	8004214 <_strtod_l+0x8e4>
 8004236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004238:	4640      	mov	r0, r8
 800423a:	4649      	mov	r1, r9
 800423c:	9a05      	ldr	r2, [sp, #20]
 800423e:	b1c3      	cbz	r3, 8004272 <_strtod_l+0x942>
 8004240:	f7ff fb53 	bl	80038ea <sulp>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800424c:	f7fb ff8e 	bl	800016c <__adddf3>
 8004250:	4680      	mov	r8, r0
 8004252:	4689      	mov	r9, r1
 8004254:	e7de      	b.n	8004214 <_strtod_l+0x8e4>
 8004256:	4013      	ands	r3, r2
 8004258:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800425c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004260:	f04f 38ff 	mov.w	r8, #4294967295
 8004264:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004268:	e7d4      	b.n	8004214 <_strtod_l+0x8e4>
 800426a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800426c:	ea13 0f08 	tst.w	r3, r8
 8004270:	e7e0      	b.n	8004234 <_strtod_l+0x904>
 8004272:	f7ff fb3a 	bl	80038ea <sulp>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800427e:	f7fb ff73 	bl	8000168 <__aeabi_dsub>
 8004282:	2200      	movs	r2, #0
 8004284:	2300      	movs	r3, #0
 8004286:	4680      	mov	r8, r0
 8004288:	4689      	mov	r9, r1
 800428a:	f7fc fb8d 	bl	80009a8 <__aeabi_dcmpeq>
 800428e:	2800      	cmp	r0, #0
 8004290:	d0c0      	beq.n	8004214 <_strtod_l+0x8e4>
 8004292:	e602      	b.n	8003e9a <_strtod_l+0x56a>
 8004294:	4658      	mov	r0, fp
 8004296:	9904      	ldr	r1, [sp, #16]
 8004298:	f002 f838 	bl	800630c <__ratio>
 800429c:	2200      	movs	r2, #0
 800429e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042a2:	4606      	mov	r6, r0
 80042a4:	460f      	mov	r7, r1
 80042a6:	f7fc fb93 	bl	80009d0 <__aeabi_dcmple>
 80042aa:	2800      	cmp	r0, #0
 80042ac:	d075      	beq.n	800439a <_strtod_l+0xa6a>
 80042ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d047      	beq.n	8004344 <_strtod_l+0xa14>
 80042b4:	2600      	movs	r6, #0
 80042b6:	4f65      	ldr	r7, [pc, #404]	; (800444c <_strtod_l+0xb1c>)
 80042b8:	4d64      	ldr	r5, [pc, #400]	; (800444c <_strtod_l+0xb1c>)
 80042ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042c0:	0d1b      	lsrs	r3, r3, #20
 80042c2:	051b      	lsls	r3, r3, #20
 80042c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80042c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80042c8:	4b61      	ldr	r3, [pc, #388]	; (8004450 <_strtod_l+0xb20>)
 80042ca:	429a      	cmp	r2, r3
 80042cc:	f040 80c8 	bne.w	8004460 <_strtod_l+0xb30>
 80042d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80042d4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80042d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042da:	4640      	mov	r0, r8
 80042dc:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80042e0:	4649      	mov	r1, r9
 80042e2:	f001 ff3d 	bl	8006160 <__ulp>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4630      	mov	r0, r6
 80042ec:	4639      	mov	r1, r7
 80042ee:	f7fc f8f3 	bl	80004d8 <__aeabi_dmul>
 80042f2:	4642      	mov	r2, r8
 80042f4:	464b      	mov	r3, r9
 80042f6:	f7fb ff39 	bl	800016c <__adddf3>
 80042fa:	460b      	mov	r3, r1
 80042fc:	4951      	ldr	r1, [pc, #324]	; (8004444 <_strtod_l+0xb14>)
 80042fe:	4a55      	ldr	r2, [pc, #340]	; (8004454 <_strtod_l+0xb24>)
 8004300:	4019      	ands	r1, r3
 8004302:	4291      	cmp	r1, r2
 8004304:	4680      	mov	r8, r0
 8004306:	d95e      	bls.n	80043c6 <_strtod_l+0xa96>
 8004308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800430a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800430e:	4293      	cmp	r3, r2
 8004310:	d103      	bne.n	800431a <_strtod_l+0x9ea>
 8004312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004314:	3301      	adds	r3, #1
 8004316:	f43f ad4e 	beq.w	8003db6 <_strtod_l+0x486>
 800431a:	f04f 38ff 	mov.w	r8, #4294967295
 800431e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004448 <_strtod_l+0xb18>
 8004322:	4650      	mov	r0, sl
 8004324:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004326:	f001 fbeb 	bl	8005b00 <_Bfree>
 800432a:	4650      	mov	r0, sl
 800432c:	9906      	ldr	r1, [sp, #24]
 800432e:	f001 fbe7 	bl	8005b00 <_Bfree>
 8004332:	4650      	mov	r0, sl
 8004334:	9904      	ldr	r1, [sp, #16]
 8004336:	f001 fbe3 	bl	8005b00 <_Bfree>
 800433a:	4659      	mov	r1, fp
 800433c:	4650      	mov	r0, sl
 800433e:	f001 fbdf 	bl	8005b00 <_Bfree>
 8004342:	e61c      	b.n	8003f7e <_strtod_l+0x64e>
 8004344:	f1b8 0f00 	cmp.w	r8, #0
 8004348:	d119      	bne.n	800437e <_strtod_l+0xa4e>
 800434a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800434c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004350:	b9e3      	cbnz	r3, 800438c <_strtod_l+0xa5c>
 8004352:	2200      	movs	r2, #0
 8004354:	4630      	mov	r0, r6
 8004356:	4639      	mov	r1, r7
 8004358:	4b3c      	ldr	r3, [pc, #240]	; (800444c <_strtod_l+0xb1c>)
 800435a:	f7fc fb2f 	bl	80009bc <__aeabi_dcmplt>
 800435e:	b9c8      	cbnz	r0, 8004394 <_strtod_l+0xa64>
 8004360:	2200      	movs	r2, #0
 8004362:	4630      	mov	r0, r6
 8004364:	4639      	mov	r1, r7
 8004366:	4b3c      	ldr	r3, [pc, #240]	; (8004458 <_strtod_l+0xb28>)
 8004368:	f7fc f8b6 	bl	80004d8 <__aeabi_dmul>
 800436c:	4604      	mov	r4, r0
 800436e:	460d      	mov	r5, r1
 8004370:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004374:	9418      	str	r4, [sp, #96]	; 0x60
 8004376:	9319      	str	r3, [sp, #100]	; 0x64
 8004378:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800437c:	e79d      	b.n	80042ba <_strtod_l+0x98a>
 800437e:	f1b8 0f01 	cmp.w	r8, #1
 8004382:	d103      	bne.n	800438c <_strtod_l+0xa5c>
 8004384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004386:	2b00      	cmp	r3, #0
 8004388:	f43f ad87 	beq.w	8003e9a <_strtod_l+0x56a>
 800438c:	2600      	movs	r6, #0
 800438e:	2400      	movs	r4, #0
 8004390:	4f32      	ldr	r7, [pc, #200]	; (800445c <_strtod_l+0xb2c>)
 8004392:	e791      	b.n	80042b8 <_strtod_l+0x988>
 8004394:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004396:	4d30      	ldr	r5, [pc, #192]	; (8004458 <_strtod_l+0xb28>)
 8004398:	e7ea      	b.n	8004370 <_strtod_l+0xa40>
 800439a:	4b2f      	ldr	r3, [pc, #188]	; (8004458 <_strtod_l+0xb28>)
 800439c:	2200      	movs	r2, #0
 800439e:	4630      	mov	r0, r6
 80043a0:	4639      	mov	r1, r7
 80043a2:	f7fc f899 	bl	80004d8 <__aeabi_dmul>
 80043a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043a8:	4604      	mov	r4, r0
 80043aa:	460d      	mov	r5, r1
 80043ac:	b933      	cbnz	r3, 80043bc <_strtod_l+0xa8c>
 80043ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043b2:	9010      	str	r0, [sp, #64]	; 0x40
 80043b4:	9311      	str	r3, [sp, #68]	; 0x44
 80043b6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80043ba:	e77e      	b.n	80042ba <_strtod_l+0x98a>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80043c4:	e7f7      	b.n	80043b6 <_strtod_l+0xa86>
 80043c6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80043ca:	9b05      	ldr	r3, [sp, #20]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1a8      	bne.n	8004322 <_strtod_l+0x9f2>
 80043d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80043d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80043d6:	0d1b      	lsrs	r3, r3, #20
 80043d8:	051b      	lsls	r3, r3, #20
 80043da:	429a      	cmp	r2, r3
 80043dc:	d1a1      	bne.n	8004322 <_strtod_l+0x9f2>
 80043de:	4620      	mov	r0, r4
 80043e0:	4629      	mov	r1, r5
 80043e2:	f7fc fbc1 	bl	8000b68 <__aeabi_d2lz>
 80043e6:	f7fc f849 	bl	800047c <__aeabi_l2d>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4620      	mov	r0, r4
 80043f0:	4629      	mov	r1, r5
 80043f2:	f7fb feb9 	bl	8000168 <__aeabi_dsub>
 80043f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80043f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80043fc:	ea43 0308 	orr.w	r3, r3, r8
 8004400:	4313      	orrs	r3, r2
 8004402:	4604      	mov	r4, r0
 8004404:	460d      	mov	r5, r1
 8004406:	d066      	beq.n	80044d6 <_strtod_l+0xba6>
 8004408:	a309      	add	r3, pc, #36	; (adr r3, 8004430 <_strtod_l+0xb00>)
 800440a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440e:	f7fc fad5 	bl	80009bc <__aeabi_dcmplt>
 8004412:	2800      	cmp	r0, #0
 8004414:	f47f acda 	bne.w	8003dcc <_strtod_l+0x49c>
 8004418:	a307      	add	r3, pc, #28	; (adr r3, 8004438 <_strtod_l+0xb08>)
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	4620      	mov	r0, r4
 8004420:	4629      	mov	r1, r5
 8004422:	f7fc fae9 	bl	80009f8 <__aeabi_dcmpgt>
 8004426:	2800      	cmp	r0, #0
 8004428:	f43f af7b 	beq.w	8004322 <_strtod_l+0x9f2>
 800442c:	e4ce      	b.n	8003dcc <_strtod_l+0x49c>
 800442e:	bf00      	nop
 8004430:	94a03595 	.word	0x94a03595
 8004434:	3fdfffff 	.word	0x3fdfffff
 8004438:	35afe535 	.word	0x35afe535
 800443c:	3fe00000 	.word	0x3fe00000
 8004440:	000fffff 	.word	0x000fffff
 8004444:	7ff00000 	.word	0x7ff00000
 8004448:	7fefffff 	.word	0x7fefffff
 800444c:	3ff00000 	.word	0x3ff00000
 8004450:	7fe00000 	.word	0x7fe00000
 8004454:	7c9fffff 	.word	0x7c9fffff
 8004458:	3fe00000 	.word	0x3fe00000
 800445c:	bff00000 	.word	0xbff00000
 8004460:	9b05      	ldr	r3, [sp, #20]
 8004462:	b313      	cbz	r3, 80044aa <_strtod_l+0xb7a>
 8004464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004466:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800446a:	d81e      	bhi.n	80044aa <_strtod_l+0xb7a>
 800446c:	a326      	add	r3, pc, #152	; (adr r3, 8004508 <_strtod_l+0xbd8>)
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	4620      	mov	r0, r4
 8004474:	4629      	mov	r1, r5
 8004476:	f7fc faab 	bl	80009d0 <__aeabi_dcmple>
 800447a:	b190      	cbz	r0, 80044a2 <_strtod_l+0xb72>
 800447c:	4629      	mov	r1, r5
 800447e:	4620      	mov	r0, r4
 8004480:	f7fc fb02 	bl	8000a88 <__aeabi_d2uiz>
 8004484:	2801      	cmp	r0, #1
 8004486:	bf38      	it	cc
 8004488:	2001      	movcc	r0, #1
 800448a:	f7fb ffab 	bl	80003e4 <__aeabi_ui2d>
 800448e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004490:	4604      	mov	r4, r0
 8004492:	460d      	mov	r5, r1
 8004494:	b9d3      	cbnz	r3, 80044cc <_strtod_l+0xb9c>
 8004496:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800449a:	9012      	str	r0, [sp, #72]	; 0x48
 800449c:	9313      	str	r3, [sp, #76]	; 0x4c
 800449e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80044a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80044a4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80044a8:	1a9f      	subs	r7, r3, r2
 80044aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80044ae:	f001 fe57 	bl	8006160 <__ulp>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4630      	mov	r0, r6
 80044b8:	4639      	mov	r1, r7
 80044ba:	f7fc f80d 	bl	80004d8 <__aeabi_dmul>
 80044be:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80044c2:	f7fb fe53 	bl	800016c <__adddf3>
 80044c6:	4680      	mov	r8, r0
 80044c8:	4689      	mov	r9, r1
 80044ca:	e77e      	b.n	80043ca <_strtod_l+0xa9a>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80044d4:	e7e3      	b.n	800449e <_strtod_l+0xb6e>
 80044d6:	a30e      	add	r3, pc, #56	; (adr r3, 8004510 <_strtod_l+0xbe0>)
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f7fc fa6e 	bl	80009bc <__aeabi_dcmplt>
 80044e0:	e7a1      	b.n	8004426 <_strtod_l+0xaf6>
 80044e2:	2300      	movs	r3, #0
 80044e4:	930c      	str	r3, [sp, #48]	; 0x30
 80044e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	f7ff ba65 	b.w	80039ba <_strtod_l+0x8a>
 80044f0:	2b65      	cmp	r3, #101	; 0x65
 80044f2:	f43f ab5c 	beq.w	8003bae <_strtod_l+0x27e>
 80044f6:	2b45      	cmp	r3, #69	; 0x45
 80044f8:	f43f ab59 	beq.w	8003bae <_strtod_l+0x27e>
 80044fc:	2201      	movs	r2, #1
 80044fe:	f7ff bb8d 	b.w	8003c1c <_strtod_l+0x2ec>
 8004502:	bf00      	nop
 8004504:	f3af 8000 	nop.w
 8004508:	ffc00000 	.word	0xffc00000
 800450c:	41dfffff 	.word	0x41dfffff
 8004510:	94a03595 	.word	0x94a03595
 8004514:	3fcfffff 	.word	0x3fcfffff

08004518 <_strtod_r>:
 8004518:	4b01      	ldr	r3, [pc, #4]	; (8004520 <_strtod_r+0x8>)
 800451a:	f7ff ba09 	b.w	8003930 <_strtod_l>
 800451e:	bf00      	nop
 8004520:	20000074 	.word	0x20000074

08004524 <strtod>:
 8004524:	460a      	mov	r2, r1
 8004526:	4601      	mov	r1, r0
 8004528:	4802      	ldr	r0, [pc, #8]	; (8004534 <strtod+0x10>)
 800452a:	4b03      	ldr	r3, [pc, #12]	; (8004538 <strtod+0x14>)
 800452c:	6800      	ldr	r0, [r0, #0]
 800452e:	f7ff b9ff 	b.w	8003930 <_strtod_l>
 8004532:	bf00      	nop
 8004534:	2000000c 	.word	0x2000000c
 8004538:	20000074 	.word	0x20000074

0800453c <_strtol_l.isra.0>:
 800453c:	2b01      	cmp	r3, #1
 800453e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004542:	4686      	mov	lr, r0
 8004544:	d001      	beq.n	800454a <_strtol_l.isra.0+0xe>
 8004546:	2b24      	cmp	r3, #36	; 0x24
 8004548:	d906      	bls.n	8004558 <_strtol_l.isra.0+0x1c>
 800454a:	f7fe fae1 	bl	8002b10 <__errno>
 800454e:	2316      	movs	r3, #22
 8004550:	6003      	str	r3, [r0, #0]
 8004552:	2000      	movs	r0, #0
 8004554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004558:	468c      	mov	ip, r1
 800455a:	4e3a      	ldr	r6, [pc, #232]	; (8004644 <_strtol_l.isra.0+0x108>)
 800455c:	4660      	mov	r0, ip
 800455e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004562:	5da5      	ldrb	r5, [r4, r6]
 8004564:	f015 0508 	ands.w	r5, r5, #8
 8004568:	d1f8      	bne.n	800455c <_strtol_l.isra.0+0x20>
 800456a:	2c2d      	cmp	r4, #45	; 0x2d
 800456c:	d133      	bne.n	80045d6 <_strtol_l.isra.0+0x9a>
 800456e:	f04f 0801 	mov.w	r8, #1
 8004572:	f89c 4000 	ldrb.w	r4, [ip]
 8004576:	f100 0c02 	add.w	ip, r0, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d05d      	beq.n	800463a <_strtol_l.isra.0+0xfe>
 800457e:	2b10      	cmp	r3, #16
 8004580:	d10c      	bne.n	800459c <_strtol_l.isra.0+0x60>
 8004582:	2c30      	cmp	r4, #48	; 0x30
 8004584:	d10a      	bne.n	800459c <_strtol_l.isra.0+0x60>
 8004586:	f89c 0000 	ldrb.w	r0, [ip]
 800458a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800458e:	2858      	cmp	r0, #88	; 0x58
 8004590:	d14e      	bne.n	8004630 <_strtol_l.isra.0+0xf4>
 8004592:	2310      	movs	r3, #16
 8004594:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004598:	f10c 0c02 	add.w	ip, ip, #2
 800459c:	2500      	movs	r5, #0
 800459e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80045a2:	3f01      	subs	r7, #1
 80045a4:	fbb7 f9f3 	udiv	r9, r7, r3
 80045a8:	4628      	mov	r0, r5
 80045aa:	fb03 7a19 	mls	sl, r3, r9, r7
 80045ae:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80045b2:	2e09      	cmp	r6, #9
 80045b4:	d818      	bhi.n	80045e8 <_strtol_l.isra.0+0xac>
 80045b6:	4634      	mov	r4, r6
 80045b8:	42a3      	cmp	r3, r4
 80045ba:	dd24      	ble.n	8004606 <_strtol_l.isra.0+0xca>
 80045bc:	2d00      	cmp	r5, #0
 80045be:	db1f      	blt.n	8004600 <_strtol_l.isra.0+0xc4>
 80045c0:	4581      	cmp	r9, r0
 80045c2:	d31d      	bcc.n	8004600 <_strtol_l.isra.0+0xc4>
 80045c4:	d101      	bne.n	80045ca <_strtol_l.isra.0+0x8e>
 80045c6:	45a2      	cmp	sl, r4
 80045c8:	db1a      	blt.n	8004600 <_strtol_l.isra.0+0xc4>
 80045ca:	2501      	movs	r5, #1
 80045cc:	fb00 4003 	mla	r0, r0, r3, r4
 80045d0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80045d4:	e7eb      	b.n	80045ae <_strtol_l.isra.0+0x72>
 80045d6:	2c2b      	cmp	r4, #43	; 0x2b
 80045d8:	bf08      	it	eq
 80045da:	f89c 4000 	ldrbeq.w	r4, [ip]
 80045de:	46a8      	mov	r8, r5
 80045e0:	bf08      	it	eq
 80045e2:	f100 0c02 	addeq.w	ip, r0, #2
 80045e6:	e7c8      	b.n	800457a <_strtol_l.isra.0+0x3e>
 80045e8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80045ec:	2e19      	cmp	r6, #25
 80045ee:	d801      	bhi.n	80045f4 <_strtol_l.isra.0+0xb8>
 80045f0:	3c37      	subs	r4, #55	; 0x37
 80045f2:	e7e1      	b.n	80045b8 <_strtol_l.isra.0+0x7c>
 80045f4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80045f8:	2e19      	cmp	r6, #25
 80045fa:	d804      	bhi.n	8004606 <_strtol_l.isra.0+0xca>
 80045fc:	3c57      	subs	r4, #87	; 0x57
 80045fe:	e7db      	b.n	80045b8 <_strtol_l.isra.0+0x7c>
 8004600:	f04f 35ff 	mov.w	r5, #4294967295
 8004604:	e7e4      	b.n	80045d0 <_strtol_l.isra.0+0x94>
 8004606:	2d00      	cmp	r5, #0
 8004608:	da08      	bge.n	800461c <_strtol_l.isra.0+0xe0>
 800460a:	2322      	movs	r3, #34	; 0x22
 800460c:	4638      	mov	r0, r7
 800460e:	f8ce 3000 	str.w	r3, [lr]
 8004612:	2a00      	cmp	r2, #0
 8004614:	d09e      	beq.n	8004554 <_strtol_l.isra.0+0x18>
 8004616:	f10c 31ff 	add.w	r1, ip, #4294967295
 800461a:	e007      	b.n	800462c <_strtol_l.isra.0+0xf0>
 800461c:	f1b8 0f00 	cmp.w	r8, #0
 8004620:	d000      	beq.n	8004624 <_strtol_l.isra.0+0xe8>
 8004622:	4240      	negs	r0, r0
 8004624:	2a00      	cmp	r2, #0
 8004626:	d095      	beq.n	8004554 <_strtol_l.isra.0+0x18>
 8004628:	2d00      	cmp	r5, #0
 800462a:	d1f4      	bne.n	8004616 <_strtol_l.isra.0+0xda>
 800462c:	6011      	str	r1, [r2, #0]
 800462e:	e791      	b.n	8004554 <_strtol_l.isra.0+0x18>
 8004630:	2430      	movs	r4, #48	; 0x30
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1b2      	bne.n	800459c <_strtol_l.isra.0+0x60>
 8004636:	2308      	movs	r3, #8
 8004638:	e7b0      	b.n	800459c <_strtol_l.isra.0+0x60>
 800463a:	2c30      	cmp	r4, #48	; 0x30
 800463c:	d0a3      	beq.n	8004586 <_strtol_l.isra.0+0x4a>
 800463e:	230a      	movs	r3, #10
 8004640:	e7ac      	b.n	800459c <_strtol_l.isra.0+0x60>
 8004642:	bf00      	nop
 8004644:	080074c1 	.word	0x080074c1

08004648 <_strtol_r>:
 8004648:	f7ff bf78 	b.w	800453c <_strtol_l.isra.0>

0800464c <strtol>:
 800464c:	4613      	mov	r3, r2
 800464e:	460a      	mov	r2, r1
 8004650:	4601      	mov	r1, r0
 8004652:	4802      	ldr	r0, [pc, #8]	; (800465c <strtol+0x10>)
 8004654:	6800      	ldr	r0, [r0, #0]
 8004656:	f7ff bf71 	b.w	800453c <_strtol_l.isra.0>
 800465a:	bf00      	nop
 800465c:	2000000c 	.word	0x2000000c

08004660 <quorem>:
 8004660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004664:	6903      	ldr	r3, [r0, #16]
 8004666:	690c      	ldr	r4, [r1, #16]
 8004668:	4607      	mov	r7, r0
 800466a:	42a3      	cmp	r3, r4
 800466c:	f2c0 8083 	blt.w	8004776 <quorem+0x116>
 8004670:	3c01      	subs	r4, #1
 8004672:	f100 0514 	add.w	r5, r0, #20
 8004676:	f101 0814 	add.w	r8, r1, #20
 800467a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800467e:	9301      	str	r3, [sp, #4]
 8004680:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004684:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004688:	3301      	adds	r3, #1
 800468a:	429a      	cmp	r2, r3
 800468c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004690:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004694:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004698:	d332      	bcc.n	8004700 <quorem+0xa0>
 800469a:	f04f 0e00 	mov.w	lr, #0
 800469e:	4640      	mov	r0, r8
 80046a0:	46ac      	mov	ip, r5
 80046a2:	46f2      	mov	sl, lr
 80046a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80046a8:	b293      	uxth	r3, r2
 80046aa:	fb06 e303 	mla	r3, r6, r3, lr
 80046ae:	0c12      	lsrs	r2, r2, #16
 80046b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80046b4:	fb06 e202 	mla	r2, r6, r2, lr
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	ebaa 0303 	sub.w	r3, sl, r3
 80046be:	f8dc a000 	ldr.w	sl, [ip]
 80046c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80046c6:	fa1f fa8a 	uxth.w	sl, sl
 80046ca:	4453      	add	r3, sl
 80046cc:	fa1f fa82 	uxth.w	sl, r2
 80046d0:	f8dc 2000 	ldr.w	r2, [ip]
 80046d4:	4581      	cmp	r9, r0
 80046d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80046da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046de:	b29b      	uxth	r3, r3
 80046e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046e4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80046e8:	f84c 3b04 	str.w	r3, [ip], #4
 80046ec:	d2da      	bcs.n	80046a4 <quorem+0x44>
 80046ee:	f855 300b 	ldr.w	r3, [r5, fp]
 80046f2:	b92b      	cbnz	r3, 8004700 <quorem+0xa0>
 80046f4:	9b01      	ldr	r3, [sp, #4]
 80046f6:	3b04      	subs	r3, #4
 80046f8:	429d      	cmp	r5, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	d32f      	bcc.n	800475e <quorem+0xfe>
 80046fe:	613c      	str	r4, [r7, #16]
 8004700:	4638      	mov	r0, r7
 8004702:	f001 fc81 	bl	8006008 <__mcmp>
 8004706:	2800      	cmp	r0, #0
 8004708:	db25      	blt.n	8004756 <quorem+0xf6>
 800470a:	4628      	mov	r0, r5
 800470c:	f04f 0c00 	mov.w	ip, #0
 8004710:	3601      	adds	r6, #1
 8004712:	f858 1b04 	ldr.w	r1, [r8], #4
 8004716:	f8d0 e000 	ldr.w	lr, [r0]
 800471a:	b28b      	uxth	r3, r1
 800471c:	ebac 0303 	sub.w	r3, ip, r3
 8004720:	fa1f f28e 	uxth.w	r2, lr
 8004724:	4413      	add	r3, r2
 8004726:	0c0a      	lsrs	r2, r1, #16
 8004728:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800472c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004730:	b29b      	uxth	r3, r3
 8004732:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004736:	45c1      	cmp	r9, r8
 8004738:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800473c:	f840 3b04 	str.w	r3, [r0], #4
 8004740:	d2e7      	bcs.n	8004712 <quorem+0xb2>
 8004742:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004746:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800474a:	b922      	cbnz	r2, 8004756 <quorem+0xf6>
 800474c:	3b04      	subs	r3, #4
 800474e:	429d      	cmp	r5, r3
 8004750:	461a      	mov	r2, r3
 8004752:	d30a      	bcc.n	800476a <quorem+0x10a>
 8004754:	613c      	str	r4, [r7, #16]
 8004756:	4630      	mov	r0, r6
 8004758:	b003      	add	sp, #12
 800475a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	3b04      	subs	r3, #4
 8004762:	2a00      	cmp	r2, #0
 8004764:	d1cb      	bne.n	80046fe <quorem+0x9e>
 8004766:	3c01      	subs	r4, #1
 8004768:	e7c6      	b.n	80046f8 <quorem+0x98>
 800476a:	6812      	ldr	r2, [r2, #0]
 800476c:	3b04      	subs	r3, #4
 800476e:	2a00      	cmp	r2, #0
 8004770:	d1f0      	bne.n	8004754 <quorem+0xf4>
 8004772:	3c01      	subs	r4, #1
 8004774:	e7eb      	b.n	800474e <quorem+0xee>
 8004776:	2000      	movs	r0, #0
 8004778:	e7ee      	b.n	8004758 <quorem+0xf8>
 800477a:	0000      	movs	r0, r0
 800477c:	0000      	movs	r0, r0
	...

08004780 <_dtoa_r>:
 8004780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004784:	4616      	mov	r6, r2
 8004786:	461f      	mov	r7, r3
 8004788:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800478a:	b099      	sub	sp, #100	; 0x64
 800478c:	4605      	mov	r5, r0
 800478e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004792:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004796:	b974      	cbnz	r4, 80047b6 <_dtoa_r+0x36>
 8004798:	2010      	movs	r0, #16
 800479a:	f001 f949 	bl	8005a30 <malloc>
 800479e:	4602      	mov	r2, r0
 80047a0:	6268      	str	r0, [r5, #36]	; 0x24
 80047a2:	b920      	cbnz	r0, 80047ae <_dtoa_r+0x2e>
 80047a4:	21ea      	movs	r1, #234	; 0xea
 80047a6:	4bae      	ldr	r3, [pc, #696]	; (8004a60 <_dtoa_r+0x2e0>)
 80047a8:	48ae      	ldr	r0, [pc, #696]	; (8004a64 <_dtoa_r+0x2e4>)
 80047aa:	f002 f867 	bl	800687c <__assert_func>
 80047ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80047b2:	6004      	str	r4, [r0, #0]
 80047b4:	60c4      	str	r4, [r0, #12]
 80047b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80047b8:	6819      	ldr	r1, [r3, #0]
 80047ba:	b151      	cbz	r1, 80047d2 <_dtoa_r+0x52>
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	2301      	movs	r3, #1
 80047c0:	4093      	lsls	r3, r2
 80047c2:	604a      	str	r2, [r1, #4]
 80047c4:	608b      	str	r3, [r1, #8]
 80047c6:	4628      	mov	r0, r5
 80047c8:	f001 f99a 	bl	8005b00 <_Bfree>
 80047cc:	2200      	movs	r2, #0
 80047ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	1e3b      	subs	r3, r7, #0
 80047d4:	bfaf      	iteee	ge
 80047d6:	2300      	movge	r3, #0
 80047d8:	2201      	movlt	r2, #1
 80047da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80047de:	9305      	strlt	r3, [sp, #20]
 80047e0:	bfa8      	it	ge
 80047e2:	f8c8 3000 	strge.w	r3, [r8]
 80047e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80047ea:	4b9f      	ldr	r3, [pc, #636]	; (8004a68 <_dtoa_r+0x2e8>)
 80047ec:	bfb8      	it	lt
 80047ee:	f8c8 2000 	strlt.w	r2, [r8]
 80047f2:	ea33 0309 	bics.w	r3, r3, r9
 80047f6:	d119      	bne.n	800482c <_dtoa_r+0xac>
 80047f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80047fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004804:	4333      	orrs	r3, r6
 8004806:	f000 8580 	beq.w	800530a <_dtoa_r+0xb8a>
 800480a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800480c:	b953      	cbnz	r3, 8004824 <_dtoa_r+0xa4>
 800480e:	4b97      	ldr	r3, [pc, #604]	; (8004a6c <_dtoa_r+0x2ec>)
 8004810:	e022      	b.n	8004858 <_dtoa_r+0xd8>
 8004812:	4b97      	ldr	r3, [pc, #604]	; (8004a70 <_dtoa_r+0x2f0>)
 8004814:	9308      	str	r3, [sp, #32]
 8004816:	3308      	adds	r3, #8
 8004818:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	9808      	ldr	r0, [sp, #32]
 800481e:	b019      	add	sp, #100	; 0x64
 8004820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004824:	4b91      	ldr	r3, [pc, #580]	; (8004a6c <_dtoa_r+0x2ec>)
 8004826:	9308      	str	r3, [sp, #32]
 8004828:	3303      	adds	r3, #3
 800482a:	e7f5      	b.n	8004818 <_dtoa_r+0x98>
 800482c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004830:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004834:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004838:	2200      	movs	r2, #0
 800483a:	2300      	movs	r3, #0
 800483c:	f7fc f8b4 	bl	80009a8 <__aeabi_dcmpeq>
 8004840:	4680      	mov	r8, r0
 8004842:	b158      	cbz	r0, 800485c <_dtoa_r+0xdc>
 8004844:	2301      	movs	r3, #1
 8004846:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 8559 	beq.w	8005304 <_dtoa_r+0xb84>
 8004852:	4888      	ldr	r0, [pc, #544]	; (8004a74 <_dtoa_r+0x2f4>)
 8004854:	6018      	str	r0, [r3, #0]
 8004856:	1e43      	subs	r3, r0, #1
 8004858:	9308      	str	r3, [sp, #32]
 800485a:	e7df      	b.n	800481c <_dtoa_r+0x9c>
 800485c:	ab16      	add	r3, sp, #88	; 0x58
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	ab17      	add	r3, sp, #92	; 0x5c
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	4628      	mov	r0, r5
 8004866:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800486a:	f001 fcf3 	bl	8006254 <__d2b>
 800486e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004872:	4682      	mov	sl, r0
 8004874:	2c00      	cmp	r4, #0
 8004876:	d07e      	beq.n	8004976 <_dtoa_r+0x1f6>
 8004878:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800487c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800487e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004882:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004886:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800488a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800488e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004892:	2200      	movs	r2, #0
 8004894:	4b78      	ldr	r3, [pc, #480]	; (8004a78 <_dtoa_r+0x2f8>)
 8004896:	f7fb fc67 	bl	8000168 <__aeabi_dsub>
 800489a:	a36b      	add	r3, pc, #428	; (adr r3, 8004a48 <_dtoa_r+0x2c8>)
 800489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a0:	f7fb fe1a 	bl	80004d8 <__aeabi_dmul>
 80048a4:	a36a      	add	r3, pc, #424	; (adr r3, 8004a50 <_dtoa_r+0x2d0>)
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	f7fb fc5f 	bl	800016c <__adddf3>
 80048ae:	4606      	mov	r6, r0
 80048b0:	4620      	mov	r0, r4
 80048b2:	460f      	mov	r7, r1
 80048b4:	f7fb fda6 	bl	8000404 <__aeabi_i2d>
 80048b8:	a367      	add	r3, pc, #412	; (adr r3, 8004a58 <_dtoa_r+0x2d8>)
 80048ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048be:	f7fb fe0b 	bl	80004d8 <__aeabi_dmul>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	4630      	mov	r0, r6
 80048c8:	4639      	mov	r1, r7
 80048ca:	f7fb fc4f 	bl	800016c <__adddf3>
 80048ce:	4606      	mov	r6, r0
 80048d0:	460f      	mov	r7, r1
 80048d2:	f7fc f8b1 	bl	8000a38 <__aeabi_d2iz>
 80048d6:	2200      	movs	r2, #0
 80048d8:	4681      	mov	r9, r0
 80048da:	2300      	movs	r3, #0
 80048dc:	4630      	mov	r0, r6
 80048de:	4639      	mov	r1, r7
 80048e0:	f7fc f86c 	bl	80009bc <__aeabi_dcmplt>
 80048e4:	b148      	cbz	r0, 80048fa <_dtoa_r+0x17a>
 80048e6:	4648      	mov	r0, r9
 80048e8:	f7fb fd8c 	bl	8000404 <__aeabi_i2d>
 80048ec:	4632      	mov	r2, r6
 80048ee:	463b      	mov	r3, r7
 80048f0:	f7fc f85a 	bl	80009a8 <__aeabi_dcmpeq>
 80048f4:	b908      	cbnz	r0, 80048fa <_dtoa_r+0x17a>
 80048f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80048fa:	f1b9 0f16 	cmp.w	r9, #22
 80048fe:	d857      	bhi.n	80049b0 <_dtoa_r+0x230>
 8004900:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004904:	4b5d      	ldr	r3, [pc, #372]	; (8004a7c <_dtoa_r+0x2fc>)
 8004906:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	f7fc f855 	bl	80009bc <__aeabi_dcmplt>
 8004912:	2800      	cmp	r0, #0
 8004914:	d04e      	beq.n	80049b4 <_dtoa_r+0x234>
 8004916:	2300      	movs	r3, #0
 8004918:	f109 39ff 	add.w	r9, r9, #4294967295
 800491c:	930f      	str	r3, [sp, #60]	; 0x3c
 800491e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004920:	1b1c      	subs	r4, r3, r4
 8004922:	1e63      	subs	r3, r4, #1
 8004924:	9309      	str	r3, [sp, #36]	; 0x24
 8004926:	bf49      	itett	mi
 8004928:	f1c4 0301 	rsbmi	r3, r4, #1
 800492c:	2300      	movpl	r3, #0
 800492e:	9306      	strmi	r3, [sp, #24]
 8004930:	2300      	movmi	r3, #0
 8004932:	bf54      	ite	pl
 8004934:	9306      	strpl	r3, [sp, #24]
 8004936:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004938:	f1b9 0f00 	cmp.w	r9, #0
 800493c:	db3c      	blt.n	80049b8 <_dtoa_r+0x238>
 800493e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004940:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004944:	444b      	add	r3, r9
 8004946:	9309      	str	r3, [sp, #36]	; 0x24
 8004948:	2300      	movs	r3, #0
 800494a:	930a      	str	r3, [sp, #40]	; 0x28
 800494c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800494e:	2b09      	cmp	r3, #9
 8004950:	d86c      	bhi.n	8004a2c <_dtoa_r+0x2ac>
 8004952:	2b05      	cmp	r3, #5
 8004954:	bfc4      	itt	gt
 8004956:	3b04      	subgt	r3, #4
 8004958:	9322      	strgt	r3, [sp, #136]	; 0x88
 800495a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800495c:	bfc8      	it	gt
 800495e:	2400      	movgt	r4, #0
 8004960:	f1a3 0302 	sub.w	r3, r3, #2
 8004964:	bfd8      	it	le
 8004966:	2401      	movle	r4, #1
 8004968:	2b03      	cmp	r3, #3
 800496a:	f200 808b 	bhi.w	8004a84 <_dtoa_r+0x304>
 800496e:	e8df f003 	tbb	[pc, r3]
 8004972:	4f2d      	.short	0x4f2d
 8004974:	5b4d      	.short	0x5b4d
 8004976:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800497a:	441c      	add	r4, r3
 800497c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004980:	2b20      	cmp	r3, #32
 8004982:	bfc3      	ittte	gt
 8004984:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004988:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800498c:	fa09 f303 	lslgt.w	r3, r9, r3
 8004990:	f1c3 0320 	rsble	r3, r3, #32
 8004994:	bfc6      	itte	gt
 8004996:	fa26 f000 	lsrgt.w	r0, r6, r0
 800499a:	4318      	orrgt	r0, r3
 800499c:	fa06 f003 	lslle.w	r0, r6, r3
 80049a0:	f7fb fd20 	bl	80003e4 <__aeabi_ui2d>
 80049a4:	2301      	movs	r3, #1
 80049a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80049aa:	3c01      	subs	r4, #1
 80049ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80049ae:	e770      	b.n	8004892 <_dtoa_r+0x112>
 80049b0:	2301      	movs	r3, #1
 80049b2:	e7b3      	b.n	800491c <_dtoa_r+0x19c>
 80049b4:	900f      	str	r0, [sp, #60]	; 0x3c
 80049b6:	e7b2      	b.n	800491e <_dtoa_r+0x19e>
 80049b8:	9b06      	ldr	r3, [sp, #24]
 80049ba:	eba3 0309 	sub.w	r3, r3, r9
 80049be:	9306      	str	r3, [sp, #24]
 80049c0:	f1c9 0300 	rsb	r3, r9, #0
 80049c4:	930a      	str	r3, [sp, #40]	; 0x28
 80049c6:	2300      	movs	r3, #0
 80049c8:	930e      	str	r3, [sp, #56]	; 0x38
 80049ca:	e7bf      	b.n	800494c <_dtoa_r+0x1cc>
 80049cc:	2300      	movs	r3, #0
 80049ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80049d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	dc59      	bgt.n	8004a8a <_dtoa_r+0x30a>
 80049d6:	f04f 0b01 	mov.w	fp, #1
 80049da:	465b      	mov	r3, fp
 80049dc:	f8cd b008 	str.w	fp, [sp, #8]
 80049e0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80049e4:	2200      	movs	r2, #0
 80049e6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80049e8:	6042      	str	r2, [r0, #4]
 80049ea:	2204      	movs	r2, #4
 80049ec:	f102 0614 	add.w	r6, r2, #20
 80049f0:	429e      	cmp	r6, r3
 80049f2:	6841      	ldr	r1, [r0, #4]
 80049f4:	d94f      	bls.n	8004a96 <_dtoa_r+0x316>
 80049f6:	4628      	mov	r0, r5
 80049f8:	f001 f842 	bl	8005a80 <_Balloc>
 80049fc:	9008      	str	r0, [sp, #32]
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d14d      	bne.n	8004a9e <_dtoa_r+0x31e>
 8004a02:	4602      	mov	r2, r0
 8004a04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004a08:	4b1d      	ldr	r3, [pc, #116]	; (8004a80 <_dtoa_r+0x300>)
 8004a0a:	e6cd      	b.n	80047a8 <_dtoa_r+0x28>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e7de      	b.n	80049ce <_dtoa_r+0x24e>
 8004a10:	2300      	movs	r3, #0
 8004a12:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a16:	eb09 0b03 	add.w	fp, r9, r3
 8004a1a:	f10b 0301 	add.w	r3, fp, #1
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	9302      	str	r3, [sp, #8]
 8004a22:	bfb8      	it	lt
 8004a24:	2301      	movlt	r3, #1
 8004a26:	e7dd      	b.n	80049e4 <_dtoa_r+0x264>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e7f2      	b.n	8004a12 <_dtoa_r+0x292>
 8004a2c:	2401      	movs	r4, #1
 8004a2e:	2300      	movs	r3, #0
 8004a30:	940b      	str	r4, [sp, #44]	; 0x2c
 8004a32:	9322      	str	r3, [sp, #136]	; 0x88
 8004a34:	f04f 3bff 	mov.w	fp, #4294967295
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2312      	movs	r3, #18
 8004a3c:	f8cd b008 	str.w	fp, [sp, #8]
 8004a40:	9223      	str	r2, [sp, #140]	; 0x8c
 8004a42:	e7cf      	b.n	80049e4 <_dtoa_r+0x264>
 8004a44:	f3af 8000 	nop.w
 8004a48:	636f4361 	.word	0x636f4361
 8004a4c:	3fd287a7 	.word	0x3fd287a7
 8004a50:	8b60c8b3 	.word	0x8b60c8b3
 8004a54:	3fc68a28 	.word	0x3fc68a28
 8004a58:	509f79fb 	.word	0x509f79fb
 8004a5c:	3fd34413 	.word	0x3fd34413
 8004a60:	080075ce 	.word	0x080075ce
 8004a64:	080075e5 	.word	0x080075e5
 8004a68:	7ff00000 	.word	0x7ff00000
 8004a6c:	080075ca 	.word	0x080075ca
 8004a70:	080075c1 	.word	0x080075c1
 8004a74:	08007445 	.word	0x08007445
 8004a78:	3ff80000 	.word	0x3ff80000
 8004a7c:	08007760 	.word	0x08007760
 8004a80:	08007644 	.word	0x08007644
 8004a84:	2301      	movs	r3, #1
 8004a86:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a88:	e7d4      	b.n	8004a34 <_dtoa_r+0x2b4>
 8004a8a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004a8e:	465b      	mov	r3, fp
 8004a90:	f8cd b008 	str.w	fp, [sp, #8]
 8004a94:	e7a6      	b.n	80049e4 <_dtoa_r+0x264>
 8004a96:	3101      	adds	r1, #1
 8004a98:	6041      	str	r1, [r0, #4]
 8004a9a:	0052      	lsls	r2, r2, #1
 8004a9c:	e7a6      	b.n	80049ec <_dtoa_r+0x26c>
 8004a9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004aa0:	9a08      	ldr	r2, [sp, #32]
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	9b02      	ldr	r3, [sp, #8]
 8004aa6:	2b0e      	cmp	r3, #14
 8004aa8:	f200 80a8 	bhi.w	8004bfc <_dtoa_r+0x47c>
 8004aac:	2c00      	cmp	r4, #0
 8004aae:	f000 80a5 	beq.w	8004bfc <_dtoa_r+0x47c>
 8004ab2:	f1b9 0f00 	cmp.w	r9, #0
 8004ab6:	dd34      	ble.n	8004b22 <_dtoa_r+0x3a2>
 8004ab8:	4a9a      	ldr	r2, [pc, #616]	; (8004d24 <_dtoa_r+0x5a4>)
 8004aba:	f009 030f 	and.w	r3, r9, #15
 8004abe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ac2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004ac6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004aca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004ace:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004ad2:	d016      	beq.n	8004b02 <_dtoa_r+0x382>
 8004ad4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ad8:	4b93      	ldr	r3, [pc, #588]	; (8004d28 <_dtoa_r+0x5a8>)
 8004ada:	2703      	movs	r7, #3
 8004adc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ae0:	f7fb fe24 	bl	800072c <__aeabi_ddiv>
 8004ae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ae8:	f004 040f 	and.w	r4, r4, #15
 8004aec:	4e8e      	ldr	r6, [pc, #568]	; (8004d28 <_dtoa_r+0x5a8>)
 8004aee:	b954      	cbnz	r4, 8004b06 <_dtoa_r+0x386>
 8004af0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004af8:	f7fb fe18 	bl	800072c <__aeabi_ddiv>
 8004afc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b00:	e029      	b.n	8004b56 <_dtoa_r+0x3d6>
 8004b02:	2702      	movs	r7, #2
 8004b04:	e7f2      	b.n	8004aec <_dtoa_r+0x36c>
 8004b06:	07e1      	lsls	r1, r4, #31
 8004b08:	d508      	bpl.n	8004b1c <_dtoa_r+0x39c>
 8004b0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b12:	f7fb fce1 	bl	80004d8 <__aeabi_dmul>
 8004b16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b1a:	3701      	adds	r7, #1
 8004b1c:	1064      	asrs	r4, r4, #1
 8004b1e:	3608      	adds	r6, #8
 8004b20:	e7e5      	b.n	8004aee <_dtoa_r+0x36e>
 8004b22:	f000 80a5 	beq.w	8004c70 <_dtoa_r+0x4f0>
 8004b26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b2a:	f1c9 0400 	rsb	r4, r9, #0
 8004b2e:	4b7d      	ldr	r3, [pc, #500]	; (8004d24 <_dtoa_r+0x5a4>)
 8004b30:	f004 020f 	and.w	r2, r4, #15
 8004b34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3c:	f7fb fccc 	bl	80004d8 <__aeabi_dmul>
 8004b40:	2702      	movs	r7, #2
 8004b42:	2300      	movs	r3, #0
 8004b44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b48:	4e77      	ldr	r6, [pc, #476]	; (8004d28 <_dtoa_r+0x5a8>)
 8004b4a:	1124      	asrs	r4, r4, #4
 8004b4c:	2c00      	cmp	r4, #0
 8004b4e:	f040 8084 	bne.w	8004c5a <_dtoa_r+0x4da>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1d2      	bne.n	8004afc <_dtoa_r+0x37c>
 8004b56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 808b 	beq.w	8004c74 <_dtoa_r+0x4f4>
 8004b5e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004b62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004b66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	4b6f      	ldr	r3, [pc, #444]	; (8004d2c <_dtoa_r+0x5ac>)
 8004b6e:	f7fb ff25 	bl	80009bc <__aeabi_dcmplt>
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d07e      	beq.n	8004c74 <_dtoa_r+0x4f4>
 8004b76:	9b02      	ldr	r3, [sp, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d07b      	beq.n	8004c74 <_dtoa_r+0x4f4>
 8004b7c:	f1bb 0f00 	cmp.w	fp, #0
 8004b80:	dd38      	ble.n	8004bf4 <_dtoa_r+0x474>
 8004b82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b86:	2200      	movs	r2, #0
 8004b88:	4b69      	ldr	r3, [pc, #420]	; (8004d30 <_dtoa_r+0x5b0>)
 8004b8a:	f7fb fca5 	bl	80004d8 <__aeabi_dmul>
 8004b8e:	465c      	mov	r4, fp
 8004b90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b94:	f109 38ff 	add.w	r8, r9, #4294967295
 8004b98:	3701      	adds	r7, #1
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	f7fb fc32 	bl	8000404 <__aeabi_i2d>
 8004ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ba4:	f7fb fc98 	bl	80004d8 <__aeabi_dmul>
 8004ba8:	2200      	movs	r2, #0
 8004baa:	4b62      	ldr	r3, [pc, #392]	; (8004d34 <_dtoa_r+0x5b4>)
 8004bac:	f7fb fade 	bl	800016c <__adddf3>
 8004bb0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004bb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004bb8:	9611      	str	r6, [sp, #68]	; 0x44
 8004bba:	2c00      	cmp	r4, #0
 8004bbc:	d15d      	bne.n	8004c7a <_dtoa_r+0x4fa>
 8004bbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	4b5c      	ldr	r3, [pc, #368]	; (8004d38 <_dtoa_r+0x5b8>)
 8004bc6:	f7fb facf 	bl	8000168 <__aeabi_dsub>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004bd2:	4633      	mov	r3, r6
 8004bd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004bd6:	f7fb ff0f 	bl	80009f8 <__aeabi_dcmpgt>
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	f040 829e 	bne.w	800511c <_dtoa_r+0x99c>
 8004be0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004be4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004be6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004bea:	f7fb fee7 	bl	80009bc <__aeabi_dcmplt>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	f040 8292 	bne.w	8005118 <_dtoa_r+0x998>
 8004bf4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004bf8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004bfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f2c0 8153 	blt.w	8004eaa <_dtoa_r+0x72a>
 8004c04:	f1b9 0f0e 	cmp.w	r9, #14
 8004c08:	f300 814f 	bgt.w	8004eaa <_dtoa_r+0x72a>
 8004c0c:	4b45      	ldr	r3, [pc, #276]	; (8004d24 <_dtoa_r+0x5a4>)
 8004c0e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004c12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c16:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004c1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f280 80db 	bge.w	8004dd8 <_dtoa_r+0x658>
 8004c22:	9b02      	ldr	r3, [sp, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f300 80d7 	bgt.w	8004dd8 <_dtoa_r+0x658>
 8004c2a:	f040 8274 	bne.w	8005116 <_dtoa_r+0x996>
 8004c2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c32:	2200      	movs	r2, #0
 8004c34:	4b40      	ldr	r3, [pc, #256]	; (8004d38 <_dtoa_r+0x5b8>)
 8004c36:	f7fb fc4f 	bl	80004d8 <__aeabi_dmul>
 8004c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c3e:	f7fb fed1 	bl	80009e4 <__aeabi_dcmpge>
 8004c42:	9c02      	ldr	r4, [sp, #8]
 8004c44:	4626      	mov	r6, r4
 8004c46:	2800      	cmp	r0, #0
 8004c48:	f040 824a 	bne.w	80050e0 <_dtoa_r+0x960>
 8004c4c:	2331      	movs	r3, #49	; 0x31
 8004c4e:	9f08      	ldr	r7, [sp, #32]
 8004c50:	f109 0901 	add.w	r9, r9, #1
 8004c54:	f807 3b01 	strb.w	r3, [r7], #1
 8004c58:	e246      	b.n	80050e8 <_dtoa_r+0x968>
 8004c5a:	07e2      	lsls	r2, r4, #31
 8004c5c:	d505      	bpl.n	8004c6a <_dtoa_r+0x4ea>
 8004c5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004c62:	f7fb fc39 	bl	80004d8 <__aeabi_dmul>
 8004c66:	2301      	movs	r3, #1
 8004c68:	3701      	adds	r7, #1
 8004c6a:	1064      	asrs	r4, r4, #1
 8004c6c:	3608      	adds	r6, #8
 8004c6e:	e76d      	b.n	8004b4c <_dtoa_r+0x3cc>
 8004c70:	2702      	movs	r7, #2
 8004c72:	e770      	b.n	8004b56 <_dtoa_r+0x3d6>
 8004c74:	46c8      	mov	r8, r9
 8004c76:	9c02      	ldr	r4, [sp, #8]
 8004c78:	e78f      	b.n	8004b9a <_dtoa_r+0x41a>
 8004c7a:	9908      	ldr	r1, [sp, #32]
 8004c7c:	4b29      	ldr	r3, [pc, #164]	; (8004d24 <_dtoa_r+0x5a4>)
 8004c7e:	4421      	add	r1, r4
 8004c80:	9112      	str	r1, [sp, #72]	; 0x48
 8004c82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c88:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004c8c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c90:	2900      	cmp	r1, #0
 8004c92:	d055      	beq.n	8004d40 <_dtoa_r+0x5c0>
 8004c94:	2000      	movs	r0, #0
 8004c96:	4929      	ldr	r1, [pc, #164]	; (8004d3c <_dtoa_r+0x5bc>)
 8004c98:	f7fb fd48 	bl	800072c <__aeabi_ddiv>
 8004c9c:	463b      	mov	r3, r7
 8004c9e:	4632      	mov	r2, r6
 8004ca0:	f7fb fa62 	bl	8000168 <__aeabi_dsub>
 8004ca4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ca8:	9f08      	ldr	r7, [sp, #32]
 8004caa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cae:	f7fb fec3 	bl	8000a38 <__aeabi_d2iz>
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	f7fb fba6 	bl	8000404 <__aeabi_i2d>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cc0:	f7fb fa52 	bl	8000168 <__aeabi_dsub>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	3430      	adds	r4, #48	; 0x30
 8004cca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004cce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004cd2:	f807 4b01 	strb.w	r4, [r7], #1
 8004cd6:	f7fb fe71 	bl	80009bc <__aeabi_dcmplt>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d174      	bne.n	8004dc8 <_dtoa_r+0x648>
 8004cde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	4911      	ldr	r1, [pc, #68]	; (8004d2c <_dtoa_r+0x5ac>)
 8004ce6:	f7fb fa3f 	bl	8000168 <__aeabi_dsub>
 8004cea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004cee:	f7fb fe65 	bl	80009bc <__aeabi_dcmplt>
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	f040 80b6 	bne.w	8004e64 <_dtoa_r+0x6e4>
 8004cf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004cfa:	429f      	cmp	r7, r3
 8004cfc:	f43f af7a 	beq.w	8004bf4 <_dtoa_r+0x474>
 8004d00:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d04:	2200      	movs	r2, #0
 8004d06:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <_dtoa_r+0x5b0>)
 8004d08:	f7fb fbe6 	bl	80004d8 <__aeabi_dmul>
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d16:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <_dtoa_r+0x5b0>)
 8004d18:	f7fb fbde 	bl	80004d8 <__aeabi_dmul>
 8004d1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d20:	e7c3      	b.n	8004caa <_dtoa_r+0x52a>
 8004d22:	bf00      	nop
 8004d24:	08007760 	.word	0x08007760
 8004d28:	08007738 	.word	0x08007738
 8004d2c:	3ff00000 	.word	0x3ff00000
 8004d30:	40240000 	.word	0x40240000
 8004d34:	401c0000 	.word	0x401c0000
 8004d38:	40140000 	.word	0x40140000
 8004d3c:	3fe00000 	.word	0x3fe00000
 8004d40:	4630      	mov	r0, r6
 8004d42:	4639      	mov	r1, r7
 8004d44:	f7fb fbc8 	bl	80004d8 <__aeabi_dmul>
 8004d48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d4e:	9c08      	ldr	r4, [sp, #32]
 8004d50:	9314      	str	r3, [sp, #80]	; 0x50
 8004d52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d56:	f7fb fe6f 	bl	8000a38 <__aeabi_d2iz>
 8004d5a:	9015      	str	r0, [sp, #84]	; 0x54
 8004d5c:	f7fb fb52 	bl	8000404 <__aeabi_i2d>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d68:	f7fb f9fe 	bl	8000168 <__aeabi_dsub>
 8004d6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d6e:	4606      	mov	r6, r0
 8004d70:	3330      	adds	r3, #48	; 0x30
 8004d72:	f804 3b01 	strb.w	r3, [r4], #1
 8004d76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d78:	460f      	mov	r7, r1
 8004d7a:	429c      	cmp	r4, r3
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	d124      	bne.n	8004dcc <_dtoa_r+0x64c>
 8004d82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d86:	4bb3      	ldr	r3, [pc, #716]	; (8005054 <_dtoa_r+0x8d4>)
 8004d88:	f7fb f9f0 	bl	800016c <__adddf3>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4630      	mov	r0, r6
 8004d92:	4639      	mov	r1, r7
 8004d94:	f7fb fe30 	bl	80009f8 <__aeabi_dcmpgt>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	d162      	bne.n	8004e62 <_dtoa_r+0x6e2>
 8004d9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004da0:	2000      	movs	r0, #0
 8004da2:	49ac      	ldr	r1, [pc, #688]	; (8005054 <_dtoa_r+0x8d4>)
 8004da4:	f7fb f9e0 	bl	8000168 <__aeabi_dsub>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4630      	mov	r0, r6
 8004dae:	4639      	mov	r1, r7
 8004db0:	f7fb fe04 	bl	80009bc <__aeabi_dcmplt>
 8004db4:	2800      	cmp	r0, #0
 8004db6:	f43f af1d 	beq.w	8004bf4 <_dtoa_r+0x474>
 8004dba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004dbc:	1e7b      	subs	r3, r7, #1
 8004dbe:	9314      	str	r3, [sp, #80]	; 0x50
 8004dc0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004dc4:	2b30      	cmp	r3, #48	; 0x30
 8004dc6:	d0f8      	beq.n	8004dba <_dtoa_r+0x63a>
 8004dc8:	46c1      	mov	r9, r8
 8004dca:	e03a      	b.n	8004e42 <_dtoa_r+0x6c2>
 8004dcc:	4ba2      	ldr	r3, [pc, #648]	; (8005058 <_dtoa_r+0x8d8>)
 8004dce:	f7fb fb83 	bl	80004d8 <__aeabi_dmul>
 8004dd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004dd6:	e7bc      	b.n	8004d52 <_dtoa_r+0x5d2>
 8004dd8:	9f08      	ldr	r7, [sp, #32]
 8004dda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004dde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004de2:	f7fb fca3 	bl	800072c <__aeabi_ddiv>
 8004de6:	f7fb fe27 	bl	8000a38 <__aeabi_d2iz>
 8004dea:	4604      	mov	r4, r0
 8004dec:	f7fb fb0a 	bl	8000404 <__aeabi_i2d>
 8004df0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004df4:	f7fb fb70 	bl	80004d8 <__aeabi_dmul>
 8004df8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4602      	mov	r2, r0
 8004e00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e04:	f7fb f9b0 	bl	8000168 <__aeabi_dsub>
 8004e08:	f807 6b01 	strb.w	r6, [r7], #1
 8004e0c:	9e08      	ldr	r6, [sp, #32]
 8004e0e:	9b02      	ldr	r3, [sp, #8]
 8004e10:	1bbe      	subs	r6, r7, r6
 8004e12:	42b3      	cmp	r3, r6
 8004e14:	d13a      	bne.n	8004e8c <_dtoa_r+0x70c>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	f7fb f9a7 	bl	800016c <__adddf3>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e2a:	f7fb fde5 	bl	80009f8 <__aeabi_dcmpgt>
 8004e2e:	bb58      	cbnz	r0, 8004e88 <_dtoa_r+0x708>
 8004e30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e38:	f7fb fdb6 	bl	80009a8 <__aeabi_dcmpeq>
 8004e3c:	b108      	cbz	r0, 8004e42 <_dtoa_r+0x6c2>
 8004e3e:	07e1      	lsls	r1, r4, #31
 8004e40:	d422      	bmi.n	8004e88 <_dtoa_r+0x708>
 8004e42:	4628      	mov	r0, r5
 8004e44:	4651      	mov	r1, sl
 8004e46:	f000 fe5b 	bl	8005b00 <_Bfree>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	703b      	strb	r3, [r7, #0]
 8004e4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004e50:	f109 0001 	add.w	r0, r9, #1
 8004e54:	6018      	str	r0, [r3, #0]
 8004e56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f43f acdf 	beq.w	800481c <_dtoa_r+0x9c>
 8004e5e:	601f      	str	r7, [r3, #0]
 8004e60:	e4dc      	b.n	800481c <_dtoa_r+0x9c>
 8004e62:	4627      	mov	r7, r4
 8004e64:	463b      	mov	r3, r7
 8004e66:	461f      	mov	r7, r3
 8004e68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e6c:	2a39      	cmp	r2, #57	; 0x39
 8004e6e:	d107      	bne.n	8004e80 <_dtoa_r+0x700>
 8004e70:	9a08      	ldr	r2, [sp, #32]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d1f7      	bne.n	8004e66 <_dtoa_r+0x6e6>
 8004e76:	2230      	movs	r2, #48	; 0x30
 8004e78:	9908      	ldr	r1, [sp, #32]
 8004e7a:	f108 0801 	add.w	r8, r8, #1
 8004e7e:	700a      	strb	r2, [r1, #0]
 8004e80:	781a      	ldrb	r2, [r3, #0]
 8004e82:	3201      	adds	r2, #1
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	e79f      	b.n	8004dc8 <_dtoa_r+0x648>
 8004e88:	46c8      	mov	r8, r9
 8004e8a:	e7eb      	b.n	8004e64 <_dtoa_r+0x6e4>
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	4b72      	ldr	r3, [pc, #456]	; (8005058 <_dtoa_r+0x8d8>)
 8004e90:	f7fb fb22 	bl	80004d8 <__aeabi_dmul>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f7fb fd82 	bl	80009a8 <__aeabi_dcmpeq>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d098      	beq.n	8004dda <_dtoa_r+0x65a>
 8004ea8:	e7cb      	b.n	8004e42 <_dtoa_r+0x6c2>
 8004eaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004eac:	2a00      	cmp	r2, #0
 8004eae:	f000 80cd 	beq.w	800504c <_dtoa_r+0x8cc>
 8004eb2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004eb4:	2a01      	cmp	r2, #1
 8004eb6:	f300 80af 	bgt.w	8005018 <_dtoa_r+0x898>
 8004eba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004ebc:	2a00      	cmp	r2, #0
 8004ebe:	f000 80a7 	beq.w	8005010 <_dtoa_r+0x890>
 8004ec2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004ec6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004ec8:	9f06      	ldr	r7, [sp, #24]
 8004eca:	9a06      	ldr	r2, [sp, #24]
 8004ecc:	2101      	movs	r1, #1
 8004ece:	441a      	add	r2, r3
 8004ed0:	9206      	str	r2, [sp, #24]
 8004ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	441a      	add	r2, r3
 8004ed8:	9209      	str	r2, [sp, #36]	; 0x24
 8004eda:	f000 ff15 	bl	8005d08 <__i2b>
 8004ede:	4606      	mov	r6, r0
 8004ee0:	2f00      	cmp	r7, #0
 8004ee2:	dd0c      	ble.n	8004efe <_dtoa_r+0x77e>
 8004ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	dd09      	ble.n	8004efe <_dtoa_r+0x77e>
 8004eea:	42bb      	cmp	r3, r7
 8004eec:	bfa8      	it	ge
 8004eee:	463b      	movge	r3, r7
 8004ef0:	9a06      	ldr	r2, [sp, #24]
 8004ef2:	1aff      	subs	r7, r7, r3
 8004ef4:	1ad2      	subs	r2, r2, r3
 8004ef6:	9206      	str	r2, [sp, #24]
 8004ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	9309      	str	r3, [sp, #36]	; 0x24
 8004efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f00:	b1f3      	cbz	r3, 8004f40 <_dtoa_r+0x7c0>
 8004f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 80a9 	beq.w	800505c <_dtoa_r+0x8dc>
 8004f0a:	2c00      	cmp	r4, #0
 8004f0c:	dd10      	ble.n	8004f30 <_dtoa_r+0x7b0>
 8004f0e:	4631      	mov	r1, r6
 8004f10:	4622      	mov	r2, r4
 8004f12:	4628      	mov	r0, r5
 8004f14:	f000 ffb2 	bl	8005e7c <__pow5mult>
 8004f18:	4652      	mov	r2, sl
 8004f1a:	4601      	mov	r1, r0
 8004f1c:	4606      	mov	r6, r0
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f000 ff08 	bl	8005d34 <__multiply>
 8004f24:	4680      	mov	r8, r0
 8004f26:	4651      	mov	r1, sl
 8004f28:	4628      	mov	r0, r5
 8004f2a:	f000 fde9 	bl	8005b00 <_Bfree>
 8004f2e:	46c2      	mov	sl, r8
 8004f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f32:	1b1a      	subs	r2, r3, r4
 8004f34:	d004      	beq.n	8004f40 <_dtoa_r+0x7c0>
 8004f36:	4651      	mov	r1, sl
 8004f38:	4628      	mov	r0, r5
 8004f3a:	f000 ff9f 	bl	8005e7c <__pow5mult>
 8004f3e:	4682      	mov	sl, r0
 8004f40:	2101      	movs	r1, #1
 8004f42:	4628      	mov	r0, r5
 8004f44:	f000 fee0 	bl	8005d08 <__i2b>
 8004f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f340 8087 	ble.w	8005060 <_dtoa_r+0x8e0>
 8004f52:	461a      	mov	r2, r3
 8004f54:	4601      	mov	r1, r0
 8004f56:	4628      	mov	r0, r5
 8004f58:	f000 ff90 	bl	8005e7c <__pow5mult>
 8004f5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f5e:	4604      	mov	r4, r0
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	f340 8080 	ble.w	8005066 <_dtoa_r+0x8e6>
 8004f66:	f04f 0800 	mov.w	r8, #0
 8004f6a:	6923      	ldr	r3, [r4, #16]
 8004f6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f70:	6918      	ldr	r0, [r3, #16]
 8004f72:	f000 fe7b 	bl	8005c6c <__hi0bits>
 8004f76:	f1c0 0020 	rsb	r0, r0, #32
 8004f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7c:	4418      	add	r0, r3
 8004f7e:	f010 001f 	ands.w	r0, r0, #31
 8004f82:	f000 8092 	beq.w	80050aa <_dtoa_r+0x92a>
 8004f86:	f1c0 0320 	rsb	r3, r0, #32
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	f340 808a 	ble.w	80050a4 <_dtoa_r+0x924>
 8004f90:	f1c0 001c 	rsb	r0, r0, #28
 8004f94:	9b06      	ldr	r3, [sp, #24]
 8004f96:	4407      	add	r7, r0
 8004f98:	4403      	add	r3, r0
 8004f9a:	9306      	str	r3, [sp, #24]
 8004f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f9e:	4403      	add	r3, r0
 8004fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa2:	9b06      	ldr	r3, [sp, #24]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	dd05      	ble.n	8004fb4 <_dtoa_r+0x834>
 8004fa8:	4651      	mov	r1, sl
 8004faa:	461a      	mov	r2, r3
 8004fac:	4628      	mov	r0, r5
 8004fae:	f000 ffbf 	bl	8005f30 <__lshift>
 8004fb2:	4682      	mov	sl, r0
 8004fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	dd05      	ble.n	8004fc6 <_dtoa_r+0x846>
 8004fba:	4621      	mov	r1, r4
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f000 ffb6 	bl	8005f30 <__lshift>
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d070      	beq.n	80050ae <_dtoa_r+0x92e>
 8004fcc:	4621      	mov	r1, r4
 8004fce:	4650      	mov	r0, sl
 8004fd0:	f001 f81a 	bl	8006008 <__mcmp>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	da6a      	bge.n	80050ae <_dtoa_r+0x92e>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	4651      	mov	r1, sl
 8004fdc:	220a      	movs	r2, #10
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f000 fdb0 	bl	8005b44 <__multadd>
 8004fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fe6:	4682      	mov	sl, r0
 8004fe8:	f109 39ff 	add.w	r9, r9, #4294967295
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 8193 	beq.w	8005318 <_dtoa_r+0xb98>
 8004ff2:	4631      	mov	r1, r6
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	220a      	movs	r2, #10
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	f000 fda3 	bl	8005b44 <__multadd>
 8004ffe:	f1bb 0f00 	cmp.w	fp, #0
 8005002:	4606      	mov	r6, r0
 8005004:	f300 8093 	bgt.w	800512e <_dtoa_r+0x9ae>
 8005008:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800500a:	2b02      	cmp	r3, #2
 800500c:	dc57      	bgt.n	80050be <_dtoa_r+0x93e>
 800500e:	e08e      	b.n	800512e <_dtoa_r+0x9ae>
 8005010:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005012:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005016:	e756      	b.n	8004ec6 <_dtoa_r+0x746>
 8005018:	9b02      	ldr	r3, [sp, #8]
 800501a:	1e5c      	subs	r4, r3, #1
 800501c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800501e:	42a3      	cmp	r3, r4
 8005020:	bfb7      	itett	lt
 8005022:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005024:	1b1c      	subge	r4, r3, r4
 8005026:	1ae2      	sublt	r2, r4, r3
 8005028:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800502a:	bfbe      	ittt	lt
 800502c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800502e:	189b      	addlt	r3, r3, r2
 8005030:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005032:	9b02      	ldr	r3, [sp, #8]
 8005034:	bfb8      	it	lt
 8005036:	2400      	movlt	r4, #0
 8005038:	2b00      	cmp	r3, #0
 800503a:	bfbb      	ittet	lt
 800503c:	9b06      	ldrlt	r3, [sp, #24]
 800503e:	9a02      	ldrlt	r2, [sp, #8]
 8005040:	9f06      	ldrge	r7, [sp, #24]
 8005042:	1a9f      	sublt	r7, r3, r2
 8005044:	bfac      	ite	ge
 8005046:	9b02      	ldrge	r3, [sp, #8]
 8005048:	2300      	movlt	r3, #0
 800504a:	e73e      	b.n	8004eca <_dtoa_r+0x74a>
 800504c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800504e:	9f06      	ldr	r7, [sp, #24]
 8005050:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005052:	e745      	b.n	8004ee0 <_dtoa_r+0x760>
 8005054:	3fe00000 	.word	0x3fe00000
 8005058:	40240000 	.word	0x40240000
 800505c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800505e:	e76a      	b.n	8004f36 <_dtoa_r+0x7b6>
 8005060:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005062:	2b01      	cmp	r3, #1
 8005064:	dc19      	bgt.n	800509a <_dtoa_r+0x91a>
 8005066:	9b04      	ldr	r3, [sp, #16]
 8005068:	b9bb      	cbnz	r3, 800509a <_dtoa_r+0x91a>
 800506a:	9b05      	ldr	r3, [sp, #20]
 800506c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005070:	b99b      	cbnz	r3, 800509a <_dtoa_r+0x91a>
 8005072:	9b05      	ldr	r3, [sp, #20]
 8005074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005078:	0d1b      	lsrs	r3, r3, #20
 800507a:	051b      	lsls	r3, r3, #20
 800507c:	b183      	cbz	r3, 80050a0 <_dtoa_r+0x920>
 800507e:	f04f 0801 	mov.w	r8, #1
 8005082:	9b06      	ldr	r3, [sp, #24]
 8005084:	3301      	adds	r3, #1
 8005086:	9306      	str	r3, [sp, #24]
 8005088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800508a:	3301      	adds	r3, #1
 800508c:	9309      	str	r3, [sp, #36]	; 0x24
 800508e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005090:	2b00      	cmp	r3, #0
 8005092:	f47f af6a 	bne.w	8004f6a <_dtoa_r+0x7ea>
 8005096:	2001      	movs	r0, #1
 8005098:	e76f      	b.n	8004f7a <_dtoa_r+0x7fa>
 800509a:	f04f 0800 	mov.w	r8, #0
 800509e:	e7f6      	b.n	800508e <_dtoa_r+0x90e>
 80050a0:	4698      	mov	r8, r3
 80050a2:	e7f4      	b.n	800508e <_dtoa_r+0x90e>
 80050a4:	f43f af7d 	beq.w	8004fa2 <_dtoa_r+0x822>
 80050a8:	4618      	mov	r0, r3
 80050aa:	301c      	adds	r0, #28
 80050ac:	e772      	b.n	8004f94 <_dtoa_r+0x814>
 80050ae:	9b02      	ldr	r3, [sp, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	dc36      	bgt.n	8005122 <_dtoa_r+0x9a2>
 80050b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	dd33      	ble.n	8005122 <_dtoa_r+0x9a2>
 80050ba:	f8dd b008 	ldr.w	fp, [sp, #8]
 80050be:	f1bb 0f00 	cmp.w	fp, #0
 80050c2:	d10d      	bne.n	80050e0 <_dtoa_r+0x960>
 80050c4:	4621      	mov	r1, r4
 80050c6:	465b      	mov	r3, fp
 80050c8:	2205      	movs	r2, #5
 80050ca:	4628      	mov	r0, r5
 80050cc:	f000 fd3a 	bl	8005b44 <__multadd>
 80050d0:	4601      	mov	r1, r0
 80050d2:	4604      	mov	r4, r0
 80050d4:	4650      	mov	r0, sl
 80050d6:	f000 ff97 	bl	8006008 <__mcmp>
 80050da:	2800      	cmp	r0, #0
 80050dc:	f73f adb6 	bgt.w	8004c4c <_dtoa_r+0x4cc>
 80050e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050e2:	9f08      	ldr	r7, [sp, #32]
 80050e4:	ea6f 0903 	mvn.w	r9, r3
 80050e8:	f04f 0800 	mov.w	r8, #0
 80050ec:	4621      	mov	r1, r4
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 fd06 	bl	8005b00 <_Bfree>
 80050f4:	2e00      	cmp	r6, #0
 80050f6:	f43f aea4 	beq.w	8004e42 <_dtoa_r+0x6c2>
 80050fa:	f1b8 0f00 	cmp.w	r8, #0
 80050fe:	d005      	beq.n	800510c <_dtoa_r+0x98c>
 8005100:	45b0      	cmp	r8, r6
 8005102:	d003      	beq.n	800510c <_dtoa_r+0x98c>
 8005104:	4641      	mov	r1, r8
 8005106:	4628      	mov	r0, r5
 8005108:	f000 fcfa 	bl	8005b00 <_Bfree>
 800510c:	4631      	mov	r1, r6
 800510e:	4628      	mov	r0, r5
 8005110:	f000 fcf6 	bl	8005b00 <_Bfree>
 8005114:	e695      	b.n	8004e42 <_dtoa_r+0x6c2>
 8005116:	2400      	movs	r4, #0
 8005118:	4626      	mov	r6, r4
 800511a:	e7e1      	b.n	80050e0 <_dtoa_r+0x960>
 800511c:	46c1      	mov	r9, r8
 800511e:	4626      	mov	r6, r4
 8005120:	e594      	b.n	8004c4c <_dtoa_r+0x4cc>
 8005122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005124:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 80fc 	beq.w	8005326 <_dtoa_r+0xba6>
 800512e:	2f00      	cmp	r7, #0
 8005130:	dd05      	ble.n	800513e <_dtoa_r+0x9be>
 8005132:	4631      	mov	r1, r6
 8005134:	463a      	mov	r2, r7
 8005136:	4628      	mov	r0, r5
 8005138:	f000 fefa 	bl	8005f30 <__lshift>
 800513c:	4606      	mov	r6, r0
 800513e:	f1b8 0f00 	cmp.w	r8, #0
 8005142:	d05c      	beq.n	80051fe <_dtoa_r+0xa7e>
 8005144:	4628      	mov	r0, r5
 8005146:	6871      	ldr	r1, [r6, #4]
 8005148:	f000 fc9a 	bl	8005a80 <_Balloc>
 800514c:	4607      	mov	r7, r0
 800514e:	b928      	cbnz	r0, 800515c <_dtoa_r+0x9dc>
 8005150:	4602      	mov	r2, r0
 8005152:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005156:	4b7e      	ldr	r3, [pc, #504]	; (8005350 <_dtoa_r+0xbd0>)
 8005158:	f7ff bb26 	b.w	80047a8 <_dtoa_r+0x28>
 800515c:	6932      	ldr	r2, [r6, #16]
 800515e:	f106 010c 	add.w	r1, r6, #12
 8005162:	3202      	adds	r2, #2
 8005164:	0092      	lsls	r2, r2, #2
 8005166:	300c      	adds	r0, #12
 8005168:	f7fd fcfc 	bl	8002b64 <memcpy>
 800516c:	2201      	movs	r2, #1
 800516e:	4639      	mov	r1, r7
 8005170:	4628      	mov	r0, r5
 8005172:	f000 fedd 	bl	8005f30 <__lshift>
 8005176:	46b0      	mov	r8, r6
 8005178:	4606      	mov	r6, r0
 800517a:	9b08      	ldr	r3, [sp, #32]
 800517c:	3301      	adds	r3, #1
 800517e:	9302      	str	r3, [sp, #8]
 8005180:	9b08      	ldr	r3, [sp, #32]
 8005182:	445b      	add	r3, fp
 8005184:	930a      	str	r3, [sp, #40]	; 0x28
 8005186:	9b04      	ldr	r3, [sp, #16]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	9309      	str	r3, [sp, #36]	; 0x24
 800518e:	9b02      	ldr	r3, [sp, #8]
 8005190:	4621      	mov	r1, r4
 8005192:	4650      	mov	r0, sl
 8005194:	f103 3bff 	add.w	fp, r3, #4294967295
 8005198:	f7ff fa62 	bl	8004660 <quorem>
 800519c:	4603      	mov	r3, r0
 800519e:	4641      	mov	r1, r8
 80051a0:	3330      	adds	r3, #48	; 0x30
 80051a2:	9004      	str	r0, [sp, #16]
 80051a4:	4650      	mov	r0, sl
 80051a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80051a8:	f000 ff2e 	bl	8006008 <__mcmp>
 80051ac:	4632      	mov	r2, r6
 80051ae:	9006      	str	r0, [sp, #24]
 80051b0:	4621      	mov	r1, r4
 80051b2:	4628      	mov	r0, r5
 80051b4:	f000 ff44 	bl	8006040 <__mdiff>
 80051b8:	68c2      	ldr	r2, [r0, #12]
 80051ba:	4607      	mov	r7, r0
 80051bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051be:	bb02      	cbnz	r2, 8005202 <_dtoa_r+0xa82>
 80051c0:	4601      	mov	r1, r0
 80051c2:	4650      	mov	r0, sl
 80051c4:	f000 ff20 	bl	8006008 <__mcmp>
 80051c8:	4602      	mov	r2, r0
 80051ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051cc:	4639      	mov	r1, r7
 80051ce:	4628      	mov	r0, r5
 80051d0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80051d4:	f000 fc94 	bl	8005b00 <_Bfree>
 80051d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051dc:	9f02      	ldr	r7, [sp, #8]
 80051de:	ea43 0102 	orr.w	r1, r3, r2
 80051e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051e4:	430b      	orrs	r3, r1
 80051e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051e8:	d10d      	bne.n	8005206 <_dtoa_r+0xa86>
 80051ea:	2b39      	cmp	r3, #57	; 0x39
 80051ec:	d027      	beq.n	800523e <_dtoa_r+0xabe>
 80051ee:	9a06      	ldr	r2, [sp, #24]
 80051f0:	2a00      	cmp	r2, #0
 80051f2:	dd01      	ble.n	80051f8 <_dtoa_r+0xa78>
 80051f4:	9b04      	ldr	r3, [sp, #16]
 80051f6:	3331      	adds	r3, #49	; 0x31
 80051f8:	f88b 3000 	strb.w	r3, [fp]
 80051fc:	e776      	b.n	80050ec <_dtoa_r+0x96c>
 80051fe:	4630      	mov	r0, r6
 8005200:	e7b9      	b.n	8005176 <_dtoa_r+0x9f6>
 8005202:	2201      	movs	r2, #1
 8005204:	e7e2      	b.n	80051cc <_dtoa_r+0xa4c>
 8005206:	9906      	ldr	r1, [sp, #24]
 8005208:	2900      	cmp	r1, #0
 800520a:	db04      	blt.n	8005216 <_dtoa_r+0xa96>
 800520c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800520e:	4301      	orrs	r1, r0
 8005210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005212:	4301      	orrs	r1, r0
 8005214:	d120      	bne.n	8005258 <_dtoa_r+0xad8>
 8005216:	2a00      	cmp	r2, #0
 8005218:	ddee      	ble.n	80051f8 <_dtoa_r+0xa78>
 800521a:	4651      	mov	r1, sl
 800521c:	2201      	movs	r2, #1
 800521e:	4628      	mov	r0, r5
 8005220:	9302      	str	r3, [sp, #8]
 8005222:	f000 fe85 	bl	8005f30 <__lshift>
 8005226:	4621      	mov	r1, r4
 8005228:	4682      	mov	sl, r0
 800522a:	f000 feed 	bl	8006008 <__mcmp>
 800522e:	2800      	cmp	r0, #0
 8005230:	9b02      	ldr	r3, [sp, #8]
 8005232:	dc02      	bgt.n	800523a <_dtoa_r+0xaba>
 8005234:	d1e0      	bne.n	80051f8 <_dtoa_r+0xa78>
 8005236:	07da      	lsls	r2, r3, #31
 8005238:	d5de      	bpl.n	80051f8 <_dtoa_r+0xa78>
 800523a:	2b39      	cmp	r3, #57	; 0x39
 800523c:	d1da      	bne.n	80051f4 <_dtoa_r+0xa74>
 800523e:	2339      	movs	r3, #57	; 0x39
 8005240:	f88b 3000 	strb.w	r3, [fp]
 8005244:	463b      	mov	r3, r7
 8005246:	461f      	mov	r7, r3
 8005248:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800524c:	3b01      	subs	r3, #1
 800524e:	2a39      	cmp	r2, #57	; 0x39
 8005250:	d050      	beq.n	80052f4 <_dtoa_r+0xb74>
 8005252:	3201      	adds	r2, #1
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	e749      	b.n	80050ec <_dtoa_r+0x96c>
 8005258:	2a00      	cmp	r2, #0
 800525a:	dd03      	ble.n	8005264 <_dtoa_r+0xae4>
 800525c:	2b39      	cmp	r3, #57	; 0x39
 800525e:	d0ee      	beq.n	800523e <_dtoa_r+0xabe>
 8005260:	3301      	adds	r3, #1
 8005262:	e7c9      	b.n	80051f8 <_dtoa_r+0xa78>
 8005264:	9a02      	ldr	r2, [sp, #8]
 8005266:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005268:	f802 3c01 	strb.w	r3, [r2, #-1]
 800526c:	428a      	cmp	r2, r1
 800526e:	d02a      	beq.n	80052c6 <_dtoa_r+0xb46>
 8005270:	4651      	mov	r1, sl
 8005272:	2300      	movs	r3, #0
 8005274:	220a      	movs	r2, #10
 8005276:	4628      	mov	r0, r5
 8005278:	f000 fc64 	bl	8005b44 <__multadd>
 800527c:	45b0      	cmp	r8, r6
 800527e:	4682      	mov	sl, r0
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	f04f 020a 	mov.w	r2, #10
 8005288:	4641      	mov	r1, r8
 800528a:	4628      	mov	r0, r5
 800528c:	d107      	bne.n	800529e <_dtoa_r+0xb1e>
 800528e:	f000 fc59 	bl	8005b44 <__multadd>
 8005292:	4680      	mov	r8, r0
 8005294:	4606      	mov	r6, r0
 8005296:	9b02      	ldr	r3, [sp, #8]
 8005298:	3301      	adds	r3, #1
 800529a:	9302      	str	r3, [sp, #8]
 800529c:	e777      	b.n	800518e <_dtoa_r+0xa0e>
 800529e:	f000 fc51 	bl	8005b44 <__multadd>
 80052a2:	4631      	mov	r1, r6
 80052a4:	4680      	mov	r8, r0
 80052a6:	2300      	movs	r3, #0
 80052a8:	220a      	movs	r2, #10
 80052aa:	4628      	mov	r0, r5
 80052ac:	f000 fc4a 	bl	8005b44 <__multadd>
 80052b0:	4606      	mov	r6, r0
 80052b2:	e7f0      	b.n	8005296 <_dtoa_r+0xb16>
 80052b4:	f1bb 0f00 	cmp.w	fp, #0
 80052b8:	bfcc      	ite	gt
 80052ba:	465f      	movgt	r7, fp
 80052bc:	2701      	movle	r7, #1
 80052be:	f04f 0800 	mov.w	r8, #0
 80052c2:	9a08      	ldr	r2, [sp, #32]
 80052c4:	4417      	add	r7, r2
 80052c6:	4651      	mov	r1, sl
 80052c8:	2201      	movs	r2, #1
 80052ca:	4628      	mov	r0, r5
 80052cc:	9302      	str	r3, [sp, #8]
 80052ce:	f000 fe2f 	bl	8005f30 <__lshift>
 80052d2:	4621      	mov	r1, r4
 80052d4:	4682      	mov	sl, r0
 80052d6:	f000 fe97 	bl	8006008 <__mcmp>
 80052da:	2800      	cmp	r0, #0
 80052dc:	dcb2      	bgt.n	8005244 <_dtoa_r+0xac4>
 80052de:	d102      	bne.n	80052e6 <_dtoa_r+0xb66>
 80052e0:	9b02      	ldr	r3, [sp, #8]
 80052e2:	07db      	lsls	r3, r3, #31
 80052e4:	d4ae      	bmi.n	8005244 <_dtoa_r+0xac4>
 80052e6:	463b      	mov	r3, r7
 80052e8:	461f      	mov	r7, r3
 80052ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052ee:	2a30      	cmp	r2, #48	; 0x30
 80052f0:	d0fa      	beq.n	80052e8 <_dtoa_r+0xb68>
 80052f2:	e6fb      	b.n	80050ec <_dtoa_r+0x96c>
 80052f4:	9a08      	ldr	r2, [sp, #32]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d1a5      	bne.n	8005246 <_dtoa_r+0xac6>
 80052fa:	2331      	movs	r3, #49	; 0x31
 80052fc:	f109 0901 	add.w	r9, r9, #1
 8005300:	7013      	strb	r3, [r2, #0]
 8005302:	e6f3      	b.n	80050ec <_dtoa_r+0x96c>
 8005304:	4b13      	ldr	r3, [pc, #76]	; (8005354 <_dtoa_r+0xbd4>)
 8005306:	f7ff baa7 	b.w	8004858 <_dtoa_r+0xd8>
 800530a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800530c:	2b00      	cmp	r3, #0
 800530e:	f47f aa80 	bne.w	8004812 <_dtoa_r+0x92>
 8005312:	4b11      	ldr	r3, [pc, #68]	; (8005358 <_dtoa_r+0xbd8>)
 8005314:	f7ff baa0 	b.w	8004858 <_dtoa_r+0xd8>
 8005318:	f1bb 0f00 	cmp.w	fp, #0
 800531c:	dc03      	bgt.n	8005326 <_dtoa_r+0xba6>
 800531e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005320:	2b02      	cmp	r3, #2
 8005322:	f73f aecc 	bgt.w	80050be <_dtoa_r+0x93e>
 8005326:	9f08      	ldr	r7, [sp, #32]
 8005328:	4621      	mov	r1, r4
 800532a:	4650      	mov	r0, sl
 800532c:	f7ff f998 	bl	8004660 <quorem>
 8005330:	9a08      	ldr	r2, [sp, #32]
 8005332:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005336:	f807 3b01 	strb.w	r3, [r7], #1
 800533a:	1aba      	subs	r2, r7, r2
 800533c:	4593      	cmp	fp, r2
 800533e:	ddb9      	ble.n	80052b4 <_dtoa_r+0xb34>
 8005340:	4651      	mov	r1, sl
 8005342:	2300      	movs	r3, #0
 8005344:	220a      	movs	r2, #10
 8005346:	4628      	mov	r0, r5
 8005348:	f000 fbfc 	bl	8005b44 <__multadd>
 800534c:	4682      	mov	sl, r0
 800534e:	e7eb      	b.n	8005328 <_dtoa_r+0xba8>
 8005350:	08007644 	.word	0x08007644
 8005354:	08007444 	.word	0x08007444
 8005358:	080075c1 	.word	0x080075c1

0800535c <rshift>:
 800535c:	6903      	ldr	r3, [r0, #16]
 800535e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005362:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005366:	f100 0414 	add.w	r4, r0, #20
 800536a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800536e:	dd46      	ble.n	80053fe <rshift+0xa2>
 8005370:	f011 011f 	ands.w	r1, r1, #31
 8005374:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005378:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800537c:	d10c      	bne.n	8005398 <rshift+0x3c>
 800537e:	4629      	mov	r1, r5
 8005380:	f100 0710 	add.w	r7, r0, #16
 8005384:	42b1      	cmp	r1, r6
 8005386:	d335      	bcc.n	80053f4 <rshift+0x98>
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	1eea      	subs	r2, r5, #3
 800538e:	4296      	cmp	r6, r2
 8005390:	bf38      	it	cc
 8005392:	2300      	movcc	r3, #0
 8005394:	4423      	add	r3, r4
 8005396:	e015      	b.n	80053c4 <rshift+0x68>
 8005398:	46a1      	mov	r9, r4
 800539a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800539e:	f1c1 0820 	rsb	r8, r1, #32
 80053a2:	40cf      	lsrs	r7, r1
 80053a4:	f105 0e04 	add.w	lr, r5, #4
 80053a8:	4576      	cmp	r6, lr
 80053aa:	46f4      	mov	ip, lr
 80053ac:	d816      	bhi.n	80053dc <rshift+0x80>
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	009a      	lsls	r2, r3, #2
 80053b2:	3a04      	subs	r2, #4
 80053b4:	3501      	adds	r5, #1
 80053b6:	42ae      	cmp	r6, r5
 80053b8:	bf38      	it	cc
 80053ba:	2200      	movcc	r2, #0
 80053bc:	18a3      	adds	r3, r4, r2
 80053be:	50a7      	str	r7, [r4, r2]
 80053c0:	b107      	cbz	r7, 80053c4 <rshift+0x68>
 80053c2:	3304      	adds	r3, #4
 80053c4:	42a3      	cmp	r3, r4
 80053c6:	eba3 0204 	sub.w	r2, r3, r4
 80053ca:	bf08      	it	eq
 80053cc:	2300      	moveq	r3, #0
 80053ce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80053d2:	6102      	str	r2, [r0, #16]
 80053d4:	bf08      	it	eq
 80053d6:	6143      	streq	r3, [r0, #20]
 80053d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053dc:	f8dc c000 	ldr.w	ip, [ip]
 80053e0:	fa0c fc08 	lsl.w	ip, ip, r8
 80053e4:	ea4c 0707 	orr.w	r7, ip, r7
 80053e8:	f849 7b04 	str.w	r7, [r9], #4
 80053ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 80053f0:	40cf      	lsrs	r7, r1
 80053f2:	e7d9      	b.n	80053a8 <rshift+0x4c>
 80053f4:	f851 cb04 	ldr.w	ip, [r1], #4
 80053f8:	f847 cf04 	str.w	ip, [r7, #4]!
 80053fc:	e7c2      	b.n	8005384 <rshift+0x28>
 80053fe:	4623      	mov	r3, r4
 8005400:	e7e0      	b.n	80053c4 <rshift+0x68>

08005402 <__hexdig_fun>:
 8005402:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005406:	2b09      	cmp	r3, #9
 8005408:	d802      	bhi.n	8005410 <__hexdig_fun+0xe>
 800540a:	3820      	subs	r0, #32
 800540c:	b2c0      	uxtb	r0, r0
 800540e:	4770      	bx	lr
 8005410:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005414:	2b05      	cmp	r3, #5
 8005416:	d801      	bhi.n	800541c <__hexdig_fun+0x1a>
 8005418:	3847      	subs	r0, #71	; 0x47
 800541a:	e7f7      	b.n	800540c <__hexdig_fun+0xa>
 800541c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005420:	2b05      	cmp	r3, #5
 8005422:	d801      	bhi.n	8005428 <__hexdig_fun+0x26>
 8005424:	3827      	subs	r0, #39	; 0x27
 8005426:	e7f1      	b.n	800540c <__hexdig_fun+0xa>
 8005428:	2000      	movs	r0, #0
 800542a:	4770      	bx	lr

0800542c <__gethex>:
 800542c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005430:	b08b      	sub	sp, #44	; 0x2c
 8005432:	9306      	str	r3, [sp, #24]
 8005434:	4bb9      	ldr	r3, [pc, #740]	; (800571c <__gethex+0x2f0>)
 8005436:	9002      	str	r0, [sp, #8]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	468b      	mov	fp, r1
 800543c:	4618      	mov	r0, r3
 800543e:	4690      	mov	r8, r2
 8005440:	9303      	str	r3, [sp, #12]
 8005442:	f7fa fe85 	bl	8000150 <strlen>
 8005446:	4682      	mov	sl, r0
 8005448:	9b03      	ldr	r3, [sp, #12]
 800544a:	f8db 2000 	ldr.w	r2, [fp]
 800544e:	4403      	add	r3, r0
 8005450:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005454:	9307      	str	r3, [sp, #28]
 8005456:	1c93      	adds	r3, r2, #2
 8005458:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800545c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005460:	32fe      	adds	r2, #254	; 0xfe
 8005462:	18d1      	adds	r1, r2, r3
 8005464:	461f      	mov	r7, r3
 8005466:	f813 0b01 	ldrb.w	r0, [r3], #1
 800546a:	9101      	str	r1, [sp, #4]
 800546c:	2830      	cmp	r0, #48	; 0x30
 800546e:	d0f8      	beq.n	8005462 <__gethex+0x36>
 8005470:	f7ff ffc7 	bl	8005402 <__hexdig_fun>
 8005474:	4604      	mov	r4, r0
 8005476:	2800      	cmp	r0, #0
 8005478:	d13a      	bne.n	80054f0 <__gethex+0xc4>
 800547a:	4652      	mov	r2, sl
 800547c:	4638      	mov	r0, r7
 800547e:	9903      	ldr	r1, [sp, #12]
 8005480:	f001 f9dc 	bl	800683c <strncmp>
 8005484:	4605      	mov	r5, r0
 8005486:	2800      	cmp	r0, #0
 8005488:	d166      	bne.n	8005558 <__gethex+0x12c>
 800548a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800548e:	eb07 060a 	add.w	r6, r7, sl
 8005492:	f7ff ffb6 	bl	8005402 <__hexdig_fun>
 8005496:	2800      	cmp	r0, #0
 8005498:	d060      	beq.n	800555c <__gethex+0x130>
 800549a:	4633      	mov	r3, r6
 800549c:	7818      	ldrb	r0, [r3, #0]
 800549e:	461f      	mov	r7, r3
 80054a0:	2830      	cmp	r0, #48	; 0x30
 80054a2:	f103 0301 	add.w	r3, r3, #1
 80054a6:	d0f9      	beq.n	800549c <__gethex+0x70>
 80054a8:	f7ff ffab 	bl	8005402 <__hexdig_fun>
 80054ac:	2301      	movs	r3, #1
 80054ae:	fab0 f480 	clz	r4, r0
 80054b2:	4635      	mov	r5, r6
 80054b4:	0964      	lsrs	r4, r4, #5
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	463a      	mov	r2, r7
 80054ba:	4616      	mov	r6, r2
 80054bc:	7830      	ldrb	r0, [r6, #0]
 80054be:	3201      	adds	r2, #1
 80054c0:	f7ff ff9f 	bl	8005402 <__hexdig_fun>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d1f8      	bne.n	80054ba <__gethex+0x8e>
 80054c8:	4652      	mov	r2, sl
 80054ca:	4630      	mov	r0, r6
 80054cc:	9903      	ldr	r1, [sp, #12]
 80054ce:	f001 f9b5 	bl	800683c <strncmp>
 80054d2:	b980      	cbnz	r0, 80054f6 <__gethex+0xca>
 80054d4:	b94d      	cbnz	r5, 80054ea <__gethex+0xbe>
 80054d6:	eb06 050a 	add.w	r5, r6, sl
 80054da:	462a      	mov	r2, r5
 80054dc:	4616      	mov	r6, r2
 80054de:	7830      	ldrb	r0, [r6, #0]
 80054e0:	3201      	adds	r2, #1
 80054e2:	f7ff ff8e 	bl	8005402 <__hexdig_fun>
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d1f8      	bne.n	80054dc <__gethex+0xb0>
 80054ea:	1bad      	subs	r5, r5, r6
 80054ec:	00ad      	lsls	r5, r5, #2
 80054ee:	e004      	b.n	80054fa <__gethex+0xce>
 80054f0:	2400      	movs	r4, #0
 80054f2:	4625      	mov	r5, r4
 80054f4:	e7e0      	b.n	80054b8 <__gethex+0x8c>
 80054f6:	2d00      	cmp	r5, #0
 80054f8:	d1f7      	bne.n	80054ea <__gethex+0xbe>
 80054fa:	7833      	ldrb	r3, [r6, #0]
 80054fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005500:	2b50      	cmp	r3, #80	; 0x50
 8005502:	d139      	bne.n	8005578 <__gethex+0x14c>
 8005504:	7873      	ldrb	r3, [r6, #1]
 8005506:	2b2b      	cmp	r3, #43	; 0x2b
 8005508:	d02a      	beq.n	8005560 <__gethex+0x134>
 800550a:	2b2d      	cmp	r3, #45	; 0x2d
 800550c:	d02c      	beq.n	8005568 <__gethex+0x13c>
 800550e:	f04f 0900 	mov.w	r9, #0
 8005512:	1c71      	adds	r1, r6, #1
 8005514:	7808      	ldrb	r0, [r1, #0]
 8005516:	f7ff ff74 	bl	8005402 <__hexdig_fun>
 800551a:	1e43      	subs	r3, r0, #1
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b18      	cmp	r3, #24
 8005520:	d82a      	bhi.n	8005578 <__gethex+0x14c>
 8005522:	f1a0 0210 	sub.w	r2, r0, #16
 8005526:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800552a:	f7ff ff6a 	bl	8005402 <__hexdig_fun>
 800552e:	1e43      	subs	r3, r0, #1
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b18      	cmp	r3, #24
 8005534:	d91b      	bls.n	800556e <__gethex+0x142>
 8005536:	f1b9 0f00 	cmp.w	r9, #0
 800553a:	d000      	beq.n	800553e <__gethex+0x112>
 800553c:	4252      	negs	r2, r2
 800553e:	4415      	add	r5, r2
 8005540:	f8cb 1000 	str.w	r1, [fp]
 8005544:	b1d4      	cbz	r4, 800557c <__gethex+0x150>
 8005546:	9b01      	ldr	r3, [sp, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	bf14      	ite	ne
 800554c:	2700      	movne	r7, #0
 800554e:	2706      	moveq	r7, #6
 8005550:	4638      	mov	r0, r7
 8005552:	b00b      	add	sp, #44	; 0x2c
 8005554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005558:	463e      	mov	r6, r7
 800555a:	4625      	mov	r5, r4
 800555c:	2401      	movs	r4, #1
 800555e:	e7cc      	b.n	80054fa <__gethex+0xce>
 8005560:	f04f 0900 	mov.w	r9, #0
 8005564:	1cb1      	adds	r1, r6, #2
 8005566:	e7d5      	b.n	8005514 <__gethex+0xe8>
 8005568:	f04f 0901 	mov.w	r9, #1
 800556c:	e7fa      	b.n	8005564 <__gethex+0x138>
 800556e:	230a      	movs	r3, #10
 8005570:	fb03 0202 	mla	r2, r3, r2, r0
 8005574:	3a10      	subs	r2, #16
 8005576:	e7d6      	b.n	8005526 <__gethex+0xfa>
 8005578:	4631      	mov	r1, r6
 800557a:	e7e1      	b.n	8005540 <__gethex+0x114>
 800557c:	4621      	mov	r1, r4
 800557e:	1bf3      	subs	r3, r6, r7
 8005580:	3b01      	subs	r3, #1
 8005582:	2b07      	cmp	r3, #7
 8005584:	dc0a      	bgt.n	800559c <__gethex+0x170>
 8005586:	9802      	ldr	r0, [sp, #8]
 8005588:	f000 fa7a 	bl	8005a80 <_Balloc>
 800558c:	4604      	mov	r4, r0
 800558e:	b940      	cbnz	r0, 80055a2 <__gethex+0x176>
 8005590:	4602      	mov	r2, r0
 8005592:	21de      	movs	r1, #222	; 0xde
 8005594:	4b62      	ldr	r3, [pc, #392]	; (8005720 <__gethex+0x2f4>)
 8005596:	4863      	ldr	r0, [pc, #396]	; (8005724 <__gethex+0x2f8>)
 8005598:	f001 f970 	bl	800687c <__assert_func>
 800559c:	3101      	adds	r1, #1
 800559e:	105b      	asrs	r3, r3, #1
 80055a0:	e7ef      	b.n	8005582 <__gethex+0x156>
 80055a2:	f04f 0b00 	mov.w	fp, #0
 80055a6:	f100 0914 	add.w	r9, r0, #20
 80055aa:	f1ca 0301 	rsb	r3, sl, #1
 80055ae:	f8cd 9010 	str.w	r9, [sp, #16]
 80055b2:	f8cd b004 	str.w	fp, [sp, #4]
 80055b6:	9308      	str	r3, [sp, #32]
 80055b8:	42b7      	cmp	r7, r6
 80055ba:	d33f      	bcc.n	800563c <__gethex+0x210>
 80055bc:	9f04      	ldr	r7, [sp, #16]
 80055be:	9b01      	ldr	r3, [sp, #4]
 80055c0:	f847 3b04 	str.w	r3, [r7], #4
 80055c4:	eba7 0709 	sub.w	r7, r7, r9
 80055c8:	10bf      	asrs	r7, r7, #2
 80055ca:	6127      	str	r7, [r4, #16]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 fb4d 	bl	8005c6c <__hi0bits>
 80055d2:	017f      	lsls	r7, r7, #5
 80055d4:	f8d8 6000 	ldr.w	r6, [r8]
 80055d8:	1a3f      	subs	r7, r7, r0
 80055da:	42b7      	cmp	r7, r6
 80055dc:	dd62      	ble.n	80056a4 <__gethex+0x278>
 80055de:	1bbf      	subs	r7, r7, r6
 80055e0:	4639      	mov	r1, r7
 80055e2:	4620      	mov	r0, r4
 80055e4:	f000 fee3 	bl	80063ae <__any_on>
 80055e8:	4682      	mov	sl, r0
 80055ea:	b1a8      	cbz	r0, 8005618 <__gethex+0x1ec>
 80055ec:	f04f 0a01 	mov.w	sl, #1
 80055f0:	1e7b      	subs	r3, r7, #1
 80055f2:	1159      	asrs	r1, r3, #5
 80055f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80055f8:	f003 021f 	and.w	r2, r3, #31
 80055fc:	fa0a f202 	lsl.w	r2, sl, r2
 8005600:	420a      	tst	r2, r1
 8005602:	d009      	beq.n	8005618 <__gethex+0x1ec>
 8005604:	4553      	cmp	r3, sl
 8005606:	dd05      	ble.n	8005614 <__gethex+0x1e8>
 8005608:	4620      	mov	r0, r4
 800560a:	1eb9      	subs	r1, r7, #2
 800560c:	f000 fecf 	bl	80063ae <__any_on>
 8005610:	2800      	cmp	r0, #0
 8005612:	d144      	bne.n	800569e <__gethex+0x272>
 8005614:	f04f 0a02 	mov.w	sl, #2
 8005618:	4639      	mov	r1, r7
 800561a:	4620      	mov	r0, r4
 800561c:	f7ff fe9e 	bl	800535c <rshift>
 8005620:	443d      	add	r5, r7
 8005622:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005626:	42ab      	cmp	r3, r5
 8005628:	da4a      	bge.n	80056c0 <__gethex+0x294>
 800562a:	4621      	mov	r1, r4
 800562c:	9802      	ldr	r0, [sp, #8]
 800562e:	f000 fa67 	bl	8005b00 <_Bfree>
 8005632:	2300      	movs	r3, #0
 8005634:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005636:	27a3      	movs	r7, #163	; 0xa3
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	e789      	b.n	8005550 <__gethex+0x124>
 800563c:	1e73      	subs	r3, r6, #1
 800563e:	9a07      	ldr	r2, [sp, #28]
 8005640:	9305      	str	r3, [sp, #20]
 8005642:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005646:	4293      	cmp	r3, r2
 8005648:	d019      	beq.n	800567e <__gethex+0x252>
 800564a:	f1bb 0f20 	cmp.w	fp, #32
 800564e:	d107      	bne.n	8005660 <__gethex+0x234>
 8005650:	9b04      	ldr	r3, [sp, #16]
 8005652:	9a01      	ldr	r2, [sp, #4]
 8005654:	f843 2b04 	str.w	r2, [r3], #4
 8005658:	9304      	str	r3, [sp, #16]
 800565a:	2300      	movs	r3, #0
 800565c:	469b      	mov	fp, r3
 800565e:	9301      	str	r3, [sp, #4]
 8005660:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005664:	f7ff fecd 	bl	8005402 <__hexdig_fun>
 8005668:	9b01      	ldr	r3, [sp, #4]
 800566a:	f000 000f 	and.w	r0, r0, #15
 800566e:	fa00 f00b 	lsl.w	r0, r0, fp
 8005672:	4303      	orrs	r3, r0
 8005674:	9301      	str	r3, [sp, #4]
 8005676:	f10b 0b04 	add.w	fp, fp, #4
 800567a:	9b05      	ldr	r3, [sp, #20]
 800567c:	e00d      	b.n	800569a <__gethex+0x26e>
 800567e:	9b05      	ldr	r3, [sp, #20]
 8005680:	9a08      	ldr	r2, [sp, #32]
 8005682:	4413      	add	r3, r2
 8005684:	42bb      	cmp	r3, r7
 8005686:	d3e0      	bcc.n	800564a <__gethex+0x21e>
 8005688:	4618      	mov	r0, r3
 800568a:	4652      	mov	r2, sl
 800568c:	9903      	ldr	r1, [sp, #12]
 800568e:	9309      	str	r3, [sp, #36]	; 0x24
 8005690:	f001 f8d4 	bl	800683c <strncmp>
 8005694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005696:	2800      	cmp	r0, #0
 8005698:	d1d7      	bne.n	800564a <__gethex+0x21e>
 800569a:	461e      	mov	r6, r3
 800569c:	e78c      	b.n	80055b8 <__gethex+0x18c>
 800569e:	f04f 0a03 	mov.w	sl, #3
 80056a2:	e7b9      	b.n	8005618 <__gethex+0x1ec>
 80056a4:	da09      	bge.n	80056ba <__gethex+0x28e>
 80056a6:	1bf7      	subs	r7, r6, r7
 80056a8:	4621      	mov	r1, r4
 80056aa:	463a      	mov	r2, r7
 80056ac:	9802      	ldr	r0, [sp, #8]
 80056ae:	f000 fc3f 	bl	8005f30 <__lshift>
 80056b2:	4604      	mov	r4, r0
 80056b4:	1bed      	subs	r5, r5, r7
 80056b6:	f100 0914 	add.w	r9, r0, #20
 80056ba:	f04f 0a00 	mov.w	sl, #0
 80056be:	e7b0      	b.n	8005622 <__gethex+0x1f6>
 80056c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80056c4:	42a8      	cmp	r0, r5
 80056c6:	dd71      	ble.n	80057ac <__gethex+0x380>
 80056c8:	1b45      	subs	r5, r0, r5
 80056ca:	42ae      	cmp	r6, r5
 80056cc:	dc34      	bgt.n	8005738 <__gethex+0x30c>
 80056ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d028      	beq.n	8005728 <__gethex+0x2fc>
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d02a      	beq.n	8005730 <__gethex+0x304>
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d115      	bne.n	800570a <__gethex+0x2de>
 80056de:	42ae      	cmp	r6, r5
 80056e0:	d113      	bne.n	800570a <__gethex+0x2de>
 80056e2:	2e01      	cmp	r6, #1
 80056e4:	d10b      	bne.n	80056fe <__gethex+0x2d2>
 80056e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80056ea:	9a06      	ldr	r2, [sp, #24]
 80056ec:	2762      	movs	r7, #98	; 0x62
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	2301      	movs	r3, #1
 80056f2:	6123      	str	r3, [r4, #16]
 80056f4:	f8c9 3000 	str.w	r3, [r9]
 80056f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056fa:	601c      	str	r4, [r3, #0]
 80056fc:	e728      	b.n	8005550 <__gethex+0x124>
 80056fe:	4620      	mov	r0, r4
 8005700:	1e71      	subs	r1, r6, #1
 8005702:	f000 fe54 	bl	80063ae <__any_on>
 8005706:	2800      	cmp	r0, #0
 8005708:	d1ed      	bne.n	80056e6 <__gethex+0x2ba>
 800570a:	4621      	mov	r1, r4
 800570c:	9802      	ldr	r0, [sp, #8]
 800570e:	f000 f9f7 	bl	8005b00 <_Bfree>
 8005712:	2300      	movs	r3, #0
 8005714:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005716:	2750      	movs	r7, #80	; 0x50
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	e719      	b.n	8005550 <__gethex+0x124>
 800571c:	080076c0 	.word	0x080076c0
 8005720:	08007644 	.word	0x08007644
 8005724:	08007655 	.word	0x08007655
 8005728:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1ed      	bne.n	800570a <__gethex+0x2de>
 800572e:	e7da      	b.n	80056e6 <__gethex+0x2ba>
 8005730:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1d7      	bne.n	80056e6 <__gethex+0x2ba>
 8005736:	e7e8      	b.n	800570a <__gethex+0x2de>
 8005738:	1e6f      	subs	r7, r5, #1
 800573a:	f1ba 0f00 	cmp.w	sl, #0
 800573e:	d132      	bne.n	80057a6 <__gethex+0x37a>
 8005740:	b127      	cbz	r7, 800574c <__gethex+0x320>
 8005742:	4639      	mov	r1, r7
 8005744:	4620      	mov	r0, r4
 8005746:	f000 fe32 	bl	80063ae <__any_on>
 800574a:	4682      	mov	sl, r0
 800574c:	2101      	movs	r1, #1
 800574e:	117b      	asrs	r3, r7, #5
 8005750:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005754:	f007 071f 	and.w	r7, r7, #31
 8005758:	fa01 f707 	lsl.w	r7, r1, r7
 800575c:	421f      	tst	r7, r3
 800575e:	f04f 0702 	mov.w	r7, #2
 8005762:	4629      	mov	r1, r5
 8005764:	4620      	mov	r0, r4
 8005766:	bf18      	it	ne
 8005768:	f04a 0a02 	orrne.w	sl, sl, #2
 800576c:	1b76      	subs	r6, r6, r5
 800576e:	f7ff fdf5 	bl	800535c <rshift>
 8005772:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005776:	f1ba 0f00 	cmp.w	sl, #0
 800577a:	d048      	beq.n	800580e <__gethex+0x3e2>
 800577c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005780:	2b02      	cmp	r3, #2
 8005782:	d015      	beq.n	80057b0 <__gethex+0x384>
 8005784:	2b03      	cmp	r3, #3
 8005786:	d017      	beq.n	80057b8 <__gethex+0x38c>
 8005788:	2b01      	cmp	r3, #1
 800578a:	d109      	bne.n	80057a0 <__gethex+0x374>
 800578c:	f01a 0f02 	tst.w	sl, #2
 8005790:	d006      	beq.n	80057a0 <__gethex+0x374>
 8005792:	f8d9 0000 	ldr.w	r0, [r9]
 8005796:	ea4a 0a00 	orr.w	sl, sl, r0
 800579a:	f01a 0f01 	tst.w	sl, #1
 800579e:	d10e      	bne.n	80057be <__gethex+0x392>
 80057a0:	f047 0710 	orr.w	r7, r7, #16
 80057a4:	e033      	b.n	800580e <__gethex+0x3e2>
 80057a6:	f04f 0a01 	mov.w	sl, #1
 80057aa:	e7cf      	b.n	800574c <__gethex+0x320>
 80057ac:	2701      	movs	r7, #1
 80057ae:	e7e2      	b.n	8005776 <__gethex+0x34a>
 80057b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057b2:	f1c3 0301 	rsb	r3, r3, #1
 80057b6:	9315      	str	r3, [sp, #84]	; 0x54
 80057b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f0      	beq.n	80057a0 <__gethex+0x374>
 80057be:	f04f 0c00 	mov.w	ip, #0
 80057c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80057c6:	f104 0314 	add.w	r3, r4, #20
 80057ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80057ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80057d2:	4618      	mov	r0, r3
 80057d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80057d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80057dc:	d01c      	beq.n	8005818 <__gethex+0x3ec>
 80057de:	3201      	adds	r2, #1
 80057e0:	6002      	str	r2, [r0, #0]
 80057e2:	2f02      	cmp	r7, #2
 80057e4:	f104 0314 	add.w	r3, r4, #20
 80057e8:	d13d      	bne.n	8005866 <__gethex+0x43a>
 80057ea:	f8d8 2000 	ldr.w	r2, [r8]
 80057ee:	3a01      	subs	r2, #1
 80057f0:	42b2      	cmp	r2, r6
 80057f2:	d10a      	bne.n	800580a <__gethex+0x3de>
 80057f4:	2201      	movs	r2, #1
 80057f6:	1171      	asrs	r1, r6, #5
 80057f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80057fc:	f006 061f 	and.w	r6, r6, #31
 8005800:	fa02 f606 	lsl.w	r6, r2, r6
 8005804:	421e      	tst	r6, r3
 8005806:	bf18      	it	ne
 8005808:	4617      	movne	r7, r2
 800580a:	f047 0720 	orr.w	r7, r7, #32
 800580e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005810:	601c      	str	r4, [r3, #0]
 8005812:	9b06      	ldr	r3, [sp, #24]
 8005814:	601d      	str	r5, [r3, #0]
 8005816:	e69b      	b.n	8005550 <__gethex+0x124>
 8005818:	4299      	cmp	r1, r3
 800581a:	f843 cc04 	str.w	ip, [r3, #-4]
 800581e:	d8d8      	bhi.n	80057d2 <__gethex+0x3a6>
 8005820:	68a3      	ldr	r3, [r4, #8]
 8005822:	459b      	cmp	fp, r3
 8005824:	db17      	blt.n	8005856 <__gethex+0x42a>
 8005826:	6861      	ldr	r1, [r4, #4]
 8005828:	9802      	ldr	r0, [sp, #8]
 800582a:	3101      	adds	r1, #1
 800582c:	f000 f928 	bl	8005a80 <_Balloc>
 8005830:	4681      	mov	r9, r0
 8005832:	b918      	cbnz	r0, 800583c <__gethex+0x410>
 8005834:	4602      	mov	r2, r0
 8005836:	2184      	movs	r1, #132	; 0x84
 8005838:	4b19      	ldr	r3, [pc, #100]	; (80058a0 <__gethex+0x474>)
 800583a:	e6ac      	b.n	8005596 <__gethex+0x16a>
 800583c:	6922      	ldr	r2, [r4, #16]
 800583e:	f104 010c 	add.w	r1, r4, #12
 8005842:	3202      	adds	r2, #2
 8005844:	0092      	lsls	r2, r2, #2
 8005846:	300c      	adds	r0, #12
 8005848:	f7fd f98c 	bl	8002b64 <memcpy>
 800584c:	4621      	mov	r1, r4
 800584e:	9802      	ldr	r0, [sp, #8]
 8005850:	f000 f956 	bl	8005b00 <_Bfree>
 8005854:	464c      	mov	r4, r9
 8005856:	6923      	ldr	r3, [r4, #16]
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	6122      	str	r2, [r4, #16]
 800585c:	2201      	movs	r2, #1
 800585e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005862:	615a      	str	r2, [r3, #20]
 8005864:	e7bd      	b.n	80057e2 <__gethex+0x3b6>
 8005866:	6922      	ldr	r2, [r4, #16]
 8005868:	455a      	cmp	r2, fp
 800586a:	dd0b      	ble.n	8005884 <__gethex+0x458>
 800586c:	2101      	movs	r1, #1
 800586e:	4620      	mov	r0, r4
 8005870:	f7ff fd74 	bl	800535c <rshift>
 8005874:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005878:	3501      	adds	r5, #1
 800587a:	42ab      	cmp	r3, r5
 800587c:	f6ff aed5 	blt.w	800562a <__gethex+0x1fe>
 8005880:	2701      	movs	r7, #1
 8005882:	e7c2      	b.n	800580a <__gethex+0x3de>
 8005884:	f016 061f 	ands.w	r6, r6, #31
 8005888:	d0fa      	beq.n	8005880 <__gethex+0x454>
 800588a:	449a      	add	sl, r3
 800588c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005890:	f000 f9ec 	bl	8005c6c <__hi0bits>
 8005894:	f1c6 0620 	rsb	r6, r6, #32
 8005898:	42b0      	cmp	r0, r6
 800589a:	dbe7      	blt.n	800586c <__gethex+0x440>
 800589c:	e7f0      	b.n	8005880 <__gethex+0x454>
 800589e:	bf00      	nop
 80058a0:	08007644 	.word	0x08007644

080058a4 <L_shift>:
 80058a4:	f1c2 0208 	rsb	r2, r2, #8
 80058a8:	0092      	lsls	r2, r2, #2
 80058aa:	b570      	push	{r4, r5, r6, lr}
 80058ac:	f1c2 0620 	rsb	r6, r2, #32
 80058b0:	6843      	ldr	r3, [r0, #4]
 80058b2:	6804      	ldr	r4, [r0, #0]
 80058b4:	fa03 f506 	lsl.w	r5, r3, r6
 80058b8:	432c      	orrs	r4, r5
 80058ba:	40d3      	lsrs	r3, r2
 80058bc:	6004      	str	r4, [r0, #0]
 80058be:	f840 3f04 	str.w	r3, [r0, #4]!
 80058c2:	4288      	cmp	r0, r1
 80058c4:	d3f4      	bcc.n	80058b0 <L_shift+0xc>
 80058c6:	bd70      	pop	{r4, r5, r6, pc}

080058c8 <__match>:
 80058c8:	b530      	push	{r4, r5, lr}
 80058ca:	6803      	ldr	r3, [r0, #0]
 80058cc:	3301      	adds	r3, #1
 80058ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058d2:	b914      	cbnz	r4, 80058da <__match+0x12>
 80058d4:	6003      	str	r3, [r0, #0]
 80058d6:	2001      	movs	r0, #1
 80058d8:	bd30      	pop	{r4, r5, pc}
 80058da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80058e2:	2d19      	cmp	r5, #25
 80058e4:	bf98      	it	ls
 80058e6:	3220      	addls	r2, #32
 80058e8:	42a2      	cmp	r2, r4
 80058ea:	d0f0      	beq.n	80058ce <__match+0x6>
 80058ec:	2000      	movs	r0, #0
 80058ee:	e7f3      	b.n	80058d8 <__match+0x10>

080058f0 <__hexnan>:
 80058f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f4:	2500      	movs	r5, #0
 80058f6:	680b      	ldr	r3, [r1, #0]
 80058f8:	4682      	mov	sl, r0
 80058fa:	115e      	asrs	r6, r3, #5
 80058fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005900:	f013 031f 	ands.w	r3, r3, #31
 8005904:	bf18      	it	ne
 8005906:	3604      	addne	r6, #4
 8005908:	1f37      	subs	r7, r6, #4
 800590a:	4690      	mov	r8, r2
 800590c:	46b9      	mov	r9, r7
 800590e:	463c      	mov	r4, r7
 8005910:	46ab      	mov	fp, r5
 8005912:	b087      	sub	sp, #28
 8005914:	6801      	ldr	r1, [r0, #0]
 8005916:	9301      	str	r3, [sp, #4]
 8005918:	f846 5c04 	str.w	r5, [r6, #-4]
 800591c:	9502      	str	r5, [sp, #8]
 800591e:	784a      	ldrb	r2, [r1, #1]
 8005920:	1c4b      	adds	r3, r1, #1
 8005922:	9303      	str	r3, [sp, #12]
 8005924:	b342      	cbz	r2, 8005978 <__hexnan+0x88>
 8005926:	4610      	mov	r0, r2
 8005928:	9105      	str	r1, [sp, #20]
 800592a:	9204      	str	r2, [sp, #16]
 800592c:	f7ff fd69 	bl	8005402 <__hexdig_fun>
 8005930:	2800      	cmp	r0, #0
 8005932:	d14f      	bne.n	80059d4 <__hexnan+0xe4>
 8005934:	9a04      	ldr	r2, [sp, #16]
 8005936:	9905      	ldr	r1, [sp, #20]
 8005938:	2a20      	cmp	r2, #32
 800593a:	d818      	bhi.n	800596e <__hexnan+0x7e>
 800593c:	9b02      	ldr	r3, [sp, #8]
 800593e:	459b      	cmp	fp, r3
 8005940:	dd13      	ble.n	800596a <__hexnan+0x7a>
 8005942:	454c      	cmp	r4, r9
 8005944:	d206      	bcs.n	8005954 <__hexnan+0x64>
 8005946:	2d07      	cmp	r5, #7
 8005948:	dc04      	bgt.n	8005954 <__hexnan+0x64>
 800594a:	462a      	mov	r2, r5
 800594c:	4649      	mov	r1, r9
 800594e:	4620      	mov	r0, r4
 8005950:	f7ff ffa8 	bl	80058a4 <L_shift>
 8005954:	4544      	cmp	r4, r8
 8005956:	d950      	bls.n	80059fa <__hexnan+0x10a>
 8005958:	2300      	movs	r3, #0
 800595a:	f1a4 0904 	sub.w	r9, r4, #4
 800595e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005962:	461d      	mov	r5, r3
 8005964:	464c      	mov	r4, r9
 8005966:	f8cd b008 	str.w	fp, [sp, #8]
 800596a:	9903      	ldr	r1, [sp, #12]
 800596c:	e7d7      	b.n	800591e <__hexnan+0x2e>
 800596e:	2a29      	cmp	r2, #41	; 0x29
 8005970:	d156      	bne.n	8005a20 <__hexnan+0x130>
 8005972:	3102      	adds	r1, #2
 8005974:	f8ca 1000 	str.w	r1, [sl]
 8005978:	f1bb 0f00 	cmp.w	fp, #0
 800597c:	d050      	beq.n	8005a20 <__hexnan+0x130>
 800597e:	454c      	cmp	r4, r9
 8005980:	d206      	bcs.n	8005990 <__hexnan+0xa0>
 8005982:	2d07      	cmp	r5, #7
 8005984:	dc04      	bgt.n	8005990 <__hexnan+0xa0>
 8005986:	462a      	mov	r2, r5
 8005988:	4649      	mov	r1, r9
 800598a:	4620      	mov	r0, r4
 800598c:	f7ff ff8a 	bl	80058a4 <L_shift>
 8005990:	4544      	cmp	r4, r8
 8005992:	d934      	bls.n	80059fe <__hexnan+0x10e>
 8005994:	4623      	mov	r3, r4
 8005996:	f1a8 0204 	sub.w	r2, r8, #4
 800599a:	f853 1b04 	ldr.w	r1, [r3], #4
 800599e:	429f      	cmp	r7, r3
 80059a0:	f842 1f04 	str.w	r1, [r2, #4]!
 80059a4:	d2f9      	bcs.n	800599a <__hexnan+0xaa>
 80059a6:	1b3b      	subs	r3, r7, r4
 80059a8:	f023 0303 	bic.w	r3, r3, #3
 80059ac:	3304      	adds	r3, #4
 80059ae:	3401      	adds	r4, #1
 80059b0:	3e03      	subs	r6, #3
 80059b2:	42b4      	cmp	r4, r6
 80059b4:	bf88      	it	hi
 80059b6:	2304      	movhi	r3, #4
 80059b8:	2200      	movs	r2, #0
 80059ba:	4443      	add	r3, r8
 80059bc:	f843 2b04 	str.w	r2, [r3], #4
 80059c0:	429f      	cmp	r7, r3
 80059c2:	d2fb      	bcs.n	80059bc <__hexnan+0xcc>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	b91b      	cbnz	r3, 80059d0 <__hexnan+0xe0>
 80059c8:	4547      	cmp	r7, r8
 80059ca:	d127      	bne.n	8005a1c <__hexnan+0x12c>
 80059cc:	2301      	movs	r3, #1
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	2005      	movs	r0, #5
 80059d2:	e026      	b.n	8005a22 <__hexnan+0x132>
 80059d4:	3501      	adds	r5, #1
 80059d6:	2d08      	cmp	r5, #8
 80059d8:	f10b 0b01 	add.w	fp, fp, #1
 80059dc:	dd06      	ble.n	80059ec <__hexnan+0xfc>
 80059de:	4544      	cmp	r4, r8
 80059e0:	d9c3      	bls.n	800596a <__hexnan+0x7a>
 80059e2:	2300      	movs	r3, #0
 80059e4:	2501      	movs	r5, #1
 80059e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80059ea:	3c04      	subs	r4, #4
 80059ec:	6822      	ldr	r2, [r4, #0]
 80059ee:	f000 000f 	and.w	r0, r0, #15
 80059f2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80059f6:	6022      	str	r2, [r4, #0]
 80059f8:	e7b7      	b.n	800596a <__hexnan+0x7a>
 80059fa:	2508      	movs	r5, #8
 80059fc:	e7b5      	b.n	800596a <__hexnan+0x7a>
 80059fe:	9b01      	ldr	r3, [sp, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0df      	beq.n	80059c4 <__hexnan+0xd4>
 8005a04:	f04f 32ff 	mov.w	r2, #4294967295
 8005a08:	f1c3 0320 	rsb	r3, r3, #32
 8005a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005a14:	401a      	ands	r2, r3
 8005a16:	f846 2c04 	str.w	r2, [r6, #-4]
 8005a1a:	e7d3      	b.n	80059c4 <__hexnan+0xd4>
 8005a1c:	3f04      	subs	r7, #4
 8005a1e:	e7d1      	b.n	80059c4 <__hexnan+0xd4>
 8005a20:	2004      	movs	r0, #4
 8005a22:	b007      	add	sp, #28
 8005a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005a28 <_localeconv_r>:
 8005a28:	4800      	ldr	r0, [pc, #0]	; (8005a2c <_localeconv_r+0x4>)
 8005a2a:	4770      	bx	lr
 8005a2c:	20000164 	.word	0x20000164

08005a30 <malloc>:
 8005a30:	4b02      	ldr	r3, [pc, #8]	; (8005a3c <malloc+0xc>)
 8005a32:	4601      	mov	r1, r0
 8005a34:	6818      	ldr	r0, [r3, #0]
 8005a36:	f000 bd35 	b.w	80064a4 <_malloc_r>
 8005a3a:	bf00      	nop
 8005a3c:	2000000c 	.word	0x2000000c

08005a40 <__ascii_mbtowc>:
 8005a40:	b082      	sub	sp, #8
 8005a42:	b901      	cbnz	r1, 8005a46 <__ascii_mbtowc+0x6>
 8005a44:	a901      	add	r1, sp, #4
 8005a46:	b142      	cbz	r2, 8005a5a <__ascii_mbtowc+0x1a>
 8005a48:	b14b      	cbz	r3, 8005a5e <__ascii_mbtowc+0x1e>
 8005a4a:	7813      	ldrb	r3, [r2, #0]
 8005a4c:	600b      	str	r3, [r1, #0]
 8005a4e:	7812      	ldrb	r2, [r2, #0]
 8005a50:	1e10      	subs	r0, r2, #0
 8005a52:	bf18      	it	ne
 8005a54:	2001      	movne	r0, #1
 8005a56:	b002      	add	sp, #8
 8005a58:	4770      	bx	lr
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	e7fb      	b.n	8005a56 <__ascii_mbtowc+0x16>
 8005a5e:	f06f 0001 	mvn.w	r0, #1
 8005a62:	e7f8      	b.n	8005a56 <__ascii_mbtowc+0x16>

08005a64 <memchr>:
 8005a64:	4603      	mov	r3, r0
 8005a66:	b510      	push	{r4, lr}
 8005a68:	b2c9      	uxtb	r1, r1
 8005a6a:	4402      	add	r2, r0
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	d101      	bne.n	8005a76 <memchr+0x12>
 8005a72:	2000      	movs	r0, #0
 8005a74:	e003      	b.n	8005a7e <memchr+0x1a>
 8005a76:	7804      	ldrb	r4, [r0, #0]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	428c      	cmp	r4, r1
 8005a7c:	d1f6      	bne.n	8005a6c <memchr+0x8>
 8005a7e:	bd10      	pop	{r4, pc}

08005a80 <_Balloc>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a84:	4604      	mov	r4, r0
 8005a86:	460d      	mov	r5, r1
 8005a88:	b976      	cbnz	r6, 8005aa8 <_Balloc+0x28>
 8005a8a:	2010      	movs	r0, #16
 8005a8c:	f7ff ffd0 	bl	8005a30 <malloc>
 8005a90:	4602      	mov	r2, r0
 8005a92:	6260      	str	r0, [r4, #36]	; 0x24
 8005a94:	b920      	cbnz	r0, 8005aa0 <_Balloc+0x20>
 8005a96:	2166      	movs	r1, #102	; 0x66
 8005a98:	4b17      	ldr	r3, [pc, #92]	; (8005af8 <_Balloc+0x78>)
 8005a9a:	4818      	ldr	r0, [pc, #96]	; (8005afc <_Balloc+0x7c>)
 8005a9c:	f000 feee 	bl	800687c <__assert_func>
 8005aa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005aa4:	6006      	str	r6, [r0, #0]
 8005aa6:	60c6      	str	r6, [r0, #12]
 8005aa8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005aaa:	68f3      	ldr	r3, [r6, #12]
 8005aac:	b183      	cbz	r3, 8005ad0 <_Balloc+0x50>
 8005aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ab6:	b9b8      	cbnz	r0, 8005ae8 <_Balloc+0x68>
 8005ab8:	2101      	movs	r1, #1
 8005aba:	fa01 f605 	lsl.w	r6, r1, r5
 8005abe:	1d72      	adds	r2, r6, #5
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	0092      	lsls	r2, r2, #2
 8005ac4:	f000 fc94 	bl	80063f0 <_calloc_r>
 8005ac8:	b160      	cbz	r0, 8005ae4 <_Balloc+0x64>
 8005aca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ace:	e00e      	b.n	8005aee <_Balloc+0x6e>
 8005ad0:	2221      	movs	r2, #33	; 0x21
 8005ad2:	2104      	movs	r1, #4
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f000 fc8b 	bl	80063f0 <_calloc_r>
 8005ada:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005adc:	60f0      	str	r0, [r6, #12]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e4      	bne.n	8005aae <_Balloc+0x2e>
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	6802      	ldr	r2, [r0, #0]
 8005aea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005aee:	2300      	movs	r3, #0
 8005af0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005af4:	e7f7      	b.n	8005ae6 <_Balloc+0x66>
 8005af6:	bf00      	nop
 8005af8:	080075ce 	.word	0x080075ce
 8005afc:	080076d4 	.word	0x080076d4

08005b00 <_Bfree>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b04:	4605      	mov	r5, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	b976      	cbnz	r6, 8005b28 <_Bfree+0x28>
 8005b0a:	2010      	movs	r0, #16
 8005b0c:	f7ff ff90 	bl	8005a30 <malloc>
 8005b10:	4602      	mov	r2, r0
 8005b12:	6268      	str	r0, [r5, #36]	; 0x24
 8005b14:	b920      	cbnz	r0, 8005b20 <_Bfree+0x20>
 8005b16:	218a      	movs	r1, #138	; 0x8a
 8005b18:	4b08      	ldr	r3, [pc, #32]	; (8005b3c <_Bfree+0x3c>)
 8005b1a:	4809      	ldr	r0, [pc, #36]	; (8005b40 <_Bfree+0x40>)
 8005b1c:	f000 feae 	bl	800687c <__assert_func>
 8005b20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b24:	6006      	str	r6, [r0, #0]
 8005b26:	60c6      	str	r6, [r0, #12]
 8005b28:	b13c      	cbz	r4, 8005b3a <_Bfree+0x3a>
 8005b2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b2c:	6862      	ldr	r2, [r4, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b34:	6021      	str	r1, [r4, #0]
 8005b36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b3a:	bd70      	pop	{r4, r5, r6, pc}
 8005b3c:	080075ce 	.word	0x080075ce
 8005b40:	080076d4 	.word	0x080076d4

08005b44 <__multadd>:
 8005b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b48:	4698      	mov	r8, r3
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	690e      	ldr	r6, [r1, #16]
 8005b50:	4607      	mov	r7, r0
 8005b52:	f101 0014 	add.w	r0, r1, #20
 8005b56:	6805      	ldr	r5, [r0, #0]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	b2a9      	uxth	r1, r5
 8005b5c:	fb02 8101 	mla	r1, r2, r1, r8
 8005b60:	0c2d      	lsrs	r5, r5, #16
 8005b62:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005b66:	fb02 c505 	mla	r5, r2, r5, ip
 8005b6a:	b289      	uxth	r1, r1
 8005b6c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005b70:	429e      	cmp	r6, r3
 8005b72:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005b76:	f840 1b04 	str.w	r1, [r0], #4
 8005b7a:	dcec      	bgt.n	8005b56 <__multadd+0x12>
 8005b7c:	f1b8 0f00 	cmp.w	r8, #0
 8005b80:	d022      	beq.n	8005bc8 <__multadd+0x84>
 8005b82:	68a3      	ldr	r3, [r4, #8]
 8005b84:	42b3      	cmp	r3, r6
 8005b86:	dc19      	bgt.n	8005bbc <__multadd+0x78>
 8005b88:	6861      	ldr	r1, [r4, #4]
 8005b8a:	4638      	mov	r0, r7
 8005b8c:	3101      	adds	r1, #1
 8005b8e:	f7ff ff77 	bl	8005a80 <_Balloc>
 8005b92:	4605      	mov	r5, r0
 8005b94:	b928      	cbnz	r0, 8005ba2 <__multadd+0x5e>
 8005b96:	4602      	mov	r2, r0
 8005b98:	21b5      	movs	r1, #181	; 0xb5
 8005b9a:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <__multadd+0x8c>)
 8005b9c:	480d      	ldr	r0, [pc, #52]	; (8005bd4 <__multadd+0x90>)
 8005b9e:	f000 fe6d 	bl	800687c <__assert_func>
 8005ba2:	6922      	ldr	r2, [r4, #16]
 8005ba4:	f104 010c 	add.w	r1, r4, #12
 8005ba8:	3202      	adds	r2, #2
 8005baa:	0092      	lsls	r2, r2, #2
 8005bac:	300c      	adds	r0, #12
 8005bae:	f7fc ffd9 	bl	8002b64 <memcpy>
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	f7ff ffa3 	bl	8005b00 <_Bfree>
 8005bba:	462c      	mov	r4, r5
 8005bbc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005bc0:	3601      	adds	r6, #1
 8005bc2:	f8c3 8014 	str.w	r8, [r3, #20]
 8005bc6:	6126      	str	r6, [r4, #16]
 8005bc8:	4620      	mov	r0, r4
 8005bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bce:	bf00      	nop
 8005bd0:	08007644 	.word	0x08007644
 8005bd4:	080076d4 	.word	0x080076d4

08005bd8 <__s2b>:
 8005bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bdc:	4615      	mov	r5, r2
 8005bde:	2209      	movs	r2, #9
 8005be0:	461f      	mov	r7, r3
 8005be2:	3308      	adds	r3, #8
 8005be4:	460c      	mov	r4, r1
 8005be6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bea:	4606      	mov	r6, r0
 8005bec:	2201      	movs	r2, #1
 8005bee:	2100      	movs	r1, #0
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	db09      	blt.n	8005c08 <__s2b+0x30>
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	f7ff ff43 	bl	8005a80 <_Balloc>
 8005bfa:	b940      	cbnz	r0, 8005c0e <__s2b+0x36>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	21ce      	movs	r1, #206	; 0xce
 8005c00:	4b18      	ldr	r3, [pc, #96]	; (8005c64 <__s2b+0x8c>)
 8005c02:	4819      	ldr	r0, [pc, #100]	; (8005c68 <__s2b+0x90>)
 8005c04:	f000 fe3a 	bl	800687c <__assert_func>
 8005c08:	0052      	lsls	r2, r2, #1
 8005c0a:	3101      	adds	r1, #1
 8005c0c:	e7f0      	b.n	8005bf0 <__s2b+0x18>
 8005c0e:	9b08      	ldr	r3, [sp, #32]
 8005c10:	2d09      	cmp	r5, #9
 8005c12:	6143      	str	r3, [r0, #20]
 8005c14:	f04f 0301 	mov.w	r3, #1
 8005c18:	6103      	str	r3, [r0, #16]
 8005c1a:	dd16      	ble.n	8005c4a <__s2b+0x72>
 8005c1c:	f104 0909 	add.w	r9, r4, #9
 8005c20:	46c8      	mov	r8, r9
 8005c22:	442c      	add	r4, r5
 8005c24:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005c28:	4601      	mov	r1, r0
 8005c2a:	220a      	movs	r2, #10
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	3b30      	subs	r3, #48	; 0x30
 8005c30:	f7ff ff88 	bl	8005b44 <__multadd>
 8005c34:	45a0      	cmp	r8, r4
 8005c36:	d1f5      	bne.n	8005c24 <__s2b+0x4c>
 8005c38:	f1a5 0408 	sub.w	r4, r5, #8
 8005c3c:	444c      	add	r4, r9
 8005c3e:	1b2d      	subs	r5, r5, r4
 8005c40:	1963      	adds	r3, r4, r5
 8005c42:	42bb      	cmp	r3, r7
 8005c44:	db04      	blt.n	8005c50 <__s2b+0x78>
 8005c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c4a:	2509      	movs	r5, #9
 8005c4c:	340a      	adds	r4, #10
 8005c4e:	e7f6      	b.n	8005c3e <__s2b+0x66>
 8005c50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005c54:	4601      	mov	r1, r0
 8005c56:	220a      	movs	r2, #10
 8005c58:	4630      	mov	r0, r6
 8005c5a:	3b30      	subs	r3, #48	; 0x30
 8005c5c:	f7ff ff72 	bl	8005b44 <__multadd>
 8005c60:	e7ee      	b.n	8005c40 <__s2b+0x68>
 8005c62:	bf00      	nop
 8005c64:	08007644 	.word	0x08007644
 8005c68:	080076d4 	.word	0x080076d4

08005c6c <__hi0bits>:
 8005c6c:	0c02      	lsrs	r2, r0, #16
 8005c6e:	0412      	lsls	r2, r2, #16
 8005c70:	4603      	mov	r3, r0
 8005c72:	b9ca      	cbnz	r2, 8005ca8 <__hi0bits+0x3c>
 8005c74:	0403      	lsls	r3, r0, #16
 8005c76:	2010      	movs	r0, #16
 8005c78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005c7c:	bf04      	itt	eq
 8005c7e:	021b      	lsleq	r3, r3, #8
 8005c80:	3008      	addeq	r0, #8
 8005c82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005c86:	bf04      	itt	eq
 8005c88:	011b      	lsleq	r3, r3, #4
 8005c8a:	3004      	addeq	r0, #4
 8005c8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005c90:	bf04      	itt	eq
 8005c92:	009b      	lsleq	r3, r3, #2
 8005c94:	3002      	addeq	r0, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	db05      	blt.n	8005ca6 <__hi0bits+0x3a>
 8005c9a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005c9e:	f100 0001 	add.w	r0, r0, #1
 8005ca2:	bf08      	it	eq
 8005ca4:	2020      	moveq	r0, #32
 8005ca6:	4770      	bx	lr
 8005ca8:	2000      	movs	r0, #0
 8005caa:	e7e5      	b.n	8005c78 <__hi0bits+0xc>

08005cac <__lo0bits>:
 8005cac:	6803      	ldr	r3, [r0, #0]
 8005cae:	4602      	mov	r2, r0
 8005cb0:	f013 0007 	ands.w	r0, r3, #7
 8005cb4:	d00b      	beq.n	8005cce <__lo0bits+0x22>
 8005cb6:	07d9      	lsls	r1, r3, #31
 8005cb8:	d422      	bmi.n	8005d00 <__lo0bits+0x54>
 8005cba:	0798      	lsls	r0, r3, #30
 8005cbc:	bf49      	itett	mi
 8005cbe:	085b      	lsrmi	r3, r3, #1
 8005cc0:	089b      	lsrpl	r3, r3, #2
 8005cc2:	2001      	movmi	r0, #1
 8005cc4:	6013      	strmi	r3, [r2, #0]
 8005cc6:	bf5c      	itt	pl
 8005cc8:	2002      	movpl	r0, #2
 8005cca:	6013      	strpl	r3, [r2, #0]
 8005ccc:	4770      	bx	lr
 8005cce:	b299      	uxth	r1, r3
 8005cd0:	b909      	cbnz	r1, 8005cd6 <__lo0bits+0x2a>
 8005cd2:	2010      	movs	r0, #16
 8005cd4:	0c1b      	lsrs	r3, r3, #16
 8005cd6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005cda:	bf04      	itt	eq
 8005cdc:	0a1b      	lsreq	r3, r3, #8
 8005cde:	3008      	addeq	r0, #8
 8005ce0:	0719      	lsls	r1, r3, #28
 8005ce2:	bf04      	itt	eq
 8005ce4:	091b      	lsreq	r3, r3, #4
 8005ce6:	3004      	addeq	r0, #4
 8005ce8:	0799      	lsls	r1, r3, #30
 8005cea:	bf04      	itt	eq
 8005cec:	089b      	lsreq	r3, r3, #2
 8005cee:	3002      	addeq	r0, #2
 8005cf0:	07d9      	lsls	r1, r3, #31
 8005cf2:	d403      	bmi.n	8005cfc <__lo0bits+0x50>
 8005cf4:	085b      	lsrs	r3, r3, #1
 8005cf6:	f100 0001 	add.w	r0, r0, #1
 8005cfa:	d003      	beq.n	8005d04 <__lo0bits+0x58>
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	4770      	bx	lr
 8005d00:	2000      	movs	r0, #0
 8005d02:	4770      	bx	lr
 8005d04:	2020      	movs	r0, #32
 8005d06:	4770      	bx	lr

08005d08 <__i2b>:
 8005d08:	b510      	push	{r4, lr}
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	f7ff feb7 	bl	8005a80 <_Balloc>
 8005d12:	4602      	mov	r2, r0
 8005d14:	b928      	cbnz	r0, 8005d22 <__i2b+0x1a>
 8005d16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005d1a:	4b04      	ldr	r3, [pc, #16]	; (8005d2c <__i2b+0x24>)
 8005d1c:	4804      	ldr	r0, [pc, #16]	; (8005d30 <__i2b+0x28>)
 8005d1e:	f000 fdad 	bl	800687c <__assert_func>
 8005d22:	2301      	movs	r3, #1
 8005d24:	6144      	str	r4, [r0, #20]
 8005d26:	6103      	str	r3, [r0, #16]
 8005d28:	bd10      	pop	{r4, pc}
 8005d2a:	bf00      	nop
 8005d2c:	08007644 	.word	0x08007644
 8005d30:	080076d4 	.word	0x080076d4

08005d34 <__multiply>:
 8005d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d38:	4614      	mov	r4, r2
 8005d3a:	690a      	ldr	r2, [r1, #16]
 8005d3c:	6923      	ldr	r3, [r4, #16]
 8005d3e:	460d      	mov	r5, r1
 8005d40:	429a      	cmp	r2, r3
 8005d42:	bfbe      	ittt	lt
 8005d44:	460b      	movlt	r3, r1
 8005d46:	4625      	movlt	r5, r4
 8005d48:	461c      	movlt	r4, r3
 8005d4a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005d4e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005d52:	68ab      	ldr	r3, [r5, #8]
 8005d54:	6869      	ldr	r1, [r5, #4]
 8005d56:	eb0a 0709 	add.w	r7, sl, r9
 8005d5a:	42bb      	cmp	r3, r7
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	bfb8      	it	lt
 8005d60:	3101      	addlt	r1, #1
 8005d62:	f7ff fe8d 	bl	8005a80 <_Balloc>
 8005d66:	b930      	cbnz	r0, 8005d76 <__multiply+0x42>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	f240 115d 	movw	r1, #349	; 0x15d
 8005d6e:	4b41      	ldr	r3, [pc, #260]	; (8005e74 <__multiply+0x140>)
 8005d70:	4841      	ldr	r0, [pc, #260]	; (8005e78 <__multiply+0x144>)
 8005d72:	f000 fd83 	bl	800687c <__assert_func>
 8005d76:	f100 0614 	add.w	r6, r0, #20
 8005d7a:	4633      	mov	r3, r6
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005d82:	4543      	cmp	r3, r8
 8005d84:	d31e      	bcc.n	8005dc4 <__multiply+0x90>
 8005d86:	f105 0c14 	add.w	ip, r5, #20
 8005d8a:	f104 0314 	add.w	r3, r4, #20
 8005d8e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005d92:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005d96:	9202      	str	r2, [sp, #8]
 8005d98:	ebac 0205 	sub.w	r2, ip, r5
 8005d9c:	3a15      	subs	r2, #21
 8005d9e:	f022 0203 	bic.w	r2, r2, #3
 8005da2:	3204      	adds	r2, #4
 8005da4:	f105 0115 	add.w	r1, r5, #21
 8005da8:	458c      	cmp	ip, r1
 8005daa:	bf38      	it	cc
 8005dac:	2204      	movcc	r2, #4
 8005dae:	9201      	str	r2, [sp, #4]
 8005db0:	9a02      	ldr	r2, [sp, #8]
 8005db2:	9303      	str	r3, [sp, #12]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d808      	bhi.n	8005dca <__multiply+0x96>
 8005db8:	2f00      	cmp	r7, #0
 8005dba:	dc55      	bgt.n	8005e68 <__multiply+0x134>
 8005dbc:	6107      	str	r7, [r0, #16]
 8005dbe:	b005      	add	sp, #20
 8005dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc4:	f843 2b04 	str.w	r2, [r3], #4
 8005dc8:	e7db      	b.n	8005d82 <__multiply+0x4e>
 8005dca:	f8b3 a000 	ldrh.w	sl, [r3]
 8005dce:	f1ba 0f00 	cmp.w	sl, #0
 8005dd2:	d020      	beq.n	8005e16 <__multiply+0xe2>
 8005dd4:	46b1      	mov	r9, r6
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f105 0e14 	add.w	lr, r5, #20
 8005ddc:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005de0:	f8d9 b000 	ldr.w	fp, [r9]
 8005de4:	b2a1      	uxth	r1, r4
 8005de6:	fa1f fb8b 	uxth.w	fp, fp
 8005dea:	fb0a b101 	mla	r1, sl, r1, fp
 8005dee:	4411      	add	r1, r2
 8005df0:	f8d9 2000 	ldr.w	r2, [r9]
 8005df4:	0c24      	lsrs	r4, r4, #16
 8005df6:	0c12      	lsrs	r2, r2, #16
 8005df8:	fb0a 2404 	mla	r4, sl, r4, r2
 8005dfc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005e00:	b289      	uxth	r1, r1
 8005e02:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005e06:	45f4      	cmp	ip, lr
 8005e08:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005e0c:	f849 1b04 	str.w	r1, [r9], #4
 8005e10:	d8e4      	bhi.n	8005ddc <__multiply+0xa8>
 8005e12:	9901      	ldr	r1, [sp, #4]
 8005e14:	5072      	str	r2, [r6, r1]
 8005e16:	9a03      	ldr	r2, [sp, #12]
 8005e18:	3304      	adds	r3, #4
 8005e1a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005e1e:	f1b9 0f00 	cmp.w	r9, #0
 8005e22:	d01f      	beq.n	8005e64 <__multiply+0x130>
 8005e24:	46b6      	mov	lr, r6
 8005e26:	f04f 0a00 	mov.w	sl, #0
 8005e2a:	6834      	ldr	r4, [r6, #0]
 8005e2c:	f105 0114 	add.w	r1, r5, #20
 8005e30:	880a      	ldrh	r2, [r1, #0]
 8005e32:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005e36:	b2a4      	uxth	r4, r4
 8005e38:	fb09 b202 	mla	r2, r9, r2, fp
 8005e3c:	4492      	add	sl, r2
 8005e3e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005e42:	f84e 4b04 	str.w	r4, [lr], #4
 8005e46:	f851 4b04 	ldr.w	r4, [r1], #4
 8005e4a:	f8be 2000 	ldrh.w	r2, [lr]
 8005e4e:	0c24      	lsrs	r4, r4, #16
 8005e50:	fb09 2404 	mla	r4, r9, r4, r2
 8005e54:	458c      	cmp	ip, r1
 8005e56:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005e5a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005e5e:	d8e7      	bhi.n	8005e30 <__multiply+0xfc>
 8005e60:	9a01      	ldr	r2, [sp, #4]
 8005e62:	50b4      	str	r4, [r6, r2]
 8005e64:	3604      	adds	r6, #4
 8005e66:	e7a3      	b.n	8005db0 <__multiply+0x7c>
 8005e68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1a5      	bne.n	8005dbc <__multiply+0x88>
 8005e70:	3f01      	subs	r7, #1
 8005e72:	e7a1      	b.n	8005db8 <__multiply+0x84>
 8005e74:	08007644 	.word	0x08007644
 8005e78:	080076d4 	.word	0x080076d4

08005e7c <__pow5mult>:
 8005e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e80:	4615      	mov	r5, r2
 8005e82:	f012 0203 	ands.w	r2, r2, #3
 8005e86:	4606      	mov	r6, r0
 8005e88:	460f      	mov	r7, r1
 8005e8a:	d007      	beq.n	8005e9c <__pow5mult+0x20>
 8005e8c:	4c25      	ldr	r4, [pc, #148]	; (8005f24 <__pow5mult+0xa8>)
 8005e8e:	3a01      	subs	r2, #1
 8005e90:	2300      	movs	r3, #0
 8005e92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e96:	f7ff fe55 	bl	8005b44 <__multadd>
 8005e9a:	4607      	mov	r7, r0
 8005e9c:	10ad      	asrs	r5, r5, #2
 8005e9e:	d03d      	beq.n	8005f1c <__pow5mult+0xa0>
 8005ea0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ea2:	b97c      	cbnz	r4, 8005ec4 <__pow5mult+0x48>
 8005ea4:	2010      	movs	r0, #16
 8005ea6:	f7ff fdc3 	bl	8005a30 <malloc>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	6270      	str	r0, [r6, #36]	; 0x24
 8005eae:	b928      	cbnz	r0, 8005ebc <__pow5mult+0x40>
 8005eb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005eb4:	4b1c      	ldr	r3, [pc, #112]	; (8005f28 <__pow5mult+0xac>)
 8005eb6:	481d      	ldr	r0, [pc, #116]	; (8005f2c <__pow5mult+0xb0>)
 8005eb8:	f000 fce0 	bl	800687c <__assert_func>
 8005ebc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ec0:	6004      	str	r4, [r0, #0]
 8005ec2:	60c4      	str	r4, [r0, #12]
 8005ec4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005ec8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ecc:	b94c      	cbnz	r4, 8005ee2 <__pow5mult+0x66>
 8005ece:	f240 2171 	movw	r1, #625	; 0x271
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	f7ff ff18 	bl	8005d08 <__i2b>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	4604      	mov	r4, r0
 8005edc:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ee0:	6003      	str	r3, [r0, #0]
 8005ee2:	f04f 0900 	mov.w	r9, #0
 8005ee6:	07eb      	lsls	r3, r5, #31
 8005ee8:	d50a      	bpl.n	8005f00 <__pow5mult+0x84>
 8005eea:	4639      	mov	r1, r7
 8005eec:	4622      	mov	r2, r4
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f7ff ff20 	bl	8005d34 <__multiply>
 8005ef4:	4680      	mov	r8, r0
 8005ef6:	4639      	mov	r1, r7
 8005ef8:	4630      	mov	r0, r6
 8005efa:	f7ff fe01 	bl	8005b00 <_Bfree>
 8005efe:	4647      	mov	r7, r8
 8005f00:	106d      	asrs	r5, r5, #1
 8005f02:	d00b      	beq.n	8005f1c <__pow5mult+0xa0>
 8005f04:	6820      	ldr	r0, [r4, #0]
 8005f06:	b938      	cbnz	r0, 8005f18 <__pow5mult+0x9c>
 8005f08:	4622      	mov	r2, r4
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f7ff ff11 	bl	8005d34 <__multiply>
 8005f12:	6020      	str	r0, [r4, #0]
 8005f14:	f8c0 9000 	str.w	r9, [r0]
 8005f18:	4604      	mov	r4, r0
 8005f1a:	e7e4      	b.n	8005ee6 <__pow5mult+0x6a>
 8005f1c:	4638      	mov	r0, r7
 8005f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f22:	bf00      	nop
 8005f24:	08007828 	.word	0x08007828
 8005f28:	080075ce 	.word	0x080075ce
 8005f2c:	080076d4 	.word	0x080076d4

08005f30 <__lshift>:
 8005f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f34:	460c      	mov	r4, r1
 8005f36:	4607      	mov	r7, r0
 8005f38:	4691      	mov	r9, r2
 8005f3a:	6923      	ldr	r3, [r4, #16]
 8005f3c:	6849      	ldr	r1, [r1, #4]
 8005f3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f42:	68a3      	ldr	r3, [r4, #8]
 8005f44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f48:	f108 0601 	add.w	r6, r8, #1
 8005f4c:	42b3      	cmp	r3, r6
 8005f4e:	db0b      	blt.n	8005f68 <__lshift+0x38>
 8005f50:	4638      	mov	r0, r7
 8005f52:	f7ff fd95 	bl	8005a80 <_Balloc>
 8005f56:	4605      	mov	r5, r0
 8005f58:	b948      	cbnz	r0, 8005f6e <__lshift+0x3e>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005f60:	4b27      	ldr	r3, [pc, #156]	; (8006000 <__lshift+0xd0>)
 8005f62:	4828      	ldr	r0, [pc, #160]	; (8006004 <__lshift+0xd4>)
 8005f64:	f000 fc8a 	bl	800687c <__assert_func>
 8005f68:	3101      	adds	r1, #1
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	e7ee      	b.n	8005f4c <__lshift+0x1c>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f100 0114 	add.w	r1, r0, #20
 8005f74:	f100 0210 	add.w	r2, r0, #16
 8005f78:	4618      	mov	r0, r3
 8005f7a:	4553      	cmp	r3, sl
 8005f7c:	db33      	blt.n	8005fe6 <__lshift+0xb6>
 8005f7e:	6920      	ldr	r0, [r4, #16]
 8005f80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f84:	f104 0314 	add.w	r3, r4, #20
 8005f88:	f019 091f 	ands.w	r9, r9, #31
 8005f8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f94:	d02b      	beq.n	8005fee <__lshift+0xbe>
 8005f96:	468a      	mov	sl, r1
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f1c9 0e20 	rsb	lr, r9, #32
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	fa00 f009 	lsl.w	r0, r0, r9
 8005fa4:	4302      	orrs	r2, r0
 8005fa6:	f84a 2b04 	str.w	r2, [sl], #4
 8005faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fae:	459c      	cmp	ip, r3
 8005fb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8005fb4:	d8f3      	bhi.n	8005f9e <__lshift+0x6e>
 8005fb6:	ebac 0304 	sub.w	r3, ip, r4
 8005fba:	3b15      	subs	r3, #21
 8005fbc:	f023 0303 	bic.w	r3, r3, #3
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	f104 0015 	add.w	r0, r4, #21
 8005fc6:	4584      	cmp	ip, r0
 8005fc8:	bf38      	it	cc
 8005fca:	2304      	movcc	r3, #4
 8005fcc:	50ca      	str	r2, [r1, r3]
 8005fce:	b10a      	cbz	r2, 8005fd4 <__lshift+0xa4>
 8005fd0:	f108 0602 	add.w	r6, r8, #2
 8005fd4:	3e01      	subs	r6, #1
 8005fd6:	4638      	mov	r0, r7
 8005fd8:	4621      	mov	r1, r4
 8005fda:	612e      	str	r6, [r5, #16]
 8005fdc:	f7ff fd90 	bl	8005b00 <_Bfree>
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005fea:	3301      	adds	r3, #1
 8005fec:	e7c5      	b.n	8005f7a <__lshift+0x4a>
 8005fee:	3904      	subs	r1, #4
 8005ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ff4:	459c      	cmp	ip, r3
 8005ff6:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ffa:	d8f9      	bhi.n	8005ff0 <__lshift+0xc0>
 8005ffc:	e7ea      	b.n	8005fd4 <__lshift+0xa4>
 8005ffe:	bf00      	nop
 8006000:	08007644 	.word	0x08007644
 8006004:	080076d4 	.word	0x080076d4

08006008 <__mcmp>:
 8006008:	4603      	mov	r3, r0
 800600a:	690a      	ldr	r2, [r1, #16]
 800600c:	6900      	ldr	r0, [r0, #16]
 800600e:	b530      	push	{r4, r5, lr}
 8006010:	1a80      	subs	r0, r0, r2
 8006012:	d10d      	bne.n	8006030 <__mcmp+0x28>
 8006014:	3314      	adds	r3, #20
 8006016:	3114      	adds	r1, #20
 8006018:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800601c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006020:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006024:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006028:	4295      	cmp	r5, r2
 800602a:	d002      	beq.n	8006032 <__mcmp+0x2a>
 800602c:	d304      	bcc.n	8006038 <__mcmp+0x30>
 800602e:	2001      	movs	r0, #1
 8006030:	bd30      	pop	{r4, r5, pc}
 8006032:	42a3      	cmp	r3, r4
 8006034:	d3f4      	bcc.n	8006020 <__mcmp+0x18>
 8006036:	e7fb      	b.n	8006030 <__mcmp+0x28>
 8006038:	f04f 30ff 	mov.w	r0, #4294967295
 800603c:	e7f8      	b.n	8006030 <__mcmp+0x28>
	...

08006040 <__mdiff>:
 8006040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006044:	460c      	mov	r4, r1
 8006046:	4606      	mov	r6, r0
 8006048:	4611      	mov	r1, r2
 800604a:	4620      	mov	r0, r4
 800604c:	4692      	mov	sl, r2
 800604e:	f7ff ffdb 	bl	8006008 <__mcmp>
 8006052:	1e05      	subs	r5, r0, #0
 8006054:	d111      	bne.n	800607a <__mdiff+0x3a>
 8006056:	4629      	mov	r1, r5
 8006058:	4630      	mov	r0, r6
 800605a:	f7ff fd11 	bl	8005a80 <_Balloc>
 800605e:	4602      	mov	r2, r0
 8006060:	b928      	cbnz	r0, 800606e <__mdiff+0x2e>
 8006062:	f240 2132 	movw	r1, #562	; 0x232
 8006066:	4b3c      	ldr	r3, [pc, #240]	; (8006158 <__mdiff+0x118>)
 8006068:	483c      	ldr	r0, [pc, #240]	; (800615c <__mdiff+0x11c>)
 800606a:	f000 fc07 	bl	800687c <__assert_func>
 800606e:	2301      	movs	r3, #1
 8006070:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006074:	4610      	mov	r0, r2
 8006076:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800607a:	bfa4      	itt	ge
 800607c:	4653      	movge	r3, sl
 800607e:	46a2      	movge	sl, r4
 8006080:	4630      	mov	r0, r6
 8006082:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006086:	bfa6      	itte	ge
 8006088:	461c      	movge	r4, r3
 800608a:	2500      	movge	r5, #0
 800608c:	2501      	movlt	r5, #1
 800608e:	f7ff fcf7 	bl	8005a80 <_Balloc>
 8006092:	4602      	mov	r2, r0
 8006094:	b918      	cbnz	r0, 800609e <__mdiff+0x5e>
 8006096:	f44f 7110 	mov.w	r1, #576	; 0x240
 800609a:	4b2f      	ldr	r3, [pc, #188]	; (8006158 <__mdiff+0x118>)
 800609c:	e7e4      	b.n	8006068 <__mdiff+0x28>
 800609e:	f100 0814 	add.w	r8, r0, #20
 80060a2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80060a6:	60c5      	str	r5, [r0, #12]
 80060a8:	f04f 0c00 	mov.w	ip, #0
 80060ac:	f10a 0514 	add.w	r5, sl, #20
 80060b0:	f10a 0010 	add.w	r0, sl, #16
 80060b4:	46c2      	mov	sl, r8
 80060b6:	6926      	ldr	r6, [r4, #16]
 80060b8:	f104 0914 	add.w	r9, r4, #20
 80060bc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80060c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80060c4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80060c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80060cc:	fa1f f18b 	uxth.w	r1, fp
 80060d0:	4461      	add	r1, ip
 80060d2:	fa1f fc83 	uxth.w	ip, r3
 80060d6:	0c1b      	lsrs	r3, r3, #16
 80060d8:	eba1 010c 	sub.w	r1, r1, ip
 80060dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80060e0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80060e4:	b289      	uxth	r1, r1
 80060e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80060ea:	454e      	cmp	r6, r9
 80060ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80060f0:	f84a 3b04 	str.w	r3, [sl], #4
 80060f4:	d8e6      	bhi.n	80060c4 <__mdiff+0x84>
 80060f6:	1b33      	subs	r3, r6, r4
 80060f8:	3b15      	subs	r3, #21
 80060fa:	f023 0303 	bic.w	r3, r3, #3
 80060fe:	3415      	adds	r4, #21
 8006100:	3304      	adds	r3, #4
 8006102:	42a6      	cmp	r6, r4
 8006104:	bf38      	it	cc
 8006106:	2304      	movcc	r3, #4
 8006108:	441d      	add	r5, r3
 800610a:	4443      	add	r3, r8
 800610c:	461e      	mov	r6, r3
 800610e:	462c      	mov	r4, r5
 8006110:	4574      	cmp	r4, lr
 8006112:	d30e      	bcc.n	8006132 <__mdiff+0xf2>
 8006114:	f10e 0103 	add.w	r1, lr, #3
 8006118:	1b49      	subs	r1, r1, r5
 800611a:	f021 0103 	bic.w	r1, r1, #3
 800611e:	3d03      	subs	r5, #3
 8006120:	45ae      	cmp	lr, r5
 8006122:	bf38      	it	cc
 8006124:	2100      	movcc	r1, #0
 8006126:	4419      	add	r1, r3
 8006128:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800612c:	b18b      	cbz	r3, 8006152 <__mdiff+0x112>
 800612e:	6117      	str	r7, [r2, #16]
 8006130:	e7a0      	b.n	8006074 <__mdiff+0x34>
 8006132:	f854 8b04 	ldr.w	r8, [r4], #4
 8006136:	fa1f f188 	uxth.w	r1, r8
 800613a:	4461      	add	r1, ip
 800613c:	1408      	asrs	r0, r1, #16
 800613e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006142:	b289      	uxth	r1, r1
 8006144:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006148:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800614c:	f846 1b04 	str.w	r1, [r6], #4
 8006150:	e7de      	b.n	8006110 <__mdiff+0xd0>
 8006152:	3f01      	subs	r7, #1
 8006154:	e7e8      	b.n	8006128 <__mdiff+0xe8>
 8006156:	bf00      	nop
 8006158:	08007644 	.word	0x08007644
 800615c:	080076d4 	.word	0x080076d4

08006160 <__ulp>:
 8006160:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <__ulp+0x48>)
 8006162:	400b      	ands	r3, r1
 8006164:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006168:	2b00      	cmp	r3, #0
 800616a:	dd02      	ble.n	8006172 <__ulp+0x12>
 800616c:	2000      	movs	r0, #0
 800616e:	4619      	mov	r1, r3
 8006170:	4770      	bx	lr
 8006172:	425b      	negs	r3, r3
 8006174:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006178:	f04f 0000 	mov.w	r0, #0
 800617c:	f04f 0100 	mov.w	r1, #0
 8006180:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006184:	da04      	bge.n	8006190 <__ulp+0x30>
 8006186:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800618a:	fa43 f102 	asr.w	r1, r3, r2
 800618e:	4770      	bx	lr
 8006190:	f1a2 0314 	sub.w	r3, r2, #20
 8006194:	2b1e      	cmp	r3, #30
 8006196:	bfd6      	itet	le
 8006198:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800619c:	2301      	movgt	r3, #1
 800619e:	fa22 f303 	lsrle.w	r3, r2, r3
 80061a2:	4618      	mov	r0, r3
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	7ff00000 	.word	0x7ff00000

080061ac <__b2d>:
 80061ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061b0:	6907      	ldr	r7, [r0, #16]
 80061b2:	f100 0914 	add.w	r9, r0, #20
 80061b6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80061ba:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80061be:	f1a7 0804 	sub.w	r8, r7, #4
 80061c2:	4630      	mov	r0, r6
 80061c4:	f7ff fd52 	bl	8005c6c <__hi0bits>
 80061c8:	f1c0 0320 	rsb	r3, r0, #32
 80061cc:	280a      	cmp	r0, #10
 80061ce:	600b      	str	r3, [r1, #0]
 80061d0:	491f      	ldr	r1, [pc, #124]	; (8006250 <__b2d+0xa4>)
 80061d2:	dc17      	bgt.n	8006204 <__b2d+0x58>
 80061d4:	45c1      	cmp	r9, r8
 80061d6:	bf28      	it	cs
 80061d8:	2200      	movcs	r2, #0
 80061da:	f1c0 0c0b 	rsb	ip, r0, #11
 80061de:	fa26 f30c 	lsr.w	r3, r6, ip
 80061e2:	bf38      	it	cc
 80061e4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80061e8:	ea43 0501 	orr.w	r5, r3, r1
 80061ec:	f100 0315 	add.w	r3, r0, #21
 80061f0:	fa06 f303 	lsl.w	r3, r6, r3
 80061f4:	fa22 f20c 	lsr.w	r2, r2, ip
 80061f8:	ea43 0402 	orr.w	r4, r3, r2
 80061fc:	4620      	mov	r0, r4
 80061fe:	4629      	mov	r1, r5
 8006200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006204:	45c1      	cmp	r9, r8
 8006206:	bf2e      	itee	cs
 8006208:	2200      	movcs	r2, #0
 800620a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800620e:	f1a7 0808 	subcc.w	r8, r7, #8
 8006212:	f1b0 030b 	subs.w	r3, r0, #11
 8006216:	d016      	beq.n	8006246 <__b2d+0x9a>
 8006218:	f1c3 0720 	rsb	r7, r3, #32
 800621c:	fa22 f107 	lsr.w	r1, r2, r7
 8006220:	45c8      	cmp	r8, r9
 8006222:	fa06 f603 	lsl.w	r6, r6, r3
 8006226:	ea46 0601 	orr.w	r6, r6, r1
 800622a:	bf94      	ite	ls
 800622c:	2100      	movls	r1, #0
 800622e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006232:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006236:	fa02 f003 	lsl.w	r0, r2, r3
 800623a:	40f9      	lsrs	r1, r7
 800623c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006240:	ea40 0401 	orr.w	r4, r0, r1
 8006244:	e7da      	b.n	80061fc <__b2d+0x50>
 8006246:	4614      	mov	r4, r2
 8006248:	ea46 0501 	orr.w	r5, r6, r1
 800624c:	e7d6      	b.n	80061fc <__b2d+0x50>
 800624e:	bf00      	nop
 8006250:	3ff00000 	.word	0x3ff00000

08006254 <__d2b>:
 8006254:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006258:	2101      	movs	r1, #1
 800625a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800625e:	4690      	mov	r8, r2
 8006260:	461d      	mov	r5, r3
 8006262:	f7ff fc0d 	bl	8005a80 <_Balloc>
 8006266:	4604      	mov	r4, r0
 8006268:	b930      	cbnz	r0, 8006278 <__d2b+0x24>
 800626a:	4602      	mov	r2, r0
 800626c:	f240 310a 	movw	r1, #778	; 0x30a
 8006270:	4b24      	ldr	r3, [pc, #144]	; (8006304 <__d2b+0xb0>)
 8006272:	4825      	ldr	r0, [pc, #148]	; (8006308 <__d2b+0xb4>)
 8006274:	f000 fb02 	bl	800687c <__assert_func>
 8006278:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800627c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006280:	bb2d      	cbnz	r5, 80062ce <__d2b+0x7a>
 8006282:	9301      	str	r3, [sp, #4]
 8006284:	f1b8 0300 	subs.w	r3, r8, #0
 8006288:	d026      	beq.n	80062d8 <__d2b+0x84>
 800628a:	4668      	mov	r0, sp
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	f7ff fd0d 	bl	8005cac <__lo0bits>
 8006292:	9900      	ldr	r1, [sp, #0]
 8006294:	b1f0      	cbz	r0, 80062d4 <__d2b+0x80>
 8006296:	9a01      	ldr	r2, [sp, #4]
 8006298:	f1c0 0320 	rsb	r3, r0, #32
 800629c:	fa02 f303 	lsl.w	r3, r2, r3
 80062a0:	430b      	orrs	r3, r1
 80062a2:	40c2      	lsrs	r2, r0
 80062a4:	6163      	str	r3, [r4, #20]
 80062a6:	9201      	str	r2, [sp, #4]
 80062a8:	9b01      	ldr	r3, [sp, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	bf14      	ite	ne
 80062ae:	2102      	movne	r1, #2
 80062b0:	2101      	moveq	r1, #1
 80062b2:	61a3      	str	r3, [r4, #24]
 80062b4:	6121      	str	r1, [r4, #16]
 80062b6:	b1c5      	cbz	r5, 80062ea <__d2b+0x96>
 80062b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80062bc:	4405      	add	r5, r0
 80062be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062c2:	603d      	str	r5, [r7, #0]
 80062c4:	6030      	str	r0, [r6, #0]
 80062c6:	4620      	mov	r0, r4
 80062c8:	b002      	add	sp, #8
 80062ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062d2:	e7d6      	b.n	8006282 <__d2b+0x2e>
 80062d4:	6161      	str	r1, [r4, #20]
 80062d6:	e7e7      	b.n	80062a8 <__d2b+0x54>
 80062d8:	a801      	add	r0, sp, #4
 80062da:	f7ff fce7 	bl	8005cac <__lo0bits>
 80062de:	2101      	movs	r1, #1
 80062e0:	9b01      	ldr	r3, [sp, #4]
 80062e2:	6121      	str	r1, [r4, #16]
 80062e4:	6163      	str	r3, [r4, #20]
 80062e6:	3020      	adds	r0, #32
 80062e8:	e7e5      	b.n	80062b6 <__d2b+0x62>
 80062ea:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80062ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80062f2:	6038      	str	r0, [r7, #0]
 80062f4:	6918      	ldr	r0, [r3, #16]
 80062f6:	f7ff fcb9 	bl	8005c6c <__hi0bits>
 80062fa:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80062fe:	6031      	str	r1, [r6, #0]
 8006300:	e7e1      	b.n	80062c6 <__d2b+0x72>
 8006302:	bf00      	nop
 8006304:	08007644 	.word	0x08007644
 8006308:	080076d4 	.word	0x080076d4

0800630c <__ratio>:
 800630c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006310:	4688      	mov	r8, r1
 8006312:	4669      	mov	r1, sp
 8006314:	4681      	mov	r9, r0
 8006316:	f7ff ff49 	bl	80061ac <__b2d>
 800631a:	460f      	mov	r7, r1
 800631c:	4604      	mov	r4, r0
 800631e:	460d      	mov	r5, r1
 8006320:	4640      	mov	r0, r8
 8006322:	a901      	add	r1, sp, #4
 8006324:	f7ff ff42 	bl	80061ac <__b2d>
 8006328:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800632c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006330:	468b      	mov	fp, r1
 8006332:	eba3 0c02 	sub.w	ip, r3, r2
 8006336:	e9dd 3200 	ldrd	r3, r2, [sp]
 800633a:	1a9b      	subs	r3, r3, r2
 800633c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006340:	2b00      	cmp	r3, #0
 8006342:	bfd5      	itete	le
 8006344:	460a      	movle	r2, r1
 8006346:	462a      	movgt	r2, r5
 8006348:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800634c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006350:	bfd8      	it	le
 8006352:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006356:	465b      	mov	r3, fp
 8006358:	4602      	mov	r2, r0
 800635a:	4639      	mov	r1, r7
 800635c:	4620      	mov	r0, r4
 800635e:	f7fa f9e5 	bl	800072c <__aeabi_ddiv>
 8006362:	b003      	add	sp, #12
 8006364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006368 <__copybits>:
 8006368:	3901      	subs	r1, #1
 800636a:	b570      	push	{r4, r5, r6, lr}
 800636c:	1149      	asrs	r1, r1, #5
 800636e:	6914      	ldr	r4, [r2, #16]
 8006370:	3101      	adds	r1, #1
 8006372:	f102 0314 	add.w	r3, r2, #20
 8006376:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800637a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800637e:	1f05      	subs	r5, r0, #4
 8006380:	42a3      	cmp	r3, r4
 8006382:	d30c      	bcc.n	800639e <__copybits+0x36>
 8006384:	1aa3      	subs	r3, r4, r2
 8006386:	3b11      	subs	r3, #17
 8006388:	f023 0303 	bic.w	r3, r3, #3
 800638c:	3211      	adds	r2, #17
 800638e:	42a2      	cmp	r2, r4
 8006390:	bf88      	it	hi
 8006392:	2300      	movhi	r3, #0
 8006394:	4418      	add	r0, r3
 8006396:	2300      	movs	r3, #0
 8006398:	4288      	cmp	r0, r1
 800639a:	d305      	bcc.n	80063a8 <__copybits+0x40>
 800639c:	bd70      	pop	{r4, r5, r6, pc}
 800639e:	f853 6b04 	ldr.w	r6, [r3], #4
 80063a2:	f845 6f04 	str.w	r6, [r5, #4]!
 80063a6:	e7eb      	b.n	8006380 <__copybits+0x18>
 80063a8:	f840 3b04 	str.w	r3, [r0], #4
 80063ac:	e7f4      	b.n	8006398 <__copybits+0x30>

080063ae <__any_on>:
 80063ae:	f100 0214 	add.w	r2, r0, #20
 80063b2:	6900      	ldr	r0, [r0, #16]
 80063b4:	114b      	asrs	r3, r1, #5
 80063b6:	4298      	cmp	r0, r3
 80063b8:	b510      	push	{r4, lr}
 80063ba:	db11      	blt.n	80063e0 <__any_on+0x32>
 80063bc:	dd0a      	ble.n	80063d4 <__any_on+0x26>
 80063be:	f011 011f 	ands.w	r1, r1, #31
 80063c2:	d007      	beq.n	80063d4 <__any_on+0x26>
 80063c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80063c8:	fa24 f001 	lsr.w	r0, r4, r1
 80063cc:	fa00 f101 	lsl.w	r1, r0, r1
 80063d0:	428c      	cmp	r4, r1
 80063d2:	d10b      	bne.n	80063ec <__any_on+0x3e>
 80063d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80063d8:	4293      	cmp	r3, r2
 80063da:	d803      	bhi.n	80063e4 <__any_on+0x36>
 80063dc:	2000      	movs	r0, #0
 80063de:	bd10      	pop	{r4, pc}
 80063e0:	4603      	mov	r3, r0
 80063e2:	e7f7      	b.n	80063d4 <__any_on+0x26>
 80063e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80063e8:	2900      	cmp	r1, #0
 80063ea:	d0f5      	beq.n	80063d8 <__any_on+0x2a>
 80063ec:	2001      	movs	r0, #1
 80063ee:	e7f6      	b.n	80063de <__any_on+0x30>

080063f0 <_calloc_r>:
 80063f0:	b538      	push	{r3, r4, r5, lr}
 80063f2:	fb02 f501 	mul.w	r5, r2, r1
 80063f6:	4629      	mov	r1, r5
 80063f8:	f000 f854 	bl	80064a4 <_malloc_r>
 80063fc:	4604      	mov	r4, r0
 80063fe:	b118      	cbz	r0, 8006408 <_calloc_r+0x18>
 8006400:	462a      	mov	r2, r5
 8006402:	2100      	movs	r1, #0
 8006404:	f7fc fbbc 	bl	8002b80 <memset>
 8006408:	4620      	mov	r0, r4
 800640a:	bd38      	pop	{r3, r4, r5, pc}

0800640c <_free_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4605      	mov	r5, r0
 8006410:	2900      	cmp	r1, #0
 8006412:	d043      	beq.n	800649c <_free_r+0x90>
 8006414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006418:	1f0c      	subs	r4, r1, #4
 800641a:	2b00      	cmp	r3, #0
 800641c:	bfb8      	it	lt
 800641e:	18e4      	addlt	r4, r4, r3
 8006420:	f000 fa76 	bl	8006910 <__malloc_lock>
 8006424:	4a1e      	ldr	r2, [pc, #120]	; (80064a0 <_free_r+0x94>)
 8006426:	6813      	ldr	r3, [r2, #0]
 8006428:	4610      	mov	r0, r2
 800642a:	b933      	cbnz	r3, 800643a <_free_r+0x2e>
 800642c:	6063      	str	r3, [r4, #4]
 800642e:	6014      	str	r4, [r2, #0]
 8006430:	4628      	mov	r0, r5
 8006432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006436:	f000 ba71 	b.w	800691c <__malloc_unlock>
 800643a:	42a3      	cmp	r3, r4
 800643c:	d90a      	bls.n	8006454 <_free_r+0x48>
 800643e:	6821      	ldr	r1, [r4, #0]
 8006440:	1862      	adds	r2, r4, r1
 8006442:	4293      	cmp	r3, r2
 8006444:	bf01      	itttt	eq
 8006446:	681a      	ldreq	r2, [r3, #0]
 8006448:	685b      	ldreq	r3, [r3, #4]
 800644a:	1852      	addeq	r2, r2, r1
 800644c:	6022      	streq	r2, [r4, #0]
 800644e:	6063      	str	r3, [r4, #4]
 8006450:	6004      	str	r4, [r0, #0]
 8006452:	e7ed      	b.n	8006430 <_free_r+0x24>
 8006454:	461a      	mov	r2, r3
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	b10b      	cbz	r3, 800645e <_free_r+0x52>
 800645a:	42a3      	cmp	r3, r4
 800645c:	d9fa      	bls.n	8006454 <_free_r+0x48>
 800645e:	6811      	ldr	r1, [r2, #0]
 8006460:	1850      	adds	r0, r2, r1
 8006462:	42a0      	cmp	r0, r4
 8006464:	d10b      	bne.n	800647e <_free_r+0x72>
 8006466:	6820      	ldr	r0, [r4, #0]
 8006468:	4401      	add	r1, r0
 800646a:	1850      	adds	r0, r2, r1
 800646c:	4283      	cmp	r3, r0
 800646e:	6011      	str	r1, [r2, #0]
 8006470:	d1de      	bne.n	8006430 <_free_r+0x24>
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	4401      	add	r1, r0
 8006478:	6011      	str	r1, [r2, #0]
 800647a:	6053      	str	r3, [r2, #4]
 800647c:	e7d8      	b.n	8006430 <_free_r+0x24>
 800647e:	d902      	bls.n	8006486 <_free_r+0x7a>
 8006480:	230c      	movs	r3, #12
 8006482:	602b      	str	r3, [r5, #0]
 8006484:	e7d4      	b.n	8006430 <_free_r+0x24>
 8006486:	6820      	ldr	r0, [r4, #0]
 8006488:	1821      	adds	r1, r4, r0
 800648a:	428b      	cmp	r3, r1
 800648c:	bf01      	itttt	eq
 800648e:	6819      	ldreq	r1, [r3, #0]
 8006490:	685b      	ldreq	r3, [r3, #4]
 8006492:	1809      	addeq	r1, r1, r0
 8006494:	6021      	streq	r1, [r4, #0]
 8006496:	6063      	str	r3, [r4, #4]
 8006498:	6054      	str	r4, [r2, #4]
 800649a:	e7c9      	b.n	8006430 <_free_r+0x24>
 800649c:	bd38      	pop	{r3, r4, r5, pc}
 800649e:	bf00      	nop
 80064a0:	20000204 	.word	0x20000204

080064a4 <_malloc_r>:
 80064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a6:	1ccd      	adds	r5, r1, #3
 80064a8:	f025 0503 	bic.w	r5, r5, #3
 80064ac:	3508      	adds	r5, #8
 80064ae:	2d0c      	cmp	r5, #12
 80064b0:	bf38      	it	cc
 80064b2:	250c      	movcc	r5, #12
 80064b4:	2d00      	cmp	r5, #0
 80064b6:	4606      	mov	r6, r0
 80064b8:	db01      	blt.n	80064be <_malloc_r+0x1a>
 80064ba:	42a9      	cmp	r1, r5
 80064bc:	d903      	bls.n	80064c6 <_malloc_r+0x22>
 80064be:	230c      	movs	r3, #12
 80064c0:	6033      	str	r3, [r6, #0]
 80064c2:	2000      	movs	r0, #0
 80064c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064c6:	f000 fa23 	bl	8006910 <__malloc_lock>
 80064ca:	4921      	ldr	r1, [pc, #132]	; (8006550 <_malloc_r+0xac>)
 80064cc:	680a      	ldr	r2, [r1, #0]
 80064ce:	4614      	mov	r4, r2
 80064d0:	b99c      	cbnz	r4, 80064fa <_malloc_r+0x56>
 80064d2:	4f20      	ldr	r7, [pc, #128]	; (8006554 <_malloc_r+0xb0>)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	b923      	cbnz	r3, 80064e2 <_malloc_r+0x3e>
 80064d8:	4621      	mov	r1, r4
 80064da:	4630      	mov	r0, r6
 80064dc:	f000 f99e 	bl	800681c <_sbrk_r>
 80064e0:	6038      	str	r0, [r7, #0]
 80064e2:	4629      	mov	r1, r5
 80064e4:	4630      	mov	r0, r6
 80064e6:	f000 f999 	bl	800681c <_sbrk_r>
 80064ea:	1c43      	adds	r3, r0, #1
 80064ec:	d123      	bne.n	8006536 <_malloc_r+0x92>
 80064ee:	230c      	movs	r3, #12
 80064f0:	4630      	mov	r0, r6
 80064f2:	6033      	str	r3, [r6, #0]
 80064f4:	f000 fa12 	bl	800691c <__malloc_unlock>
 80064f8:	e7e3      	b.n	80064c2 <_malloc_r+0x1e>
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	1b5b      	subs	r3, r3, r5
 80064fe:	d417      	bmi.n	8006530 <_malloc_r+0x8c>
 8006500:	2b0b      	cmp	r3, #11
 8006502:	d903      	bls.n	800650c <_malloc_r+0x68>
 8006504:	6023      	str	r3, [r4, #0]
 8006506:	441c      	add	r4, r3
 8006508:	6025      	str	r5, [r4, #0]
 800650a:	e004      	b.n	8006516 <_malloc_r+0x72>
 800650c:	6863      	ldr	r3, [r4, #4]
 800650e:	42a2      	cmp	r2, r4
 8006510:	bf0c      	ite	eq
 8006512:	600b      	streq	r3, [r1, #0]
 8006514:	6053      	strne	r3, [r2, #4]
 8006516:	4630      	mov	r0, r6
 8006518:	f000 fa00 	bl	800691c <__malloc_unlock>
 800651c:	f104 000b 	add.w	r0, r4, #11
 8006520:	1d23      	adds	r3, r4, #4
 8006522:	f020 0007 	bic.w	r0, r0, #7
 8006526:	1ac2      	subs	r2, r0, r3
 8006528:	d0cc      	beq.n	80064c4 <_malloc_r+0x20>
 800652a:	1a1b      	subs	r3, r3, r0
 800652c:	50a3      	str	r3, [r4, r2]
 800652e:	e7c9      	b.n	80064c4 <_malloc_r+0x20>
 8006530:	4622      	mov	r2, r4
 8006532:	6864      	ldr	r4, [r4, #4]
 8006534:	e7cc      	b.n	80064d0 <_malloc_r+0x2c>
 8006536:	1cc4      	adds	r4, r0, #3
 8006538:	f024 0403 	bic.w	r4, r4, #3
 800653c:	42a0      	cmp	r0, r4
 800653e:	d0e3      	beq.n	8006508 <_malloc_r+0x64>
 8006540:	1a21      	subs	r1, r4, r0
 8006542:	4630      	mov	r0, r6
 8006544:	f000 f96a 	bl	800681c <_sbrk_r>
 8006548:	3001      	adds	r0, #1
 800654a:	d1dd      	bne.n	8006508 <_malloc_r+0x64>
 800654c:	e7cf      	b.n	80064ee <_malloc_r+0x4a>
 800654e:	bf00      	nop
 8006550:	20000204 	.word	0x20000204
 8006554:	20000208 	.word	0x20000208

08006558 <__ssputs_r>:
 8006558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800655c:	688e      	ldr	r6, [r1, #8]
 800655e:	4682      	mov	sl, r0
 8006560:	429e      	cmp	r6, r3
 8006562:	460c      	mov	r4, r1
 8006564:	4690      	mov	r8, r2
 8006566:	461f      	mov	r7, r3
 8006568:	d838      	bhi.n	80065dc <__ssputs_r+0x84>
 800656a:	898a      	ldrh	r2, [r1, #12]
 800656c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006570:	d032      	beq.n	80065d8 <__ssputs_r+0x80>
 8006572:	6825      	ldr	r5, [r4, #0]
 8006574:	6909      	ldr	r1, [r1, #16]
 8006576:	3301      	adds	r3, #1
 8006578:	eba5 0901 	sub.w	r9, r5, r1
 800657c:	6965      	ldr	r5, [r4, #20]
 800657e:	444b      	add	r3, r9
 8006580:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006584:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006588:	106d      	asrs	r5, r5, #1
 800658a:	429d      	cmp	r5, r3
 800658c:	bf38      	it	cc
 800658e:	461d      	movcc	r5, r3
 8006590:	0553      	lsls	r3, r2, #21
 8006592:	d531      	bpl.n	80065f8 <__ssputs_r+0xa0>
 8006594:	4629      	mov	r1, r5
 8006596:	f7ff ff85 	bl	80064a4 <_malloc_r>
 800659a:	4606      	mov	r6, r0
 800659c:	b950      	cbnz	r0, 80065b4 <__ssputs_r+0x5c>
 800659e:	230c      	movs	r3, #12
 80065a0:	f04f 30ff 	mov.w	r0, #4294967295
 80065a4:	f8ca 3000 	str.w	r3, [sl]
 80065a8:	89a3      	ldrh	r3, [r4, #12]
 80065aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ae:	81a3      	strh	r3, [r4, #12]
 80065b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b4:	464a      	mov	r2, r9
 80065b6:	6921      	ldr	r1, [r4, #16]
 80065b8:	f7fc fad4 	bl	8002b64 <memcpy>
 80065bc:	89a3      	ldrh	r3, [r4, #12]
 80065be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c6:	81a3      	strh	r3, [r4, #12]
 80065c8:	6126      	str	r6, [r4, #16]
 80065ca:	444e      	add	r6, r9
 80065cc:	6026      	str	r6, [r4, #0]
 80065ce:	463e      	mov	r6, r7
 80065d0:	6165      	str	r5, [r4, #20]
 80065d2:	eba5 0509 	sub.w	r5, r5, r9
 80065d6:	60a5      	str	r5, [r4, #8]
 80065d8:	42be      	cmp	r6, r7
 80065da:	d900      	bls.n	80065de <__ssputs_r+0x86>
 80065dc:	463e      	mov	r6, r7
 80065de:	4632      	mov	r2, r6
 80065e0:	4641      	mov	r1, r8
 80065e2:	6820      	ldr	r0, [r4, #0]
 80065e4:	f000 f97a 	bl	80068dc <memmove>
 80065e8:	68a3      	ldr	r3, [r4, #8]
 80065ea:	6822      	ldr	r2, [r4, #0]
 80065ec:	1b9b      	subs	r3, r3, r6
 80065ee:	4432      	add	r2, r6
 80065f0:	2000      	movs	r0, #0
 80065f2:	60a3      	str	r3, [r4, #8]
 80065f4:	6022      	str	r2, [r4, #0]
 80065f6:	e7db      	b.n	80065b0 <__ssputs_r+0x58>
 80065f8:	462a      	mov	r2, r5
 80065fa:	f000 f995 	bl	8006928 <_realloc_r>
 80065fe:	4606      	mov	r6, r0
 8006600:	2800      	cmp	r0, #0
 8006602:	d1e1      	bne.n	80065c8 <__ssputs_r+0x70>
 8006604:	4650      	mov	r0, sl
 8006606:	6921      	ldr	r1, [r4, #16]
 8006608:	f7ff ff00 	bl	800640c <_free_r>
 800660c:	e7c7      	b.n	800659e <__ssputs_r+0x46>
	...

08006610 <_svfiprintf_r>:
 8006610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006614:	4698      	mov	r8, r3
 8006616:	898b      	ldrh	r3, [r1, #12]
 8006618:	4607      	mov	r7, r0
 800661a:	061b      	lsls	r3, r3, #24
 800661c:	460d      	mov	r5, r1
 800661e:	4614      	mov	r4, r2
 8006620:	b09d      	sub	sp, #116	; 0x74
 8006622:	d50e      	bpl.n	8006642 <_svfiprintf_r+0x32>
 8006624:	690b      	ldr	r3, [r1, #16]
 8006626:	b963      	cbnz	r3, 8006642 <_svfiprintf_r+0x32>
 8006628:	2140      	movs	r1, #64	; 0x40
 800662a:	f7ff ff3b 	bl	80064a4 <_malloc_r>
 800662e:	6028      	str	r0, [r5, #0]
 8006630:	6128      	str	r0, [r5, #16]
 8006632:	b920      	cbnz	r0, 800663e <_svfiprintf_r+0x2e>
 8006634:	230c      	movs	r3, #12
 8006636:	603b      	str	r3, [r7, #0]
 8006638:	f04f 30ff 	mov.w	r0, #4294967295
 800663c:	e0d1      	b.n	80067e2 <_svfiprintf_r+0x1d2>
 800663e:	2340      	movs	r3, #64	; 0x40
 8006640:	616b      	str	r3, [r5, #20]
 8006642:	2300      	movs	r3, #0
 8006644:	9309      	str	r3, [sp, #36]	; 0x24
 8006646:	2320      	movs	r3, #32
 8006648:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800664c:	2330      	movs	r3, #48	; 0x30
 800664e:	f04f 0901 	mov.w	r9, #1
 8006652:	f8cd 800c 	str.w	r8, [sp, #12]
 8006656:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80067fc <_svfiprintf_r+0x1ec>
 800665a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800665e:	4623      	mov	r3, r4
 8006660:	469a      	mov	sl, r3
 8006662:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006666:	b10a      	cbz	r2, 800666c <_svfiprintf_r+0x5c>
 8006668:	2a25      	cmp	r2, #37	; 0x25
 800666a:	d1f9      	bne.n	8006660 <_svfiprintf_r+0x50>
 800666c:	ebba 0b04 	subs.w	fp, sl, r4
 8006670:	d00b      	beq.n	800668a <_svfiprintf_r+0x7a>
 8006672:	465b      	mov	r3, fp
 8006674:	4622      	mov	r2, r4
 8006676:	4629      	mov	r1, r5
 8006678:	4638      	mov	r0, r7
 800667a:	f7ff ff6d 	bl	8006558 <__ssputs_r>
 800667e:	3001      	adds	r0, #1
 8006680:	f000 80aa 	beq.w	80067d8 <_svfiprintf_r+0x1c8>
 8006684:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006686:	445a      	add	r2, fp
 8006688:	9209      	str	r2, [sp, #36]	; 0x24
 800668a:	f89a 3000 	ldrb.w	r3, [sl]
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 80a2 	beq.w	80067d8 <_svfiprintf_r+0x1c8>
 8006694:	2300      	movs	r3, #0
 8006696:	f04f 32ff 	mov.w	r2, #4294967295
 800669a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800669e:	f10a 0a01 	add.w	sl, sl, #1
 80066a2:	9304      	str	r3, [sp, #16]
 80066a4:	9307      	str	r3, [sp, #28]
 80066a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066aa:	931a      	str	r3, [sp, #104]	; 0x68
 80066ac:	4654      	mov	r4, sl
 80066ae:	2205      	movs	r2, #5
 80066b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066b4:	4851      	ldr	r0, [pc, #324]	; (80067fc <_svfiprintf_r+0x1ec>)
 80066b6:	f7ff f9d5 	bl	8005a64 <memchr>
 80066ba:	9a04      	ldr	r2, [sp, #16]
 80066bc:	b9d8      	cbnz	r0, 80066f6 <_svfiprintf_r+0xe6>
 80066be:	06d0      	lsls	r0, r2, #27
 80066c0:	bf44      	itt	mi
 80066c2:	2320      	movmi	r3, #32
 80066c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066c8:	0711      	lsls	r1, r2, #28
 80066ca:	bf44      	itt	mi
 80066cc:	232b      	movmi	r3, #43	; 0x2b
 80066ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066d2:	f89a 3000 	ldrb.w	r3, [sl]
 80066d6:	2b2a      	cmp	r3, #42	; 0x2a
 80066d8:	d015      	beq.n	8006706 <_svfiprintf_r+0xf6>
 80066da:	4654      	mov	r4, sl
 80066dc:	2000      	movs	r0, #0
 80066de:	f04f 0c0a 	mov.w	ip, #10
 80066e2:	9a07      	ldr	r2, [sp, #28]
 80066e4:	4621      	mov	r1, r4
 80066e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066ea:	3b30      	subs	r3, #48	; 0x30
 80066ec:	2b09      	cmp	r3, #9
 80066ee:	d94e      	bls.n	800678e <_svfiprintf_r+0x17e>
 80066f0:	b1b0      	cbz	r0, 8006720 <_svfiprintf_r+0x110>
 80066f2:	9207      	str	r2, [sp, #28]
 80066f4:	e014      	b.n	8006720 <_svfiprintf_r+0x110>
 80066f6:	eba0 0308 	sub.w	r3, r0, r8
 80066fa:	fa09 f303 	lsl.w	r3, r9, r3
 80066fe:	4313      	orrs	r3, r2
 8006700:	46a2      	mov	sl, r4
 8006702:	9304      	str	r3, [sp, #16]
 8006704:	e7d2      	b.n	80066ac <_svfiprintf_r+0x9c>
 8006706:	9b03      	ldr	r3, [sp, #12]
 8006708:	1d19      	adds	r1, r3, #4
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	9103      	str	r1, [sp, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	bfbb      	ittet	lt
 8006712:	425b      	neglt	r3, r3
 8006714:	f042 0202 	orrlt.w	r2, r2, #2
 8006718:	9307      	strge	r3, [sp, #28]
 800671a:	9307      	strlt	r3, [sp, #28]
 800671c:	bfb8      	it	lt
 800671e:	9204      	strlt	r2, [sp, #16]
 8006720:	7823      	ldrb	r3, [r4, #0]
 8006722:	2b2e      	cmp	r3, #46	; 0x2e
 8006724:	d10c      	bne.n	8006740 <_svfiprintf_r+0x130>
 8006726:	7863      	ldrb	r3, [r4, #1]
 8006728:	2b2a      	cmp	r3, #42	; 0x2a
 800672a:	d135      	bne.n	8006798 <_svfiprintf_r+0x188>
 800672c:	9b03      	ldr	r3, [sp, #12]
 800672e:	3402      	adds	r4, #2
 8006730:	1d1a      	adds	r2, r3, #4
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	9203      	str	r2, [sp, #12]
 8006736:	2b00      	cmp	r3, #0
 8006738:	bfb8      	it	lt
 800673a:	f04f 33ff 	movlt.w	r3, #4294967295
 800673e:	9305      	str	r3, [sp, #20]
 8006740:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800680c <_svfiprintf_r+0x1fc>
 8006744:	2203      	movs	r2, #3
 8006746:	4650      	mov	r0, sl
 8006748:	7821      	ldrb	r1, [r4, #0]
 800674a:	f7ff f98b 	bl	8005a64 <memchr>
 800674e:	b140      	cbz	r0, 8006762 <_svfiprintf_r+0x152>
 8006750:	2340      	movs	r3, #64	; 0x40
 8006752:	eba0 000a 	sub.w	r0, r0, sl
 8006756:	fa03 f000 	lsl.w	r0, r3, r0
 800675a:	9b04      	ldr	r3, [sp, #16]
 800675c:	3401      	adds	r4, #1
 800675e:	4303      	orrs	r3, r0
 8006760:	9304      	str	r3, [sp, #16]
 8006762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006766:	2206      	movs	r2, #6
 8006768:	4825      	ldr	r0, [pc, #148]	; (8006800 <_svfiprintf_r+0x1f0>)
 800676a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800676e:	f7ff f979 	bl	8005a64 <memchr>
 8006772:	2800      	cmp	r0, #0
 8006774:	d038      	beq.n	80067e8 <_svfiprintf_r+0x1d8>
 8006776:	4b23      	ldr	r3, [pc, #140]	; (8006804 <_svfiprintf_r+0x1f4>)
 8006778:	bb1b      	cbnz	r3, 80067c2 <_svfiprintf_r+0x1b2>
 800677a:	9b03      	ldr	r3, [sp, #12]
 800677c:	3307      	adds	r3, #7
 800677e:	f023 0307 	bic.w	r3, r3, #7
 8006782:	3308      	adds	r3, #8
 8006784:	9303      	str	r3, [sp, #12]
 8006786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006788:	4433      	add	r3, r6
 800678a:	9309      	str	r3, [sp, #36]	; 0x24
 800678c:	e767      	b.n	800665e <_svfiprintf_r+0x4e>
 800678e:	460c      	mov	r4, r1
 8006790:	2001      	movs	r0, #1
 8006792:	fb0c 3202 	mla	r2, ip, r2, r3
 8006796:	e7a5      	b.n	80066e4 <_svfiprintf_r+0xd4>
 8006798:	2300      	movs	r3, #0
 800679a:	f04f 0c0a 	mov.w	ip, #10
 800679e:	4619      	mov	r1, r3
 80067a0:	3401      	adds	r4, #1
 80067a2:	9305      	str	r3, [sp, #20]
 80067a4:	4620      	mov	r0, r4
 80067a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067aa:	3a30      	subs	r2, #48	; 0x30
 80067ac:	2a09      	cmp	r2, #9
 80067ae:	d903      	bls.n	80067b8 <_svfiprintf_r+0x1a8>
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d0c5      	beq.n	8006740 <_svfiprintf_r+0x130>
 80067b4:	9105      	str	r1, [sp, #20]
 80067b6:	e7c3      	b.n	8006740 <_svfiprintf_r+0x130>
 80067b8:	4604      	mov	r4, r0
 80067ba:	2301      	movs	r3, #1
 80067bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80067c0:	e7f0      	b.n	80067a4 <_svfiprintf_r+0x194>
 80067c2:	ab03      	add	r3, sp, #12
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	462a      	mov	r2, r5
 80067c8:	4638      	mov	r0, r7
 80067ca:	4b0f      	ldr	r3, [pc, #60]	; (8006808 <_svfiprintf_r+0x1f8>)
 80067cc:	a904      	add	r1, sp, #16
 80067ce:	f7fc fa7d 	bl	8002ccc <_printf_float>
 80067d2:	1c42      	adds	r2, r0, #1
 80067d4:	4606      	mov	r6, r0
 80067d6:	d1d6      	bne.n	8006786 <_svfiprintf_r+0x176>
 80067d8:	89ab      	ldrh	r3, [r5, #12]
 80067da:	065b      	lsls	r3, r3, #25
 80067dc:	f53f af2c 	bmi.w	8006638 <_svfiprintf_r+0x28>
 80067e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067e2:	b01d      	add	sp, #116	; 0x74
 80067e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e8:	ab03      	add	r3, sp, #12
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	462a      	mov	r2, r5
 80067ee:	4638      	mov	r0, r7
 80067f0:	4b05      	ldr	r3, [pc, #20]	; (8006808 <_svfiprintf_r+0x1f8>)
 80067f2:	a904      	add	r1, sp, #16
 80067f4:	f7fc fd06 	bl	8003204 <_printf_i>
 80067f8:	e7eb      	b.n	80067d2 <_svfiprintf_r+0x1c2>
 80067fa:	bf00      	nop
 80067fc:	08007834 	.word	0x08007834
 8006800:	0800783e 	.word	0x0800783e
 8006804:	08002ccd 	.word	0x08002ccd
 8006808:	08006559 	.word	0x08006559
 800680c:	0800783a 	.word	0x0800783a

08006810 <nan>:
 8006810:	2000      	movs	r0, #0
 8006812:	4901      	ldr	r1, [pc, #4]	; (8006818 <nan+0x8>)
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	7ff80000 	.word	0x7ff80000

0800681c <_sbrk_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	2300      	movs	r3, #0
 8006820:	4d05      	ldr	r5, [pc, #20]	; (8006838 <_sbrk_r+0x1c>)
 8006822:	4604      	mov	r4, r0
 8006824:	4608      	mov	r0, r1
 8006826:	602b      	str	r3, [r5, #0]
 8006828:	f7fa fd4a 	bl	80012c0 <_sbrk>
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	d102      	bne.n	8006836 <_sbrk_r+0x1a>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	b103      	cbz	r3, 8006836 <_sbrk_r+0x1a>
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	bd38      	pop	{r3, r4, r5, pc}
 8006838:	200003d8 	.word	0x200003d8

0800683c <strncmp>:
 800683c:	b510      	push	{r4, lr}
 800683e:	b16a      	cbz	r2, 800685c <strncmp+0x20>
 8006840:	3901      	subs	r1, #1
 8006842:	1884      	adds	r4, r0, r2
 8006844:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006848:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800684c:	4293      	cmp	r3, r2
 800684e:	d103      	bne.n	8006858 <strncmp+0x1c>
 8006850:	42a0      	cmp	r0, r4
 8006852:	d001      	beq.n	8006858 <strncmp+0x1c>
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1f5      	bne.n	8006844 <strncmp+0x8>
 8006858:	1a98      	subs	r0, r3, r2
 800685a:	bd10      	pop	{r4, pc}
 800685c:	4610      	mov	r0, r2
 800685e:	e7fc      	b.n	800685a <strncmp+0x1e>

08006860 <__ascii_wctomb>:
 8006860:	4603      	mov	r3, r0
 8006862:	4608      	mov	r0, r1
 8006864:	b141      	cbz	r1, 8006878 <__ascii_wctomb+0x18>
 8006866:	2aff      	cmp	r2, #255	; 0xff
 8006868:	d904      	bls.n	8006874 <__ascii_wctomb+0x14>
 800686a:	228a      	movs	r2, #138	; 0x8a
 800686c:	f04f 30ff 	mov.w	r0, #4294967295
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	4770      	bx	lr
 8006874:	2001      	movs	r0, #1
 8006876:	700a      	strb	r2, [r1, #0]
 8006878:	4770      	bx	lr
	...

0800687c <__assert_func>:
 800687c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800687e:	4614      	mov	r4, r2
 8006880:	461a      	mov	r2, r3
 8006882:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <__assert_func+0x2c>)
 8006884:	4605      	mov	r5, r0
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68d8      	ldr	r0, [r3, #12]
 800688a:	b14c      	cbz	r4, 80068a0 <__assert_func+0x24>
 800688c:	4b07      	ldr	r3, [pc, #28]	; (80068ac <__assert_func+0x30>)
 800688e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006892:	9100      	str	r1, [sp, #0]
 8006894:	462b      	mov	r3, r5
 8006896:	4906      	ldr	r1, [pc, #24]	; (80068b0 <__assert_func+0x34>)
 8006898:	f000 f80e 	bl	80068b8 <fiprintf>
 800689c:	f000 fa82 	bl	8006da4 <abort>
 80068a0:	4b04      	ldr	r3, [pc, #16]	; (80068b4 <__assert_func+0x38>)
 80068a2:	461c      	mov	r4, r3
 80068a4:	e7f3      	b.n	800688e <__assert_func+0x12>
 80068a6:	bf00      	nop
 80068a8:	2000000c 	.word	0x2000000c
 80068ac:	08007845 	.word	0x08007845
 80068b0:	08007852 	.word	0x08007852
 80068b4:	08007880 	.word	0x08007880

080068b8 <fiprintf>:
 80068b8:	b40e      	push	{r1, r2, r3}
 80068ba:	b503      	push	{r0, r1, lr}
 80068bc:	4601      	mov	r1, r0
 80068be:	ab03      	add	r3, sp, #12
 80068c0:	4805      	ldr	r0, [pc, #20]	; (80068d8 <fiprintf+0x20>)
 80068c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80068c6:	6800      	ldr	r0, [r0, #0]
 80068c8:	9301      	str	r3, [sp, #4]
 80068ca:	f000 f87b 	bl	80069c4 <_vfiprintf_r>
 80068ce:	b002      	add	sp, #8
 80068d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068d4:	b003      	add	sp, #12
 80068d6:	4770      	bx	lr
 80068d8:	2000000c 	.word	0x2000000c

080068dc <memmove>:
 80068dc:	4288      	cmp	r0, r1
 80068de:	b510      	push	{r4, lr}
 80068e0:	eb01 0402 	add.w	r4, r1, r2
 80068e4:	d902      	bls.n	80068ec <memmove+0x10>
 80068e6:	4284      	cmp	r4, r0
 80068e8:	4623      	mov	r3, r4
 80068ea:	d807      	bhi.n	80068fc <memmove+0x20>
 80068ec:	1e43      	subs	r3, r0, #1
 80068ee:	42a1      	cmp	r1, r4
 80068f0:	d008      	beq.n	8006904 <memmove+0x28>
 80068f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068fa:	e7f8      	b.n	80068ee <memmove+0x12>
 80068fc:	4601      	mov	r1, r0
 80068fe:	4402      	add	r2, r0
 8006900:	428a      	cmp	r2, r1
 8006902:	d100      	bne.n	8006906 <memmove+0x2a>
 8006904:	bd10      	pop	{r4, pc}
 8006906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800690a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800690e:	e7f7      	b.n	8006900 <memmove+0x24>

08006910 <__malloc_lock>:
 8006910:	4801      	ldr	r0, [pc, #4]	; (8006918 <__malloc_lock+0x8>)
 8006912:	f000 bc07 	b.w	8007124 <__retarget_lock_acquire_recursive>
 8006916:	bf00      	nop
 8006918:	200003e0 	.word	0x200003e0

0800691c <__malloc_unlock>:
 800691c:	4801      	ldr	r0, [pc, #4]	; (8006924 <__malloc_unlock+0x8>)
 800691e:	f000 bc02 	b.w	8007126 <__retarget_lock_release_recursive>
 8006922:	bf00      	nop
 8006924:	200003e0 	.word	0x200003e0

08006928 <_realloc_r>:
 8006928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692a:	4607      	mov	r7, r0
 800692c:	4614      	mov	r4, r2
 800692e:	460e      	mov	r6, r1
 8006930:	b921      	cbnz	r1, 800693c <_realloc_r+0x14>
 8006932:	4611      	mov	r1, r2
 8006934:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006938:	f7ff bdb4 	b.w	80064a4 <_malloc_r>
 800693c:	b922      	cbnz	r2, 8006948 <_realloc_r+0x20>
 800693e:	f7ff fd65 	bl	800640c <_free_r>
 8006942:	4625      	mov	r5, r4
 8006944:	4628      	mov	r0, r5
 8006946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006948:	f000 fc52 	bl	80071f0 <_malloc_usable_size_r>
 800694c:	42a0      	cmp	r0, r4
 800694e:	d20f      	bcs.n	8006970 <_realloc_r+0x48>
 8006950:	4621      	mov	r1, r4
 8006952:	4638      	mov	r0, r7
 8006954:	f7ff fda6 	bl	80064a4 <_malloc_r>
 8006958:	4605      	mov	r5, r0
 800695a:	2800      	cmp	r0, #0
 800695c:	d0f2      	beq.n	8006944 <_realloc_r+0x1c>
 800695e:	4631      	mov	r1, r6
 8006960:	4622      	mov	r2, r4
 8006962:	f7fc f8ff 	bl	8002b64 <memcpy>
 8006966:	4631      	mov	r1, r6
 8006968:	4638      	mov	r0, r7
 800696a:	f7ff fd4f 	bl	800640c <_free_r>
 800696e:	e7e9      	b.n	8006944 <_realloc_r+0x1c>
 8006970:	4635      	mov	r5, r6
 8006972:	e7e7      	b.n	8006944 <_realloc_r+0x1c>

08006974 <__sfputc_r>:
 8006974:	6893      	ldr	r3, [r2, #8]
 8006976:	b410      	push	{r4}
 8006978:	3b01      	subs	r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	6093      	str	r3, [r2, #8]
 800697e:	da07      	bge.n	8006990 <__sfputc_r+0x1c>
 8006980:	6994      	ldr	r4, [r2, #24]
 8006982:	42a3      	cmp	r3, r4
 8006984:	db01      	blt.n	800698a <__sfputc_r+0x16>
 8006986:	290a      	cmp	r1, #10
 8006988:	d102      	bne.n	8006990 <__sfputc_r+0x1c>
 800698a:	bc10      	pop	{r4}
 800698c:	f000 b94a 	b.w	8006c24 <__swbuf_r>
 8006990:	6813      	ldr	r3, [r2, #0]
 8006992:	1c58      	adds	r0, r3, #1
 8006994:	6010      	str	r0, [r2, #0]
 8006996:	7019      	strb	r1, [r3, #0]
 8006998:	4608      	mov	r0, r1
 800699a:	bc10      	pop	{r4}
 800699c:	4770      	bx	lr

0800699e <__sfputs_r>:
 800699e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a0:	4606      	mov	r6, r0
 80069a2:	460f      	mov	r7, r1
 80069a4:	4614      	mov	r4, r2
 80069a6:	18d5      	adds	r5, r2, r3
 80069a8:	42ac      	cmp	r4, r5
 80069aa:	d101      	bne.n	80069b0 <__sfputs_r+0x12>
 80069ac:	2000      	movs	r0, #0
 80069ae:	e007      	b.n	80069c0 <__sfputs_r+0x22>
 80069b0:	463a      	mov	r2, r7
 80069b2:	4630      	mov	r0, r6
 80069b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069b8:	f7ff ffdc 	bl	8006974 <__sfputc_r>
 80069bc:	1c43      	adds	r3, r0, #1
 80069be:	d1f3      	bne.n	80069a8 <__sfputs_r+0xa>
 80069c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069c4 <_vfiprintf_r>:
 80069c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c8:	460d      	mov	r5, r1
 80069ca:	4614      	mov	r4, r2
 80069cc:	4698      	mov	r8, r3
 80069ce:	4606      	mov	r6, r0
 80069d0:	b09d      	sub	sp, #116	; 0x74
 80069d2:	b118      	cbz	r0, 80069dc <_vfiprintf_r+0x18>
 80069d4:	6983      	ldr	r3, [r0, #24]
 80069d6:	b90b      	cbnz	r3, 80069dc <_vfiprintf_r+0x18>
 80069d8:	f000 fb06 	bl	8006fe8 <__sinit>
 80069dc:	4b89      	ldr	r3, [pc, #548]	; (8006c04 <_vfiprintf_r+0x240>)
 80069de:	429d      	cmp	r5, r3
 80069e0:	d11b      	bne.n	8006a1a <_vfiprintf_r+0x56>
 80069e2:	6875      	ldr	r5, [r6, #4]
 80069e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069e6:	07d9      	lsls	r1, r3, #31
 80069e8:	d405      	bmi.n	80069f6 <_vfiprintf_r+0x32>
 80069ea:	89ab      	ldrh	r3, [r5, #12]
 80069ec:	059a      	lsls	r2, r3, #22
 80069ee:	d402      	bmi.n	80069f6 <_vfiprintf_r+0x32>
 80069f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069f2:	f000 fb97 	bl	8007124 <__retarget_lock_acquire_recursive>
 80069f6:	89ab      	ldrh	r3, [r5, #12]
 80069f8:	071b      	lsls	r3, r3, #28
 80069fa:	d501      	bpl.n	8006a00 <_vfiprintf_r+0x3c>
 80069fc:	692b      	ldr	r3, [r5, #16]
 80069fe:	b9eb      	cbnz	r3, 8006a3c <_vfiprintf_r+0x78>
 8006a00:	4629      	mov	r1, r5
 8006a02:	4630      	mov	r0, r6
 8006a04:	f000 f960 	bl	8006cc8 <__swsetup_r>
 8006a08:	b1c0      	cbz	r0, 8006a3c <_vfiprintf_r+0x78>
 8006a0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a0c:	07dc      	lsls	r4, r3, #31
 8006a0e:	d50e      	bpl.n	8006a2e <_vfiprintf_r+0x6a>
 8006a10:	f04f 30ff 	mov.w	r0, #4294967295
 8006a14:	b01d      	add	sp, #116	; 0x74
 8006a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a1a:	4b7b      	ldr	r3, [pc, #492]	; (8006c08 <_vfiprintf_r+0x244>)
 8006a1c:	429d      	cmp	r5, r3
 8006a1e:	d101      	bne.n	8006a24 <_vfiprintf_r+0x60>
 8006a20:	68b5      	ldr	r5, [r6, #8]
 8006a22:	e7df      	b.n	80069e4 <_vfiprintf_r+0x20>
 8006a24:	4b79      	ldr	r3, [pc, #484]	; (8006c0c <_vfiprintf_r+0x248>)
 8006a26:	429d      	cmp	r5, r3
 8006a28:	bf08      	it	eq
 8006a2a:	68f5      	ldreq	r5, [r6, #12]
 8006a2c:	e7da      	b.n	80069e4 <_vfiprintf_r+0x20>
 8006a2e:	89ab      	ldrh	r3, [r5, #12]
 8006a30:	0598      	lsls	r0, r3, #22
 8006a32:	d4ed      	bmi.n	8006a10 <_vfiprintf_r+0x4c>
 8006a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a36:	f000 fb76 	bl	8007126 <__retarget_lock_release_recursive>
 8006a3a:	e7e9      	b.n	8006a10 <_vfiprintf_r+0x4c>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a40:	2320      	movs	r3, #32
 8006a42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a46:	2330      	movs	r3, #48	; 0x30
 8006a48:	f04f 0901 	mov.w	r9, #1
 8006a4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a50:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006c10 <_vfiprintf_r+0x24c>
 8006a54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a58:	4623      	mov	r3, r4
 8006a5a:	469a      	mov	sl, r3
 8006a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a60:	b10a      	cbz	r2, 8006a66 <_vfiprintf_r+0xa2>
 8006a62:	2a25      	cmp	r2, #37	; 0x25
 8006a64:	d1f9      	bne.n	8006a5a <_vfiprintf_r+0x96>
 8006a66:	ebba 0b04 	subs.w	fp, sl, r4
 8006a6a:	d00b      	beq.n	8006a84 <_vfiprintf_r+0xc0>
 8006a6c:	465b      	mov	r3, fp
 8006a6e:	4622      	mov	r2, r4
 8006a70:	4629      	mov	r1, r5
 8006a72:	4630      	mov	r0, r6
 8006a74:	f7ff ff93 	bl	800699e <__sfputs_r>
 8006a78:	3001      	adds	r0, #1
 8006a7a:	f000 80aa 	beq.w	8006bd2 <_vfiprintf_r+0x20e>
 8006a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a80:	445a      	add	r2, fp
 8006a82:	9209      	str	r2, [sp, #36]	; 0x24
 8006a84:	f89a 3000 	ldrb.w	r3, [sl]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 80a2 	beq.w	8006bd2 <_vfiprintf_r+0x20e>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f04f 32ff 	mov.w	r2, #4294967295
 8006a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a98:	f10a 0a01 	add.w	sl, sl, #1
 8006a9c:	9304      	str	r3, [sp, #16]
 8006a9e:	9307      	str	r3, [sp, #28]
 8006aa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006aa4:	931a      	str	r3, [sp, #104]	; 0x68
 8006aa6:	4654      	mov	r4, sl
 8006aa8:	2205      	movs	r2, #5
 8006aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aae:	4858      	ldr	r0, [pc, #352]	; (8006c10 <_vfiprintf_r+0x24c>)
 8006ab0:	f7fe ffd8 	bl	8005a64 <memchr>
 8006ab4:	9a04      	ldr	r2, [sp, #16]
 8006ab6:	b9d8      	cbnz	r0, 8006af0 <_vfiprintf_r+0x12c>
 8006ab8:	06d1      	lsls	r1, r2, #27
 8006aba:	bf44      	itt	mi
 8006abc:	2320      	movmi	r3, #32
 8006abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ac2:	0713      	lsls	r3, r2, #28
 8006ac4:	bf44      	itt	mi
 8006ac6:	232b      	movmi	r3, #43	; 0x2b
 8006ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006acc:	f89a 3000 	ldrb.w	r3, [sl]
 8006ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ad2:	d015      	beq.n	8006b00 <_vfiprintf_r+0x13c>
 8006ad4:	4654      	mov	r4, sl
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	f04f 0c0a 	mov.w	ip, #10
 8006adc:	9a07      	ldr	r2, [sp, #28]
 8006ade:	4621      	mov	r1, r4
 8006ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ae4:	3b30      	subs	r3, #48	; 0x30
 8006ae6:	2b09      	cmp	r3, #9
 8006ae8:	d94e      	bls.n	8006b88 <_vfiprintf_r+0x1c4>
 8006aea:	b1b0      	cbz	r0, 8006b1a <_vfiprintf_r+0x156>
 8006aec:	9207      	str	r2, [sp, #28]
 8006aee:	e014      	b.n	8006b1a <_vfiprintf_r+0x156>
 8006af0:	eba0 0308 	sub.w	r3, r0, r8
 8006af4:	fa09 f303 	lsl.w	r3, r9, r3
 8006af8:	4313      	orrs	r3, r2
 8006afa:	46a2      	mov	sl, r4
 8006afc:	9304      	str	r3, [sp, #16]
 8006afe:	e7d2      	b.n	8006aa6 <_vfiprintf_r+0xe2>
 8006b00:	9b03      	ldr	r3, [sp, #12]
 8006b02:	1d19      	adds	r1, r3, #4
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	9103      	str	r1, [sp, #12]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	bfbb      	ittet	lt
 8006b0c:	425b      	neglt	r3, r3
 8006b0e:	f042 0202 	orrlt.w	r2, r2, #2
 8006b12:	9307      	strge	r3, [sp, #28]
 8006b14:	9307      	strlt	r3, [sp, #28]
 8006b16:	bfb8      	it	lt
 8006b18:	9204      	strlt	r2, [sp, #16]
 8006b1a:	7823      	ldrb	r3, [r4, #0]
 8006b1c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b1e:	d10c      	bne.n	8006b3a <_vfiprintf_r+0x176>
 8006b20:	7863      	ldrb	r3, [r4, #1]
 8006b22:	2b2a      	cmp	r3, #42	; 0x2a
 8006b24:	d135      	bne.n	8006b92 <_vfiprintf_r+0x1ce>
 8006b26:	9b03      	ldr	r3, [sp, #12]
 8006b28:	3402      	adds	r4, #2
 8006b2a:	1d1a      	adds	r2, r3, #4
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	9203      	str	r2, [sp, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bfb8      	it	lt
 8006b34:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b38:	9305      	str	r3, [sp, #20]
 8006b3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c20 <_vfiprintf_r+0x25c>
 8006b3e:	2203      	movs	r2, #3
 8006b40:	4650      	mov	r0, sl
 8006b42:	7821      	ldrb	r1, [r4, #0]
 8006b44:	f7fe ff8e 	bl	8005a64 <memchr>
 8006b48:	b140      	cbz	r0, 8006b5c <_vfiprintf_r+0x198>
 8006b4a:	2340      	movs	r3, #64	; 0x40
 8006b4c:	eba0 000a 	sub.w	r0, r0, sl
 8006b50:	fa03 f000 	lsl.w	r0, r3, r0
 8006b54:	9b04      	ldr	r3, [sp, #16]
 8006b56:	3401      	adds	r4, #1
 8006b58:	4303      	orrs	r3, r0
 8006b5a:	9304      	str	r3, [sp, #16]
 8006b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b60:	2206      	movs	r2, #6
 8006b62:	482c      	ldr	r0, [pc, #176]	; (8006c14 <_vfiprintf_r+0x250>)
 8006b64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b68:	f7fe ff7c 	bl	8005a64 <memchr>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	d03f      	beq.n	8006bf0 <_vfiprintf_r+0x22c>
 8006b70:	4b29      	ldr	r3, [pc, #164]	; (8006c18 <_vfiprintf_r+0x254>)
 8006b72:	bb1b      	cbnz	r3, 8006bbc <_vfiprintf_r+0x1f8>
 8006b74:	9b03      	ldr	r3, [sp, #12]
 8006b76:	3307      	adds	r3, #7
 8006b78:	f023 0307 	bic.w	r3, r3, #7
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	9303      	str	r3, [sp, #12]
 8006b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b82:	443b      	add	r3, r7
 8006b84:	9309      	str	r3, [sp, #36]	; 0x24
 8006b86:	e767      	b.n	8006a58 <_vfiprintf_r+0x94>
 8006b88:	460c      	mov	r4, r1
 8006b8a:	2001      	movs	r0, #1
 8006b8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b90:	e7a5      	b.n	8006ade <_vfiprintf_r+0x11a>
 8006b92:	2300      	movs	r3, #0
 8006b94:	f04f 0c0a 	mov.w	ip, #10
 8006b98:	4619      	mov	r1, r3
 8006b9a:	3401      	adds	r4, #1
 8006b9c:	9305      	str	r3, [sp, #20]
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ba4:	3a30      	subs	r2, #48	; 0x30
 8006ba6:	2a09      	cmp	r2, #9
 8006ba8:	d903      	bls.n	8006bb2 <_vfiprintf_r+0x1ee>
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0c5      	beq.n	8006b3a <_vfiprintf_r+0x176>
 8006bae:	9105      	str	r1, [sp, #20]
 8006bb0:	e7c3      	b.n	8006b3a <_vfiprintf_r+0x176>
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bba:	e7f0      	b.n	8006b9e <_vfiprintf_r+0x1da>
 8006bbc:	ab03      	add	r3, sp, #12
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	462a      	mov	r2, r5
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	4b15      	ldr	r3, [pc, #84]	; (8006c1c <_vfiprintf_r+0x258>)
 8006bc6:	a904      	add	r1, sp, #16
 8006bc8:	f7fc f880 	bl	8002ccc <_printf_float>
 8006bcc:	4607      	mov	r7, r0
 8006bce:	1c78      	adds	r0, r7, #1
 8006bd0:	d1d6      	bne.n	8006b80 <_vfiprintf_r+0x1bc>
 8006bd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bd4:	07d9      	lsls	r1, r3, #31
 8006bd6:	d405      	bmi.n	8006be4 <_vfiprintf_r+0x220>
 8006bd8:	89ab      	ldrh	r3, [r5, #12]
 8006bda:	059a      	lsls	r2, r3, #22
 8006bdc:	d402      	bmi.n	8006be4 <_vfiprintf_r+0x220>
 8006bde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006be0:	f000 faa1 	bl	8007126 <__retarget_lock_release_recursive>
 8006be4:	89ab      	ldrh	r3, [r5, #12]
 8006be6:	065b      	lsls	r3, r3, #25
 8006be8:	f53f af12 	bmi.w	8006a10 <_vfiprintf_r+0x4c>
 8006bec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bee:	e711      	b.n	8006a14 <_vfiprintf_r+0x50>
 8006bf0:	ab03      	add	r3, sp, #12
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	462a      	mov	r2, r5
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	4b08      	ldr	r3, [pc, #32]	; (8006c1c <_vfiprintf_r+0x258>)
 8006bfa:	a904      	add	r1, sp, #16
 8006bfc:	f7fc fb02 	bl	8003204 <_printf_i>
 8006c00:	e7e4      	b.n	8006bcc <_vfiprintf_r+0x208>
 8006c02:	bf00      	nop
 8006c04:	080078a4 	.word	0x080078a4
 8006c08:	080078c4 	.word	0x080078c4
 8006c0c:	08007884 	.word	0x08007884
 8006c10:	08007834 	.word	0x08007834
 8006c14:	0800783e 	.word	0x0800783e
 8006c18:	08002ccd 	.word	0x08002ccd
 8006c1c:	0800699f 	.word	0x0800699f
 8006c20:	0800783a 	.word	0x0800783a

08006c24 <__swbuf_r>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	460e      	mov	r6, r1
 8006c28:	4614      	mov	r4, r2
 8006c2a:	4605      	mov	r5, r0
 8006c2c:	b118      	cbz	r0, 8006c36 <__swbuf_r+0x12>
 8006c2e:	6983      	ldr	r3, [r0, #24]
 8006c30:	b90b      	cbnz	r3, 8006c36 <__swbuf_r+0x12>
 8006c32:	f000 f9d9 	bl	8006fe8 <__sinit>
 8006c36:	4b21      	ldr	r3, [pc, #132]	; (8006cbc <__swbuf_r+0x98>)
 8006c38:	429c      	cmp	r4, r3
 8006c3a:	d12b      	bne.n	8006c94 <__swbuf_r+0x70>
 8006c3c:	686c      	ldr	r4, [r5, #4]
 8006c3e:	69a3      	ldr	r3, [r4, #24]
 8006c40:	60a3      	str	r3, [r4, #8]
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	071a      	lsls	r2, r3, #28
 8006c46:	d52f      	bpl.n	8006ca8 <__swbuf_r+0x84>
 8006c48:	6923      	ldr	r3, [r4, #16]
 8006c4a:	b36b      	cbz	r3, 8006ca8 <__swbuf_r+0x84>
 8006c4c:	6923      	ldr	r3, [r4, #16]
 8006c4e:	6820      	ldr	r0, [r4, #0]
 8006c50:	b2f6      	uxtb	r6, r6
 8006c52:	1ac0      	subs	r0, r0, r3
 8006c54:	6963      	ldr	r3, [r4, #20]
 8006c56:	4637      	mov	r7, r6
 8006c58:	4283      	cmp	r3, r0
 8006c5a:	dc04      	bgt.n	8006c66 <__swbuf_r+0x42>
 8006c5c:	4621      	mov	r1, r4
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 f92e 	bl	8006ec0 <_fflush_r>
 8006c64:	bb30      	cbnz	r0, 8006cb4 <__swbuf_r+0x90>
 8006c66:	68a3      	ldr	r3, [r4, #8]
 8006c68:	3001      	adds	r0, #1
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	60a3      	str	r3, [r4, #8]
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	6022      	str	r2, [r4, #0]
 8006c74:	701e      	strb	r6, [r3, #0]
 8006c76:	6963      	ldr	r3, [r4, #20]
 8006c78:	4283      	cmp	r3, r0
 8006c7a:	d004      	beq.n	8006c86 <__swbuf_r+0x62>
 8006c7c:	89a3      	ldrh	r3, [r4, #12]
 8006c7e:	07db      	lsls	r3, r3, #31
 8006c80:	d506      	bpl.n	8006c90 <__swbuf_r+0x6c>
 8006c82:	2e0a      	cmp	r6, #10
 8006c84:	d104      	bne.n	8006c90 <__swbuf_r+0x6c>
 8006c86:	4621      	mov	r1, r4
 8006c88:	4628      	mov	r0, r5
 8006c8a:	f000 f919 	bl	8006ec0 <_fflush_r>
 8006c8e:	b988      	cbnz	r0, 8006cb4 <__swbuf_r+0x90>
 8006c90:	4638      	mov	r0, r7
 8006c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c94:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <__swbuf_r+0x9c>)
 8006c96:	429c      	cmp	r4, r3
 8006c98:	d101      	bne.n	8006c9e <__swbuf_r+0x7a>
 8006c9a:	68ac      	ldr	r4, [r5, #8]
 8006c9c:	e7cf      	b.n	8006c3e <__swbuf_r+0x1a>
 8006c9e:	4b09      	ldr	r3, [pc, #36]	; (8006cc4 <__swbuf_r+0xa0>)
 8006ca0:	429c      	cmp	r4, r3
 8006ca2:	bf08      	it	eq
 8006ca4:	68ec      	ldreq	r4, [r5, #12]
 8006ca6:	e7ca      	b.n	8006c3e <__swbuf_r+0x1a>
 8006ca8:	4621      	mov	r1, r4
 8006caa:	4628      	mov	r0, r5
 8006cac:	f000 f80c 	bl	8006cc8 <__swsetup_r>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d0cb      	beq.n	8006c4c <__swbuf_r+0x28>
 8006cb4:	f04f 37ff 	mov.w	r7, #4294967295
 8006cb8:	e7ea      	b.n	8006c90 <__swbuf_r+0x6c>
 8006cba:	bf00      	nop
 8006cbc:	080078a4 	.word	0x080078a4
 8006cc0:	080078c4 	.word	0x080078c4
 8006cc4:	08007884 	.word	0x08007884

08006cc8 <__swsetup_r>:
 8006cc8:	4b32      	ldr	r3, [pc, #200]	; (8006d94 <__swsetup_r+0xcc>)
 8006cca:	b570      	push	{r4, r5, r6, lr}
 8006ccc:	681d      	ldr	r5, [r3, #0]
 8006cce:	4606      	mov	r6, r0
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	b125      	cbz	r5, 8006cde <__swsetup_r+0x16>
 8006cd4:	69ab      	ldr	r3, [r5, #24]
 8006cd6:	b913      	cbnz	r3, 8006cde <__swsetup_r+0x16>
 8006cd8:	4628      	mov	r0, r5
 8006cda:	f000 f985 	bl	8006fe8 <__sinit>
 8006cde:	4b2e      	ldr	r3, [pc, #184]	; (8006d98 <__swsetup_r+0xd0>)
 8006ce0:	429c      	cmp	r4, r3
 8006ce2:	d10f      	bne.n	8006d04 <__swsetup_r+0x3c>
 8006ce4:	686c      	ldr	r4, [r5, #4]
 8006ce6:	89a3      	ldrh	r3, [r4, #12]
 8006ce8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cec:	0719      	lsls	r1, r3, #28
 8006cee:	d42c      	bmi.n	8006d4a <__swsetup_r+0x82>
 8006cf0:	06dd      	lsls	r5, r3, #27
 8006cf2:	d411      	bmi.n	8006d18 <__swsetup_r+0x50>
 8006cf4:	2309      	movs	r3, #9
 8006cf6:	6033      	str	r3, [r6, #0]
 8006cf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006d00:	81a3      	strh	r3, [r4, #12]
 8006d02:	e03e      	b.n	8006d82 <__swsetup_r+0xba>
 8006d04:	4b25      	ldr	r3, [pc, #148]	; (8006d9c <__swsetup_r+0xd4>)
 8006d06:	429c      	cmp	r4, r3
 8006d08:	d101      	bne.n	8006d0e <__swsetup_r+0x46>
 8006d0a:	68ac      	ldr	r4, [r5, #8]
 8006d0c:	e7eb      	b.n	8006ce6 <__swsetup_r+0x1e>
 8006d0e:	4b24      	ldr	r3, [pc, #144]	; (8006da0 <__swsetup_r+0xd8>)
 8006d10:	429c      	cmp	r4, r3
 8006d12:	bf08      	it	eq
 8006d14:	68ec      	ldreq	r4, [r5, #12]
 8006d16:	e7e6      	b.n	8006ce6 <__swsetup_r+0x1e>
 8006d18:	0758      	lsls	r0, r3, #29
 8006d1a:	d512      	bpl.n	8006d42 <__swsetup_r+0x7a>
 8006d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d1e:	b141      	cbz	r1, 8006d32 <__swsetup_r+0x6a>
 8006d20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d24:	4299      	cmp	r1, r3
 8006d26:	d002      	beq.n	8006d2e <__swsetup_r+0x66>
 8006d28:	4630      	mov	r0, r6
 8006d2a:	f7ff fb6f 	bl	800640c <_free_r>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	6363      	str	r3, [r4, #52]	; 0x34
 8006d32:	89a3      	ldrh	r3, [r4, #12]
 8006d34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d38:	81a3      	strh	r3, [r4, #12]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	6063      	str	r3, [r4, #4]
 8006d3e:	6923      	ldr	r3, [r4, #16]
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	89a3      	ldrh	r3, [r4, #12]
 8006d44:	f043 0308 	orr.w	r3, r3, #8
 8006d48:	81a3      	strh	r3, [r4, #12]
 8006d4a:	6923      	ldr	r3, [r4, #16]
 8006d4c:	b94b      	cbnz	r3, 8006d62 <__swsetup_r+0x9a>
 8006d4e:	89a3      	ldrh	r3, [r4, #12]
 8006d50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d58:	d003      	beq.n	8006d62 <__swsetup_r+0x9a>
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	f000 fa07 	bl	8007170 <__smakebuf_r>
 8006d62:	89a0      	ldrh	r0, [r4, #12]
 8006d64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d68:	f010 0301 	ands.w	r3, r0, #1
 8006d6c:	d00a      	beq.n	8006d84 <__swsetup_r+0xbc>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60a3      	str	r3, [r4, #8]
 8006d72:	6963      	ldr	r3, [r4, #20]
 8006d74:	425b      	negs	r3, r3
 8006d76:	61a3      	str	r3, [r4, #24]
 8006d78:	6923      	ldr	r3, [r4, #16]
 8006d7a:	b943      	cbnz	r3, 8006d8e <__swsetup_r+0xc6>
 8006d7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d80:	d1ba      	bne.n	8006cf8 <__swsetup_r+0x30>
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	0781      	lsls	r1, r0, #30
 8006d86:	bf58      	it	pl
 8006d88:	6963      	ldrpl	r3, [r4, #20]
 8006d8a:	60a3      	str	r3, [r4, #8]
 8006d8c:	e7f4      	b.n	8006d78 <__swsetup_r+0xb0>
 8006d8e:	2000      	movs	r0, #0
 8006d90:	e7f7      	b.n	8006d82 <__swsetup_r+0xba>
 8006d92:	bf00      	nop
 8006d94:	2000000c 	.word	0x2000000c
 8006d98:	080078a4 	.word	0x080078a4
 8006d9c:	080078c4 	.word	0x080078c4
 8006da0:	08007884 	.word	0x08007884

08006da4 <abort>:
 8006da4:	2006      	movs	r0, #6
 8006da6:	b508      	push	{r3, lr}
 8006da8:	f000 fa52 	bl	8007250 <raise>
 8006dac:	2001      	movs	r0, #1
 8006dae:	f7fa fa14 	bl	80011da <_exit>
	...

08006db4 <__sflush_r>:
 8006db4:	898a      	ldrh	r2, [r1, #12]
 8006db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dba:	4605      	mov	r5, r0
 8006dbc:	0710      	lsls	r0, r2, #28
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	d458      	bmi.n	8006e74 <__sflush_r+0xc0>
 8006dc2:	684b      	ldr	r3, [r1, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	dc05      	bgt.n	8006dd4 <__sflush_r+0x20>
 8006dc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	dc02      	bgt.n	8006dd4 <__sflush_r+0x20>
 8006dce:	2000      	movs	r0, #0
 8006dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dd6:	2e00      	cmp	r6, #0
 8006dd8:	d0f9      	beq.n	8006dce <__sflush_r+0x1a>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006de0:	682f      	ldr	r7, [r5, #0]
 8006de2:	602b      	str	r3, [r5, #0]
 8006de4:	d032      	beq.n	8006e4c <__sflush_r+0x98>
 8006de6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	075a      	lsls	r2, r3, #29
 8006dec:	d505      	bpl.n	8006dfa <__sflush_r+0x46>
 8006dee:	6863      	ldr	r3, [r4, #4]
 8006df0:	1ac0      	subs	r0, r0, r3
 8006df2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006df4:	b10b      	cbz	r3, 8006dfa <__sflush_r+0x46>
 8006df6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006df8:	1ac0      	subs	r0, r0, r3
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e00:	4628      	mov	r0, r5
 8006e02:	6a21      	ldr	r1, [r4, #32]
 8006e04:	47b0      	blx	r6
 8006e06:	1c43      	adds	r3, r0, #1
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	d106      	bne.n	8006e1a <__sflush_r+0x66>
 8006e0c:	6829      	ldr	r1, [r5, #0]
 8006e0e:	291d      	cmp	r1, #29
 8006e10:	d82c      	bhi.n	8006e6c <__sflush_r+0xb8>
 8006e12:	4a2a      	ldr	r2, [pc, #168]	; (8006ebc <__sflush_r+0x108>)
 8006e14:	40ca      	lsrs	r2, r1
 8006e16:	07d6      	lsls	r6, r2, #31
 8006e18:	d528      	bpl.n	8006e6c <__sflush_r+0xb8>
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	6062      	str	r2, [r4, #4]
 8006e1e:	6922      	ldr	r2, [r4, #16]
 8006e20:	04d9      	lsls	r1, r3, #19
 8006e22:	6022      	str	r2, [r4, #0]
 8006e24:	d504      	bpl.n	8006e30 <__sflush_r+0x7c>
 8006e26:	1c42      	adds	r2, r0, #1
 8006e28:	d101      	bne.n	8006e2e <__sflush_r+0x7a>
 8006e2a:	682b      	ldr	r3, [r5, #0]
 8006e2c:	b903      	cbnz	r3, 8006e30 <__sflush_r+0x7c>
 8006e2e:	6560      	str	r0, [r4, #84]	; 0x54
 8006e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e32:	602f      	str	r7, [r5, #0]
 8006e34:	2900      	cmp	r1, #0
 8006e36:	d0ca      	beq.n	8006dce <__sflush_r+0x1a>
 8006e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e3c:	4299      	cmp	r1, r3
 8006e3e:	d002      	beq.n	8006e46 <__sflush_r+0x92>
 8006e40:	4628      	mov	r0, r5
 8006e42:	f7ff fae3 	bl	800640c <_free_r>
 8006e46:	2000      	movs	r0, #0
 8006e48:	6360      	str	r0, [r4, #52]	; 0x34
 8006e4a:	e7c1      	b.n	8006dd0 <__sflush_r+0x1c>
 8006e4c:	6a21      	ldr	r1, [r4, #32]
 8006e4e:	2301      	movs	r3, #1
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b0      	blx	r6
 8006e54:	1c41      	adds	r1, r0, #1
 8006e56:	d1c7      	bne.n	8006de8 <__sflush_r+0x34>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0c4      	beq.n	8006de8 <__sflush_r+0x34>
 8006e5e:	2b1d      	cmp	r3, #29
 8006e60:	d001      	beq.n	8006e66 <__sflush_r+0xb2>
 8006e62:	2b16      	cmp	r3, #22
 8006e64:	d101      	bne.n	8006e6a <__sflush_r+0xb6>
 8006e66:	602f      	str	r7, [r5, #0]
 8006e68:	e7b1      	b.n	8006dce <__sflush_r+0x1a>
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e70:	81a3      	strh	r3, [r4, #12]
 8006e72:	e7ad      	b.n	8006dd0 <__sflush_r+0x1c>
 8006e74:	690f      	ldr	r7, [r1, #16]
 8006e76:	2f00      	cmp	r7, #0
 8006e78:	d0a9      	beq.n	8006dce <__sflush_r+0x1a>
 8006e7a:	0793      	lsls	r3, r2, #30
 8006e7c:	bf18      	it	ne
 8006e7e:	2300      	movne	r3, #0
 8006e80:	680e      	ldr	r6, [r1, #0]
 8006e82:	bf08      	it	eq
 8006e84:	694b      	ldreq	r3, [r1, #20]
 8006e86:	eba6 0807 	sub.w	r8, r6, r7
 8006e8a:	600f      	str	r7, [r1, #0]
 8006e8c:	608b      	str	r3, [r1, #8]
 8006e8e:	f1b8 0f00 	cmp.w	r8, #0
 8006e92:	dd9c      	ble.n	8006dce <__sflush_r+0x1a>
 8006e94:	4643      	mov	r3, r8
 8006e96:	463a      	mov	r2, r7
 8006e98:	4628      	mov	r0, r5
 8006e9a:	6a21      	ldr	r1, [r4, #32]
 8006e9c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e9e:	47b0      	blx	r6
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	dc06      	bgt.n	8006eb2 <__sflush_r+0xfe>
 8006ea4:	89a3      	ldrh	r3, [r4, #12]
 8006ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eae:	81a3      	strh	r3, [r4, #12]
 8006eb0:	e78e      	b.n	8006dd0 <__sflush_r+0x1c>
 8006eb2:	4407      	add	r7, r0
 8006eb4:	eba8 0800 	sub.w	r8, r8, r0
 8006eb8:	e7e9      	b.n	8006e8e <__sflush_r+0xda>
 8006eba:	bf00      	nop
 8006ebc:	20400001 	.word	0x20400001

08006ec0 <_fflush_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	690b      	ldr	r3, [r1, #16]
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	b913      	cbnz	r3, 8006ed0 <_fflush_r+0x10>
 8006eca:	2500      	movs	r5, #0
 8006ecc:	4628      	mov	r0, r5
 8006ece:	bd38      	pop	{r3, r4, r5, pc}
 8006ed0:	b118      	cbz	r0, 8006eda <_fflush_r+0x1a>
 8006ed2:	6983      	ldr	r3, [r0, #24]
 8006ed4:	b90b      	cbnz	r3, 8006eda <_fflush_r+0x1a>
 8006ed6:	f000 f887 	bl	8006fe8 <__sinit>
 8006eda:	4b14      	ldr	r3, [pc, #80]	; (8006f2c <_fflush_r+0x6c>)
 8006edc:	429c      	cmp	r4, r3
 8006ede:	d11b      	bne.n	8006f18 <_fflush_r+0x58>
 8006ee0:	686c      	ldr	r4, [r5, #4]
 8006ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0ef      	beq.n	8006eca <_fflush_r+0xa>
 8006eea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006eec:	07d0      	lsls	r0, r2, #31
 8006eee:	d404      	bmi.n	8006efa <_fflush_r+0x3a>
 8006ef0:	0599      	lsls	r1, r3, #22
 8006ef2:	d402      	bmi.n	8006efa <_fflush_r+0x3a>
 8006ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ef6:	f000 f915 	bl	8007124 <__retarget_lock_acquire_recursive>
 8006efa:	4628      	mov	r0, r5
 8006efc:	4621      	mov	r1, r4
 8006efe:	f7ff ff59 	bl	8006db4 <__sflush_r>
 8006f02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f04:	4605      	mov	r5, r0
 8006f06:	07da      	lsls	r2, r3, #31
 8006f08:	d4e0      	bmi.n	8006ecc <_fflush_r+0xc>
 8006f0a:	89a3      	ldrh	r3, [r4, #12]
 8006f0c:	059b      	lsls	r3, r3, #22
 8006f0e:	d4dd      	bmi.n	8006ecc <_fflush_r+0xc>
 8006f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f12:	f000 f908 	bl	8007126 <__retarget_lock_release_recursive>
 8006f16:	e7d9      	b.n	8006ecc <_fflush_r+0xc>
 8006f18:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <_fflush_r+0x70>)
 8006f1a:	429c      	cmp	r4, r3
 8006f1c:	d101      	bne.n	8006f22 <_fflush_r+0x62>
 8006f1e:	68ac      	ldr	r4, [r5, #8]
 8006f20:	e7df      	b.n	8006ee2 <_fflush_r+0x22>
 8006f22:	4b04      	ldr	r3, [pc, #16]	; (8006f34 <_fflush_r+0x74>)
 8006f24:	429c      	cmp	r4, r3
 8006f26:	bf08      	it	eq
 8006f28:	68ec      	ldreq	r4, [r5, #12]
 8006f2a:	e7da      	b.n	8006ee2 <_fflush_r+0x22>
 8006f2c:	080078a4 	.word	0x080078a4
 8006f30:	080078c4 	.word	0x080078c4
 8006f34:	08007884 	.word	0x08007884

08006f38 <std>:
 8006f38:	2300      	movs	r3, #0
 8006f3a:	b510      	push	{r4, lr}
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f46:	6083      	str	r3, [r0, #8]
 8006f48:	8181      	strh	r1, [r0, #12]
 8006f4a:	6643      	str	r3, [r0, #100]	; 0x64
 8006f4c:	81c2      	strh	r2, [r0, #14]
 8006f4e:	6183      	str	r3, [r0, #24]
 8006f50:	4619      	mov	r1, r3
 8006f52:	2208      	movs	r2, #8
 8006f54:	305c      	adds	r0, #92	; 0x5c
 8006f56:	f7fb fe13 	bl	8002b80 <memset>
 8006f5a:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <std+0x38>)
 8006f5c:	6224      	str	r4, [r4, #32]
 8006f5e:	6263      	str	r3, [r4, #36]	; 0x24
 8006f60:	4b04      	ldr	r3, [pc, #16]	; (8006f74 <std+0x3c>)
 8006f62:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f64:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <std+0x40>)
 8006f66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f68:	4b04      	ldr	r3, [pc, #16]	; (8006f7c <std+0x44>)
 8006f6a:	6323      	str	r3, [r4, #48]	; 0x30
 8006f6c:	bd10      	pop	{r4, pc}
 8006f6e:	bf00      	nop
 8006f70:	08007289 	.word	0x08007289
 8006f74:	080072ab 	.word	0x080072ab
 8006f78:	080072e3 	.word	0x080072e3
 8006f7c:	08007307 	.word	0x08007307

08006f80 <_cleanup_r>:
 8006f80:	4901      	ldr	r1, [pc, #4]	; (8006f88 <_cleanup_r+0x8>)
 8006f82:	f000 b8af 	b.w	80070e4 <_fwalk_reent>
 8006f86:	bf00      	nop
 8006f88:	08006ec1 	.word	0x08006ec1

08006f8c <__sfmoreglue>:
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	2568      	movs	r5, #104	; 0x68
 8006f90:	1e4a      	subs	r2, r1, #1
 8006f92:	4355      	muls	r5, r2
 8006f94:	460e      	mov	r6, r1
 8006f96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f9a:	f7ff fa83 	bl	80064a4 <_malloc_r>
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	b140      	cbz	r0, 8006fb4 <__sfmoreglue+0x28>
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	e9c0 1600 	strd	r1, r6, [r0]
 8006fa8:	300c      	adds	r0, #12
 8006faa:	60a0      	str	r0, [r4, #8]
 8006fac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fb0:	f7fb fde6 	bl	8002b80 <memset>
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	bd70      	pop	{r4, r5, r6, pc}

08006fb8 <__sfp_lock_acquire>:
 8006fb8:	4801      	ldr	r0, [pc, #4]	; (8006fc0 <__sfp_lock_acquire+0x8>)
 8006fba:	f000 b8b3 	b.w	8007124 <__retarget_lock_acquire_recursive>
 8006fbe:	bf00      	nop
 8006fc0:	200003e4 	.word	0x200003e4

08006fc4 <__sfp_lock_release>:
 8006fc4:	4801      	ldr	r0, [pc, #4]	; (8006fcc <__sfp_lock_release+0x8>)
 8006fc6:	f000 b8ae 	b.w	8007126 <__retarget_lock_release_recursive>
 8006fca:	bf00      	nop
 8006fcc:	200003e4 	.word	0x200003e4

08006fd0 <__sinit_lock_acquire>:
 8006fd0:	4801      	ldr	r0, [pc, #4]	; (8006fd8 <__sinit_lock_acquire+0x8>)
 8006fd2:	f000 b8a7 	b.w	8007124 <__retarget_lock_acquire_recursive>
 8006fd6:	bf00      	nop
 8006fd8:	200003df 	.word	0x200003df

08006fdc <__sinit_lock_release>:
 8006fdc:	4801      	ldr	r0, [pc, #4]	; (8006fe4 <__sinit_lock_release+0x8>)
 8006fde:	f000 b8a2 	b.w	8007126 <__retarget_lock_release_recursive>
 8006fe2:	bf00      	nop
 8006fe4:	200003df 	.word	0x200003df

08006fe8 <__sinit>:
 8006fe8:	b510      	push	{r4, lr}
 8006fea:	4604      	mov	r4, r0
 8006fec:	f7ff fff0 	bl	8006fd0 <__sinit_lock_acquire>
 8006ff0:	69a3      	ldr	r3, [r4, #24]
 8006ff2:	b11b      	cbz	r3, 8006ffc <__sinit+0x14>
 8006ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ff8:	f7ff bff0 	b.w	8006fdc <__sinit_lock_release>
 8006ffc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007000:	6523      	str	r3, [r4, #80]	; 0x50
 8007002:	4b13      	ldr	r3, [pc, #76]	; (8007050 <__sinit+0x68>)
 8007004:	4a13      	ldr	r2, [pc, #76]	; (8007054 <__sinit+0x6c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	62a2      	str	r2, [r4, #40]	; 0x28
 800700a:	42a3      	cmp	r3, r4
 800700c:	bf08      	it	eq
 800700e:	2301      	moveq	r3, #1
 8007010:	4620      	mov	r0, r4
 8007012:	bf08      	it	eq
 8007014:	61a3      	streq	r3, [r4, #24]
 8007016:	f000 f81f 	bl	8007058 <__sfp>
 800701a:	6060      	str	r0, [r4, #4]
 800701c:	4620      	mov	r0, r4
 800701e:	f000 f81b 	bl	8007058 <__sfp>
 8007022:	60a0      	str	r0, [r4, #8]
 8007024:	4620      	mov	r0, r4
 8007026:	f000 f817 	bl	8007058 <__sfp>
 800702a:	2200      	movs	r2, #0
 800702c:	2104      	movs	r1, #4
 800702e:	60e0      	str	r0, [r4, #12]
 8007030:	6860      	ldr	r0, [r4, #4]
 8007032:	f7ff ff81 	bl	8006f38 <std>
 8007036:	2201      	movs	r2, #1
 8007038:	2109      	movs	r1, #9
 800703a:	68a0      	ldr	r0, [r4, #8]
 800703c:	f7ff ff7c 	bl	8006f38 <std>
 8007040:	2202      	movs	r2, #2
 8007042:	2112      	movs	r1, #18
 8007044:	68e0      	ldr	r0, [r4, #12]
 8007046:	f7ff ff77 	bl	8006f38 <std>
 800704a:	2301      	movs	r3, #1
 800704c:	61a3      	str	r3, [r4, #24]
 800704e:	e7d1      	b.n	8006ff4 <__sinit+0xc>
 8007050:	08007430 	.word	0x08007430
 8007054:	08006f81 	.word	0x08006f81

08007058 <__sfp>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	4607      	mov	r7, r0
 800705c:	f7ff ffac 	bl	8006fb8 <__sfp_lock_acquire>
 8007060:	4b1e      	ldr	r3, [pc, #120]	; (80070dc <__sfp+0x84>)
 8007062:	681e      	ldr	r6, [r3, #0]
 8007064:	69b3      	ldr	r3, [r6, #24]
 8007066:	b913      	cbnz	r3, 800706e <__sfp+0x16>
 8007068:	4630      	mov	r0, r6
 800706a:	f7ff ffbd 	bl	8006fe8 <__sinit>
 800706e:	3648      	adds	r6, #72	; 0x48
 8007070:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007074:	3b01      	subs	r3, #1
 8007076:	d503      	bpl.n	8007080 <__sfp+0x28>
 8007078:	6833      	ldr	r3, [r6, #0]
 800707a:	b30b      	cbz	r3, 80070c0 <__sfp+0x68>
 800707c:	6836      	ldr	r6, [r6, #0]
 800707e:	e7f7      	b.n	8007070 <__sfp+0x18>
 8007080:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007084:	b9d5      	cbnz	r5, 80070bc <__sfp+0x64>
 8007086:	4b16      	ldr	r3, [pc, #88]	; (80070e0 <__sfp+0x88>)
 8007088:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800708c:	60e3      	str	r3, [r4, #12]
 800708e:	6665      	str	r5, [r4, #100]	; 0x64
 8007090:	f000 f847 	bl	8007122 <__retarget_lock_init_recursive>
 8007094:	f7ff ff96 	bl	8006fc4 <__sfp_lock_release>
 8007098:	2208      	movs	r2, #8
 800709a:	4629      	mov	r1, r5
 800709c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070a4:	6025      	str	r5, [r4, #0]
 80070a6:	61a5      	str	r5, [r4, #24]
 80070a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070ac:	f7fb fd68 	bl	8002b80 <memset>
 80070b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070b8:	4620      	mov	r0, r4
 80070ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070bc:	3468      	adds	r4, #104	; 0x68
 80070be:	e7d9      	b.n	8007074 <__sfp+0x1c>
 80070c0:	2104      	movs	r1, #4
 80070c2:	4638      	mov	r0, r7
 80070c4:	f7ff ff62 	bl	8006f8c <__sfmoreglue>
 80070c8:	4604      	mov	r4, r0
 80070ca:	6030      	str	r0, [r6, #0]
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d1d5      	bne.n	800707c <__sfp+0x24>
 80070d0:	f7ff ff78 	bl	8006fc4 <__sfp_lock_release>
 80070d4:	230c      	movs	r3, #12
 80070d6:	603b      	str	r3, [r7, #0]
 80070d8:	e7ee      	b.n	80070b8 <__sfp+0x60>
 80070da:	bf00      	nop
 80070dc:	08007430 	.word	0x08007430
 80070e0:	ffff0001 	.word	0xffff0001

080070e4 <_fwalk_reent>:
 80070e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070e8:	4606      	mov	r6, r0
 80070ea:	4688      	mov	r8, r1
 80070ec:	2700      	movs	r7, #0
 80070ee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070f6:	f1b9 0901 	subs.w	r9, r9, #1
 80070fa:	d505      	bpl.n	8007108 <_fwalk_reent+0x24>
 80070fc:	6824      	ldr	r4, [r4, #0]
 80070fe:	2c00      	cmp	r4, #0
 8007100:	d1f7      	bne.n	80070f2 <_fwalk_reent+0xe>
 8007102:	4638      	mov	r0, r7
 8007104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007108:	89ab      	ldrh	r3, [r5, #12]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d907      	bls.n	800711e <_fwalk_reent+0x3a>
 800710e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007112:	3301      	adds	r3, #1
 8007114:	d003      	beq.n	800711e <_fwalk_reent+0x3a>
 8007116:	4629      	mov	r1, r5
 8007118:	4630      	mov	r0, r6
 800711a:	47c0      	blx	r8
 800711c:	4307      	orrs	r7, r0
 800711e:	3568      	adds	r5, #104	; 0x68
 8007120:	e7e9      	b.n	80070f6 <_fwalk_reent+0x12>

08007122 <__retarget_lock_init_recursive>:
 8007122:	4770      	bx	lr

08007124 <__retarget_lock_acquire_recursive>:
 8007124:	4770      	bx	lr

08007126 <__retarget_lock_release_recursive>:
 8007126:	4770      	bx	lr

08007128 <__swhatbuf_r>:
 8007128:	b570      	push	{r4, r5, r6, lr}
 800712a:	460e      	mov	r6, r1
 800712c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007130:	4614      	mov	r4, r2
 8007132:	2900      	cmp	r1, #0
 8007134:	461d      	mov	r5, r3
 8007136:	b096      	sub	sp, #88	; 0x58
 8007138:	da07      	bge.n	800714a <__swhatbuf_r+0x22>
 800713a:	2300      	movs	r3, #0
 800713c:	602b      	str	r3, [r5, #0]
 800713e:	89b3      	ldrh	r3, [r6, #12]
 8007140:	061a      	lsls	r2, r3, #24
 8007142:	d410      	bmi.n	8007166 <__swhatbuf_r+0x3e>
 8007144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007148:	e00e      	b.n	8007168 <__swhatbuf_r+0x40>
 800714a:	466a      	mov	r2, sp
 800714c:	f000 f902 	bl	8007354 <_fstat_r>
 8007150:	2800      	cmp	r0, #0
 8007152:	dbf2      	blt.n	800713a <__swhatbuf_r+0x12>
 8007154:	9a01      	ldr	r2, [sp, #4]
 8007156:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800715a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800715e:	425a      	negs	r2, r3
 8007160:	415a      	adcs	r2, r3
 8007162:	602a      	str	r2, [r5, #0]
 8007164:	e7ee      	b.n	8007144 <__swhatbuf_r+0x1c>
 8007166:	2340      	movs	r3, #64	; 0x40
 8007168:	2000      	movs	r0, #0
 800716a:	6023      	str	r3, [r4, #0]
 800716c:	b016      	add	sp, #88	; 0x58
 800716e:	bd70      	pop	{r4, r5, r6, pc}

08007170 <__smakebuf_r>:
 8007170:	898b      	ldrh	r3, [r1, #12]
 8007172:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007174:	079d      	lsls	r5, r3, #30
 8007176:	4606      	mov	r6, r0
 8007178:	460c      	mov	r4, r1
 800717a:	d507      	bpl.n	800718c <__smakebuf_r+0x1c>
 800717c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	6123      	str	r3, [r4, #16]
 8007184:	2301      	movs	r3, #1
 8007186:	6163      	str	r3, [r4, #20]
 8007188:	b002      	add	sp, #8
 800718a:	bd70      	pop	{r4, r5, r6, pc}
 800718c:	466a      	mov	r2, sp
 800718e:	ab01      	add	r3, sp, #4
 8007190:	f7ff ffca 	bl	8007128 <__swhatbuf_r>
 8007194:	9900      	ldr	r1, [sp, #0]
 8007196:	4605      	mov	r5, r0
 8007198:	4630      	mov	r0, r6
 800719a:	f7ff f983 	bl	80064a4 <_malloc_r>
 800719e:	b948      	cbnz	r0, 80071b4 <__smakebuf_r+0x44>
 80071a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071a4:	059a      	lsls	r2, r3, #22
 80071a6:	d4ef      	bmi.n	8007188 <__smakebuf_r+0x18>
 80071a8:	f023 0303 	bic.w	r3, r3, #3
 80071ac:	f043 0302 	orr.w	r3, r3, #2
 80071b0:	81a3      	strh	r3, [r4, #12]
 80071b2:	e7e3      	b.n	800717c <__smakebuf_r+0xc>
 80071b4:	4b0d      	ldr	r3, [pc, #52]	; (80071ec <__smakebuf_r+0x7c>)
 80071b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80071b8:	89a3      	ldrh	r3, [r4, #12]
 80071ba:	6020      	str	r0, [r4, #0]
 80071bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c0:	81a3      	strh	r3, [r4, #12]
 80071c2:	9b00      	ldr	r3, [sp, #0]
 80071c4:	6120      	str	r0, [r4, #16]
 80071c6:	6163      	str	r3, [r4, #20]
 80071c8:	9b01      	ldr	r3, [sp, #4]
 80071ca:	b15b      	cbz	r3, 80071e4 <__smakebuf_r+0x74>
 80071cc:	4630      	mov	r0, r6
 80071ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071d2:	f000 f8d1 	bl	8007378 <_isatty_r>
 80071d6:	b128      	cbz	r0, 80071e4 <__smakebuf_r+0x74>
 80071d8:	89a3      	ldrh	r3, [r4, #12]
 80071da:	f023 0303 	bic.w	r3, r3, #3
 80071de:	f043 0301 	orr.w	r3, r3, #1
 80071e2:	81a3      	strh	r3, [r4, #12]
 80071e4:	89a0      	ldrh	r0, [r4, #12]
 80071e6:	4305      	orrs	r5, r0
 80071e8:	81a5      	strh	r5, [r4, #12]
 80071ea:	e7cd      	b.n	8007188 <__smakebuf_r+0x18>
 80071ec:	08006f81 	.word	0x08006f81

080071f0 <_malloc_usable_size_r>:
 80071f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071f4:	1f18      	subs	r0, r3, #4
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	bfbc      	itt	lt
 80071fa:	580b      	ldrlt	r3, [r1, r0]
 80071fc:	18c0      	addlt	r0, r0, r3
 80071fe:	4770      	bx	lr

08007200 <_raise_r>:
 8007200:	291f      	cmp	r1, #31
 8007202:	b538      	push	{r3, r4, r5, lr}
 8007204:	4604      	mov	r4, r0
 8007206:	460d      	mov	r5, r1
 8007208:	d904      	bls.n	8007214 <_raise_r+0x14>
 800720a:	2316      	movs	r3, #22
 800720c:	6003      	str	r3, [r0, #0]
 800720e:	f04f 30ff 	mov.w	r0, #4294967295
 8007212:	bd38      	pop	{r3, r4, r5, pc}
 8007214:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007216:	b112      	cbz	r2, 800721e <_raise_r+0x1e>
 8007218:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800721c:	b94b      	cbnz	r3, 8007232 <_raise_r+0x32>
 800721e:	4620      	mov	r0, r4
 8007220:	f000 f830 	bl	8007284 <_getpid_r>
 8007224:	462a      	mov	r2, r5
 8007226:	4601      	mov	r1, r0
 8007228:	4620      	mov	r0, r4
 800722a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800722e:	f000 b817 	b.w	8007260 <_kill_r>
 8007232:	2b01      	cmp	r3, #1
 8007234:	d00a      	beq.n	800724c <_raise_r+0x4c>
 8007236:	1c59      	adds	r1, r3, #1
 8007238:	d103      	bne.n	8007242 <_raise_r+0x42>
 800723a:	2316      	movs	r3, #22
 800723c:	6003      	str	r3, [r0, #0]
 800723e:	2001      	movs	r0, #1
 8007240:	e7e7      	b.n	8007212 <_raise_r+0x12>
 8007242:	2400      	movs	r4, #0
 8007244:	4628      	mov	r0, r5
 8007246:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800724a:	4798      	blx	r3
 800724c:	2000      	movs	r0, #0
 800724e:	e7e0      	b.n	8007212 <_raise_r+0x12>

08007250 <raise>:
 8007250:	4b02      	ldr	r3, [pc, #8]	; (800725c <raise+0xc>)
 8007252:	4601      	mov	r1, r0
 8007254:	6818      	ldr	r0, [r3, #0]
 8007256:	f7ff bfd3 	b.w	8007200 <_raise_r>
 800725a:	bf00      	nop
 800725c:	2000000c 	.word	0x2000000c

08007260 <_kill_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	2300      	movs	r3, #0
 8007264:	4d06      	ldr	r5, [pc, #24]	; (8007280 <_kill_r+0x20>)
 8007266:	4604      	mov	r4, r0
 8007268:	4608      	mov	r0, r1
 800726a:	4611      	mov	r1, r2
 800726c:	602b      	str	r3, [r5, #0]
 800726e:	f7f9 ffa4 	bl	80011ba <_kill>
 8007272:	1c43      	adds	r3, r0, #1
 8007274:	d102      	bne.n	800727c <_kill_r+0x1c>
 8007276:	682b      	ldr	r3, [r5, #0]
 8007278:	b103      	cbz	r3, 800727c <_kill_r+0x1c>
 800727a:	6023      	str	r3, [r4, #0]
 800727c:	bd38      	pop	{r3, r4, r5, pc}
 800727e:	bf00      	nop
 8007280:	200003d8 	.word	0x200003d8

08007284 <_getpid_r>:
 8007284:	f7f9 bf92 	b.w	80011ac <_getpid>

08007288 <__sread>:
 8007288:	b510      	push	{r4, lr}
 800728a:	460c      	mov	r4, r1
 800728c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007290:	f000 f894 	bl	80073bc <_read_r>
 8007294:	2800      	cmp	r0, #0
 8007296:	bfab      	itete	ge
 8007298:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800729a:	89a3      	ldrhlt	r3, [r4, #12]
 800729c:	181b      	addge	r3, r3, r0
 800729e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072a2:	bfac      	ite	ge
 80072a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80072a6:	81a3      	strhlt	r3, [r4, #12]
 80072a8:	bd10      	pop	{r4, pc}

080072aa <__swrite>:
 80072aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ae:	461f      	mov	r7, r3
 80072b0:	898b      	ldrh	r3, [r1, #12]
 80072b2:	4605      	mov	r5, r0
 80072b4:	05db      	lsls	r3, r3, #23
 80072b6:	460c      	mov	r4, r1
 80072b8:	4616      	mov	r6, r2
 80072ba:	d505      	bpl.n	80072c8 <__swrite+0x1e>
 80072bc:	2302      	movs	r3, #2
 80072be:	2200      	movs	r2, #0
 80072c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c4:	f000 f868 	bl	8007398 <_lseek_r>
 80072c8:	89a3      	ldrh	r3, [r4, #12]
 80072ca:	4632      	mov	r2, r6
 80072cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072d0:	81a3      	strh	r3, [r4, #12]
 80072d2:	4628      	mov	r0, r5
 80072d4:	463b      	mov	r3, r7
 80072d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072de:	f000 b817 	b.w	8007310 <_write_r>

080072e2 <__sseek>:
 80072e2:	b510      	push	{r4, lr}
 80072e4:	460c      	mov	r4, r1
 80072e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ea:	f000 f855 	bl	8007398 <_lseek_r>
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	89a3      	ldrh	r3, [r4, #12]
 80072f2:	bf15      	itete	ne
 80072f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80072f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072fe:	81a3      	strheq	r3, [r4, #12]
 8007300:	bf18      	it	ne
 8007302:	81a3      	strhne	r3, [r4, #12]
 8007304:	bd10      	pop	{r4, pc}

08007306 <__sclose>:
 8007306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800730a:	f000 b813 	b.w	8007334 <_close_r>
	...

08007310 <_write_r>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	4604      	mov	r4, r0
 8007314:	4608      	mov	r0, r1
 8007316:	4611      	mov	r1, r2
 8007318:	2200      	movs	r2, #0
 800731a:	4d05      	ldr	r5, [pc, #20]	; (8007330 <_write_r+0x20>)
 800731c:	602a      	str	r2, [r5, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	f7f9 ff82 	bl	8001228 <_write>
 8007324:	1c43      	adds	r3, r0, #1
 8007326:	d102      	bne.n	800732e <_write_r+0x1e>
 8007328:	682b      	ldr	r3, [r5, #0]
 800732a:	b103      	cbz	r3, 800732e <_write_r+0x1e>
 800732c:	6023      	str	r3, [r4, #0]
 800732e:	bd38      	pop	{r3, r4, r5, pc}
 8007330:	200003d8 	.word	0x200003d8

08007334 <_close_r>:
 8007334:	b538      	push	{r3, r4, r5, lr}
 8007336:	2300      	movs	r3, #0
 8007338:	4d05      	ldr	r5, [pc, #20]	; (8007350 <_close_r+0x1c>)
 800733a:	4604      	mov	r4, r0
 800733c:	4608      	mov	r0, r1
 800733e:	602b      	str	r3, [r5, #0]
 8007340:	f7f9 ff8e 	bl	8001260 <_close>
 8007344:	1c43      	adds	r3, r0, #1
 8007346:	d102      	bne.n	800734e <_close_r+0x1a>
 8007348:	682b      	ldr	r3, [r5, #0]
 800734a:	b103      	cbz	r3, 800734e <_close_r+0x1a>
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	bd38      	pop	{r3, r4, r5, pc}
 8007350:	200003d8 	.word	0x200003d8

08007354 <_fstat_r>:
 8007354:	b538      	push	{r3, r4, r5, lr}
 8007356:	2300      	movs	r3, #0
 8007358:	4d06      	ldr	r5, [pc, #24]	; (8007374 <_fstat_r+0x20>)
 800735a:	4604      	mov	r4, r0
 800735c:	4608      	mov	r0, r1
 800735e:	4611      	mov	r1, r2
 8007360:	602b      	str	r3, [r5, #0]
 8007362:	f7f9 ff88 	bl	8001276 <_fstat>
 8007366:	1c43      	adds	r3, r0, #1
 8007368:	d102      	bne.n	8007370 <_fstat_r+0x1c>
 800736a:	682b      	ldr	r3, [r5, #0]
 800736c:	b103      	cbz	r3, 8007370 <_fstat_r+0x1c>
 800736e:	6023      	str	r3, [r4, #0]
 8007370:	bd38      	pop	{r3, r4, r5, pc}
 8007372:	bf00      	nop
 8007374:	200003d8 	.word	0x200003d8

08007378 <_isatty_r>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	2300      	movs	r3, #0
 800737c:	4d05      	ldr	r5, [pc, #20]	; (8007394 <_isatty_r+0x1c>)
 800737e:	4604      	mov	r4, r0
 8007380:	4608      	mov	r0, r1
 8007382:	602b      	str	r3, [r5, #0]
 8007384:	f7f9 ff86 	bl	8001294 <_isatty>
 8007388:	1c43      	adds	r3, r0, #1
 800738a:	d102      	bne.n	8007392 <_isatty_r+0x1a>
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	b103      	cbz	r3, 8007392 <_isatty_r+0x1a>
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	bd38      	pop	{r3, r4, r5, pc}
 8007394:	200003d8 	.word	0x200003d8

08007398 <_lseek_r>:
 8007398:	b538      	push	{r3, r4, r5, lr}
 800739a:	4604      	mov	r4, r0
 800739c:	4608      	mov	r0, r1
 800739e:	4611      	mov	r1, r2
 80073a0:	2200      	movs	r2, #0
 80073a2:	4d05      	ldr	r5, [pc, #20]	; (80073b8 <_lseek_r+0x20>)
 80073a4:	602a      	str	r2, [r5, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	f7f9 ff7e 	bl	80012a8 <_lseek>
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	d102      	bne.n	80073b6 <_lseek_r+0x1e>
 80073b0:	682b      	ldr	r3, [r5, #0]
 80073b2:	b103      	cbz	r3, 80073b6 <_lseek_r+0x1e>
 80073b4:	6023      	str	r3, [r4, #0]
 80073b6:	bd38      	pop	{r3, r4, r5, pc}
 80073b8:	200003d8 	.word	0x200003d8

080073bc <_read_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	4604      	mov	r4, r0
 80073c0:	4608      	mov	r0, r1
 80073c2:	4611      	mov	r1, r2
 80073c4:	2200      	movs	r2, #0
 80073c6:	4d05      	ldr	r5, [pc, #20]	; (80073dc <_read_r+0x20>)
 80073c8:	602a      	str	r2, [r5, #0]
 80073ca:	461a      	mov	r2, r3
 80073cc:	f7f9 ff0f 	bl	80011ee <_read>
 80073d0:	1c43      	adds	r3, r0, #1
 80073d2:	d102      	bne.n	80073da <_read_r+0x1e>
 80073d4:	682b      	ldr	r3, [r5, #0]
 80073d6:	b103      	cbz	r3, 80073da <_read_r+0x1e>
 80073d8:	6023      	str	r3, [r4, #0]
 80073da:	bd38      	pop	{r3, r4, r5, pc}
 80073dc:	200003d8 	.word	0x200003d8

080073e0 <_init>:
 80073e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e2:	bf00      	nop
 80073e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e6:	bc08      	pop	{r3}
 80073e8:	469e      	mov	lr, r3
 80073ea:	4770      	bx	lr

080073ec <_fini>:
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ee:	bf00      	nop
 80073f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f2:	bc08      	pop	{r3}
 80073f4:	469e      	mov	lr, r3
 80073f6:	4770      	bx	lr
