
GPS_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007210  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  08007320  08007320  00017320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007804  08007804  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007804  08007804  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007804  08007804  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007804  08007804  00017804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007808  08007808  00017808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800780c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001e0  080079ec  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  080079ec  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000948d  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e33  00000000  00000000  00029696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0002b4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000698  00000000  00000000  0002bc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018436  00000000  00000000  0002c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000913b  00000000  00000000  0004472e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e69  00000000  00000000  0004d869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d16d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031e8  00000000  00000000  000d1728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007308 	.word	0x08007308

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007308 	.word	0x08007308

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	460c      	mov	r4, r1
 8000b6c:	4605      	mov	r5, r0
 8000b6e:	4621      	mov	r1, r4
 8000b70:	4628      	mov	r0, r5
 8000b72:	2200      	movs	r2, #0
 8000b74:	2300      	movs	r3, #0
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <GpsToDecimalDegrees>:
#include <stdlib.h>
#include <math.h>

GPS_t GPS;

float GpsToDecimalDegrees(const char* nmeaPos, char quadrant){
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	70fb      	strb	r3, [r7, #3]
  float v= 0;
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  if(strlen(nmeaPos)>5)
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fab0 	bl	8000150 <strlen>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b05      	cmp	r3, #5
 8000bf4:	d944      	bls.n	8000c80 <GpsToDecimalDegrees+0xa8>
  {
    char integerPart[3+1];
    int digitCount= (nmeaPos[4]=='.' ? 2 : 3);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b2e      	cmp	r3, #46	; 0x2e
 8000bfe:	d101      	bne.n	8000c04 <GpsToDecimalDegrees+0x2c>
 8000c00:	2302      	movs	r3, #2
 8000c02:	e000      	b.n	8000c06 <GpsToDecimalDegrees+0x2e>
 8000c04:	2303      	movs	r3, #3
 8000c06:	613b      	str	r3, [r7, #16]
    memcpy(integerPart, nmeaPos, digitCount);
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f001 ff3b 	bl	8002a8c <memcpy>
    integerPart[digitCount]= 0;
 8000c16:	f107 020c 	add.w	r2, r7, #12
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
    nmeaPos+= digitCount;
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	607b      	str	r3, [r7, #4]
    v= atoi(integerPart) + atof(nmeaPos)/60.;
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 fefd 	bl	8002a2e <atoi>
 8000c34:	4603      	mov	r3, r0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fbe4 	bl	8000404 <__aeabi_i2d>
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	460d      	mov	r5, r1
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f001 fef1 	bl	8002a28 <atof>
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <GpsToDecimalDegrees+0xb4>)
 8000c4c:	f7ff fd6e 	bl	800072c <__aeabi_ddiv>
 8000c50:	4602      	mov	r2, r0
 8000c52:	460b      	mov	r3, r1
 8000c54:	4620      	mov	r0, r4
 8000c56:	4629      	mov	r1, r5
 8000c58:	f7ff fa88 	bl	800016c <__adddf3>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4610      	mov	r0, r2
 8000c62:	4619      	mov	r1, r3
 8000c64:	f7ff ff30 	bl	8000ac8 <__aeabi_d2f>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	617b      	str	r3, [r7, #20]
    if(quadrant=='W' || quadrant=='S')
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	2b57      	cmp	r3, #87	; 0x57
 8000c70:	d002      	beq.n	8000c78 <GpsToDecimalDegrees+0xa0>
 8000c72:	78fb      	ldrb	r3, [r7, #3]
 8000c74:	2b53      	cmp	r3, #83	; 0x53
 8000c76:	d103      	bne.n	8000c80 <GpsToDecimalDegrees+0xa8>
      v= -v;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000c7e:	617b      	str	r3, [r7, #20]
  }
  return v;
 8000c80:	697b      	ldr	r3, [r7, #20]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bdb0      	pop	{r4, r5, r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	404e0000 	.word	0x404e0000

08000c90 <GPS_Init>:

void	GPS_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	GPS.rxIndex=0;
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <GPS_Init+0x1c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);	
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4904      	ldr	r1, [pc, #16]	; (8000cb0 <GPS_Init+0x20>)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <GPS_Init+0x24>)
 8000ca2:	f001 fbb4 	bl	800240e <HAL_UART_Receive_IT>
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000020c 	.word	0x2000020c
 8000cb0:	2000030e 	.word	0x2000030e
 8000cb4:	20000398 	.word	0x20000398

08000cb8 <GPS_CallBack>:

void	GPS_CallBack(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 8000cbc:	f000 fc2e 	bl	800151c <HAL_GetTick>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <GPS_CallBack+0x4c>)
 8000cc4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	if(GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <GPS_CallBack+0x4c>)
 8000cca:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000cce:	2bfd      	cmp	r3, #253	; 0xfd
 8000cd0:	d810      	bhi.n	8000cf4 <GPS_CallBack+0x3c>
	{
		GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <GPS_CallBack+0x4c>)
 8000cd4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <GPS_CallBack+0x4c>)
 8000cdc:	f893 1102 	ldrb.w	r1, [r3, #258]	; 0x102
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <GPS_CallBack+0x4c>)
 8000ce2:	5499      	strb	r1, [r3, r2]
		GPS.rxIndex++;
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <GPS_CallBack+0x4c>)
 8000ce6:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000cea:	3301      	adds	r3, #1
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <GPS_CallBack+0x4c>)
 8000cf0:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	}
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4904      	ldr	r1, [pc, #16]	; (8000d08 <GPS_CallBack+0x50>)
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <GPS_CallBack+0x54>)
 8000cfa:	f001 fb88 	bl	800240e <HAL_UART_Receive_IT>
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000020c 	.word	0x2000020c
 8000d08:	2000030e 	.word	0x2000030e
 8000d0c:	20000398 	.word	0x20000398

08000d10 <strtok_fr>:

char *strtok_fr (char *s, char delim, char **save_ptr)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	72fb      	strb	r3, [r7, #11]
    char *tail;
    char c;

    if (s == NULL) {
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <strtok_fr+0x1a>
        s = *save_ptr;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60fb      	str	r3, [r7, #12]
    }
    tail = s;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	617b      	str	r3, [r7, #20]
    if ((c = *tail) == '\0') {
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	74fb      	strb	r3, [r7, #19]
 8000d34:	7cfb      	ldrb	r3, [r7, #19]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d102      	bne.n	8000d40 <strtok_fr+0x30>
        s = NULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	e012      	b.n	8000d66 <strtok_fr+0x56>
    }
    else {
        do {
            if (c == delim) {
 8000d40:	7cfa      	ldrb	r2, [r7, #19]
 8000d42:	7afb      	ldrb	r3, [r7, #11]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d105      	bne.n	8000d54 <strtok_fr+0x44>
                *tail++ = '\0';
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	617a      	str	r2, [r7, #20]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
                break;
 8000d52:	e008      	b.n	8000d66 <strtok_fr+0x56>
           }
        }while ((c = *++tail) != '\0');
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	3301      	adds	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	74fb      	strb	r3, [r7, #19]
 8000d60:	7cfb      	ldrb	r3, [r7, #19]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1ec      	bne.n	8000d40 <strtok_fr+0x30>
    }
    *save_ptr = tail;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	601a      	str	r2, [r3, #0]
    return s;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	371c      	adds	r7, #28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <strtok_f>:

char *strtok_f (char *s, char delim)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	70fb      	strb	r3, [r7, #3]
    static char *save_ptr;

    return strtok_fr (s, delim, &save_ptr);
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <strtok_f+0x24>)
 8000d88:	4619      	mov	r1, r3
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffc0 	bl	8000d10 <strtok_fr>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200001fc 	.word	0x200001fc

08000da0 <GPS_Process>:

void GPS_Process(void) //$GPGGA,031956,2218.2035,N,11410.7595,E,1,04,3,9,005.9,M,-001.3,M,,*51
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
	if( (HAL_GetTick()-GPS.LastTime>50) && (GPS.rxIndex>0)){
 8000da6:	f000 fbb9 	bl	800151c <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	4b4f      	ldr	r3, [pc, #316]	; (8000eec <GPS_Process+0x14c>)
 8000dae:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b32      	cmp	r3, #50	; 0x32
 8000db6:	f240 8090 	bls.w	8000eda <GPS_Process+0x13a>
 8000dba:	4b4c      	ldr	r3, [pc, #304]	; (8000eec <GPS_Process+0x14c>)
 8000dbc:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 808a 	beq.w	8000eda <GPS_Process+0x13a>
		char *str;
		str=strstr((char*)GPS.rxBuffer,"$GPGGA,");
 8000dc6:	494a      	ldr	r1, [pc, #296]	; (8000ef0 <GPS_Process+0x150>)
 8000dc8:	4848      	ldr	r0, [pc, #288]	; (8000eec <GPS_Process+0x14c>)
 8000dca:	f002 fd0b 	bl	80037e4 <strstr>
 8000dce:	6078      	str	r0, [r7, #4]

		if(str!=NULL){
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d077      	beq.n	8000ec6 <GPS_Process+0x126>
		    GPS.GPGGA.Message_ID = strtok_f(str,',');
 8000dd6:	212c      	movs	r1, #44	; 0x2c
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ffcd 	bl	8000d78 <strtok_f>
 8000dde:	4603      	mov	r3, r0
 8000de0:	4a42      	ldr	r2, [pc, #264]	; (8000eec <GPS_Process+0x14c>)
 8000de2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
		    GPS.GPGGA.Time = strtok_f(NULL,',');
 8000de6:	212c      	movs	r1, #44	; 0x2c
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff ffc5 	bl	8000d78 <strtok_f>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a3e      	ldr	r2, [pc, #248]	; (8000eec <GPS_Process+0x14c>)
 8000df2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
//		    GPS.GPGGA.Data_Valid = strtok_f(NULL,',');
		    GPS.GPGGA.Raw_Latitude = strtok_f(NULL,',');
 8000df6:	212c      	movs	r1, #44	; 0x2c
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f7ff ffbd 	bl	8000d78 <strtok_f>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a3a      	ldr	r2, [pc, #232]	; (8000eec <GPS_Process+0x14c>)
 8000e02:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		    GPS.GPGGA.N_S = strtok_f(NULL,',');
 8000e06:	212c      	movs	r1, #44	; 0x2c
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff ffb5 	bl	8000d78 <strtok_f>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a36      	ldr	r2, [pc, #216]	; (8000eec <GPS_Process+0x14c>)
 8000e12:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
		    GPS.GPGGA.Raw_Longitude = strtok_f(NULL,',');
 8000e16:	212c      	movs	r1, #44	; 0x2c
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f7ff ffad 	bl	8000d78 <strtok_f>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4a32      	ldr	r2, [pc, #200]	; (8000eec <GPS_Process+0x14c>)
 8000e22:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
		    GPS.GPGGA.E_W = strtok_f(NULL,',');
 8000e26:	212c      	movs	r1, #44	; 0x2c
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f7ff ffa5 	bl	8000d78 <strtok_f>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a2e      	ldr	r2, [pc, #184]	; (8000eec <GPS_Process+0x14c>)
 8000e32:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

		    GPS.GPGGA.tmp_misc = strtok_f(NULL,',');
 8000e36:	212c      	movs	r1, #44	; 0x2c
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff ff9d 	bl	8000d78 <strtok_f>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4a2a      	ldr	r2, [pc, #168]	; (8000eec <GPS_Process+0x14c>)
 8000e42:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		    GPS.GPGGA.tmp_misc = strtok_f(NULL,',');
 8000e46:	212c      	movs	r1, #44	; 0x2c
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff ff95 	bl	8000d78 <strtok_f>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a26      	ldr	r2, [pc, #152]	; (8000eec <GPS_Process+0x14c>)
 8000e52:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		    GPS.GPGGA.tmp_misc = strtok_f(NULL,',');
 8000e56:	212c      	movs	r1, #44	; 0x2c
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff ff8d 	bl	8000d78 <strtok_f>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4a22      	ldr	r2, [pc, #136]	; (8000eec <GPS_Process+0x14c>)
 8000e62:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

		    GPS.GPGGA.Altitude = atof(strtok_f(NULL,','));
 8000e66:	212c      	movs	r1, #44	; 0x2c
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f7ff ff85 	bl	8000d78 <strtok_f>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f001 fdd9 	bl	8002a28 <atof>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f7ff fe23 	bl	8000ac8 <__aeabi_d2f>
 8000e82:	4603      	mov	r3, r0
 8000e84:	4a19      	ldr	r2, [pc, #100]	; (8000eec <GPS_Process+0x14c>)
 8000e86:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c

		    GPS.GPGGA.Latitude = GpsToDecimalDegrees(GPS.GPGGA.Raw_Latitude, GPS.GPGGA.N_S);
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <GPS_Process+0x14c>)
 8000e8c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000e90:	4a16      	ldr	r2, [pc, #88]	; (8000eec <GPS_Process+0x14c>)
 8000e92:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fe9c 	bl	8000bd8 <GpsToDecimalDegrees>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <GPS_Process+0x14c>)
 8000ea4:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
		    GPS.GPGGA.Longitude = GpsToDecimalDegrees(GPS.GPGGA.Raw_Longitude, GPS.GPGGA.E_W);
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <GPS_Process+0x14c>)
 8000eaa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <GPS_Process+0x14c>)
 8000eb0:	f8d2 2120 	ldr.w	r2, [r2, #288]	; 0x120
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fe8d 	bl	8000bd8 <GpsToDecimalDegrees>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <GPS_Process+0x14c>)
 8000ec2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
		}		
		memset(GPS.rxBuffer,0,sizeof(GPS.rxBuffer));
 8000ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4807      	ldr	r0, [pc, #28]	; (8000eec <GPS_Process+0x14c>)
 8000ece:	f001 fdeb 	bl	8002aa8 <memset>
		GPS.rxIndex=0;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <GPS_Process+0x14c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	}
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 8000eda:	2201      	movs	r2, #1
 8000edc:	4905      	ldr	r1, [pc, #20]	; (8000ef4 <GPS_Process+0x154>)
 8000ede:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <GPS_Process+0x158>)
 8000ee0:	f001 fa95 	bl	800240e <HAL_UART_Receive_IT>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000020c 	.word	0x2000020c
 8000ef0:	08007320 	.word	0x08007320
 8000ef4:	2000030e 	.word	0x2000030e
 8000ef8:	20000398 	.word	0x20000398

08000efc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_GPIO_Init+0x40>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <MX_GPIO_Init+0x40>)
 8000f08:	f043 0320 	orr.w	r3, r3, #32
 8000f0c:	6193      	str	r3, [r2, #24]
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_GPIO_Init+0x40>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	f003 0320 	and.w	r3, r3, #32
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <MX_GPIO_Init+0x40>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <MX_GPIO_Init+0x40>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6193      	str	r3, [r2, #24]
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <MX_GPIO_Init+0x40>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	40021000 	.word	0x40021000

08000f40 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPS_CallBack();
 8000f48:	f7ff feb6 	bl	8000cb8 <GPS_CallBack>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f58:	f000 fa88 	bl	800146c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5c:	f000 f80b 	bl	8000f76 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f60:	f7ff ffcc 	bl	8000efc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f64:	f000 f97c 	bl	8001260 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f68:	f000 f9a4 	bl	80012b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 8000f6c:	f7ff fe90 	bl	8000c90 <GPS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GPS_Process();
 8000f70:	f7ff ff16 	bl	8000da0 <GPS_Process>
 8000f74:	e7fc      	b.n	8000f70 <main+0x1c>

08000f76 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b090      	sub	sp, #64	; 0x40
 8000f7a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7c:	f107 0318 	add.w	r3, r7, #24
 8000f80:	2228      	movs	r2, #40	; 0x28
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fd8f 	bl	8002aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000faa:	2302      	movs	r3, #2
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fb4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fba:	f107 0318 	add.w	r3, r7, #24
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fdbe 	bl	8001b40 <HAL_RCC_OscConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fca:	f000 f819 	bl	8001000 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fce:	230f      	movs	r3, #15
 8000fd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f001 f829 	bl	8002040 <HAL_RCC_ClockConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ff4:	f000 f804 	bl	8001000 <Error_Handler>
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	3740      	adds	r7, #64	; 0x40
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	e7fe      	b.n	8001008 <Error_Handler+0x8>
	...

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_MspInit+0x5c>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	4a14      	ldr	r2, [pc, #80]	; (8001068 <HAL_MspInit+0x5c>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6193      	str	r3, [r2, #24]
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_MspInit+0x5c>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_MspInit+0x5c>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <HAL_MspInit+0x5c>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001034:	61d3      	str	r3, [r2, #28]
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_MspInit+0x5c>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_MspInit+0x60>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_MspInit+0x60>)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	40021000 	.word	0x40021000
 800106c:	40010000 	.word	0x40010000

08001070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <NMI_Handler+0x4>

08001076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <HardFault_Handler+0x4>

0800107c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <MemManage_Handler+0x4>

08001082 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <UsageFault_Handler+0x4>

0800108e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b6:	f000 fa1f 	bl	80014f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <USART2_IRQHandler+0x10>)
 80010c6:	f001 f9f7 	bl	80024b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000398 	.word	0x20000398

080010d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
	return 1;
 80010d8:	2301      	movs	r3, #1
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <_kill>:

int _kill(int pid, int sig)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010ec:	f001 fca4 	bl	8002a38 <__errno>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2216      	movs	r2, #22
 80010f4:	601a      	str	r2, [r3, #0]
	return -1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <_exit>:

void _exit (int status)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800110a:	f04f 31ff 	mov.w	r1, #4294967295
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffe7 	bl	80010e2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001114:	e7fe      	b.n	8001114 <_exit+0x12>

08001116 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	60f8      	str	r0, [r7, #12]
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	e00a      	b.n	800113e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001128:	f3af 8000 	nop.w
 800112c:	4601      	mov	r1, r0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	60ba      	str	r2, [r7, #8]
 8001134:	b2ca      	uxtb	r2, r1
 8001136:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3301      	adds	r3, #1
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	429a      	cmp	r2, r3
 8001144:	dbf0      	blt.n	8001128 <_read+0x12>
	}

return len;
 8001146:	687b      	ldr	r3, [r7, #4]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	e009      	b.n	8001176 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	60ba      	str	r2, [r7, #8]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3301      	adds	r3, #1
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	429a      	cmp	r2, r3
 800117c:	dbf1      	blt.n	8001162 <_write+0x12>
	}
	return len;
 800117e:	687b      	ldr	r3, [r7, #4]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <_close>:

int _close(int file)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	return -1;
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr

0800119e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ae:	605a      	str	r2, [r3, #4]
	return 0;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <_isatty>:

int _isatty(int file)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	return 1;
 80011c4:	2301      	movs	r3, #1
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
	return 0;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <_sbrk+0x5c>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <_sbrk+0x60>)
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <_sbrk+0x64>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <_sbrk+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d207      	bcs.n	8001228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001218:	f001 fc0e 	bl	8002a38 <__errno>
 800121c:	4603      	mov	r3, r0
 800121e:	220c      	movs	r2, #12
 8001220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	e009      	b.n	800123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <_sbrk+0x64>)
 8001238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20005000 	.word	0x20005000
 8001248:	00000400 	.word	0x00000400
 800124c:	20000200 	.word	0x20000200
 8001250:	200003f0 	.word	0x200003f0

08001254 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_USART1_UART_Init+0x50>)
 8001268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 800126c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001298:	f001 f86c 	bl	8002374 <HAL_UART_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012a2:	f7ff fead 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000358 	.word	0x20000358
 80012b0:	40013800 	.word	0x40013800

080012b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <MX_USART2_UART_Init+0x50>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012ec:	f001 f842 	bl	8002374 <HAL_UART_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012f6:	f7ff fe83 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000398 	.word	0x20000398
 8001304:	40004400 	.word	0x40004400

08001308 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a3b      	ldr	r2, [pc, #236]	; (8001410 <HAL_UART_MspInit+0x108>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d132      	bne.n	800138e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001328:	4b3a      	ldr	r3, [pc, #232]	; (8001414 <HAL_UART_MspInit+0x10c>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a39      	ldr	r2, [pc, #228]	; (8001414 <HAL_UART_MspInit+0x10c>)
 800132e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b37      	ldr	r3, [pc, #220]	; (8001414 <HAL_UART_MspInit+0x10c>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b34      	ldr	r3, [pc, #208]	; (8001414 <HAL_UART_MspInit+0x10c>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a33      	ldr	r2, [pc, #204]	; (8001414 <HAL_UART_MspInit+0x10c>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b31      	ldr	r3, [pc, #196]	; (8001414 <HAL_UART_MspInit+0x10c>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800135c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0318 	add.w	r3, r7, #24
 800136a:	4619      	mov	r1, r3
 800136c:	482a      	ldr	r0, [pc, #168]	; (8001418 <HAL_UART_MspInit+0x110>)
 800136e:	f000 fa63 	bl	8001838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	4619      	mov	r1, r3
 8001386:	4824      	ldr	r0, [pc, #144]	; (8001418 <HAL_UART_MspInit+0x110>)
 8001388:	f000 fa56 	bl	8001838 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800138c:	e03c      	b.n	8001408 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a22      	ldr	r2, [pc, #136]	; (800141c <HAL_UART_MspInit+0x114>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d137      	bne.n	8001408 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001398:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <HAL_UART_MspInit+0x10c>)
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	4a1d      	ldr	r2, [pc, #116]	; (8001414 <HAL_UART_MspInit+0x10c>)
 800139e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a2:	61d3      	str	r3, [r2, #28]
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_UART_MspInit+0x10c>)
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_UART_MspInit+0x10c>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a17      	ldr	r2, [pc, #92]	; (8001414 <HAL_UART_MspInit+0x10c>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_UART_MspInit+0x10c>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013c8:	2304      	movs	r3, #4
 80013ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0318 	add.w	r3, r7, #24
 80013d8:	4619      	mov	r1, r3
 80013da:	480f      	ldr	r0, [pc, #60]	; (8001418 <HAL_UART_MspInit+0x110>)
 80013dc:	f000 fa2c 	bl	8001838 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013e0:	2308      	movs	r3, #8
 80013e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0318 	add.w	r3, r7, #24
 80013f0:	4619      	mov	r1, r3
 80013f2:	4809      	ldr	r0, [pc, #36]	; (8001418 <HAL_UART_MspInit+0x110>)
 80013f4:	f000 fa20 	bl	8001838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	2026      	movs	r0, #38	; 0x26
 80013fe:	f000 f96e 	bl	80016de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001402:	2026      	movs	r0, #38	; 0x26
 8001404:	f000 f987 	bl	8001716 <HAL_NVIC_EnableIRQ>
}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40013800 	.word	0x40013800
 8001414:	40021000 	.word	0x40021000
 8001418:	40010800 	.word	0x40010800
 800141c:	40004400 	.word	0x40004400

08001420 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001420:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001422:	e003      	b.n	800142c <LoopCopyDataInit>

08001424 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001426:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001428:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800142a:	3104      	adds	r1, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800142c:	480a      	ldr	r0, [pc, #40]	; (8001458 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001430:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001432:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001434:	d3f6      	bcc.n	8001424 <CopyDataInit>
  ldr r2, =_sbss
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001438:	e002      	b.n	8001440 <LoopFillZerobss>

0800143a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800143c:	f842 3b04 	str.w	r3, [r2], #4

08001440 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001442:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001444:	d3f9      	bcc.n	800143a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001446:	f7ff ff05 	bl	8001254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800144a:	f001 fafb 	bl	8002a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800144e:	f7ff fd81 	bl	8000f54 <main>
  bx lr
 8001452:	4770      	bx	lr
  ldr r3, =_sidata
 8001454:	0800780c 	.word	0x0800780c
  ldr r0, =_sdata
 8001458:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800145c:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001460:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001464:	200003ec 	.word	0x200003ec

08001468 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC1_2_IRQHandler>
	...

0800146c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_Init+0x28>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_Init+0x28>)
 8001476:	f043 0310 	orr.w	r3, r3, #16
 800147a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147c:	2003      	movs	r0, #3
 800147e:	f000 f923 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001482:	2000      	movs	r0, #0
 8001484:	f000 f808 	bl	8001498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001488:	f7ff fdc0 	bl	800100c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40022000 	.word	0x40022000

08001498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_InitTick+0x54>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_InitTick+0x58>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 f93b 	bl	8001732 <HAL_SYSTICK_Config>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00e      	b.n	80014e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0f      	cmp	r3, #15
 80014ca:	d80a      	bhi.n	80014e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014cc:	2200      	movs	r2, #0
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f000 f903 	bl	80016de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d8:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <HAL_InitTick+0x5c>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	e000      	b.n	80014e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20000008 	.word	0x20000008
 80014f4:	20000004 	.word	0x20000004

080014f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_IncTick+0x1c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_IncTick+0x20>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4413      	add	r3, r2
 8001508:	4a03      	ldr	r2, [pc, #12]	; (8001518 <HAL_IncTick+0x20>)
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	20000008 	.word	0x20000008
 8001518:	200003d8 	.word	0x200003d8

0800151c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b02      	ldr	r3, [pc, #8]	; (800152c <HAL_GetTick+0x10>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	200003d8 	.word	0x200003d8

08001530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	db0b      	blt.n	80015be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	4906      	ldr	r1, [pc, #24]	; (80015c8 <__NVIC_EnableIRQ+0x34>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	2001      	movs	r0, #1
 80015b6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	e000e100 	.word	0xe000e100

080015cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db0a      	blt.n	80015f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	490c      	ldr	r1, [pc, #48]	; (8001618 <__NVIC_SetPriority+0x4c>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	0112      	lsls	r2, r2, #4
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	440b      	add	r3, r1
 80015f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f4:	e00a      	b.n	800160c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4908      	ldr	r1, [pc, #32]	; (800161c <__NVIC_SetPriority+0x50>)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	3b04      	subs	r3, #4
 8001604:	0112      	lsls	r2, r2, #4
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	440b      	add	r3, r1
 800160a:	761a      	strb	r2, [r3, #24]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000e100 	.word	0xe000e100
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f1c3 0307 	rsb	r3, r3, #7
 800163a:	2b04      	cmp	r3, #4
 800163c:	bf28      	it	cs
 800163e:	2304      	movcs	r3, #4
 8001640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3304      	adds	r3, #4
 8001646:	2b06      	cmp	r3, #6
 8001648:	d902      	bls.n	8001650 <NVIC_EncodePriority+0x30>
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3b03      	subs	r3, #3
 800164e:	e000      	b.n	8001652 <NVIC_EncodePriority+0x32>
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	f04f 32ff 	mov.w	r2, #4294967295
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	401a      	ands	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001668:	f04f 31ff 	mov.w	r1, #4294967295
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43d9      	mvns	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	4313      	orrs	r3, r2
         );
}
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001694:	d301      	bcc.n	800169a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <SysTick_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a2:	210f      	movs	r1, #15
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f7ff ff90 	bl	80015cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <SysTick_Config+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SysTick_Config+0x40>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff2d 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f0:	f7ff ff42 	bl	8001578 <__NVIC_GetPriorityGrouping>
 80016f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	f7ff ff90 	bl	8001620 <NVIC_EncodePriority>
 8001700:	4602      	mov	r2, r0
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff5f 	bl	80015cc <__NVIC_SetPriority>
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff35 	bl	8001594 <__NVIC_EnableIRQ>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ffa2 	bl	8001684 <SysTick_Config>
 8001740:	4603      	mov	r3, r0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800175e:	2b02      	cmp	r3, #2
 8001760:	d005      	beq.n	800176e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2204      	movs	r2, #4
 8001766:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
 800176c:	e051      	b.n	8001812 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 020e 	bic.w	r2, r2, #14
 800177c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0201 	bic.w	r2, r2, #1
 800178c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a22      	ldr	r2, [pc, #136]	; (800181c <HAL_DMA_Abort_IT+0xd0>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d029      	beq.n	80017ec <HAL_DMA_Abort_IT+0xa0>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a20      	ldr	r2, [pc, #128]	; (8001820 <HAL_DMA_Abort_IT+0xd4>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d022      	beq.n	80017e8 <HAL_DMA_Abort_IT+0x9c>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a1f      	ldr	r2, [pc, #124]	; (8001824 <HAL_DMA_Abort_IT+0xd8>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d01a      	beq.n	80017e2 <HAL_DMA_Abort_IT+0x96>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a1d      	ldr	r2, [pc, #116]	; (8001828 <HAL_DMA_Abort_IT+0xdc>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d012      	beq.n	80017dc <HAL_DMA_Abort_IT+0x90>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a1c      	ldr	r2, [pc, #112]	; (800182c <HAL_DMA_Abort_IT+0xe0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d00a      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x8a>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a1a      	ldr	r2, [pc, #104]	; (8001830 <HAL_DMA_Abort_IT+0xe4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d102      	bne.n	80017d0 <HAL_DMA_Abort_IT+0x84>
 80017ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017ce:	e00e      	b.n	80017ee <HAL_DMA_Abort_IT+0xa2>
 80017d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017d4:	e00b      	b.n	80017ee <HAL_DMA_Abort_IT+0xa2>
 80017d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017da:	e008      	b.n	80017ee <HAL_DMA_Abort_IT+0xa2>
 80017dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e0:	e005      	b.n	80017ee <HAL_DMA_Abort_IT+0xa2>
 80017e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e6:	e002      	b.n	80017ee <HAL_DMA_Abort_IT+0xa2>
 80017e8:	2310      	movs	r3, #16
 80017ea:	e000      	b.n	80017ee <HAL_DMA_Abort_IT+0xa2>
 80017ec:	2301      	movs	r3, #1
 80017ee:	4a11      	ldr	r2, [pc, #68]	; (8001834 <HAL_DMA_Abort_IT+0xe8>)
 80017f0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	4798      	blx	r3
    } 
  }
  return status;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40020008 	.word	0x40020008
 8001820:	4002001c 	.word	0x4002001c
 8001824:	40020030 	.word	0x40020030
 8001828:	40020044 	.word	0x40020044
 800182c:	40020058 	.word	0x40020058
 8001830:	4002006c 	.word	0x4002006c
 8001834:	40020000 	.word	0x40020000

08001838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001838:	b480      	push	{r7}
 800183a:	b08b      	sub	sp, #44	; 0x2c
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184a:	e169      	b.n	8001b20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800184c:	2201      	movs	r2, #1
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	429a      	cmp	r2, r3
 8001866:	f040 8158 	bne.w	8001b1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4a9a      	ldr	r2, [pc, #616]	; (8001ad8 <HAL_GPIO_Init+0x2a0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d05e      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 8001874:	4a98      	ldr	r2, [pc, #608]	; (8001ad8 <HAL_GPIO_Init+0x2a0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d875      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 800187a:	4a98      	ldr	r2, [pc, #608]	; (8001adc <HAL_GPIO_Init+0x2a4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d058      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 8001880:	4a96      	ldr	r2, [pc, #600]	; (8001adc <HAL_GPIO_Init+0x2a4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d86f      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 8001886:	4a96      	ldr	r2, [pc, #600]	; (8001ae0 <HAL_GPIO_Init+0x2a8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d052      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 800188c:	4a94      	ldr	r2, [pc, #592]	; (8001ae0 <HAL_GPIO_Init+0x2a8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d869      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 8001892:	4a94      	ldr	r2, [pc, #592]	; (8001ae4 <HAL_GPIO_Init+0x2ac>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d04c      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 8001898:	4a92      	ldr	r2, [pc, #584]	; (8001ae4 <HAL_GPIO_Init+0x2ac>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d863      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 800189e:	4a92      	ldr	r2, [pc, #584]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d046      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 80018a4:	4a90      	ldr	r2, [pc, #576]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d85d      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 80018aa:	2b12      	cmp	r3, #18
 80018ac:	d82a      	bhi.n	8001904 <HAL_GPIO_Init+0xcc>
 80018ae:	2b12      	cmp	r3, #18
 80018b0:	d859      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 80018b2:	a201      	add	r2, pc, #4	; (adr r2, 80018b8 <HAL_GPIO_Init+0x80>)
 80018b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b8:	08001933 	.word	0x08001933
 80018bc:	0800190d 	.word	0x0800190d
 80018c0:	0800191f 	.word	0x0800191f
 80018c4:	08001961 	.word	0x08001961
 80018c8:	08001967 	.word	0x08001967
 80018cc:	08001967 	.word	0x08001967
 80018d0:	08001967 	.word	0x08001967
 80018d4:	08001967 	.word	0x08001967
 80018d8:	08001967 	.word	0x08001967
 80018dc:	08001967 	.word	0x08001967
 80018e0:	08001967 	.word	0x08001967
 80018e4:	08001967 	.word	0x08001967
 80018e8:	08001967 	.word	0x08001967
 80018ec:	08001967 	.word	0x08001967
 80018f0:	08001967 	.word	0x08001967
 80018f4:	08001967 	.word	0x08001967
 80018f8:	08001967 	.word	0x08001967
 80018fc:	08001915 	.word	0x08001915
 8001900:	08001929 	.word	0x08001929
 8001904:	4a79      	ldr	r2, [pc, #484]	; (8001aec <HAL_GPIO_Init+0x2b4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d013      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800190a:	e02c      	b.n	8001966 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	623b      	str	r3, [r7, #32]
          break;
 8001912:	e029      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	3304      	adds	r3, #4
 800191a:	623b      	str	r3, [r7, #32]
          break;
 800191c:	e024      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	3308      	adds	r3, #8
 8001924:	623b      	str	r3, [r7, #32]
          break;
 8001926:	e01f      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	330c      	adds	r3, #12
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e01a      	b.n	8001968 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d102      	bne.n	8001940 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800193a:	2304      	movs	r3, #4
 800193c:	623b      	str	r3, [r7, #32]
          break;
 800193e:	e013      	b.n	8001968 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001948:	2308      	movs	r3, #8
 800194a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	611a      	str	r2, [r3, #16]
          break;
 8001952:	e009      	b.n	8001968 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001954:	2308      	movs	r3, #8
 8001956:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	615a      	str	r2, [r3, #20]
          break;
 800195e:	e003      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	e000      	b.n	8001968 <HAL_GPIO_Init+0x130>
          break;
 8001966:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2bff      	cmp	r3, #255	; 0xff
 800196c:	d801      	bhi.n	8001972 <HAL_GPIO_Init+0x13a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	e001      	b.n	8001976 <HAL_GPIO_Init+0x13e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3304      	adds	r3, #4
 8001976:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	2bff      	cmp	r3, #255	; 0xff
 800197c:	d802      	bhi.n	8001984 <HAL_GPIO_Init+0x14c>
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	e002      	b.n	800198a <HAL_GPIO_Init+0x152>
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	3b08      	subs	r3, #8
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	210f      	movs	r1, #15
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	401a      	ands	r2, r3
 800199c:	6a39      	ldr	r1, [r7, #32]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	fa01 f303 	lsl.w	r3, r1, r3
 80019a4:	431a      	orrs	r2, r3
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 80b1 	beq.w	8001b1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b8:	4b4d      	ldr	r3, [pc, #308]	; (8001af0 <HAL_GPIO_Init+0x2b8>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a4c      	ldr	r2, [pc, #304]	; (8001af0 <HAL_GPIO_Init+0x2b8>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b4a      	ldr	r3, [pc, #296]	; (8001af0 <HAL_GPIO_Init+0x2b8>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019d0:	4a48      	ldr	r2, [pc, #288]	; (8001af4 <HAL_GPIO_Init+0x2bc>)
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	3302      	adds	r3, #2
 80019d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	4013      	ands	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a40      	ldr	r2, [pc, #256]	; (8001af8 <HAL_GPIO_Init+0x2c0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d013      	beq.n	8001a24 <HAL_GPIO_Init+0x1ec>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a3f      	ldr	r2, [pc, #252]	; (8001afc <HAL_GPIO_Init+0x2c4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00d      	beq.n	8001a20 <HAL_GPIO_Init+0x1e8>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a3e      	ldr	r2, [pc, #248]	; (8001b00 <HAL_GPIO_Init+0x2c8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d007      	beq.n	8001a1c <HAL_GPIO_Init+0x1e4>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a3d      	ldr	r2, [pc, #244]	; (8001b04 <HAL_GPIO_Init+0x2cc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d101      	bne.n	8001a18 <HAL_GPIO_Init+0x1e0>
 8001a14:	2303      	movs	r3, #3
 8001a16:	e006      	b.n	8001a26 <HAL_GPIO_Init+0x1ee>
 8001a18:	2304      	movs	r3, #4
 8001a1a:	e004      	b.n	8001a26 <HAL_GPIO_Init+0x1ee>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e002      	b.n	8001a26 <HAL_GPIO_Init+0x1ee>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <HAL_GPIO_Init+0x1ee>
 8001a24:	2300      	movs	r3, #0
 8001a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a28:	f002 0203 	and.w	r2, r2, #3
 8001a2c:	0092      	lsls	r2, r2, #2
 8001a2e:	4093      	lsls	r3, r2
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a36:	492f      	ldr	r1, [pc, #188]	; (8001af4 <HAL_GPIO_Init+0x2bc>)
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d006      	beq.n	8001a5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a50:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	492c      	ldr	r1, [pc, #176]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a5e:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	4928      	ldr	r1, [pc, #160]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d006      	beq.n	8001a86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a78:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	4922      	ldr	r1, [pc, #136]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	491e      	ldr	r1, [pc, #120]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	4918      	ldr	r1, [pc, #96]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aae:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	4914      	ldr	r1, [pc, #80]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d021      	beq.n	8001b0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	490e      	ldr	r1, [pc, #56]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60cb      	str	r3, [r1, #12]
 8001ad4:	e021      	b.n	8001b1a <HAL_GPIO_Init+0x2e2>
 8001ad6:	bf00      	nop
 8001ad8:	10320000 	.word	0x10320000
 8001adc:	10310000 	.word	0x10310000
 8001ae0:	10220000 	.word	0x10220000
 8001ae4:	10210000 	.word	0x10210000
 8001ae8:	10120000 	.word	0x10120000
 8001aec:	10110000 	.word	0x10110000
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010000 	.word	0x40010000
 8001af8:	40010800 	.word	0x40010800
 8001afc:	40010c00 	.word	0x40010c00
 8001b00:	40011000 	.word	0x40011000
 8001b04:	40011400 	.word	0x40011400
 8001b08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_GPIO_Init+0x304>)
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	4909      	ldr	r1, [pc, #36]	; (8001b3c <HAL_GPIO_Init+0x304>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f47f ae8e 	bne.w	800184c <HAL_GPIO_Init+0x14>
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	372c      	adds	r7, #44	; 0x2c
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	40010400 	.word	0x40010400

08001b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e26c      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 8087 	beq.w	8001c6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b60:	4b92      	ldr	r3, [pc, #584]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d00c      	beq.n	8001b86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b6c:	4b8f      	ldr	r3, [pc, #572]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d112      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5e>
 8001b78:	4b8c      	ldr	r3, [pc, #560]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b84:	d10b      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b86:	4b89      	ldr	r3, [pc, #548]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d06c      	beq.n	8001c6c <HAL_RCC_OscConfig+0x12c>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d168      	bne.n	8001c6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e246      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba6:	d106      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x76>
 8001ba8:	4b80      	ldr	r3, [pc, #512]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a7f      	ldr	r2, [pc, #508]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	e02e      	b.n	8001c14 <HAL_RCC_OscConfig+0xd4>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x98>
 8001bbe:	4b7b      	ldr	r3, [pc, #492]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a7a      	ldr	r2, [pc, #488]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	4b78      	ldr	r3, [pc, #480]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a77      	ldr	r2, [pc, #476]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e01d      	b.n	8001c14 <HAL_RCC_OscConfig+0xd4>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0xbc>
 8001be2:	4b72      	ldr	r3, [pc, #456]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a71      	ldr	r2, [pc, #452]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b6f      	ldr	r3, [pc, #444]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a6e      	ldr	r2, [pc, #440]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e00b      	b.n	8001c14 <HAL_RCC_OscConfig+0xd4>
 8001bfc:	4b6b      	ldr	r3, [pc, #428]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a6a      	ldr	r2, [pc, #424]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b68      	ldr	r3, [pc, #416]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a67      	ldr	r2, [pc, #412]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d013      	beq.n	8001c44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fc7e 	bl	800151c <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff fc7a 	bl	800151c <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	; 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e1fa      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	4b5d      	ldr	r3, [pc, #372]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0xe4>
 8001c42:	e014      	b.n	8001c6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff fc6a 	bl	800151c <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7ff fc66 	bl	800151c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	; 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e1e6      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5e:	4b53      	ldr	r3, [pc, #332]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x10c>
 8001c6a:	e000      	b.n	8001c6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d063      	beq.n	8001d42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c7a:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00b      	beq.n	8001c9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c86:	4b49      	ldr	r3, [pc, #292]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d11c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x18c>
 8001c92:	4b46      	ldr	r3, [pc, #280]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d116      	bne.n	8001ccc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9e:	4b43      	ldr	r3, [pc, #268]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x176>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e1ba      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb6:	4b3d      	ldr	r3, [pc, #244]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4939      	ldr	r1, [pc, #228]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	e03a      	b.n	8001d42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d020      	beq.n	8001d16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd4:	4b36      	ldr	r3, [pc, #216]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7ff fc1f 	bl	800151c <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce2:	f7ff fc1b 	bl	800151c <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e19b      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d00:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4927      	ldr	r1, [pc, #156]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]
 8001d14:	e015      	b.n	8001d42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fbfe 	bl	800151c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d24:	f7ff fbfa 	bl	800151c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e17a      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d36:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d03a      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d019      	beq.n	8001d8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_RCC_OscConfig+0x274>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5c:	f7ff fbde 	bl	800151c <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d64:	f7ff fbda 	bl	800151c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e15a      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f000 fad8 	bl	8002338 <RCC_Delay>
 8001d88:	e01c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d90:	f7ff fbc4 	bl	800151c <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d96:	e00f      	b.n	8001db8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d98:	f7ff fbc0 	bl	800151c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d908      	bls.n	8001db8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e140      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	42420000 	.word	0x42420000
 8001db4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db8:	4b9e      	ldr	r3, [pc, #632]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1e9      	bne.n	8001d98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80a6 	beq.w	8001f1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd6:	4b97      	ldr	r3, [pc, #604]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10d      	bne.n	8001dfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	4b94      	ldr	r3, [pc, #592]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	4a93      	ldr	r2, [pc, #588]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dec:	61d3      	str	r3, [r2, #28]
 8001dee:	4b91      	ldr	r3, [pc, #580]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	4b8e      	ldr	r3, [pc, #568]	; (8002038 <HAL_RCC_OscConfig+0x4f8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d118      	bne.n	8001e3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0a:	4b8b      	ldr	r3, [pc, #556]	; (8002038 <HAL_RCC_OscConfig+0x4f8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a8a      	ldr	r2, [pc, #552]	; (8002038 <HAL_RCC_OscConfig+0x4f8>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e16:	f7ff fb81 	bl	800151c <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1e:	f7ff fb7d 	bl	800151c <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b64      	cmp	r3, #100	; 0x64
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e0fd      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	4b81      	ldr	r3, [pc, #516]	; (8002038 <HAL_RCC_OscConfig+0x4f8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x312>
 8001e44:	4b7b      	ldr	r3, [pc, #492]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4a7a      	ldr	r2, [pc, #488]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6213      	str	r3, [r2, #32]
 8001e50:	e02d      	b.n	8001eae <HAL_RCC_OscConfig+0x36e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x334>
 8001e5a:	4b76      	ldr	r3, [pc, #472]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a75      	ldr	r2, [pc, #468]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	4b73      	ldr	r3, [pc, #460]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4a72      	ldr	r2, [pc, #456]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	6213      	str	r3, [r2, #32]
 8001e72:	e01c      	b.n	8001eae <HAL_RCC_OscConfig+0x36e>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	2b05      	cmp	r3, #5
 8001e7a:	d10c      	bne.n	8001e96 <HAL_RCC_OscConfig+0x356>
 8001e7c:	4b6d      	ldr	r3, [pc, #436]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4a6c      	ldr	r2, [pc, #432]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	6213      	str	r3, [r2, #32]
 8001e88:	4b6a      	ldr	r3, [pc, #424]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4a69      	ldr	r2, [pc, #420]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6213      	str	r3, [r2, #32]
 8001e94:	e00b      	b.n	8001eae <HAL_RCC_OscConfig+0x36e>
 8001e96:	4b67      	ldr	r3, [pc, #412]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4a66      	ldr	r2, [pc, #408]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	6213      	str	r3, [r2, #32]
 8001ea2:	4b64      	ldr	r3, [pc, #400]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	4a63      	ldr	r2, [pc, #396]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	f023 0304 	bic.w	r3, r3, #4
 8001eac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d015      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb6:	f7ff fb31 	bl	800151c <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebe:	f7ff fb2d 	bl	800151c <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e0ab      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed4:	4b57      	ldr	r3, [pc, #348]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0ee      	beq.n	8001ebe <HAL_RCC_OscConfig+0x37e>
 8001ee0:	e014      	b.n	8001f0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee2:	f7ff fb1b 	bl	800151c <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eea:	f7ff fb17 	bl	800151c <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e095      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f00:	4b4c      	ldr	r3, [pc, #304]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1ee      	bne.n	8001eea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d105      	bne.n	8001f1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f12:	4b48      	ldr	r3, [pc, #288]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4a47      	ldr	r2, [pc, #284]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 8081 	beq.w	800202a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f28:	4b42      	ldr	r3, [pc, #264]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d061      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d146      	bne.n	8001fca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3c:	4b3f      	ldr	r3, [pc, #252]	; (800203c <HAL_RCC_OscConfig+0x4fc>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7ff faeb 	bl	800151c <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7ff fae7 	bl	800151c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e067      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5c:	4b35      	ldr	r3, [pc, #212]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f0      	bne.n	8001f4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f70:	d108      	bne.n	8001f84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f72:	4b30      	ldr	r3, [pc, #192]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	492d      	ldr	r1, [pc, #180]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f84:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a19      	ldr	r1, [r3, #32]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	430b      	orrs	r3, r1
 8001f96:	4927      	ldr	r1, [pc, #156]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f9c:	4b27      	ldr	r3, [pc, #156]	; (800203c <HAL_RCC_OscConfig+0x4fc>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7ff fabb 	bl	800151c <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001faa:	f7ff fab7 	bl	800151c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e037      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x46a>
 8001fc8:	e02f      	b.n	800202a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fca:	4b1c      	ldr	r3, [pc, #112]	; (800203c <HAL_RCC_OscConfig+0x4fc>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff faa4 	bl	800151c <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7ff faa0 	bl	800151c <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e020      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x498>
 8001ff6:	e018      	b.n	800202a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e013      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_OscConfig+0x4f4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	429a      	cmp	r2, r3
 8002016:	d106      	bne.n	8002026 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d001      	beq.n	800202a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40021000 	.word	0x40021000
 8002038:	40007000 	.word	0x40007000
 800203c:	42420060 	.word	0x42420060

08002040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0d0      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002054:	4b6a      	ldr	r3, [pc, #424]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d910      	bls.n	8002084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b67      	ldr	r3, [pc, #412]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 0207 	bic.w	r2, r3, #7
 800206a:	4965      	ldr	r1, [pc, #404]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b63      	ldr	r3, [pc, #396]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b8      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800209c:	4b59      	ldr	r3, [pc, #356]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a58      	ldr	r2, [pc, #352]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b4:	4b53      	ldr	r3, [pc, #332]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a52      	ldr	r2, [pc, #328]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b50      	ldr	r3, [pc, #320]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	494d      	ldr	r1, [pc, #308]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d040      	beq.n	8002160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d115      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e07f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	4b41      	ldr	r3, [pc, #260]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e073      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e06b      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f023 0203 	bic.w	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4936      	ldr	r1, [pc, #216]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002130:	f7ff f9f4 	bl	800151c <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	e00a      	b.n	800214e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002138:	f7ff f9f0 	bl	800151c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e053      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 020c 	and.w	r2, r3, #12
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	429a      	cmp	r2, r3
 800215e:	d1eb      	bne.n	8002138 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002160:	4b27      	ldr	r3, [pc, #156]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d210      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b24      	ldr	r3, [pc, #144]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 0207 	bic.w	r2, r3, #7
 8002176:	4922      	ldr	r1, [pc, #136]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e032      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4916      	ldr	r1, [pc, #88]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	490e      	ldr	r1, [pc, #56]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ce:	f000 f821 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	490a      	ldr	r1, [pc, #40]	; (8002208 <HAL_RCC_ClockConfig+0x1c8>)
 80021e0:	5ccb      	ldrb	r3, [r1, r3]
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <HAL_RCC_ClockConfig+0x1cc>)
 80021e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_RCC_ClockConfig+0x1d0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff f952 	bl	8001498 <HAL_InitTick>

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40022000 	.word	0x40022000
 8002204:	40021000 	.word	0x40021000
 8002208:	08007338 	.word	0x08007338
 800220c:	20000000 	.word	0x20000000
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	b490      	push	{r4, r7}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800221a:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800221c:	1d3c      	adds	r4, r7, #4
 800221e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002224:	f240 2301 	movw	r3, #513	; 0x201
 8002228:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b04      	cmp	r3, #4
 800224c:	d002      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x40>
 800224e:	2b08      	cmp	r3, #8
 8002250:	d003      	beq.n	800225a <HAL_RCC_GetSysClockFreq+0x46>
 8002252:	e02d      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002254:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002256:	623b      	str	r3, [r7, #32]
      break;
 8002258:	e02d      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	0c9b      	lsrs	r3, r3, #18
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002266:	4413      	add	r3, r2
 8002268:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800226c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	0c5b      	lsrs	r3, r3, #17
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002286:	4413      	add	r3, r2
 8002288:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800228c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002292:	fb02 f203 	mul.w	r2, r2, r3
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	fbb2 f3f3 	udiv	r3, r2, r3
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
 800229e:	e004      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022a4:	fb02 f303 	mul.w	r3, r2, r3
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	623b      	str	r3, [r7, #32]
      break;
 80022ae:	e002      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b2:	623b      	str	r3, [r7, #32]
      break;
 80022b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b6:	6a3b      	ldr	r3, [r7, #32]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3728      	adds	r7, #40	; 0x28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc90      	pop	{r4, r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	08007328 	.word	0x08007328
 80022c8:	40021000 	.word	0x40021000
 80022cc:	007a1200 	.word	0x007a1200
 80022d0:	003d0900 	.word	0x003d0900

080022d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d8:	4b02      	ldr	r3, [pc, #8]	; (80022e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	20000000 	.word	0x20000000

080022e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022ec:	f7ff fff2 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	4903      	ldr	r1, [pc, #12]	; (800230c <HAL_RCC_GetPCLK1Freq+0x24>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002304:	4618      	mov	r0, r3
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000
 800230c:	08007348 	.word	0x08007348

08002310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002314:	f7ff ffde 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 8002318:	4602      	mov	r2, r0
 800231a:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	0adb      	lsrs	r3, r3, #11
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	4903      	ldr	r1, [pc, #12]	; (8002334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002326:	5ccb      	ldrb	r3, [r1, r3]
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	08007348 	.word	0x08007348

08002338 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <RCC_Delay+0x34>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <RCC_Delay+0x38>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	0a5b      	lsrs	r3, r3, #9
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002354:	bf00      	nop
  }
  while (Delay --);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1e5a      	subs	r2, r3, #1
 800235a:	60fa      	str	r2, [r7, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f9      	bne.n	8002354 <RCC_Delay+0x1c>
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	20000000 	.word	0x20000000
 8002370:	10624dd3 	.word	0x10624dd3

08002374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e03f      	b.n	8002406 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe ffb4 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2224      	movs	r2, #36	; 0x24
 80023a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 faa7 	bl	800290c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800240e:	b480      	push	{r7}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	4613      	mov	r3, r2
 800241a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b20      	cmp	r3, #32
 8002426:	d140      	bne.n	80024aa <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <HAL_UART_Receive_IT+0x26>
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e039      	b.n	80024ac <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_UART_Receive_IT+0x38>
 8002442:	2302      	movs	r3, #2
 8002444:	e032      	b.n	80024ac <HAL_UART_Receive_IT+0x9e>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	88fa      	ldrh	r2, [r7, #6]
 8002458:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	88fa      	ldrh	r2, [r7, #6]
 800245e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2222      	movs	r2, #34	; 0x22
 800246a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002484:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0201 	orr.w	r2, r2, #1
 8002494:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 0220 	orr.w	r2, r2, #32
 80024a4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	e000      	b.n	80024ac <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80024aa:	2302      	movs	r3, #2
  }
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
	...

080024b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10d      	bne.n	800250a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_UART_IRQHandler+0x52>
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f982 	bl	800280c <UART_Receive_IT>
      return;
 8002508:	e0d0      	b.n	80026ac <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80b0 	beq.w	8002672 <HAL_UART_IRQHandler+0x1ba>
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d105      	bne.n	8002528 <HAL_UART_IRQHandler+0x70>
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80a5 	beq.w	8002672 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_UART_IRQHandler+0x90>
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002540:	f043 0201 	orr.w	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_UART_IRQHandler+0xb0>
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002560:	f043 0202 	orr.w	r2, r3, #2
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_UART_IRQHandler+0xd0>
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002580:	f043 0204 	orr.w	r2, r3, #4
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00f      	beq.n	80025b2 <HAL_UART_IRQHandler+0xfa>
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b00      	cmp	r3, #0
 800259a:	d104      	bne.n	80025a6 <HAL_UART_IRQHandler+0xee>
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025aa:	f043 0208 	orr.w	r2, r3, #8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d077      	beq.n	80026aa <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f003 0320 	and.w	r3, r3, #32
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <HAL_UART_IRQHandler+0x11c>
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	f003 0320 	and.w	r3, r3, #32
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f91c 	bl	800280c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	bf14      	ite	ne
 80025e2:	2301      	movne	r3, #1
 80025e4:	2300      	moveq	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d102      	bne.n	80025fc <HAL_UART_IRQHandler+0x144>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d031      	beq.n	8002660 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f86d 	bl	80026dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d023      	beq.n	8002658 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800261e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002624:	2b00      	cmp	r3, #0
 8002626:	d013      	beq.n	8002650 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262c:	4a21      	ldr	r2, [pc, #132]	; (80026b4 <HAL_UART_IRQHandler+0x1fc>)
 800262e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff f889 	bl	800174c <HAL_DMA_Abort_IT>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d016      	beq.n	800266e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800264a:	4610      	mov	r0, r2
 800264c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800264e:	e00e      	b.n	800266e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f83a 	bl	80026ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002656:	e00a      	b.n	800266e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f836 	bl	80026ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800265e:	e006      	b.n	800266e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f832 	bl	80026ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800266c:	e01d      	b.n	80026aa <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266e:	bf00      	nop
    return;
 8002670:	e01b      	b.n	80026aa <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_UART_IRQHandler+0x1d6>
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f859 	bl	800273e <UART_Transmit_IT>
    return;
 800268c:	e00e      	b.n	80026ac <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002694:	2b00      	cmp	r3, #0
 8002696:	d009      	beq.n	80026ac <HAL_UART_IRQHandler+0x1f4>
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d004      	beq.n	80026ac <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f89a 	bl	80027dc <UART_EndTransmit_IT>
    return;
 80026a8:	e000      	b.n	80026ac <HAL_UART_IRQHandler+0x1f4>
    return;
 80026aa:	bf00      	nop
  }
}
 80026ac:	3720      	adds	r7, #32
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	08002717 	.word	0x08002717

080026b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr

080026ca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0201 	bic.w	r2, r2, #1
 8002702:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr

08002716 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff ffca 	bl	80026ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b21      	cmp	r3, #33	; 0x21
 8002750:	d13e      	bne.n	80027d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800275a:	d114      	bne.n	8002786 <UART_Transmit_IT+0x48>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d110      	bne.n	8002786 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002778:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	1c9a      	adds	r2, r3, #2
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	621a      	str	r2, [r3, #32]
 8002784:	e008      	b.n	8002798 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	1c59      	adds	r1, r3, #1
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6211      	str	r1, [r2, #32]
 8002790:	781a      	ldrb	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4619      	mov	r1, r3
 80027a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10f      	bne.n	80027cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e000      	b.n	80027d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80027d0:	2302      	movs	r3, #2
  }
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ff5b 	bl	80026b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b22      	cmp	r3, #34	; 0x22
 800281e:	d170      	bne.n	8002902 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002828:	d117      	bne.n	800285a <UART_Receive_IT+0x4e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d113      	bne.n	800285a <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	b29b      	uxth	r3, r3
 8002844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002848:	b29a      	uxth	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	1c9a      	adds	r2, r3, #2
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
 8002858:	e026      	b.n	80028a8 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002860:	2300      	movs	r3, #0
 8002862:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800286c:	d007      	beq.n	800287e <UART_Receive_IT+0x72>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10a      	bne.n	800288c <UART_Receive_IT+0x80>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	b2da      	uxtb	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	701a      	strb	r2, [r3, #0]
 800288a:	e008      	b.n	800289e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002898:	b2da      	uxtb	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	4619      	mov	r1, r3
 80028b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d120      	bne.n	80028fe <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0220 	bic.w	r2, r2, #32
 80028ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7fe fb23 	bl	8000f40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	e002      	b.n	8002904 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	e000      	b.n	8002904 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002902:	2302      	movs	r3, #2
  }
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	4313      	orrs	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002946:	f023 030c 	bic.w	r3, r3, #12
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	430b      	orrs	r3, r1
 8002952:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a2c      	ldr	r2, [pc, #176]	; (8002a20 <UART_SetConfig+0x114>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d103      	bne.n	800297c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002974:	f7ff fccc 	bl	8002310 <HAL_RCC_GetPCLK2Freq>
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	e002      	b.n	8002982 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800297c:	f7ff fcb4 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 8002980:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	009a      	lsls	r2, r3, #2
 800298c:	441a      	add	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	fbb2 f3f3 	udiv	r3, r2, r3
 8002998:	4a22      	ldr	r2, [pc, #136]	; (8002a24 <UART_SetConfig+0x118>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	0119      	lsls	r1, r3, #4
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	009a      	lsls	r2, r3, #2
 80029ac:	441a      	add	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029b8:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <UART_SetConfig+0x118>)
 80029ba:	fba3 0302 	umull	r0, r3, r3, r2
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2064      	movs	r0, #100	; 0x64
 80029c2:	fb00 f303 	mul.w	r3, r0, r3
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	3332      	adds	r3, #50	; 0x32
 80029cc:	4a15      	ldr	r2, [pc, #84]	; (8002a24 <UART_SetConfig+0x118>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d8:	4419      	add	r1, r3
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	009a      	lsls	r2, r3, #2
 80029e4:	441a      	add	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <UART_SetConfig+0x118>)
 80029f2:	fba3 0302 	umull	r0, r3, r3, r2
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	2064      	movs	r0, #100	; 0x64
 80029fa:	fb00 f303 	mul.w	r3, r0, r3
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	3332      	adds	r3, #50	; 0x32
 8002a04:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <UART_SetConfig+0x118>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	f003 020f 	and.w	r2, r3, #15
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	440a      	add	r2, r1
 8002a16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a18:	bf00      	nop
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40013800 	.word	0x40013800
 8002a24:	51eb851f 	.word	0x51eb851f

08002a28 <atof>:
 8002a28:	2100      	movs	r1, #0
 8002a2a:	f001 bd0f 	b.w	800444c <strtod>

08002a2e <atoi>:
 8002a2e:	220a      	movs	r2, #10
 8002a30:	2100      	movs	r1, #0
 8002a32:	f001 bd9f 	b.w	8004574 <strtol>
	...

08002a38 <__errno>:
 8002a38:	4b01      	ldr	r3, [pc, #4]	; (8002a40 <__errno+0x8>)
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	2000000c 	.word	0x2000000c

08002a44 <__libc_init_array>:
 8002a44:	b570      	push	{r4, r5, r6, lr}
 8002a46:	2600      	movs	r6, #0
 8002a48:	4d0c      	ldr	r5, [pc, #48]	; (8002a7c <__libc_init_array+0x38>)
 8002a4a:	4c0d      	ldr	r4, [pc, #52]	; (8002a80 <__libc_init_array+0x3c>)
 8002a4c:	1b64      	subs	r4, r4, r5
 8002a4e:	10a4      	asrs	r4, r4, #2
 8002a50:	42a6      	cmp	r6, r4
 8002a52:	d109      	bne.n	8002a68 <__libc_init_array+0x24>
 8002a54:	f004 fc58 	bl	8007308 <_init>
 8002a58:	2600      	movs	r6, #0
 8002a5a:	4d0a      	ldr	r5, [pc, #40]	; (8002a84 <__libc_init_array+0x40>)
 8002a5c:	4c0a      	ldr	r4, [pc, #40]	; (8002a88 <__libc_init_array+0x44>)
 8002a5e:	1b64      	subs	r4, r4, r5
 8002a60:	10a4      	asrs	r4, r4, #2
 8002a62:	42a6      	cmp	r6, r4
 8002a64:	d105      	bne.n	8002a72 <__libc_init_array+0x2e>
 8002a66:	bd70      	pop	{r4, r5, r6, pc}
 8002a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a6c:	4798      	blx	r3
 8002a6e:	3601      	adds	r6, #1
 8002a70:	e7ee      	b.n	8002a50 <__libc_init_array+0xc>
 8002a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a76:	4798      	blx	r3
 8002a78:	3601      	adds	r6, #1
 8002a7a:	e7f2      	b.n	8002a62 <__libc_init_array+0x1e>
 8002a7c:	08007804 	.word	0x08007804
 8002a80:	08007804 	.word	0x08007804
 8002a84:	08007804 	.word	0x08007804
 8002a88:	08007808 	.word	0x08007808

08002a8c <memcpy>:
 8002a8c:	440a      	add	r2, r1
 8002a8e:	4291      	cmp	r1, r2
 8002a90:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a94:	d100      	bne.n	8002a98 <memcpy+0xc>
 8002a96:	4770      	bx	lr
 8002a98:	b510      	push	{r4, lr}
 8002a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a9e:	4291      	cmp	r1, r2
 8002aa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002aa4:	d1f9      	bne.n	8002a9a <memcpy+0xe>
 8002aa6:	bd10      	pop	{r4, pc}

08002aa8 <memset>:
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4402      	add	r2, r0
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d100      	bne.n	8002ab2 <memset+0xa>
 8002ab0:	4770      	bx	lr
 8002ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ab6:	e7f9      	b.n	8002aac <memset+0x4>

08002ab8 <__cvt>:
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002abe:	461f      	mov	r7, r3
 8002ac0:	bfbb      	ittet	lt
 8002ac2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002ac6:	461f      	movlt	r7, r3
 8002ac8:	2300      	movge	r3, #0
 8002aca:	232d      	movlt	r3, #45	; 0x2d
 8002acc:	b088      	sub	sp, #32
 8002ace:	4614      	mov	r4, r2
 8002ad0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002ad2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002ad4:	7013      	strb	r3, [r2, #0]
 8002ad6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002ad8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002adc:	f023 0820 	bic.w	r8, r3, #32
 8002ae0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ae4:	d005      	beq.n	8002af2 <__cvt+0x3a>
 8002ae6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002aea:	d100      	bne.n	8002aee <__cvt+0x36>
 8002aec:	3501      	adds	r5, #1
 8002aee:	2302      	movs	r3, #2
 8002af0:	e000      	b.n	8002af4 <__cvt+0x3c>
 8002af2:	2303      	movs	r3, #3
 8002af4:	aa07      	add	r2, sp, #28
 8002af6:	9204      	str	r2, [sp, #16]
 8002af8:	aa06      	add	r2, sp, #24
 8002afa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002afe:	e9cd 3500 	strd	r3, r5, [sp]
 8002b02:	4622      	mov	r2, r4
 8002b04:	463b      	mov	r3, r7
 8002b06:	f001 fdcf 	bl	80046a8 <_dtoa_r>
 8002b0a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002b0e:	4606      	mov	r6, r0
 8002b10:	d102      	bne.n	8002b18 <__cvt+0x60>
 8002b12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b14:	07db      	lsls	r3, r3, #31
 8002b16:	d522      	bpl.n	8002b5e <__cvt+0xa6>
 8002b18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002b1c:	eb06 0905 	add.w	r9, r6, r5
 8002b20:	d110      	bne.n	8002b44 <__cvt+0x8c>
 8002b22:	7833      	ldrb	r3, [r6, #0]
 8002b24:	2b30      	cmp	r3, #48	; 0x30
 8002b26:	d10a      	bne.n	8002b3e <__cvt+0x86>
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	4639      	mov	r1, r7
 8002b30:	f7fd ff3a 	bl	80009a8 <__aeabi_dcmpeq>
 8002b34:	b918      	cbnz	r0, 8002b3e <__cvt+0x86>
 8002b36:	f1c5 0501 	rsb	r5, r5, #1
 8002b3a:	f8ca 5000 	str.w	r5, [sl]
 8002b3e:	f8da 3000 	ldr.w	r3, [sl]
 8002b42:	4499      	add	r9, r3
 8002b44:	2200      	movs	r2, #0
 8002b46:	2300      	movs	r3, #0
 8002b48:	4620      	mov	r0, r4
 8002b4a:	4639      	mov	r1, r7
 8002b4c:	f7fd ff2c 	bl	80009a8 <__aeabi_dcmpeq>
 8002b50:	b108      	cbz	r0, 8002b56 <__cvt+0x9e>
 8002b52:	f8cd 901c 	str.w	r9, [sp, #28]
 8002b56:	2230      	movs	r2, #48	; 0x30
 8002b58:	9b07      	ldr	r3, [sp, #28]
 8002b5a:	454b      	cmp	r3, r9
 8002b5c:	d307      	bcc.n	8002b6e <__cvt+0xb6>
 8002b5e:	4630      	mov	r0, r6
 8002b60:	9b07      	ldr	r3, [sp, #28]
 8002b62:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002b64:	1b9b      	subs	r3, r3, r6
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	b008      	add	sp, #32
 8002b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b6e:	1c59      	adds	r1, r3, #1
 8002b70:	9107      	str	r1, [sp, #28]
 8002b72:	701a      	strb	r2, [r3, #0]
 8002b74:	e7f0      	b.n	8002b58 <__cvt+0xa0>

08002b76 <__exponent>:
 8002b76:	4603      	mov	r3, r0
 8002b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b7a:	2900      	cmp	r1, #0
 8002b7c:	f803 2b02 	strb.w	r2, [r3], #2
 8002b80:	bfb6      	itet	lt
 8002b82:	222d      	movlt	r2, #45	; 0x2d
 8002b84:	222b      	movge	r2, #43	; 0x2b
 8002b86:	4249      	neglt	r1, r1
 8002b88:	2909      	cmp	r1, #9
 8002b8a:	7042      	strb	r2, [r0, #1]
 8002b8c:	dd2b      	ble.n	8002be6 <__exponent+0x70>
 8002b8e:	f10d 0407 	add.w	r4, sp, #7
 8002b92:	46a4      	mov	ip, r4
 8002b94:	270a      	movs	r7, #10
 8002b96:	fb91 f6f7 	sdiv	r6, r1, r7
 8002b9a:	460a      	mov	r2, r1
 8002b9c:	46a6      	mov	lr, r4
 8002b9e:	fb07 1516 	mls	r5, r7, r6, r1
 8002ba2:	2a63      	cmp	r2, #99	; 0x63
 8002ba4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002ba8:	4631      	mov	r1, r6
 8002baa:	f104 34ff 	add.w	r4, r4, #4294967295
 8002bae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002bb2:	dcf0      	bgt.n	8002b96 <__exponent+0x20>
 8002bb4:	3130      	adds	r1, #48	; 0x30
 8002bb6:	f1ae 0502 	sub.w	r5, lr, #2
 8002bba:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	1c44      	adds	r4, r0, #1
 8002bc2:	4561      	cmp	r1, ip
 8002bc4:	d30a      	bcc.n	8002bdc <__exponent+0x66>
 8002bc6:	f10d 0209 	add.w	r2, sp, #9
 8002bca:	eba2 020e 	sub.w	r2, r2, lr
 8002bce:	4565      	cmp	r5, ip
 8002bd0:	bf88      	it	hi
 8002bd2:	2200      	movhi	r2, #0
 8002bd4:	4413      	add	r3, r2
 8002bd6:	1a18      	subs	r0, r3, r0
 8002bd8:	b003      	add	sp, #12
 8002bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bdc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002be0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002be4:	e7ed      	b.n	8002bc2 <__exponent+0x4c>
 8002be6:	2330      	movs	r3, #48	; 0x30
 8002be8:	3130      	adds	r1, #48	; 0x30
 8002bea:	7083      	strb	r3, [r0, #2]
 8002bec:	70c1      	strb	r1, [r0, #3]
 8002bee:	1d03      	adds	r3, r0, #4
 8002bf0:	e7f1      	b.n	8002bd6 <__exponent+0x60>
	...

08002bf4 <_printf_float>:
 8002bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bf8:	b091      	sub	sp, #68	; 0x44
 8002bfa:	460c      	mov	r4, r1
 8002bfc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002c00:	4616      	mov	r6, r2
 8002c02:	461f      	mov	r7, r3
 8002c04:	4605      	mov	r5, r0
 8002c06:	f002 fea3 	bl	8005950 <_localeconv_r>
 8002c0a:	6803      	ldr	r3, [r0, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8002c10:	f7fd fa9e 	bl	8000150 <strlen>
 8002c14:	2300      	movs	r3, #0
 8002c16:	930e      	str	r3, [sp, #56]	; 0x38
 8002c18:	f8d8 3000 	ldr.w	r3, [r8]
 8002c1c:	900a      	str	r0, [sp, #40]	; 0x28
 8002c1e:	3307      	adds	r3, #7
 8002c20:	f023 0307 	bic.w	r3, r3, #7
 8002c24:	f103 0208 	add.w	r2, r3, #8
 8002c28:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002c2c:	f8d4 b000 	ldr.w	fp, [r4]
 8002c30:	f8c8 2000 	str.w	r2, [r8]
 8002c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c38:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002c3c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002c40:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002c44:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c46:	f04f 32ff 	mov.w	r2, #4294967295
 8002c4a:	4640      	mov	r0, r8
 8002c4c:	4b9c      	ldr	r3, [pc, #624]	; (8002ec0 <_printf_float+0x2cc>)
 8002c4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002c50:	f7fd fedc 	bl	8000a0c <__aeabi_dcmpun>
 8002c54:	bb70      	cbnz	r0, 8002cb4 <_printf_float+0xc0>
 8002c56:	f04f 32ff 	mov.w	r2, #4294967295
 8002c5a:	4640      	mov	r0, r8
 8002c5c:	4b98      	ldr	r3, [pc, #608]	; (8002ec0 <_printf_float+0x2cc>)
 8002c5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002c60:	f7fd feb6 	bl	80009d0 <__aeabi_dcmple>
 8002c64:	bb30      	cbnz	r0, 8002cb4 <_printf_float+0xc0>
 8002c66:	2200      	movs	r2, #0
 8002c68:	2300      	movs	r3, #0
 8002c6a:	4640      	mov	r0, r8
 8002c6c:	4651      	mov	r1, sl
 8002c6e:	f7fd fea5 	bl	80009bc <__aeabi_dcmplt>
 8002c72:	b110      	cbz	r0, 8002c7a <_printf_float+0x86>
 8002c74:	232d      	movs	r3, #45	; 0x2d
 8002c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c7a:	4b92      	ldr	r3, [pc, #584]	; (8002ec4 <_printf_float+0x2d0>)
 8002c7c:	4892      	ldr	r0, [pc, #584]	; (8002ec8 <_printf_float+0x2d4>)
 8002c7e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002c82:	bf94      	ite	ls
 8002c84:	4698      	movls	r8, r3
 8002c86:	4680      	movhi	r8, r0
 8002c88:	2303      	movs	r3, #3
 8002c8a:	f04f 0a00 	mov.w	sl, #0
 8002c8e:	6123      	str	r3, [r4, #16]
 8002c90:	f02b 0304 	bic.w	r3, fp, #4
 8002c94:	6023      	str	r3, [r4, #0]
 8002c96:	4633      	mov	r3, r6
 8002c98:	4621      	mov	r1, r4
 8002c9a:	4628      	mov	r0, r5
 8002c9c:	9700      	str	r7, [sp, #0]
 8002c9e:	aa0f      	add	r2, sp, #60	; 0x3c
 8002ca0:	f000 f9d4 	bl	800304c <_printf_common>
 8002ca4:	3001      	adds	r0, #1
 8002ca6:	f040 8090 	bne.w	8002dca <_printf_float+0x1d6>
 8002caa:	f04f 30ff 	mov.w	r0, #4294967295
 8002cae:	b011      	add	sp, #68	; 0x44
 8002cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cb4:	4642      	mov	r2, r8
 8002cb6:	4653      	mov	r3, sl
 8002cb8:	4640      	mov	r0, r8
 8002cba:	4651      	mov	r1, sl
 8002cbc:	f7fd fea6 	bl	8000a0c <__aeabi_dcmpun>
 8002cc0:	b148      	cbz	r0, 8002cd6 <_printf_float+0xe2>
 8002cc2:	f1ba 0f00 	cmp.w	sl, #0
 8002cc6:	bfb8      	it	lt
 8002cc8:	232d      	movlt	r3, #45	; 0x2d
 8002cca:	4880      	ldr	r0, [pc, #512]	; (8002ecc <_printf_float+0x2d8>)
 8002ccc:	bfb8      	it	lt
 8002cce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002cd2:	4b7f      	ldr	r3, [pc, #508]	; (8002ed0 <_printf_float+0x2dc>)
 8002cd4:	e7d3      	b.n	8002c7e <_printf_float+0x8a>
 8002cd6:	6863      	ldr	r3, [r4, #4]
 8002cd8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	d142      	bne.n	8002d66 <_printf_float+0x172>
 8002ce0:	2306      	movs	r3, #6
 8002ce2:	6063      	str	r3, [r4, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	9206      	str	r2, [sp, #24]
 8002ce8:	aa0e      	add	r2, sp, #56	; 0x38
 8002cea:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002cee:	aa0d      	add	r2, sp, #52	; 0x34
 8002cf0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002cf4:	9203      	str	r2, [sp, #12]
 8002cf6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002cfa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002cfe:	6023      	str	r3, [r4, #0]
 8002d00:	6863      	ldr	r3, [r4, #4]
 8002d02:	4642      	mov	r2, r8
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	4628      	mov	r0, r5
 8002d08:	4653      	mov	r3, sl
 8002d0a:	910b      	str	r1, [sp, #44]	; 0x2c
 8002d0c:	f7ff fed4 	bl	8002ab8 <__cvt>
 8002d10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d12:	4680      	mov	r8, r0
 8002d14:	2947      	cmp	r1, #71	; 0x47
 8002d16:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002d18:	d108      	bne.n	8002d2c <_printf_float+0x138>
 8002d1a:	1cc8      	adds	r0, r1, #3
 8002d1c:	db02      	blt.n	8002d24 <_printf_float+0x130>
 8002d1e:	6863      	ldr	r3, [r4, #4]
 8002d20:	4299      	cmp	r1, r3
 8002d22:	dd40      	ble.n	8002da6 <_printf_float+0x1b2>
 8002d24:	f1a9 0902 	sub.w	r9, r9, #2
 8002d28:	fa5f f989 	uxtb.w	r9, r9
 8002d2c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002d30:	d81f      	bhi.n	8002d72 <_printf_float+0x17e>
 8002d32:	464a      	mov	r2, r9
 8002d34:	3901      	subs	r1, #1
 8002d36:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002d3a:	910d      	str	r1, [sp, #52]	; 0x34
 8002d3c:	f7ff ff1b 	bl	8002b76 <__exponent>
 8002d40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d42:	4682      	mov	sl, r0
 8002d44:	1813      	adds	r3, r2, r0
 8002d46:	2a01      	cmp	r2, #1
 8002d48:	6123      	str	r3, [r4, #16]
 8002d4a:	dc02      	bgt.n	8002d52 <_printf_float+0x15e>
 8002d4c:	6822      	ldr	r2, [r4, #0]
 8002d4e:	07d2      	lsls	r2, r2, #31
 8002d50:	d501      	bpl.n	8002d56 <_printf_float+0x162>
 8002d52:	3301      	adds	r3, #1
 8002d54:	6123      	str	r3, [r4, #16]
 8002d56:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d09b      	beq.n	8002c96 <_printf_float+0xa2>
 8002d5e:	232d      	movs	r3, #45	; 0x2d
 8002d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d64:	e797      	b.n	8002c96 <_printf_float+0xa2>
 8002d66:	2947      	cmp	r1, #71	; 0x47
 8002d68:	d1bc      	bne.n	8002ce4 <_printf_float+0xf0>
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1ba      	bne.n	8002ce4 <_printf_float+0xf0>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e7b7      	b.n	8002ce2 <_printf_float+0xee>
 8002d72:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002d76:	d118      	bne.n	8002daa <_printf_float+0x1b6>
 8002d78:	2900      	cmp	r1, #0
 8002d7a:	6863      	ldr	r3, [r4, #4]
 8002d7c:	dd0b      	ble.n	8002d96 <_printf_float+0x1a2>
 8002d7e:	6121      	str	r1, [r4, #16]
 8002d80:	b913      	cbnz	r3, 8002d88 <_printf_float+0x194>
 8002d82:	6822      	ldr	r2, [r4, #0]
 8002d84:	07d0      	lsls	r0, r2, #31
 8002d86:	d502      	bpl.n	8002d8e <_printf_float+0x19a>
 8002d88:	3301      	adds	r3, #1
 8002d8a:	440b      	add	r3, r1
 8002d8c:	6123      	str	r3, [r4, #16]
 8002d8e:	f04f 0a00 	mov.w	sl, #0
 8002d92:	65a1      	str	r1, [r4, #88]	; 0x58
 8002d94:	e7df      	b.n	8002d56 <_printf_float+0x162>
 8002d96:	b913      	cbnz	r3, 8002d9e <_printf_float+0x1aa>
 8002d98:	6822      	ldr	r2, [r4, #0]
 8002d9a:	07d2      	lsls	r2, r2, #31
 8002d9c:	d501      	bpl.n	8002da2 <_printf_float+0x1ae>
 8002d9e:	3302      	adds	r3, #2
 8002da0:	e7f4      	b.n	8002d8c <_printf_float+0x198>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e7f2      	b.n	8002d8c <_printf_float+0x198>
 8002da6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002daa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dac:	4299      	cmp	r1, r3
 8002dae:	db05      	blt.n	8002dbc <_printf_float+0x1c8>
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	6121      	str	r1, [r4, #16]
 8002db4:	07d8      	lsls	r0, r3, #31
 8002db6:	d5ea      	bpl.n	8002d8e <_printf_float+0x19a>
 8002db8:	1c4b      	adds	r3, r1, #1
 8002dba:	e7e7      	b.n	8002d8c <_printf_float+0x198>
 8002dbc:	2900      	cmp	r1, #0
 8002dbe:	bfcc      	ite	gt
 8002dc0:	2201      	movgt	r2, #1
 8002dc2:	f1c1 0202 	rsble	r2, r1, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	e7e0      	b.n	8002d8c <_printf_float+0x198>
 8002dca:	6823      	ldr	r3, [r4, #0]
 8002dcc:	055a      	lsls	r2, r3, #21
 8002dce:	d407      	bmi.n	8002de0 <_printf_float+0x1ec>
 8002dd0:	6923      	ldr	r3, [r4, #16]
 8002dd2:	4642      	mov	r2, r8
 8002dd4:	4631      	mov	r1, r6
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	47b8      	blx	r7
 8002dda:	3001      	adds	r0, #1
 8002ddc:	d12b      	bne.n	8002e36 <_printf_float+0x242>
 8002dde:	e764      	b.n	8002caa <_printf_float+0xb6>
 8002de0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002de4:	f240 80dd 	bls.w	8002fa2 <_printf_float+0x3ae>
 8002de8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002dec:	2200      	movs	r2, #0
 8002dee:	2300      	movs	r3, #0
 8002df0:	f7fd fdda 	bl	80009a8 <__aeabi_dcmpeq>
 8002df4:	2800      	cmp	r0, #0
 8002df6:	d033      	beq.n	8002e60 <_printf_float+0x26c>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	4631      	mov	r1, r6
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	4a35      	ldr	r2, [pc, #212]	; (8002ed4 <_printf_float+0x2e0>)
 8002e00:	47b8      	blx	r7
 8002e02:	3001      	adds	r0, #1
 8002e04:	f43f af51 	beq.w	8002caa <_printf_float+0xb6>
 8002e08:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	db02      	blt.n	8002e16 <_printf_float+0x222>
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	07d8      	lsls	r0, r3, #31
 8002e14:	d50f      	bpl.n	8002e36 <_printf_float+0x242>
 8002e16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e1a:	4631      	mov	r1, r6
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	47b8      	blx	r7
 8002e20:	3001      	adds	r0, #1
 8002e22:	f43f af42 	beq.w	8002caa <_printf_float+0xb6>
 8002e26:	f04f 0800 	mov.w	r8, #0
 8002e2a:	f104 091a 	add.w	r9, r4, #26
 8002e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e30:	3b01      	subs	r3, #1
 8002e32:	4543      	cmp	r3, r8
 8002e34:	dc09      	bgt.n	8002e4a <_printf_float+0x256>
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	079b      	lsls	r3, r3, #30
 8002e3a:	f100 8102 	bmi.w	8003042 <_printf_float+0x44e>
 8002e3e:	68e0      	ldr	r0, [r4, #12]
 8002e40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002e42:	4298      	cmp	r0, r3
 8002e44:	bfb8      	it	lt
 8002e46:	4618      	movlt	r0, r3
 8002e48:	e731      	b.n	8002cae <_printf_float+0xba>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	464a      	mov	r2, r9
 8002e4e:	4631      	mov	r1, r6
 8002e50:	4628      	mov	r0, r5
 8002e52:	47b8      	blx	r7
 8002e54:	3001      	adds	r0, #1
 8002e56:	f43f af28 	beq.w	8002caa <_printf_float+0xb6>
 8002e5a:	f108 0801 	add.w	r8, r8, #1
 8002e5e:	e7e6      	b.n	8002e2e <_printf_float+0x23a>
 8002e60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	dc38      	bgt.n	8002ed8 <_printf_float+0x2e4>
 8002e66:	2301      	movs	r3, #1
 8002e68:	4631      	mov	r1, r6
 8002e6a:	4628      	mov	r0, r5
 8002e6c:	4a19      	ldr	r2, [pc, #100]	; (8002ed4 <_printf_float+0x2e0>)
 8002e6e:	47b8      	blx	r7
 8002e70:	3001      	adds	r0, #1
 8002e72:	f43f af1a 	beq.w	8002caa <_printf_float+0xb6>
 8002e76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	d102      	bne.n	8002e84 <_printf_float+0x290>
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	07d9      	lsls	r1, r3, #31
 8002e82:	d5d8      	bpl.n	8002e36 <_printf_float+0x242>
 8002e84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e88:	4631      	mov	r1, r6
 8002e8a:	4628      	mov	r0, r5
 8002e8c:	47b8      	blx	r7
 8002e8e:	3001      	adds	r0, #1
 8002e90:	f43f af0b 	beq.w	8002caa <_printf_float+0xb6>
 8002e94:	f04f 0900 	mov.w	r9, #0
 8002e98:	f104 0a1a 	add.w	sl, r4, #26
 8002e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e9e:	425b      	negs	r3, r3
 8002ea0:	454b      	cmp	r3, r9
 8002ea2:	dc01      	bgt.n	8002ea8 <_printf_float+0x2b4>
 8002ea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ea6:	e794      	b.n	8002dd2 <_printf_float+0x1de>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	4652      	mov	r2, sl
 8002eac:	4631      	mov	r1, r6
 8002eae:	4628      	mov	r0, r5
 8002eb0:	47b8      	blx	r7
 8002eb2:	3001      	adds	r0, #1
 8002eb4:	f43f aef9 	beq.w	8002caa <_printf_float+0xb6>
 8002eb8:	f109 0901 	add.w	r9, r9, #1
 8002ebc:	e7ee      	b.n	8002e9c <_printf_float+0x2a8>
 8002ebe:	bf00      	nop
 8002ec0:	7fefffff 	.word	0x7fefffff
 8002ec4:	08007354 	.word	0x08007354
 8002ec8:	08007358 	.word	0x08007358
 8002ecc:	08007360 	.word	0x08007360
 8002ed0:	0800735c 	.word	0x0800735c
 8002ed4:	08007364 	.word	0x08007364
 8002ed8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002eda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002edc:	429a      	cmp	r2, r3
 8002ede:	bfa8      	it	ge
 8002ee0:	461a      	movge	r2, r3
 8002ee2:	2a00      	cmp	r2, #0
 8002ee4:	4691      	mov	r9, r2
 8002ee6:	dc37      	bgt.n	8002f58 <_printf_float+0x364>
 8002ee8:	f04f 0b00 	mov.w	fp, #0
 8002eec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ef0:	f104 021a 	add.w	r2, r4, #26
 8002ef4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002ef8:	ebaa 0309 	sub.w	r3, sl, r9
 8002efc:	455b      	cmp	r3, fp
 8002efe:	dc33      	bgt.n	8002f68 <_printf_float+0x374>
 8002f00:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f04:	429a      	cmp	r2, r3
 8002f06:	db3b      	blt.n	8002f80 <_printf_float+0x38c>
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	07da      	lsls	r2, r3, #31
 8002f0c:	d438      	bmi.n	8002f80 <_printf_float+0x38c>
 8002f0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f10:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002f12:	eba2 030a 	sub.w	r3, r2, sl
 8002f16:	eba2 0901 	sub.w	r9, r2, r1
 8002f1a:	4599      	cmp	r9, r3
 8002f1c:	bfa8      	it	ge
 8002f1e:	4699      	movge	r9, r3
 8002f20:	f1b9 0f00 	cmp.w	r9, #0
 8002f24:	dc34      	bgt.n	8002f90 <_printf_float+0x39c>
 8002f26:	f04f 0800 	mov.w	r8, #0
 8002f2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f2e:	f104 0a1a 	add.w	sl, r4, #26
 8002f32:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	eba3 0309 	sub.w	r3, r3, r9
 8002f3c:	4543      	cmp	r3, r8
 8002f3e:	f77f af7a 	ble.w	8002e36 <_printf_float+0x242>
 8002f42:	2301      	movs	r3, #1
 8002f44:	4652      	mov	r2, sl
 8002f46:	4631      	mov	r1, r6
 8002f48:	4628      	mov	r0, r5
 8002f4a:	47b8      	blx	r7
 8002f4c:	3001      	adds	r0, #1
 8002f4e:	f43f aeac 	beq.w	8002caa <_printf_float+0xb6>
 8002f52:	f108 0801 	add.w	r8, r8, #1
 8002f56:	e7ec      	b.n	8002f32 <_printf_float+0x33e>
 8002f58:	4613      	mov	r3, r2
 8002f5a:	4631      	mov	r1, r6
 8002f5c:	4642      	mov	r2, r8
 8002f5e:	4628      	mov	r0, r5
 8002f60:	47b8      	blx	r7
 8002f62:	3001      	adds	r0, #1
 8002f64:	d1c0      	bne.n	8002ee8 <_printf_float+0x2f4>
 8002f66:	e6a0      	b.n	8002caa <_printf_float+0xb6>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	4631      	mov	r1, r6
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	920b      	str	r2, [sp, #44]	; 0x2c
 8002f70:	47b8      	blx	r7
 8002f72:	3001      	adds	r0, #1
 8002f74:	f43f ae99 	beq.w	8002caa <_printf_float+0xb6>
 8002f78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002f7a:	f10b 0b01 	add.w	fp, fp, #1
 8002f7e:	e7b9      	b.n	8002ef4 <_printf_float+0x300>
 8002f80:	4631      	mov	r1, r6
 8002f82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f86:	4628      	mov	r0, r5
 8002f88:	47b8      	blx	r7
 8002f8a:	3001      	adds	r0, #1
 8002f8c:	d1bf      	bne.n	8002f0e <_printf_float+0x31a>
 8002f8e:	e68c      	b.n	8002caa <_printf_float+0xb6>
 8002f90:	464b      	mov	r3, r9
 8002f92:	4631      	mov	r1, r6
 8002f94:	4628      	mov	r0, r5
 8002f96:	eb08 020a 	add.w	r2, r8, sl
 8002f9a:	47b8      	blx	r7
 8002f9c:	3001      	adds	r0, #1
 8002f9e:	d1c2      	bne.n	8002f26 <_printf_float+0x332>
 8002fa0:	e683      	b.n	8002caa <_printf_float+0xb6>
 8002fa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fa4:	2a01      	cmp	r2, #1
 8002fa6:	dc01      	bgt.n	8002fac <_printf_float+0x3b8>
 8002fa8:	07db      	lsls	r3, r3, #31
 8002faa:	d537      	bpl.n	800301c <_printf_float+0x428>
 8002fac:	2301      	movs	r3, #1
 8002fae:	4642      	mov	r2, r8
 8002fb0:	4631      	mov	r1, r6
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	47b8      	blx	r7
 8002fb6:	3001      	adds	r0, #1
 8002fb8:	f43f ae77 	beq.w	8002caa <_printf_float+0xb6>
 8002fbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002fc0:	4631      	mov	r1, r6
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	47b8      	blx	r7
 8002fc6:	3001      	adds	r0, #1
 8002fc8:	f43f ae6f 	beq.w	8002caa <_printf_float+0xb6>
 8002fcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f7fd fce8 	bl	80009a8 <__aeabi_dcmpeq>
 8002fd8:	b9d8      	cbnz	r0, 8003012 <_printf_float+0x41e>
 8002fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fdc:	f108 0201 	add.w	r2, r8, #1
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	4631      	mov	r1, r6
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	47b8      	blx	r7
 8002fe8:	3001      	adds	r0, #1
 8002fea:	d10e      	bne.n	800300a <_printf_float+0x416>
 8002fec:	e65d      	b.n	8002caa <_printf_float+0xb6>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	464a      	mov	r2, r9
 8002ff2:	4631      	mov	r1, r6
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	47b8      	blx	r7
 8002ff8:	3001      	adds	r0, #1
 8002ffa:	f43f ae56 	beq.w	8002caa <_printf_float+0xb6>
 8002ffe:	f108 0801 	add.w	r8, r8, #1
 8003002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003004:	3b01      	subs	r3, #1
 8003006:	4543      	cmp	r3, r8
 8003008:	dcf1      	bgt.n	8002fee <_printf_float+0x3fa>
 800300a:	4653      	mov	r3, sl
 800300c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003010:	e6e0      	b.n	8002dd4 <_printf_float+0x1e0>
 8003012:	f04f 0800 	mov.w	r8, #0
 8003016:	f104 091a 	add.w	r9, r4, #26
 800301a:	e7f2      	b.n	8003002 <_printf_float+0x40e>
 800301c:	2301      	movs	r3, #1
 800301e:	4642      	mov	r2, r8
 8003020:	e7df      	b.n	8002fe2 <_printf_float+0x3ee>
 8003022:	2301      	movs	r3, #1
 8003024:	464a      	mov	r2, r9
 8003026:	4631      	mov	r1, r6
 8003028:	4628      	mov	r0, r5
 800302a:	47b8      	blx	r7
 800302c:	3001      	adds	r0, #1
 800302e:	f43f ae3c 	beq.w	8002caa <_printf_float+0xb6>
 8003032:	f108 0801 	add.w	r8, r8, #1
 8003036:	68e3      	ldr	r3, [r4, #12]
 8003038:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800303a:	1a5b      	subs	r3, r3, r1
 800303c:	4543      	cmp	r3, r8
 800303e:	dcf0      	bgt.n	8003022 <_printf_float+0x42e>
 8003040:	e6fd      	b.n	8002e3e <_printf_float+0x24a>
 8003042:	f04f 0800 	mov.w	r8, #0
 8003046:	f104 0919 	add.w	r9, r4, #25
 800304a:	e7f4      	b.n	8003036 <_printf_float+0x442>

0800304c <_printf_common>:
 800304c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003050:	4616      	mov	r6, r2
 8003052:	4699      	mov	r9, r3
 8003054:	688a      	ldr	r2, [r1, #8]
 8003056:	690b      	ldr	r3, [r1, #16]
 8003058:	4607      	mov	r7, r0
 800305a:	4293      	cmp	r3, r2
 800305c:	bfb8      	it	lt
 800305e:	4613      	movlt	r3, r2
 8003060:	6033      	str	r3, [r6, #0]
 8003062:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003066:	460c      	mov	r4, r1
 8003068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800306c:	b10a      	cbz	r2, 8003072 <_printf_common+0x26>
 800306e:	3301      	adds	r3, #1
 8003070:	6033      	str	r3, [r6, #0]
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	0699      	lsls	r1, r3, #26
 8003076:	bf42      	ittt	mi
 8003078:	6833      	ldrmi	r3, [r6, #0]
 800307a:	3302      	addmi	r3, #2
 800307c:	6033      	strmi	r3, [r6, #0]
 800307e:	6825      	ldr	r5, [r4, #0]
 8003080:	f015 0506 	ands.w	r5, r5, #6
 8003084:	d106      	bne.n	8003094 <_printf_common+0x48>
 8003086:	f104 0a19 	add.w	sl, r4, #25
 800308a:	68e3      	ldr	r3, [r4, #12]
 800308c:	6832      	ldr	r2, [r6, #0]
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	42ab      	cmp	r3, r5
 8003092:	dc28      	bgt.n	80030e6 <_printf_common+0x9a>
 8003094:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003098:	1e13      	subs	r3, r2, #0
 800309a:	6822      	ldr	r2, [r4, #0]
 800309c:	bf18      	it	ne
 800309e:	2301      	movne	r3, #1
 80030a0:	0692      	lsls	r2, r2, #26
 80030a2:	d42d      	bmi.n	8003100 <_printf_common+0xb4>
 80030a4:	4649      	mov	r1, r9
 80030a6:	4638      	mov	r0, r7
 80030a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030ac:	47c0      	blx	r8
 80030ae:	3001      	adds	r0, #1
 80030b0:	d020      	beq.n	80030f4 <_printf_common+0xa8>
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	68e5      	ldr	r5, [r4, #12]
 80030b6:	f003 0306 	and.w	r3, r3, #6
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	bf18      	it	ne
 80030be:	2500      	movne	r5, #0
 80030c0:	6832      	ldr	r2, [r6, #0]
 80030c2:	f04f 0600 	mov.w	r6, #0
 80030c6:	68a3      	ldr	r3, [r4, #8]
 80030c8:	bf08      	it	eq
 80030ca:	1aad      	subeq	r5, r5, r2
 80030cc:	6922      	ldr	r2, [r4, #16]
 80030ce:	bf08      	it	eq
 80030d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030d4:	4293      	cmp	r3, r2
 80030d6:	bfc4      	itt	gt
 80030d8:	1a9b      	subgt	r3, r3, r2
 80030da:	18ed      	addgt	r5, r5, r3
 80030dc:	341a      	adds	r4, #26
 80030de:	42b5      	cmp	r5, r6
 80030e0:	d11a      	bne.n	8003118 <_printf_common+0xcc>
 80030e2:	2000      	movs	r0, #0
 80030e4:	e008      	b.n	80030f8 <_printf_common+0xac>
 80030e6:	2301      	movs	r3, #1
 80030e8:	4652      	mov	r2, sl
 80030ea:	4649      	mov	r1, r9
 80030ec:	4638      	mov	r0, r7
 80030ee:	47c0      	blx	r8
 80030f0:	3001      	adds	r0, #1
 80030f2:	d103      	bne.n	80030fc <_printf_common+0xb0>
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295
 80030f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030fc:	3501      	adds	r5, #1
 80030fe:	e7c4      	b.n	800308a <_printf_common+0x3e>
 8003100:	2030      	movs	r0, #48	; 0x30
 8003102:	18e1      	adds	r1, r4, r3
 8003104:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800310e:	4422      	add	r2, r4
 8003110:	3302      	adds	r3, #2
 8003112:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003116:	e7c5      	b.n	80030a4 <_printf_common+0x58>
 8003118:	2301      	movs	r3, #1
 800311a:	4622      	mov	r2, r4
 800311c:	4649      	mov	r1, r9
 800311e:	4638      	mov	r0, r7
 8003120:	47c0      	blx	r8
 8003122:	3001      	adds	r0, #1
 8003124:	d0e6      	beq.n	80030f4 <_printf_common+0xa8>
 8003126:	3601      	adds	r6, #1
 8003128:	e7d9      	b.n	80030de <_printf_common+0x92>
	...

0800312c <_printf_i>:
 800312c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003130:	460c      	mov	r4, r1
 8003132:	7e27      	ldrb	r7, [r4, #24]
 8003134:	4691      	mov	r9, r2
 8003136:	2f78      	cmp	r7, #120	; 0x78
 8003138:	4680      	mov	r8, r0
 800313a:	469a      	mov	sl, r3
 800313c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800313e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003142:	d807      	bhi.n	8003154 <_printf_i+0x28>
 8003144:	2f62      	cmp	r7, #98	; 0x62
 8003146:	d80a      	bhi.n	800315e <_printf_i+0x32>
 8003148:	2f00      	cmp	r7, #0
 800314a:	f000 80d9 	beq.w	8003300 <_printf_i+0x1d4>
 800314e:	2f58      	cmp	r7, #88	; 0x58
 8003150:	f000 80a4 	beq.w	800329c <_printf_i+0x170>
 8003154:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003158:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800315c:	e03a      	b.n	80031d4 <_printf_i+0xa8>
 800315e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003162:	2b15      	cmp	r3, #21
 8003164:	d8f6      	bhi.n	8003154 <_printf_i+0x28>
 8003166:	a001      	add	r0, pc, #4	; (adr r0, 800316c <_printf_i+0x40>)
 8003168:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800316c:	080031c5 	.word	0x080031c5
 8003170:	080031d9 	.word	0x080031d9
 8003174:	08003155 	.word	0x08003155
 8003178:	08003155 	.word	0x08003155
 800317c:	08003155 	.word	0x08003155
 8003180:	08003155 	.word	0x08003155
 8003184:	080031d9 	.word	0x080031d9
 8003188:	08003155 	.word	0x08003155
 800318c:	08003155 	.word	0x08003155
 8003190:	08003155 	.word	0x08003155
 8003194:	08003155 	.word	0x08003155
 8003198:	080032e7 	.word	0x080032e7
 800319c:	08003209 	.word	0x08003209
 80031a0:	080032c9 	.word	0x080032c9
 80031a4:	08003155 	.word	0x08003155
 80031a8:	08003155 	.word	0x08003155
 80031ac:	08003309 	.word	0x08003309
 80031b0:	08003155 	.word	0x08003155
 80031b4:	08003209 	.word	0x08003209
 80031b8:	08003155 	.word	0x08003155
 80031bc:	08003155 	.word	0x08003155
 80031c0:	080032d1 	.word	0x080032d1
 80031c4:	680b      	ldr	r3, [r1, #0]
 80031c6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80031ca:	1d1a      	adds	r2, r3, #4
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	600a      	str	r2, [r1, #0]
 80031d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0a4      	b.n	8003322 <_printf_i+0x1f6>
 80031d8:	6825      	ldr	r5, [r4, #0]
 80031da:	6808      	ldr	r0, [r1, #0]
 80031dc:	062e      	lsls	r6, r5, #24
 80031de:	f100 0304 	add.w	r3, r0, #4
 80031e2:	d50a      	bpl.n	80031fa <_printf_i+0xce>
 80031e4:	6805      	ldr	r5, [r0, #0]
 80031e6:	600b      	str	r3, [r1, #0]
 80031e8:	2d00      	cmp	r5, #0
 80031ea:	da03      	bge.n	80031f4 <_printf_i+0xc8>
 80031ec:	232d      	movs	r3, #45	; 0x2d
 80031ee:	426d      	negs	r5, r5
 80031f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031f4:	230a      	movs	r3, #10
 80031f6:	485e      	ldr	r0, [pc, #376]	; (8003370 <_printf_i+0x244>)
 80031f8:	e019      	b.n	800322e <_printf_i+0x102>
 80031fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80031fe:	6805      	ldr	r5, [r0, #0]
 8003200:	600b      	str	r3, [r1, #0]
 8003202:	bf18      	it	ne
 8003204:	b22d      	sxthne	r5, r5
 8003206:	e7ef      	b.n	80031e8 <_printf_i+0xbc>
 8003208:	680b      	ldr	r3, [r1, #0]
 800320a:	6825      	ldr	r5, [r4, #0]
 800320c:	1d18      	adds	r0, r3, #4
 800320e:	6008      	str	r0, [r1, #0]
 8003210:	0628      	lsls	r0, r5, #24
 8003212:	d501      	bpl.n	8003218 <_printf_i+0xec>
 8003214:	681d      	ldr	r5, [r3, #0]
 8003216:	e002      	b.n	800321e <_printf_i+0xf2>
 8003218:	0669      	lsls	r1, r5, #25
 800321a:	d5fb      	bpl.n	8003214 <_printf_i+0xe8>
 800321c:	881d      	ldrh	r5, [r3, #0]
 800321e:	2f6f      	cmp	r7, #111	; 0x6f
 8003220:	bf0c      	ite	eq
 8003222:	2308      	moveq	r3, #8
 8003224:	230a      	movne	r3, #10
 8003226:	4852      	ldr	r0, [pc, #328]	; (8003370 <_printf_i+0x244>)
 8003228:	2100      	movs	r1, #0
 800322a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800322e:	6866      	ldr	r6, [r4, #4]
 8003230:	2e00      	cmp	r6, #0
 8003232:	bfa8      	it	ge
 8003234:	6821      	ldrge	r1, [r4, #0]
 8003236:	60a6      	str	r6, [r4, #8]
 8003238:	bfa4      	itt	ge
 800323a:	f021 0104 	bicge.w	r1, r1, #4
 800323e:	6021      	strge	r1, [r4, #0]
 8003240:	b90d      	cbnz	r5, 8003246 <_printf_i+0x11a>
 8003242:	2e00      	cmp	r6, #0
 8003244:	d04d      	beq.n	80032e2 <_printf_i+0x1b6>
 8003246:	4616      	mov	r6, r2
 8003248:	fbb5 f1f3 	udiv	r1, r5, r3
 800324c:	fb03 5711 	mls	r7, r3, r1, r5
 8003250:	5dc7      	ldrb	r7, [r0, r7]
 8003252:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003256:	462f      	mov	r7, r5
 8003258:	42bb      	cmp	r3, r7
 800325a:	460d      	mov	r5, r1
 800325c:	d9f4      	bls.n	8003248 <_printf_i+0x11c>
 800325e:	2b08      	cmp	r3, #8
 8003260:	d10b      	bne.n	800327a <_printf_i+0x14e>
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	07df      	lsls	r7, r3, #31
 8003266:	d508      	bpl.n	800327a <_printf_i+0x14e>
 8003268:	6923      	ldr	r3, [r4, #16]
 800326a:	6861      	ldr	r1, [r4, #4]
 800326c:	4299      	cmp	r1, r3
 800326e:	bfde      	ittt	le
 8003270:	2330      	movle	r3, #48	; 0x30
 8003272:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003276:	f106 36ff 	addle.w	r6, r6, #4294967295
 800327a:	1b92      	subs	r2, r2, r6
 800327c:	6122      	str	r2, [r4, #16]
 800327e:	464b      	mov	r3, r9
 8003280:	4621      	mov	r1, r4
 8003282:	4640      	mov	r0, r8
 8003284:	f8cd a000 	str.w	sl, [sp]
 8003288:	aa03      	add	r2, sp, #12
 800328a:	f7ff fedf 	bl	800304c <_printf_common>
 800328e:	3001      	adds	r0, #1
 8003290:	d14c      	bne.n	800332c <_printf_i+0x200>
 8003292:	f04f 30ff 	mov.w	r0, #4294967295
 8003296:	b004      	add	sp, #16
 8003298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800329c:	4834      	ldr	r0, [pc, #208]	; (8003370 <_printf_i+0x244>)
 800329e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80032a2:	680e      	ldr	r6, [r1, #0]
 80032a4:	6823      	ldr	r3, [r4, #0]
 80032a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80032aa:	061f      	lsls	r7, r3, #24
 80032ac:	600e      	str	r6, [r1, #0]
 80032ae:	d514      	bpl.n	80032da <_printf_i+0x1ae>
 80032b0:	07d9      	lsls	r1, r3, #31
 80032b2:	bf44      	itt	mi
 80032b4:	f043 0320 	orrmi.w	r3, r3, #32
 80032b8:	6023      	strmi	r3, [r4, #0]
 80032ba:	b91d      	cbnz	r5, 80032c4 <_printf_i+0x198>
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	f023 0320 	bic.w	r3, r3, #32
 80032c2:	6023      	str	r3, [r4, #0]
 80032c4:	2310      	movs	r3, #16
 80032c6:	e7af      	b.n	8003228 <_printf_i+0xfc>
 80032c8:	6823      	ldr	r3, [r4, #0]
 80032ca:	f043 0320 	orr.w	r3, r3, #32
 80032ce:	6023      	str	r3, [r4, #0]
 80032d0:	2378      	movs	r3, #120	; 0x78
 80032d2:	4828      	ldr	r0, [pc, #160]	; (8003374 <_printf_i+0x248>)
 80032d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032d8:	e7e3      	b.n	80032a2 <_printf_i+0x176>
 80032da:	065e      	lsls	r6, r3, #25
 80032dc:	bf48      	it	mi
 80032de:	b2ad      	uxthmi	r5, r5
 80032e0:	e7e6      	b.n	80032b0 <_printf_i+0x184>
 80032e2:	4616      	mov	r6, r2
 80032e4:	e7bb      	b.n	800325e <_printf_i+0x132>
 80032e6:	680b      	ldr	r3, [r1, #0]
 80032e8:	6826      	ldr	r6, [r4, #0]
 80032ea:	1d1d      	adds	r5, r3, #4
 80032ec:	6960      	ldr	r0, [r4, #20]
 80032ee:	600d      	str	r5, [r1, #0]
 80032f0:	0635      	lsls	r5, r6, #24
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	d501      	bpl.n	80032fa <_printf_i+0x1ce>
 80032f6:	6018      	str	r0, [r3, #0]
 80032f8:	e002      	b.n	8003300 <_printf_i+0x1d4>
 80032fa:	0671      	lsls	r1, r6, #25
 80032fc:	d5fb      	bpl.n	80032f6 <_printf_i+0x1ca>
 80032fe:	8018      	strh	r0, [r3, #0]
 8003300:	2300      	movs	r3, #0
 8003302:	4616      	mov	r6, r2
 8003304:	6123      	str	r3, [r4, #16]
 8003306:	e7ba      	b.n	800327e <_printf_i+0x152>
 8003308:	680b      	ldr	r3, [r1, #0]
 800330a:	1d1a      	adds	r2, r3, #4
 800330c:	600a      	str	r2, [r1, #0]
 800330e:	681e      	ldr	r6, [r3, #0]
 8003310:	2100      	movs	r1, #0
 8003312:	4630      	mov	r0, r6
 8003314:	6862      	ldr	r2, [r4, #4]
 8003316:	f002 fb39 	bl	800598c <memchr>
 800331a:	b108      	cbz	r0, 8003320 <_printf_i+0x1f4>
 800331c:	1b80      	subs	r0, r0, r6
 800331e:	6060      	str	r0, [r4, #4]
 8003320:	6863      	ldr	r3, [r4, #4]
 8003322:	6123      	str	r3, [r4, #16]
 8003324:	2300      	movs	r3, #0
 8003326:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800332a:	e7a8      	b.n	800327e <_printf_i+0x152>
 800332c:	4632      	mov	r2, r6
 800332e:	4649      	mov	r1, r9
 8003330:	4640      	mov	r0, r8
 8003332:	6923      	ldr	r3, [r4, #16]
 8003334:	47d0      	blx	sl
 8003336:	3001      	adds	r0, #1
 8003338:	d0ab      	beq.n	8003292 <_printf_i+0x166>
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	079b      	lsls	r3, r3, #30
 800333e:	d413      	bmi.n	8003368 <_printf_i+0x23c>
 8003340:	68e0      	ldr	r0, [r4, #12]
 8003342:	9b03      	ldr	r3, [sp, #12]
 8003344:	4298      	cmp	r0, r3
 8003346:	bfb8      	it	lt
 8003348:	4618      	movlt	r0, r3
 800334a:	e7a4      	b.n	8003296 <_printf_i+0x16a>
 800334c:	2301      	movs	r3, #1
 800334e:	4632      	mov	r2, r6
 8003350:	4649      	mov	r1, r9
 8003352:	4640      	mov	r0, r8
 8003354:	47d0      	blx	sl
 8003356:	3001      	adds	r0, #1
 8003358:	d09b      	beq.n	8003292 <_printf_i+0x166>
 800335a:	3501      	adds	r5, #1
 800335c:	68e3      	ldr	r3, [r4, #12]
 800335e:	9903      	ldr	r1, [sp, #12]
 8003360:	1a5b      	subs	r3, r3, r1
 8003362:	42ab      	cmp	r3, r5
 8003364:	dcf2      	bgt.n	800334c <_printf_i+0x220>
 8003366:	e7eb      	b.n	8003340 <_printf_i+0x214>
 8003368:	2500      	movs	r5, #0
 800336a:	f104 0619 	add.w	r6, r4, #25
 800336e:	e7f5      	b.n	800335c <_printf_i+0x230>
 8003370:	08007366 	.word	0x08007366
 8003374:	08007377 	.word	0x08007377

08003378 <_scanf_float>:
 8003378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800337c:	b087      	sub	sp, #28
 800337e:	9303      	str	r3, [sp, #12]
 8003380:	688b      	ldr	r3, [r1, #8]
 8003382:	4617      	mov	r7, r2
 8003384:	1e5a      	subs	r2, r3, #1
 8003386:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800338a:	bf85      	ittet	hi
 800338c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003390:	195b      	addhi	r3, r3, r5
 8003392:	2300      	movls	r3, #0
 8003394:	9302      	strhi	r3, [sp, #8]
 8003396:	bf88      	it	hi
 8003398:	f240 135d 	movwhi	r3, #349	; 0x15d
 800339c:	468b      	mov	fp, r1
 800339e:	f04f 0500 	mov.w	r5, #0
 80033a2:	bf8c      	ite	hi
 80033a4:	608b      	strhi	r3, [r1, #8]
 80033a6:	9302      	strls	r3, [sp, #8]
 80033a8:	680b      	ldr	r3, [r1, #0]
 80033aa:	4680      	mov	r8, r0
 80033ac:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80033b0:	f84b 3b1c 	str.w	r3, [fp], #28
 80033b4:	460c      	mov	r4, r1
 80033b6:	465e      	mov	r6, fp
 80033b8:	46aa      	mov	sl, r5
 80033ba:	46a9      	mov	r9, r5
 80033bc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80033c0:	9501      	str	r5, [sp, #4]
 80033c2:	68a2      	ldr	r2, [r4, #8]
 80033c4:	b152      	cbz	r2, 80033dc <_scanf_float+0x64>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b4e      	cmp	r3, #78	; 0x4e
 80033cc:	d864      	bhi.n	8003498 <_scanf_float+0x120>
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d83c      	bhi.n	800344c <_scanf_float+0xd4>
 80033d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80033d6:	b2c8      	uxtb	r0, r1
 80033d8:	280e      	cmp	r0, #14
 80033da:	d93a      	bls.n	8003452 <_scanf_float+0xda>
 80033dc:	f1b9 0f00 	cmp.w	r9, #0
 80033e0:	d003      	beq.n	80033ea <_scanf_float+0x72>
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033e8:	6023      	str	r3, [r4, #0]
 80033ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80033ee:	f1ba 0f01 	cmp.w	sl, #1
 80033f2:	f200 8113 	bhi.w	800361c <_scanf_float+0x2a4>
 80033f6:	455e      	cmp	r6, fp
 80033f8:	f200 8105 	bhi.w	8003606 <_scanf_float+0x28e>
 80033fc:	2501      	movs	r5, #1
 80033fe:	4628      	mov	r0, r5
 8003400:	b007      	add	sp, #28
 8003402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003406:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800340a:	2a0d      	cmp	r2, #13
 800340c:	d8e6      	bhi.n	80033dc <_scanf_float+0x64>
 800340e:	a101      	add	r1, pc, #4	; (adr r1, 8003414 <_scanf_float+0x9c>)
 8003410:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003414:	08003553 	.word	0x08003553
 8003418:	080033dd 	.word	0x080033dd
 800341c:	080033dd 	.word	0x080033dd
 8003420:	080033dd 	.word	0x080033dd
 8003424:	080035b3 	.word	0x080035b3
 8003428:	0800358b 	.word	0x0800358b
 800342c:	080033dd 	.word	0x080033dd
 8003430:	080033dd 	.word	0x080033dd
 8003434:	08003561 	.word	0x08003561
 8003438:	080033dd 	.word	0x080033dd
 800343c:	080033dd 	.word	0x080033dd
 8003440:	080033dd 	.word	0x080033dd
 8003444:	080033dd 	.word	0x080033dd
 8003448:	08003519 	.word	0x08003519
 800344c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003450:	e7db      	b.n	800340a <_scanf_float+0x92>
 8003452:	290e      	cmp	r1, #14
 8003454:	d8c2      	bhi.n	80033dc <_scanf_float+0x64>
 8003456:	a001      	add	r0, pc, #4	; (adr r0, 800345c <_scanf_float+0xe4>)
 8003458:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800345c:	0800350b 	.word	0x0800350b
 8003460:	080033dd 	.word	0x080033dd
 8003464:	0800350b 	.word	0x0800350b
 8003468:	0800359f 	.word	0x0800359f
 800346c:	080033dd 	.word	0x080033dd
 8003470:	080034b9 	.word	0x080034b9
 8003474:	080034f5 	.word	0x080034f5
 8003478:	080034f5 	.word	0x080034f5
 800347c:	080034f5 	.word	0x080034f5
 8003480:	080034f5 	.word	0x080034f5
 8003484:	080034f5 	.word	0x080034f5
 8003488:	080034f5 	.word	0x080034f5
 800348c:	080034f5 	.word	0x080034f5
 8003490:	080034f5 	.word	0x080034f5
 8003494:	080034f5 	.word	0x080034f5
 8003498:	2b6e      	cmp	r3, #110	; 0x6e
 800349a:	d809      	bhi.n	80034b0 <_scanf_float+0x138>
 800349c:	2b60      	cmp	r3, #96	; 0x60
 800349e:	d8b2      	bhi.n	8003406 <_scanf_float+0x8e>
 80034a0:	2b54      	cmp	r3, #84	; 0x54
 80034a2:	d077      	beq.n	8003594 <_scanf_float+0x21c>
 80034a4:	2b59      	cmp	r3, #89	; 0x59
 80034a6:	d199      	bne.n	80033dc <_scanf_float+0x64>
 80034a8:	2d07      	cmp	r5, #7
 80034aa:	d197      	bne.n	80033dc <_scanf_float+0x64>
 80034ac:	2508      	movs	r5, #8
 80034ae:	e029      	b.n	8003504 <_scanf_float+0x18c>
 80034b0:	2b74      	cmp	r3, #116	; 0x74
 80034b2:	d06f      	beq.n	8003594 <_scanf_float+0x21c>
 80034b4:	2b79      	cmp	r3, #121	; 0x79
 80034b6:	e7f6      	b.n	80034a6 <_scanf_float+0x12e>
 80034b8:	6821      	ldr	r1, [r4, #0]
 80034ba:	05c8      	lsls	r0, r1, #23
 80034bc:	d51a      	bpl.n	80034f4 <_scanf_float+0x17c>
 80034be:	9b02      	ldr	r3, [sp, #8]
 80034c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80034c4:	6021      	str	r1, [r4, #0]
 80034c6:	f109 0901 	add.w	r9, r9, #1
 80034ca:	b11b      	cbz	r3, 80034d4 <_scanf_float+0x15c>
 80034cc:	3b01      	subs	r3, #1
 80034ce:	3201      	adds	r2, #1
 80034d0:	9302      	str	r3, [sp, #8]
 80034d2:	60a2      	str	r2, [r4, #8]
 80034d4:	68a3      	ldr	r3, [r4, #8]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	60a3      	str	r3, [r4, #8]
 80034da:	6923      	ldr	r3, [r4, #16]
 80034dc:	3301      	adds	r3, #1
 80034de:	6123      	str	r3, [r4, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	607b      	str	r3, [r7, #4]
 80034e8:	f340 8084 	ble.w	80035f4 <_scanf_float+0x27c>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	3301      	adds	r3, #1
 80034f0:	603b      	str	r3, [r7, #0]
 80034f2:	e766      	b.n	80033c2 <_scanf_float+0x4a>
 80034f4:	eb1a 0f05 	cmn.w	sl, r5
 80034f8:	f47f af70 	bne.w	80033dc <_scanf_float+0x64>
 80034fc:	6822      	ldr	r2, [r4, #0]
 80034fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003502:	6022      	str	r2, [r4, #0]
 8003504:	f806 3b01 	strb.w	r3, [r6], #1
 8003508:	e7e4      	b.n	80034d4 <_scanf_float+0x15c>
 800350a:	6822      	ldr	r2, [r4, #0]
 800350c:	0610      	lsls	r0, r2, #24
 800350e:	f57f af65 	bpl.w	80033dc <_scanf_float+0x64>
 8003512:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003516:	e7f4      	b.n	8003502 <_scanf_float+0x18a>
 8003518:	f1ba 0f00 	cmp.w	sl, #0
 800351c:	d10e      	bne.n	800353c <_scanf_float+0x1c4>
 800351e:	f1b9 0f00 	cmp.w	r9, #0
 8003522:	d10e      	bne.n	8003542 <_scanf_float+0x1ca>
 8003524:	6822      	ldr	r2, [r4, #0]
 8003526:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800352a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800352e:	d108      	bne.n	8003542 <_scanf_float+0x1ca>
 8003530:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003534:	f04f 0a01 	mov.w	sl, #1
 8003538:	6022      	str	r2, [r4, #0]
 800353a:	e7e3      	b.n	8003504 <_scanf_float+0x18c>
 800353c:	f1ba 0f02 	cmp.w	sl, #2
 8003540:	d055      	beq.n	80035ee <_scanf_float+0x276>
 8003542:	2d01      	cmp	r5, #1
 8003544:	d002      	beq.n	800354c <_scanf_float+0x1d4>
 8003546:	2d04      	cmp	r5, #4
 8003548:	f47f af48 	bne.w	80033dc <_scanf_float+0x64>
 800354c:	3501      	adds	r5, #1
 800354e:	b2ed      	uxtb	r5, r5
 8003550:	e7d8      	b.n	8003504 <_scanf_float+0x18c>
 8003552:	f1ba 0f01 	cmp.w	sl, #1
 8003556:	f47f af41 	bne.w	80033dc <_scanf_float+0x64>
 800355a:	f04f 0a02 	mov.w	sl, #2
 800355e:	e7d1      	b.n	8003504 <_scanf_float+0x18c>
 8003560:	b97d      	cbnz	r5, 8003582 <_scanf_float+0x20a>
 8003562:	f1b9 0f00 	cmp.w	r9, #0
 8003566:	f47f af3c 	bne.w	80033e2 <_scanf_float+0x6a>
 800356a:	6822      	ldr	r2, [r4, #0]
 800356c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003570:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003574:	f47f af39 	bne.w	80033ea <_scanf_float+0x72>
 8003578:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800357c:	2501      	movs	r5, #1
 800357e:	6022      	str	r2, [r4, #0]
 8003580:	e7c0      	b.n	8003504 <_scanf_float+0x18c>
 8003582:	2d03      	cmp	r5, #3
 8003584:	d0e2      	beq.n	800354c <_scanf_float+0x1d4>
 8003586:	2d05      	cmp	r5, #5
 8003588:	e7de      	b.n	8003548 <_scanf_float+0x1d0>
 800358a:	2d02      	cmp	r5, #2
 800358c:	f47f af26 	bne.w	80033dc <_scanf_float+0x64>
 8003590:	2503      	movs	r5, #3
 8003592:	e7b7      	b.n	8003504 <_scanf_float+0x18c>
 8003594:	2d06      	cmp	r5, #6
 8003596:	f47f af21 	bne.w	80033dc <_scanf_float+0x64>
 800359a:	2507      	movs	r5, #7
 800359c:	e7b2      	b.n	8003504 <_scanf_float+0x18c>
 800359e:	6822      	ldr	r2, [r4, #0]
 80035a0:	0591      	lsls	r1, r2, #22
 80035a2:	f57f af1b 	bpl.w	80033dc <_scanf_float+0x64>
 80035a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80035aa:	6022      	str	r2, [r4, #0]
 80035ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80035b0:	e7a8      	b.n	8003504 <_scanf_float+0x18c>
 80035b2:	6822      	ldr	r2, [r4, #0]
 80035b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80035b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80035bc:	d006      	beq.n	80035cc <_scanf_float+0x254>
 80035be:	0550      	lsls	r0, r2, #21
 80035c0:	f57f af0c 	bpl.w	80033dc <_scanf_float+0x64>
 80035c4:	f1b9 0f00 	cmp.w	r9, #0
 80035c8:	f43f af0f 	beq.w	80033ea <_scanf_float+0x72>
 80035cc:	0591      	lsls	r1, r2, #22
 80035ce:	bf58      	it	pl
 80035d0:	9901      	ldrpl	r1, [sp, #4]
 80035d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80035d6:	bf58      	it	pl
 80035d8:	eba9 0101 	subpl.w	r1, r9, r1
 80035dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80035e0:	f04f 0900 	mov.w	r9, #0
 80035e4:	bf58      	it	pl
 80035e6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80035ea:	6022      	str	r2, [r4, #0]
 80035ec:	e78a      	b.n	8003504 <_scanf_float+0x18c>
 80035ee:	f04f 0a03 	mov.w	sl, #3
 80035f2:	e787      	b.n	8003504 <_scanf_float+0x18c>
 80035f4:	4639      	mov	r1, r7
 80035f6:	4640      	mov	r0, r8
 80035f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80035fc:	4798      	blx	r3
 80035fe:	2800      	cmp	r0, #0
 8003600:	f43f aedf 	beq.w	80033c2 <_scanf_float+0x4a>
 8003604:	e6ea      	b.n	80033dc <_scanf_float+0x64>
 8003606:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800360a:	463a      	mov	r2, r7
 800360c:	4640      	mov	r0, r8
 800360e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003612:	4798      	blx	r3
 8003614:	6923      	ldr	r3, [r4, #16]
 8003616:	3b01      	subs	r3, #1
 8003618:	6123      	str	r3, [r4, #16]
 800361a:	e6ec      	b.n	80033f6 <_scanf_float+0x7e>
 800361c:	1e6b      	subs	r3, r5, #1
 800361e:	2b06      	cmp	r3, #6
 8003620:	d825      	bhi.n	800366e <_scanf_float+0x2f6>
 8003622:	2d02      	cmp	r5, #2
 8003624:	d836      	bhi.n	8003694 <_scanf_float+0x31c>
 8003626:	455e      	cmp	r6, fp
 8003628:	f67f aee8 	bls.w	80033fc <_scanf_float+0x84>
 800362c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003630:	463a      	mov	r2, r7
 8003632:	4640      	mov	r0, r8
 8003634:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003638:	4798      	blx	r3
 800363a:	6923      	ldr	r3, [r4, #16]
 800363c:	3b01      	subs	r3, #1
 800363e:	6123      	str	r3, [r4, #16]
 8003640:	e7f1      	b.n	8003626 <_scanf_float+0x2ae>
 8003642:	9802      	ldr	r0, [sp, #8]
 8003644:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003648:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800364c:	463a      	mov	r2, r7
 800364e:	9002      	str	r0, [sp, #8]
 8003650:	4640      	mov	r0, r8
 8003652:	4798      	blx	r3
 8003654:	6923      	ldr	r3, [r4, #16]
 8003656:	3b01      	subs	r3, #1
 8003658:	6123      	str	r3, [r4, #16]
 800365a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800365e:	fa5f fa8a 	uxtb.w	sl, sl
 8003662:	f1ba 0f02 	cmp.w	sl, #2
 8003666:	d1ec      	bne.n	8003642 <_scanf_float+0x2ca>
 8003668:	3d03      	subs	r5, #3
 800366a:	b2ed      	uxtb	r5, r5
 800366c:	1b76      	subs	r6, r6, r5
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	05da      	lsls	r2, r3, #23
 8003672:	d52f      	bpl.n	80036d4 <_scanf_float+0x35c>
 8003674:	055b      	lsls	r3, r3, #21
 8003676:	d510      	bpl.n	800369a <_scanf_float+0x322>
 8003678:	455e      	cmp	r6, fp
 800367a:	f67f aebf 	bls.w	80033fc <_scanf_float+0x84>
 800367e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003682:	463a      	mov	r2, r7
 8003684:	4640      	mov	r0, r8
 8003686:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800368a:	4798      	blx	r3
 800368c:	6923      	ldr	r3, [r4, #16]
 800368e:	3b01      	subs	r3, #1
 8003690:	6123      	str	r3, [r4, #16]
 8003692:	e7f1      	b.n	8003678 <_scanf_float+0x300>
 8003694:	46aa      	mov	sl, r5
 8003696:	9602      	str	r6, [sp, #8]
 8003698:	e7df      	b.n	800365a <_scanf_float+0x2e2>
 800369a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800369e:	6923      	ldr	r3, [r4, #16]
 80036a0:	2965      	cmp	r1, #101	; 0x65
 80036a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80036a6:	f106 35ff 	add.w	r5, r6, #4294967295
 80036aa:	6123      	str	r3, [r4, #16]
 80036ac:	d00c      	beq.n	80036c8 <_scanf_float+0x350>
 80036ae:	2945      	cmp	r1, #69	; 0x45
 80036b0:	d00a      	beq.n	80036c8 <_scanf_float+0x350>
 80036b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036b6:	463a      	mov	r2, r7
 80036b8:	4640      	mov	r0, r8
 80036ba:	4798      	blx	r3
 80036bc:	6923      	ldr	r3, [r4, #16]
 80036be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	1eb5      	subs	r5, r6, #2
 80036c6:	6123      	str	r3, [r4, #16]
 80036c8:	463a      	mov	r2, r7
 80036ca:	4640      	mov	r0, r8
 80036cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036d0:	4798      	blx	r3
 80036d2:	462e      	mov	r6, r5
 80036d4:	6825      	ldr	r5, [r4, #0]
 80036d6:	f015 0510 	ands.w	r5, r5, #16
 80036da:	d159      	bne.n	8003790 <_scanf_float+0x418>
 80036dc:	7035      	strb	r5, [r6, #0]
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e8:	d11c      	bne.n	8003724 <_scanf_float+0x3ac>
 80036ea:	9b01      	ldr	r3, [sp, #4]
 80036ec:	454b      	cmp	r3, r9
 80036ee:	eba3 0209 	sub.w	r2, r3, r9
 80036f2:	d124      	bne.n	800373e <_scanf_float+0x3c6>
 80036f4:	2200      	movs	r2, #0
 80036f6:	4659      	mov	r1, fp
 80036f8:	4640      	mov	r0, r8
 80036fa:	f000 fea1 	bl	8004440 <_strtod_r>
 80036fe:	f8d4 c000 	ldr.w	ip, [r4]
 8003702:	9b03      	ldr	r3, [sp, #12]
 8003704:	f01c 0f02 	tst.w	ip, #2
 8003708:	4606      	mov	r6, r0
 800370a:	460f      	mov	r7, r1
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	d021      	beq.n	8003754 <_scanf_float+0x3dc>
 8003710:	9903      	ldr	r1, [sp, #12]
 8003712:	1d1a      	adds	r2, r3, #4
 8003714:	600a      	str	r2, [r1, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	e9c3 6700 	strd	r6, r7, [r3]
 800371c:	68e3      	ldr	r3, [r4, #12]
 800371e:	3301      	adds	r3, #1
 8003720:	60e3      	str	r3, [r4, #12]
 8003722:	e66c      	b.n	80033fe <_scanf_float+0x86>
 8003724:	9b04      	ldr	r3, [sp, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0e4      	beq.n	80036f4 <_scanf_float+0x37c>
 800372a:	9905      	ldr	r1, [sp, #20]
 800372c:	230a      	movs	r3, #10
 800372e:	462a      	mov	r2, r5
 8003730:	4640      	mov	r0, r8
 8003732:	3101      	adds	r1, #1
 8003734:	f000 ff1c 	bl	8004570 <_strtol_r>
 8003738:	9b04      	ldr	r3, [sp, #16]
 800373a:	9e05      	ldr	r6, [sp, #20]
 800373c:	1ac2      	subs	r2, r0, r3
 800373e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003742:	429e      	cmp	r6, r3
 8003744:	bf28      	it	cs
 8003746:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800374a:	4630      	mov	r0, r6
 800374c:	4911      	ldr	r1, [pc, #68]	; (8003794 <_scanf_float+0x41c>)
 800374e:	f000 f829 	bl	80037a4 <siprintf>
 8003752:	e7cf      	b.n	80036f4 <_scanf_float+0x37c>
 8003754:	f01c 0f04 	tst.w	ip, #4
 8003758:	f103 0e04 	add.w	lr, r3, #4
 800375c:	d003      	beq.n	8003766 <_scanf_float+0x3ee>
 800375e:	9903      	ldr	r1, [sp, #12]
 8003760:	f8c1 e000 	str.w	lr, [r1]
 8003764:	e7d7      	b.n	8003716 <_scanf_float+0x39e>
 8003766:	9a03      	ldr	r2, [sp, #12]
 8003768:	f8c2 e000 	str.w	lr, [r2]
 800376c:	f8d3 8000 	ldr.w	r8, [r3]
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	f7fd f94a 	bl	8000a0c <__aeabi_dcmpun>
 8003778:	b128      	cbz	r0, 8003786 <_scanf_float+0x40e>
 800377a:	4807      	ldr	r0, [pc, #28]	; (8003798 <_scanf_float+0x420>)
 800377c:	f000 f80e 	bl	800379c <nanf>
 8003780:	f8c8 0000 	str.w	r0, [r8]
 8003784:	e7ca      	b.n	800371c <_scanf_float+0x3a4>
 8003786:	4630      	mov	r0, r6
 8003788:	4639      	mov	r1, r7
 800378a:	f7fd f99d 	bl	8000ac8 <__aeabi_d2f>
 800378e:	e7f7      	b.n	8003780 <_scanf_float+0x408>
 8003790:	2500      	movs	r5, #0
 8003792:	e634      	b.n	80033fe <_scanf_float+0x86>
 8003794:	08007388 	.word	0x08007388
 8003798:	080077a0 	.word	0x080077a0

0800379c <nanf>:
 800379c:	4800      	ldr	r0, [pc, #0]	; (80037a0 <nanf+0x4>)
 800379e:	4770      	bx	lr
 80037a0:	7fc00000 	.word	0x7fc00000

080037a4 <siprintf>:
 80037a4:	b40e      	push	{r1, r2, r3}
 80037a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037aa:	b500      	push	{lr}
 80037ac:	b09c      	sub	sp, #112	; 0x70
 80037ae:	ab1d      	add	r3, sp, #116	; 0x74
 80037b0:	9002      	str	r0, [sp, #8]
 80037b2:	9006      	str	r0, [sp, #24]
 80037b4:	9107      	str	r1, [sp, #28]
 80037b6:	9104      	str	r1, [sp, #16]
 80037b8:	4808      	ldr	r0, [pc, #32]	; (80037dc <siprintf+0x38>)
 80037ba:	4909      	ldr	r1, [pc, #36]	; (80037e0 <siprintf+0x3c>)
 80037bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80037c0:	9105      	str	r1, [sp, #20]
 80037c2:	6800      	ldr	r0, [r0, #0]
 80037c4:	a902      	add	r1, sp, #8
 80037c6:	9301      	str	r3, [sp, #4]
 80037c8:	f002 feb6 	bl	8006538 <_svfiprintf_r>
 80037cc:	2200      	movs	r2, #0
 80037ce:	9b02      	ldr	r3, [sp, #8]
 80037d0:	701a      	strb	r2, [r3, #0]
 80037d2:	b01c      	add	sp, #112	; 0x70
 80037d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037d8:	b003      	add	sp, #12
 80037da:	4770      	bx	lr
 80037dc:	2000000c 	.word	0x2000000c
 80037e0:	ffff0208 	.word	0xffff0208

080037e4 <strstr>:
 80037e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037e6:	780c      	ldrb	r4, [r1, #0]
 80037e8:	b164      	cbz	r4, 8003804 <strstr+0x20>
 80037ea:	4603      	mov	r3, r0
 80037ec:	781a      	ldrb	r2, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	1c5e      	adds	r6, r3, #1
 80037f2:	b90a      	cbnz	r2, 80037f8 <strstr+0x14>
 80037f4:	4610      	mov	r0, r2
 80037f6:	e005      	b.n	8003804 <strstr+0x20>
 80037f8:	4294      	cmp	r4, r2
 80037fa:	d108      	bne.n	800380e <strstr+0x2a>
 80037fc:	460d      	mov	r5, r1
 80037fe:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003802:	b902      	cbnz	r2, 8003806 <strstr+0x22>
 8003804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003806:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800380a:	4297      	cmp	r7, r2
 800380c:	d0f7      	beq.n	80037fe <strstr+0x1a>
 800380e:	4633      	mov	r3, r6
 8003810:	e7ec      	b.n	80037ec <strstr+0x8>

08003812 <sulp>:
 8003812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003816:	460f      	mov	r7, r1
 8003818:	4690      	mov	r8, r2
 800381a:	f002 fc35 	bl	8006088 <__ulp>
 800381e:	4604      	mov	r4, r0
 8003820:	460d      	mov	r5, r1
 8003822:	f1b8 0f00 	cmp.w	r8, #0
 8003826:	d011      	beq.n	800384c <sulp+0x3a>
 8003828:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800382c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003830:	2b00      	cmp	r3, #0
 8003832:	dd0b      	ble.n	800384c <sulp+0x3a>
 8003834:	2400      	movs	r4, #0
 8003836:	051b      	lsls	r3, r3, #20
 8003838:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800383c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003840:	4622      	mov	r2, r4
 8003842:	462b      	mov	r3, r5
 8003844:	f7fc fe48 	bl	80004d8 <__aeabi_dmul>
 8003848:	4604      	mov	r4, r0
 800384a:	460d      	mov	r5, r1
 800384c:	4620      	mov	r0, r4
 800384e:	4629      	mov	r1, r5
 8003850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003854:	0000      	movs	r0, r0
	...

08003858 <_strtod_l>:
 8003858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800385c:	469b      	mov	fp, r3
 800385e:	2300      	movs	r3, #0
 8003860:	b0a1      	sub	sp, #132	; 0x84
 8003862:	931c      	str	r3, [sp, #112]	; 0x70
 8003864:	4ba1      	ldr	r3, [pc, #644]	; (8003aec <_strtod_l+0x294>)
 8003866:	4682      	mov	sl, r0
 8003868:	681f      	ldr	r7, [r3, #0]
 800386a:	460e      	mov	r6, r1
 800386c:	4638      	mov	r0, r7
 800386e:	9217      	str	r2, [sp, #92]	; 0x5c
 8003870:	f7fc fc6e 	bl	8000150 <strlen>
 8003874:	f04f 0800 	mov.w	r8, #0
 8003878:	4604      	mov	r4, r0
 800387a:	f04f 0900 	mov.w	r9, #0
 800387e:	961b      	str	r6, [sp, #108]	; 0x6c
 8003880:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003882:	781a      	ldrb	r2, [r3, #0]
 8003884:	2a2b      	cmp	r2, #43	; 0x2b
 8003886:	d04c      	beq.n	8003922 <_strtod_l+0xca>
 8003888:	d83a      	bhi.n	8003900 <_strtod_l+0xa8>
 800388a:	2a0d      	cmp	r2, #13
 800388c:	d833      	bhi.n	80038f6 <_strtod_l+0x9e>
 800388e:	2a08      	cmp	r2, #8
 8003890:	d833      	bhi.n	80038fa <_strtod_l+0xa2>
 8003892:	2a00      	cmp	r2, #0
 8003894:	d03d      	beq.n	8003912 <_strtod_l+0xba>
 8003896:	2300      	movs	r3, #0
 8003898:	930c      	str	r3, [sp, #48]	; 0x30
 800389a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800389c:	782b      	ldrb	r3, [r5, #0]
 800389e:	2b30      	cmp	r3, #48	; 0x30
 80038a0:	f040 80af 	bne.w	8003a02 <_strtod_l+0x1aa>
 80038a4:	786b      	ldrb	r3, [r5, #1]
 80038a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80038aa:	2b58      	cmp	r3, #88	; 0x58
 80038ac:	d16c      	bne.n	8003988 <_strtod_l+0x130>
 80038ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038b0:	4650      	mov	r0, sl
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	ab1c      	add	r3, sp, #112	; 0x70
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	4a8d      	ldr	r2, [pc, #564]	; (8003af0 <_strtod_l+0x298>)
 80038ba:	f8cd b008 	str.w	fp, [sp, #8]
 80038be:	ab1d      	add	r3, sp, #116	; 0x74
 80038c0:	a91b      	add	r1, sp, #108	; 0x6c
 80038c2:	f001 fd47 	bl	8005354 <__gethex>
 80038c6:	f010 0607 	ands.w	r6, r0, #7
 80038ca:	4604      	mov	r4, r0
 80038cc:	d005      	beq.n	80038da <_strtod_l+0x82>
 80038ce:	2e06      	cmp	r6, #6
 80038d0:	d129      	bne.n	8003926 <_strtod_l+0xce>
 80038d2:	2300      	movs	r3, #0
 80038d4:	3501      	adds	r5, #1
 80038d6:	951b      	str	r5, [sp, #108]	; 0x6c
 80038d8:	930c      	str	r3, [sp, #48]	; 0x30
 80038da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f040 8596 	bne.w	800440e <_strtod_l+0xbb6>
 80038e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038e4:	b1d3      	cbz	r3, 800391c <_strtod_l+0xc4>
 80038e6:	4642      	mov	r2, r8
 80038e8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80038ec:	4610      	mov	r0, r2
 80038ee:	4619      	mov	r1, r3
 80038f0:	b021      	add	sp, #132	; 0x84
 80038f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038f6:	2a20      	cmp	r2, #32
 80038f8:	d1cd      	bne.n	8003896 <_strtod_l+0x3e>
 80038fa:	3301      	adds	r3, #1
 80038fc:	931b      	str	r3, [sp, #108]	; 0x6c
 80038fe:	e7bf      	b.n	8003880 <_strtod_l+0x28>
 8003900:	2a2d      	cmp	r2, #45	; 0x2d
 8003902:	d1c8      	bne.n	8003896 <_strtod_l+0x3e>
 8003904:	2201      	movs	r2, #1
 8003906:	920c      	str	r2, [sp, #48]	; 0x30
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	921b      	str	r2, [sp, #108]	; 0x6c
 800390c:	785b      	ldrb	r3, [r3, #1]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1c3      	bne.n	800389a <_strtod_l+0x42>
 8003912:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003914:	961b      	str	r6, [sp, #108]	; 0x6c
 8003916:	2b00      	cmp	r3, #0
 8003918:	f040 8577 	bne.w	800440a <_strtod_l+0xbb2>
 800391c:	4642      	mov	r2, r8
 800391e:	464b      	mov	r3, r9
 8003920:	e7e4      	b.n	80038ec <_strtod_l+0x94>
 8003922:	2200      	movs	r2, #0
 8003924:	e7ef      	b.n	8003906 <_strtod_l+0xae>
 8003926:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003928:	b13a      	cbz	r2, 800393a <_strtod_l+0xe2>
 800392a:	2135      	movs	r1, #53	; 0x35
 800392c:	a81e      	add	r0, sp, #120	; 0x78
 800392e:	f002 fcaf 	bl	8006290 <__copybits>
 8003932:	4650      	mov	r0, sl
 8003934:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003936:	f002 f877 	bl	8005a28 <_Bfree>
 800393a:	3e01      	subs	r6, #1
 800393c:	2e05      	cmp	r6, #5
 800393e:	d807      	bhi.n	8003950 <_strtod_l+0xf8>
 8003940:	e8df f006 	tbb	[pc, r6]
 8003944:	1d180b0e 	.word	0x1d180b0e
 8003948:	030e      	.short	0x030e
 800394a:	f04f 0900 	mov.w	r9, #0
 800394e:	46c8      	mov	r8, r9
 8003950:	0721      	lsls	r1, r4, #28
 8003952:	d5c2      	bpl.n	80038da <_strtod_l+0x82>
 8003954:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003958:	e7bf      	b.n	80038da <_strtod_l+0x82>
 800395a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800395e:	e7f7      	b.n	8003950 <_strtod_l+0xf8>
 8003960:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003962:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8003966:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800396a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800396e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003972:	e7ed      	b.n	8003950 <_strtod_l+0xf8>
 8003974:	f04f 0800 	mov.w	r8, #0
 8003978:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003af4 <_strtod_l+0x29c>
 800397c:	e7e8      	b.n	8003950 <_strtod_l+0xf8>
 800397e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003982:	f04f 38ff 	mov.w	r8, #4294967295
 8003986:	e7e3      	b.n	8003950 <_strtod_l+0xf8>
 8003988:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	921b      	str	r2, [sp, #108]	; 0x6c
 800398e:	785b      	ldrb	r3, [r3, #1]
 8003990:	2b30      	cmp	r3, #48	; 0x30
 8003992:	d0f9      	beq.n	8003988 <_strtod_l+0x130>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0a0      	beq.n	80038da <_strtod_l+0x82>
 8003998:	2301      	movs	r3, #1
 800399a:	9307      	str	r3, [sp, #28]
 800399c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800399e:	220a      	movs	r2, #10
 80039a0:	9308      	str	r3, [sp, #32]
 80039a2:	2300      	movs	r3, #0
 80039a4:	469b      	mov	fp, r3
 80039a6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80039aa:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80039ac:	7805      	ldrb	r5, [r0, #0]
 80039ae:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80039b2:	b2d9      	uxtb	r1, r3
 80039b4:	2909      	cmp	r1, #9
 80039b6:	d926      	bls.n	8003a06 <_strtod_l+0x1ae>
 80039b8:	4622      	mov	r2, r4
 80039ba:	4639      	mov	r1, r7
 80039bc:	f002 fed2 	bl	8006764 <strncmp>
 80039c0:	2800      	cmp	r0, #0
 80039c2:	d032      	beq.n	8003a2a <_strtod_l+0x1d2>
 80039c4:	2000      	movs	r0, #0
 80039c6:	462b      	mov	r3, r5
 80039c8:	465c      	mov	r4, fp
 80039ca:	4602      	mov	r2, r0
 80039cc:	9004      	str	r0, [sp, #16]
 80039ce:	2b65      	cmp	r3, #101	; 0x65
 80039d0:	d001      	beq.n	80039d6 <_strtod_l+0x17e>
 80039d2:	2b45      	cmp	r3, #69	; 0x45
 80039d4:	d113      	bne.n	80039fe <_strtod_l+0x1a6>
 80039d6:	b91c      	cbnz	r4, 80039e0 <_strtod_l+0x188>
 80039d8:	9b07      	ldr	r3, [sp, #28]
 80039da:	4303      	orrs	r3, r0
 80039dc:	d099      	beq.n	8003912 <_strtod_l+0xba>
 80039de:	2400      	movs	r4, #0
 80039e0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80039e2:	1c73      	adds	r3, r6, #1
 80039e4:	931b      	str	r3, [sp, #108]	; 0x6c
 80039e6:	7873      	ldrb	r3, [r6, #1]
 80039e8:	2b2b      	cmp	r3, #43	; 0x2b
 80039ea:	d078      	beq.n	8003ade <_strtod_l+0x286>
 80039ec:	2b2d      	cmp	r3, #45	; 0x2d
 80039ee:	d07b      	beq.n	8003ae8 <_strtod_l+0x290>
 80039f0:	2700      	movs	r7, #0
 80039f2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80039f6:	2909      	cmp	r1, #9
 80039f8:	f240 8082 	bls.w	8003b00 <_strtod_l+0x2a8>
 80039fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80039fe:	2500      	movs	r5, #0
 8003a00:	e09e      	b.n	8003b40 <_strtod_l+0x2e8>
 8003a02:	2300      	movs	r3, #0
 8003a04:	e7c9      	b.n	800399a <_strtod_l+0x142>
 8003a06:	f1bb 0f08 	cmp.w	fp, #8
 8003a0a:	bfd5      	itete	le
 8003a0c:	9906      	ldrle	r1, [sp, #24]
 8003a0e:	9905      	ldrgt	r1, [sp, #20]
 8003a10:	fb02 3301 	mlale	r3, r2, r1, r3
 8003a14:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003a18:	f100 0001 	add.w	r0, r0, #1
 8003a1c:	bfd4      	ite	le
 8003a1e:	9306      	strle	r3, [sp, #24]
 8003a20:	9305      	strgt	r3, [sp, #20]
 8003a22:	f10b 0b01 	add.w	fp, fp, #1
 8003a26:	901b      	str	r0, [sp, #108]	; 0x6c
 8003a28:	e7bf      	b.n	80039aa <_strtod_l+0x152>
 8003a2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a2c:	191a      	adds	r2, r3, r4
 8003a2e:	921b      	str	r2, [sp, #108]	; 0x6c
 8003a30:	5d1b      	ldrb	r3, [r3, r4]
 8003a32:	f1bb 0f00 	cmp.w	fp, #0
 8003a36:	d036      	beq.n	8003aa6 <_strtod_l+0x24e>
 8003a38:	465c      	mov	r4, fp
 8003a3a:	9004      	str	r0, [sp, #16]
 8003a3c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003a40:	2a09      	cmp	r2, #9
 8003a42:	d912      	bls.n	8003a6a <_strtod_l+0x212>
 8003a44:	2201      	movs	r2, #1
 8003a46:	e7c2      	b.n	80039ce <_strtod_l+0x176>
 8003a48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a4a:	3001      	adds	r0, #1
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	921b      	str	r2, [sp, #108]	; 0x6c
 8003a50:	785b      	ldrb	r3, [r3, #1]
 8003a52:	2b30      	cmp	r3, #48	; 0x30
 8003a54:	d0f8      	beq.n	8003a48 <_strtod_l+0x1f0>
 8003a56:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003a5a:	2a08      	cmp	r2, #8
 8003a5c:	f200 84dc 	bhi.w	8004418 <_strtod_l+0xbc0>
 8003a60:	9004      	str	r0, [sp, #16]
 8003a62:	2000      	movs	r0, #0
 8003a64:	4604      	mov	r4, r0
 8003a66:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003a68:	9208      	str	r2, [sp, #32]
 8003a6a:	3b30      	subs	r3, #48	; 0x30
 8003a6c:	f100 0201 	add.w	r2, r0, #1
 8003a70:	d013      	beq.n	8003a9a <_strtod_l+0x242>
 8003a72:	9904      	ldr	r1, [sp, #16]
 8003a74:	1905      	adds	r5, r0, r4
 8003a76:	4411      	add	r1, r2
 8003a78:	9104      	str	r1, [sp, #16]
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	210a      	movs	r1, #10
 8003a7e:	42aa      	cmp	r2, r5
 8003a80:	d113      	bne.n	8003aaa <_strtod_l+0x252>
 8003a82:	1822      	adds	r2, r4, r0
 8003a84:	2a08      	cmp	r2, #8
 8003a86:	f104 0401 	add.w	r4, r4, #1
 8003a8a:	4404      	add	r4, r0
 8003a8c:	dc1b      	bgt.n	8003ac6 <_strtod_l+0x26e>
 8003a8e:	220a      	movs	r2, #10
 8003a90:	9906      	ldr	r1, [sp, #24]
 8003a92:	fb02 3301 	mla	r3, r2, r1, r3
 8003a96:	9306      	str	r3, [sp, #24]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	1c59      	adds	r1, r3, #1
 8003aa0:	911b      	str	r1, [sp, #108]	; 0x6c
 8003aa2:	785b      	ldrb	r3, [r3, #1]
 8003aa4:	e7ca      	b.n	8003a3c <_strtod_l+0x1e4>
 8003aa6:	4658      	mov	r0, fp
 8003aa8:	e7d3      	b.n	8003a52 <_strtod_l+0x1fa>
 8003aaa:	2a08      	cmp	r2, #8
 8003aac:	dc04      	bgt.n	8003ab8 <_strtod_l+0x260>
 8003aae:	9f06      	ldr	r7, [sp, #24]
 8003ab0:	434f      	muls	r7, r1
 8003ab2:	9706      	str	r7, [sp, #24]
 8003ab4:	3201      	adds	r2, #1
 8003ab6:	e7e2      	b.n	8003a7e <_strtod_l+0x226>
 8003ab8:	1c57      	adds	r7, r2, #1
 8003aba:	2f10      	cmp	r7, #16
 8003abc:	bfde      	ittt	le
 8003abe:	9f05      	ldrle	r7, [sp, #20]
 8003ac0:	434f      	mulle	r7, r1
 8003ac2:	9705      	strle	r7, [sp, #20]
 8003ac4:	e7f6      	b.n	8003ab4 <_strtod_l+0x25c>
 8003ac6:	2c10      	cmp	r4, #16
 8003ac8:	bfdf      	itttt	le
 8003aca:	220a      	movle	r2, #10
 8003acc:	9905      	ldrle	r1, [sp, #20]
 8003ace:	fb02 3301 	mlale	r3, r2, r1, r3
 8003ad2:	9305      	strle	r3, [sp, #20]
 8003ad4:	e7e0      	b.n	8003a98 <_strtod_l+0x240>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	2201      	movs	r2, #1
 8003ada:	9304      	str	r3, [sp, #16]
 8003adc:	e77c      	b.n	80039d8 <_strtod_l+0x180>
 8003ade:	2700      	movs	r7, #0
 8003ae0:	1cb3      	adds	r3, r6, #2
 8003ae2:	931b      	str	r3, [sp, #108]	; 0x6c
 8003ae4:	78b3      	ldrb	r3, [r6, #2]
 8003ae6:	e784      	b.n	80039f2 <_strtod_l+0x19a>
 8003ae8:	2701      	movs	r7, #1
 8003aea:	e7f9      	b.n	8003ae0 <_strtod_l+0x288>
 8003aec:	080075e0 	.word	0x080075e0
 8003af0:	08007390 	.word	0x08007390
 8003af4:	7ff00000 	.word	0x7ff00000
 8003af8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003afa:	1c59      	adds	r1, r3, #1
 8003afc:	911b      	str	r1, [sp, #108]	; 0x6c
 8003afe:	785b      	ldrb	r3, [r3, #1]
 8003b00:	2b30      	cmp	r3, #48	; 0x30
 8003b02:	d0f9      	beq.n	8003af8 <_strtod_l+0x2a0>
 8003b04:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8003b08:	2908      	cmp	r1, #8
 8003b0a:	f63f af78 	bhi.w	80039fe <_strtod_l+0x1a6>
 8003b0e:	f04f 0e0a 	mov.w	lr, #10
 8003b12:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8003b16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b18:	9309      	str	r3, [sp, #36]	; 0x24
 8003b1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b1c:	1c59      	adds	r1, r3, #1
 8003b1e:	911b      	str	r1, [sp, #108]	; 0x6c
 8003b20:	785b      	ldrb	r3, [r3, #1]
 8003b22:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8003b26:	2d09      	cmp	r5, #9
 8003b28:	d935      	bls.n	8003b96 <_strtod_l+0x33e>
 8003b2a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003b2c:	1b49      	subs	r1, r1, r5
 8003b2e:	2908      	cmp	r1, #8
 8003b30:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8003b34:	dc02      	bgt.n	8003b3c <_strtod_l+0x2e4>
 8003b36:	4565      	cmp	r5, ip
 8003b38:	bfa8      	it	ge
 8003b3a:	4665      	movge	r5, ip
 8003b3c:	b107      	cbz	r7, 8003b40 <_strtod_l+0x2e8>
 8003b3e:	426d      	negs	r5, r5
 8003b40:	2c00      	cmp	r4, #0
 8003b42:	d14c      	bne.n	8003bde <_strtod_l+0x386>
 8003b44:	9907      	ldr	r1, [sp, #28]
 8003b46:	4301      	orrs	r1, r0
 8003b48:	f47f aec7 	bne.w	80038da <_strtod_l+0x82>
 8003b4c:	2a00      	cmp	r2, #0
 8003b4e:	f47f aee0 	bne.w	8003912 <_strtod_l+0xba>
 8003b52:	2b69      	cmp	r3, #105	; 0x69
 8003b54:	d026      	beq.n	8003ba4 <_strtod_l+0x34c>
 8003b56:	dc23      	bgt.n	8003ba0 <_strtod_l+0x348>
 8003b58:	2b49      	cmp	r3, #73	; 0x49
 8003b5a:	d023      	beq.n	8003ba4 <_strtod_l+0x34c>
 8003b5c:	2b4e      	cmp	r3, #78	; 0x4e
 8003b5e:	f47f aed8 	bne.w	8003912 <_strtod_l+0xba>
 8003b62:	499c      	ldr	r1, [pc, #624]	; (8003dd4 <_strtod_l+0x57c>)
 8003b64:	a81b      	add	r0, sp, #108	; 0x6c
 8003b66:	f001 fe43 	bl	80057f0 <__match>
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	f43f aed1 	beq.w	8003912 <_strtod_l+0xba>
 8003b70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b28      	cmp	r3, #40	; 0x28
 8003b76:	d12c      	bne.n	8003bd2 <_strtod_l+0x37a>
 8003b78:	4997      	ldr	r1, [pc, #604]	; (8003dd8 <_strtod_l+0x580>)
 8003b7a:	aa1e      	add	r2, sp, #120	; 0x78
 8003b7c:	a81b      	add	r0, sp, #108	; 0x6c
 8003b7e:	f001 fe4b 	bl	8005818 <__hexnan>
 8003b82:	2805      	cmp	r0, #5
 8003b84:	d125      	bne.n	8003bd2 <_strtod_l+0x37a>
 8003b86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003b88:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8003b8c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003b90:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003b94:	e6a1      	b.n	80038da <_strtod_l+0x82>
 8003b96:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8003b9a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003b9e:	e7bc      	b.n	8003b1a <_strtod_l+0x2c2>
 8003ba0:	2b6e      	cmp	r3, #110	; 0x6e
 8003ba2:	e7dc      	b.n	8003b5e <_strtod_l+0x306>
 8003ba4:	498d      	ldr	r1, [pc, #564]	; (8003ddc <_strtod_l+0x584>)
 8003ba6:	a81b      	add	r0, sp, #108	; 0x6c
 8003ba8:	f001 fe22 	bl	80057f0 <__match>
 8003bac:	2800      	cmp	r0, #0
 8003bae:	f43f aeb0 	beq.w	8003912 <_strtod_l+0xba>
 8003bb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bb4:	498a      	ldr	r1, [pc, #552]	; (8003de0 <_strtod_l+0x588>)
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	a81b      	add	r0, sp, #108	; 0x6c
 8003bba:	931b      	str	r3, [sp, #108]	; 0x6c
 8003bbc:	f001 fe18 	bl	80057f0 <__match>
 8003bc0:	b910      	cbnz	r0, 8003bc8 <_strtod_l+0x370>
 8003bc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	931b      	str	r3, [sp, #108]	; 0x6c
 8003bc8:	f04f 0800 	mov.w	r8, #0
 8003bcc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8003df0 <_strtod_l+0x598>
 8003bd0:	e683      	b.n	80038da <_strtod_l+0x82>
 8003bd2:	4884      	ldr	r0, [pc, #528]	; (8003de4 <_strtod_l+0x58c>)
 8003bd4:	f002 fdb0 	bl	8006738 <nan>
 8003bd8:	4680      	mov	r8, r0
 8003bda:	4689      	mov	r9, r1
 8003bdc:	e67d      	b.n	80038da <_strtod_l+0x82>
 8003bde:	9b04      	ldr	r3, [sp, #16]
 8003be0:	f1bb 0f00 	cmp.w	fp, #0
 8003be4:	bf08      	it	eq
 8003be6:	46a3      	moveq	fp, r4
 8003be8:	1aeb      	subs	r3, r5, r3
 8003bea:	2c10      	cmp	r4, #16
 8003bec:	9806      	ldr	r0, [sp, #24]
 8003bee:	4626      	mov	r6, r4
 8003bf0:	9307      	str	r3, [sp, #28]
 8003bf2:	bfa8      	it	ge
 8003bf4:	2610      	movge	r6, #16
 8003bf6:	f7fc fbf5 	bl	80003e4 <__aeabi_ui2d>
 8003bfa:	2c09      	cmp	r4, #9
 8003bfc:	4680      	mov	r8, r0
 8003bfe:	4689      	mov	r9, r1
 8003c00:	dd13      	ble.n	8003c2a <_strtod_l+0x3d2>
 8003c02:	4b79      	ldr	r3, [pc, #484]	; (8003de8 <_strtod_l+0x590>)
 8003c04:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003c08:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003c0c:	f7fc fc64 	bl	80004d8 <__aeabi_dmul>
 8003c10:	4680      	mov	r8, r0
 8003c12:	9805      	ldr	r0, [sp, #20]
 8003c14:	4689      	mov	r9, r1
 8003c16:	f7fc fbe5 	bl	80003e4 <__aeabi_ui2d>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4640      	mov	r0, r8
 8003c20:	4649      	mov	r1, r9
 8003c22:	f7fc faa3 	bl	800016c <__adddf3>
 8003c26:	4680      	mov	r8, r0
 8003c28:	4689      	mov	r9, r1
 8003c2a:	2c0f      	cmp	r4, #15
 8003c2c:	dc36      	bgt.n	8003c9c <_strtod_l+0x444>
 8003c2e:	9b07      	ldr	r3, [sp, #28]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f43f ae52 	beq.w	80038da <_strtod_l+0x82>
 8003c36:	dd22      	ble.n	8003c7e <_strtod_l+0x426>
 8003c38:	2b16      	cmp	r3, #22
 8003c3a:	dc09      	bgt.n	8003c50 <_strtod_l+0x3f8>
 8003c3c:	4c6a      	ldr	r4, [pc, #424]	; (8003de8 <_strtod_l+0x590>)
 8003c3e:	4642      	mov	r2, r8
 8003c40:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8003c44:	464b      	mov	r3, r9
 8003c46:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003c4a:	f7fc fc45 	bl	80004d8 <__aeabi_dmul>
 8003c4e:	e7c3      	b.n	8003bd8 <_strtod_l+0x380>
 8003c50:	9a07      	ldr	r2, [sp, #28]
 8003c52:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003c56:	4293      	cmp	r3, r2
 8003c58:	db20      	blt.n	8003c9c <_strtod_l+0x444>
 8003c5a:	4d63      	ldr	r5, [pc, #396]	; (8003de8 <_strtod_l+0x590>)
 8003c5c:	f1c4 040f 	rsb	r4, r4, #15
 8003c60:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003c64:	4642      	mov	r2, r8
 8003c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c6a:	464b      	mov	r3, r9
 8003c6c:	f7fc fc34 	bl	80004d8 <__aeabi_dmul>
 8003c70:	9b07      	ldr	r3, [sp, #28]
 8003c72:	1b1c      	subs	r4, r3, r4
 8003c74:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003c78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003c7c:	e7e5      	b.n	8003c4a <_strtod_l+0x3f2>
 8003c7e:	9b07      	ldr	r3, [sp, #28]
 8003c80:	3316      	adds	r3, #22
 8003c82:	db0b      	blt.n	8003c9c <_strtod_l+0x444>
 8003c84:	9b04      	ldr	r3, [sp, #16]
 8003c86:	4a58      	ldr	r2, [pc, #352]	; (8003de8 <_strtod_l+0x590>)
 8003c88:	1b5d      	subs	r5, r3, r5
 8003c8a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8003c8e:	4640      	mov	r0, r8
 8003c90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003c94:	4649      	mov	r1, r9
 8003c96:	f7fc fd49 	bl	800072c <__aeabi_ddiv>
 8003c9a:	e79d      	b.n	8003bd8 <_strtod_l+0x380>
 8003c9c:	9b07      	ldr	r3, [sp, #28]
 8003c9e:	1ba6      	subs	r6, r4, r6
 8003ca0:	441e      	add	r6, r3
 8003ca2:	2e00      	cmp	r6, #0
 8003ca4:	dd71      	ble.n	8003d8a <_strtod_l+0x532>
 8003ca6:	f016 030f 	ands.w	r3, r6, #15
 8003caa:	d00a      	beq.n	8003cc2 <_strtod_l+0x46a>
 8003cac:	494e      	ldr	r1, [pc, #312]	; (8003de8 <_strtod_l+0x590>)
 8003cae:	4642      	mov	r2, r8
 8003cb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cb8:	464b      	mov	r3, r9
 8003cba:	f7fc fc0d 	bl	80004d8 <__aeabi_dmul>
 8003cbe:	4680      	mov	r8, r0
 8003cc0:	4689      	mov	r9, r1
 8003cc2:	f036 060f 	bics.w	r6, r6, #15
 8003cc6:	d050      	beq.n	8003d6a <_strtod_l+0x512>
 8003cc8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8003ccc:	dd27      	ble.n	8003d1e <_strtod_l+0x4c6>
 8003cce:	f04f 0b00 	mov.w	fp, #0
 8003cd2:	f8cd b010 	str.w	fp, [sp, #16]
 8003cd6:	f8cd b020 	str.w	fp, [sp, #32]
 8003cda:	f8cd b018 	str.w	fp, [sp, #24]
 8003cde:	2322      	movs	r3, #34	; 0x22
 8003ce0:	f04f 0800 	mov.w	r8, #0
 8003ce4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8003df0 <_strtod_l+0x598>
 8003ce8:	f8ca 3000 	str.w	r3, [sl]
 8003cec:	9b08      	ldr	r3, [sp, #32]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f43f adf3 	beq.w	80038da <_strtod_l+0x82>
 8003cf4:	4650      	mov	r0, sl
 8003cf6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003cf8:	f001 fe96 	bl	8005a28 <_Bfree>
 8003cfc:	4650      	mov	r0, sl
 8003cfe:	9906      	ldr	r1, [sp, #24]
 8003d00:	f001 fe92 	bl	8005a28 <_Bfree>
 8003d04:	4650      	mov	r0, sl
 8003d06:	9904      	ldr	r1, [sp, #16]
 8003d08:	f001 fe8e 	bl	8005a28 <_Bfree>
 8003d0c:	4650      	mov	r0, sl
 8003d0e:	9908      	ldr	r1, [sp, #32]
 8003d10:	f001 fe8a 	bl	8005a28 <_Bfree>
 8003d14:	4659      	mov	r1, fp
 8003d16:	4650      	mov	r0, sl
 8003d18:	f001 fe86 	bl	8005a28 <_Bfree>
 8003d1c:	e5dd      	b.n	80038da <_strtod_l+0x82>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	4640      	mov	r0, r8
 8003d22:	4649      	mov	r1, r9
 8003d24:	461f      	mov	r7, r3
 8003d26:	1136      	asrs	r6, r6, #4
 8003d28:	2e01      	cmp	r6, #1
 8003d2a:	dc21      	bgt.n	8003d70 <_strtod_l+0x518>
 8003d2c:	b10b      	cbz	r3, 8003d32 <_strtod_l+0x4da>
 8003d2e:	4680      	mov	r8, r0
 8003d30:	4689      	mov	r9, r1
 8003d32:	4b2e      	ldr	r3, [pc, #184]	; (8003dec <_strtod_l+0x594>)
 8003d34:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8003d38:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003d3c:	4642      	mov	r2, r8
 8003d3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d42:	464b      	mov	r3, r9
 8003d44:	f7fc fbc8 	bl	80004d8 <__aeabi_dmul>
 8003d48:	4b29      	ldr	r3, [pc, #164]	; (8003df0 <_strtod_l+0x598>)
 8003d4a:	460a      	mov	r2, r1
 8003d4c:	400b      	ands	r3, r1
 8003d4e:	4929      	ldr	r1, [pc, #164]	; (8003df4 <_strtod_l+0x59c>)
 8003d50:	4680      	mov	r8, r0
 8003d52:	428b      	cmp	r3, r1
 8003d54:	d8bb      	bhi.n	8003cce <_strtod_l+0x476>
 8003d56:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003d5a:	428b      	cmp	r3, r1
 8003d5c:	bf86      	itte	hi
 8003d5e:	f04f 38ff 	movhi.w	r8, #4294967295
 8003d62:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8003df8 <_strtod_l+0x5a0>
 8003d66:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	9305      	str	r3, [sp, #20]
 8003d6e:	e07e      	b.n	8003e6e <_strtod_l+0x616>
 8003d70:	07f2      	lsls	r2, r6, #31
 8003d72:	d507      	bpl.n	8003d84 <_strtod_l+0x52c>
 8003d74:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <_strtod_l+0x594>)
 8003d76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	f7fc fbab 	bl	80004d8 <__aeabi_dmul>
 8003d82:	2301      	movs	r3, #1
 8003d84:	3701      	adds	r7, #1
 8003d86:	1076      	asrs	r6, r6, #1
 8003d88:	e7ce      	b.n	8003d28 <_strtod_l+0x4d0>
 8003d8a:	d0ee      	beq.n	8003d6a <_strtod_l+0x512>
 8003d8c:	4276      	negs	r6, r6
 8003d8e:	f016 020f 	ands.w	r2, r6, #15
 8003d92:	d00a      	beq.n	8003daa <_strtod_l+0x552>
 8003d94:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <_strtod_l+0x590>)
 8003d96:	4640      	mov	r0, r8
 8003d98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da2:	f7fc fcc3 	bl	800072c <__aeabi_ddiv>
 8003da6:	4680      	mov	r8, r0
 8003da8:	4689      	mov	r9, r1
 8003daa:	1136      	asrs	r6, r6, #4
 8003dac:	d0dd      	beq.n	8003d6a <_strtod_l+0x512>
 8003dae:	2e1f      	cmp	r6, #31
 8003db0:	dd24      	ble.n	8003dfc <_strtod_l+0x5a4>
 8003db2:	f04f 0b00 	mov.w	fp, #0
 8003db6:	f8cd b010 	str.w	fp, [sp, #16]
 8003dba:	f8cd b020 	str.w	fp, [sp, #32]
 8003dbe:	f8cd b018 	str.w	fp, [sp, #24]
 8003dc2:	2322      	movs	r3, #34	; 0x22
 8003dc4:	f04f 0800 	mov.w	r8, #0
 8003dc8:	f04f 0900 	mov.w	r9, #0
 8003dcc:	f8ca 3000 	str.w	r3, [sl]
 8003dd0:	e78c      	b.n	8003cec <_strtod_l+0x494>
 8003dd2:	bf00      	nop
 8003dd4:	08007361 	.word	0x08007361
 8003dd8:	080073a4 	.word	0x080073a4
 8003ddc:	08007359 	.word	0x08007359
 8003de0:	080074e4 	.word	0x080074e4
 8003de4:	080077a0 	.word	0x080077a0
 8003de8:	08007680 	.word	0x08007680
 8003dec:	08007658 	.word	0x08007658
 8003df0:	7ff00000 	.word	0x7ff00000
 8003df4:	7ca00000 	.word	0x7ca00000
 8003df8:	7fefffff 	.word	0x7fefffff
 8003dfc:	f016 0310 	ands.w	r3, r6, #16
 8003e00:	bf18      	it	ne
 8003e02:	236a      	movne	r3, #106	; 0x6a
 8003e04:	4640      	mov	r0, r8
 8003e06:	9305      	str	r3, [sp, #20]
 8003e08:	4649      	mov	r1, r9
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	4fb2      	ldr	r7, [pc, #712]	; (80040d8 <_strtod_l+0x880>)
 8003e0e:	07f2      	lsls	r2, r6, #31
 8003e10:	d504      	bpl.n	8003e1c <_strtod_l+0x5c4>
 8003e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e16:	f7fc fb5f 	bl	80004d8 <__aeabi_dmul>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	1076      	asrs	r6, r6, #1
 8003e1e:	f107 0708 	add.w	r7, r7, #8
 8003e22:	d1f4      	bne.n	8003e0e <_strtod_l+0x5b6>
 8003e24:	b10b      	cbz	r3, 8003e2a <_strtod_l+0x5d2>
 8003e26:	4680      	mov	r8, r0
 8003e28:	4689      	mov	r9, r1
 8003e2a:	9b05      	ldr	r3, [sp, #20]
 8003e2c:	b1bb      	cbz	r3, 8003e5e <_strtod_l+0x606>
 8003e2e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8003e32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	4649      	mov	r1, r9
 8003e3a:	dd10      	ble.n	8003e5e <_strtod_l+0x606>
 8003e3c:	2b1f      	cmp	r3, #31
 8003e3e:	f340 812b 	ble.w	8004098 <_strtod_l+0x840>
 8003e42:	2b34      	cmp	r3, #52	; 0x34
 8003e44:	bfd8      	it	le
 8003e46:	f04f 32ff 	movle.w	r2, #4294967295
 8003e4a:	f04f 0800 	mov.w	r8, #0
 8003e4e:	bfcf      	iteee	gt
 8003e50:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8003e54:	3b20      	suble	r3, #32
 8003e56:	fa02 f303 	lslle.w	r3, r2, r3
 8003e5a:	ea03 0901 	andle.w	r9, r3, r1
 8003e5e:	2200      	movs	r2, #0
 8003e60:	2300      	movs	r3, #0
 8003e62:	4640      	mov	r0, r8
 8003e64:	4649      	mov	r1, r9
 8003e66:	f7fc fd9f 	bl	80009a8 <__aeabi_dcmpeq>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d1a1      	bne.n	8003db2 <_strtod_l+0x55a>
 8003e6e:	9b06      	ldr	r3, [sp, #24]
 8003e70:	465a      	mov	r2, fp
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	4650      	mov	r0, sl
 8003e76:	4623      	mov	r3, r4
 8003e78:	9908      	ldr	r1, [sp, #32]
 8003e7a:	f001 fe41 	bl	8005b00 <__s2b>
 8003e7e:	9008      	str	r0, [sp, #32]
 8003e80:	2800      	cmp	r0, #0
 8003e82:	f43f af24 	beq.w	8003cce <_strtod_l+0x476>
 8003e86:	9b04      	ldr	r3, [sp, #16]
 8003e88:	f04f 0b00 	mov.w	fp, #0
 8003e8c:	1b5d      	subs	r5, r3, r5
 8003e8e:	9b07      	ldr	r3, [sp, #28]
 8003e90:	f8cd b010 	str.w	fp, [sp, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bfb4      	ite	lt
 8003e98:	462b      	movlt	r3, r5
 8003e9a:	2300      	movge	r3, #0
 8003e9c:	930e      	str	r3, [sp, #56]	; 0x38
 8003e9e:	9b07      	ldr	r3, [sp, #28]
 8003ea0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003ea4:	9316      	str	r3, [sp, #88]	; 0x58
 8003ea6:	9b08      	ldr	r3, [sp, #32]
 8003ea8:	4650      	mov	r0, sl
 8003eaa:	6859      	ldr	r1, [r3, #4]
 8003eac:	f001 fd7c 	bl	80059a8 <_Balloc>
 8003eb0:	9006      	str	r0, [sp, #24]
 8003eb2:	2800      	cmp	r0, #0
 8003eb4:	f43f af13 	beq.w	8003cde <_strtod_l+0x486>
 8003eb8:	9b08      	ldr	r3, [sp, #32]
 8003eba:	300c      	adds	r0, #12
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	f103 010c 	add.w	r1, r3, #12
 8003ec2:	3202      	adds	r2, #2
 8003ec4:	0092      	lsls	r2, r2, #2
 8003ec6:	f7fe fde1 	bl	8002a8c <memcpy>
 8003eca:	ab1e      	add	r3, sp, #120	; 0x78
 8003ecc:	9301      	str	r3, [sp, #4]
 8003ece:	ab1d      	add	r3, sp, #116	; 0x74
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	4642      	mov	r2, r8
 8003ed4:	464b      	mov	r3, r9
 8003ed6:	4650      	mov	r0, sl
 8003ed8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8003edc:	f002 f94e 	bl	800617c <__d2b>
 8003ee0:	901c      	str	r0, [sp, #112]	; 0x70
 8003ee2:	2800      	cmp	r0, #0
 8003ee4:	f43f aefb 	beq.w	8003cde <_strtod_l+0x486>
 8003ee8:	2101      	movs	r1, #1
 8003eea:	4650      	mov	r0, sl
 8003eec:	f001 fea0 	bl	8005c30 <__i2b>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	9004      	str	r0, [sp, #16]
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	f43f aef2 	beq.w	8003cde <_strtod_l+0x486>
 8003efa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8003efc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003efe:	2d00      	cmp	r5, #0
 8003f00:	bfab      	itete	ge
 8003f02:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8003f04:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8003f06:	18ee      	addge	r6, r5, r3
 8003f08:	1b5c      	sublt	r4, r3, r5
 8003f0a:	9b05      	ldr	r3, [sp, #20]
 8003f0c:	bfa8      	it	ge
 8003f0e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8003f10:	eba5 0503 	sub.w	r5, r5, r3
 8003f14:	4415      	add	r5, r2
 8003f16:	4b71      	ldr	r3, [pc, #452]	; (80040dc <_strtod_l+0x884>)
 8003f18:	f105 35ff 	add.w	r5, r5, #4294967295
 8003f1c:	bfb8      	it	lt
 8003f1e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8003f20:	429d      	cmp	r5, r3
 8003f22:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003f26:	f280 80c9 	bge.w	80040bc <_strtod_l+0x864>
 8003f2a:	1b5b      	subs	r3, r3, r5
 8003f2c:	2b1f      	cmp	r3, #31
 8003f2e:	f04f 0701 	mov.w	r7, #1
 8003f32:	eba2 0203 	sub.w	r2, r2, r3
 8003f36:	f300 80b6 	bgt.w	80040a6 <_strtod_l+0x84e>
 8003f3a:	2500      	movs	r5, #0
 8003f3c:	fa07 f303 	lsl.w	r3, r7, r3
 8003f40:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f42:	18b7      	adds	r7, r6, r2
 8003f44:	9b05      	ldr	r3, [sp, #20]
 8003f46:	42be      	cmp	r6, r7
 8003f48:	4414      	add	r4, r2
 8003f4a:	441c      	add	r4, r3
 8003f4c:	4633      	mov	r3, r6
 8003f4e:	bfa8      	it	ge
 8003f50:	463b      	movge	r3, r7
 8003f52:	42a3      	cmp	r3, r4
 8003f54:	bfa8      	it	ge
 8003f56:	4623      	movge	r3, r4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bfc2      	ittt	gt
 8003f5c:	1aff      	subgt	r7, r7, r3
 8003f5e:	1ae4      	subgt	r4, r4, r3
 8003f60:	1af6      	subgt	r6, r6, r3
 8003f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	dd17      	ble.n	8003f98 <_strtod_l+0x740>
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4650      	mov	r0, sl
 8003f6c:	9904      	ldr	r1, [sp, #16]
 8003f6e:	f001 ff19 	bl	8005da4 <__pow5mult>
 8003f72:	9004      	str	r0, [sp, #16]
 8003f74:	2800      	cmp	r0, #0
 8003f76:	f43f aeb2 	beq.w	8003cde <_strtod_l+0x486>
 8003f7a:	4601      	mov	r1, r0
 8003f7c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003f7e:	4650      	mov	r0, sl
 8003f80:	f001 fe6c 	bl	8005c5c <__multiply>
 8003f84:	9009      	str	r0, [sp, #36]	; 0x24
 8003f86:	2800      	cmp	r0, #0
 8003f88:	f43f aea9 	beq.w	8003cde <_strtod_l+0x486>
 8003f8c:	4650      	mov	r0, sl
 8003f8e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003f90:	f001 fd4a 	bl	8005a28 <_Bfree>
 8003f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f96:	931c      	str	r3, [sp, #112]	; 0x70
 8003f98:	2f00      	cmp	r7, #0
 8003f9a:	f300 8093 	bgt.w	80040c4 <_strtod_l+0x86c>
 8003f9e:	9b07      	ldr	r3, [sp, #28]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	dd08      	ble.n	8003fb6 <_strtod_l+0x75e>
 8003fa4:	4650      	mov	r0, sl
 8003fa6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003fa8:	9906      	ldr	r1, [sp, #24]
 8003faa:	f001 fefb 	bl	8005da4 <__pow5mult>
 8003fae:	9006      	str	r0, [sp, #24]
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	f43f ae94 	beq.w	8003cde <_strtod_l+0x486>
 8003fb6:	2c00      	cmp	r4, #0
 8003fb8:	dd08      	ble.n	8003fcc <_strtod_l+0x774>
 8003fba:	4622      	mov	r2, r4
 8003fbc:	4650      	mov	r0, sl
 8003fbe:	9906      	ldr	r1, [sp, #24]
 8003fc0:	f001 ff4a 	bl	8005e58 <__lshift>
 8003fc4:	9006      	str	r0, [sp, #24]
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	f43f ae89 	beq.w	8003cde <_strtod_l+0x486>
 8003fcc:	2e00      	cmp	r6, #0
 8003fce:	dd08      	ble.n	8003fe2 <_strtod_l+0x78a>
 8003fd0:	4632      	mov	r2, r6
 8003fd2:	4650      	mov	r0, sl
 8003fd4:	9904      	ldr	r1, [sp, #16]
 8003fd6:	f001 ff3f 	bl	8005e58 <__lshift>
 8003fda:	9004      	str	r0, [sp, #16]
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	f43f ae7e 	beq.w	8003cde <_strtod_l+0x486>
 8003fe2:	4650      	mov	r0, sl
 8003fe4:	9a06      	ldr	r2, [sp, #24]
 8003fe6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003fe8:	f001 ffbe 	bl	8005f68 <__mdiff>
 8003fec:	4683      	mov	fp, r0
 8003fee:	2800      	cmp	r0, #0
 8003ff0:	f43f ae75 	beq.w	8003cde <_strtod_l+0x486>
 8003ff4:	2400      	movs	r4, #0
 8003ff6:	68c3      	ldr	r3, [r0, #12]
 8003ff8:	9904      	ldr	r1, [sp, #16]
 8003ffa:	60c4      	str	r4, [r0, #12]
 8003ffc:	930d      	str	r3, [sp, #52]	; 0x34
 8003ffe:	f001 ff97 	bl	8005f30 <__mcmp>
 8004002:	42a0      	cmp	r0, r4
 8004004:	da70      	bge.n	80040e8 <_strtod_l+0x890>
 8004006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004008:	ea53 0308 	orrs.w	r3, r3, r8
 800400c:	f040 8096 	bne.w	800413c <_strtod_l+0x8e4>
 8004010:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004014:	2b00      	cmp	r3, #0
 8004016:	f040 8091 	bne.w	800413c <_strtod_l+0x8e4>
 800401a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800401e:	0d1b      	lsrs	r3, r3, #20
 8004020:	051b      	lsls	r3, r3, #20
 8004022:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004026:	f240 8089 	bls.w	800413c <_strtod_l+0x8e4>
 800402a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800402e:	b923      	cbnz	r3, 800403a <_strtod_l+0x7e2>
 8004030:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004034:	2b01      	cmp	r3, #1
 8004036:	f340 8081 	ble.w	800413c <_strtod_l+0x8e4>
 800403a:	4659      	mov	r1, fp
 800403c:	2201      	movs	r2, #1
 800403e:	4650      	mov	r0, sl
 8004040:	f001 ff0a 	bl	8005e58 <__lshift>
 8004044:	9904      	ldr	r1, [sp, #16]
 8004046:	4683      	mov	fp, r0
 8004048:	f001 ff72 	bl	8005f30 <__mcmp>
 800404c:	2800      	cmp	r0, #0
 800404e:	dd75      	ble.n	800413c <_strtod_l+0x8e4>
 8004050:	9905      	ldr	r1, [sp, #20]
 8004052:	464b      	mov	r3, r9
 8004054:	4a22      	ldr	r2, [pc, #136]	; (80040e0 <_strtod_l+0x888>)
 8004056:	2900      	cmp	r1, #0
 8004058:	f000 8091 	beq.w	800417e <_strtod_l+0x926>
 800405c:	ea02 0109 	and.w	r1, r2, r9
 8004060:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004064:	f300 808b 	bgt.w	800417e <_strtod_l+0x926>
 8004068:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800406c:	f77f aea9 	ble.w	8003dc2 <_strtod_l+0x56a>
 8004070:	2300      	movs	r3, #0
 8004072:	4a1c      	ldr	r2, [pc, #112]	; (80040e4 <_strtod_l+0x88c>)
 8004074:	4640      	mov	r0, r8
 8004076:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800407a:	4649      	mov	r1, r9
 800407c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004080:	f7fc fa2a 	bl	80004d8 <__aeabi_dmul>
 8004084:	460b      	mov	r3, r1
 8004086:	4303      	orrs	r3, r0
 8004088:	bf08      	it	eq
 800408a:	2322      	moveq	r3, #34	; 0x22
 800408c:	4680      	mov	r8, r0
 800408e:	4689      	mov	r9, r1
 8004090:	bf08      	it	eq
 8004092:	f8ca 3000 	streq.w	r3, [sl]
 8004096:	e62d      	b.n	8003cf4 <_strtod_l+0x49c>
 8004098:	f04f 32ff 	mov.w	r2, #4294967295
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	ea03 0808 	and.w	r8, r3, r8
 80040a4:	e6db      	b.n	8003e5e <_strtod_l+0x606>
 80040a6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80040aa:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80040ae:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80040b2:	35e2      	adds	r5, #226	; 0xe2
 80040b4:	fa07 f505 	lsl.w	r5, r7, r5
 80040b8:	970f      	str	r7, [sp, #60]	; 0x3c
 80040ba:	e742      	b.n	8003f42 <_strtod_l+0x6ea>
 80040bc:	2301      	movs	r3, #1
 80040be:	2500      	movs	r5, #0
 80040c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80040c2:	e73e      	b.n	8003f42 <_strtod_l+0x6ea>
 80040c4:	463a      	mov	r2, r7
 80040c6:	4650      	mov	r0, sl
 80040c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80040ca:	f001 fec5 	bl	8005e58 <__lshift>
 80040ce:	901c      	str	r0, [sp, #112]	; 0x70
 80040d0:	2800      	cmp	r0, #0
 80040d2:	f47f af64 	bne.w	8003f9e <_strtod_l+0x746>
 80040d6:	e602      	b.n	8003cde <_strtod_l+0x486>
 80040d8:	080073b8 	.word	0x080073b8
 80040dc:	fffffc02 	.word	0xfffffc02
 80040e0:	7ff00000 	.word	0x7ff00000
 80040e4:	39500000 	.word	0x39500000
 80040e8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80040ec:	d166      	bne.n	80041bc <_strtod_l+0x964>
 80040ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80040f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80040f4:	b35a      	cbz	r2, 800414e <_strtod_l+0x8f6>
 80040f6:	4a9c      	ldr	r2, [pc, #624]	; (8004368 <_strtod_l+0xb10>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d12c      	bne.n	8004156 <_strtod_l+0x8fe>
 80040fc:	9b05      	ldr	r3, [sp, #20]
 80040fe:	4640      	mov	r0, r8
 8004100:	b303      	cbz	r3, 8004144 <_strtod_l+0x8ec>
 8004102:	464b      	mov	r3, r9
 8004104:	4a99      	ldr	r2, [pc, #612]	; (800436c <_strtod_l+0xb14>)
 8004106:	f04f 31ff 	mov.w	r1, #4294967295
 800410a:	401a      	ands	r2, r3
 800410c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004110:	d81b      	bhi.n	800414a <_strtod_l+0x8f2>
 8004112:	0d12      	lsrs	r2, r2, #20
 8004114:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004118:	fa01 f303 	lsl.w	r3, r1, r3
 800411c:	4298      	cmp	r0, r3
 800411e:	d11a      	bne.n	8004156 <_strtod_l+0x8fe>
 8004120:	4b93      	ldr	r3, [pc, #588]	; (8004370 <_strtod_l+0xb18>)
 8004122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004124:	429a      	cmp	r2, r3
 8004126:	d102      	bne.n	800412e <_strtod_l+0x8d6>
 8004128:	3001      	adds	r0, #1
 800412a:	f43f add8 	beq.w	8003cde <_strtod_l+0x486>
 800412e:	f04f 0800 	mov.w	r8, #0
 8004132:	4b8e      	ldr	r3, [pc, #568]	; (800436c <_strtod_l+0xb14>)
 8004134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004136:	401a      	ands	r2, r3
 8004138:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800413c:	9b05      	ldr	r3, [sp, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d196      	bne.n	8004070 <_strtod_l+0x818>
 8004142:	e5d7      	b.n	8003cf4 <_strtod_l+0x49c>
 8004144:	f04f 33ff 	mov.w	r3, #4294967295
 8004148:	e7e8      	b.n	800411c <_strtod_l+0x8c4>
 800414a:	460b      	mov	r3, r1
 800414c:	e7e6      	b.n	800411c <_strtod_l+0x8c4>
 800414e:	ea53 0308 	orrs.w	r3, r3, r8
 8004152:	f43f af7d 	beq.w	8004050 <_strtod_l+0x7f8>
 8004156:	b1e5      	cbz	r5, 8004192 <_strtod_l+0x93a>
 8004158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800415a:	421d      	tst	r5, r3
 800415c:	d0ee      	beq.n	800413c <_strtod_l+0x8e4>
 800415e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004160:	4640      	mov	r0, r8
 8004162:	4649      	mov	r1, r9
 8004164:	9a05      	ldr	r2, [sp, #20]
 8004166:	b1c3      	cbz	r3, 800419a <_strtod_l+0x942>
 8004168:	f7ff fb53 	bl	8003812 <sulp>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004174:	f7fb fffa 	bl	800016c <__adddf3>
 8004178:	4680      	mov	r8, r0
 800417a:	4689      	mov	r9, r1
 800417c:	e7de      	b.n	800413c <_strtod_l+0x8e4>
 800417e:	4013      	ands	r3, r2
 8004180:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004184:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004188:	f04f 38ff 	mov.w	r8, #4294967295
 800418c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004190:	e7d4      	b.n	800413c <_strtod_l+0x8e4>
 8004192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004194:	ea13 0f08 	tst.w	r3, r8
 8004198:	e7e0      	b.n	800415c <_strtod_l+0x904>
 800419a:	f7ff fb3a 	bl	8003812 <sulp>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80041a6:	f7fb ffdf 	bl	8000168 <__aeabi_dsub>
 80041aa:	2200      	movs	r2, #0
 80041ac:	2300      	movs	r3, #0
 80041ae:	4680      	mov	r8, r0
 80041b0:	4689      	mov	r9, r1
 80041b2:	f7fc fbf9 	bl	80009a8 <__aeabi_dcmpeq>
 80041b6:	2800      	cmp	r0, #0
 80041b8:	d0c0      	beq.n	800413c <_strtod_l+0x8e4>
 80041ba:	e602      	b.n	8003dc2 <_strtod_l+0x56a>
 80041bc:	4658      	mov	r0, fp
 80041be:	9904      	ldr	r1, [sp, #16]
 80041c0:	f002 f838 	bl	8006234 <__ratio>
 80041c4:	2200      	movs	r2, #0
 80041c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041ca:	4606      	mov	r6, r0
 80041cc:	460f      	mov	r7, r1
 80041ce:	f7fc fbff 	bl	80009d0 <__aeabi_dcmple>
 80041d2:	2800      	cmp	r0, #0
 80041d4:	d075      	beq.n	80042c2 <_strtod_l+0xa6a>
 80041d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d047      	beq.n	800426c <_strtod_l+0xa14>
 80041dc:	2600      	movs	r6, #0
 80041de:	4f65      	ldr	r7, [pc, #404]	; (8004374 <_strtod_l+0xb1c>)
 80041e0:	4d64      	ldr	r5, [pc, #400]	; (8004374 <_strtod_l+0xb1c>)
 80041e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041e8:	0d1b      	lsrs	r3, r3, #20
 80041ea:	051b      	lsls	r3, r3, #20
 80041ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80041ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80041f0:	4b61      	ldr	r3, [pc, #388]	; (8004378 <_strtod_l+0xb20>)
 80041f2:	429a      	cmp	r2, r3
 80041f4:	f040 80c8 	bne.w	8004388 <_strtod_l+0xb30>
 80041f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80041fc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004202:	4640      	mov	r0, r8
 8004204:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004208:	4649      	mov	r1, r9
 800420a:	f001 ff3d 	bl	8006088 <__ulp>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4630      	mov	r0, r6
 8004214:	4639      	mov	r1, r7
 8004216:	f7fc f95f 	bl	80004d8 <__aeabi_dmul>
 800421a:	4642      	mov	r2, r8
 800421c:	464b      	mov	r3, r9
 800421e:	f7fb ffa5 	bl	800016c <__adddf3>
 8004222:	460b      	mov	r3, r1
 8004224:	4951      	ldr	r1, [pc, #324]	; (800436c <_strtod_l+0xb14>)
 8004226:	4a55      	ldr	r2, [pc, #340]	; (800437c <_strtod_l+0xb24>)
 8004228:	4019      	ands	r1, r3
 800422a:	4291      	cmp	r1, r2
 800422c:	4680      	mov	r8, r0
 800422e:	d95e      	bls.n	80042ee <_strtod_l+0xa96>
 8004230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004232:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004236:	4293      	cmp	r3, r2
 8004238:	d103      	bne.n	8004242 <_strtod_l+0x9ea>
 800423a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800423c:	3301      	adds	r3, #1
 800423e:	f43f ad4e 	beq.w	8003cde <_strtod_l+0x486>
 8004242:	f04f 38ff 	mov.w	r8, #4294967295
 8004246:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004370 <_strtod_l+0xb18>
 800424a:	4650      	mov	r0, sl
 800424c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800424e:	f001 fbeb 	bl	8005a28 <_Bfree>
 8004252:	4650      	mov	r0, sl
 8004254:	9906      	ldr	r1, [sp, #24]
 8004256:	f001 fbe7 	bl	8005a28 <_Bfree>
 800425a:	4650      	mov	r0, sl
 800425c:	9904      	ldr	r1, [sp, #16]
 800425e:	f001 fbe3 	bl	8005a28 <_Bfree>
 8004262:	4659      	mov	r1, fp
 8004264:	4650      	mov	r0, sl
 8004266:	f001 fbdf 	bl	8005a28 <_Bfree>
 800426a:	e61c      	b.n	8003ea6 <_strtod_l+0x64e>
 800426c:	f1b8 0f00 	cmp.w	r8, #0
 8004270:	d119      	bne.n	80042a6 <_strtod_l+0xa4e>
 8004272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004278:	b9e3      	cbnz	r3, 80042b4 <_strtod_l+0xa5c>
 800427a:	2200      	movs	r2, #0
 800427c:	4630      	mov	r0, r6
 800427e:	4639      	mov	r1, r7
 8004280:	4b3c      	ldr	r3, [pc, #240]	; (8004374 <_strtod_l+0xb1c>)
 8004282:	f7fc fb9b 	bl	80009bc <__aeabi_dcmplt>
 8004286:	b9c8      	cbnz	r0, 80042bc <_strtod_l+0xa64>
 8004288:	2200      	movs	r2, #0
 800428a:	4630      	mov	r0, r6
 800428c:	4639      	mov	r1, r7
 800428e:	4b3c      	ldr	r3, [pc, #240]	; (8004380 <_strtod_l+0xb28>)
 8004290:	f7fc f922 	bl	80004d8 <__aeabi_dmul>
 8004294:	4604      	mov	r4, r0
 8004296:	460d      	mov	r5, r1
 8004298:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800429c:	9418      	str	r4, [sp, #96]	; 0x60
 800429e:	9319      	str	r3, [sp, #100]	; 0x64
 80042a0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80042a4:	e79d      	b.n	80041e2 <_strtod_l+0x98a>
 80042a6:	f1b8 0f01 	cmp.w	r8, #1
 80042aa:	d103      	bne.n	80042b4 <_strtod_l+0xa5c>
 80042ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f43f ad87 	beq.w	8003dc2 <_strtod_l+0x56a>
 80042b4:	2600      	movs	r6, #0
 80042b6:	2400      	movs	r4, #0
 80042b8:	4f32      	ldr	r7, [pc, #200]	; (8004384 <_strtod_l+0xb2c>)
 80042ba:	e791      	b.n	80041e0 <_strtod_l+0x988>
 80042bc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80042be:	4d30      	ldr	r5, [pc, #192]	; (8004380 <_strtod_l+0xb28>)
 80042c0:	e7ea      	b.n	8004298 <_strtod_l+0xa40>
 80042c2:	4b2f      	ldr	r3, [pc, #188]	; (8004380 <_strtod_l+0xb28>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	4630      	mov	r0, r6
 80042c8:	4639      	mov	r1, r7
 80042ca:	f7fc f905 	bl	80004d8 <__aeabi_dmul>
 80042ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042d0:	4604      	mov	r4, r0
 80042d2:	460d      	mov	r5, r1
 80042d4:	b933      	cbnz	r3, 80042e4 <_strtod_l+0xa8c>
 80042d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80042da:	9010      	str	r0, [sp, #64]	; 0x40
 80042dc:	9311      	str	r3, [sp, #68]	; 0x44
 80042de:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80042e2:	e77e      	b.n	80041e2 <_strtod_l+0x98a>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80042ec:	e7f7      	b.n	80042de <_strtod_l+0xa86>
 80042ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80042f2:	9b05      	ldr	r3, [sp, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1a8      	bne.n	800424a <_strtod_l+0x9f2>
 80042f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80042fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80042fe:	0d1b      	lsrs	r3, r3, #20
 8004300:	051b      	lsls	r3, r3, #20
 8004302:	429a      	cmp	r2, r3
 8004304:	d1a1      	bne.n	800424a <_strtod_l+0x9f2>
 8004306:	4620      	mov	r0, r4
 8004308:	4629      	mov	r1, r5
 800430a:	f7fc fc2d 	bl	8000b68 <__aeabi_d2lz>
 800430e:	f7fc f8b5 	bl	800047c <__aeabi_l2d>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4620      	mov	r0, r4
 8004318:	4629      	mov	r1, r5
 800431a:	f7fb ff25 	bl	8000168 <__aeabi_dsub>
 800431e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004320:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004324:	ea43 0308 	orr.w	r3, r3, r8
 8004328:	4313      	orrs	r3, r2
 800432a:	4604      	mov	r4, r0
 800432c:	460d      	mov	r5, r1
 800432e:	d066      	beq.n	80043fe <_strtod_l+0xba6>
 8004330:	a309      	add	r3, pc, #36	; (adr r3, 8004358 <_strtod_l+0xb00>)
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	f7fc fb41 	bl	80009bc <__aeabi_dcmplt>
 800433a:	2800      	cmp	r0, #0
 800433c:	f47f acda 	bne.w	8003cf4 <_strtod_l+0x49c>
 8004340:	a307      	add	r3, pc, #28	; (adr r3, 8004360 <_strtod_l+0xb08>)
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	4620      	mov	r0, r4
 8004348:	4629      	mov	r1, r5
 800434a:	f7fc fb55 	bl	80009f8 <__aeabi_dcmpgt>
 800434e:	2800      	cmp	r0, #0
 8004350:	f43f af7b 	beq.w	800424a <_strtod_l+0x9f2>
 8004354:	e4ce      	b.n	8003cf4 <_strtod_l+0x49c>
 8004356:	bf00      	nop
 8004358:	94a03595 	.word	0x94a03595
 800435c:	3fdfffff 	.word	0x3fdfffff
 8004360:	35afe535 	.word	0x35afe535
 8004364:	3fe00000 	.word	0x3fe00000
 8004368:	000fffff 	.word	0x000fffff
 800436c:	7ff00000 	.word	0x7ff00000
 8004370:	7fefffff 	.word	0x7fefffff
 8004374:	3ff00000 	.word	0x3ff00000
 8004378:	7fe00000 	.word	0x7fe00000
 800437c:	7c9fffff 	.word	0x7c9fffff
 8004380:	3fe00000 	.word	0x3fe00000
 8004384:	bff00000 	.word	0xbff00000
 8004388:	9b05      	ldr	r3, [sp, #20]
 800438a:	b313      	cbz	r3, 80043d2 <_strtod_l+0xb7a>
 800438c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800438e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004392:	d81e      	bhi.n	80043d2 <_strtod_l+0xb7a>
 8004394:	a326      	add	r3, pc, #152	; (adr r3, 8004430 <_strtod_l+0xbd8>)
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	4620      	mov	r0, r4
 800439c:	4629      	mov	r1, r5
 800439e:	f7fc fb17 	bl	80009d0 <__aeabi_dcmple>
 80043a2:	b190      	cbz	r0, 80043ca <_strtod_l+0xb72>
 80043a4:	4629      	mov	r1, r5
 80043a6:	4620      	mov	r0, r4
 80043a8:	f7fc fb6e 	bl	8000a88 <__aeabi_d2uiz>
 80043ac:	2801      	cmp	r0, #1
 80043ae:	bf38      	it	cc
 80043b0:	2001      	movcc	r0, #1
 80043b2:	f7fc f817 	bl	80003e4 <__aeabi_ui2d>
 80043b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043b8:	4604      	mov	r4, r0
 80043ba:	460d      	mov	r5, r1
 80043bc:	b9d3      	cbnz	r3, 80043f4 <_strtod_l+0xb9c>
 80043be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043c2:	9012      	str	r0, [sp, #72]	; 0x48
 80043c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80043c6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80043ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80043cc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80043d0:	1a9f      	subs	r7, r3, r2
 80043d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80043d6:	f001 fe57 	bl	8006088 <__ulp>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4630      	mov	r0, r6
 80043e0:	4639      	mov	r1, r7
 80043e2:	f7fc f879 	bl	80004d8 <__aeabi_dmul>
 80043e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80043ea:	f7fb febf 	bl	800016c <__adddf3>
 80043ee:	4680      	mov	r8, r0
 80043f0:	4689      	mov	r9, r1
 80043f2:	e77e      	b.n	80042f2 <_strtod_l+0xa9a>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80043fc:	e7e3      	b.n	80043c6 <_strtod_l+0xb6e>
 80043fe:	a30e      	add	r3, pc, #56	; (adr r3, 8004438 <_strtod_l+0xbe0>)
 8004400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004404:	f7fc fada 	bl	80009bc <__aeabi_dcmplt>
 8004408:	e7a1      	b.n	800434e <_strtod_l+0xaf6>
 800440a:	2300      	movs	r3, #0
 800440c:	930c      	str	r3, [sp, #48]	; 0x30
 800440e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004410:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	f7ff ba65 	b.w	80038e2 <_strtod_l+0x8a>
 8004418:	2b65      	cmp	r3, #101	; 0x65
 800441a:	f43f ab5c 	beq.w	8003ad6 <_strtod_l+0x27e>
 800441e:	2b45      	cmp	r3, #69	; 0x45
 8004420:	f43f ab59 	beq.w	8003ad6 <_strtod_l+0x27e>
 8004424:	2201      	movs	r2, #1
 8004426:	f7ff bb8d 	b.w	8003b44 <_strtod_l+0x2ec>
 800442a:	bf00      	nop
 800442c:	f3af 8000 	nop.w
 8004430:	ffc00000 	.word	0xffc00000
 8004434:	41dfffff 	.word	0x41dfffff
 8004438:	94a03595 	.word	0x94a03595
 800443c:	3fcfffff 	.word	0x3fcfffff

08004440 <_strtod_r>:
 8004440:	4b01      	ldr	r3, [pc, #4]	; (8004448 <_strtod_r+0x8>)
 8004442:	f7ff ba09 	b.w	8003858 <_strtod_l>
 8004446:	bf00      	nop
 8004448:	20000074 	.word	0x20000074

0800444c <strtod>:
 800444c:	460a      	mov	r2, r1
 800444e:	4601      	mov	r1, r0
 8004450:	4802      	ldr	r0, [pc, #8]	; (800445c <strtod+0x10>)
 8004452:	4b03      	ldr	r3, [pc, #12]	; (8004460 <strtod+0x14>)
 8004454:	6800      	ldr	r0, [r0, #0]
 8004456:	f7ff b9ff 	b.w	8003858 <_strtod_l>
 800445a:	bf00      	nop
 800445c:	2000000c 	.word	0x2000000c
 8004460:	20000074 	.word	0x20000074

08004464 <_strtol_l.isra.0>:
 8004464:	2b01      	cmp	r3, #1
 8004466:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800446a:	4686      	mov	lr, r0
 800446c:	d001      	beq.n	8004472 <_strtol_l.isra.0+0xe>
 800446e:	2b24      	cmp	r3, #36	; 0x24
 8004470:	d906      	bls.n	8004480 <_strtol_l.isra.0+0x1c>
 8004472:	f7fe fae1 	bl	8002a38 <__errno>
 8004476:	2316      	movs	r3, #22
 8004478:	6003      	str	r3, [r0, #0]
 800447a:	2000      	movs	r0, #0
 800447c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004480:	468c      	mov	ip, r1
 8004482:	4e3a      	ldr	r6, [pc, #232]	; (800456c <_strtol_l.isra.0+0x108>)
 8004484:	4660      	mov	r0, ip
 8004486:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800448a:	5da5      	ldrb	r5, [r4, r6]
 800448c:	f015 0508 	ands.w	r5, r5, #8
 8004490:	d1f8      	bne.n	8004484 <_strtol_l.isra.0+0x20>
 8004492:	2c2d      	cmp	r4, #45	; 0x2d
 8004494:	d133      	bne.n	80044fe <_strtol_l.isra.0+0x9a>
 8004496:	f04f 0801 	mov.w	r8, #1
 800449a:	f89c 4000 	ldrb.w	r4, [ip]
 800449e:	f100 0c02 	add.w	ip, r0, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d05d      	beq.n	8004562 <_strtol_l.isra.0+0xfe>
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	d10c      	bne.n	80044c4 <_strtol_l.isra.0+0x60>
 80044aa:	2c30      	cmp	r4, #48	; 0x30
 80044ac:	d10a      	bne.n	80044c4 <_strtol_l.isra.0+0x60>
 80044ae:	f89c 0000 	ldrb.w	r0, [ip]
 80044b2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80044b6:	2858      	cmp	r0, #88	; 0x58
 80044b8:	d14e      	bne.n	8004558 <_strtol_l.isra.0+0xf4>
 80044ba:	2310      	movs	r3, #16
 80044bc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80044c0:	f10c 0c02 	add.w	ip, ip, #2
 80044c4:	2500      	movs	r5, #0
 80044c6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80044ca:	3f01      	subs	r7, #1
 80044cc:	fbb7 f9f3 	udiv	r9, r7, r3
 80044d0:	4628      	mov	r0, r5
 80044d2:	fb03 7a19 	mls	sl, r3, r9, r7
 80044d6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80044da:	2e09      	cmp	r6, #9
 80044dc:	d818      	bhi.n	8004510 <_strtol_l.isra.0+0xac>
 80044de:	4634      	mov	r4, r6
 80044e0:	42a3      	cmp	r3, r4
 80044e2:	dd24      	ble.n	800452e <_strtol_l.isra.0+0xca>
 80044e4:	2d00      	cmp	r5, #0
 80044e6:	db1f      	blt.n	8004528 <_strtol_l.isra.0+0xc4>
 80044e8:	4581      	cmp	r9, r0
 80044ea:	d31d      	bcc.n	8004528 <_strtol_l.isra.0+0xc4>
 80044ec:	d101      	bne.n	80044f2 <_strtol_l.isra.0+0x8e>
 80044ee:	45a2      	cmp	sl, r4
 80044f0:	db1a      	blt.n	8004528 <_strtol_l.isra.0+0xc4>
 80044f2:	2501      	movs	r5, #1
 80044f4:	fb00 4003 	mla	r0, r0, r3, r4
 80044f8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80044fc:	e7eb      	b.n	80044d6 <_strtol_l.isra.0+0x72>
 80044fe:	2c2b      	cmp	r4, #43	; 0x2b
 8004500:	bf08      	it	eq
 8004502:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004506:	46a8      	mov	r8, r5
 8004508:	bf08      	it	eq
 800450a:	f100 0c02 	addeq.w	ip, r0, #2
 800450e:	e7c8      	b.n	80044a2 <_strtol_l.isra.0+0x3e>
 8004510:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004514:	2e19      	cmp	r6, #25
 8004516:	d801      	bhi.n	800451c <_strtol_l.isra.0+0xb8>
 8004518:	3c37      	subs	r4, #55	; 0x37
 800451a:	e7e1      	b.n	80044e0 <_strtol_l.isra.0+0x7c>
 800451c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004520:	2e19      	cmp	r6, #25
 8004522:	d804      	bhi.n	800452e <_strtol_l.isra.0+0xca>
 8004524:	3c57      	subs	r4, #87	; 0x57
 8004526:	e7db      	b.n	80044e0 <_strtol_l.isra.0+0x7c>
 8004528:	f04f 35ff 	mov.w	r5, #4294967295
 800452c:	e7e4      	b.n	80044f8 <_strtol_l.isra.0+0x94>
 800452e:	2d00      	cmp	r5, #0
 8004530:	da08      	bge.n	8004544 <_strtol_l.isra.0+0xe0>
 8004532:	2322      	movs	r3, #34	; 0x22
 8004534:	4638      	mov	r0, r7
 8004536:	f8ce 3000 	str.w	r3, [lr]
 800453a:	2a00      	cmp	r2, #0
 800453c:	d09e      	beq.n	800447c <_strtol_l.isra.0+0x18>
 800453e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8004542:	e007      	b.n	8004554 <_strtol_l.isra.0+0xf0>
 8004544:	f1b8 0f00 	cmp.w	r8, #0
 8004548:	d000      	beq.n	800454c <_strtol_l.isra.0+0xe8>
 800454a:	4240      	negs	r0, r0
 800454c:	2a00      	cmp	r2, #0
 800454e:	d095      	beq.n	800447c <_strtol_l.isra.0+0x18>
 8004550:	2d00      	cmp	r5, #0
 8004552:	d1f4      	bne.n	800453e <_strtol_l.isra.0+0xda>
 8004554:	6011      	str	r1, [r2, #0]
 8004556:	e791      	b.n	800447c <_strtol_l.isra.0+0x18>
 8004558:	2430      	movs	r4, #48	; 0x30
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1b2      	bne.n	80044c4 <_strtol_l.isra.0+0x60>
 800455e:	2308      	movs	r3, #8
 8004560:	e7b0      	b.n	80044c4 <_strtol_l.isra.0+0x60>
 8004562:	2c30      	cmp	r4, #48	; 0x30
 8004564:	d0a3      	beq.n	80044ae <_strtol_l.isra.0+0x4a>
 8004566:	230a      	movs	r3, #10
 8004568:	e7ac      	b.n	80044c4 <_strtol_l.isra.0+0x60>
 800456a:	bf00      	nop
 800456c:	080073e1 	.word	0x080073e1

08004570 <_strtol_r>:
 8004570:	f7ff bf78 	b.w	8004464 <_strtol_l.isra.0>

08004574 <strtol>:
 8004574:	4613      	mov	r3, r2
 8004576:	460a      	mov	r2, r1
 8004578:	4601      	mov	r1, r0
 800457a:	4802      	ldr	r0, [pc, #8]	; (8004584 <strtol+0x10>)
 800457c:	6800      	ldr	r0, [r0, #0]
 800457e:	f7ff bf71 	b.w	8004464 <_strtol_l.isra.0>
 8004582:	bf00      	nop
 8004584:	2000000c 	.word	0x2000000c

08004588 <quorem>:
 8004588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800458c:	6903      	ldr	r3, [r0, #16]
 800458e:	690c      	ldr	r4, [r1, #16]
 8004590:	4607      	mov	r7, r0
 8004592:	42a3      	cmp	r3, r4
 8004594:	f2c0 8083 	blt.w	800469e <quorem+0x116>
 8004598:	3c01      	subs	r4, #1
 800459a:	f100 0514 	add.w	r5, r0, #20
 800459e:	f101 0814 	add.w	r8, r1, #20
 80045a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80045a6:	9301      	str	r3, [sp, #4]
 80045a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80045ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045b0:	3301      	adds	r3, #1
 80045b2:	429a      	cmp	r2, r3
 80045b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80045b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80045bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80045c0:	d332      	bcc.n	8004628 <quorem+0xa0>
 80045c2:	f04f 0e00 	mov.w	lr, #0
 80045c6:	4640      	mov	r0, r8
 80045c8:	46ac      	mov	ip, r5
 80045ca:	46f2      	mov	sl, lr
 80045cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80045d0:	b293      	uxth	r3, r2
 80045d2:	fb06 e303 	mla	r3, r6, r3, lr
 80045d6:	0c12      	lsrs	r2, r2, #16
 80045d8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80045dc:	fb06 e202 	mla	r2, r6, r2, lr
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	ebaa 0303 	sub.w	r3, sl, r3
 80045e6:	f8dc a000 	ldr.w	sl, [ip]
 80045ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80045ee:	fa1f fa8a 	uxth.w	sl, sl
 80045f2:	4453      	add	r3, sl
 80045f4:	fa1f fa82 	uxth.w	sl, r2
 80045f8:	f8dc 2000 	ldr.w	r2, [ip]
 80045fc:	4581      	cmp	r9, r0
 80045fe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004602:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004606:	b29b      	uxth	r3, r3
 8004608:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800460c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004610:	f84c 3b04 	str.w	r3, [ip], #4
 8004614:	d2da      	bcs.n	80045cc <quorem+0x44>
 8004616:	f855 300b 	ldr.w	r3, [r5, fp]
 800461a:	b92b      	cbnz	r3, 8004628 <quorem+0xa0>
 800461c:	9b01      	ldr	r3, [sp, #4]
 800461e:	3b04      	subs	r3, #4
 8004620:	429d      	cmp	r5, r3
 8004622:	461a      	mov	r2, r3
 8004624:	d32f      	bcc.n	8004686 <quorem+0xfe>
 8004626:	613c      	str	r4, [r7, #16]
 8004628:	4638      	mov	r0, r7
 800462a:	f001 fc81 	bl	8005f30 <__mcmp>
 800462e:	2800      	cmp	r0, #0
 8004630:	db25      	blt.n	800467e <quorem+0xf6>
 8004632:	4628      	mov	r0, r5
 8004634:	f04f 0c00 	mov.w	ip, #0
 8004638:	3601      	adds	r6, #1
 800463a:	f858 1b04 	ldr.w	r1, [r8], #4
 800463e:	f8d0 e000 	ldr.w	lr, [r0]
 8004642:	b28b      	uxth	r3, r1
 8004644:	ebac 0303 	sub.w	r3, ip, r3
 8004648:	fa1f f28e 	uxth.w	r2, lr
 800464c:	4413      	add	r3, r2
 800464e:	0c0a      	lsrs	r2, r1, #16
 8004650:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004654:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004658:	b29b      	uxth	r3, r3
 800465a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800465e:	45c1      	cmp	r9, r8
 8004660:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004664:	f840 3b04 	str.w	r3, [r0], #4
 8004668:	d2e7      	bcs.n	800463a <quorem+0xb2>
 800466a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800466e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004672:	b922      	cbnz	r2, 800467e <quorem+0xf6>
 8004674:	3b04      	subs	r3, #4
 8004676:	429d      	cmp	r5, r3
 8004678:	461a      	mov	r2, r3
 800467a:	d30a      	bcc.n	8004692 <quorem+0x10a>
 800467c:	613c      	str	r4, [r7, #16]
 800467e:	4630      	mov	r0, r6
 8004680:	b003      	add	sp, #12
 8004682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	3b04      	subs	r3, #4
 800468a:	2a00      	cmp	r2, #0
 800468c:	d1cb      	bne.n	8004626 <quorem+0x9e>
 800468e:	3c01      	subs	r4, #1
 8004690:	e7c6      	b.n	8004620 <quorem+0x98>
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	3b04      	subs	r3, #4
 8004696:	2a00      	cmp	r2, #0
 8004698:	d1f0      	bne.n	800467c <quorem+0xf4>
 800469a:	3c01      	subs	r4, #1
 800469c:	e7eb      	b.n	8004676 <quorem+0xee>
 800469e:	2000      	movs	r0, #0
 80046a0:	e7ee      	b.n	8004680 <quorem+0xf8>
 80046a2:	0000      	movs	r0, r0
 80046a4:	0000      	movs	r0, r0
	...

080046a8 <_dtoa_r>:
 80046a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ac:	4616      	mov	r6, r2
 80046ae:	461f      	mov	r7, r3
 80046b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80046b2:	b099      	sub	sp, #100	; 0x64
 80046b4:	4605      	mov	r5, r0
 80046b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80046ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80046be:	b974      	cbnz	r4, 80046de <_dtoa_r+0x36>
 80046c0:	2010      	movs	r0, #16
 80046c2:	f001 f949 	bl	8005958 <malloc>
 80046c6:	4602      	mov	r2, r0
 80046c8:	6268      	str	r0, [r5, #36]	; 0x24
 80046ca:	b920      	cbnz	r0, 80046d6 <_dtoa_r+0x2e>
 80046cc:	21ea      	movs	r1, #234	; 0xea
 80046ce:	4bae      	ldr	r3, [pc, #696]	; (8004988 <_dtoa_r+0x2e0>)
 80046d0:	48ae      	ldr	r0, [pc, #696]	; (800498c <_dtoa_r+0x2e4>)
 80046d2:	f002 f867 	bl	80067a4 <__assert_func>
 80046d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80046da:	6004      	str	r4, [r0, #0]
 80046dc:	60c4      	str	r4, [r0, #12]
 80046de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80046e0:	6819      	ldr	r1, [r3, #0]
 80046e2:	b151      	cbz	r1, 80046fa <_dtoa_r+0x52>
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	2301      	movs	r3, #1
 80046e8:	4093      	lsls	r3, r2
 80046ea:	604a      	str	r2, [r1, #4]
 80046ec:	608b      	str	r3, [r1, #8]
 80046ee:	4628      	mov	r0, r5
 80046f0:	f001 f99a 	bl	8005a28 <_Bfree>
 80046f4:	2200      	movs	r2, #0
 80046f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	1e3b      	subs	r3, r7, #0
 80046fc:	bfaf      	iteee	ge
 80046fe:	2300      	movge	r3, #0
 8004700:	2201      	movlt	r2, #1
 8004702:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004706:	9305      	strlt	r3, [sp, #20]
 8004708:	bfa8      	it	ge
 800470a:	f8c8 3000 	strge.w	r3, [r8]
 800470e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004712:	4b9f      	ldr	r3, [pc, #636]	; (8004990 <_dtoa_r+0x2e8>)
 8004714:	bfb8      	it	lt
 8004716:	f8c8 2000 	strlt.w	r2, [r8]
 800471a:	ea33 0309 	bics.w	r3, r3, r9
 800471e:	d119      	bne.n	8004754 <_dtoa_r+0xac>
 8004720:	f242 730f 	movw	r3, #9999	; 0x270f
 8004724:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800472c:	4333      	orrs	r3, r6
 800472e:	f000 8580 	beq.w	8005232 <_dtoa_r+0xb8a>
 8004732:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004734:	b953      	cbnz	r3, 800474c <_dtoa_r+0xa4>
 8004736:	4b97      	ldr	r3, [pc, #604]	; (8004994 <_dtoa_r+0x2ec>)
 8004738:	e022      	b.n	8004780 <_dtoa_r+0xd8>
 800473a:	4b97      	ldr	r3, [pc, #604]	; (8004998 <_dtoa_r+0x2f0>)
 800473c:	9308      	str	r3, [sp, #32]
 800473e:	3308      	adds	r3, #8
 8004740:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	9808      	ldr	r0, [sp, #32]
 8004746:	b019      	add	sp, #100	; 0x64
 8004748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800474c:	4b91      	ldr	r3, [pc, #580]	; (8004994 <_dtoa_r+0x2ec>)
 800474e:	9308      	str	r3, [sp, #32]
 8004750:	3303      	adds	r3, #3
 8004752:	e7f5      	b.n	8004740 <_dtoa_r+0x98>
 8004754:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004758:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800475c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004760:	2200      	movs	r2, #0
 8004762:	2300      	movs	r3, #0
 8004764:	f7fc f920 	bl	80009a8 <__aeabi_dcmpeq>
 8004768:	4680      	mov	r8, r0
 800476a:	b158      	cbz	r0, 8004784 <_dtoa_r+0xdc>
 800476c:	2301      	movs	r3, #1
 800476e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8559 	beq.w	800522c <_dtoa_r+0xb84>
 800477a:	4888      	ldr	r0, [pc, #544]	; (800499c <_dtoa_r+0x2f4>)
 800477c:	6018      	str	r0, [r3, #0]
 800477e:	1e43      	subs	r3, r0, #1
 8004780:	9308      	str	r3, [sp, #32]
 8004782:	e7df      	b.n	8004744 <_dtoa_r+0x9c>
 8004784:	ab16      	add	r3, sp, #88	; 0x58
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	ab17      	add	r3, sp, #92	; 0x5c
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	4628      	mov	r0, r5
 800478e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004792:	f001 fcf3 	bl	800617c <__d2b>
 8004796:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800479a:	4682      	mov	sl, r0
 800479c:	2c00      	cmp	r4, #0
 800479e:	d07e      	beq.n	800489e <_dtoa_r+0x1f6>
 80047a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80047a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80047aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047ae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80047b2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80047b6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80047ba:	2200      	movs	r2, #0
 80047bc:	4b78      	ldr	r3, [pc, #480]	; (80049a0 <_dtoa_r+0x2f8>)
 80047be:	f7fb fcd3 	bl	8000168 <__aeabi_dsub>
 80047c2:	a36b      	add	r3, pc, #428	; (adr r3, 8004970 <_dtoa_r+0x2c8>)
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	f7fb fe86 	bl	80004d8 <__aeabi_dmul>
 80047cc:	a36a      	add	r3, pc, #424	; (adr r3, 8004978 <_dtoa_r+0x2d0>)
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	f7fb fccb 	bl	800016c <__adddf3>
 80047d6:	4606      	mov	r6, r0
 80047d8:	4620      	mov	r0, r4
 80047da:	460f      	mov	r7, r1
 80047dc:	f7fb fe12 	bl	8000404 <__aeabi_i2d>
 80047e0:	a367      	add	r3, pc, #412	; (adr r3, 8004980 <_dtoa_r+0x2d8>)
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	f7fb fe77 	bl	80004d8 <__aeabi_dmul>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4630      	mov	r0, r6
 80047f0:	4639      	mov	r1, r7
 80047f2:	f7fb fcbb 	bl	800016c <__adddf3>
 80047f6:	4606      	mov	r6, r0
 80047f8:	460f      	mov	r7, r1
 80047fa:	f7fc f91d 	bl	8000a38 <__aeabi_d2iz>
 80047fe:	2200      	movs	r2, #0
 8004800:	4681      	mov	r9, r0
 8004802:	2300      	movs	r3, #0
 8004804:	4630      	mov	r0, r6
 8004806:	4639      	mov	r1, r7
 8004808:	f7fc f8d8 	bl	80009bc <__aeabi_dcmplt>
 800480c:	b148      	cbz	r0, 8004822 <_dtoa_r+0x17a>
 800480e:	4648      	mov	r0, r9
 8004810:	f7fb fdf8 	bl	8000404 <__aeabi_i2d>
 8004814:	4632      	mov	r2, r6
 8004816:	463b      	mov	r3, r7
 8004818:	f7fc f8c6 	bl	80009a8 <__aeabi_dcmpeq>
 800481c:	b908      	cbnz	r0, 8004822 <_dtoa_r+0x17a>
 800481e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004822:	f1b9 0f16 	cmp.w	r9, #22
 8004826:	d857      	bhi.n	80048d8 <_dtoa_r+0x230>
 8004828:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800482c:	4b5d      	ldr	r3, [pc, #372]	; (80049a4 <_dtoa_r+0x2fc>)
 800482e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	f7fc f8c1 	bl	80009bc <__aeabi_dcmplt>
 800483a:	2800      	cmp	r0, #0
 800483c:	d04e      	beq.n	80048dc <_dtoa_r+0x234>
 800483e:	2300      	movs	r3, #0
 8004840:	f109 39ff 	add.w	r9, r9, #4294967295
 8004844:	930f      	str	r3, [sp, #60]	; 0x3c
 8004846:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004848:	1b1c      	subs	r4, r3, r4
 800484a:	1e63      	subs	r3, r4, #1
 800484c:	9309      	str	r3, [sp, #36]	; 0x24
 800484e:	bf49      	itett	mi
 8004850:	f1c4 0301 	rsbmi	r3, r4, #1
 8004854:	2300      	movpl	r3, #0
 8004856:	9306      	strmi	r3, [sp, #24]
 8004858:	2300      	movmi	r3, #0
 800485a:	bf54      	ite	pl
 800485c:	9306      	strpl	r3, [sp, #24]
 800485e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004860:	f1b9 0f00 	cmp.w	r9, #0
 8004864:	db3c      	blt.n	80048e0 <_dtoa_r+0x238>
 8004866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004868:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800486c:	444b      	add	r3, r9
 800486e:	9309      	str	r3, [sp, #36]	; 0x24
 8004870:	2300      	movs	r3, #0
 8004872:	930a      	str	r3, [sp, #40]	; 0x28
 8004874:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004876:	2b09      	cmp	r3, #9
 8004878:	d86c      	bhi.n	8004954 <_dtoa_r+0x2ac>
 800487a:	2b05      	cmp	r3, #5
 800487c:	bfc4      	itt	gt
 800487e:	3b04      	subgt	r3, #4
 8004880:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004882:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004884:	bfc8      	it	gt
 8004886:	2400      	movgt	r4, #0
 8004888:	f1a3 0302 	sub.w	r3, r3, #2
 800488c:	bfd8      	it	le
 800488e:	2401      	movle	r4, #1
 8004890:	2b03      	cmp	r3, #3
 8004892:	f200 808b 	bhi.w	80049ac <_dtoa_r+0x304>
 8004896:	e8df f003 	tbb	[pc, r3]
 800489a:	4f2d      	.short	0x4f2d
 800489c:	5b4d      	.short	0x5b4d
 800489e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80048a2:	441c      	add	r4, r3
 80048a4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80048a8:	2b20      	cmp	r3, #32
 80048aa:	bfc3      	ittte	gt
 80048ac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80048b0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80048b4:	fa09 f303 	lslgt.w	r3, r9, r3
 80048b8:	f1c3 0320 	rsble	r3, r3, #32
 80048bc:	bfc6      	itte	gt
 80048be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80048c2:	4318      	orrgt	r0, r3
 80048c4:	fa06 f003 	lslle.w	r0, r6, r3
 80048c8:	f7fb fd8c 	bl	80003e4 <__aeabi_ui2d>
 80048cc:	2301      	movs	r3, #1
 80048ce:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80048d2:	3c01      	subs	r4, #1
 80048d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80048d6:	e770      	b.n	80047ba <_dtoa_r+0x112>
 80048d8:	2301      	movs	r3, #1
 80048da:	e7b3      	b.n	8004844 <_dtoa_r+0x19c>
 80048dc:	900f      	str	r0, [sp, #60]	; 0x3c
 80048de:	e7b2      	b.n	8004846 <_dtoa_r+0x19e>
 80048e0:	9b06      	ldr	r3, [sp, #24]
 80048e2:	eba3 0309 	sub.w	r3, r3, r9
 80048e6:	9306      	str	r3, [sp, #24]
 80048e8:	f1c9 0300 	rsb	r3, r9, #0
 80048ec:	930a      	str	r3, [sp, #40]	; 0x28
 80048ee:	2300      	movs	r3, #0
 80048f0:	930e      	str	r3, [sp, #56]	; 0x38
 80048f2:	e7bf      	b.n	8004874 <_dtoa_r+0x1cc>
 80048f4:	2300      	movs	r3, #0
 80048f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80048f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	dc59      	bgt.n	80049b2 <_dtoa_r+0x30a>
 80048fe:	f04f 0b01 	mov.w	fp, #1
 8004902:	465b      	mov	r3, fp
 8004904:	f8cd b008 	str.w	fp, [sp, #8]
 8004908:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800490c:	2200      	movs	r2, #0
 800490e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004910:	6042      	str	r2, [r0, #4]
 8004912:	2204      	movs	r2, #4
 8004914:	f102 0614 	add.w	r6, r2, #20
 8004918:	429e      	cmp	r6, r3
 800491a:	6841      	ldr	r1, [r0, #4]
 800491c:	d94f      	bls.n	80049be <_dtoa_r+0x316>
 800491e:	4628      	mov	r0, r5
 8004920:	f001 f842 	bl	80059a8 <_Balloc>
 8004924:	9008      	str	r0, [sp, #32]
 8004926:	2800      	cmp	r0, #0
 8004928:	d14d      	bne.n	80049c6 <_dtoa_r+0x31e>
 800492a:	4602      	mov	r2, r0
 800492c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004930:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <_dtoa_r+0x300>)
 8004932:	e6cd      	b.n	80046d0 <_dtoa_r+0x28>
 8004934:	2301      	movs	r3, #1
 8004936:	e7de      	b.n	80048f6 <_dtoa_r+0x24e>
 8004938:	2300      	movs	r3, #0
 800493a:	930b      	str	r3, [sp, #44]	; 0x2c
 800493c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800493e:	eb09 0b03 	add.w	fp, r9, r3
 8004942:	f10b 0301 	add.w	r3, fp, #1
 8004946:	2b01      	cmp	r3, #1
 8004948:	9302      	str	r3, [sp, #8]
 800494a:	bfb8      	it	lt
 800494c:	2301      	movlt	r3, #1
 800494e:	e7dd      	b.n	800490c <_dtoa_r+0x264>
 8004950:	2301      	movs	r3, #1
 8004952:	e7f2      	b.n	800493a <_dtoa_r+0x292>
 8004954:	2401      	movs	r4, #1
 8004956:	2300      	movs	r3, #0
 8004958:	940b      	str	r4, [sp, #44]	; 0x2c
 800495a:	9322      	str	r3, [sp, #136]	; 0x88
 800495c:	f04f 3bff 	mov.w	fp, #4294967295
 8004960:	2200      	movs	r2, #0
 8004962:	2312      	movs	r3, #18
 8004964:	f8cd b008 	str.w	fp, [sp, #8]
 8004968:	9223      	str	r2, [sp, #140]	; 0x8c
 800496a:	e7cf      	b.n	800490c <_dtoa_r+0x264>
 800496c:	f3af 8000 	nop.w
 8004970:	636f4361 	.word	0x636f4361
 8004974:	3fd287a7 	.word	0x3fd287a7
 8004978:	8b60c8b3 	.word	0x8b60c8b3
 800497c:	3fc68a28 	.word	0x3fc68a28
 8004980:	509f79fb 	.word	0x509f79fb
 8004984:	3fd34413 	.word	0x3fd34413
 8004988:	080074ee 	.word	0x080074ee
 800498c:	08007505 	.word	0x08007505
 8004990:	7ff00000 	.word	0x7ff00000
 8004994:	080074ea 	.word	0x080074ea
 8004998:	080074e1 	.word	0x080074e1
 800499c:	08007365 	.word	0x08007365
 80049a0:	3ff80000 	.word	0x3ff80000
 80049a4:	08007680 	.word	0x08007680
 80049a8:	08007564 	.word	0x08007564
 80049ac:	2301      	movs	r3, #1
 80049ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80049b0:	e7d4      	b.n	800495c <_dtoa_r+0x2b4>
 80049b2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80049b6:	465b      	mov	r3, fp
 80049b8:	f8cd b008 	str.w	fp, [sp, #8]
 80049bc:	e7a6      	b.n	800490c <_dtoa_r+0x264>
 80049be:	3101      	adds	r1, #1
 80049c0:	6041      	str	r1, [r0, #4]
 80049c2:	0052      	lsls	r2, r2, #1
 80049c4:	e7a6      	b.n	8004914 <_dtoa_r+0x26c>
 80049c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049c8:	9a08      	ldr	r2, [sp, #32]
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	9b02      	ldr	r3, [sp, #8]
 80049ce:	2b0e      	cmp	r3, #14
 80049d0:	f200 80a8 	bhi.w	8004b24 <_dtoa_r+0x47c>
 80049d4:	2c00      	cmp	r4, #0
 80049d6:	f000 80a5 	beq.w	8004b24 <_dtoa_r+0x47c>
 80049da:	f1b9 0f00 	cmp.w	r9, #0
 80049de:	dd34      	ble.n	8004a4a <_dtoa_r+0x3a2>
 80049e0:	4a9a      	ldr	r2, [pc, #616]	; (8004c4c <_dtoa_r+0x5a4>)
 80049e2:	f009 030f 	and.w	r3, r9, #15
 80049e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80049ea:	f419 7f80 	tst.w	r9, #256	; 0x100
 80049ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80049f6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80049fa:	d016      	beq.n	8004a2a <_dtoa_r+0x382>
 80049fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a00:	4b93      	ldr	r3, [pc, #588]	; (8004c50 <_dtoa_r+0x5a8>)
 8004a02:	2703      	movs	r7, #3
 8004a04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a08:	f7fb fe90 	bl	800072c <__aeabi_ddiv>
 8004a0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a10:	f004 040f 	and.w	r4, r4, #15
 8004a14:	4e8e      	ldr	r6, [pc, #568]	; (8004c50 <_dtoa_r+0x5a8>)
 8004a16:	b954      	cbnz	r4, 8004a2e <_dtoa_r+0x386>
 8004a18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a20:	f7fb fe84 	bl	800072c <__aeabi_ddiv>
 8004a24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a28:	e029      	b.n	8004a7e <_dtoa_r+0x3d6>
 8004a2a:	2702      	movs	r7, #2
 8004a2c:	e7f2      	b.n	8004a14 <_dtoa_r+0x36c>
 8004a2e:	07e1      	lsls	r1, r4, #31
 8004a30:	d508      	bpl.n	8004a44 <_dtoa_r+0x39c>
 8004a32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a36:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004a3a:	f7fb fd4d 	bl	80004d8 <__aeabi_dmul>
 8004a3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a42:	3701      	adds	r7, #1
 8004a44:	1064      	asrs	r4, r4, #1
 8004a46:	3608      	adds	r6, #8
 8004a48:	e7e5      	b.n	8004a16 <_dtoa_r+0x36e>
 8004a4a:	f000 80a5 	beq.w	8004b98 <_dtoa_r+0x4f0>
 8004a4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a52:	f1c9 0400 	rsb	r4, r9, #0
 8004a56:	4b7d      	ldr	r3, [pc, #500]	; (8004c4c <_dtoa_r+0x5a4>)
 8004a58:	f004 020f 	and.w	r2, r4, #15
 8004a5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a64:	f7fb fd38 	bl	80004d8 <__aeabi_dmul>
 8004a68:	2702      	movs	r7, #2
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a70:	4e77      	ldr	r6, [pc, #476]	; (8004c50 <_dtoa_r+0x5a8>)
 8004a72:	1124      	asrs	r4, r4, #4
 8004a74:	2c00      	cmp	r4, #0
 8004a76:	f040 8084 	bne.w	8004b82 <_dtoa_r+0x4da>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1d2      	bne.n	8004a24 <_dtoa_r+0x37c>
 8004a7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 808b 	beq.w	8004b9c <_dtoa_r+0x4f4>
 8004a86:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004a8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004a8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a92:	2200      	movs	r2, #0
 8004a94:	4b6f      	ldr	r3, [pc, #444]	; (8004c54 <_dtoa_r+0x5ac>)
 8004a96:	f7fb ff91 	bl	80009bc <__aeabi_dcmplt>
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	d07e      	beq.n	8004b9c <_dtoa_r+0x4f4>
 8004a9e:	9b02      	ldr	r3, [sp, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d07b      	beq.n	8004b9c <_dtoa_r+0x4f4>
 8004aa4:	f1bb 0f00 	cmp.w	fp, #0
 8004aa8:	dd38      	ble.n	8004b1c <_dtoa_r+0x474>
 8004aaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004aae:	2200      	movs	r2, #0
 8004ab0:	4b69      	ldr	r3, [pc, #420]	; (8004c58 <_dtoa_r+0x5b0>)
 8004ab2:	f7fb fd11 	bl	80004d8 <__aeabi_dmul>
 8004ab6:	465c      	mov	r4, fp
 8004ab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004abc:	f109 38ff 	add.w	r8, r9, #4294967295
 8004ac0:	3701      	adds	r7, #1
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	f7fb fc9e 	bl	8000404 <__aeabi_i2d>
 8004ac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004acc:	f7fb fd04 	bl	80004d8 <__aeabi_dmul>
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	4b62      	ldr	r3, [pc, #392]	; (8004c5c <_dtoa_r+0x5b4>)
 8004ad4:	f7fb fb4a 	bl	800016c <__adddf3>
 8004ad8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004adc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ae0:	9611      	str	r6, [sp, #68]	; 0x44
 8004ae2:	2c00      	cmp	r4, #0
 8004ae4:	d15d      	bne.n	8004ba2 <_dtoa_r+0x4fa>
 8004ae6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004aea:	2200      	movs	r2, #0
 8004aec:	4b5c      	ldr	r3, [pc, #368]	; (8004c60 <_dtoa_r+0x5b8>)
 8004aee:	f7fb fb3b 	bl	8000168 <__aeabi_dsub>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004afa:	4633      	mov	r3, r6
 8004afc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004afe:	f7fb ff7b 	bl	80009f8 <__aeabi_dcmpgt>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	f040 829e 	bne.w	8005044 <_dtoa_r+0x99c>
 8004b08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004b0e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004b12:	f7fb ff53 	bl	80009bc <__aeabi_dcmplt>
 8004b16:	2800      	cmp	r0, #0
 8004b18:	f040 8292 	bne.w	8005040 <_dtoa_r+0x998>
 8004b1c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004b20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004b24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f2c0 8153 	blt.w	8004dd2 <_dtoa_r+0x72a>
 8004b2c:	f1b9 0f0e 	cmp.w	r9, #14
 8004b30:	f300 814f 	bgt.w	8004dd2 <_dtoa_r+0x72a>
 8004b34:	4b45      	ldr	r3, [pc, #276]	; (8004c4c <_dtoa_r+0x5a4>)
 8004b36:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004b3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b3e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004b42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f280 80db 	bge.w	8004d00 <_dtoa_r+0x658>
 8004b4a:	9b02      	ldr	r3, [sp, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f300 80d7 	bgt.w	8004d00 <_dtoa_r+0x658>
 8004b52:	f040 8274 	bne.w	800503e <_dtoa_r+0x996>
 8004b56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	4b40      	ldr	r3, [pc, #256]	; (8004c60 <_dtoa_r+0x5b8>)
 8004b5e:	f7fb fcbb 	bl	80004d8 <__aeabi_dmul>
 8004b62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b66:	f7fb ff3d 	bl	80009e4 <__aeabi_dcmpge>
 8004b6a:	9c02      	ldr	r4, [sp, #8]
 8004b6c:	4626      	mov	r6, r4
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	f040 824a 	bne.w	8005008 <_dtoa_r+0x960>
 8004b74:	2331      	movs	r3, #49	; 0x31
 8004b76:	9f08      	ldr	r7, [sp, #32]
 8004b78:	f109 0901 	add.w	r9, r9, #1
 8004b7c:	f807 3b01 	strb.w	r3, [r7], #1
 8004b80:	e246      	b.n	8005010 <_dtoa_r+0x968>
 8004b82:	07e2      	lsls	r2, r4, #31
 8004b84:	d505      	bpl.n	8004b92 <_dtoa_r+0x4ea>
 8004b86:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b8a:	f7fb fca5 	bl	80004d8 <__aeabi_dmul>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	3701      	adds	r7, #1
 8004b92:	1064      	asrs	r4, r4, #1
 8004b94:	3608      	adds	r6, #8
 8004b96:	e76d      	b.n	8004a74 <_dtoa_r+0x3cc>
 8004b98:	2702      	movs	r7, #2
 8004b9a:	e770      	b.n	8004a7e <_dtoa_r+0x3d6>
 8004b9c:	46c8      	mov	r8, r9
 8004b9e:	9c02      	ldr	r4, [sp, #8]
 8004ba0:	e78f      	b.n	8004ac2 <_dtoa_r+0x41a>
 8004ba2:	9908      	ldr	r1, [sp, #32]
 8004ba4:	4b29      	ldr	r3, [pc, #164]	; (8004c4c <_dtoa_r+0x5a4>)
 8004ba6:	4421      	add	r1, r4
 8004ba8:	9112      	str	r1, [sp, #72]	; 0x48
 8004baa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004bb0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004bb4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004bb8:	2900      	cmp	r1, #0
 8004bba:	d055      	beq.n	8004c68 <_dtoa_r+0x5c0>
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	4929      	ldr	r1, [pc, #164]	; (8004c64 <_dtoa_r+0x5bc>)
 8004bc0:	f7fb fdb4 	bl	800072c <__aeabi_ddiv>
 8004bc4:	463b      	mov	r3, r7
 8004bc6:	4632      	mov	r2, r6
 8004bc8:	f7fb face 	bl	8000168 <__aeabi_dsub>
 8004bcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004bd0:	9f08      	ldr	r7, [sp, #32]
 8004bd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bd6:	f7fb ff2f 	bl	8000a38 <__aeabi_d2iz>
 8004bda:	4604      	mov	r4, r0
 8004bdc:	f7fb fc12 	bl	8000404 <__aeabi_i2d>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004be8:	f7fb fabe 	bl	8000168 <__aeabi_dsub>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	3430      	adds	r4, #48	; 0x30
 8004bf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004bf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004bfa:	f807 4b01 	strb.w	r4, [r7], #1
 8004bfe:	f7fb fedd 	bl	80009bc <__aeabi_dcmplt>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d174      	bne.n	8004cf0 <_dtoa_r+0x648>
 8004c06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	4911      	ldr	r1, [pc, #68]	; (8004c54 <_dtoa_r+0x5ac>)
 8004c0e:	f7fb faab 	bl	8000168 <__aeabi_dsub>
 8004c12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004c16:	f7fb fed1 	bl	80009bc <__aeabi_dcmplt>
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	f040 80b6 	bne.w	8004d8c <_dtoa_r+0x6e4>
 8004c20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c22:	429f      	cmp	r7, r3
 8004c24:	f43f af7a 	beq.w	8004b1c <_dtoa_r+0x474>
 8004c28:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <_dtoa_r+0x5b0>)
 8004c30:	f7fb fc52 	bl	80004d8 <__aeabi_dmul>
 8004c34:	2200      	movs	r2, #0
 8004c36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c3e:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <_dtoa_r+0x5b0>)
 8004c40:	f7fb fc4a 	bl	80004d8 <__aeabi_dmul>
 8004c44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c48:	e7c3      	b.n	8004bd2 <_dtoa_r+0x52a>
 8004c4a:	bf00      	nop
 8004c4c:	08007680 	.word	0x08007680
 8004c50:	08007658 	.word	0x08007658
 8004c54:	3ff00000 	.word	0x3ff00000
 8004c58:	40240000 	.word	0x40240000
 8004c5c:	401c0000 	.word	0x401c0000
 8004c60:	40140000 	.word	0x40140000
 8004c64:	3fe00000 	.word	0x3fe00000
 8004c68:	4630      	mov	r0, r6
 8004c6a:	4639      	mov	r1, r7
 8004c6c:	f7fb fc34 	bl	80004d8 <__aeabi_dmul>
 8004c70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c72:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c76:	9c08      	ldr	r4, [sp, #32]
 8004c78:	9314      	str	r3, [sp, #80]	; 0x50
 8004c7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c7e:	f7fb fedb 	bl	8000a38 <__aeabi_d2iz>
 8004c82:	9015      	str	r0, [sp, #84]	; 0x54
 8004c84:	f7fb fbbe 	bl	8000404 <__aeabi_i2d>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c90:	f7fb fa6a 	bl	8000168 <__aeabi_dsub>
 8004c94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c96:	4606      	mov	r6, r0
 8004c98:	3330      	adds	r3, #48	; 0x30
 8004c9a:	f804 3b01 	strb.w	r3, [r4], #1
 8004c9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ca0:	460f      	mov	r7, r1
 8004ca2:	429c      	cmp	r4, r3
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	d124      	bne.n	8004cf4 <_dtoa_r+0x64c>
 8004caa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004cae:	4bb3      	ldr	r3, [pc, #716]	; (8004f7c <_dtoa_r+0x8d4>)
 8004cb0:	f7fb fa5c 	bl	800016c <__adddf3>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4630      	mov	r0, r6
 8004cba:	4639      	mov	r1, r7
 8004cbc:	f7fb fe9c 	bl	80009f8 <__aeabi_dcmpgt>
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	d162      	bne.n	8004d8a <_dtoa_r+0x6e2>
 8004cc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004cc8:	2000      	movs	r0, #0
 8004cca:	49ac      	ldr	r1, [pc, #688]	; (8004f7c <_dtoa_r+0x8d4>)
 8004ccc:	f7fb fa4c 	bl	8000168 <__aeabi_dsub>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	4639      	mov	r1, r7
 8004cd8:	f7fb fe70 	bl	80009bc <__aeabi_dcmplt>
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	f43f af1d 	beq.w	8004b1c <_dtoa_r+0x474>
 8004ce2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004ce4:	1e7b      	subs	r3, r7, #1
 8004ce6:	9314      	str	r3, [sp, #80]	; 0x50
 8004ce8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004cec:	2b30      	cmp	r3, #48	; 0x30
 8004cee:	d0f8      	beq.n	8004ce2 <_dtoa_r+0x63a>
 8004cf0:	46c1      	mov	r9, r8
 8004cf2:	e03a      	b.n	8004d6a <_dtoa_r+0x6c2>
 8004cf4:	4ba2      	ldr	r3, [pc, #648]	; (8004f80 <_dtoa_r+0x8d8>)
 8004cf6:	f7fb fbef 	bl	80004d8 <__aeabi_dmul>
 8004cfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004cfe:	e7bc      	b.n	8004c7a <_dtoa_r+0x5d2>
 8004d00:	9f08      	ldr	r7, [sp, #32]
 8004d02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d0a:	f7fb fd0f 	bl	800072c <__aeabi_ddiv>
 8004d0e:	f7fb fe93 	bl	8000a38 <__aeabi_d2iz>
 8004d12:	4604      	mov	r4, r0
 8004d14:	f7fb fb76 	bl	8000404 <__aeabi_i2d>
 8004d18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d1c:	f7fb fbdc 	bl	80004d8 <__aeabi_dmul>
 8004d20:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004d24:	460b      	mov	r3, r1
 8004d26:	4602      	mov	r2, r0
 8004d28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d2c:	f7fb fa1c 	bl	8000168 <__aeabi_dsub>
 8004d30:	f807 6b01 	strb.w	r6, [r7], #1
 8004d34:	9e08      	ldr	r6, [sp, #32]
 8004d36:	9b02      	ldr	r3, [sp, #8]
 8004d38:	1bbe      	subs	r6, r7, r6
 8004d3a:	42b3      	cmp	r3, r6
 8004d3c:	d13a      	bne.n	8004db4 <_dtoa_r+0x70c>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	f7fb fa13 	bl	800016c <__adddf3>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d52:	f7fb fe51 	bl	80009f8 <__aeabi_dcmpgt>
 8004d56:	bb58      	cbnz	r0, 8004db0 <_dtoa_r+0x708>
 8004d58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d60:	f7fb fe22 	bl	80009a8 <__aeabi_dcmpeq>
 8004d64:	b108      	cbz	r0, 8004d6a <_dtoa_r+0x6c2>
 8004d66:	07e1      	lsls	r1, r4, #31
 8004d68:	d422      	bmi.n	8004db0 <_dtoa_r+0x708>
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	4651      	mov	r1, sl
 8004d6e:	f000 fe5b 	bl	8005a28 <_Bfree>
 8004d72:	2300      	movs	r3, #0
 8004d74:	703b      	strb	r3, [r7, #0]
 8004d76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004d78:	f109 0001 	add.w	r0, r9, #1
 8004d7c:	6018      	str	r0, [r3, #0]
 8004d7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f43f acdf 	beq.w	8004744 <_dtoa_r+0x9c>
 8004d86:	601f      	str	r7, [r3, #0]
 8004d88:	e4dc      	b.n	8004744 <_dtoa_r+0x9c>
 8004d8a:	4627      	mov	r7, r4
 8004d8c:	463b      	mov	r3, r7
 8004d8e:	461f      	mov	r7, r3
 8004d90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d94:	2a39      	cmp	r2, #57	; 0x39
 8004d96:	d107      	bne.n	8004da8 <_dtoa_r+0x700>
 8004d98:	9a08      	ldr	r2, [sp, #32]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d1f7      	bne.n	8004d8e <_dtoa_r+0x6e6>
 8004d9e:	2230      	movs	r2, #48	; 0x30
 8004da0:	9908      	ldr	r1, [sp, #32]
 8004da2:	f108 0801 	add.w	r8, r8, #1
 8004da6:	700a      	strb	r2, [r1, #0]
 8004da8:	781a      	ldrb	r2, [r3, #0]
 8004daa:	3201      	adds	r2, #1
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	e79f      	b.n	8004cf0 <_dtoa_r+0x648>
 8004db0:	46c8      	mov	r8, r9
 8004db2:	e7eb      	b.n	8004d8c <_dtoa_r+0x6e4>
 8004db4:	2200      	movs	r2, #0
 8004db6:	4b72      	ldr	r3, [pc, #456]	; (8004f80 <_dtoa_r+0x8d8>)
 8004db8:	f7fb fb8e 	bl	80004d8 <__aeabi_dmul>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f7fb fdee 	bl	80009a8 <__aeabi_dcmpeq>
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	d098      	beq.n	8004d02 <_dtoa_r+0x65a>
 8004dd0:	e7cb      	b.n	8004d6a <_dtoa_r+0x6c2>
 8004dd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004dd4:	2a00      	cmp	r2, #0
 8004dd6:	f000 80cd 	beq.w	8004f74 <_dtoa_r+0x8cc>
 8004dda:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004ddc:	2a01      	cmp	r2, #1
 8004dde:	f300 80af 	bgt.w	8004f40 <_dtoa_r+0x898>
 8004de2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004de4:	2a00      	cmp	r2, #0
 8004de6:	f000 80a7 	beq.w	8004f38 <_dtoa_r+0x890>
 8004dea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004dee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004df0:	9f06      	ldr	r7, [sp, #24]
 8004df2:	9a06      	ldr	r2, [sp, #24]
 8004df4:	2101      	movs	r1, #1
 8004df6:	441a      	add	r2, r3
 8004df8:	9206      	str	r2, [sp, #24]
 8004dfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	441a      	add	r2, r3
 8004e00:	9209      	str	r2, [sp, #36]	; 0x24
 8004e02:	f000 ff15 	bl	8005c30 <__i2b>
 8004e06:	4606      	mov	r6, r0
 8004e08:	2f00      	cmp	r7, #0
 8004e0a:	dd0c      	ble.n	8004e26 <_dtoa_r+0x77e>
 8004e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	dd09      	ble.n	8004e26 <_dtoa_r+0x77e>
 8004e12:	42bb      	cmp	r3, r7
 8004e14:	bfa8      	it	ge
 8004e16:	463b      	movge	r3, r7
 8004e18:	9a06      	ldr	r2, [sp, #24]
 8004e1a:	1aff      	subs	r7, r7, r3
 8004e1c:	1ad2      	subs	r2, r2, r3
 8004e1e:	9206      	str	r2, [sp, #24]
 8004e20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	9309      	str	r3, [sp, #36]	; 0x24
 8004e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e28:	b1f3      	cbz	r3, 8004e68 <_dtoa_r+0x7c0>
 8004e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 80a9 	beq.w	8004f84 <_dtoa_r+0x8dc>
 8004e32:	2c00      	cmp	r4, #0
 8004e34:	dd10      	ble.n	8004e58 <_dtoa_r+0x7b0>
 8004e36:	4631      	mov	r1, r6
 8004e38:	4622      	mov	r2, r4
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f000 ffb2 	bl	8005da4 <__pow5mult>
 8004e40:	4652      	mov	r2, sl
 8004e42:	4601      	mov	r1, r0
 8004e44:	4606      	mov	r6, r0
 8004e46:	4628      	mov	r0, r5
 8004e48:	f000 ff08 	bl	8005c5c <__multiply>
 8004e4c:	4680      	mov	r8, r0
 8004e4e:	4651      	mov	r1, sl
 8004e50:	4628      	mov	r0, r5
 8004e52:	f000 fde9 	bl	8005a28 <_Bfree>
 8004e56:	46c2      	mov	sl, r8
 8004e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e5a:	1b1a      	subs	r2, r3, r4
 8004e5c:	d004      	beq.n	8004e68 <_dtoa_r+0x7c0>
 8004e5e:	4651      	mov	r1, sl
 8004e60:	4628      	mov	r0, r5
 8004e62:	f000 ff9f 	bl	8005da4 <__pow5mult>
 8004e66:	4682      	mov	sl, r0
 8004e68:	2101      	movs	r1, #1
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f000 fee0 	bl	8005c30 <__i2b>
 8004e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e72:	4604      	mov	r4, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f340 8087 	ble.w	8004f88 <_dtoa_r+0x8e0>
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	4601      	mov	r1, r0
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f000 ff90 	bl	8005da4 <__pow5mult>
 8004e84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e86:	4604      	mov	r4, r0
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	f340 8080 	ble.w	8004f8e <_dtoa_r+0x8e6>
 8004e8e:	f04f 0800 	mov.w	r8, #0
 8004e92:	6923      	ldr	r3, [r4, #16]
 8004e94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e98:	6918      	ldr	r0, [r3, #16]
 8004e9a:	f000 fe7b 	bl	8005b94 <__hi0bits>
 8004e9e:	f1c0 0020 	rsb	r0, r0, #32
 8004ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea4:	4418      	add	r0, r3
 8004ea6:	f010 001f 	ands.w	r0, r0, #31
 8004eaa:	f000 8092 	beq.w	8004fd2 <_dtoa_r+0x92a>
 8004eae:	f1c0 0320 	rsb	r3, r0, #32
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	f340 808a 	ble.w	8004fcc <_dtoa_r+0x924>
 8004eb8:	f1c0 001c 	rsb	r0, r0, #28
 8004ebc:	9b06      	ldr	r3, [sp, #24]
 8004ebe:	4407      	add	r7, r0
 8004ec0:	4403      	add	r3, r0
 8004ec2:	9306      	str	r3, [sp, #24]
 8004ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec6:	4403      	add	r3, r0
 8004ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8004eca:	9b06      	ldr	r3, [sp, #24]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	dd05      	ble.n	8004edc <_dtoa_r+0x834>
 8004ed0:	4651      	mov	r1, sl
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	f000 ffbf 	bl	8005e58 <__lshift>
 8004eda:	4682      	mov	sl, r0
 8004edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	dd05      	ble.n	8004eee <_dtoa_r+0x846>
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f000 ffb6 	bl	8005e58 <__lshift>
 8004eec:	4604      	mov	r4, r0
 8004eee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d070      	beq.n	8004fd6 <_dtoa_r+0x92e>
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	4650      	mov	r0, sl
 8004ef8:	f001 f81a 	bl	8005f30 <__mcmp>
 8004efc:	2800      	cmp	r0, #0
 8004efe:	da6a      	bge.n	8004fd6 <_dtoa_r+0x92e>
 8004f00:	2300      	movs	r3, #0
 8004f02:	4651      	mov	r1, sl
 8004f04:	220a      	movs	r2, #10
 8004f06:	4628      	mov	r0, r5
 8004f08:	f000 fdb0 	bl	8005a6c <__multadd>
 8004f0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f0e:	4682      	mov	sl, r0
 8004f10:	f109 39ff 	add.w	r9, r9, #4294967295
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 8193 	beq.w	8005240 <_dtoa_r+0xb98>
 8004f1a:	4631      	mov	r1, r6
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	220a      	movs	r2, #10
 8004f20:	4628      	mov	r0, r5
 8004f22:	f000 fda3 	bl	8005a6c <__multadd>
 8004f26:	f1bb 0f00 	cmp.w	fp, #0
 8004f2a:	4606      	mov	r6, r0
 8004f2c:	f300 8093 	bgt.w	8005056 <_dtoa_r+0x9ae>
 8004f30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	dc57      	bgt.n	8004fe6 <_dtoa_r+0x93e>
 8004f36:	e08e      	b.n	8005056 <_dtoa_r+0x9ae>
 8004f38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004f3a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004f3e:	e756      	b.n	8004dee <_dtoa_r+0x746>
 8004f40:	9b02      	ldr	r3, [sp, #8]
 8004f42:	1e5c      	subs	r4, r3, #1
 8004f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f46:	42a3      	cmp	r3, r4
 8004f48:	bfb7      	itett	lt
 8004f4a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004f4c:	1b1c      	subge	r4, r3, r4
 8004f4e:	1ae2      	sublt	r2, r4, r3
 8004f50:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004f52:	bfbe      	ittt	lt
 8004f54:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004f56:	189b      	addlt	r3, r3, r2
 8004f58:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004f5a:	9b02      	ldr	r3, [sp, #8]
 8004f5c:	bfb8      	it	lt
 8004f5e:	2400      	movlt	r4, #0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	bfbb      	ittet	lt
 8004f64:	9b06      	ldrlt	r3, [sp, #24]
 8004f66:	9a02      	ldrlt	r2, [sp, #8]
 8004f68:	9f06      	ldrge	r7, [sp, #24]
 8004f6a:	1a9f      	sublt	r7, r3, r2
 8004f6c:	bfac      	ite	ge
 8004f6e:	9b02      	ldrge	r3, [sp, #8]
 8004f70:	2300      	movlt	r3, #0
 8004f72:	e73e      	b.n	8004df2 <_dtoa_r+0x74a>
 8004f74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004f76:	9f06      	ldr	r7, [sp, #24]
 8004f78:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004f7a:	e745      	b.n	8004e08 <_dtoa_r+0x760>
 8004f7c:	3fe00000 	.word	0x3fe00000
 8004f80:	40240000 	.word	0x40240000
 8004f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f86:	e76a      	b.n	8004e5e <_dtoa_r+0x7b6>
 8004f88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	dc19      	bgt.n	8004fc2 <_dtoa_r+0x91a>
 8004f8e:	9b04      	ldr	r3, [sp, #16]
 8004f90:	b9bb      	cbnz	r3, 8004fc2 <_dtoa_r+0x91a>
 8004f92:	9b05      	ldr	r3, [sp, #20]
 8004f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f98:	b99b      	cbnz	r3, 8004fc2 <_dtoa_r+0x91a>
 8004f9a:	9b05      	ldr	r3, [sp, #20]
 8004f9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fa0:	0d1b      	lsrs	r3, r3, #20
 8004fa2:	051b      	lsls	r3, r3, #20
 8004fa4:	b183      	cbz	r3, 8004fc8 <_dtoa_r+0x920>
 8004fa6:	f04f 0801 	mov.w	r8, #1
 8004faa:	9b06      	ldr	r3, [sp, #24]
 8004fac:	3301      	adds	r3, #1
 8004fae:	9306      	str	r3, [sp, #24]
 8004fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f47f af6a 	bne.w	8004e92 <_dtoa_r+0x7ea>
 8004fbe:	2001      	movs	r0, #1
 8004fc0:	e76f      	b.n	8004ea2 <_dtoa_r+0x7fa>
 8004fc2:	f04f 0800 	mov.w	r8, #0
 8004fc6:	e7f6      	b.n	8004fb6 <_dtoa_r+0x90e>
 8004fc8:	4698      	mov	r8, r3
 8004fca:	e7f4      	b.n	8004fb6 <_dtoa_r+0x90e>
 8004fcc:	f43f af7d 	beq.w	8004eca <_dtoa_r+0x822>
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	301c      	adds	r0, #28
 8004fd4:	e772      	b.n	8004ebc <_dtoa_r+0x814>
 8004fd6:	9b02      	ldr	r3, [sp, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	dc36      	bgt.n	800504a <_dtoa_r+0x9a2>
 8004fdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	dd33      	ble.n	800504a <_dtoa_r+0x9a2>
 8004fe2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004fe6:	f1bb 0f00 	cmp.w	fp, #0
 8004fea:	d10d      	bne.n	8005008 <_dtoa_r+0x960>
 8004fec:	4621      	mov	r1, r4
 8004fee:	465b      	mov	r3, fp
 8004ff0:	2205      	movs	r2, #5
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	f000 fd3a 	bl	8005a6c <__multadd>
 8004ff8:	4601      	mov	r1, r0
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	4650      	mov	r0, sl
 8004ffe:	f000 ff97 	bl	8005f30 <__mcmp>
 8005002:	2800      	cmp	r0, #0
 8005004:	f73f adb6 	bgt.w	8004b74 <_dtoa_r+0x4cc>
 8005008:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800500a:	9f08      	ldr	r7, [sp, #32]
 800500c:	ea6f 0903 	mvn.w	r9, r3
 8005010:	f04f 0800 	mov.w	r8, #0
 8005014:	4621      	mov	r1, r4
 8005016:	4628      	mov	r0, r5
 8005018:	f000 fd06 	bl	8005a28 <_Bfree>
 800501c:	2e00      	cmp	r6, #0
 800501e:	f43f aea4 	beq.w	8004d6a <_dtoa_r+0x6c2>
 8005022:	f1b8 0f00 	cmp.w	r8, #0
 8005026:	d005      	beq.n	8005034 <_dtoa_r+0x98c>
 8005028:	45b0      	cmp	r8, r6
 800502a:	d003      	beq.n	8005034 <_dtoa_r+0x98c>
 800502c:	4641      	mov	r1, r8
 800502e:	4628      	mov	r0, r5
 8005030:	f000 fcfa 	bl	8005a28 <_Bfree>
 8005034:	4631      	mov	r1, r6
 8005036:	4628      	mov	r0, r5
 8005038:	f000 fcf6 	bl	8005a28 <_Bfree>
 800503c:	e695      	b.n	8004d6a <_dtoa_r+0x6c2>
 800503e:	2400      	movs	r4, #0
 8005040:	4626      	mov	r6, r4
 8005042:	e7e1      	b.n	8005008 <_dtoa_r+0x960>
 8005044:	46c1      	mov	r9, r8
 8005046:	4626      	mov	r6, r4
 8005048:	e594      	b.n	8004b74 <_dtoa_r+0x4cc>
 800504a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800504c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80fc 	beq.w	800524e <_dtoa_r+0xba6>
 8005056:	2f00      	cmp	r7, #0
 8005058:	dd05      	ble.n	8005066 <_dtoa_r+0x9be>
 800505a:	4631      	mov	r1, r6
 800505c:	463a      	mov	r2, r7
 800505e:	4628      	mov	r0, r5
 8005060:	f000 fefa 	bl	8005e58 <__lshift>
 8005064:	4606      	mov	r6, r0
 8005066:	f1b8 0f00 	cmp.w	r8, #0
 800506a:	d05c      	beq.n	8005126 <_dtoa_r+0xa7e>
 800506c:	4628      	mov	r0, r5
 800506e:	6871      	ldr	r1, [r6, #4]
 8005070:	f000 fc9a 	bl	80059a8 <_Balloc>
 8005074:	4607      	mov	r7, r0
 8005076:	b928      	cbnz	r0, 8005084 <_dtoa_r+0x9dc>
 8005078:	4602      	mov	r2, r0
 800507a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800507e:	4b7e      	ldr	r3, [pc, #504]	; (8005278 <_dtoa_r+0xbd0>)
 8005080:	f7ff bb26 	b.w	80046d0 <_dtoa_r+0x28>
 8005084:	6932      	ldr	r2, [r6, #16]
 8005086:	f106 010c 	add.w	r1, r6, #12
 800508a:	3202      	adds	r2, #2
 800508c:	0092      	lsls	r2, r2, #2
 800508e:	300c      	adds	r0, #12
 8005090:	f7fd fcfc 	bl	8002a8c <memcpy>
 8005094:	2201      	movs	r2, #1
 8005096:	4639      	mov	r1, r7
 8005098:	4628      	mov	r0, r5
 800509a:	f000 fedd 	bl	8005e58 <__lshift>
 800509e:	46b0      	mov	r8, r6
 80050a0:	4606      	mov	r6, r0
 80050a2:	9b08      	ldr	r3, [sp, #32]
 80050a4:	3301      	adds	r3, #1
 80050a6:	9302      	str	r3, [sp, #8]
 80050a8:	9b08      	ldr	r3, [sp, #32]
 80050aa:	445b      	add	r3, fp
 80050ac:	930a      	str	r3, [sp, #40]	; 0x28
 80050ae:	9b04      	ldr	r3, [sp, #16]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	9309      	str	r3, [sp, #36]	; 0x24
 80050b6:	9b02      	ldr	r3, [sp, #8]
 80050b8:	4621      	mov	r1, r4
 80050ba:	4650      	mov	r0, sl
 80050bc:	f103 3bff 	add.w	fp, r3, #4294967295
 80050c0:	f7ff fa62 	bl	8004588 <quorem>
 80050c4:	4603      	mov	r3, r0
 80050c6:	4641      	mov	r1, r8
 80050c8:	3330      	adds	r3, #48	; 0x30
 80050ca:	9004      	str	r0, [sp, #16]
 80050cc:	4650      	mov	r0, sl
 80050ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80050d0:	f000 ff2e 	bl	8005f30 <__mcmp>
 80050d4:	4632      	mov	r2, r6
 80050d6:	9006      	str	r0, [sp, #24]
 80050d8:	4621      	mov	r1, r4
 80050da:	4628      	mov	r0, r5
 80050dc:	f000 ff44 	bl	8005f68 <__mdiff>
 80050e0:	68c2      	ldr	r2, [r0, #12]
 80050e2:	4607      	mov	r7, r0
 80050e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050e6:	bb02      	cbnz	r2, 800512a <_dtoa_r+0xa82>
 80050e8:	4601      	mov	r1, r0
 80050ea:	4650      	mov	r0, sl
 80050ec:	f000 ff20 	bl	8005f30 <__mcmp>
 80050f0:	4602      	mov	r2, r0
 80050f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050f4:	4639      	mov	r1, r7
 80050f6:	4628      	mov	r0, r5
 80050f8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80050fc:	f000 fc94 	bl	8005a28 <_Bfree>
 8005100:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005102:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005104:	9f02      	ldr	r7, [sp, #8]
 8005106:	ea43 0102 	orr.w	r1, r3, r2
 800510a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800510c:	430b      	orrs	r3, r1
 800510e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005110:	d10d      	bne.n	800512e <_dtoa_r+0xa86>
 8005112:	2b39      	cmp	r3, #57	; 0x39
 8005114:	d027      	beq.n	8005166 <_dtoa_r+0xabe>
 8005116:	9a06      	ldr	r2, [sp, #24]
 8005118:	2a00      	cmp	r2, #0
 800511a:	dd01      	ble.n	8005120 <_dtoa_r+0xa78>
 800511c:	9b04      	ldr	r3, [sp, #16]
 800511e:	3331      	adds	r3, #49	; 0x31
 8005120:	f88b 3000 	strb.w	r3, [fp]
 8005124:	e776      	b.n	8005014 <_dtoa_r+0x96c>
 8005126:	4630      	mov	r0, r6
 8005128:	e7b9      	b.n	800509e <_dtoa_r+0x9f6>
 800512a:	2201      	movs	r2, #1
 800512c:	e7e2      	b.n	80050f4 <_dtoa_r+0xa4c>
 800512e:	9906      	ldr	r1, [sp, #24]
 8005130:	2900      	cmp	r1, #0
 8005132:	db04      	blt.n	800513e <_dtoa_r+0xa96>
 8005134:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005136:	4301      	orrs	r1, r0
 8005138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800513a:	4301      	orrs	r1, r0
 800513c:	d120      	bne.n	8005180 <_dtoa_r+0xad8>
 800513e:	2a00      	cmp	r2, #0
 8005140:	ddee      	ble.n	8005120 <_dtoa_r+0xa78>
 8005142:	4651      	mov	r1, sl
 8005144:	2201      	movs	r2, #1
 8005146:	4628      	mov	r0, r5
 8005148:	9302      	str	r3, [sp, #8]
 800514a:	f000 fe85 	bl	8005e58 <__lshift>
 800514e:	4621      	mov	r1, r4
 8005150:	4682      	mov	sl, r0
 8005152:	f000 feed 	bl	8005f30 <__mcmp>
 8005156:	2800      	cmp	r0, #0
 8005158:	9b02      	ldr	r3, [sp, #8]
 800515a:	dc02      	bgt.n	8005162 <_dtoa_r+0xaba>
 800515c:	d1e0      	bne.n	8005120 <_dtoa_r+0xa78>
 800515e:	07da      	lsls	r2, r3, #31
 8005160:	d5de      	bpl.n	8005120 <_dtoa_r+0xa78>
 8005162:	2b39      	cmp	r3, #57	; 0x39
 8005164:	d1da      	bne.n	800511c <_dtoa_r+0xa74>
 8005166:	2339      	movs	r3, #57	; 0x39
 8005168:	f88b 3000 	strb.w	r3, [fp]
 800516c:	463b      	mov	r3, r7
 800516e:	461f      	mov	r7, r3
 8005170:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005174:	3b01      	subs	r3, #1
 8005176:	2a39      	cmp	r2, #57	; 0x39
 8005178:	d050      	beq.n	800521c <_dtoa_r+0xb74>
 800517a:	3201      	adds	r2, #1
 800517c:	701a      	strb	r2, [r3, #0]
 800517e:	e749      	b.n	8005014 <_dtoa_r+0x96c>
 8005180:	2a00      	cmp	r2, #0
 8005182:	dd03      	ble.n	800518c <_dtoa_r+0xae4>
 8005184:	2b39      	cmp	r3, #57	; 0x39
 8005186:	d0ee      	beq.n	8005166 <_dtoa_r+0xabe>
 8005188:	3301      	adds	r3, #1
 800518a:	e7c9      	b.n	8005120 <_dtoa_r+0xa78>
 800518c:	9a02      	ldr	r2, [sp, #8]
 800518e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005190:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005194:	428a      	cmp	r2, r1
 8005196:	d02a      	beq.n	80051ee <_dtoa_r+0xb46>
 8005198:	4651      	mov	r1, sl
 800519a:	2300      	movs	r3, #0
 800519c:	220a      	movs	r2, #10
 800519e:	4628      	mov	r0, r5
 80051a0:	f000 fc64 	bl	8005a6c <__multadd>
 80051a4:	45b0      	cmp	r8, r6
 80051a6:	4682      	mov	sl, r0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	f04f 020a 	mov.w	r2, #10
 80051b0:	4641      	mov	r1, r8
 80051b2:	4628      	mov	r0, r5
 80051b4:	d107      	bne.n	80051c6 <_dtoa_r+0xb1e>
 80051b6:	f000 fc59 	bl	8005a6c <__multadd>
 80051ba:	4680      	mov	r8, r0
 80051bc:	4606      	mov	r6, r0
 80051be:	9b02      	ldr	r3, [sp, #8]
 80051c0:	3301      	adds	r3, #1
 80051c2:	9302      	str	r3, [sp, #8]
 80051c4:	e777      	b.n	80050b6 <_dtoa_r+0xa0e>
 80051c6:	f000 fc51 	bl	8005a6c <__multadd>
 80051ca:	4631      	mov	r1, r6
 80051cc:	4680      	mov	r8, r0
 80051ce:	2300      	movs	r3, #0
 80051d0:	220a      	movs	r2, #10
 80051d2:	4628      	mov	r0, r5
 80051d4:	f000 fc4a 	bl	8005a6c <__multadd>
 80051d8:	4606      	mov	r6, r0
 80051da:	e7f0      	b.n	80051be <_dtoa_r+0xb16>
 80051dc:	f1bb 0f00 	cmp.w	fp, #0
 80051e0:	bfcc      	ite	gt
 80051e2:	465f      	movgt	r7, fp
 80051e4:	2701      	movle	r7, #1
 80051e6:	f04f 0800 	mov.w	r8, #0
 80051ea:	9a08      	ldr	r2, [sp, #32]
 80051ec:	4417      	add	r7, r2
 80051ee:	4651      	mov	r1, sl
 80051f0:	2201      	movs	r2, #1
 80051f2:	4628      	mov	r0, r5
 80051f4:	9302      	str	r3, [sp, #8]
 80051f6:	f000 fe2f 	bl	8005e58 <__lshift>
 80051fa:	4621      	mov	r1, r4
 80051fc:	4682      	mov	sl, r0
 80051fe:	f000 fe97 	bl	8005f30 <__mcmp>
 8005202:	2800      	cmp	r0, #0
 8005204:	dcb2      	bgt.n	800516c <_dtoa_r+0xac4>
 8005206:	d102      	bne.n	800520e <_dtoa_r+0xb66>
 8005208:	9b02      	ldr	r3, [sp, #8]
 800520a:	07db      	lsls	r3, r3, #31
 800520c:	d4ae      	bmi.n	800516c <_dtoa_r+0xac4>
 800520e:	463b      	mov	r3, r7
 8005210:	461f      	mov	r7, r3
 8005212:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005216:	2a30      	cmp	r2, #48	; 0x30
 8005218:	d0fa      	beq.n	8005210 <_dtoa_r+0xb68>
 800521a:	e6fb      	b.n	8005014 <_dtoa_r+0x96c>
 800521c:	9a08      	ldr	r2, [sp, #32]
 800521e:	429a      	cmp	r2, r3
 8005220:	d1a5      	bne.n	800516e <_dtoa_r+0xac6>
 8005222:	2331      	movs	r3, #49	; 0x31
 8005224:	f109 0901 	add.w	r9, r9, #1
 8005228:	7013      	strb	r3, [r2, #0]
 800522a:	e6f3      	b.n	8005014 <_dtoa_r+0x96c>
 800522c:	4b13      	ldr	r3, [pc, #76]	; (800527c <_dtoa_r+0xbd4>)
 800522e:	f7ff baa7 	b.w	8004780 <_dtoa_r+0xd8>
 8005232:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005234:	2b00      	cmp	r3, #0
 8005236:	f47f aa80 	bne.w	800473a <_dtoa_r+0x92>
 800523a:	4b11      	ldr	r3, [pc, #68]	; (8005280 <_dtoa_r+0xbd8>)
 800523c:	f7ff baa0 	b.w	8004780 <_dtoa_r+0xd8>
 8005240:	f1bb 0f00 	cmp.w	fp, #0
 8005244:	dc03      	bgt.n	800524e <_dtoa_r+0xba6>
 8005246:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005248:	2b02      	cmp	r3, #2
 800524a:	f73f aecc 	bgt.w	8004fe6 <_dtoa_r+0x93e>
 800524e:	9f08      	ldr	r7, [sp, #32]
 8005250:	4621      	mov	r1, r4
 8005252:	4650      	mov	r0, sl
 8005254:	f7ff f998 	bl	8004588 <quorem>
 8005258:	9a08      	ldr	r2, [sp, #32]
 800525a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800525e:	f807 3b01 	strb.w	r3, [r7], #1
 8005262:	1aba      	subs	r2, r7, r2
 8005264:	4593      	cmp	fp, r2
 8005266:	ddb9      	ble.n	80051dc <_dtoa_r+0xb34>
 8005268:	4651      	mov	r1, sl
 800526a:	2300      	movs	r3, #0
 800526c:	220a      	movs	r2, #10
 800526e:	4628      	mov	r0, r5
 8005270:	f000 fbfc 	bl	8005a6c <__multadd>
 8005274:	4682      	mov	sl, r0
 8005276:	e7eb      	b.n	8005250 <_dtoa_r+0xba8>
 8005278:	08007564 	.word	0x08007564
 800527c:	08007364 	.word	0x08007364
 8005280:	080074e1 	.word	0x080074e1

08005284 <rshift>:
 8005284:	6903      	ldr	r3, [r0, #16]
 8005286:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800528a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800528e:	f100 0414 	add.w	r4, r0, #20
 8005292:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005296:	dd46      	ble.n	8005326 <rshift+0xa2>
 8005298:	f011 011f 	ands.w	r1, r1, #31
 800529c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80052a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80052a4:	d10c      	bne.n	80052c0 <rshift+0x3c>
 80052a6:	4629      	mov	r1, r5
 80052a8:	f100 0710 	add.w	r7, r0, #16
 80052ac:	42b1      	cmp	r1, r6
 80052ae:	d335      	bcc.n	800531c <rshift+0x98>
 80052b0:	1a9b      	subs	r3, r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	1eea      	subs	r2, r5, #3
 80052b6:	4296      	cmp	r6, r2
 80052b8:	bf38      	it	cc
 80052ba:	2300      	movcc	r3, #0
 80052bc:	4423      	add	r3, r4
 80052be:	e015      	b.n	80052ec <rshift+0x68>
 80052c0:	46a1      	mov	r9, r4
 80052c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80052c6:	f1c1 0820 	rsb	r8, r1, #32
 80052ca:	40cf      	lsrs	r7, r1
 80052cc:	f105 0e04 	add.w	lr, r5, #4
 80052d0:	4576      	cmp	r6, lr
 80052d2:	46f4      	mov	ip, lr
 80052d4:	d816      	bhi.n	8005304 <rshift+0x80>
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	009a      	lsls	r2, r3, #2
 80052da:	3a04      	subs	r2, #4
 80052dc:	3501      	adds	r5, #1
 80052de:	42ae      	cmp	r6, r5
 80052e0:	bf38      	it	cc
 80052e2:	2200      	movcc	r2, #0
 80052e4:	18a3      	adds	r3, r4, r2
 80052e6:	50a7      	str	r7, [r4, r2]
 80052e8:	b107      	cbz	r7, 80052ec <rshift+0x68>
 80052ea:	3304      	adds	r3, #4
 80052ec:	42a3      	cmp	r3, r4
 80052ee:	eba3 0204 	sub.w	r2, r3, r4
 80052f2:	bf08      	it	eq
 80052f4:	2300      	moveq	r3, #0
 80052f6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80052fa:	6102      	str	r2, [r0, #16]
 80052fc:	bf08      	it	eq
 80052fe:	6143      	streq	r3, [r0, #20]
 8005300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005304:	f8dc c000 	ldr.w	ip, [ip]
 8005308:	fa0c fc08 	lsl.w	ip, ip, r8
 800530c:	ea4c 0707 	orr.w	r7, ip, r7
 8005310:	f849 7b04 	str.w	r7, [r9], #4
 8005314:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005318:	40cf      	lsrs	r7, r1
 800531a:	e7d9      	b.n	80052d0 <rshift+0x4c>
 800531c:	f851 cb04 	ldr.w	ip, [r1], #4
 8005320:	f847 cf04 	str.w	ip, [r7, #4]!
 8005324:	e7c2      	b.n	80052ac <rshift+0x28>
 8005326:	4623      	mov	r3, r4
 8005328:	e7e0      	b.n	80052ec <rshift+0x68>

0800532a <__hexdig_fun>:
 800532a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800532e:	2b09      	cmp	r3, #9
 8005330:	d802      	bhi.n	8005338 <__hexdig_fun+0xe>
 8005332:	3820      	subs	r0, #32
 8005334:	b2c0      	uxtb	r0, r0
 8005336:	4770      	bx	lr
 8005338:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800533c:	2b05      	cmp	r3, #5
 800533e:	d801      	bhi.n	8005344 <__hexdig_fun+0x1a>
 8005340:	3847      	subs	r0, #71	; 0x47
 8005342:	e7f7      	b.n	8005334 <__hexdig_fun+0xa>
 8005344:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005348:	2b05      	cmp	r3, #5
 800534a:	d801      	bhi.n	8005350 <__hexdig_fun+0x26>
 800534c:	3827      	subs	r0, #39	; 0x27
 800534e:	e7f1      	b.n	8005334 <__hexdig_fun+0xa>
 8005350:	2000      	movs	r0, #0
 8005352:	4770      	bx	lr

08005354 <__gethex>:
 8005354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005358:	b08b      	sub	sp, #44	; 0x2c
 800535a:	9306      	str	r3, [sp, #24]
 800535c:	4bb9      	ldr	r3, [pc, #740]	; (8005644 <__gethex+0x2f0>)
 800535e:	9002      	str	r0, [sp, #8]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	468b      	mov	fp, r1
 8005364:	4618      	mov	r0, r3
 8005366:	4690      	mov	r8, r2
 8005368:	9303      	str	r3, [sp, #12]
 800536a:	f7fa fef1 	bl	8000150 <strlen>
 800536e:	4682      	mov	sl, r0
 8005370:	9b03      	ldr	r3, [sp, #12]
 8005372:	f8db 2000 	ldr.w	r2, [fp]
 8005376:	4403      	add	r3, r0
 8005378:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800537c:	9307      	str	r3, [sp, #28]
 800537e:	1c93      	adds	r3, r2, #2
 8005380:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005384:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005388:	32fe      	adds	r2, #254	; 0xfe
 800538a:	18d1      	adds	r1, r2, r3
 800538c:	461f      	mov	r7, r3
 800538e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005392:	9101      	str	r1, [sp, #4]
 8005394:	2830      	cmp	r0, #48	; 0x30
 8005396:	d0f8      	beq.n	800538a <__gethex+0x36>
 8005398:	f7ff ffc7 	bl	800532a <__hexdig_fun>
 800539c:	4604      	mov	r4, r0
 800539e:	2800      	cmp	r0, #0
 80053a0:	d13a      	bne.n	8005418 <__gethex+0xc4>
 80053a2:	4652      	mov	r2, sl
 80053a4:	4638      	mov	r0, r7
 80053a6:	9903      	ldr	r1, [sp, #12]
 80053a8:	f001 f9dc 	bl	8006764 <strncmp>
 80053ac:	4605      	mov	r5, r0
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d166      	bne.n	8005480 <__gethex+0x12c>
 80053b2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80053b6:	eb07 060a 	add.w	r6, r7, sl
 80053ba:	f7ff ffb6 	bl	800532a <__hexdig_fun>
 80053be:	2800      	cmp	r0, #0
 80053c0:	d060      	beq.n	8005484 <__gethex+0x130>
 80053c2:	4633      	mov	r3, r6
 80053c4:	7818      	ldrb	r0, [r3, #0]
 80053c6:	461f      	mov	r7, r3
 80053c8:	2830      	cmp	r0, #48	; 0x30
 80053ca:	f103 0301 	add.w	r3, r3, #1
 80053ce:	d0f9      	beq.n	80053c4 <__gethex+0x70>
 80053d0:	f7ff ffab 	bl	800532a <__hexdig_fun>
 80053d4:	2301      	movs	r3, #1
 80053d6:	fab0 f480 	clz	r4, r0
 80053da:	4635      	mov	r5, r6
 80053dc:	0964      	lsrs	r4, r4, #5
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	463a      	mov	r2, r7
 80053e2:	4616      	mov	r6, r2
 80053e4:	7830      	ldrb	r0, [r6, #0]
 80053e6:	3201      	adds	r2, #1
 80053e8:	f7ff ff9f 	bl	800532a <__hexdig_fun>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d1f8      	bne.n	80053e2 <__gethex+0x8e>
 80053f0:	4652      	mov	r2, sl
 80053f2:	4630      	mov	r0, r6
 80053f4:	9903      	ldr	r1, [sp, #12]
 80053f6:	f001 f9b5 	bl	8006764 <strncmp>
 80053fa:	b980      	cbnz	r0, 800541e <__gethex+0xca>
 80053fc:	b94d      	cbnz	r5, 8005412 <__gethex+0xbe>
 80053fe:	eb06 050a 	add.w	r5, r6, sl
 8005402:	462a      	mov	r2, r5
 8005404:	4616      	mov	r6, r2
 8005406:	7830      	ldrb	r0, [r6, #0]
 8005408:	3201      	adds	r2, #1
 800540a:	f7ff ff8e 	bl	800532a <__hexdig_fun>
 800540e:	2800      	cmp	r0, #0
 8005410:	d1f8      	bne.n	8005404 <__gethex+0xb0>
 8005412:	1bad      	subs	r5, r5, r6
 8005414:	00ad      	lsls	r5, r5, #2
 8005416:	e004      	b.n	8005422 <__gethex+0xce>
 8005418:	2400      	movs	r4, #0
 800541a:	4625      	mov	r5, r4
 800541c:	e7e0      	b.n	80053e0 <__gethex+0x8c>
 800541e:	2d00      	cmp	r5, #0
 8005420:	d1f7      	bne.n	8005412 <__gethex+0xbe>
 8005422:	7833      	ldrb	r3, [r6, #0]
 8005424:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005428:	2b50      	cmp	r3, #80	; 0x50
 800542a:	d139      	bne.n	80054a0 <__gethex+0x14c>
 800542c:	7873      	ldrb	r3, [r6, #1]
 800542e:	2b2b      	cmp	r3, #43	; 0x2b
 8005430:	d02a      	beq.n	8005488 <__gethex+0x134>
 8005432:	2b2d      	cmp	r3, #45	; 0x2d
 8005434:	d02c      	beq.n	8005490 <__gethex+0x13c>
 8005436:	f04f 0900 	mov.w	r9, #0
 800543a:	1c71      	adds	r1, r6, #1
 800543c:	7808      	ldrb	r0, [r1, #0]
 800543e:	f7ff ff74 	bl	800532a <__hexdig_fun>
 8005442:	1e43      	subs	r3, r0, #1
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b18      	cmp	r3, #24
 8005448:	d82a      	bhi.n	80054a0 <__gethex+0x14c>
 800544a:	f1a0 0210 	sub.w	r2, r0, #16
 800544e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005452:	f7ff ff6a 	bl	800532a <__hexdig_fun>
 8005456:	1e43      	subs	r3, r0, #1
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b18      	cmp	r3, #24
 800545c:	d91b      	bls.n	8005496 <__gethex+0x142>
 800545e:	f1b9 0f00 	cmp.w	r9, #0
 8005462:	d000      	beq.n	8005466 <__gethex+0x112>
 8005464:	4252      	negs	r2, r2
 8005466:	4415      	add	r5, r2
 8005468:	f8cb 1000 	str.w	r1, [fp]
 800546c:	b1d4      	cbz	r4, 80054a4 <__gethex+0x150>
 800546e:	9b01      	ldr	r3, [sp, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	bf14      	ite	ne
 8005474:	2700      	movne	r7, #0
 8005476:	2706      	moveq	r7, #6
 8005478:	4638      	mov	r0, r7
 800547a:	b00b      	add	sp, #44	; 0x2c
 800547c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005480:	463e      	mov	r6, r7
 8005482:	4625      	mov	r5, r4
 8005484:	2401      	movs	r4, #1
 8005486:	e7cc      	b.n	8005422 <__gethex+0xce>
 8005488:	f04f 0900 	mov.w	r9, #0
 800548c:	1cb1      	adds	r1, r6, #2
 800548e:	e7d5      	b.n	800543c <__gethex+0xe8>
 8005490:	f04f 0901 	mov.w	r9, #1
 8005494:	e7fa      	b.n	800548c <__gethex+0x138>
 8005496:	230a      	movs	r3, #10
 8005498:	fb03 0202 	mla	r2, r3, r2, r0
 800549c:	3a10      	subs	r2, #16
 800549e:	e7d6      	b.n	800544e <__gethex+0xfa>
 80054a0:	4631      	mov	r1, r6
 80054a2:	e7e1      	b.n	8005468 <__gethex+0x114>
 80054a4:	4621      	mov	r1, r4
 80054a6:	1bf3      	subs	r3, r6, r7
 80054a8:	3b01      	subs	r3, #1
 80054aa:	2b07      	cmp	r3, #7
 80054ac:	dc0a      	bgt.n	80054c4 <__gethex+0x170>
 80054ae:	9802      	ldr	r0, [sp, #8]
 80054b0:	f000 fa7a 	bl	80059a8 <_Balloc>
 80054b4:	4604      	mov	r4, r0
 80054b6:	b940      	cbnz	r0, 80054ca <__gethex+0x176>
 80054b8:	4602      	mov	r2, r0
 80054ba:	21de      	movs	r1, #222	; 0xde
 80054bc:	4b62      	ldr	r3, [pc, #392]	; (8005648 <__gethex+0x2f4>)
 80054be:	4863      	ldr	r0, [pc, #396]	; (800564c <__gethex+0x2f8>)
 80054c0:	f001 f970 	bl	80067a4 <__assert_func>
 80054c4:	3101      	adds	r1, #1
 80054c6:	105b      	asrs	r3, r3, #1
 80054c8:	e7ef      	b.n	80054aa <__gethex+0x156>
 80054ca:	f04f 0b00 	mov.w	fp, #0
 80054ce:	f100 0914 	add.w	r9, r0, #20
 80054d2:	f1ca 0301 	rsb	r3, sl, #1
 80054d6:	f8cd 9010 	str.w	r9, [sp, #16]
 80054da:	f8cd b004 	str.w	fp, [sp, #4]
 80054de:	9308      	str	r3, [sp, #32]
 80054e0:	42b7      	cmp	r7, r6
 80054e2:	d33f      	bcc.n	8005564 <__gethex+0x210>
 80054e4:	9f04      	ldr	r7, [sp, #16]
 80054e6:	9b01      	ldr	r3, [sp, #4]
 80054e8:	f847 3b04 	str.w	r3, [r7], #4
 80054ec:	eba7 0709 	sub.w	r7, r7, r9
 80054f0:	10bf      	asrs	r7, r7, #2
 80054f2:	6127      	str	r7, [r4, #16]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fb4d 	bl	8005b94 <__hi0bits>
 80054fa:	017f      	lsls	r7, r7, #5
 80054fc:	f8d8 6000 	ldr.w	r6, [r8]
 8005500:	1a3f      	subs	r7, r7, r0
 8005502:	42b7      	cmp	r7, r6
 8005504:	dd62      	ble.n	80055cc <__gethex+0x278>
 8005506:	1bbf      	subs	r7, r7, r6
 8005508:	4639      	mov	r1, r7
 800550a:	4620      	mov	r0, r4
 800550c:	f000 fee3 	bl	80062d6 <__any_on>
 8005510:	4682      	mov	sl, r0
 8005512:	b1a8      	cbz	r0, 8005540 <__gethex+0x1ec>
 8005514:	f04f 0a01 	mov.w	sl, #1
 8005518:	1e7b      	subs	r3, r7, #1
 800551a:	1159      	asrs	r1, r3, #5
 800551c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005520:	f003 021f 	and.w	r2, r3, #31
 8005524:	fa0a f202 	lsl.w	r2, sl, r2
 8005528:	420a      	tst	r2, r1
 800552a:	d009      	beq.n	8005540 <__gethex+0x1ec>
 800552c:	4553      	cmp	r3, sl
 800552e:	dd05      	ble.n	800553c <__gethex+0x1e8>
 8005530:	4620      	mov	r0, r4
 8005532:	1eb9      	subs	r1, r7, #2
 8005534:	f000 fecf 	bl	80062d6 <__any_on>
 8005538:	2800      	cmp	r0, #0
 800553a:	d144      	bne.n	80055c6 <__gethex+0x272>
 800553c:	f04f 0a02 	mov.w	sl, #2
 8005540:	4639      	mov	r1, r7
 8005542:	4620      	mov	r0, r4
 8005544:	f7ff fe9e 	bl	8005284 <rshift>
 8005548:	443d      	add	r5, r7
 800554a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800554e:	42ab      	cmp	r3, r5
 8005550:	da4a      	bge.n	80055e8 <__gethex+0x294>
 8005552:	4621      	mov	r1, r4
 8005554:	9802      	ldr	r0, [sp, #8]
 8005556:	f000 fa67 	bl	8005a28 <_Bfree>
 800555a:	2300      	movs	r3, #0
 800555c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800555e:	27a3      	movs	r7, #163	; 0xa3
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	e789      	b.n	8005478 <__gethex+0x124>
 8005564:	1e73      	subs	r3, r6, #1
 8005566:	9a07      	ldr	r2, [sp, #28]
 8005568:	9305      	str	r3, [sp, #20]
 800556a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800556e:	4293      	cmp	r3, r2
 8005570:	d019      	beq.n	80055a6 <__gethex+0x252>
 8005572:	f1bb 0f20 	cmp.w	fp, #32
 8005576:	d107      	bne.n	8005588 <__gethex+0x234>
 8005578:	9b04      	ldr	r3, [sp, #16]
 800557a:	9a01      	ldr	r2, [sp, #4]
 800557c:	f843 2b04 	str.w	r2, [r3], #4
 8005580:	9304      	str	r3, [sp, #16]
 8005582:	2300      	movs	r3, #0
 8005584:	469b      	mov	fp, r3
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800558c:	f7ff fecd 	bl	800532a <__hexdig_fun>
 8005590:	9b01      	ldr	r3, [sp, #4]
 8005592:	f000 000f 	and.w	r0, r0, #15
 8005596:	fa00 f00b 	lsl.w	r0, r0, fp
 800559a:	4303      	orrs	r3, r0
 800559c:	9301      	str	r3, [sp, #4]
 800559e:	f10b 0b04 	add.w	fp, fp, #4
 80055a2:	9b05      	ldr	r3, [sp, #20]
 80055a4:	e00d      	b.n	80055c2 <__gethex+0x26e>
 80055a6:	9b05      	ldr	r3, [sp, #20]
 80055a8:	9a08      	ldr	r2, [sp, #32]
 80055aa:	4413      	add	r3, r2
 80055ac:	42bb      	cmp	r3, r7
 80055ae:	d3e0      	bcc.n	8005572 <__gethex+0x21e>
 80055b0:	4618      	mov	r0, r3
 80055b2:	4652      	mov	r2, sl
 80055b4:	9903      	ldr	r1, [sp, #12]
 80055b6:	9309      	str	r3, [sp, #36]	; 0x24
 80055b8:	f001 f8d4 	bl	8006764 <strncmp>
 80055bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055be:	2800      	cmp	r0, #0
 80055c0:	d1d7      	bne.n	8005572 <__gethex+0x21e>
 80055c2:	461e      	mov	r6, r3
 80055c4:	e78c      	b.n	80054e0 <__gethex+0x18c>
 80055c6:	f04f 0a03 	mov.w	sl, #3
 80055ca:	e7b9      	b.n	8005540 <__gethex+0x1ec>
 80055cc:	da09      	bge.n	80055e2 <__gethex+0x28e>
 80055ce:	1bf7      	subs	r7, r6, r7
 80055d0:	4621      	mov	r1, r4
 80055d2:	463a      	mov	r2, r7
 80055d4:	9802      	ldr	r0, [sp, #8]
 80055d6:	f000 fc3f 	bl	8005e58 <__lshift>
 80055da:	4604      	mov	r4, r0
 80055dc:	1bed      	subs	r5, r5, r7
 80055de:	f100 0914 	add.w	r9, r0, #20
 80055e2:	f04f 0a00 	mov.w	sl, #0
 80055e6:	e7b0      	b.n	800554a <__gethex+0x1f6>
 80055e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80055ec:	42a8      	cmp	r0, r5
 80055ee:	dd71      	ble.n	80056d4 <__gethex+0x380>
 80055f0:	1b45      	subs	r5, r0, r5
 80055f2:	42ae      	cmp	r6, r5
 80055f4:	dc34      	bgt.n	8005660 <__gethex+0x30c>
 80055f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d028      	beq.n	8005650 <__gethex+0x2fc>
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d02a      	beq.n	8005658 <__gethex+0x304>
 8005602:	2b01      	cmp	r3, #1
 8005604:	d115      	bne.n	8005632 <__gethex+0x2de>
 8005606:	42ae      	cmp	r6, r5
 8005608:	d113      	bne.n	8005632 <__gethex+0x2de>
 800560a:	2e01      	cmp	r6, #1
 800560c:	d10b      	bne.n	8005626 <__gethex+0x2d2>
 800560e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005612:	9a06      	ldr	r2, [sp, #24]
 8005614:	2762      	movs	r7, #98	; 0x62
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	2301      	movs	r3, #1
 800561a:	6123      	str	r3, [r4, #16]
 800561c:	f8c9 3000 	str.w	r3, [r9]
 8005620:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005622:	601c      	str	r4, [r3, #0]
 8005624:	e728      	b.n	8005478 <__gethex+0x124>
 8005626:	4620      	mov	r0, r4
 8005628:	1e71      	subs	r1, r6, #1
 800562a:	f000 fe54 	bl	80062d6 <__any_on>
 800562e:	2800      	cmp	r0, #0
 8005630:	d1ed      	bne.n	800560e <__gethex+0x2ba>
 8005632:	4621      	mov	r1, r4
 8005634:	9802      	ldr	r0, [sp, #8]
 8005636:	f000 f9f7 	bl	8005a28 <_Bfree>
 800563a:	2300      	movs	r3, #0
 800563c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800563e:	2750      	movs	r7, #80	; 0x50
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	e719      	b.n	8005478 <__gethex+0x124>
 8005644:	080075e0 	.word	0x080075e0
 8005648:	08007564 	.word	0x08007564
 800564c:	08007575 	.word	0x08007575
 8005650:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1ed      	bne.n	8005632 <__gethex+0x2de>
 8005656:	e7da      	b.n	800560e <__gethex+0x2ba>
 8005658:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1d7      	bne.n	800560e <__gethex+0x2ba>
 800565e:	e7e8      	b.n	8005632 <__gethex+0x2de>
 8005660:	1e6f      	subs	r7, r5, #1
 8005662:	f1ba 0f00 	cmp.w	sl, #0
 8005666:	d132      	bne.n	80056ce <__gethex+0x37a>
 8005668:	b127      	cbz	r7, 8005674 <__gethex+0x320>
 800566a:	4639      	mov	r1, r7
 800566c:	4620      	mov	r0, r4
 800566e:	f000 fe32 	bl	80062d6 <__any_on>
 8005672:	4682      	mov	sl, r0
 8005674:	2101      	movs	r1, #1
 8005676:	117b      	asrs	r3, r7, #5
 8005678:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800567c:	f007 071f 	and.w	r7, r7, #31
 8005680:	fa01 f707 	lsl.w	r7, r1, r7
 8005684:	421f      	tst	r7, r3
 8005686:	f04f 0702 	mov.w	r7, #2
 800568a:	4629      	mov	r1, r5
 800568c:	4620      	mov	r0, r4
 800568e:	bf18      	it	ne
 8005690:	f04a 0a02 	orrne.w	sl, sl, #2
 8005694:	1b76      	subs	r6, r6, r5
 8005696:	f7ff fdf5 	bl	8005284 <rshift>
 800569a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800569e:	f1ba 0f00 	cmp.w	sl, #0
 80056a2:	d048      	beq.n	8005736 <__gethex+0x3e2>
 80056a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d015      	beq.n	80056d8 <__gethex+0x384>
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d017      	beq.n	80056e0 <__gethex+0x38c>
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d109      	bne.n	80056c8 <__gethex+0x374>
 80056b4:	f01a 0f02 	tst.w	sl, #2
 80056b8:	d006      	beq.n	80056c8 <__gethex+0x374>
 80056ba:	f8d9 0000 	ldr.w	r0, [r9]
 80056be:	ea4a 0a00 	orr.w	sl, sl, r0
 80056c2:	f01a 0f01 	tst.w	sl, #1
 80056c6:	d10e      	bne.n	80056e6 <__gethex+0x392>
 80056c8:	f047 0710 	orr.w	r7, r7, #16
 80056cc:	e033      	b.n	8005736 <__gethex+0x3e2>
 80056ce:	f04f 0a01 	mov.w	sl, #1
 80056d2:	e7cf      	b.n	8005674 <__gethex+0x320>
 80056d4:	2701      	movs	r7, #1
 80056d6:	e7e2      	b.n	800569e <__gethex+0x34a>
 80056d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056da:	f1c3 0301 	rsb	r3, r3, #1
 80056de:	9315      	str	r3, [sp, #84]	; 0x54
 80056e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <__gethex+0x374>
 80056e6:	f04f 0c00 	mov.w	ip, #0
 80056ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80056ee:	f104 0314 	add.w	r3, r4, #20
 80056f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80056f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80056fa:	4618      	mov	r0, r3
 80056fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005700:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005704:	d01c      	beq.n	8005740 <__gethex+0x3ec>
 8005706:	3201      	adds	r2, #1
 8005708:	6002      	str	r2, [r0, #0]
 800570a:	2f02      	cmp	r7, #2
 800570c:	f104 0314 	add.w	r3, r4, #20
 8005710:	d13d      	bne.n	800578e <__gethex+0x43a>
 8005712:	f8d8 2000 	ldr.w	r2, [r8]
 8005716:	3a01      	subs	r2, #1
 8005718:	42b2      	cmp	r2, r6
 800571a:	d10a      	bne.n	8005732 <__gethex+0x3de>
 800571c:	2201      	movs	r2, #1
 800571e:	1171      	asrs	r1, r6, #5
 8005720:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005724:	f006 061f 	and.w	r6, r6, #31
 8005728:	fa02 f606 	lsl.w	r6, r2, r6
 800572c:	421e      	tst	r6, r3
 800572e:	bf18      	it	ne
 8005730:	4617      	movne	r7, r2
 8005732:	f047 0720 	orr.w	r7, r7, #32
 8005736:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005738:	601c      	str	r4, [r3, #0]
 800573a:	9b06      	ldr	r3, [sp, #24]
 800573c:	601d      	str	r5, [r3, #0]
 800573e:	e69b      	b.n	8005478 <__gethex+0x124>
 8005740:	4299      	cmp	r1, r3
 8005742:	f843 cc04 	str.w	ip, [r3, #-4]
 8005746:	d8d8      	bhi.n	80056fa <__gethex+0x3a6>
 8005748:	68a3      	ldr	r3, [r4, #8]
 800574a:	459b      	cmp	fp, r3
 800574c:	db17      	blt.n	800577e <__gethex+0x42a>
 800574e:	6861      	ldr	r1, [r4, #4]
 8005750:	9802      	ldr	r0, [sp, #8]
 8005752:	3101      	adds	r1, #1
 8005754:	f000 f928 	bl	80059a8 <_Balloc>
 8005758:	4681      	mov	r9, r0
 800575a:	b918      	cbnz	r0, 8005764 <__gethex+0x410>
 800575c:	4602      	mov	r2, r0
 800575e:	2184      	movs	r1, #132	; 0x84
 8005760:	4b19      	ldr	r3, [pc, #100]	; (80057c8 <__gethex+0x474>)
 8005762:	e6ac      	b.n	80054be <__gethex+0x16a>
 8005764:	6922      	ldr	r2, [r4, #16]
 8005766:	f104 010c 	add.w	r1, r4, #12
 800576a:	3202      	adds	r2, #2
 800576c:	0092      	lsls	r2, r2, #2
 800576e:	300c      	adds	r0, #12
 8005770:	f7fd f98c 	bl	8002a8c <memcpy>
 8005774:	4621      	mov	r1, r4
 8005776:	9802      	ldr	r0, [sp, #8]
 8005778:	f000 f956 	bl	8005a28 <_Bfree>
 800577c:	464c      	mov	r4, r9
 800577e:	6923      	ldr	r3, [r4, #16]
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	6122      	str	r2, [r4, #16]
 8005784:	2201      	movs	r2, #1
 8005786:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800578a:	615a      	str	r2, [r3, #20]
 800578c:	e7bd      	b.n	800570a <__gethex+0x3b6>
 800578e:	6922      	ldr	r2, [r4, #16]
 8005790:	455a      	cmp	r2, fp
 8005792:	dd0b      	ble.n	80057ac <__gethex+0x458>
 8005794:	2101      	movs	r1, #1
 8005796:	4620      	mov	r0, r4
 8005798:	f7ff fd74 	bl	8005284 <rshift>
 800579c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80057a0:	3501      	adds	r5, #1
 80057a2:	42ab      	cmp	r3, r5
 80057a4:	f6ff aed5 	blt.w	8005552 <__gethex+0x1fe>
 80057a8:	2701      	movs	r7, #1
 80057aa:	e7c2      	b.n	8005732 <__gethex+0x3de>
 80057ac:	f016 061f 	ands.w	r6, r6, #31
 80057b0:	d0fa      	beq.n	80057a8 <__gethex+0x454>
 80057b2:	449a      	add	sl, r3
 80057b4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80057b8:	f000 f9ec 	bl	8005b94 <__hi0bits>
 80057bc:	f1c6 0620 	rsb	r6, r6, #32
 80057c0:	42b0      	cmp	r0, r6
 80057c2:	dbe7      	blt.n	8005794 <__gethex+0x440>
 80057c4:	e7f0      	b.n	80057a8 <__gethex+0x454>
 80057c6:	bf00      	nop
 80057c8:	08007564 	.word	0x08007564

080057cc <L_shift>:
 80057cc:	f1c2 0208 	rsb	r2, r2, #8
 80057d0:	0092      	lsls	r2, r2, #2
 80057d2:	b570      	push	{r4, r5, r6, lr}
 80057d4:	f1c2 0620 	rsb	r6, r2, #32
 80057d8:	6843      	ldr	r3, [r0, #4]
 80057da:	6804      	ldr	r4, [r0, #0]
 80057dc:	fa03 f506 	lsl.w	r5, r3, r6
 80057e0:	432c      	orrs	r4, r5
 80057e2:	40d3      	lsrs	r3, r2
 80057e4:	6004      	str	r4, [r0, #0]
 80057e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80057ea:	4288      	cmp	r0, r1
 80057ec:	d3f4      	bcc.n	80057d8 <L_shift+0xc>
 80057ee:	bd70      	pop	{r4, r5, r6, pc}

080057f0 <__match>:
 80057f0:	b530      	push	{r4, r5, lr}
 80057f2:	6803      	ldr	r3, [r0, #0]
 80057f4:	3301      	adds	r3, #1
 80057f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057fa:	b914      	cbnz	r4, 8005802 <__match+0x12>
 80057fc:	6003      	str	r3, [r0, #0]
 80057fe:	2001      	movs	r0, #1
 8005800:	bd30      	pop	{r4, r5, pc}
 8005802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005806:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800580a:	2d19      	cmp	r5, #25
 800580c:	bf98      	it	ls
 800580e:	3220      	addls	r2, #32
 8005810:	42a2      	cmp	r2, r4
 8005812:	d0f0      	beq.n	80057f6 <__match+0x6>
 8005814:	2000      	movs	r0, #0
 8005816:	e7f3      	b.n	8005800 <__match+0x10>

08005818 <__hexnan>:
 8005818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800581c:	2500      	movs	r5, #0
 800581e:	680b      	ldr	r3, [r1, #0]
 8005820:	4682      	mov	sl, r0
 8005822:	115e      	asrs	r6, r3, #5
 8005824:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005828:	f013 031f 	ands.w	r3, r3, #31
 800582c:	bf18      	it	ne
 800582e:	3604      	addne	r6, #4
 8005830:	1f37      	subs	r7, r6, #4
 8005832:	4690      	mov	r8, r2
 8005834:	46b9      	mov	r9, r7
 8005836:	463c      	mov	r4, r7
 8005838:	46ab      	mov	fp, r5
 800583a:	b087      	sub	sp, #28
 800583c:	6801      	ldr	r1, [r0, #0]
 800583e:	9301      	str	r3, [sp, #4]
 8005840:	f846 5c04 	str.w	r5, [r6, #-4]
 8005844:	9502      	str	r5, [sp, #8]
 8005846:	784a      	ldrb	r2, [r1, #1]
 8005848:	1c4b      	adds	r3, r1, #1
 800584a:	9303      	str	r3, [sp, #12]
 800584c:	b342      	cbz	r2, 80058a0 <__hexnan+0x88>
 800584e:	4610      	mov	r0, r2
 8005850:	9105      	str	r1, [sp, #20]
 8005852:	9204      	str	r2, [sp, #16]
 8005854:	f7ff fd69 	bl	800532a <__hexdig_fun>
 8005858:	2800      	cmp	r0, #0
 800585a:	d14f      	bne.n	80058fc <__hexnan+0xe4>
 800585c:	9a04      	ldr	r2, [sp, #16]
 800585e:	9905      	ldr	r1, [sp, #20]
 8005860:	2a20      	cmp	r2, #32
 8005862:	d818      	bhi.n	8005896 <__hexnan+0x7e>
 8005864:	9b02      	ldr	r3, [sp, #8]
 8005866:	459b      	cmp	fp, r3
 8005868:	dd13      	ble.n	8005892 <__hexnan+0x7a>
 800586a:	454c      	cmp	r4, r9
 800586c:	d206      	bcs.n	800587c <__hexnan+0x64>
 800586e:	2d07      	cmp	r5, #7
 8005870:	dc04      	bgt.n	800587c <__hexnan+0x64>
 8005872:	462a      	mov	r2, r5
 8005874:	4649      	mov	r1, r9
 8005876:	4620      	mov	r0, r4
 8005878:	f7ff ffa8 	bl	80057cc <L_shift>
 800587c:	4544      	cmp	r4, r8
 800587e:	d950      	bls.n	8005922 <__hexnan+0x10a>
 8005880:	2300      	movs	r3, #0
 8005882:	f1a4 0904 	sub.w	r9, r4, #4
 8005886:	f844 3c04 	str.w	r3, [r4, #-4]
 800588a:	461d      	mov	r5, r3
 800588c:	464c      	mov	r4, r9
 800588e:	f8cd b008 	str.w	fp, [sp, #8]
 8005892:	9903      	ldr	r1, [sp, #12]
 8005894:	e7d7      	b.n	8005846 <__hexnan+0x2e>
 8005896:	2a29      	cmp	r2, #41	; 0x29
 8005898:	d156      	bne.n	8005948 <__hexnan+0x130>
 800589a:	3102      	adds	r1, #2
 800589c:	f8ca 1000 	str.w	r1, [sl]
 80058a0:	f1bb 0f00 	cmp.w	fp, #0
 80058a4:	d050      	beq.n	8005948 <__hexnan+0x130>
 80058a6:	454c      	cmp	r4, r9
 80058a8:	d206      	bcs.n	80058b8 <__hexnan+0xa0>
 80058aa:	2d07      	cmp	r5, #7
 80058ac:	dc04      	bgt.n	80058b8 <__hexnan+0xa0>
 80058ae:	462a      	mov	r2, r5
 80058b0:	4649      	mov	r1, r9
 80058b2:	4620      	mov	r0, r4
 80058b4:	f7ff ff8a 	bl	80057cc <L_shift>
 80058b8:	4544      	cmp	r4, r8
 80058ba:	d934      	bls.n	8005926 <__hexnan+0x10e>
 80058bc:	4623      	mov	r3, r4
 80058be:	f1a8 0204 	sub.w	r2, r8, #4
 80058c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80058c6:	429f      	cmp	r7, r3
 80058c8:	f842 1f04 	str.w	r1, [r2, #4]!
 80058cc:	d2f9      	bcs.n	80058c2 <__hexnan+0xaa>
 80058ce:	1b3b      	subs	r3, r7, r4
 80058d0:	f023 0303 	bic.w	r3, r3, #3
 80058d4:	3304      	adds	r3, #4
 80058d6:	3401      	adds	r4, #1
 80058d8:	3e03      	subs	r6, #3
 80058da:	42b4      	cmp	r4, r6
 80058dc:	bf88      	it	hi
 80058de:	2304      	movhi	r3, #4
 80058e0:	2200      	movs	r2, #0
 80058e2:	4443      	add	r3, r8
 80058e4:	f843 2b04 	str.w	r2, [r3], #4
 80058e8:	429f      	cmp	r7, r3
 80058ea:	d2fb      	bcs.n	80058e4 <__hexnan+0xcc>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	b91b      	cbnz	r3, 80058f8 <__hexnan+0xe0>
 80058f0:	4547      	cmp	r7, r8
 80058f2:	d127      	bne.n	8005944 <__hexnan+0x12c>
 80058f4:	2301      	movs	r3, #1
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	2005      	movs	r0, #5
 80058fa:	e026      	b.n	800594a <__hexnan+0x132>
 80058fc:	3501      	adds	r5, #1
 80058fe:	2d08      	cmp	r5, #8
 8005900:	f10b 0b01 	add.w	fp, fp, #1
 8005904:	dd06      	ble.n	8005914 <__hexnan+0xfc>
 8005906:	4544      	cmp	r4, r8
 8005908:	d9c3      	bls.n	8005892 <__hexnan+0x7a>
 800590a:	2300      	movs	r3, #0
 800590c:	2501      	movs	r5, #1
 800590e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005912:	3c04      	subs	r4, #4
 8005914:	6822      	ldr	r2, [r4, #0]
 8005916:	f000 000f 	and.w	r0, r0, #15
 800591a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800591e:	6022      	str	r2, [r4, #0]
 8005920:	e7b7      	b.n	8005892 <__hexnan+0x7a>
 8005922:	2508      	movs	r5, #8
 8005924:	e7b5      	b.n	8005892 <__hexnan+0x7a>
 8005926:	9b01      	ldr	r3, [sp, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0df      	beq.n	80058ec <__hexnan+0xd4>
 800592c:	f04f 32ff 	mov.w	r2, #4294967295
 8005930:	f1c3 0320 	rsb	r3, r3, #32
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
 8005938:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800593c:	401a      	ands	r2, r3
 800593e:	f846 2c04 	str.w	r2, [r6, #-4]
 8005942:	e7d3      	b.n	80058ec <__hexnan+0xd4>
 8005944:	3f04      	subs	r7, #4
 8005946:	e7d1      	b.n	80058ec <__hexnan+0xd4>
 8005948:	2004      	movs	r0, #4
 800594a:	b007      	add	sp, #28
 800594c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005950 <_localeconv_r>:
 8005950:	4800      	ldr	r0, [pc, #0]	; (8005954 <_localeconv_r+0x4>)
 8005952:	4770      	bx	lr
 8005954:	20000164 	.word	0x20000164

08005958 <malloc>:
 8005958:	4b02      	ldr	r3, [pc, #8]	; (8005964 <malloc+0xc>)
 800595a:	4601      	mov	r1, r0
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	f000 bd35 	b.w	80063cc <_malloc_r>
 8005962:	bf00      	nop
 8005964:	2000000c 	.word	0x2000000c

08005968 <__ascii_mbtowc>:
 8005968:	b082      	sub	sp, #8
 800596a:	b901      	cbnz	r1, 800596e <__ascii_mbtowc+0x6>
 800596c:	a901      	add	r1, sp, #4
 800596e:	b142      	cbz	r2, 8005982 <__ascii_mbtowc+0x1a>
 8005970:	b14b      	cbz	r3, 8005986 <__ascii_mbtowc+0x1e>
 8005972:	7813      	ldrb	r3, [r2, #0]
 8005974:	600b      	str	r3, [r1, #0]
 8005976:	7812      	ldrb	r2, [r2, #0]
 8005978:	1e10      	subs	r0, r2, #0
 800597a:	bf18      	it	ne
 800597c:	2001      	movne	r0, #1
 800597e:	b002      	add	sp, #8
 8005980:	4770      	bx	lr
 8005982:	4610      	mov	r0, r2
 8005984:	e7fb      	b.n	800597e <__ascii_mbtowc+0x16>
 8005986:	f06f 0001 	mvn.w	r0, #1
 800598a:	e7f8      	b.n	800597e <__ascii_mbtowc+0x16>

0800598c <memchr>:
 800598c:	4603      	mov	r3, r0
 800598e:	b510      	push	{r4, lr}
 8005990:	b2c9      	uxtb	r1, r1
 8005992:	4402      	add	r2, r0
 8005994:	4293      	cmp	r3, r2
 8005996:	4618      	mov	r0, r3
 8005998:	d101      	bne.n	800599e <memchr+0x12>
 800599a:	2000      	movs	r0, #0
 800599c:	e003      	b.n	80059a6 <memchr+0x1a>
 800599e:	7804      	ldrb	r4, [r0, #0]
 80059a0:	3301      	adds	r3, #1
 80059a2:	428c      	cmp	r4, r1
 80059a4:	d1f6      	bne.n	8005994 <memchr+0x8>
 80059a6:	bd10      	pop	{r4, pc}

080059a8 <_Balloc>:
 80059a8:	b570      	push	{r4, r5, r6, lr}
 80059aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059ac:	4604      	mov	r4, r0
 80059ae:	460d      	mov	r5, r1
 80059b0:	b976      	cbnz	r6, 80059d0 <_Balloc+0x28>
 80059b2:	2010      	movs	r0, #16
 80059b4:	f7ff ffd0 	bl	8005958 <malloc>
 80059b8:	4602      	mov	r2, r0
 80059ba:	6260      	str	r0, [r4, #36]	; 0x24
 80059bc:	b920      	cbnz	r0, 80059c8 <_Balloc+0x20>
 80059be:	2166      	movs	r1, #102	; 0x66
 80059c0:	4b17      	ldr	r3, [pc, #92]	; (8005a20 <_Balloc+0x78>)
 80059c2:	4818      	ldr	r0, [pc, #96]	; (8005a24 <_Balloc+0x7c>)
 80059c4:	f000 feee 	bl	80067a4 <__assert_func>
 80059c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059cc:	6006      	str	r6, [r0, #0]
 80059ce:	60c6      	str	r6, [r0, #12]
 80059d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059d2:	68f3      	ldr	r3, [r6, #12]
 80059d4:	b183      	cbz	r3, 80059f8 <_Balloc+0x50>
 80059d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059de:	b9b8      	cbnz	r0, 8005a10 <_Balloc+0x68>
 80059e0:	2101      	movs	r1, #1
 80059e2:	fa01 f605 	lsl.w	r6, r1, r5
 80059e6:	1d72      	adds	r2, r6, #5
 80059e8:	4620      	mov	r0, r4
 80059ea:	0092      	lsls	r2, r2, #2
 80059ec:	f000 fc94 	bl	8006318 <_calloc_r>
 80059f0:	b160      	cbz	r0, 8005a0c <_Balloc+0x64>
 80059f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059f6:	e00e      	b.n	8005a16 <_Balloc+0x6e>
 80059f8:	2221      	movs	r2, #33	; 0x21
 80059fa:	2104      	movs	r1, #4
 80059fc:	4620      	mov	r0, r4
 80059fe:	f000 fc8b 	bl	8006318 <_calloc_r>
 8005a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a04:	60f0      	str	r0, [r6, #12]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e4      	bne.n	80059d6 <_Balloc+0x2e>
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	bd70      	pop	{r4, r5, r6, pc}
 8005a10:	6802      	ldr	r2, [r0, #0]
 8005a12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a16:	2300      	movs	r3, #0
 8005a18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a1c:	e7f7      	b.n	8005a0e <_Balloc+0x66>
 8005a1e:	bf00      	nop
 8005a20:	080074ee 	.word	0x080074ee
 8005a24:	080075f4 	.word	0x080075f4

08005a28 <_Bfree>:
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a2c:	4605      	mov	r5, r0
 8005a2e:	460c      	mov	r4, r1
 8005a30:	b976      	cbnz	r6, 8005a50 <_Bfree+0x28>
 8005a32:	2010      	movs	r0, #16
 8005a34:	f7ff ff90 	bl	8005958 <malloc>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6268      	str	r0, [r5, #36]	; 0x24
 8005a3c:	b920      	cbnz	r0, 8005a48 <_Bfree+0x20>
 8005a3e:	218a      	movs	r1, #138	; 0x8a
 8005a40:	4b08      	ldr	r3, [pc, #32]	; (8005a64 <_Bfree+0x3c>)
 8005a42:	4809      	ldr	r0, [pc, #36]	; (8005a68 <_Bfree+0x40>)
 8005a44:	f000 feae 	bl	80067a4 <__assert_func>
 8005a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a4c:	6006      	str	r6, [r0, #0]
 8005a4e:	60c6      	str	r6, [r0, #12]
 8005a50:	b13c      	cbz	r4, 8005a62 <_Bfree+0x3a>
 8005a52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a54:	6862      	ldr	r2, [r4, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a5c:	6021      	str	r1, [r4, #0]
 8005a5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a62:	bd70      	pop	{r4, r5, r6, pc}
 8005a64:	080074ee 	.word	0x080074ee
 8005a68:	080075f4 	.word	0x080075f4

08005a6c <__multadd>:
 8005a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a70:	4698      	mov	r8, r3
 8005a72:	460c      	mov	r4, r1
 8005a74:	2300      	movs	r3, #0
 8005a76:	690e      	ldr	r6, [r1, #16]
 8005a78:	4607      	mov	r7, r0
 8005a7a:	f101 0014 	add.w	r0, r1, #20
 8005a7e:	6805      	ldr	r5, [r0, #0]
 8005a80:	3301      	adds	r3, #1
 8005a82:	b2a9      	uxth	r1, r5
 8005a84:	fb02 8101 	mla	r1, r2, r1, r8
 8005a88:	0c2d      	lsrs	r5, r5, #16
 8005a8a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005a8e:	fb02 c505 	mla	r5, r2, r5, ip
 8005a92:	b289      	uxth	r1, r1
 8005a94:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005a98:	429e      	cmp	r6, r3
 8005a9a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005a9e:	f840 1b04 	str.w	r1, [r0], #4
 8005aa2:	dcec      	bgt.n	8005a7e <__multadd+0x12>
 8005aa4:	f1b8 0f00 	cmp.w	r8, #0
 8005aa8:	d022      	beq.n	8005af0 <__multadd+0x84>
 8005aaa:	68a3      	ldr	r3, [r4, #8]
 8005aac:	42b3      	cmp	r3, r6
 8005aae:	dc19      	bgt.n	8005ae4 <__multadd+0x78>
 8005ab0:	6861      	ldr	r1, [r4, #4]
 8005ab2:	4638      	mov	r0, r7
 8005ab4:	3101      	adds	r1, #1
 8005ab6:	f7ff ff77 	bl	80059a8 <_Balloc>
 8005aba:	4605      	mov	r5, r0
 8005abc:	b928      	cbnz	r0, 8005aca <__multadd+0x5e>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	21b5      	movs	r1, #181	; 0xb5
 8005ac2:	4b0d      	ldr	r3, [pc, #52]	; (8005af8 <__multadd+0x8c>)
 8005ac4:	480d      	ldr	r0, [pc, #52]	; (8005afc <__multadd+0x90>)
 8005ac6:	f000 fe6d 	bl	80067a4 <__assert_func>
 8005aca:	6922      	ldr	r2, [r4, #16]
 8005acc:	f104 010c 	add.w	r1, r4, #12
 8005ad0:	3202      	adds	r2, #2
 8005ad2:	0092      	lsls	r2, r2, #2
 8005ad4:	300c      	adds	r0, #12
 8005ad6:	f7fc ffd9 	bl	8002a8c <memcpy>
 8005ada:	4621      	mov	r1, r4
 8005adc:	4638      	mov	r0, r7
 8005ade:	f7ff ffa3 	bl	8005a28 <_Bfree>
 8005ae2:	462c      	mov	r4, r5
 8005ae4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005ae8:	3601      	adds	r6, #1
 8005aea:	f8c3 8014 	str.w	r8, [r3, #20]
 8005aee:	6126      	str	r6, [r4, #16]
 8005af0:	4620      	mov	r0, r4
 8005af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af6:	bf00      	nop
 8005af8:	08007564 	.word	0x08007564
 8005afc:	080075f4 	.word	0x080075f4

08005b00 <__s2b>:
 8005b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b04:	4615      	mov	r5, r2
 8005b06:	2209      	movs	r2, #9
 8005b08:	461f      	mov	r7, r3
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b12:	4606      	mov	r6, r0
 8005b14:	2201      	movs	r2, #1
 8005b16:	2100      	movs	r1, #0
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	db09      	blt.n	8005b30 <__s2b+0x30>
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	f7ff ff43 	bl	80059a8 <_Balloc>
 8005b22:	b940      	cbnz	r0, 8005b36 <__s2b+0x36>
 8005b24:	4602      	mov	r2, r0
 8005b26:	21ce      	movs	r1, #206	; 0xce
 8005b28:	4b18      	ldr	r3, [pc, #96]	; (8005b8c <__s2b+0x8c>)
 8005b2a:	4819      	ldr	r0, [pc, #100]	; (8005b90 <__s2b+0x90>)
 8005b2c:	f000 fe3a 	bl	80067a4 <__assert_func>
 8005b30:	0052      	lsls	r2, r2, #1
 8005b32:	3101      	adds	r1, #1
 8005b34:	e7f0      	b.n	8005b18 <__s2b+0x18>
 8005b36:	9b08      	ldr	r3, [sp, #32]
 8005b38:	2d09      	cmp	r5, #9
 8005b3a:	6143      	str	r3, [r0, #20]
 8005b3c:	f04f 0301 	mov.w	r3, #1
 8005b40:	6103      	str	r3, [r0, #16]
 8005b42:	dd16      	ble.n	8005b72 <__s2b+0x72>
 8005b44:	f104 0909 	add.w	r9, r4, #9
 8005b48:	46c8      	mov	r8, r9
 8005b4a:	442c      	add	r4, r5
 8005b4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005b50:	4601      	mov	r1, r0
 8005b52:	220a      	movs	r2, #10
 8005b54:	4630      	mov	r0, r6
 8005b56:	3b30      	subs	r3, #48	; 0x30
 8005b58:	f7ff ff88 	bl	8005a6c <__multadd>
 8005b5c:	45a0      	cmp	r8, r4
 8005b5e:	d1f5      	bne.n	8005b4c <__s2b+0x4c>
 8005b60:	f1a5 0408 	sub.w	r4, r5, #8
 8005b64:	444c      	add	r4, r9
 8005b66:	1b2d      	subs	r5, r5, r4
 8005b68:	1963      	adds	r3, r4, r5
 8005b6a:	42bb      	cmp	r3, r7
 8005b6c:	db04      	blt.n	8005b78 <__s2b+0x78>
 8005b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b72:	2509      	movs	r5, #9
 8005b74:	340a      	adds	r4, #10
 8005b76:	e7f6      	b.n	8005b66 <__s2b+0x66>
 8005b78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b7c:	4601      	mov	r1, r0
 8005b7e:	220a      	movs	r2, #10
 8005b80:	4630      	mov	r0, r6
 8005b82:	3b30      	subs	r3, #48	; 0x30
 8005b84:	f7ff ff72 	bl	8005a6c <__multadd>
 8005b88:	e7ee      	b.n	8005b68 <__s2b+0x68>
 8005b8a:	bf00      	nop
 8005b8c:	08007564 	.word	0x08007564
 8005b90:	080075f4 	.word	0x080075f4

08005b94 <__hi0bits>:
 8005b94:	0c02      	lsrs	r2, r0, #16
 8005b96:	0412      	lsls	r2, r2, #16
 8005b98:	4603      	mov	r3, r0
 8005b9a:	b9ca      	cbnz	r2, 8005bd0 <__hi0bits+0x3c>
 8005b9c:	0403      	lsls	r3, r0, #16
 8005b9e:	2010      	movs	r0, #16
 8005ba0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005ba4:	bf04      	itt	eq
 8005ba6:	021b      	lsleq	r3, r3, #8
 8005ba8:	3008      	addeq	r0, #8
 8005baa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005bae:	bf04      	itt	eq
 8005bb0:	011b      	lsleq	r3, r3, #4
 8005bb2:	3004      	addeq	r0, #4
 8005bb4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005bb8:	bf04      	itt	eq
 8005bba:	009b      	lsleq	r3, r3, #2
 8005bbc:	3002      	addeq	r0, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	db05      	blt.n	8005bce <__hi0bits+0x3a>
 8005bc2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005bc6:	f100 0001 	add.w	r0, r0, #1
 8005bca:	bf08      	it	eq
 8005bcc:	2020      	moveq	r0, #32
 8005bce:	4770      	bx	lr
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	e7e5      	b.n	8005ba0 <__hi0bits+0xc>

08005bd4 <__lo0bits>:
 8005bd4:	6803      	ldr	r3, [r0, #0]
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	f013 0007 	ands.w	r0, r3, #7
 8005bdc:	d00b      	beq.n	8005bf6 <__lo0bits+0x22>
 8005bde:	07d9      	lsls	r1, r3, #31
 8005be0:	d422      	bmi.n	8005c28 <__lo0bits+0x54>
 8005be2:	0798      	lsls	r0, r3, #30
 8005be4:	bf49      	itett	mi
 8005be6:	085b      	lsrmi	r3, r3, #1
 8005be8:	089b      	lsrpl	r3, r3, #2
 8005bea:	2001      	movmi	r0, #1
 8005bec:	6013      	strmi	r3, [r2, #0]
 8005bee:	bf5c      	itt	pl
 8005bf0:	2002      	movpl	r0, #2
 8005bf2:	6013      	strpl	r3, [r2, #0]
 8005bf4:	4770      	bx	lr
 8005bf6:	b299      	uxth	r1, r3
 8005bf8:	b909      	cbnz	r1, 8005bfe <__lo0bits+0x2a>
 8005bfa:	2010      	movs	r0, #16
 8005bfc:	0c1b      	lsrs	r3, r3, #16
 8005bfe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005c02:	bf04      	itt	eq
 8005c04:	0a1b      	lsreq	r3, r3, #8
 8005c06:	3008      	addeq	r0, #8
 8005c08:	0719      	lsls	r1, r3, #28
 8005c0a:	bf04      	itt	eq
 8005c0c:	091b      	lsreq	r3, r3, #4
 8005c0e:	3004      	addeq	r0, #4
 8005c10:	0799      	lsls	r1, r3, #30
 8005c12:	bf04      	itt	eq
 8005c14:	089b      	lsreq	r3, r3, #2
 8005c16:	3002      	addeq	r0, #2
 8005c18:	07d9      	lsls	r1, r3, #31
 8005c1a:	d403      	bmi.n	8005c24 <__lo0bits+0x50>
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	f100 0001 	add.w	r0, r0, #1
 8005c22:	d003      	beq.n	8005c2c <__lo0bits+0x58>
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	4770      	bx	lr
 8005c28:	2000      	movs	r0, #0
 8005c2a:	4770      	bx	lr
 8005c2c:	2020      	movs	r0, #32
 8005c2e:	4770      	bx	lr

08005c30 <__i2b>:
 8005c30:	b510      	push	{r4, lr}
 8005c32:	460c      	mov	r4, r1
 8005c34:	2101      	movs	r1, #1
 8005c36:	f7ff feb7 	bl	80059a8 <_Balloc>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	b928      	cbnz	r0, 8005c4a <__i2b+0x1a>
 8005c3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c42:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <__i2b+0x24>)
 8005c44:	4804      	ldr	r0, [pc, #16]	; (8005c58 <__i2b+0x28>)
 8005c46:	f000 fdad 	bl	80067a4 <__assert_func>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	6144      	str	r4, [r0, #20]
 8005c4e:	6103      	str	r3, [r0, #16]
 8005c50:	bd10      	pop	{r4, pc}
 8005c52:	bf00      	nop
 8005c54:	08007564 	.word	0x08007564
 8005c58:	080075f4 	.word	0x080075f4

08005c5c <__multiply>:
 8005c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c60:	4614      	mov	r4, r2
 8005c62:	690a      	ldr	r2, [r1, #16]
 8005c64:	6923      	ldr	r3, [r4, #16]
 8005c66:	460d      	mov	r5, r1
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	bfbe      	ittt	lt
 8005c6c:	460b      	movlt	r3, r1
 8005c6e:	4625      	movlt	r5, r4
 8005c70:	461c      	movlt	r4, r3
 8005c72:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005c76:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005c7a:	68ab      	ldr	r3, [r5, #8]
 8005c7c:	6869      	ldr	r1, [r5, #4]
 8005c7e:	eb0a 0709 	add.w	r7, sl, r9
 8005c82:	42bb      	cmp	r3, r7
 8005c84:	b085      	sub	sp, #20
 8005c86:	bfb8      	it	lt
 8005c88:	3101      	addlt	r1, #1
 8005c8a:	f7ff fe8d 	bl	80059a8 <_Balloc>
 8005c8e:	b930      	cbnz	r0, 8005c9e <__multiply+0x42>
 8005c90:	4602      	mov	r2, r0
 8005c92:	f240 115d 	movw	r1, #349	; 0x15d
 8005c96:	4b41      	ldr	r3, [pc, #260]	; (8005d9c <__multiply+0x140>)
 8005c98:	4841      	ldr	r0, [pc, #260]	; (8005da0 <__multiply+0x144>)
 8005c9a:	f000 fd83 	bl	80067a4 <__assert_func>
 8005c9e:	f100 0614 	add.w	r6, r0, #20
 8005ca2:	4633      	mov	r3, r6
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005caa:	4543      	cmp	r3, r8
 8005cac:	d31e      	bcc.n	8005cec <__multiply+0x90>
 8005cae:	f105 0c14 	add.w	ip, r5, #20
 8005cb2:	f104 0314 	add.w	r3, r4, #20
 8005cb6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005cba:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005cbe:	9202      	str	r2, [sp, #8]
 8005cc0:	ebac 0205 	sub.w	r2, ip, r5
 8005cc4:	3a15      	subs	r2, #21
 8005cc6:	f022 0203 	bic.w	r2, r2, #3
 8005cca:	3204      	adds	r2, #4
 8005ccc:	f105 0115 	add.w	r1, r5, #21
 8005cd0:	458c      	cmp	ip, r1
 8005cd2:	bf38      	it	cc
 8005cd4:	2204      	movcc	r2, #4
 8005cd6:	9201      	str	r2, [sp, #4]
 8005cd8:	9a02      	ldr	r2, [sp, #8]
 8005cda:	9303      	str	r3, [sp, #12]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d808      	bhi.n	8005cf2 <__multiply+0x96>
 8005ce0:	2f00      	cmp	r7, #0
 8005ce2:	dc55      	bgt.n	8005d90 <__multiply+0x134>
 8005ce4:	6107      	str	r7, [r0, #16]
 8005ce6:	b005      	add	sp, #20
 8005ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cec:	f843 2b04 	str.w	r2, [r3], #4
 8005cf0:	e7db      	b.n	8005caa <__multiply+0x4e>
 8005cf2:	f8b3 a000 	ldrh.w	sl, [r3]
 8005cf6:	f1ba 0f00 	cmp.w	sl, #0
 8005cfa:	d020      	beq.n	8005d3e <__multiply+0xe2>
 8005cfc:	46b1      	mov	r9, r6
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f105 0e14 	add.w	lr, r5, #20
 8005d04:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005d08:	f8d9 b000 	ldr.w	fp, [r9]
 8005d0c:	b2a1      	uxth	r1, r4
 8005d0e:	fa1f fb8b 	uxth.w	fp, fp
 8005d12:	fb0a b101 	mla	r1, sl, r1, fp
 8005d16:	4411      	add	r1, r2
 8005d18:	f8d9 2000 	ldr.w	r2, [r9]
 8005d1c:	0c24      	lsrs	r4, r4, #16
 8005d1e:	0c12      	lsrs	r2, r2, #16
 8005d20:	fb0a 2404 	mla	r4, sl, r4, r2
 8005d24:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005d28:	b289      	uxth	r1, r1
 8005d2a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005d2e:	45f4      	cmp	ip, lr
 8005d30:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005d34:	f849 1b04 	str.w	r1, [r9], #4
 8005d38:	d8e4      	bhi.n	8005d04 <__multiply+0xa8>
 8005d3a:	9901      	ldr	r1, [sp, #4]
 8005d3c:	5072      	str	r2, [r6, r1]
 8005d3e:	9a03      	ldr	r2, [sp, #12]
 8005d40:	3304      	adds	r3, #4
 8005d42:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d46:	f1b9 0f00 	cmp.w	r9, #0
 8005d4a:	d01f      	beq.n	8005d8c <__multiply+0x130>
 8005d4c:	46b6      	mov	lr, r6
 8005d4e:	f04f 0a00 	mov.w	sl, #0
 8005d52:	6834      	ldr	r4, [r6, #0]
 8005d54:	f105 0114 	add.w	r1, r5, #20
 8005d58:	880a      	ldrh	r2, [r1, #0]
 8005d5a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005d5e:	b2a4      	uxth	r4, r4
 8005d60:	fb09 b202 	mla	r2, r9, r2, fp
 8005d64:	4492      	add	sl, r2
 8005d66:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005d6a:	f84e 4b04 	str.w	r4, [lr], #4
 8005d6e:	f851 4b04 	ldr.w	r4, [r1], #4
 8005d72:	f8be 2000 	ldrh.w	r2, [lr]
 8005d76:	0c24      	lsrs	r4, r4, #16
 8005d78:	fb09 2404 	mla	r4, r9, r4, r2
 8005d7c:	458c      	cmp	ip, r1
 8005d7e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005d82:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005d86:	d8e7      	bhi.n	8005d58 <__multiply+0xfc>
 8005d88:	9a01      	ldr	r2, [sp, #4]
 8005d8a:	50b4      	str	r4, [r6, r2]
 8005d8c:	3604      	adds	r6, #4
 8005d8e:	e7a3      	b.n	8005cd8 <__multiply+0x7c>
 8005d90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1a5      	bne.n	8005ce4 <__multiply+0x88>
 8005d98:	3f01      	subs	r7, #1
 8005d9a:	e7a1      	b.n	8005ce0 <__multiply+0x84>
 8005d9c:	08007564 	.word	0x08007564
 8005da0:	080075f4 	.word	0x080075f4

08005da4 <__pow5mult>:
 8005da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005da8:	4615      	mov	r5, r2
 8005daa:	f012 0203 	ands.w	r2, r2, #3
 8005dae:	4606      	mov	r6, r0
 8005db0:	460f      	mov	r7, r1
 8005db2:	d007      	beq.n	8005dc4 <__pow5mult+0x20>
 8005db4:	4c25      	ldr	r4, [pc, #148]	; (8005e4c <__pow5mult+0xa8>)
 8005db6:	3a01      	subs	r2, #1
 8005db8:	2300      	movs	r3, #0
 8005dba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005dbe:	f7ff fe55 	bl	8005a6c <__multadd>
 8005dc2:	4607      	mov	r7, r0
 8005dc4:	10ad      	asrs	r5, r5, #2
 8005dc6:	d03d      	beq.n	8005e44 <__pow5mult+0xa0>
 8005dc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005dca:	b97c      	cbnz	r4, 8005dec <__pow5mult+0x48>
 8005dcc:	2010      	movs	r0, #16
 8005dce:	f7ff fdc3 	bl	8005958 <malloc>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	6270      	str	r0, [r6, #36]	; 0x24
 8005dd6:	b928      	cbnz	r0, 8005de4 <__pow5mult+0x40>
 8005dd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005ddc:	4b1c      	ldr	r3, [pc, #112]	; (8005e50 <__pow5mult+0xac>)
 8005dde:	481d      	ldr	r0, [pc, #116]	; (8005e54 <__pow5mult+0xb0>)
 8005de0:	f000 fce0 	bl	80067a4 <__assert_func>
 8005de4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005de8:	6004      	str	r4, [r0, #0]
 8005dea:	60c4      	str	r4, [r0, #12]
 8005dec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005df0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005df4:	b94c      	cbnz	r4, 8005e0a <__pow5mult+0x66>
 8005df6:	f240 2171 	movw	r1, #625	; 0x271
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f7ff ff18 	bl	8005c30 <__i2b>
 8005e00:	2300      	movs	r3, #0
 8005e02:	4604      	mov	r4, r0
 8005e04:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e08:	6003      	str	r3, [r0, #0]
 8005e0a:	f04f 0900 	mov.w	r9, #0
 8005e0e:	07eb      	lsls	r3, r5, #31
 8005e10:	d50a      	bpl.n	8005e28 <__pow5mult+0x84>
 8005e12:	4639      	mov	r1, r7
 8005e14:	4622      	mov	r2, r4
 8005e16:	4630      	mov	r0, r6
 8005e18:	f7ff ff20 	bl	8005c5c <__multiply>
 8005e1c:	4680      	mov	r8, r0
 8005e1e:	4639      	mov	r1, r7
 8005e20:	4630      	mov	r0, r6
 8005e22:	f7ff fe01 	bl	8005a28 <_Bfree>
 8005e26:	4647      	mov	r7, r8
 8005e28:	106d      	asrs	r5, r5, #1
 8005e2a:	d00b      	beq.n	8005e44 <__pow5mult+0xa0>
 8005e2c:	6820      	ldr	r0, [r4, #0]
 8005e2e:	b938      	cbnz	r0, 8005e40 <__pow5mult+0x9c>
 8005e30:	4622      	mov	r2, r4
 8005e32:	4621      	mov	r1, r4
 8005e34:	4630      	mov	r0, r6
 8005e36:	f7ff ff11 	bl	8005c5c <__multiply>
 8005e3a:	6020      	str	r0, [r4, #0]
 8005e3c:	f8c0 9000 	str.w	r9, [r0]
 8005e40:	4604      	mov	r4, r0
 8005e42:	e7e4      	b.n	8005e0e <__pow5mult+0x6a>
 8005e44:	4638      	mov	r0, r7
 8005e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e4a:	bf00      	nop
 8005e4c:	08007748 	.word	0x08007748
 8005e50:	080074ee 	.word	0x080074ee
 8005e54:	080075f4 	.word	0x080075f4

08005e58 <__lshift>:
 8005e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	4607      	mov	r7, r0
 8005e60:	4691      	mov	r9, r2
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	6849      	ldr	r1, [r1, #4]
 8005e66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e6a:	68a3      	ldr	r3, [r4, #8]
 8005e6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e70:	f108 0601 	add.w	r6, r8, #1
 8005e74:	42b3      	cmp	r3, r6
 8005e76:	db0b      	blt.n	8005e90 <__lshift+0x38>
 8005e78:	4638      	mov	r0, r7
 8005e7a:	f7ff fd95 	bl	80059a8 <_Balloc>
 8005e7e:	4605      	mov	r5, r0
 8005e80:	b948      	cbnz	r0, 8005e96 <__lshift+0x3e>
 8005e82:	4602      	mov	r2, r0
 8005e84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e88:	4b27      	ldr	r3, [pc, #156]	; (8005f28 <__lshift+0xd0>)
 8005e8a:	4828      	ldr	r0, [pc, #160]	; (8005f2c <__lshift+0xd4>)
 8005e8c:	f000 fc8a 	bl	80067a4 <__assert_func>
 8005e90:	3101      	adds	r1, #1
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	e7ee      	b.n	8005e74 <__lshift+0x1c>
 8005e96:	2300      	movs	r3, #0
 8005e98:	f100 0114 	add.w	r1, r0, #20
 8005e9c:	f100 0210 	add.w	r2, r0, #16
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	4553      	cmp	r3, sl
 8005ea4:	db33      	blt.n	8005f0e <__lshift+0xb6>
 8005ea6:	6920      	ldr	r0, [r4, #16]
 8005ea8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005eac:	f104 0314 	add.w	r3, r4, #20
 8005eb0:	f019 091f 	ands.w	r9, r9, #31
 8005eb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005eb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ebc:	d02b      	beq.n	8005f16 <__lshift+0xbe>
 8005ebe:	468a      	mov	sl, r1
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f1c9 0e20 	rsb	lr, r9, #32
 8005ec6:	6818      	ldr	r0, [r3, #0]
 8005ec8:	fa00 f009 	lsl.w	r0, r0, r9
 8005ecc:	4302      	orrs	r2, r0
 8005ece:	f84a 2b04 	str.w	r2, [sl], #4
 8005ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ed6:	459c      	cmp	ip, r3
 8005ed8:	fa22 f20e 	lsr.w	r2, r2, lr
 8005edc:	d8f3      	bhi.n	8005ec6 <__lshift+0x6e>
 8005ede:	ebac 0304 	sub.w	r3, ip, r4
 8005ee2:	3b15      	subs	r3, #21
 8005ee4:	f023 0303 	bic.w	r3, r3, #3
 8005ee8:	3304      	adds	r3, #4
 8005eea:	f104 0015 	add.w	r0, r4, #21
 8005eee:	4584      	cmp	ip, r0
 8005ef0:	bf38      	it	cc
 8005ef2:	2304      	movcc	r3, #4
 8005ef4:	50ca      	str	r2, [r1, r3]
 8005ef6:	b10a      	cbz	r2, 8005efc <__lshift+0xa4>
 8005ef8:	f108 0602 	add.w	r6, r8, #2
 8005efc:	3e01      	subs	r6, #1
 8005efe:	4638      	mov	r0, r7
 8005f00:	4621      	mov	r1, r4
 8005f02:	612e      	str	r6, [r5, #16]
 8005f04:	f7ff fd90 	bl	8005a28 <_Bfree>
 8005f08:	4628      	mov	r0, r5
 8005f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f12:	3301      	adds	r3, #1
 8005f14:	e7c5      	b.n	8005ea2 <__lshift+0x4a>
 8005f16:	3904      	subs	r1, #4
 8005f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f1c:	459c      	cmp	ip, r3
 8005f1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f22:	d8f9      	bhi.n	8005f18 <__lshift+0xc0>
 8005f24:	e7ea      	b.n	8005efc <__lshift+0xa4>
 8005f26:	bf00      	nop
 8005f28:	08007564 	.word	0x08007564
 8005f2c:	080075f4 	.word	0x080075f4

08005f30 <__mcmp>:
 8005f30:	4603      	mov	r3, r0
 8005f32:	690a      	ldr	r2, [r1, #16]
 8005f34:	6900      	ldr	r0, [r0, #16]
 8005f36:	b530      	push	{r4, r5, lr}
 8005f38:	1a80      	subs	r0, r0, r2
 8005f3a:	d10d      	bne.n	8005f58 <__mcmp+0x28>
 8005f3c:	3314      	adds	r3, #20
 8005f3e:	3114      	adds	r1, #20
 8005f40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f50:	4295      	cmp	r5, r2
 8005f52:	d002      	beq.n	8005f5a <__mcmp+0x2a>
 8005f54:	d304      	bcc.n	8005f60 <__mcmp+0x30>
 8005f56:	2001      	movs	r0, #1
 8005f58:	bd30      	pop	{r4, r5, pc}
 8005f5a:	42a3      	cmp	r3, r4
 8005f5c:	d3f4      	bcc.n	8005f48 <__mcmp+0x18>
 8005f5e:	e7fb      	b.n	8005f58 <__mcmp+0x28>
 8005f60:	f04f 30ff 	mov.w	r0, #4294967295
 8005f64:	e7f8      	b.n	8005f58 <__mcmp+0x28>
	...

08005f68 <__mdiff>:
 8005f68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	460c      	mov	r4, r1
 8005f6e:	4606      	mov	r6, r0
 8005f70:	4611      	mov	r1, r2
 8005f72:	4620      	mov	r0, r4
 8005f74:	4692      	mov	sl, r2
 8005f76:	f7ff ffdb 	bl	8005f30 <__mcmp>
 8005f7a:	1e05      	subs	r5, r0, #0
 8005f7c:	d111      	bne.n	8005fa2 <__mdiff+0x3a>
 8005f7e:	4629      	mov	r1, r5
 8005f80:	4630      	mov	r0, r6
 8005f82:	f7ff fd11 	bl	80059a8 <_Balloc>
 8005f86:	4602      	mov	r2, r0
 8005f88:	b928      	cbnz	r0, 8005f96 <__mdiff+0x2e>
 8005f8a:	f240 2132 	movw	r1, #562	; 0x232
 8005f8e:	4b3c      	ldr	r3, [pc, #240]	; (8006080 <__mdiff+0x118>)
 8005f90:	483c      	ldr	r0, [pc, #240]	; (8006084 <__mdiff+0x11c>)
 8005f92:	f000 fc07 	bl	80067a4 <__assert_func>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa2:	bfa4      	itt	ge
 8005fa4:	4653      	movge	r3, sl
 8005fa6:	46a2      	movge	sl, r4
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005fae:	bfa6      	itte	ge
 8005fb0:	461c      	movge	r4, r3
 8005fb2:	2500      	movge	r5, #0
 8005fb4:	2501      	movlt	r5, #1
 8005fb6:	f7ff fcf7 	bl	80059a8 <_Balloc>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	b918      	cbnz	r0, 8005fc6 <__mdiff+0x5e>
 8005fbe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005fc2:	4b2f      	ldr	r3, [pc, #188]	; (8006080 <__mdiff+0x118>)
 8005fc4:	e7e4      	b.n	8005f90 <__mdiff+0x28>
 8005fc6:	f100 0814 	add.w	r8, r0, #20
 8005fca:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005fce:	60c5      	str	r5, [r0, #12]
 8005fd0:	f04f 0c00 	mov.w	ip, #0
 8005fd4:	f10a 0514 	add.w	r5, sl, #20
 8005fd8:	f10a 0010 	add.w	r0, sl, #16
 8005fdc:	46c2      	mov	sl, r8
 8005fde:	6926      	ldr	r6, [r4, #16]
 8005fe0:	f104 0914 	add.w	r9, r4, #20
 8005fe4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005fe8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005fec:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005ff0:	f859 3b04 	ldr.w	r3, [r9], #4
 8005ff4:	fa1f f18b 	uxth.w	r1, fp
 8005ff8:	4461      	add	r1, ip
 8005ffa:	fa1f fc83 	uxth.w	ip, r3
 8005ffe:	0c1b      	lsrs	r3, r3, #16
 8006000:	eba1 010c 	sub.w	r1, r1, ip
 8006004:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006008:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800600c:	b289      	uxth	r1, r1
 800600e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006012:	454e      	cmp	r6, r9
 8006014:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006018:	f84a 3b04 	str.w	r3, [sl], #4
 800601c:	d8e6      	bhi.n	8005fec <__mdiff+0x84>
 800601e:	1b33      	subs	r3, r6, r4
 8006020:	3b15      	subs	r3, #21
 8006022:	f023 0303 	bic.w	r3, r3, #3
 8006026:	3415      	adds	r4, #21
 8006028:	3304      	adds	r3, #4
 800602a:	42a6      	cmp	r6, r4
 800602c:	bf38      	it	cc
 800602e:	2304      	movcc	r3, #4
 8006030:	441d      	add	r5, r3
 8006032:	4443      	add	r3, r8
 8006034:	461e      	mov	r6, r3
 8006036:	462c      	mov	r4, r5
 8006038:	4574      	cmp	r4, lr
 800603a:	d30e      	bcc.n	800605a <__mdiff+0xf2>
 800603c:	f10e 0103 	add.w	r1, lr, #3
 8006040:	1b49      	subs	r1, r1, r5
 8006042:	f021 0103 	bic.w	r1, r1, #3
 8006046:	3d03      	subs	r5, #3
 8006048:	45ae      	cmp	lr, r5
 800604a:	bf38      	it	cc
 800604c:	2100      	movcc	r1, #0
 800604e:	4419      	add	r1, r3
 8006050:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006054:	b18b      	cbz	r3, 800607a <__mdiff+0x112>
 8006056:	6117      	str	r7, [r2, #16]
 8006058:	e7a0      	b.n	8005f9c <__mdiff+0x34>
 800605a:	f854 8b04 	ldr.w	r8, [r4], #4
 800605e:	fa1f f188 	uxth.w	r1, r8
 8006062:	4461      	add	r1, ip
 8006064:	1408      	asrs	r0, r1, #16
 8006066:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800606a:	b289      	uxth	r1, r1
 800606c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006070:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006074:	f846 1b04 	str.w	r1, [r6], #4
 8006078:	e7de      	b.n	8006038 <__mdiff+0xd0>
 800607a:	3f01      	subs	r7, #1
 800607c:	e7e8      	b.n	8006050 <__mdiff+0xe8>
 800607e:	bf00      	nop
 8006080:	08007564 	.word	0x08007564
 8006084:	080075f4 	.word	0x080075f4

08006088 <__ulp>:
 8006088:	4b11      	ldr	r3, [pc, #68]	; (80060d0 <__ulp+0x48>)
 800608a:	400b      	ands	r3, r1
 800608c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006090:	2b00      	cmp	r3, #0
 8006092:	dd02      	ble.n	800609a <__ulp+0x12>
 8006094:	2000      	movs	r0, #0
 8006096:	4619      	mov	r1, r3
 8006098:	4770      	bx	lr
 800609a:	425b      	negs	r3, r3
 800609c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80060a0:	f04f 0000 	mov.w	r0, #0
 80060a4:	f04f 0100 	mov.w	r1, #0
 80060a8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80060ac:	da04      	bge.n	80060b8 <__ulp+0x30>
 80060ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80060b2:	fa43 f102 	asr.w	r1, r3, r2
 80060b6:	4770      	bx	lr
 80060b8:	f1a2 0314 	sub.w	r3, r2, #20
 80060bc:	2b1e      	cmp	r3, #30
 80060be:	bfd6      	itet	le
 80060c0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80060c4:	2301      	movgt	r3, #1
 80060c6:	fa22 f303 	lsrle.w	r3, r2, r3
 80060ca:	4618      	mov	r0, r3
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	7ff00000 	.word	0x7ff00000

080060d4 <__b2d>:
 80060d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060d8:	6907      	ldr	r7, [r0, #16]
 80060da:	f100 0914 	add.w	r9, r0, #20
 80060de:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80060e2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80060e6:	f1a7 0804 	sub.w	r8, r7, #4
 80060ea:	4630      	mov	r0, r6
 80060ec:	f7ff fd52 	bl	8005b94 <__hi0bits>
 80060f0:	f1c0 0320 	rsb	r3, r0, #32
 80060f4:	280a      	cmp	r0, #10
 80060f6:	600b      	str	r3, [r1, #0]
 80060f8:	491f      	ldr	r1, [pc, #124]	; (8006178 <__b2d+0xa4>)
 80060fa:	dc17      	bgt.n	800612c <__b2d+0x58>
 80060fc:	45c1      	cmp	r9, r8
 80060fe:	bf28      	it	cs
 8006100:	2200      	movcs	r2, #0
 8006102:	f1c0 0c0b 	rsb	ip, r0, #11
 8006106:	fa26 f30c 	lsr.w	r3, r6, ip
 800610a:	bf38      	it	cc
 800610c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006110:	ea43 0501 	orr.w	r5, r3, r1
 8006114:	f100 0315 	add.w	r3, r0, #21
 8006118:	fa06 f303 	lsl.w	r3, r6, r3
 800611c:	fa22 f20c 	lsr.w	r2, r2, ip
 8006120:	ea43 0402 	orr.w	r4, r3, r2
 8006124:	4620      	mov	r0, r4
 8006126:	4629      	mov	r1, r5
 8006128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800612c:	45c1      	cmp	r9, r8
 800612e:	bf2e      	itee	cs
 8006130:	2200      	movcs	r2, #0
 8006132:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006136:	f1a7 0808 	subcc.w	r8, r7, #8
 800613a:	f1b0 030b 	subs.w	r3, r0, #11
 800613e:	d016      	beq.n	800616e <__b2d+0x9a>
 8006140:	f1c3 0720 	rsb	r7, r3, #32
 8006144:	fa22 f107 	lsr.w	r1, r2, r7
 8006148:	45c8      	cmp	r8, r9
 800614a:	fa06 f603 	lsl.w	r6, r6, r3
 800614e:	ea46 0601 	orr.w	r6, r6, r1
 8006152:	bf94      	ite	ls
 8006154:	2100      	movls	r1, #0
 8006156:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800615a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800615e:	fa02 f003 	lsl.w	r0, r2, r3
 8006162:	40f9      	lsrs	r1, r7
 8006164:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006168:	ea40 0401 	orr.w	r4, r0, r1
 800616c:	e7da      	b.n	8006124 <__b2d+0x50>
 800616e:	4614      	mov	r4, r2
 8006170:	ea46 0501 	orr.w	r5, r6, r1
 8006174:	e7d6      	b.n	8006124 <__b2d+0x50>
 8006176:	bf00      	nop
 8006178:	3ff00000 	.word	0x3ff00000

0800617c <__d2b>:
 800617c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006180:	2101      	movs	r1, #1
 8006182:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006186:	4690      	mov	r8, r2
 8006188:	461d      	mov	r5, r3
 800618a:	f7ff fc0d 	bl	80059a8 <_Balloc>
 800618e:	4604      	mov	r4, r0
 8006190:	b930      	cbnz	r0, 80061a0 <__d2b+0x24>
 8006192:	4602      	mov	r2, r0
 8006194:	f240 310a 	movw	r1, #778	; 0x30a
 8006198:	4b24      	ldr	r3, [pc, #144]	; (800622c <__d2b+0xb0>)
 800619a:	4825      	ldr	r0, [pc, #148]	; (8006230 <__d2b+0xb4>)
 800619c:	f000 fb02 	bl	80067a4 <__assert_func>
 80061a0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80061a4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80061a8:	bb2d      	cbnz	r5, 80061f6 <__d2b+0x7a>
 80061aa:	9301      	str	r3, [sp, #4]
 80061ac:	f1b8 0300 	subs.w	r3, r8, #0
 80061b0:	d026      	beq.n	8006200 <__d2b+0x84>
 80061b2:	4668      	mov	r0, sp
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	f7ff fd0d 	bl	8005bd4 <__lo0bits>
 80061ba:	9900      	ldr	r1, [sp, #0]
 80061bc:	b1f0      	cbz	r0, 80061fc <__d2b+0x80>
 80061be:	9a01      	ldr	r2, [sp, #4]
 80061c0:	f1c0 0320 	rsb	r3, r0, #32
 80061c4:	fa02 f303 	lsl.w	r3, r2, r3
 80061c8:	430b      	orrs	r3, r1
 80061ca:	40c2      	lsrs	r2, r0
 80061cc:	6163      	str	r3, [r4, #20]
 80061ce:	9201      	str	r2, [sp, #4]
 80061d0:	9b01      	ldr	r3, [sp, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	bf14      	ite	ne
 80061d6:	2102      	movne	r1, #2
 80061d8:	2101      	moveq	r1, #1
 80061da:	61a3      	str	r3, [r4, #24]
 80061dc:	6121      	str	r1, [r4, #16]
 80061de:	b1c5      	cbz	r5, 8006212 <__d2b+0x96>
 80061e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80061e4:	4405      	add	r5, r0
 80061e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80061ea:	603d      	str	r5, [r7, #0]
 80061ec:	6030      	str	r0, [r6, #0]
 80061ee:	4620      	mov	r0, r4
 80061f0:	b002      	add	sp, #8
 80061f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061fa:	e7d6      	b.n	80061aa <__d2b+0x2e>
 80061fc:	6161      	str	r1, [r4, #20]
 80061fe:	e7e7      	b.n	80061d0 <__d2b+0x54>
 8006200:	a801      	add	r0, sp, #4
 8006202:	f7ff fce7 	bl	8005bd4 <__lo0bits>
 8006206:	2101      	movs	r1, #1
 8006208:	9b01      	ldr	r3, [sp, #4]
 800620a:	6121      	str	r1, [r4, #16]
 800620c:	6163      	str	r3, [r4, #20]
 800620e:	3020      	adds	r0, #32
 8006210:	e7e5      	b.n	80061de <__d2b+0x62>
 8006212:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006216:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800621a:	6038      	str	r0, [r7, #0]
 800621c:	6918      	ldr	r0, [r3, #16]
 800621e:	f7ff fcb9 	bl	8005b94 <__hi0bits>
 8006222:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006226:	6031      	str	r1, [r6, #0]
 8006228:	e7e1      	b.n	80061ee <__d2b+0x72>
 800622a:	bf00      	nop
 800622c:	08007564 	.word	0x08007564
 8006230:	080075f4 	.word	0x080075f4

08006234 <__ratio>:
 8006234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006238:	4688      	mov	r8, r1
 800623a:	4669      	mov	r1, sp
 800623c:	4681      	mov	r9, r0
 800623e:	f7ff ff49 	bl	80060d4 <__b2d>
 8006242:	460f      	mov	r7, r1
 8006244:	4604      	mov	r4, r0
 8006246:	460d      	mov	r5, r1
 8006248:	4640      	mov	r0, r8
 800624a:	a901      	add	r1, sp, #4
 800624c:	f7ff ff42 	bl	80060d4 <__b2d>
 8006250:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006254:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006258:	468b      	mov	fp, r1
 800625a:	eba3 0c02 	sub.w	ip, r3, r2
 800625e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006262:	1a9b      	subs	r3, r3, r2
 8006264:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006268:	2b00      	cmp	r3, #0
 800626a:	bfd5      	itete	le
 800626c:	460a      	movle	r2, r1
 800626e:	462a      	movgt	r2, r5
 8006270:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006274:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006278:	bfd8      	it	le
 800627a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800627e:	465b      	mov	r3, fp
 8006280:	4602      	mov	r2, r0
 8006282:	4639      	mov	r1, r7
 8006284:	4620      	mov	r0, r4
 8006286:	f7fa fa51 	bl	800072c <__aeabi_ddiv>
 800628a:	b003      	add	sp, #12
 800628c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006290 <__copybits>:
 8006290:	3901      	subs	r1, #1
 8006292:	b570      	push	{r4, r5, r6, lr}
 8006294:	1149      	asrs	r1, r1, #5
 8006296:	6914      	ldr	r4, [r2, #16]
 8006298:	3101      	adds	r1, #1
 800629a:	f102 0314 	add.w	r3, r2, #20
 800629e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80062a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80062a6:	1f05      	subs	r5, r0, #4
 80062a8:	42a3      	cmp	r3, r4
 80062aa:	d30c      	bcc.n	80062c6 <__copybits+0x36>
 80062ac:	1aa3      	subs	r3, r4, r2
 80062ae:	3b11      	subs	r3, #17
 80062b0:	f023 0303 	bic.w	r3, r3, #3
 80062b4:	3211      	adds	r2, #17
 80062b6:	42a2      	cmp	r2, r4
 80062b8:	bf88      	it	hi
 80062ba:	2300      	movhi	r3, #0
 80062bc:	4418      	add	r0, r3
 80062be:	2300      	movs	r3, #0
 80062c0:	4288      	cmp	r0, r1
 80062c2:	d305      	bcc.n	80062d0 <__copybits+0x40>
 80062c4:	bd70      	pop	{r4, r5, r6, pc}
 80062c6:	f853 6b04 	ldr.w	r6, [r3], #4
 80062ca:	f845 6f04 	str.w	r6, [r5, #4]!
 80062ce:	e7eb      	b.n	80062a8 <__copybits+0x18>
 80062d0:	f840 3b04 	str.w	r3, [r0], #4
 80062d4:	e7f4      	b.n	80062c0 <__copybits+0x30>

080062d6 <__any_on>:
 80062d6:	f100 0214 	add.w	r2, r0, #20
 80062da:	6900      	ldr	r0, [r0, #16]
 80062dc:	114b      	asrs	r3, r1, #5
 80062de:	4298      	cmp	r0, r3
 80062e0:	b510      	push	{r4, lr}
 80062e2:	db11      	blt.n	8006308 <__any_on+0x32>
 80062e4:	dd0a      	ble.n	80062fc <__any_on+0x26>
 80062e6:	f011 011f 	ands.w	r1, r1, #31
 80062ea:	d007      	beq.n	80062fc <__any_on+0x26>
 80062ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80062f0:	fa24 f001 	lsr.w	r0, r4, r1
 80062f4:	fa00 f101 	lsl.w	r1, r0, r1
 80062f8:	428c      	cmp	r4, r1
 80062fa:	d10b      	bne.n	8006314 <__any_on+0x3e>
 80062fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006300:	4293      	cmp	r3, r2
 8006302:	d803      	bhi.n	800630c <__any_on+0x36>
 8006304:	2000      	movs	r0, #0
 8006306:	bd10      	pop	{r4, pc}
 8006308:	4603      	mov	r3, r0
 800630a:	e7f7      	b.n	80062fc <__any_on+0x26>
 800630c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006310:	2900      	cmp	r1, #0
 8006312:	d0f5      	beq.n	8006300 <__any_on+0x2a>
 8006314:	2001      	movs	r0, #1
 8006316:	e7f6      	b.n	8006306 <__any_on+0x30>

08006318 <_calloc_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	fb02 f501 	mul.w	r5, r2, r1
 800631e:	4629      	mov	r1, r5
 8006320:	f000 f854 	bl	80063cc <_malloc_r>
 8006324:	4604      	mov	r4, r0
 8006326:	b118      	cbz	r0, 8006330 <_calloc_r+0x18>
 8006328:	462a      	mov	r2, r5
 800632a:	2100      	movs	r1, #0
 800632c:	f7fc fbbc 	bl	8002aa8 <memset>
 8006330:	4620      	mov	r0, r4
 8006332:	bd38      	pop	{r3, r4, r5, pc}

08006334 <_free_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	4605      	mov	r5, r0
 8006338:	2900      	cmp	r1, #0
 800633a:	d043      	beq.n	80063c4 <_free_r+0x90>
 800633c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006340:	1f0c      	subs	r4, r1, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	bfb8      	it	lt
 8006346:	18e4      	addlt	r4, r4, r3
 8006348:	f000 fa76 	bl	8006838 <__malloc_lock>
 800634c:	4a1e      	ldr	r2, [pc, #120]	; (80063c8 <_free_r+0x94>)
 800634e:	6813      	ldr	r3, [r2, #0]
 8006350:	4610      	mov	r0, r2
 8006352:	b933      	cbnz	r3, 8006362 <_free_r+0x2e>
 8006354:	6063      	str	r3, [r4, #4]
 8006356:	6014      	str	r4, [r2, #0]
 8006358:	4628      	mov	r0, r5
 800635a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800635e:	f000 ba71 	b.w	8006844 <__malloc_unlock>
 8006362:	42a3      	cmp	r3, r4
 8006364:	d90a      	bls.n	800637c <_free_r+0x48>
 8006366:	6821      	ldr	r1, [r4, #0]
 8006368:	1862      	adds	r2, r4, r1
 800636a:	4293      	cmp	r3, r2
 800636c:	bf01      	itttt	eq
 800636e:	681a      	ldreq	r2, [r3, #0]
 8006370:	685b      	ldreq	r3, [r3, #4]
 8006372:	1852      	addeq	r2, r2, r1
 8006374:	6022      	streq	r2, [r4, #0]
 8006376:	6063      	str	r3, [r4, #4]
 8006378:	6004      	str	r4, [r0, #0]
 800637a:	e7ed      	b.n	8006358 <_free_r+0x24>
 800637c:	461a      	mov	r2, r3
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	b10b      	cbz	r3, 8006386 <_free_r+0x52>
 8006382:	42a3      	cmp	r3, r4
 8006384:	d9fa      	bls.n	800637c <_free_r+0x48>
 8006386:	6811      	ldr	r1, [r2, #0]
 8006388:	1850      	adds	r0, r2, r1
 800638a:	42a0      	cmp	r0, r4
 800638c:	d10b      	bne.n	80063a6 <_free_r+0x72>
 800638e:	6820      	ldr	r0, [r4, #0]
 8006390:	4401      	add	r1, r0
 8006392:	1850      	adds	r0, r2, r1
 8006394:	4283      	cmp	r3, r0
 8006396:	6011      	str	r1, [r2, #0]
 8006398:	d1de      	bne.n	8006358 <_free_r+0x24>
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	4401      	add	r1, r0
 80063a0:	6011      	str	r1, [r2, #0]
 80063a2:	6053      	str	r3, [r2, #4]
 80063a4:	e7d8      	b.n	8006358 <_free_r+0x24>
 80063a6:	d902      	bls.n	80063ae <_free_r+0x7a>
 80063a8:	230c      	movs	r3, #12
 80063aa:	602b      	str	r3, [r5, #0]
 80063ac:	e7d4      	b.n	8006358 <_free_r+0x24>
 80063ae:	6820      	ldr	r0, [r4, #0]
 80063b0:	1821      	adds	r1, r4, r0
 80063b2:	428b      	cmp	r3, r1
 80063b4:	bf01      	itttt	eq
 80063b6:	6819      	ldreq	r1, [r3, #0]
 80063b8:	685b      	ldreq	r3, [r3, #4]
 80063ba:	1809      	addeq	r1, r1, r0
 80063bc:	6021      	streq	r1, [r4, #0]
 80063be:	6063      	str	r3, [r4, #4]
 80063c0:	6054      	str	r4, [r2, #4]
 80063c2:	e7c9      	b.n	8006358 <_free_r+0x24>
 80063c4:	bd38      	pop	{r3, r4, r5, pc}
 80063c6:	bf00      	nop
 80063c8:	20000204 	.word	0x20000204

080063cc <_malloc_r>:
 80063cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ce:	1ccd      	adds	r5, r1, #3
 80063d0:	f025 0503 	bic.w	r5, r5, #3
 80063d4:	3508      	adds	r5, #8
 80063d6:	2d0c      	cmp	r5, #12
 80063d8:	bf38      	it	cc
 80063da:	250c      	movcc	r5, #12
 80063dc:	2d00      	cmp	r5, #0
 80063de:	4606      	mov	r6, r0
 80063e0:	db01      	blt.n	80063e6 <_malloc_r+0x1a>
 80063e2:	42a9      	cmp	r1, r5
 80063e4:	d903      	bls.n	80063ee <_malloc_r+0x22>
 80063e6:	230c      	movs	r3, #12
 80063e8:	6033      	str	r3, [r6, #0]
 80063ea:	2000      	movs	r0, #0
 80063ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ee:	f000 fa23 	bl	8006838 <__malloc_lock>
 80063f2:	4921      	ldr	r1, [pc, #132]	; (8006478 <_malloc_r+0xac>)
 80063f4:	680a      	ldr	r2, [r1, #0]
 80063f6:	4614      	mov	r4, r2
 80063f8:	b99c      	cbnz	r4, 8006422 <_malloc_r+0x56>
 80063fa:	4f20      	ldr	r7, [pc, #128]	; (800647c <_malloc_r+0xb0>)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	b923      	cbnz	r3, 800640a <_malloc_r+0x3e>
 8006400:	4621      	mov	r1, r4
 8006402:	4630      	mov	r0, r6
 8006404:	f000 f99e 	bl	8006744 <_sbrk_r>
 8006408:	6038      	str	r0, [r7, #0]
 800640a:	4629      	mov	r1, r5
 800640c:	4630      	mov	r0, r6
 800640e:	f000 f999 	bl	8006744 <_sbrk_r>
 8006412:	1c43      	adds	r3, r0, #1
 8006414:	d123      	bne.n	800645e <_malloc_r+0x92>
 8006416:	230c      	movs	r3, #12
 8006418:	4630      	mov	r0, r6
 800641a:	6033      	str	r3, [r6, #0]
 800641c:	f000 fa12 	bl	8006844 <__malloc_unlock>
 8006420:	e7e3      	b.n	80063ea <_malloc_r+0x1e>
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	1b5b      	subs	r3, r3, r5
 8006426:	d417      	bmi.n	8006458 <_malloc_r+0x8c>
 8006428:	2b0b      	cmp	r3, #11
 800642a:	d903      	bls.n	8006434 <_malloc_r+0x68>
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	441c      	add	r4, r3
 8006430:	6025      	str	r5, [r4, #0]
 8006432:	e004      	b.n	800643e <_malloc_r+0x72>
 8006434:	6863      	ldr	r3, [r4, #4]
 8006436:	42a2      	cmp	r2, r4
 8006438:	bf0c      	ite	eq
 800643a:	600b      	streq	r3, [r1, #0]
 800643c:	6053      	strne	r3, [r2, #4]
 800643e:	4630      	mov	r0, r6
 8006440:	f000 fa00 	bl	8006844 <__malloc_unlock>
 8006444:	f104 000b 	add.w	r0, r4, #11
 8006448:	1d23      	adds	r3, r4, #4
 800644a:	f020 0007 	bic.w	r0, r0, #7
 800644e:	1ac2      	subs	r2, r0, r3
 8006450:	d0cc      	beq.n	80063ec <_malloc_r+0x20>
 8006452:	1a1b      	subs	r3, r3, r0
 8006454:	50a3      	str	r3, [r4, r2]
 8006456:	e7c9      	b.n	80063ec <_malloc_r+0x20>
 8006458:	4622      	mov	r2, r4
 800645a:	6864      	ldr	r4, [r4, #4]
 800645c:	e7cc      	b.n	80063f8 <_malloc_r+0x2c>
 800645e:	1cc4      	adds	r4, r0, #3
 8006460:	f024 0403 	bic.w	r4, r4, #3
 8006464:	42a0      	cmp	r0, r4
 8006466:	d0e3      	beq.n	8006430 <_malloc_r+0x64>
 8006468:	1a21      	subs	r1, r4, r0
 800646a:	4630      	mov	r0, r6
 800646c:	f000 f96a 	bl	8006744 <_sbrk_r>
 8006470:	3001      	adds	r0, #1
 8006472:	d1dd      	bne.n	8006430 <_malloc_r+0x64>
 8006474:	e7cf      	b.n	8006416 <_malloc_r+0x4a>
 8006476:	bf00      	nop
 8006478:	20000204 	.word	0x20000204
 800647c:	20000208 	.word	0x20000208

08006480 <__ssputs_r>:
 8006480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006484:	688e      	ldr	r6, [r1, #8]
 8006486:	4682      	mov	sl, r0
 8006488:	429e      	cmp	r6, r3
 800648a:	460c      	mov	r4, r1
 800648c:	4690      	mov	r8, r2
 800648e:	461f      	mov	r7, r3
 8006490:	d838      	bhi.n	8006504 <__ssputs_r+0x84>
 8006492:	898a      	ldrh	r2, [r1, #12]
 8006494:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006498:	d032      	beq.n	8006500 <__ssputs_r+0x80>
 800649a:	6825      	ldr	r5, [r4, #0]
 800649c:	6909      	ldr	r1, [r1, #16]
 800649e:	3301      	adds	r3, #1
 80064a0:	eba5 0901 	sub.w	r9, r5, r1
 80064a4:	6965      	ldr	r5, [r4, #20]
 80064a6:	444b      	add	r3, r9
 80064a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064b0:	106d      	asrs	r5, r5, #1
 80064b2:	429d      	cmp	r5, r3
 80064b4:	bf38      	it	cc
 80064b6:	461d      	movcc	r5, r3
 80064b8:	0553      	lsls	r3, r2, #21
 80064ba:	d531      	bpl.n	8006520 <__ssputs_r+0xa0>
 80064bc:	4629      	mov	r1, r5
 80064be:	f7ff ff85 	bl	80063cc <_malloc_r>
 80064c2:	4606      	mov	r6, r0
 80064c4:	b950      	cbnz	r0, 80064dc <__ssputs_r+0x5c>
 80064c6:	230c      	movs	r3, #12
 80064c8:	f04f 30ff 	mov.w	r0, #4294967295
 80064cc:	f8ca 3000 	str.w	r3, [sl]
 80064d0:	89a3      	ldrh	r3, [r4, #12]
 80064d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d6:	81a3      	strh	r3, [r4, #12]
 80064d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064dc:	464a      	mov	r2, r9
 80064de:	6921      	ldr	r1, [r4, #16]
 80064e0:	f7fc fad4 	bl	8002a8c <memcpy>
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ee:	81a3      	strh	r3, [r4, #12]
 80064f0:	6126      	str	r6, [r4, #16]
 80064f2:	444e      	add	r6, r9
 80064f4:	6026      	str	r6, [r4, #0]
 80064f6:	463e      	mov	r6, r7
 80064f8:	6165      	str	r5, [r4, #20]
 80064fa:	eba5 0509 	sub.w	r5, r5, r9
 80064fe:	60a5      	str	r5, [r4, #8]
 8006500:	42be      	cmp	r6, r7
 8006502:	d900      	bls.n	8006506 <__ssputs_r+0x86>
 8006504:	463e      	mov	r6, r7
 8006506:	4632      	mov	r2, r6
 8006508:	4641      	mov	r1, r8
 800650a:	6820      	ldr	r0, [r4, #0]
 800650c:	f000 f97a 	bl	8006804 <memmove>
 8006510:	68a3      	ldr	r3, [r4, #8]
 8006512:	6822      	ldr	r2, [r4, #0]
 8006514:	1b9b      	subs	r3, r3, r6
 8006516:	4432      	add	r2, r6
 8006518:	2000      	movs	r0, #0
 800651a:	60a3      	str	r3, [r4, #8]
 800651c:	6022      	str	r2, [r4, #0]
 800651e:	e7db      	b.n	80064d8 <__ssputs_r+0x58>
 8006520:	462a      	mov	r2, r5
 8006522:	f000 f995 	bl	8006850 <_realloc_r>
 8006526:	4606      	mov	r6, r0
 8006528:	2800      	cmp	r0, #0
 800652a:	d1e1      	bne.n	80064f0 <__ssputs_r+0x70>
 800652c:	4650      	mov	r0, sl
 800652e:	6921      	ldr	r1, [r4, #16]
 8006530:	f7ff ff00 	bl	8006334 <_free_r>
 8006534:	e7c7      	b.n	80064c6 <__ssputs_r+0x46>
	...

08006538 <_svfiprintf_r>:
 8006538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653c:	4698      	mov	r8, r3
 800653e:	898b      	ldrh	r3, [r1, #12]
 8006540:	4607      	mov	r7, r0
 8006542:	061b      	lsls	r3, r3, #24
 8006544:	460d      	mov	r5, r1
 8006546:	4614      	mov	r4, r2
 8006548:	b09d      	sub	sp, #116	; 0x74
 800654a:	d50e      	bpl.n	800656a <_svfiprintf_r+0x32>
 800654c:	690b      	ldr	r3, [r1, #16]
 800654e:	b963      	cbnz	r3, 800656a <_svfiprintf_r+0x32>
 8006550:	2140      	movs	r1, #64	; 0x40
 8006552:	f7ff ff3b 	bl	80063cc <_malloc_r>
 8006556:	6028      	str	r0, [r5, #0]
 8006558:	6128      	str	r0, [r5, #16]
 800655a:	b920      	cbnz	r0, 8006566 <_svfiprintf_r+0x2e>
 800655c:	230c      	movs	r3, #12
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	f04f 30ff 	mov.w	r0, #4294967295
 8006564:	e0d1      	b.n	800670a <_svfiprintf_r+0x1d2>
 8006566:	2340      	movs	r3, #64	; 0x40
 8006568:	616b      	str	r3, [r5, #20]
 800656a:	2300      	movs	r3, #0
 800656c:	9309      	str	r3, [sp, #36]	; 0x24
 800656e:	2320      	movs	r3, #32
 8006570:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006574:	2330      	movs	r3, #48	; 0x30
 8006576:	f04f 0901 	mov.w	r9, #1
 800657a:	f8cd 800c 	str.w	r8, [sp, #12]
 800657e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006724 <_svfiprintf_r+0x1ec>
 8006582:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006586:	4623      	mov	r3, r4
 8006588:	469a      	mov	sl, r3
 800658a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800658e:	b10a      	cbz	r2, 8006594 <_svfiprintf_r+0x5c>
 8006590:	2a25      	cmp	r2, #37	; 0x25
 8006592:	d1f9      	bne.n	8006588 <_svfiprintf_r+0x50>
 8006594:	ebba 0b04 	subs.w	fp, sl, r4
 8006598:	d00b      	beq.n	80065b2 <_svfiprintf_r+0x7a>
 800659a:	465b      	mov	r3, fp
 800659c:	4622      	mov	r2, r4
 800659e:	4629      	mov	r1, r5
 80065a0:	4638      	mov	r0, r7
 80065a2:	f7ff ff6d 	bl	8006480 <__ssputs_r>
 80065a6:	3001      	adds	r0, #1
 80065a8:	f000 80aa 	beq.w	8006700 <_svfiprintf_r+0x1c8>
 80065ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065ae:	445a      	add	r2, fp
 80065b0:	9209      	str	r2, [sp, #36]	; 0x24
 80065b2:	f89a 3000 	ldrb.w	r3, [sl]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 80a2 	beq.w	8006700 <_svfiprintf_r+0x1c8>
 80065bc:	2300      	movs	r3, #0
 80065be:	f04f 32ff 	mov.w	r2, #4294967295
 80065c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065c6:	f10a 0a01 	add.w	sl, sl, #1
 80065ca:	9304      	str	r3, [sp, #16]
 80065cc:	9307      	str	r3, [sp, #28]
 80065ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065d2:	931a      	str	r3, [sp, #104]	; 0x68
 80065d4:	4654      	mov	r4, sl
 80065d6:	2205      	movs	r2, #5
 80065d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065dc:	4851      	ldr	r0, [pc, #324]	; (8006724 <_svfiprintf_r+0x1ec>)
 80065de:	f7ff f9d5 	bl	800598c <memchr>
 80065e2:	9a04      	ldr	r2, [sp, #16]
 80065e4:	b9d8      	cbnz	r0, 800661e <_svfiprintf_r+0xe6>
 80065e6:	06d0      	lsls	r0, r2, #27
 80065e8:	bf44      	itt	mi
 80065ea:	2320      	movmi	r3, #32
 80065ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065f0:	0711      	lsls	r1, r2, #28
 80065f2:	bf44      	itt	mi
 80065f4:	232b      	movmi	r3, #43	; 0x2b
 80065f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065fa:	f89a 3000 	ldrb.w	r3, [sl]
 80065fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006600:	d015      	beq.n	800662e <_svfiprintf_r+0xf6>
 8006602:	4654      	mov	r4, sl
 8006604:	2000      	movs	r0, #0
 8006606:	f04f 0c0a 	mov.w	ip, #10
 800660a:	9a07      	ldr	r2, [sp, #28]
 800660c:	4621      	mov	r1, r4
 800660e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006612:	3b30      	subs	r3, #48	; 0x30
 8006614:	2b09      	cmp	r3, #9
 8006616:	d94e      	bls.n	80066b6 <_svfiprintf_r+0x17e>
 8006618:	b1b0      	cbz	r0, 8006648 <_svfiprintf_r+0x110>
 800661a:	9207      	str	r2, [sp, #28]
 800661c:	e014      	b.n	8006648 <_svfiprintf_r+0x110>
 800661e:	eba0 0308 	sub.w	r3, r0, r8
 8006622:	fa09 f303 	lsl.w	r3, r9, r3
 8006626:	4313      	orrs	r3, r2
 8006628:	46a2      	mov	sl, r4
 800662a:	9304      	str	r3, [sp, #16]
 800662c:	e7d2      	b.n	80065d4 <_svfiprintf_r+0x9c>
 800662e:	9b03      	ldr	r3, [sp, #12]
 8006630:	1d19      	adds	r1, r3, #4
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	9103      	str	r1, [sp, #12]
 8006636:	2b00      	cmp	r3, #0
 8006638:	bfbb      	ittet	lt
 800663a:	425b      	neglt	r3, r3
 800663c:	f042 0202 	orrlt.w	r2, r2, #2
 8006640:	9307      	strge	r3, [sp, #28]
 8006642:	9307      	strlt	r3, [sp, #28]
 8006644:	bfb8      	it	lt
 8006646:	9204      	strlt	r2, [sp, #16]
 8006648:	7823      	ldrb	r3, [r4, #0]
 800664a:	2b2e      	cmp	r3, #46	; 0x2e
 800664c:	d10c      	bne.n	8006668 <_svfiprintf_r+0x130>
 800664e:	7863      	ldrb	r3, [r4, #1]
 8006650:	2b2a      	cmp	r3, #42	; 0x2a
 8006652:	d135      	bne.n	80066c0 <_svfiprintf_r+0x188>
 8006654:	9b03      	ldr	r3, [sp, #12]
 8006656:	3402      	adds	r4, #2
 8006658:	1d1a      	adds	r2, r3, #4
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	9203      	str	r2, [sp, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	bfb8      	it	lt
 8006662:	f04f 33ff 	movlt.w	r3, #4294967295
 8006666:	9305      	str	r3, [sp, #20]
 8006668:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006734 <_svfiprintf_r+0x1fc>
 800666c:	2203      	movs	r2, #3
 800666e:	4650      	mov	r0, sl
 8006670:	7821      	ldrb	r1, [r4, #0]
 8006672:	f7ff f98b 	bl	800598c <memchr>
 8006676:	b140      	cbz	r0, 800668a <_svfiprintf_r+0x152>
 8006678:	2340      	movs	r3, #64	; 0x40
 800667a:	eba0 000a 	sub.w	r0, r0, sl
 800667e:	fa03 f000 	lsl.w	r0, r3, r0
 8006682:	9b04      	ldr	r3, [sp, #16]
 8006684:	3401      	adds	r4, #1
 8006686:	4303      	orrs	r3, r0
 8006688:	9304      	str	r3, [sp, #16]
 800668a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800668e:	2206      	movs	r2, #6
 8006690:	4825      	ldr	r0, [pc, #148]	; (8006728 <_svfiprintf_r+0x1f0>)
 8006692:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006696:	f7ff f979 	bl	800598c <memchr>
 800669a:	2800      	cmp	r0, #0
 800669c:	d038      	beq.n	8006710 <_svfiprintf_r+0x1d8>
 800669e:	4b23      	ldr	r3, [pc, #140]	; (800672c <_svfiprintf_r+0x1f4>)
 80066a0:	bb1b      	cbnz	r3, 80066ea <_svfiprintf_r+0x1b2>
 80066a2:	9b03      	ldr	r3, [sp, #12]
 80066a4:	3307      	adds	r3, #7
 80066a6:	f023 0307 	bic.w	r3, r3, #7
 80066aa:	3308      	adds	r3, #8
 80066ac:	9303      	str	r3, [sp, #12]
 80066ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b0:	4433      	add	r3, r6
 80066b2:	9309      	str	r3, [sp, #36]	; 0x24
 80066b4:	e767      	b.n	8006586 <_svfiprintf_r+0x4e>
 80066b6:	460c      	mov	r4, r1
 80066b8:	2001      	movs	r0, #1
 80066ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80066be:	e7a5      	b.n	800660c <_svfiprintf_r+0xd4>
 80066c0:	2300      	movs	r3, #0
 80066c2:	f04f 0c0a 	mov.w	ip, #10
 80066c6:	4619      	mov	r1, r3
 80066c8:	3401      	adds	r4, #1
 80066ca:	9305      	str	r3, [sp, #20]
 80066cc:	4620      	mov	r0, r4
 80066ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066d2:	3a30      	subs	r2, #48	; 0x30
 80066d4:	2a09      	cmp	r2, #9
 80066d6:	d903      	bls.n	80066e0 <_svfiprintf_r+0x1a8>
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0c5      	beq.n	8006668 <_svfiprintf_r+0x130>
 80066dc:	9105      	str	r1, [sp, #20]
 80066de:	e7c3      	b.n	8006668 <_svfiprintf_r+0x130>
 80066e0:	4604      	mov	r4, r0
 80066e2:	2301      	movs	r3, #1
 80066e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80066e8:	e7f0      	b.n	80066cc <_svfiprintf_r+0x194>
 80066ea:	ab03      	add	r3, sp, #12
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	462a      	mov	r2, r5
 80066f0:	4638      	mov	r0, r7
 80066f2:	4b0f      	ldr	r3, [pc, #60]	; (8006730 <_svfiprintf_r+0x1f8>)
 80066f4:	a904      	add	r1, sp, #16
 80066f6:	f7fc fa7d 	bl	8002bf4 <_printf_float>
 80066fa:	1c42      	adds	r2, r0, #1
 80066fc:	4606      	mov	r6, r0
 80066fe:	d1d6      	bne.n	80066ae <_svfiprintf_r+0x176>
 8006700:	89ab      	ldrh	r3, [r5, #12]
 8006702:	065b      	lsls	r3, r3, #25
 8006704:	f53f af2c 	bmi.w	8006560 <_svfiprintf_r+0x28>
 8006708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800670a:	b01d      	add	sp, #116	; 0x74
 800670c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006710:	ab03      	add	r3, sp, #12
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	462a      	mov	r2, r5
 8006716:	4638      	mov	r0, r7
 8006718:	4b05      	ldr	r3, [pc, #20]	; (8006730 <_svfiprintf_r+0x1f8>)
 800671a:	a904      	add	r1, sp, #16
 800671c:	f7fc fd06 	bl	800312c <_printf_i>
 8006720:	e7eb      	b.n	80066fa <_svfiprintf_r+0x1c2>
 8006722:	bf00      	nop
 8006724:	08007754 	.word	0x08007754
 8006728:	0800775e 	.word	0x0800775e
 800672c:	08002bf5 	.word	0x08002bf5
 8006730:	08006481 	.word	0x08006481
 8006734:	0800775a 	.word	0x0800775a

08006738 <nan>:
 8006738:	2000      	movs	r0, #0
 800673a:	4901      	ldr	r1, [pc, #4]	; (8006740 <nan+0x8>)
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	7ff80000 	.word	0x7ff80000

08006744 <_sbrk_r>:
 8006744:	b538      	push	{r3, r4, r5, lr}
 8006746:	2300      	movs	r3, #0
 8006748:	4d05      	ldr	r5, [pc, #20]	; (8006760 <_sbrk_r+0x1c>)
 800674a:	4604      	mov	r4, r0
 800674c:	4608      	mov	r0, r1
 800674e:	602b      	str	r3, [r5, #0]
 8006750:	f7fa fd4a 	bl	80011e8 <_sbrk>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d102      	bne.n	800675e <_sbrk_r+0x1a>
 8006758:	682b      	ldr	r3, [r5, #0]
 800675a:	b103      	cbz	r3, 800675e <_sbrk_r+0x1a>
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	bd38      	pop	{r3, r4, r5, pc}
 8006760:	200003dc 	.word	0x200003dc

08006764 <strncmp>:
 8006764:	b510      	push	{r4, lr}
 8006766:	b16a      	cbz	r2, 8006784 <strncmp+0x20>
 8006768:	3901      	subs	r1, #1
 800676a:	1884      	adds	r4, r0, r2
 800676c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006770:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006774:	4293      	cmp	r3, r2
 8006776:	d103      	bne.n	8006780 <strncmp+0x1c>
 8006778:	42a0      	cmp	r0, r4
 800677a:	d001      	beq.n	8006780 <strncmp+0x1c>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1f5      	bne.n	800676c <strncmp+0x8>
 8006780:	1a98      	subs	r0, r3, r2
 8006782:	bd10      	pop	{r4, pc}
 8006784:	4610      	mov	r0, r2
 8006786:	e7fc      	b.n	8006782 <strncmp+0x1e>

08006788 <__ascii_wctomb>:
 8006788:	4603      	mov	r3, r0
 800678a:	4608      	mov	r0, r1
 800678c:	b141      	cbz	r1, 80067a0 <__ascii_wctomb+0x18>
 800678e:	2aff      	cmp	r2, #255	; 0xff
 8006790:	d904      	bls.n	800679c <__ascii_wctomb+0x14>
 8006792:	228a      	movs	r2, #138	; 0x8a
 8006794:	f04f 30ff 	mov.w	r0, #4294967295
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	4770      	bx	lr
 800679c:	2001      	movs	r0, #1
 800679e:	700a      	strb	r2, [r1, #0]
 80067a0:	4770      	bx	lr
	...

080067a4 <__assert_func>:
 80067a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067a6:	4614      	mov	r4, r2
 80067a8:	461a      	mov	r2, r3
 80067aa:	4b09      	ldr	r3, [pc, #36]	; (80067d0 <__assert_func+0x2c>)
 80067ac:	4605      	mov	r5, r0
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68d8      	ldr	r0, [r3, #12]
 80067b2:	b14c      	cbz	r4, 80067c8 <__assert_func+0x24>
 80067b4:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <__assert_func+0x30>)
 80067b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80067ba:	9100      	str	r1, [sp, #0]
 80067bc:	462b      	mov	r3, r5
 80067be:	4906      	ldr	r1, [pc, #24]	; (80067d8 <__assert_func+0x34>)
 80067c0:	f000 f80e 	bl	80067e0 <fiprintf>
 80067c4:	f000 fa82 	bl	8006ccc <abort>
 80067c8:	4b04      	ldr	r3, [pc, #16]	; (80067dc <__assert_func+0x38>)
 80067ca:	461c      	mov	r4, r3
 80067cc:	e7f3      	b.n	80067b6 <__assert_func+0x12>
 80067ce:	bf00      	nop
 80067d0:	2000000c 	.word	0x2000000c
 80067d4:	08007765 	.word	0x08007765
 80067d8:	08007772 	.word	0x08007772
 80067dc:	080077a0 	.word	0x080077a0

080067e0 <fiprintf>:
 80067e0:	b40e      	push	{r1, r2, r3}
 80067e2:	b503      	push	{r0, r1, lr}
 80067e4:	4601      	mov	r1, r0
 80067e6:	ab03      	add	r3, sp, #12
 80067e8:	4805      	ldr	r0, [pc, #20]	; (8006800 <fiprintf+0x20>)
 80067ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ee:	6800      	ldr	r0, [r0, #0]
 80067f0:	9301      	str	r3, [sp, #4]
 80067f2:	f000 f87b 	bl	80068ec <_vfiprintf_r>
 80067f6:	b002      	add	sp, #8
 80067f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80067fc:	b003      	add	sp, #12
 80067fe:	4770      	bx	lr
 8006800:	2000000c 	.word	0x2000000c

08006804 <memmove>:
 8006804:	4288      	cmp	r0, r1
 8006806:	b510      	push	{r4, lr}
 8006808:	eb01 0402 	add.w	r4, r1, r2
 800680c:	d902      	bls.n	8006814 <memmove+0x10>
 800680e:	4284      	cmp	r4, r0
 8006810:	4623      	mov	r3, r4
 8006812:	d807      	bhi.n	8006824 <memmove+0x20>
 8006814:	1e43      	subs	r3, r0, #1
 8006816:	42a1      	cmp	r1, r4
 8006818:	d008      	beq.n	800682c <memmove+0x28>
 800681a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800681e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006822:	e7f8      	b.n	8006816 <memmove+0x12>
 8006824:	4601      	mov	r1, r0
 8006826:	4402      	add	r2, r0
 8006828:	428a      	cmp	r2, r1
 800682a:	d100      	bne.n	800682e <memmove+0x2a>
 800682c:	bd10      	pop	{r4, pc}
 800682e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006836:	e7f7      	b.n	8006828 <memmove+0x24>

08006838 <__malloc_lock>:
 8006838:	4801      	ldr	r0, [pc, #4]	; (8006840 <__malloc_lock+0x8>)
 800683a:	f000 bc07 	b.w	800704c <__retarget_lock_acquire_recursive>
 800683e:	bf00      	nop
 8006840:	200003e4 	.word	0x200003e4

08006844 <__malloc_unlock>:
 8006844:	4801      	ldr	r0, [pc, #4]	; (800684c <__malloc_unlock+0x8>)
 8006846:	f000 bc02 	b.w	800704e <__retarget_lock_release_recursive>
 800684a:	bf00      	nop
 800684c:	200003e4 	.word	0x200003e4

08006850 <_realloc_r>:
 8006850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006852:	4607      	mov	r7, r0
 8006854:	4614      	mov	r4, r2
 8006856:	460e      	mov	r6, r1
 8006858:	b921      	cbnz	r1, 8006864 <_realloc_r+0x14>
 800685a:	4611      	mov	r1, r2
 800685c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006860:	f7ff bdb4 	b.w	80063cc <_malloc_r>
 8006864:	b922      	cbnz	r2, 8006870 <_realloc_r+0x20>
 8006866:	f7ff fd65 	bl	8006334 <_free_r>
 800686a:	4625      	mov	r5, r4
 800686c:	4628      	mov	r0, r5
 800686e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006870:	f000 fc52 	bl	8007118 <_malloc_usable_size_r>
 8006874:	42a0      	cmp	r0, r4
 8006876:	d20f      	bcs.n	8006898 <_realloc_r+0x48>
 8006878:	4621      	mov	r1, r4
 800687a:	4638      	mov	r0, r7
 800687c:	f7ff fda6 	bl	80063cc <_malloc_r>
 8006880:	4605      	mov	r5, r0
 8006882:	2800      	cmp	r0, #0
 8006884:	d0f2      	beq.n	800686c <_realloc_r+0x1c>
 8006886:	4631      	mov	r1, r6
 8006888:	4622      	mov	r2, r4
 800688a:	f7fc f8ff 	bl	8002a8c <memcpy>
 800688e:	4631      	mov	r1, r6
 8006890:	4638      	mov	r0, r7
 8006892:	f7ff fd4f 	bl	8006334 <_free_r>
 8006896:	e7e9      	b.n	800686c <_realloc_r+0x1c>
 8006898:	4635      	mov	r5, r6
 800689a:	e7e7      	b.n	800686c <_realloc_r+0x1c>

0800689c <__sfputc_r>:
 800689c:	6893      	ldr	r3, [r2, #8]
 800689e:	b410      	push	{r4}
 80068a0:	3b01      	subs	r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	6093      	str	r3, [r2, #8]
 80068a6:	da07      	bge.n	80068b8 <__sfputc_r+0x1c>
 80068a8:	6994      	ldr	r4, [r2, #24]
 80068aa:	42a3      	cmp	r3, r4
 80068ac:	db01      	blt.n	80068b2 <__sfputc_r+0x16>
 80068ae:	290a      	cmp	r1, #10
 80068b0:	d102      	bne.n	80068b8 <__sfputc_r+0x1c>
 80068b2:	bc10      	pop	{r4}
 80068b4:	f000 b94a 	b.w	8006b4c <__swbuf_r>
 80068b8:	6813      	ldr	r3, [r2, #0]
 80068ba:	1c58      	adds	r0, r3, #1
 80068bc:	6010      	str	r0, [r2, #0]
 80068be:	7019      	strb	r1, [r3, #0]
 80068c0:	4608      	mov	r0, r1
 80068c2:	bc10      	pop	{r4}
 80068c4:	4770      	bx	lr

080068c6 <__sfputs_r>:
 80068c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c8:	4606      	mov	r6, r0
 80068ca:	460f      	mov	r7, r1
 80068cc:	4614      	mov	r4, r2
 80068ce:	18d5      	adds	r5, r2, r3
 80068d0:	42ac      	cmp	r4, r5
 80068d2:	d101      	bne.n	80068d8 <__sfputs_r+0x12>
 80068d4:	2000      	movs	r0, #0
 80068d6:	e007      	b.n	80068e8 <__sfputs_r+0x22>
 80068d8:	463a      	mov	r2, r7
 80068da:	4630      	mov	r0, r6
 80068dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068e0:	f7ff ffdc 	bl	800689c <__sfputc_r>
 80068e4:	1c43      	adds	r3, r0, #1
 80068e6:	d1f3      	bne.n	80068d0 <__sfputs_r+0xa>
 80068e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068ec <_vfiprintf_r>:
 80068ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f0:	460d      	mov	r5, r1
 80068f2:	4614      	mov	r4, r2
 80068f4:	4698      	mov	r8, r3
 80068f6:	4606      	mov	r6, r0
 80068f8:	b09d      	sub	sp, #116	; 0x74
 80068fa:	b118      	cbz	r0, 8006904 <_vfiprintf_r+0x18>
 80068fc:	6983      	ldr	r3, [r0, #24]
 80068fe:	b90b      	cbnz	r3, 8006904 <_vfiprintf_r+0x18>
 8006900:	f000 fb06 	bl	8006f10 <__sinit>
 8006904:	4b89      	ldr	r3, [pc, #548]	; (8006b2c <_vfiprintf_r+0x240>)
 8006906:	429d      	cmp	r5, r3
 8006908:	d11b      	bne.n	8006942 <_vfiprintf_r+0x56>
 800690a:	6875      	ldr	r5, [r6, #4]
 800690c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800690e:	07d9      	lsls	r1, r3, #31
 8006910:	d405      	bmi.n	800691e <_vfiprintf_r+0x32>
 8006912:	89ab      	ldrh	r3, [r5, #12]
 8006914:	059a      	lsls	r2, r3, #22
 8006916:	d402      	bmi.n	800691e <_vfiprintf_r+0x32>
 8006918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800691a:	f000 fb97 	bl	800704c <__retarget_lock_acquire_recursive>
 800691e:	89ab      	ldrh	r3, [r5, #12]
 8006920:	071b      	lsls	r3, r3, #28
 8006922:	d501      	bpl.n	8006928 <_vfiprintf_r+0x3c>
 8006924:	692b      	ldr	r3, [r5, #16]
 8006926:	b9eb      	cbnz	r3, 8006964 <_vfiprintf_r+0x78>
 8006928:	4629      	mov	r1, r5
 800692a:	4630      	mov	r0, r6
 800692c:	f000 f960 	bl	8006bf0 <__swsetup_r>
 8006930:	b1c0      	cbz	r0, 8006964 <_vfiprintf_r+0x78>
 8006932:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006934:	07dc      	lsls	r4, r3, #31
 8006936:	d50e      	bpl.n	8006956 <_vfiprintf_r+0x6a>
 8006938:	f04f 30ff 	mov.w	r0, #4294967295
 800693c:	b01d      	add	sp, #116	; 0x74
 800693e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006942:	4b7b      	ldr	r3, [pc, #492]	; (8006b30 <_vfiprintf_r+0x244>)
 8006944:	429d      	cmp	r5, r3
 8006946:	d101      	bne.n	800694c <_vfiprintf_r+0x60>
 8006948:	68b5      	ldr	r5, [r6, #8]
 800694a:	e7df      	b.n	800690c <_vfiprintf_r+0x20>
 800694c:	4b79      	ldr	r3, [pc, #484]	; (8006b34 <_vfiprintf_r+0x248>)
 800694e:	429d      	cmp	r5, r3
 8006950:	bf08      	it	eq
 8006952:	68f5      	ldreq	r5, [r6, #12]
 8006954:	e7da      	b.n	800690c <_vfiprintf_r+0x20>
 8006956:	89ab      	ldrh	r3, [r5, #12]
 8006958:	0598      	lsls	r0, r3, #22
 800695a:	d4ed      	bmi.n	8006938 <_vfiprintf_r+0x4c>
 800695c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800695e:	f000 fb76 	bl	800704e <__retarget_lock_release_recursive>
 8006962:	e7e9      	b.n	8006938 <_vfiprintf_r+0x4c>
 8006964:	2300      	movs	r3, #0
 8006966:	9309      	str	r3, [sp, #36]	; 0x24
 8006968:	2320      	movs	r3, #32
 800696a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800696e:	2330      	movs	r3, #48	; 0x30
 8006970:	f04f 0901 	mov.w	r9, #1
 8006974:	f8cd 800c 	str.w	r8, [sp, #12]
 8006978:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006b38 <_vfiprintf_r+0x24c>
 800697c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006980:	4623      	mov	r3, r4
 8006982:	469a      	mov	sl, r3
 8006984:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006988:	b10a      	cbz	r2, 800698e <_vfiprintf_r+0xa2>
 800698a:	2a25      	cmp	r2, #37	; 0x25
 800698c:	d1f9      	bne.n	8006982 <_vfiprintf_r+0x96>
 800698e:	ebba 0b04 	subs.w	fp, sl, r4
 8006992:	d00b      	beq.n	80069ac <_vfiprintf_r+0xc0>
 8006994:	465b      	mov	r3, fp
 8006996:	4622      	mov	r2, r4
 8006998:	4629      	mov	r1, r5
 800699a:	4630      	mov	r0, r6
 800699c:	f7ff ff93 	bl	80068c6 <__sfputs_r>
 80069a0:	3001      	adds	r0, #1
 80069a2:	f000 80aa 	beq.w	8006afa <_vfiprintf_r+0x20e>
 80069a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069a8:	445a      	add	r2, fp
 80069aa:	9209      	str	r2, [sp, #36]	; 0x24
 80069ac:	f89a 3000 	ldrb.w	r3, [sl]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 80a2 	beq.w	8006afa <_vfiprintf_r+0x20e>
 80069b6:	2300      	movs	r3, #0
 80069b8:	f04f 32ff 	mov.w	r2, #4294967295
 80069bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069c0:	f10a 0a01 	add.w	sl, sl, #1
 80069c4:	9304      	str	r3, [sp, #16]
 80069c6:	9307      	str	r3, [sp, #28]
 80069c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069cc:	931a      	str	r3, [sp, #104]	; 0x68
 80069ce:	4654      	mov	r4, sl
 80069d0:	2205      	movs	r2, #5
 80069d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d6:	4858      	ldr	r0, [pc, #352]	; (8006b38 <_vfiprintf_r+0x24c>)
 80069d8:	f7fe ffd8 	bl	800598c <memchr>
 80069dc:	9a04      	ldr	r2, [sp, #16]
 80069de:	b9d8      	cbnz	r0, 8006a18 <_vfiprintf_r+0x12c>
 80069e0:	06d1      	lsls	r1, r2, #27
 80069e2:	bf44      	itt	mi
 80069e4:	2320      	movmi	r3, #32
 80069e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069ea:	0713      	lsls	r3, r2, #28
 80069ec:	bf44      	itt	mi
 80069ee:	232b      	movmi	r3, #43	; 0x2b
 80069f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069f4:	f89a 3000 	ldrb.w	r3, [sl]
 80069f8:	2b2a      	cmp	r3, #42	; 0x2a
 80069fa:	d015      	beq.n	8006a28 <_vfiprintf_r+0x13c>
 80069fc:	4654      	mov	r4, sl
 80069fe:	2000      	movs	r0, #0
 8006a00:	f04f 0c0a 	mov.w	ip, #10
 8006a04:	9a07      	ldr	r2, [sp, #28]
 8006a06:	4621      	mov	r1, r4
 8006a08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a0c:	3b30      	subs	r3, #48	; 0x30
 8006a0e:	2b09      	cmp	r3, #9
 8006a10:	d94e      	bls.n	8006ab0 <_vfiprintf_r+0x1c4>
 8006a12:	b1b0      	cbz	r0, 8006a42 <_vfiprintf_r+0x156>
 8006a14:	9207      	str	r2, [sp, #28]
 8006a16:	e014      	b.n	8006a42 <_vfiprintf_r+0x156>
 8006a18:	eba0 0308 	sub.w	r3, r0, r8
 8006a1c:	fa09 f303 	lsl.w	r3, r9, r3
 8006a20:	4313      	orrs	r3, r2
 8006a22:	46a2      	mov	sl, r4
 8006a24:	9304      	str	r3, [sp, #16]
 8006a26:	e7d2      	b.n	80069ce <_vfiprintf_r+0xe2>
 8006a28:	9b03      	ldr	r3, [sp, #12]
 8006a2a:	1d19      	adds	r1, r3, #4
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	9103      	str	r1, [sp, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	bfbb      	ittet	lt
 8006a34:	425b      	neglt	r3, r3
 8006a36:	f042 0202 	orrlt.w	r2, r2, #2
 8006a3a:	9307      	strge	r3, [sp, #28]
 8006a3c:	9307      	strlt	r3, [sp, #28]
 8006a3e:	bfb8      	it	lt
 8006a40:	9204      	strlt	r2, [sp, #16]
 8006a42:	7823      	ldrb	r3, [r4, #0]
 8006a44:	2b2e      	cmp	r3, #46	; 0x2e
 8006a46:	d10c      	bne.n	8006a62 <_vfiprintf_r+0x176>
 8006a48:	7863      	ldrb	r3, [r4, #1]
 8006a4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006a4c:	d135      	bne.n	8006aba <_vfiprintf_r+0x1ce>
 8006a4e:	9b03      	ldr	r3, [sp, #12]
 8006a50:	3402      	adds	r4, #2
 8006a52:	1d1a      	adds	r2, r3, #4
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	9203      	str	r2, [sp, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	bfb8      	it	lt
 8006a5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a60:	9305      	str	r3, [sp, #20]
 8006a62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b48 <_vfiprintf_r+0x25c>
 8006a66:	2203      	movs	r2, #3
 8006a68:	4650      	mov	r0, sl
 8006a6a:	7821      	ldrb	r1, [r4, #0]
 8006a6c:	f7fe ff8e 	bl	800598c <memchr>
 8006a70:	b140      	cbz	r0, 8006a84 <_vfiprintf_r+0x198>
 8006a72:	2340      	movs	r3, #64	; 0x40
 8006a74:	eba0 000a 	sub.w	r0, r0, sl
 8006a78:	fa03 f000 	lsl.w	r0, r3, r0
 8006a7c:	9b04      	ldr	r3, [sp, #16]
 8006a7e:	3401      	adds	r4, #1
 8006a80:	4303      	orrs	r3, r0
 8006a82:	9304      	str	r3, [sp, #16]
 8006a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a88:	2206      	movs	r2, #6
 8006a8a:	482c      	ldr	r0, [pc, #176]	; (8006b3c <_vfiprintf_r+0x250>)
 8006a8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a90:	f7fe ff7c 	bl	800598c <memchr>
 8006a94:	2800      	cmp	r0, #0
 8006a96:	d03f      	beq.n	8006b18 <_vfiprintf_r+0x22c>
 8006a98:	4b29      	ldr	r3, [pc, #164]	; (8006b40 <_vfiprintf_r+0x254>)
 8006a9a:	bb1b      	cbnz	r3, 8006ae4 <_vfiprintf_r+0x1f8>
 8006a9c:	9b03      	ldr	r3, [sp, #12]
 8006a9e:	3307      	adds	r3, #7
 8006aa0:	f023 0307 	bic.w	r3, r3, #7
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	9303      	str	r3, [sp, #12]
 8006aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aaa:	443b      	add	r3, r7
 8006aac:	9309      	str	r3, [sp, #36]	; 0x24
 8006aae:	e767      	b.n	8006980 <_vfiprintf_r+0x94>
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	2001      	movs	r0, #1
 8006ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ab8:	e7a5      	b.n	8006a06 <_vfiprintf_r+0x11a>
 8006aba:	2300      	movs	r3, #0
 8006abc:	f04f 0c0a 	mov.w	ip, #10
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	3401      	adds	r4, #1
 8006ac4:	9305      	str	r3, [sp, #20]
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006acc:	3a30      	subs	r2, #48	; 0x30
 8006ace:	2a09      	cmp	r2, #9
 8006ad0:	d903      	bls.n	8006ada <_vfiprintf_r+0x1ee>
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0c5      	beq.n	8006a62 <_vfiprintf_r+0x176>
 8006ad6:	9105      	str	r1, [sp, #20]
 8006ad8:	e7c3      	b.n	8006a62 <_vfiprintf_r+0x176>
 8006ada:	4604      	mov	r4, r0
 8006adc:	2301      	movs	r3, #1
 8006ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ae2:	e7f0      	b.n	8006ac6 <_vfiprintf_r+0x1da>
 8006ae4:	ab03      	add	r3, sp, #12
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	462a      	mov	r2, r5
 8006aea:	4630      	mov	r0, r6
 8006aec:	4b15      	ldr	r3, [pc, #84]	; (8006b44 <_vfiprintf_r+0x258>)
 8006aee:	a904      	add	r1, sp, #16
 8006af0:	f7fc f880 	bl	8002bf4 <_printf_float>
 8006af4:	4607      	mov	r7, r0
 8006af6:	1c78      	adds	r0, r7, #1
 8006af8:	d1d6      	bne.n	8006aa8 <_vfiprintf_r+0x1bc>
 8006afa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006afc:	07d9      	lsls	r1, r3, #31
 8006afe:	d405      	bmi.n	8006b0c <_vfiprintf_r+0x220>
 8006b00:	89ab      	ldrh	r3, [r5, #12]
 8006b02:	059a      	lsls	r2, r3, #22
 8006b04:	d402      	bmi.n	8006b0c <_vfiprintf_r+0x220>
 8006b06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b08:	f000 faa1 	bl	800704e <__retarget_lock_release_recursive>
 8006b0c:	89ab      	ldrh	r3, [r5, #12]
 8006b0e:	065b      	lsls	r3, r3, #25
 8006b10:	f53f af12 	bmi.w	8006938 <_vfiprintf_r+0x4c>
 8006b14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b16:	e711      	b.n	800693c <_vfiprintf_r+0x50>
 8006b18:	ab03      	add	r3, sp, #12
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	462a      	mov	r2, r5
 8006b1e:	4630      	mov	r0, r6
 8006b20:	4b08      	ldr	r3, [pc, #32]	; (8006b44 <_vfiprintf_r+0x258>)
 8006b22:	a904      	add	r1, sp, #16
 8006b24:	f7fc fb02 	bl	800312c <_printf_i>
 8006b28:	e7e4      	b.n	8006af4 <_vfiprintf_r+0x208>
 8006b2a:	bf00      	nop
 8006b2c:	080077c4 	.word	0x080077c4
 8006b30:	080077e4 	.word	0x080077e4
 8006b34:	080077a4 	.word	0x080077a4
 8006b38:	08007754 	.word	0x08007754
 8006b3c:	0800775e 	.word	0x0800775e
 8006b40:	08002bf5 	.word	0x08002bf5
 8006b44:	080068c7 	.word	0x080068c7
 8006b48:	0800775a 	.word	0x0800775a

08006b4c <__swbuf_r>:
 8006b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4e:	460e      	mov	r6, r1
 8006b50:	4614      	mov	r4, r2
 8006b52:	4605      	mov	r5, r0
 8006b54:	b118      	cbz	r0, 8006b5e <__swbuf_r+0x12>
 8006b56:	6983      	ldr	r3, [r0, #24]
 8006b58:	b90b      	cbnz	r3, 8006b5e <__swbuf_r+0x12>
 8006b5a:	f000 f9d9 	bl	8006f10 <__sinit>
 8006b5e:	4b21      	ldr	r3, [pc, #132]	; (8006be4 <__swbuf_r+0x98>)
 8006b60:	429c      	cmp	r4, r3
 8006b62:	d12b      	bne.n	8006bbc <__swbuf_r+0x70>
 8006b64:	686c      	ldr	r4, [r5, #4]
 8006b66:	69a3      	ldr	r3, [r4, #24]
 8006b68:	60a3      	str	r3, [r4, #8]
 8006b6a:	89a3      	ldrh	r3, [r4, #12]
 8006b6c:	071a      	lsls	r2, r3, #28
 8006b6e:	d52f      	bpl.n	8006bd0 <__swbuf_r+0x84>
 8006b70:	6923      	ldr	r3, [r4, #16]
 8006b72:	b36b      	cbz	r3, 8006bd0 <__swbuf_r+0x84>
 8006b74:	6923      	ldr	r3, [r4, #16]
 8006b76:	6820      	ldr	r0, [r4, #0]
 8006b78:	b2f6      	uxtb	r6, r6
 8006b7a:	1ac0      	subs	r0, r0, r3
 8006b7c:	6963      	ldr	r3, [r4, #20]
 8006b7e:	4637      	mov	r7, r6
 8006b80:	4283      	cmp	r3, r0
 8006b82:	dc04      	bgt.n	8006b8e <__swbuf_r+0x42>
 8006b84:	4621      	mov	r1, r4
 8006b86:	4628      	mov	r0, r5
 8006b88:	f000 f92e 	bl	8006de8 <_fflush_r>
 8006b8c:	bb30      	cbnz	r0, 8006bdc <__swbuf_r+0x90>
 8006b8e:	68a3      	ldr	r3, [r4, #8]
 8006b90:	3001      	adds	r0, #1
 8006b92:	3b01      	subs	r3, #1
 8006b94:	60a3      	str	r3, [r4, #8]
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	6022      	str	r2, [r4, #0]
 8006b9c:	701e      	strb	r6, [r3, #0]
 8006b9e:	6963      	ldr	r3, [r4, #20]
 8006ba0:	4283      	cmp	r3, r0
 8006ba2:	d004      	beq.n	8006bae <__swbuf_r+0x62>
 8006ba4:	89a3      	ldrh	r3, [r4, #12]
 8006ba6:	07db      	lsls	r3, r3, #31
 8006ba8:	d506      	bpl.n	8006bb8 <__swbuf_r+0x6c>
 8006baa:	2e0a      	cmp	r6, #10
 8006bac:	d104      	bne.n	8006bb8 <__swbuf_r+0x6c>
 8006bae:	4621      	mov	r1, r4
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	f000 f919 	bl	8006de8 <_fflush_r>
 8006bb6:	b988      	cbnz	r0, 8006bdc <__swbuf_r+0x90>
 8006bb8:	4638      	mov	r0, r7
 8006bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bbc:	4b0a      	ldr	r3, [pc, #40]	; (8006be8 <__swbuf_r+0x9c>)
 8006bbe:	429c      	cmp	r4, r3
 8006bc0:	d101      	bne.n	8006bc6 <__swbuf_r+0x7a>
 8006bc2:	68ac      	ldr	r4, [r5, #8]
 8006bc4:	e7cf      	b.n	8006b66 <__swbuf_r+0x1a>
 8006bc6:	4b09      	ldr	r3, [pc, #36]	; (8006bec <__swbuf_r+0xa0>)
 8006bc8:	429c      	cmp	r4, r3
 8006bca:	bf08      	it	eq
 8006bcc:	68ec      	ldreq	r4, [r5, #12]
 8006bce:	e7ca      	b.n	8006b66 <__swbuf_r+0x1a>
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f000 f80c 	bl	8006bf0 <__swsetup_r>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d0cb      	beq.n	8006b74 <__swbuf_r+0x28>
 8006bdc:	f04f 37ff 	mov.w	r7, #4294967295
 8006be0:	e7ea      	b.n	8006bb8 <__swbuf_r+0x6c>
 8006be2:	bf00      	nop
 8006be4:	080077c4 	.word	0x080077c4
 8006be8:	080077e4 	.word	0x080077e4
 8006bec:	080077a4 	.word	0x080077a4

08006bf0 <__swsetup_r>:
 8006bf0:	4b32      	ldr	r3, [pc, #200]	; (8006cbc <__swsetup_r+0xcc>)
 8006bf2:	b570      	push	{r4, r5, r6, lr}
 8006bf4:	681d      	ldr	r5, [r3, #0]
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	b125      	cbz	r5, 8006c06 <__swsetup_r+0x16>
 8006bfc:	69ab      	ldr	r3, [r5, #24]
 8006bfe:	b913      	cbnz	r3, 8006c06 <__swsetup_r+0x16>
 8006c00:	4628      	mov	r0, r5
 8006c02:	f000 f985 	bl	8006f10 <__sinit>
 8006c06:	4b2e      	ldr	r3, [pc, #184]	; (8006cc0 <__swsetup_r+0xd0>)
 8006c08:	429c      	cmp	r4, r3
 8006c0a:	d10f      	bne.n	8006c2c <__swsetup_r+0x3c>
 8006c0c:	686c      	ldr	r4, [r5, #4]
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c14:	0719      	lsls	r1, r3, #28
 8006c16:	d42c      	bmi.n	8006c72 <__swsetup_r+0x82>
 8006c18:	06dd      	lsls	r5, r3, #27
 8006c1a:	d411      	bmi.n	8006c40 <__swsetup_r+0x50>
 8006c1c:	2309      	movs	r3, #9
 8006c1e:	6033      	str	r3, [r6, #0]
 8006c20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c24:	f04f 30ff 	mov.w	r0, #4294967295
 8006c28:	81a3      	strh	r3, [r4, #12]
 8006c2a:	e03e      	b.n	8006caa <__swsetup_r+0xba>
 8006c2c:	4b25      	ldr	r3, [pc, #148]	; (8006cc4 <__swsetup_r+0xd4>)
 8006c2e:	429c      	cmp	r4, r3
 8006c30:	d101      	bne.n	8006c36 <__swsetup_r+0x46>
 8006c32:	68ac      	ldr	r4, [r5, #8]
 8006c34:	e7eb      	b.n	8006c0e <__swsetup_r+0x1e>
 8006c36:	4b24      	ldr	r3, [pc, #144]	; (8006cc8 <__swsetup_r+0xd8>)
 8006c38:	429c      	cmp	r4, r3
 8006c3a:	bf08      	it	eq
 8006c3c:	68ec      	ldreq	r4, [r5, #12]
 8006c3e:	e7e6      	b.n	8006c0e <__swsetup_r+0x1e>
 8006c40:	0758      	lsls	r0, r3, #29
 8006c42:	d512      	bpl.n	8006c6a <__swsetup_r+0x7a>
 8006c44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c46:	b141      	cbz	r1, 8006c5a <__swsetup_r+0x6a>
 8006c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c4c:	4299      	cmp	r1, r3
 8006c4e:	d002      	beq.n	8006c56 <__swsetup_r+0x66>
 8006c50:	4630      	mov	r0, r6
 8006c52:	f7ff fb6f 	bl	8006334 <_free_r>
 8006c56:	2300      	movs	r3, #0
 8006c58:	6363      	str	r3, [r4, #52]	; 0x34
 8006c5a:	89a3      	ldrh	r3, [r4, #12]
 8006c5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c60:	81a3      	strh	r3, [r4, #12]
 8006c62:	2300      	movs	r3, #0
 8006c64:	6063      	str	r3, [r4, #4]
 8006c66:	6923      	ldr	r3, [r4, #16]
 8006c68:	6023      	str	r3, [r4, #0]
 8006c6a:	89a3      	ldrh	r3, [r4, #12]
 8006c6c:	f043 0308 	orr.w	r3, r3, #8
 8006c70:	81a3      	strh	r3, [r4, #12]
 8006c72:	6923      	ldr	r3, [r4, #16]
 8006c74:	b94b      	cbnz	r3, 8006c8a <__swsetup_r+0x9a>
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c80:	d003      	beq.n	8006c8a <__swsetup_r+0x9a>
 8006c82:	4621      	mov	r1, r4
 8006c84:	4630      	mov	r0, r6
 8006c86:	f000 fa07 	bl	8007098 <__smakebuf_r>
 8006c8a:	89a0      	ldrh	r0, [r4, #12]
 8006c8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c90:	f010 0301 	ands.w	r3, r0, #1
 8006c94:	d00a      	beq.n	8006cac <__swsetup_r+0xbc>
 8006c96:	2300      	movs	r3, #0
 8006c98:	60a3      	str	r3, [r4, #8]
 8006c9a:	6963      	ldr	r3, [r4, #20]
 8006c9c:	425b      	negs	r3, r3
 8006c9e:	61a3      	str	r3, [r4, #24]
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	b943      	cbnz	r3, 8006cb6 <__swsetup_r+0xc6>
 8006ca4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ca8:	d1ba      	bne.n	8006c20 <__swsetup_r+0x30>
 8006caa:	bd70      	pop	{r4, r5, r6, pc}
 8006cac:	0781      	lsls	r1, r0, #30
 8006cae:	bf58      	it	pl
 8006cb0:	6963      	ldrpl	r3, [r4, #20]
 8006cb2:	60a3      	str	r3, [r4, #8]
 8006cb4:	e7f4      	b.n	8006ca0 <__swsetup_r+0xb0>
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	e7f7      	b.n	8006caa <__swsetup_r+0xba>
 8006cba:	bf00      	nop
 8006cbc:	2000000c 	.word	0x2000000c
 8006cc0:	080077c4 	.word	0x080077c4
 8006cc4:	080077e4 	.word	0x080077e4
 8006cc8:	080077a4 	.word	0x080077a4

08006ccc <abort>:
 8006ccc:	2006      	movs	r0, #6
 8006cce:	b508      	push	{r3, lr}
 8006cd0:	f000 fa52 	bl	8007178 <raise>
 8006cd4:	2001      	movs	r0, #1
 8006cd6:	f7fa fa14 	bl	8001102 <_exit>
	...

08006cdc <__sflush_r>:
 8006cdc:	898a      	ldrh	r2, [r1, #12]
 8006cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	0710      	lsls	r0, r2, #28
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	d458      	bmi.n	8006d9c <__sflush_r+0xc0>
 8006cea:	684b      	ldr	r3, [r1, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	dc05      	bgt.n	8006cfc <__sflush_r+0x20>
 8006cf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	dc02      	bgt.n	8006cfc <__sflush_r+0x20>
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cfe:	2e00      	cmp	r6, #0
 8006d00:	d0f9      	beq.n	8006cf6 <__sflush_r+0x1a>
 8006d02:	2300      	movs	r3, #0
 8006d04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d08:	682f      	ldr	r7, [r5, #0]
 8006d0a:	602b      	str	r3, [r5, #0]
 8006d0c:	d032      	beq.n	8006d74 <__sflush_r+0x98>
 8006d0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d10:	89a3      	ldrh	r3, [r4, #12]
 8006d12:	075a      	lsls	r2, r3, #29
 8006d14:	d505      	bpl.n	8006d22 <__sflush_r+0x46>
 8006d16:	6863      	ldr	r3, [r4, #4]
 8006d18:	1ac0      	subs	r0, r0, r3
 8006d1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d1c:	b10b      	cbz	r3, 8006d22 <__sflush_r+0x46>
 8006d1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d20:	1ac0      	subs	r0, r0, r3
 8006d22:	2300      	movs	r3, #0
 8006d24:	4602      	mov	r2, r0
 8006d26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d28:	4628      	mov	r0, r5
 8006d2a:	6a21      	ldr	r1, [r4, #32]
 8006d2c:	47b0      	blx	r6
 8006d2e:	1c43      	adds	r3, r0, #1
 8006d30:	89a3      	ldrh	r3, [r4, #12]
 8006d32:	d106      	bne.n	8006d42 <__sflush_r+0x66>
 8006d34:	6829      	ldr	r1, [r5, #0]
 8006d36:	291d      	cmp	r1, #29
 8006d38:	d82c      	bhi.n	8006d94 <__sflush_r+0xb8>
 8006d3a:	4a2a      	ldr	r2, [pc, #168]	; (8006de4 <__sflush_r+0x108>)
 8006d3c:	40ca      	lsrs	r2, r1
 8006d3e:	07d6      	lsls	r6, r2, #31
 8006d40:	d528      	bpl.n	8006d94 <__sflush_r+0xb8>
 8006d42:	2200      	movs	r2, #0
 8006d44:	6062      	str	r2, [r4, #4]
 8006d46:	6922      	ldr	r2, [r4, #16]
 8006d48:	04d9      	lsls	r1, r3, #19
 8006d4a:	6022      	str	r2, [r4, #0]
 8006d4c:	d504      	bpl.n	8006d58 <__sflush_r+0x7c>
 8006d4e:	1c42      	adds	r2, r0, #1
 8006d50:	d101      	bne.n	8006d56 <__sflush_r+0x7a>
 8006d52:	682b      	ldr	r3, [r5, #0]
 8006d54:	b903      	cbnz	r3, 8006d58 <__sflush_r+0x7c>
 8006d56:	6560      	str	r0, [r4, #84]	; 0x54
 8006d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d5a:	602f      	str	r7, [r5, #0]
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	d0ca      	beq.n	8006cf6 <__sflush_r+0x1a>
 8006d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d64:	4299      	cmp	r1, r3
 8006d66:	d002      	beq.n	8006d6e <__sflush_r+0x92>
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f7ff fae3 	bl	8006334 <_free_r>
 8006d6e:	2000      	movs	r0, #0
 8006d70:	6360      	str	r0, [r4, #52]	; 0x34
 8006d72:	e7c1      	b.n	8006cf8 <__sflush_r+0x1c>
 8006d74:	6a21      	ldr	r1, [r4, #32]
 8006d76:	2301      	movs	r3, #1
 8006d78:	4628      	mov	r0, r5
 8006d7a:	47b0      	blx	r6
 8006d7c:	1c41      	adds	r1, r0, #1
 8006d7e:	d1c7      	bne.n	8006d10 <__sflush_r+0x34>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0c4      	beq.n	8006d10 <__sflush_r+0x34>
 8006d86:	2b1d      	cmp	r3, #29
 8006d88:	d001      	beq.n	8006d8e <__sflush_r+0xb2>
 8006d8a:	2b16      	cmp	r3, #22
 8006d8c:	d101      	bne.n	8006d92 <__sflush_r+0xb6>
 8006d8e:	602f      	str	r7, [r5, #0]
 8006d90:	e7b1      	b.n	8006cf6 <__sflush_r+0x1a>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d98:	81a3      	strh	r3, [r4, #12]
 8006d9a:	e7ad      	b.n	8006cf8 <__sflush_r+0x1c>
 8006d9c:	690f      	ldr	r7, [r1, #16]
 8006d9e:	2f00      	cmp	r7, #0
 8006da0:	d0a9      	beq.n	8006cf6 <__sflush_r+0x1a>
 8006da2:	0793      	lsls	r3, r2, #30
 8006da4:	bf18      	it	ne
 8006da6:	2300      	movne	r3, #0
 8006da8:	680e      	ldr	r6, [r1, #0]
 8006daa:	bf08      	it	eq
 8006dac:	694b      	ldreq	r3, [r1, #20]
 8006dae:	eba6 0807 	sub.w	r8, r6, r7
 8006db2:	600f      	str	r7, [r1, #0]
 8006db4:	608b      	str	r3, [r1, #8]
 8006db6:	f1b8 0f00 	cmp.w	r8, #0
 8006dba:	dd9c      	ble.n	8006cf6 <__sflush_r+0x1a>
 8006dbc:	4643      	mov	r3, r8
 8006dbe:	463a      	mov	r2, r7
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	6a21      	ldr	r1, [r4, #32]
 8006dc4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006dc6:	47b0      	blx	r6
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	dc06      	bgt.n	8006dda <__sflush_r+0xfe>
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dd6:	81a3      	strh	r3, [r4, #12]
 8006dd8:	e78e      	b.n	8006cf8 <__sflush_r+0x1c>
 8006dda:	4407      	add	r7, r0
 8006ddc:	eba8 0800 	sub.w	r8, r8, r0
 8006de0:	e7e9      	b.n	8006db6 <__sflush_r+0xda>
 8006de2:	bf00      	nop
 8006de4:	20400001 	.word	0x20400001

08006de8 <_fflush_r>:
 8006de8:	b538      	push	{r3, r4, r5, lr}
 8006dea:	690b      	ldr	r3, [r1, #16]
 8006dec:	4605      	mov	r5, r0
 8006dee:	460c      	mov	r4, r1
 8006df0:	b913      	cbnz	r3, 8006df8 <_fflush_r+0x10>
 8006df2:	2500      	movs	r5, #0
 8006df4:	4628      	mov	r0, r5
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	b118      	cbz	r0, 8006e02 <_fflush_r+0x1a>
 8006dfa:	6983      	ldr	r3, [r0, #24]
 8006dfc:	b90b      	cbnz	r3, 8006e02 <_fflush_r+0x1a>
 8006dfe:	f000 f887 	bl	8006f10 <__sinit>
 8006e02:	4b14      	ldr	r3, [pc, #80]	; (8006e54 <_fflush_r+0x6c>)
 8006e04:	429c      	cmp	r4, r3
 8006e06:	d11b      	bne.n	8006e40 <_fflush_r+0x58>
 8006e08:	686c      	ldr	r4, [r5, #4]
 8006e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0ef      	beq.n	8006df2 <_fflush_r+0xa>
 8006e12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e14:	07d0      	lsls	r0, r2, #31
 8006e16:	d404      	bmi.n	8006e22 <_fflush_r+0x3a>
 8006e18:	0599      	lsls	r1, r3, #22
 8006e1a:	d402      	bmi.n	8006e22 <_fflush_r+0x3a>
 8006e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e1e:	f000 f915 	bl	800704c <__retarget_lock_acquire_recursive>
 8006e22:	4628      	mov	r0, r5
 8006e24:	4621      	mov	r1, r4
 8006e26:	f7ff ff59 	bl	8006cdc <__sflush_r>
 8006e2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	07da      	lsls	r2, r3, #31
 8006e30:	d4e0      	bmi.n	8006df4 <_fflush_r+0xc>
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	059b      	lsls	r3, r3, #22
 8006e36:	d4dd      	bmi.n	8006df4 <_fflush_r+0xc>
 8006e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e3a:	f000 f908 	bl	800704e <__retarget_lock_release_recursive>
 8006e3e:	e7d9      	b.n	8006df4 <_fflush_r+0xc>
 8006e40:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <_fflush_r+0x70>)
 8006e42:	429c      	cmp	r4, r3
 8006e44:	d101      	bne.n	8006e4a <_fflush_r+0x62>
 8006e46:	68ac      	ldr	r4, [r5, #8]
 8006e48:	e7df      	b.n	8006e0a <_fflush_r+0x22>
 8006e4a:	4b04      	ldr	r3, [pc, #16]	; (8006e5c <_fflush_r+0x74>)
 8006e4c:	429c      	cmp	r4, r3
 8006e4e:	bf08      	it	eq
 8006e50:	68ec      	ldreq	r4, [r5, #12]
 8006e52:	e7da      	b.n	8006e0a <_fflush_r+0x22>
 8006e54:	080077c4 	.word	0x080077c4
 8006e58:	080077e4 	.word	0x080077e4
 8006e5c:	080077a4 	.word	0x080077a4

08006e60 <std>:
 8006e60:	2300      	movs	r3, #0
 8006e62:	b510      	push	{r4, lr}
 8006e64:	4604      	mov	r4, r0
 8006e66:	e9c0 3300 	strd	r3, r3, [r0]
 8006e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e6e:	6083      	str	r3, [r0, #8]
 8006e70:	8181      	strh	r1, [r0, #12]
 8006e72:	6643      	str	r3, [r0, #100]	; 0x64
 8006e74:	81c2      	strh	r2, [r0, #14]
 8006e76:	6183      	str	r3, [r0, #24]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	2208      	movs	r2, #8
 8006e7c:	305c      	adds	r0, #92	; 0x5c
 8006e7e:	f7fb fe13 	bl	8002aa8 <memset>
 8006e82:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <std+0x38>)
 8006e84:	6224      	str	r4, [r4, #32]
 8006e86:	6263      	str	r3, [r4, #36]	; 0x24
 8006e88:	4b04      	ldr	r3, [pc, #16]	; (8006e9c <std+0x3c>)
 8006e8a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e8c:	4b04      	ldr	r3, [pc, #16]	; (8006ea0 <std+0x40>)
 8006e8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e90:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <std+0x44>)
 8006e92:	6323      	str	r3, [r4, #48]	; 0x30
 8006e94:	bd10      	pop	{r4, pc}
 8006e96:	bf00      	nop
 8006e98:	080071b1 	.word	0x080071b1
 8006e9c:	080071d3 	.word	0x080071d3
 8006ea0:	0800720b 	.word	0x0800720b
 8006ea4:	0800722f 	.word	0x0800722f

08006ea8 <_cleanup_r>:
 8006ea8:	4901      	ldr	r1, [pc, #4]	; (8006eb0 <_cleanup_r+0x8>)
 8006eaa:	f000 b8af 	b.w	800700c <_fwalk_reent>
 8006eae:	bf00      	nop
 8006eb0:	08006de9 	.word	0x08006de9

08006eb4 <__sfmoreglue>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	2568      	movs	r5, #104	; 0x68
 8006eb8:	1e4a      	subs	r2, r1, #1
 8006eba:	4355      	muls	r5, r2
 8006ebc:	460e      	mov	r6, r1
 8006ebe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ec2:	f7ff fa83 	bl	80063cc <_malloc_r>
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	b140      	cbz	r0, 8006edc <__sfmoreglue+0x28>
 8006eca:	2100      	movs	r1, #0
 8006ecc:	e9c0 1600 	strd	r1, r6, [r0]
 8006ed0:	300c      	adds	r0, #12
 8006ed2:	60a0      	str	r0, [r4, #8]
 8006ed4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ed8:	f7fb fde6 	bl	8002aa8 <memset>
 8006edc:	4620      	mov	r0, r4
 8006ede:	bd70      	pop	{r4, r5, r6, pc}

08006ee0 <__sfp_lock_acquire>:
 8006ee0:	4801      	ldr	r0, [pc, #4]	; (8006ee8 <__sfp_lock_acquire+0x8>)
 8006ee2:	f000 b8b3 	b.w	800704c <__retarget_lock_acquire_recursive>
 8006ee6:	bf00      	nop
 8006ee8:	200003e8 	.word	0x200003e8

08006eec <__sfp_lock_release>:
 8006eec:	4801      	ldr	r0, [pc, #4]	; (8006ef4 <__sfp_lock_release+0x8>)
 8006eee:	f000 b8ae 	b.w	800704e <__retarget_lock_release_recursive>
 8006ef2:	bf00      	nop
 8006ef4:	200003e8 	.word	0x200003e8

08006ef8 <__sinit_lock_acquire>:
 8006ef8:	4801      	ldr	r0, [pc, #4]	; (8006f00 <__sinit_lock_acquire+0x8>)
 8006efa:	f000 b8a7 	b.w	800704c <__retarget_lock_acquire_recursive>
 8006efe:	bf00      	nop
 8006f00:	200003e3 	.word	0x200003e3

08006f04 <__sinit_lock_release>:
 8006f04:	4801      	ldr	r0, [pc, #4]	; (8006f0c <__sinit_lock_release+0x8>)
 8006f06:	f000 b8a2 	b.w	800704e <__retarget_lock_release_recursive>
 8006f0a:	bf00      	nop
 8006f0c:	200003e3 	.word	0x200003e3

08006f10 <__sinit>:
 8006f10:	b510      	push	{r4, lr}
 8006f12:	4604      	mov	r4, r0
 8006f14:	f7ff fff0 	bl	8006ef8 <__sinit_lock_acquire>
 8006f18:	69a3      	ldr	r3, [r4, #24]
 8006f1a:	b11b      	cbz	r3, 8006f24 <__sinit+0x14>
 8006f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f20:	f7ff bff0 	b.w	8006f04 <__sinit_lock_release>
 8006f24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f28:	6523      	str	r3, [r4, #80]	; 0x50
 8006f2a:	4b13      	ldr	r3, [pc, #76]	; (8006f78 <__sinit+0x68>)
 8006f2c:	4a13      	ldr	r2, [pc, #76]	; (8006f7c <__sinit+0x6c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f32:	42a3      	cmp	r3, r4
 8006f34:	bf08      	it	eq
 8006f36:	2301      	moveq	r3, #1
 8006f38:	4620      	mov	r0, r4
 8006f3a:	bf08      	it	eq
 8006f3c:	61a3      	streq	r3, [r4, #24]
 8006f3e:	f000 f81f 	bl	8006f80 <__sfp>
 8006f42:	6060      	str	r0, [r4, #4]
 8006f44:	4620      	mov	r0, r4
 8006f46:	f000 f81b 	bl	8006f80 <__sfp>
 8006f4a:	60a0      	str	r0, [r4, #8]
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f000 f817 	bl	8006f80 <__sfp>
 8006f52:	2200      	movs	r2, #0
 8006f54:	2104      	movs	r1, #4
 8006f56:	60e0      	str	r0, [r4, #12]
 8006f58:	6860      	ldr	r0, [r4, #4]
 8006f5a:	f7ff ff81 	bl	8006e60 <std>
 8006f5e:	2201      	movs	r2, #1
 8006f60:	2109      	movs	r1, #9
 8006f62:	68a0      	ldr	r0, [r4, #8]
 8006f64:	f7ff ff7c 	bl	8006e60 <std>
 8006f68:	2202      	movs	r2, #2
 8006f6a:	2112      	movs	r1, #18
 8006f6c:	68e0      	ldr	r0, [r4, #12]
 8006f6e:	f7ff ff77 	bl	8006e60 <std>
 8006f72:	2301      	movs	r3, #1
 8006f74:	61a3      	str	r3, [r4, #24]
 8006f76:	e7d1      	b.n	8006f1c <__sinit+0xc>
 8006f78:	08007350 	.word	0x08007350
 8006f7c:	08006ea9 	.word	0x08006ea9

08006f80 <__sfp>:
 8006f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f82:	4607      	mov	r7, r0
 8006f84:	f7ff ffac 	bl	8006ee0 <__sfp_lock_acquire>
 8006f88:	4b1e      	ldr	r3, [pc, #120]	; (8007004 <__sfp+0x84>)
 8006f8a:	681e      	ldr	r6, [r3, #0]
 8006f8c:	69b3      	ldr	r3, [r6, #24]
 8006f8e:	b913      	cbnz	r3, 8006f96 <__sfp+0x16>
 8006f90:	4630      	mov	r0, r6
 8006f92:	f7ff ffbd 	bl	8006f10 <__sinit>
 8006f96:	3648      	adds	r6, #72	; 0x48
 8006f98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	d503      	bpl.n	8006fa8 <__sfp+0x28>
 8006fa0:	6833      	ldr	r3, [r6, #0]
 8006fa2:	b30b      	cbz	r3, 8006fe8 <__sfp+0x68>
 8006fa4:	6836      	ldr	r6, [r6, #0]
 8006fa6:	e7f7      	b.n	8006f98 <__sfp+0x18>
 8006fa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fac:	b9d5      	cbnz	r5, 8006fe4 <__sfp+0x64>
 8006fae:	4b16      	ldr	r3, [pc, #88]	; (8007008 <__sfp+0x88>)
 8006fb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fb4:	60e3      	str	r3, [r4, #12]
 8006fb6:	6665      	str	r5, [r4, #100]	; 0x64
 8006fb8:	f000 f847 	bl	800704a <__retarget_lock_init_recursive>
 8006fbc:	f7ff ff96 	bl	8006eec <__sfp_lock_release>
 8006fc0:	2208      	movs	r2, #8
 8006fc2:	4629      	mov	r1, r5
 8006fc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006fc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fcc:	6025      	str	r5, [r4, #0]
 8006fce:	61a5      	str	r5, [r4, #24]
 8006fd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fd4:	f7fb fd68 	bl	8002aa8 <memset>
 8006fd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fe4:	3468      	adds	r4, #104	; 0x68
 8006fe6:	e7d9      	b.n	8006f9c <__sfp+0x1c>
 8006fe8:	2104      	movs	r1, #4
 8006fea:	4638      	mov	r0, r7
 8006fec:	f7ff ff62 	bl	8006eb4 <__sfmoreglue>
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	6030      	str	r0, [r6, #0]
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d1d5      	bne.n	8006fa4 <__sfp+0x24>
 8006ff8:	f7ff ff78 	bl	8006eec <__sfp_lock_release>
 8006ffc:	230c      	movs	r3, #12
 8006ffe:	603b      	str	r3, [r7, #0]
 8007000:	e7ee      	b.n	8006fe0 <__sfp+0x60>
 8007002:	bf00      	nop
 8007004:	08007350 	.word	0x08007350
 8007008:	ffff0001 	.word	0xffff0001

0800700c <_fwalk_reent>:
 800700c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007010:	4606      	mov	r6, r0
 8007012:	4688      	mov	r8, r1
 8007014:	2700      	movs	r7, #0
 8007016:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800701a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800701e:	f1b9 0901 	subs.w	r9, r9, #1
 8007022:	d505      	bpl.n	8007030 <_fwalk_reent+0x24>
 8007024:	6824      	ldr	r4, [r4, #0]
 8007026:	2c00      	cmp	r4, #0
 8007028:	d1f7      	bne.n	800701a <_fwalk_reent+0xe>
 800702a:	4638      	mov	r0, r7
 800702c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007030:	89ab      	ldrh	r3, [r5, #12]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d907      	bls.n	8007046 <_fwalk_reent+0x3a>
 8007036:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800703a:	3301      	adds	r3, #1
 800703c:	d003      	beq.n	8007046 <_fwalk_reent+0x3a>
 800703e:	4629      	mov	r1, r5
 8007040:	4630      	mov	r0, r6
 8007042:	47c0      	blx	r8
 8007044:	4307      	orrs	r7, r0
 8007046:	3568      	adds	r5, #104	; 0x68
 8007048:	e7e9      	b.n	800701e <_fwalk_reent+0x12>

0800704a <__retarget_lock_init_recursive>:
 800704a:	4770      	bx	lr

0800704c <__retarget_lock_acquire_recursive>:
 800704c:	4770      	bx	lr

0800704e <__retarget_lock_release_recursive>:
 800704e:	4770      	bx	lr

08007050 <__swhatbuf_r>:
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	460e      	mov	r6, r1
 8007054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007058:	4614      	mov	r4, r2
 800705a:	2900      	cmp	r1, #0
 800705c:	461d      	mov	r5, r3
 800705e:	b096      	sub	sp, #88	; 0x58
 8007060:	da07      	bge.n	8007072 <__swhatbuf_r+0x22>
 8007062:	2300      	movs	r3, #0
 8007064:	602b      	str	r3, [r5, #0]
 8007066:	89b3      	ldrh	r3, [r6, #12]
 8007068:	061a      	lsls	r2, r3, #24
 800706a:	d410      	bmi.n	800708e <__swhatbuf_r+0x3e>
 800706c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007070:	e00e      	b.n	8007090 <__swhatbuf_r+0x40>
 8007072:	466a      	mov	r2, sp
 8007074:	f000 f902 	bl	800727c <_fstat_r>
 8007078:	2800      	cmp	r0, #0
 800707a:	dbf2      	blt.n	8007062 <__swhatbuf_r+0x12>
 800707c:	9a01      	ldr	r2, [sp, #4]
 800707e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007082:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007086:	425a      	negs	r2, r3
 8007088:	415a      	adcs	r2, r3
 800708a:	602a      	str	r2, [r5, #0]
 800708c:	e7ee      	b.n	800706c <__swhatbuf_r+0x1c>
 800708e:	2340      	movs	r3, #64	; 0x40
 8007090:	2000      	movs	r0, #0
 8007092:	6023      	str	r3, [r4, #0]
 8007094:	b016      	add	sp, #88	; 0x58
 8007096:	bd70      	pop	{r4, r5, r6, pc}

08007098 <__smakebuf_r>:
 8007098:	898b      	ldrh	r3, [r1, #12]
 800709a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800709c:	079d      	lsls	r5, r3, #30
 800709e:	4606      	mov	r6, r0
 80070a0:	460c      	mov	r4, r1
 80070a2:	d507      	bpl.n	80070b4 <__smakebuf_r+0x1c>
 80070a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	6123      	str	r3, [r4, #16]
 80070ac:	2301      	movs	r3, #1
 80070ae:	6163      	str	r3, [r4, #20]
 80070b0:	b002      	add	sp, #8
 80070b2:	bd70      	pop	{r4, r5, r6, pc}
 80070b4:	466a      	mov	r2, sp
 80070b6:	ab01      	add	r3, sp, #4
 80070b8:	f7ff ffca 	bl	8007050 <__swhatbuf_r>
 80070bc:	9900      	ldr	r1, [sp, #0]
 80070be:	4605      	mov	r5, r0
 80070c0:	4630      	mov	r0, r6
 80070c2:	f7ff f983 	bl	80063cc <_malloc_r>
 80070c6:	b948      	cbnz	r0, 80070dc <__smakebuf_r+0x44>
 80070c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070cc:	059a      	lsls	r2, r3, #22
 80070ce:	d4ef      	bmi.n	80070b0 <__smakebuf_r+0x18>
 80070d0:	f023 0303 	bic.w	r3, r3, #3
 80070d4:	f043 0302 	orr.w	r3, r3, #2
 80070d8:	81a3      	strh	r3, [r4, #12]
 80070da:	e7e3      	b.n	80070a4 <__smakebuf_r+0xc>
 80070dc:	4b0d      	ldr	r3, [pc, #52]	; (8007114 <__smakebuf_r+0x7c>)
 80070de:	62b3      	str	r3, [r6, #40]	; 0x28
 80070e0:	89a3      	ldrh	r3, [r4, #12]
 80070e2:	6020      	str	r0, [r4, #0]
 80070e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070e8:	81a3      	strh	r3, [r4, #12]
 80070ea:	9b00      	ldr	r3, [sp, #0]
 80070ec:	6120      	str	r0, [r4, #16]
 80070ee:	6163      	str	r3, [r4, #20]
 80070f0:	9b01      	ldr	r3, [sp, #4]
 80070f2:	b15b      	cbz	r3, 800710c <__smakebuf_r+0x74>
 80070f4:	4630      	mov	r0, r6
 80070f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070fa:	f000 f8d1 	bl	80072a0 <_isatty_r>
 80070fe:	b128      	cbz	r0, 800710c <__smakebuf_r+0x74>
 8007100:	89a3      	ldrh	r3, [r4, #12]
 8007102:	f023 0303 	bic.w	r3, r3, #3
 8007106:	f043 0301 	orr.w	r3, r3, #1
 800710a:	81a3      	strh	r3, [r4, #12]
 800710c:	89a0      	ldrh	r0, [r4, #12]
 800710e:	4305      	orrs	r5, r0
 8007110:	81a5      	strh	r5, [r4, #12]
 8007112:	e7cd      	b.n	80070b0 <__smakebuf_r+0x18>
 8007114:	08006ea9 	.word	0x08006ea9

08007118 <_malloc_usable_size_r>:
 8007118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800711c:	1f18      	subs	r0, r3, #4
 800711e:	2b00      	cmp	r3, #0
 8007120:	bfbc      	itt	lt
 8007122:	580b      	ldrlt	r3, [r1, r0]
 8007124:	18c0      	addlt	r0, r0, r3
 8007126:	4770      	bx	lr

08007128 <_raise_r>:
 8007128:	291f      	cmp	r1, #31
 800712a:	b538      	push	{r3, r4, r5, lr}
 800712c:	4604      	mov	r4, r0
 800712e:	460d      	mov	r5, r1
 8007130:	d904      	bls.n	800713c <_raise_r+0x14>
 8007132:	2316      	movs	r3, #22
 8007134:	6003      	str	r3, [r0, #0]
 8007136:	f04f 30ff 	mov.w	r0, #4294967295
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800713e:	b112      	cbz	r2, 8007146 <_raise_r+0x1e>
 8007140:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007144:	b94b      	cbnz	r3, 800715a <_raise_r+0x32>
 8007146:	4620      	mov	r0, r4
 8007148:	f000 f830 	bl	80071ac <_getpid_r>
 800714c:	462a      	mov	r2, r5
 800714e:	4601      	mov	r1, r0
 8007150:	4620      	mov	r0, r4
 8007152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007156:	f000 b817 	b.w	8007188 <_kill_r>
 800715a:	2b01      	cmp	r3, #1
 800715c:	d00a      	beq.n	8007174 <_raise_r+0x4c>
 800715e:	1c59      	adds	r1, r3, #1
 8007160:	d103      	bne.n	800716a <_raise_r+0x42>
 8007162:	2316      	movs	r3, #22
 8007164:	6003      	str	r3, [r0, #0]
 8007166:	2001      	movs	r0, #1
 8007168:	e7e7      	b.n	800713a <_raise_r+0x12>
 800716a:	2400      	movs	r4, #0
 800716c:	4628      	mov	r0, r5
 800716e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007172:	4798      	blx	r3
 8007174:	2000      	movs	r0, #0
 8007176:	e7e0      	b.n	800713a <_raise_r+0x12>

08007178 <raise>:
 8007178:	4b02      	ldr	r3, [pc, #8]	; (8007184 <raise+0xc>)
 800717a:	4601      	mov	r1, r0
 800717c:	6818      	ldr	r0, [r3, #0]
 800717e:	f7ff bfd3 	b.w	8007128 <_raise_r>
 8007182:	bf00      	nop
 8007184:	2000000c 	.word	0x2000000c

08007188 <_kill_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	2300      	movs	r3, #0
 800718c:	4d06      	ldr	r5, [pc, #24]	; (80071a8 <_kill_r+0x20>)
 800718e:	4604      	mov	r4, r0
 8007190:	4608      	mov	r0, r1
 8007192:	4611      	mov	r1, r2
 8007194:	602b      	str	r3, [r5, #0]
 8007196:	f7f9 ffa4 	bl	80010e2 <_kill>
 800719a:	1c43      	adds	r3, r0, #1
 800719c:	d102      	bne.n	80071a4 <_kill_r+0x1c>
 800719e:	682b      	ldr	r3, [r5, #0]
 80071a0:	b103      	cbz	r3, 80071a4 <_kill_r+0x1c>
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	bd38      	pop	{r3, r4, r5, pc}
 80071a6:	bf00      	nop
 80071a8:	200003dc 	.word	0x200003dc

080071ac <_getpid_r>:
 80071ac:	f7f9 bf92 	b.w	80010d4 <_getpid>

080071b0 <__sread>:
 80071b0:	b510      	push	{r4, lr}
 80071b2:	460c      	mov	r4, r1
 80071b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071b8:	f000 f894 	bl	80072e4 <_read_r>
 80071bc:	2800      	cmp	r0, #0
 80071be:	bfab      	itete	ge
 80071c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071c2:	89a3      	ldrhlt	r3, [r4, #12]
 80071c4:	181b      	addge	r3, r3, r0
 80071c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071ca:	bfac      	ite	ge
 80071cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80071ce:	81a3      	strhlt	r3, [r4, #12]
 80071d0:	bd10      	pop	{r4, pc}

080071d2 <__swrite>:
 80071d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d6:	461f      	mov	r7, r3
 80071d8:	898b      	ldrh	r3, [r1, #12]
 80071da:	4605      	mov	r5, r0
 80071dc:	05db      	lsls	r3, r3, #23
 80071de:	460c      	mov	r4, r1
 80071e0:	4616      	mov	r6, r2
 80071e2:	d505      	bpl.n	80071f0 <__swrite+0x1e>
 80071e4:	2302      	movs	r3, #2
 80071e6:	2200      	movs	r2, #0
 80071e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ec:	f000 f868 	bl	80072c0 <_lseek_r>
 80071f0:	89a3      	ldrh	r3, [r4, #12]
 80071f2:	4632      	mov	r2, r6
 80071f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071f8:	81a3      	strh	r3, [r4, #12]
 80071fa:	4628      	mov	r0, r5
 80071fc:	463b      	mov	r3, r7
 80071fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007206:	f000 b817 	b.w	8007238 <_write_r>

0800720a <__sseek>:
 800720a:	b510      	push	{r4, lr}
 800720c:	460c      	mov	r4, r1
 800720e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007212:	f000 f855 	bl	80072c0 <_lseek_r>
 8007216:	1c43      	adds	r3, r0, #1
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	bf15      	itete	ne
 800721c:	6560      	strne	r0, [r4, #84]	; 0x54
 800721e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007222:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007226:	81a3      	strheq	r3, [r4, #12]
 8007228:	bf18      	it	ne
 800722a:	81a3      	strhne	r3, [r4, #12]
 800722c:	bd10      	pop	{r4, pc}

0800722e <__sclose>:
 800722e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007232:	f000 b813 	b.w	800725c <_close_r>
	...

08007238 <_write_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4604      	mov	r4, r0
 800723c:	4608      	mov	r0, r1
 800723e:	4611      	mov	r1, r2
 8007240:	2200      	movs	r2, #0
 8007242:	4d05      	ldr	r5, [pc, #20]	; (8007258 <_write_r+0x20>)
 8007244:	602a      	str	r2, [r5, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	f7f9 ff82 	bl	8001150 <_write>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d102      	bne.n	8007256 <_write_r+0x1e>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	b103      	cbz	r3, 8007256 <_write_r+0x1e>
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	200003dc 	.word	0x200003dc

0800725c <_close_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	2300      	movs	r3, #0
 8007260:	4d05      	ldr	r5, [pc, #20]	; (8007278 <_close_r+0x1c>)
 8007262:	4604      	mov	r4, r0
 8007264:	4608      	mov	r0, r1
 8007266:	602b      	str	r3, [r5, #0]
 8007268:	f7f9 ff8e 	bl	8001188 <_close>
 800726c:	1c43      	adds	r3, r0, #1
 800726e:	d102      	bne.n	8007276 <_close_r+0x1a>
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	b103      	cbz	r3, 8007276 <_close_r+0x1a>
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	bd38      	pop	{r3, r4, r5, pc}
 8007278:	200003dc 	.word	0x200003dc

0800727c <_fstat_r>:
 800727c:	b538      	push	{r3, r4, r5, lr}
 800727e:	2300      	movs	r3, #0
 8007280:	4d06      	ldr	r5, [pc, #24]	; (800729c <_fstat_r+0x20>)
 8007282:	4604      	mov	r4, r0
 8007284:	4608      	mov	r0, r1
 8007286:	4611      	mov	r1, r2
 8007288:	602b      	str	r3, [r5, #0]
 800728a:	f7f9 ff88 	bl	800119e <_fstat>
 800728e:	1c43      	adds	r3, r0, #1
 8007290:	d102      	bne.n	8007298 <_fstat_r+0x1c>
 8007292:	682b      	ldr	r3, [r5, #0]
 8007294:	b103      	cbz	r3, 8007298 <_fstat_r+0x1c>
 8007296:	6023      	str	r3, [r4, #0]
 8007298:	bd38      	pop	{r3, r4, r5, pc}
 800729a:	bf00      	nop
 800729c:	200003dc 	.word	0x200003dc

080072a0 <_isatty_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	2300      	movs	r3, #0
 80072a4:	4d05      	ldr	r5, [pc, #20]	; (80072bc <_isatty_r+0x1c>)
 80072a6:	4604      	mov	r4, r0
 80072a8:	4608      	mov	r0, r1
 80072aa:	602b      	str	r3, [r5, #0]
 80072ac:	f7f9 ff86 	bl	80011bc <_isatty>
 80072b0:	1c43      	adds	r3, r0, #1
 80072b2:	d102      	bne.n	80072ba <_isatty_r+0x1a>
 80072b4:	682b      	ldr	r3, [r5, #0]
 80072b6:	b103      	cbz	r3, 80072ba <_isatty_r+0x1a>
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	bd38      	pop	{r3, r4, r5, pc}
 80072bc:	200003dc 	.word	0x200003dc

080072c0 <_lseek_r>:
 80072c0:	b538      	push	{r3, r4, r5, lr}
 80072c2:	4604      	mov	r4, r0
 80072c4:	4608      	mov	r0, r1
 80072c6:	4611      	mov	r1, r2
 80072c8:	2200      	movs	r2, #0
 80072ca:	4d05      	ldr	r5, [pc, #20]	; (80072e0 <_lseek_r+0x20>)
 80072cc:	602a      	str	r2, [r5, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	f7f9 ff7e 	bl	80011d0 <_lseek>
 80072d4:	1c43      	adds	r3, r0, #1
 80072d6:	d102      	bne.n	80072de <_lseek_r+0x1e>
 80072d8:	682b      	ldr	r3, [r5, #0]
 80072da:	b103      	cbz	r3, 80072de <_lseek_r+0x1e>
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	bd38      	pop	{r3, r4, r5, pc}
 80072e0:	200003dc 	.word	0x200003dc

080072e4 <_read_r>:
 80072e4:	b538      	push	{r3, r4, r5, lr}
 80072e6:	4604      	mov	r4, r0
 80072e8:	4608      	mov	r0, r1
 80072ea:	4611      	mov	r1, r2
 80072ec:	2200      	movs	r2, #0
 80072ee:	4d05      	ldr	r5, [pc, #20]	; (8007304 <_read_r+0x20>)
 80072f0:	602a      	str	r2, [r5, #0]
 80072f2:	461a      	mov	r2, r3
 80072f4:	f7f9 ff0f 	bl	8001116 <_read>
 80072f8:	1c43      	adds	r3, r0, #1
 80072fa:	d102      	bne.n	8007302 <_read_r+0x1e>
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	b103      	cbz	r3, 8007302 <_read_r+0x1e>
 8007300:	6023      	str	r3, [r4, #0]
 8007302:	bd38      	pop	{r3, r4, r5, pc}
 8007304:	200003dc 	.word	0x200003dc

08007308 <_init>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	bf00      	nop
 800730c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730e:	bc08      	pop	{r3}
 8007310:	469e      	mov	lr, r3
 8007312:	4770      	bx	lr

08007314 <_fini>:
 8007314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007316:	bf00      	nop
 8007318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800731a:	bc08      	pop	{r3}
 800731c:	469e      	mov	lr, r3
 800731e:	4770      	bx	lr
