
GY-NEO6MV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ae4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001bf0  08001bf0  00011bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c18  08001c18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c18  08001c18  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c18  08001c18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c18  08001c18  00011c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c1c  08001c1c  00011c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000000c  08001c2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08001c2c  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006351  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014f7  00000000  00000000  00026386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  00027880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000598  00000000  00000000  00027ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b65  00000000  00000000  00028458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006d15  00000000  00000000  0003efbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081de9  00000000  00000000  00045cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c7abb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017f0  00000000  00000000  000c7b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001bd8 	.word	0x08001bd8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001bd8 	.word	0x08001bd8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f99a 	bl	8000488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f810 	bl	8000178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f87e 	bl	8000258 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f852 	bl	8000204 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive(&huart1, rx_buffer, 255, 10000);
 8000160:	f242 7310 	movw	r3, #10000	; 0x2710
 8000164:	22ff      	movs	r2, #255	; 0xff
 8000166:	4902      	ldr	r1, [pc, #8]	; (8000170 <main+0x24>)
 8000168:	4802      	ldr	r0, [pc, #8]	; (8000174 <main+0x28>)
 800016a:	f001 f95e 	bl	800142a <HAL_UART_Receive>
 800016e:	e7f7      	b.n	8000160 <main+0x14>
 8000170:	2000003c 	.word	0x2000003c
 8000174:	2000013c 	.word	0x2000013c

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b090      	sub	sp, #64	; 0x40
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0318 	add.w	r3, r7, #24
 8000182:	2228      	movs	r2, #40	; 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f001 fd1e 	bl	8001bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	1d3b      	adds	r3, r7, #4
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
 8000192:	605a      	str	r2, [r3, #4]
 8000194:	609a      	str	r2, [r3, #8]
 8000196:	60da      	str	r2, [r3, #12]
 8000198:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800019a:	2301      	movs	r3, #1
 800019c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a4:	2300      	movs	r3, #0
 80001a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a8:	2301      	movs	r3, #1
 80001aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001bc:	f107 0318 	add.w	r3, r7, #24
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 fccb 	bl	8000b5c <HAL_RCC_OscConfig>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d001      	beq.n	80001d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001cc:	f000 f872 	bl	80002b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d0:	230f      	movs	r3, #15
 80001d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d4:	2302      	movs	r3, #2
 80001d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e2:	2300      	movs	r3, #0
 80001e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	2102      	movs	r1, #2
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 ff36 	bl	800105c <HAL_RCC_ClockConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001f6:	f000 f85d 	bl	80002b4 <Error_Handler>
  }
}
 80001fa:	bf00      	nop
 80001fc:	3740      	adds	r7, #64	; 0x40
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
	...

08000204 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000208:	4b11      	ldr	r3, [pc, #68]	; (8000250 <MX_USART1_UART_Init+0x4c>)
 800020a:	4a12      	ldr	r2, [pc, #72]	; (8000254 <MX_USART1_UART_Init+0x50>)
 800020c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800020e:	4b10      	ldr	r3, [pc, #64]	; (8000250 <MX_USART1_UART_Init+0x4c>)
 8000210:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000214:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000216:	4b0e      	ldr	r3, [pc, #56]	; (8000250 <MX_USART1_UART_Init+0x4c>)
 8000218:	2200      	movs	r2, #0
 800021a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800021c:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <MX_USART1_UART_Init+0x4c>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000222:	4b0b      	ldr	r3, [pc, #44]	; (8000250 <MX_USART1_UART_Init+0x4c>)
 8000224:	2200      	movs	r2, #0
 8000226:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <MX_USART1_UART_Init+0x4c>)
 800022a:	220c      	movs	r2, #12
 800022c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800022e:	4b08      	ldr	r3, [pc, #32]	; (8000250 <MX_USART1_UART_Init+0x4c>)
 8000230:	2200      	movs	r2, #0
 8000232:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <MX_USART1_UART_Init+0x4c>)
 8000236:	2200      	movs	r2, #0
 8000238:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800023a:	4805      	ldr	r0, [pc, #20]	; (8000250 <MX_USART1_UART_Init+0x4c>)
 800023c:	f001 f8a8 	bl	8001390 <HAL_UART_Init>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000246:	f000 f835 	bl	80002b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800024a:	bf00      	nop
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	2000013c 	.word	0x2000013c
 8000254:	40013800 	.word	0x40013800

08000258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800025e:	4b14      	ldr	r3, [pc, #80]	; (80002b0 <MX_GPIO_Init+0x58>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <MX_GPIO_Init+0x58>)
 8000264:	f043 0320 	orr.w	r3, r3, #32
 8000268:	6193      	str	r3, [r2, #24]
 800026a:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <MX_GPIO_Init+0x58>)
 800026c:	699b      	ldr	r3, [r3, #24]
 800026e:	f003 0320 	and.w	r3, r3, #32
 8000272:	60fb      	str	r3, [r7, #12]
 8000274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <MX_GPIO_Init+0x58>)
 8000278:	699b      	ldr	r3, [r3, #24]
 800027a:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <MX_GPIO_Init+0x58>)
 800027c:	f043 0304 	orr.w	r3, r3, #4
 8000280:	6193      	str	r3, [r2, #24]
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <MX_GPIO_Init+0x58>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	f003 0304 	and.w	r3, r3, #4
 800028a:	60bb      	str	r3, [r7, #8]
 800028c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <MX_GPIO_Init+0x58>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <MX_GPIO_Init+0x58>)
 8000294:	f043 0308 	orr.w	r3, r3, #8
 8000298:	6193      	str	r3, [r2, #24]
 800029a:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <MX_GPIO_Init+0x58>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	f003 0308 	and.w	r3, r3, #8
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]

}
 80002a6:	bf00      	nop
 80002a8:	3714      	adds	r7, #20
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr
 80002b0:	40021000 	.word	0x40021000

080002b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002b8:	b672      	cpsid	i
}
 80002ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002bc:	e7fe      	b.n	80002bc <Error_Handler+0x8>
	...

080002c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002c6:	4b15      	ldr	r3, [pc, #84]	; (800031c <HAL_MspInit+0x5c>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	4a14      	ldr	r2, [pc, #80]	; (800031c <HAL_MspInit+0x5c>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	6193      	str	r3, [r2, #24]
 80002d2:	4b12      	ldr	r3, [pc, #72]	; (800031c <HAL_MspInit+0x5c>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	f003 0301 	and.w	r3, r3, #1
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002de:	4b0f      	ldr	r3, [pc, #60]	; (800031c <HAL_MspInit+0x5c>)
 80002e0:	69db      	ldr	r3, [r3, #28]
 80002e2:	4a0e      	ldr	r2, [pc, #56]	; (800031c <HAL_MspInit+0x5c>)
 80002e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002e8:	61d3      	str	r3, [r2, #28]
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <HAL_MspInit+0x5c>)
 80002ec:	69db      	ldr	r3, [r3, #28]
 80002ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <HAL_MspInit+0x60>)
 80002f8:	685b      	ldr	r3, [r3, #4]
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <HAL_MspInit+0x60>)
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000312:	bf00      	nop
 8000314:	3714      	adds	r7, #20
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40021000 	.word	0x40021000
 8000320:	40010000 	.word	0x40010000

08000324 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b088      	sub	sp, #32
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032c:	f107 0310 	add.w	r3, r7, #16
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a20      	ldr	r2, [pc, #128]	; (80003c0 <HAL_UART_MspInit+0x9c>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d139      	bne.n	80003b8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000344:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <HAL_UART_MspInit+0xa0>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a1e      	ldr	r2, [pc, #120]	; (80003c4 <HAL_UART_MspInit+0xa0>)
 800034a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b1c      	ldr	r3, [pc, #112]	; (80003c4 <HAL_UART_MspInit+0xa0>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800035c:	4b19      	ldr	r3, [pc, #100]	; (80003c4 <HAL_UART_MspInit+0xa0>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a18      	ldr	r2, [pc, #96]	; (80003c4 <HAL_UART_MspInit+0xa0>)
 8000362:	f043 0304 	orr.w	r3, r3, #4
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b16      	ldr	r3, [pc, #88]	; (80003c4 <HAL_UART_MspInit+0xa0>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0304 	and.w	r3, r3, #4
 8000370:	60bb      	str	r3, [r7, #8]
 8000372:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000378:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800037a:	2302      	movs	r3, #2
 800037c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800037e:	2303      	movs	r3, #3
 8000380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	4619      	mov	r1, r3
 8000388:	480f      	ldr	r0, [pc, #60]	; (80003c8 <HAL_UART_MspInit+0xa4>)
 800038a:	f000 fa63 	bl	8000854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800038e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	4619      	mov	r1, r3
 80003a2:	4809      	ldr	r0, [pc, #36]	; (80003c8 <HAL_UART_MspInit+0xa4>)
 80003a4:	f000 fa56 	bl	8000854 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2100      	movs	r1, #0
 80003ac:	2025      	movs	r0, #37	; 0x25
 80003ae:	f000 f9a4 	bl	80006fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80003b2:	2025      	movs	r0, #37	; 0x25
 80003b4:	f000 f9bd 	bl	8000732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80003b8:	bf00      	nop
 80003ba:	3720      	adds	r7, #32
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40013800 	.word	0x40013800
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40010800 	.word	0x40010800

080003cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <NMI_Handler+0x4>

080003d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d6:	e7fe      	b.n	80003d6 <HardFault_Handler+0x4>

080003d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <MemManage_Handler+0x4>

080003de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <BusFault_Handler+0x4>

080003e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <UsageFault_Handler+0x4>

080003ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr

080003f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr

08000402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr

0800040e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000412:	f000 f87f 	bl	8000514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <USART1_IRQHandler+0x10>)
 8000422:	f001 f8a1 	bl	8001568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	2000013c 	.word	0x2000013c

08000430 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800043c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800043e:	e003      	b.n	8000448 <LoopCopyDataInit>

08000440 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000440:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000442:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000444:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000446:	3104      	adds	r1, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000448:	480a      	ldr	r0, [pc, #40]	; (8000474 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800044c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800044e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000450:	d3f6      	bcc.n	8000440 <CopyDataInit>
  ldr r2, =_sbss
 8000452:	4a0a      	ldr	r2, [pc, #40]	; (800047c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000454:	e002      	b.n	800045c <LoopFillZerobss>

08000456 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000458:	f842 3b04 	str.w	r3, [r2], #4

0800045c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800045e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000460:	d3f9      	bcc.n	8000456 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000462:	f7ff ffe5 	bl	8000430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000466:	f001 fb8b 	bl	8001b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800046a:	f7ff fe6f 	bl	800014c <main>
  bx lr
 800046e:	4770      	bx	lr
  ldr r3, =_sidata
 8000470:	08001c20 	.word	0x08001c20
  ldr r0, =_sdata
 8000474:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000478:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800047c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000480:	20000180 	.word	0x20000180

08000484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC1_2_IRQHandler>
	...

08000488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <HAL_Init+0x28>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a07      	ldr	r2, [pc, #28]	; (80004b0 <HAL_Init+0x28>)
 8000492:	f043 0310 	orr.w	r3, r3, #16
 8000496:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000498:	2003      	movs	r0, #3
 800049a:	f000 f923 	bl	80006e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800049e:	2000      	movs	r0, #0
 80004a0:	f000 f808 	bl	80004b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004a4:	f7ff ff0c 	bl	80002c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40022000 	.word	0x40022000

080004b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <HAL_InitTick+0x54>)
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <HAL_InitTick+0x58>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	4619      	mov	r1, r3
 80004c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80004ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 f93b 	bl	800074e <HAL_SYSTICK_Config>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004de:	2301      	movs	r3, #1
 80004e0:	e00e      	b.n	8000500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2b0f      	cmp	r3, #15
 80004e6:	d80a      	bhi.n	80004fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004e8:	2200      	movs	r2, #0
 80004ea:	6879      	ldr	r1, [r7, #4]
 80004ec:	f04f 30ff 	mov.w	r0, #4294967295
 80004f0:	f000 f903 	bl	80006fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <HAL_InitTick+0x5c>)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004fa:	2300      	movs	r3, #0
 80004fc:	e000      	b.n	8000500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004fe:	2301      	movs	r3, #1
}
 8000500:	4618      	mov	r0, r3
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000000 	.word	0x20000000
 800050c:	20000008 	.word	0x20000008
 8000510:	20000004 	.word	0x20000004

08000514 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <HAL_IncTick+0x1c>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	4b05      	ldr	r3, [pc, #20]	; (8000534 <HAL_IncTick+0x20>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4413      	add	r3, r2
 8000524:	4a03      	ldr	r2, [pc, #12]	; (8000534 <HAL_IncTick+0x20>)
 8000526:	6013      	str	r3, [r2, #0]
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	20000008 	.word	0x20000008
 8000534:	2000017c 	.word	0x2000017c

08000538 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return uwTick;
 800053c:	4b02      	ldr	r3, [pc, #8]	; (8000548 <HAL_GetTick+0x10>)
 800053e:	681b      	ldr	r3, [r3, #0]
}
 8000540:	4618      	mov	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	2000017c 	.word	0x2000017c

0800054c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f003 0307 	and.w	r3, r3, #7
 800055a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__NVIC_SetPriorityGrouping+0x44>)
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000562:	68ba      	ldr	r2, [r7, #8]
 8000564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000568:	4013      	ands	r3, r2
 800056a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800057e:	4a04      	ldr	r2, [pc, #16]	; (8000590 <__NVIC_SetPriorityGrouping+0x44>)
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	60d3      	str	r3, [r2, #12]
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <__NVIC_GetPriorityGrouping+0x18>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	0a1b      	lsrs	r3, r3, #8
 800059e:	f003 0307 	and.w	r3, r3, #7
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000ed00 	.word	0xe000ed00

080005b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	db0b      	blt.n	80005da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f003 021f 	and.w	r2, r3, #31
 80005c8:	4906      	ldr	r1, [pc, #24]	; (80005e4 <__NVIC_EnableIRQ+0x34>)
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	095b      	lsrs	r3, r3, #5
 80005d0:	2001      	movs	r0, #1
 80005d2:	fa00 f202 	lsl.w	r2, r0, r2
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	e000e100 	.word	0xe000e100

080005e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	db0a      	blt.n	8000612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	490c      	ldr	r1, [pc, #48]	; (8000634 <__NVIC_SetPriority+0x4c>)
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	0112      	lsls	r2, r2, #4
 8000608:	b2d2      	uxtb	r2, r2
 800060a:	440b      	add	r3, r1
 800060c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000610:	e00a      	b.n	8000628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4908      	ldr	r1, [pc, #32]	; (8000638 <__NVIC_SetPriority+0x50>)
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	f003 030f 	and.w	r3, r3, #15
 800061e:	3b04      	subs	r3, #4
 8000620:	0112      	lsls	r2, r2, #4
 8000622:	b2d2      	uxtb	r2, r2
 8000624:	440b      	add	r3, r1
 8000626:	761a      	strb	r2, [r3, #24]
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000e100 	.word	0xe000e100
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800063c:	b480      	push	{r7}
 800063e:	b089      	sub	sp, #36	; 0x24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f003 0307 	and.w	r3, r3, #7
 800064e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000650:	69fb      	ldr	r3, [r7, #28]
 8000652:	f1c3 0307 	rsb	r3, r3, #7
 8000656:	2b04      	cmp	r3, #4
 8000658:	bf28      	it	cs
 800065a:	2304      	movcs	r3, #4
 800065c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800065e:	69fb      	ldr	r3, [r7, #28]
 8000660:	3304      	adds	r3, #4
 8000662:	2b06      	cmp	r3, #6
 8000664:	d902      	bls.n	800066c <NVIC_EncodePriority+0x30>
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	3b03      	subs	r3, #3
 800066a:	e000      	b.n	800066e <NVIC_EncodePriority+0x32>
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000670:	f04f 32ff 	mov.w	r2, #4294967295
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	fa02 f303 	lsl.w	r3, r2, r3
 800067a:	43da      	mvns	r2, r3
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	401a      	ands	r2, r3
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000684:	f04f 31ff 	mov.w	r1, #4294967295
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	fa01 f303 	lsl.w	r3, r1, r3
 800068e:	43d9      	mvns	r1, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000694:	4313      	orrs	r3, r2
         );
}
 8000696:	4618      	mov	r0, r3
 8000698:	3724      	adds	r7, #36	; 0x24
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006b0:	d301      	bcc.n	80006b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006b2:	2301      	movs	r3, #1
 80006b4:	e00f      	b.n	80006d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <SysTick_Config+0x40>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006be:	210f      	movs	r1, #15
 80006c0:	f04f 30ff 	mov.w	r0, #4294967295
 80006c4:	f7ff ff90 	bl	80005e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <SysTick_Config+0x40>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ce:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <SysTick_Config+0x40>)
 80006d0:	2207      	movs	r2, #7
 80006d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006d4:	2300      	movs	r3, #0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	e000e010 	.word	0xe000e010

080006e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f7ff ff2d 	bl	800054c <__NVIC_SetPriorityGrouping>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b086      	sub	sp, #24
 80006fe:	af00      	add	r7, sp, #0
 8000700:	4603      	mov	r3, r0
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	607a      	str	r2, [r7, #4]
 8000706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800070c:	f7ff ff42 	bl	8000594 <__NVIC_GetPriorityGrouping>
 8000710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	68b9      	ldr	r1, [r7, #8]
 8000716:	6978      	ldr	r0, [r7, #20]
 8000718:	f7ff ff90 	bl	800063c <NVIC_EncodePriority>
 800071c:	4602      	mov	r2, r0
 800071e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff5f 	bl	80005e8 <__NVIC_SetPriority>
}
 800072a:	bf00      	nop
 800072c:	3718      	adds	r7, #24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	4603      	mov	r3, r0
 800073a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800073c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff35 	bl	80005b0 <__NVIC_EnableIRQ>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff ffa2 	bl	80006a0 <SysTick_Config>
 800075c:	4603      	mov	r3, r0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800077a:	2b02      	cmp	r3, #2
 800077c:	d005      	beq.n	800078a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2204      	movs	r2, #4
 8000782:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000784:	2301      	movs	r3, #1
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	e051      	b.n	800082e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f022 020e 	bic.w	r2, r2, #14
 8000798:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f022 0201 	bic.w	r2, r2, #1
 80007a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a22      	ldr	r2, [pc, #136]	; (8000838 <HAL_DMA_Abort_IT+0xd0>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d029      	beq.n	8000808 <HAL_DMA_Abort_IT+0xa0>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a20      	ldr	r2, [pc, #128]	; (800083c <HAL_DMA_Abort_IT+0xd4>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d022      	beq.n	8000804 <HAL_DMA_Abort_IT+0x9c>
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a1f      	ldr	r2, [pc, #124]	; (8000840 <HAL_DMA_Abort_IT+0xd8>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d01a      	beq.n	80007fe <HAL_DMA_Abort_IT+0x96>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a1d      	ldr	r2, [pc, #116]	; (8000844 <HAL_DMA_Abort_IT+0xdc>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d012      	beq.n	80007f8 <HAL_DMA_Abort_IT+0x90>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a1c      	ldr	r2, [pc, #112]	; (8000848 <HAL_DMA_Abort_IT+0xe0>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d00a      	beq.n	80007f2 <HAL_DMA_Abort_IT+0x8a>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a1a      	ldr	r2, [pc, #104]	; (800084c <HAL_DMA_Abort_IT+0xe4>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d102      	bne.n	80007ec <HAL_DMA_Abort_IT+0x84>
 80007e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80007ea:	e00e      	b.n	800080a <HAL_DMA_Abort_IT+0xa2>
 80007ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007f0:	e00b      	b.n	800080a <HAL_DMA_Abort_IT+0xa2>
 80007f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f6:	e008      	b.n	800080a <HAL_DMA_Abort_IT+0xa2>
 80007f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fc:	e005      	b.n	800080a <HAL_DMA_Abort_IT+0xa2>
 80007fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000802:	e002      	b.n	800080a <HAL_DMA_Abort_IT+0xa2>
 8000804:	2310      	movs	r3, #16
 8000806:	e000      	b.n	800080a <HAL_DMA_Abort_IT+0xa2>
 8000808:	2301      	movs	r3, #1
 800080a:	4a11      	ldr	r2, [pc, #68]	; (8000850 <HAL_DMA_Abort_IT+0xe8>)
 800080c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2201      	movs	r2, #1
 8000812:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000822:	2b00      	cmp	r3, #0
 8000824:	d003      	beq.n	800082e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	4798      	blx	r3
    } 
  }
  return status;
 800082e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020008 	.word	0x40020008
 800083c:	4002001c 	.word	0x4002001c
 8000840:	40020030 	.word	0x40020030
 8000844:	40020044 	.word	0x40020044
 8000848:	40020058 	.word	0x40020058
 800084c:	4002006c 	.word	0x4002006c
 8000850:	40020000 	.word	0x40020000

08000854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000854:	b480      	push	{r7}
 8000856:	b08b      	sub	sp, #44	; 0x2c
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000866:	e169      	b.n	8000b3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000868:	2201      	movs	r2, #1
 800086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	69fa      	ldr	r2, [r7, #28]
 8000878:	4013      	ands	r3, r2
 800087a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	429a      	cmp	r2, r3
 8000882:	f040 8158 	bne.w	8000b36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	4a9a      	ldr	r2, [pc, #616]	; (8000af4 <HAL_GPIO_Init+0x2a0>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d05e      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 8000890:	4a98      	ldr	r2, [pc, #608]	; (8000af4 <HAL_GPIO_Init+0x2a0>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d875      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 8000896:	4a98      	ldr	r2, [pc, #608]	; (8000af8 <HAL_GPIO_Init+0x2a4>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d058      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 800089c:	4a96      	ldr	r2, [pc, #600]	; (8000af8 <HAL_GPIO_Init+0x2a4>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d86f      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008a2:	4a96      	ldr	r2, [pc, #600]	; (8000afc <HAL_GPIO_Init+0x2a8>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d052      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 80008a8:	4a94      	ldr	r2, [pc, #592]	; (8000afc <HAL_GPIO_Init+0x2a8>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d869      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008ae:	4a94      	ldr	r2, [pc, #592]	; (8000b00 <HAL_GPIO_Init+0x2ac>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d04c      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 80008b4:	4a92      	ldr	r2, [pc, #584]	; (8000b00 <HAL_GPIO_Init+0x2ac>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d863      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008ba:	4a92      	ldr	r2, [pc, #584]	; (8000b04 <HAL_GPIO_Init+0x2b0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d046      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 80008c0:	4a90      	ldr	r2, [pc, #576]	; (8000b04 <HAL_GPIO_Init+0x2b0>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d85d      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008c6:	2b12      	cmp	r3, #18
 80008c8:	d82a      	bhi.n	8000920 <HAL_GPIO_Init+0xcc>
 80008ca:	2b12      	cmp	r3, #18
 80008cc:	d859      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008ce:	a201      	add	r2, pc, #4	; (adr r2, 80008d4 <HAL_GPIO_Init+0x80>)
 80008d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d4:	0800094f 	.word	0x0800094f
 80008d8:	08000929 	.word	0x08000929
 80008dc:	0800093b 	.word	0x0800093b
 80008e0:	0800097d 	.word	0x0800097d
 80008e4:	08000983 	.word	0x08000983
 80008e8:	08000983 	.word	0x08000983
 80008ec:	08000983 	.word	0x08000983
 80008f0:	08000983 	.word	0x08000983
 80008f4:	08000983 	.word	0x08000983
 80008f8:	08000983 	.word	0x08000983
 80008fc:	08000983 	.word	0x08000983
 8000900:	08000983 	.word	0x08000983
 8000904:	08000983 	.word	0x08000983
 8000908:	08000983 	.word	0x08000983
 800090c:	08000983 	.word	0x08000983
 8000910:	08000983 	.word	0x08000983
 8000914:	08000983 	.word	0x08000983
 8000918:	08000931 	.word	0x08000931
 800091c:	08000945 	.word	0x08000945
 8000920:	4a79      	ldr	r2, [pc, #484]	; (8000b08 <HAL_GPIO_Init+0x2b4>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d013      	beq.n	800094e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000926:	e02c      	b.n	8000982 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	623b      	str	r3, [r7, #32]
          break;
 800092e:	e029      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	3304      	adds	r3, #4
 8000936:	623b      	str	r3, [r7, #32]
          break;
 8000938:	e024      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	3308      	adds	r3, #8
 8000940:	623b      	str	r3, [r7, #32]
          break;
 8000942:	e01f      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	330c      	adds	r3, #12
 800094a:	623b      	str	r3, [r7, #32]
          break;
 800094c:	e01a      	b.n	8000984 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d102      	bne.n	800095c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000956:	2304      	movs	r3, #4
 8000958:	623b      	str	r3, [r7, #32]
          break;
 800095a:	e013      	b.n	8000984 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d105      	bne.n	8000970 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000964:	2308      	movs	r3, #8
 8000966:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	69fa      	ldr	r2, [r7, #28]
 800096c:	611a      	str	r2, [r3, #16]
          break;
 800096e:	e009      	b.n	8000984 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000970:	2308      	movs	r3, #8
 8000972:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	69fa      	ldr	r2, [r7, #28]
 8000978:	615a      	str	r2, [r3, #20]
          break;
 800097a:	e003      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
          break;
 8000980:	e000      	b.n	8000984 <HAL_GPIO_Init+0x130>
          break;
 8000982:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	2bff      	cmp	r3, #255	; 0xff
 8000988:	d801      	bhi.n	800098e <HAL_GPIO_Init+0x13a>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	e001      	b.n	8000992 <HAL_GPIO_Init+0x13e>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3304      	adds	r3, #4
 8000992:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	2bff      	cmp	r3, #255	; 0xff
 8000998:	d802      	bhi.n	80009a0 <HAL_GPIO_Init+0x14c>
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	e002      	b.n	80009a6 <HAL_GPIO_Init+0x152>
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	3b08      	subs	r3, #8
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	210f      	movs	r1, #15
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	fa01 f303 	lsl.w	r3, r1, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	401a      	ands	r2, r3
 80009b8:	6a39      	ldr	r1, [r7, #32]
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	fa01 f303 	lsl.w	r3, r1, r3
 80009c0:	431a      	orrs	r2, r3
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f000 80b1 	beq.w	8000b36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009d4:	4b4d      	ldr	r3, [pc, #308]	; (8000b0c <HAL_GPIO_Init+0x2b8>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a4c      	ldr	r2, [pc, #304]	; (8000b0c <HAL_GPIO_Init+0x2b8>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b4a      	ldr	r3, [pc, #296]	; (8000b0c <HAL_GPIO_Init+0x2b8>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009ec:	4a48      	ldr	r2, [pc, #288]	; (8000b10 <HAL_GPIO_Init+0x2bc>)
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f0:	089b      	lsrs	r3, r3, #2
 80009f2:	3302      	adds	r3, #2
 80009f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	f003 0303 	and.w	r3, r3, #3
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	220f      	movs	r2, #15
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a40      	ldr	r2, [pc, #256]	; (8000b14 <HAL_GPIO_Init+0x2c0>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d013      	beq.n	8000a40 <HAL_GPIO_Init+0x1ec>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a3f      	ldr	r2, [pc, #252]	; (8000b18 <HAL_GPIO_Init+0x2c4>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d00d      	beq.n	8000a3c <HAL_GPIO_Init+0x1e8>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a3e      	ldr	r2, [pc, #248]	; (8000b1c <HAL_GPIO_Init+0x2c8>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d007      	beq.n	8000a38 <HAL_GPIO_Init+0x1e4>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a3d      	ldr	r2, [pc, #244]	; (8000b20 <HAL_GPIO_Init+0x2cc>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d101      	bne.n	8000a34 <HAL_GPIO_Init+0x1e0>
 8000a30:	2303      	movs	r3, #3
 8000a32:	e006      	b.n	8000a42 <HAL_GPIO_Init+0x1ee>
 8000a34:	2304      	movs	r3, #4
 8000a36:	e004      	b.n	8000a42 <HAL_GPIO_Init+0x1ee>
 8000a38:	2302      	movs	r3, #2
 8000a3a:	e002      	b.n	8000a42 <HAL_GPIO_Init+0x1ee>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e000      	b.n	8000a42 <HAL_GPIO_Init+0x1ee>
 8000a40:	2300      	movs	r3, #0
 8000a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a44:	f002 0203 	and.w	r2, r2, #3
 8000a48:	0092      	lsls	r2, r2, #2
 8000a4a:	4093      	lsls	r3, r2
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a52:	492f      	ldr	r1, [pc, #188]	; (8000b10 <HAL_GPIO_Init+0x2bc>)
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	089b      	lsrs	r3, r3, #2
 8000a58:	3302      	adds	r3, #2
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d006      	beq.n	8000a7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a6c:	4b2d      	ldr	r3, [pc, #180]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	492c      	ldr	r1, [pc, #176]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	600b      	str	r3, [r1, #0]
 8000a78:	e006      	b.n	8000a88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	43db      	mvns	r3, r3
 8000a82:	4928      	ldr	r1, [pc, #160]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a84:	4013      	ands	r3, r2
 8000a86:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d006      	beq.n	8000aa2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a94:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	4922      	ldr	r1, [pc, #136]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	604b      	str	r3, [r1, #4]
 8000aa0:	e006      	b.n	8000ab0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aa2:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000aa4:	685a      	ldr	r2, [r3, #4]
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	491e      	ldr	r1, [pc, #120]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000aac:	4013      	ands	r3, r2
 8000aae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d006      	beq.n	8000aca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000abe:	689a      	ldr	r2, [r3, #8]
 8000ac0:	4918      	ldr	r1, [pc, #96]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	608b      	str	r3, [r1, #8]
 8000ac8:	e006      	b.n	8000ad8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000acc:	689a      	ldr	r2, [r3, #8]
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	4914      	ldr	r1, [pc, #80]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d021      	beq.n	8000b28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000ae6:	68da      	ldr	r2, [r3, #12]
 8000ae8:	490e      	ldr	r1, [pc, #56]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	60cb      	str	r3, [r1, #12]
 8000af0:	e021      	b.n	8000b36 <HAL_GPIO_Init+0x2e2>
 8000af2:	bf00      	nop
 8000af4:	10320000 	.word	0x10320000
 8000af8:	10310000 	.word	0x10310000
 8000afc:	10220000 	.word	0x10220000
 8000b00:	10210000 	.word	0x10210000
 8000b04:	10120000 	.word	0x10120000
 8000b08:	10110000 	.word	0x10110000
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010000 	.word	0x40010000
 8000b14:	40010800 	.word	0x40010800
 8000b18:	40010c00 	.word	0x40010c00
 8000b1c:	40011000 	.word	0x40011000
 8000b20:	40011400 	.word	0x40011400
 8000b24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_GPIO_Init+0x304>)
 8000b2a:	68da      	ldr	r2, [r3, #12]
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	4909      	ldr	r1, [pc, #36]	; (8000b58 <HAL_GPIO_Init+0x304>)
 8000b32:	4013      	ands	r3, r2
 8000b34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	3301      	adds	r3, #1
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b42:	fa22 f303 	lsr.w	r3, r2, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f47f ae8e 	bne.w	8000868 <HAL_GPIO_Init+0x14>
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	372c      	adds	r7, #44	; 0x2c
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	40010400 	.word	0x40010400

08000b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d101      	bne.n	8000b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e26c      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 8087 	beq.w	8000c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b7c:	4b92      	ldr	r3, [pc, #584]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 030c 	and.w	r3, r3, #12
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d00c      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b88:	4b8f      	ldr	r3, [pc, #572]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 030c 	and.w	r3, r3, #12
 8000b90:	2b08      	cmp	r3, #8
 8000b92:	d112      	bne.n	8000bba <HAL_RCC_OscConfig+0x5e>
 8000b94:	4b8c      	ldr	r3, [pc, #560]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ba0:	d10b      	bne.n	8000bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba2:	4b89      	ldr	r3, [pc, #548]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d06c      	beq.n	8000c88 <HAL_RCC_OscConfig+0x12c>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d168      	bne.n	8000c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e246      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc2:	d106      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x76>
 8000bc4:	4b80      	ldr	r3, [pc, #512]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a7f      	ldr	r2, [pc, #508]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	e02e      	b.n	8000c30 <HAL_RCC_OscConfig+0xd4>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d10c      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x98>
 8000bda:	4b7b      	ldr	r3, [pc, #492]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a7a      	ldr	r2, [pc, #488]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	4b78      	ldr	r3, [pc, #480]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a77      	ldr	r2, [pc, #476]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e01d      	b.n	8000c30 <HAL_RCC_OscConfig+0xd4>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bfc:	d10c      	bne.n	8000c18 <HAL_RCC_OscConfig+0xbc>
 8000bfe:	4b72      	ldr	r3, [pc, #456]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a71      	ldr	r2, [pc, #452]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	4b6f      	ldr	r3, [pc, #444]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a6e      	ldr	r2, [pc, #440]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	e00b      	b.n	8000c30 <HAL_RCC_OscConfig+0xd4>
 8000c18:	4b6b      	ldr	r3, [pc, #428]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a6a      	ldr	r2, [pc, #424]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b68      	ldr	r3, [pc, #416]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a67      	ldr	r2, [pc, #412]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d013      	beq.n	8000c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c38:	f7ff fc7e 	bl	8000538 <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c40:	f7ff fc7a 	bl	8000538 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b64      	cmp	r3, #100	; 0x64
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e1fa      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c52:	4b5d      	ldr	r3, [pc, #372]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0f0      	beq.n	8000c40 <HAL_RCC_OscConfig+0xe4>
 8000c5e:	e014      	b.n	8000c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c60:	f7ff fc6a 	bl	8000538 <HAL_GetTick>
 8000c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c66:	e008      	b.n	8000c7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c68:	f7ff fc66 	bl	8000538 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b64      	cmp	r3, #100	; 0x64
 8000c74:	d901      	bls.n	8000c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	e1e6      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c7a:	4b53      	ldr	r3, [pc, #332]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1f0      	bne.n	8000c68 <HAL_RCC_OscConfig+0x10c>
 8000c86:	e000      	b.n	8000c8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d063      	beq.n	8000d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c96:	4b4c      	ldr	r3, [pc, #304]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00b      	beq.n	8000cba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ca2:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	2b08      	cmp	r3, #8
 8000cac:	d11c      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x18c>
 8000cae:	4b46      	ldr	r3, [pc, #280]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d116      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cba:	4b43      	ldr	r3, [pc, #268]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d005      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x176>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d001      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e1ba      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd2:	4b3d      	ldr	r3, [pc, #244]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	4939      	ldr	r1, [pc, #228]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ce6:	e03a      	b.n	8000d5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d020      	beq.n	8000d32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cf0:	4b36      	ldr	r3, [pc, #216]	; (8000dcc <HAL_RCC_OscConfig+0x270>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fc1f 	bl	8000538 <HAL_GetTick>
 8000cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cfc:	e008      	b.n	8000d10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cfe:	f7ff fc1b 	bl	8000538 <HAL_GetTick>
 8000d02:	4602      	mov	r2, r0
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d901      	bls.n	8000d10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e19b      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d10:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f0      	beq.n	8000cfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	4927      	ldr	r1, [pc, #156]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	600b      	str	r3, [r1, #0]
 8000d30:	e015      	b.n	8000d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d32:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <HAL_RCC_OscConfig+0x270>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d38:	f7ff fbfe 	bl	8000538 <HAL_GetTick>
 8000d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d3e:	e008      	b.n	8000d52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d40:	f7ff fbfa 	bl	8000538 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d901      	bls.n	8000d52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e17a      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f0      	bne.n	8000d40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d03a      	beq.n	8000de0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d019      	beq.n	8000da6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_RCC_OscConfig+0x274>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d78:	f7ff fbde 	bl	8000538 <HAL_GetTick>
 8000d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d7e:	e008      	b.n	8000d92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d80:	f7ff fbda 	bl	8000538 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e15a      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f0      	beq.n	8000d80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f000 fad8 	bl	8001354 <RCC_Delay>
 8000da4:	e01c      	b.n	8000de0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_RCC_OscConfig+0x274>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dac:	f7ff fbc4 	bl	8000538 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db2:	e00f      	b.n	8000dd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db4:	f7ff fbc0 	bl	8000538 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d908      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e140      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	42420000 	.word	0x42420000
 8000dd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd4:	4b9e      	ldr	r3, [pc, #632]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1e9      	bne.n	8000db4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 80a6 	beq.w	8000f3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000df2:	4b97      	ldr	r3, [pc, #604]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10d      	bne.n	8000e1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	4b94      	ldr	r3, [pc, #592]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	4a93      	ldr	r2, [pc, #588]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e08:	61d3      	str	r3, [r2, #28]
 8000e0a:	4b91      	ldr	r3, [pc, #580]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e16:	2301      	movs	r3, #1
 8000e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e1a:	4b8e      	ldr	r3, [pc, #568]	; (8001054 <HAL_RCC_OscConfig+0x4f8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d118      	bne.n	8000e58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e26:	4b8b      	ldr	r3, [pc, #556]	; (8001054 <HAL_RCC_OscConfig+0x4f8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a8a      	ldr	r2, [pc, #552]	; (8001054 <HAL_RCC_OscConfig+0x4f8>)
 8000e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e32:	f7ff fb81 	bl	8000538 <HAL_GetTick>
 8000e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e38:	e008      	b.n	8000e4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e3a:	f7ff fb7d 	bl	8000538 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b64      	cmp	r3, #100	; 0x64
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e0fd      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4c:	4b81      	ldr	r3, [pc, #516]	; (8001054 <HAL_RCC_OscConfig+0x4f8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0f0      	beq.n	8000e3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d106      	bne.n	8000e6e <HAL_RCC_OscConfig+0x312>
 8000e60:	4b7b      	ldr	r3, [pc, #492]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	4a7a      	ldr	r2, [pc, #488]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6213      	str	r3, [r2, #32]
 8000e6c:	e02d      	b.n	8000eca <HAL_RCC_OscConfig+0x36e>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10c      	bne.n	8000e90 <HAL_RCC_OscConfig+0x334>
 8000e76:	4b76      	ldr	r3, [pc, #472]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e78:	6a1b      	ldr	r3, [r3, #32]
 8000e7a:	4a75      	ldr	r2, [pc, #468]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e7c:	f023 0301 	bic.w	r3, r3, #1
 8000e80:	6213      	str	r3, [r2, #32]
 8000e82:	4b73      	ldr	r3, [pc, #460]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	4a72      	ldr	r2, [pc, #456]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e88:	f023 0304 	bic.w	r3, r3, #4
 8000e8c:	6213      	str	r3, [r2, #32]
 8000e8e:	e01c      	b.n	8000eca <HAL_RCC_OscConfig+0x36e>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	2b05      	cmp	r3, #5
 8000e96:	d10c      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x356>
 8000e98:	4b6d      	ldr	r3, [pc, #436]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	4a6c      	ldr	r2, [pc, #432]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e9e:	f043 0304 	orr.w	r3, r3, #4
 8000ea2:	6213      	str	r3, [r2, #32]
 8000ea4:	4b6a      	ldr	r3, [pc, #424]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000ea6:	6a1b      	ldr	r3, [r3, #32]
 8000ea8:	4a69      	ldr	r2, [pc, #420]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6213      	str	r3, [r2, #32]
 8000eb0:	e00b      	b.n	8000eca <HAL_RCC_OscConfig+0x36e>
 8000eb2:	4b67      	ldr	r3, [pc, #412]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000eb4:	6a1b      	ldr	r3, [r3, #32]
 8000eb6:	4a66      	ldr	r2, [pc, #408]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000eb8:	f023 0301 	bic.w	r3, r3, #1
 8000ebc:	6213      	str	r3, [r2, #32]
 8000ebe:	4b64      	ldr	r3, [pc, #400]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000ec0:	6a1b      	ldr	r3, [r3, #32]
 8000ec2:	4a63      	ldr	r2, [pc, #396]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000ec4:	f023 0304 	bic.w	r3, r3, #4
 8000ec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d015      	beq.n	8000efe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed2:	f7ff fb31 	bl	8000538 <HAL_GetTick>
 8000ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed8:	e00a      	b.n	8000ef0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eda:	f7ff fb2d 	bl	8000538 <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e0ab      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef0:	4b57      	ldr	r3, [pc, #348]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0ee      	beq.n	8000eda <HAL_RCC_OscConfig+0x37e>
 8000efc:	e014      	b.n	8000f28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efe:	f7ff fb1b 	bl	8000538 <HAL_GetTick>
 8000f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f04:	e00a      	b.n	8000f1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f06:	f7ff fb17 	bl	8000538 <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e095      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f1c:	4b4c      	ldr	r3, [pc, #304]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1ee      	bne.n	8000f06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f28:	7dfb      	ldrb	r3, [r7, #23]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d105      	bne.n	8000f3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f2e:	4b48      	ldr	r3, [pc, #288]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	4a47      	ldr	r2, [pc, #284]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 8081 	beq.w	8001046 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f44:	4b42      	ldr	r3, [pc, #264]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 030c 	and.w	r3, r3, #12
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	d061      	beq.n	8001014 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69db      	ldr	r3, [r3, #28]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d146      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f58:	4b3f      	ldr	r3, [pc, #252]	; (8001058 <HAL_RCC_OscConfig+0x4fc>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5e:	f7ff faeb 	bl	8000538 <HAL_GetTick>
 8000f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f64:	e008      	b.n	8000f78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f66:	f7ff fae7 	bl	8000538 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e067      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f78:	4b35      	ldr	r3, [pc, #212]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1f0      	bne.n	8000f66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f8c:	d108      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f8e:	4b30      	ldr	r3, [pc, #192]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	492d      	ldr	r1, [pc, #180]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fa0:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a19      	ldr	r1, [r3, #32]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	430b      	orrs	r3, r1
 8000fb2:	4927      	ldr	r1, [pc, #156]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <HAL_RCC_OscConfig+0x4fc>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fabb 	bl	8000538 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc6:	f7ff fab7 	bl	8000538 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e037      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x46a>
 8000fe4:	e02f      	b.n	8001046 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_RCC_OscConfig+0x4fc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff faa4 	bl	8000538 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff4:	f7ff faa0 	bl	8000538 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e020      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f0      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x498>
 8001012:	e018      	b.n	8001046 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d101      	bne.n	8001020 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e013      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	429a      	cmp	r2, r3
 8001032:	d106      	bne.n	8001042 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800103e:	429a      	cmp	r2, r3
 8001040:	d001      	beq.n	8001046 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40021000 	.word	0x40021000
 8001054:	40007000 	.word	0x40007000
 8001058:	42420060 	.word	0x42420060

0800105c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e0d0      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001070:	4b6a      	ldr	r3, [pc, #424]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	d910      	bls.n	80010a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107e:	4b67      	ldr	r3, [pc, #412]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f023 0207 	bic.w	r2, r3, #7
 8001086:	4965      	ldr	r1, [pc, #404]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	4313      	orrs	r3, r2
 800108c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800108e:	4b63      	ldr	r3, [pc, #396]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	d001      	beq.n	80010a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e0b8      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d020      	beq.n	80010ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010b8:	4b59      	ldr	r3, [pc, #356]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	4a58      	ldr	r2, [pc, #352]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80010be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d005      	beq.n	80010dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010d0:	4b53      	ldr	r3, [pc, #332]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	4a52      	ldr	r2, [pc, #328]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80010d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010dc:	4b50      	ldr	r3, [pc, #320]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	494d      	ldr	r1, [pc, #308]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d040      	beq.n	800117c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d107      	bne.n	8001112 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	4b47      	ldr	r3, [pc, #284]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d115      	bne.n	800113a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e07f      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d107      	bne.n	800112a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800111a:	4b41      	ldr	r3, [pc, #260]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d109      	bne.n	800113a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e073      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112a:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e06b      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800113a:	4b39      	ldr	r3, [pc, #228]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f023 0203 	bic.w	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	4936      	ldr	r1, [pc, #216]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 8001148:	4313      	orrs	r3, r2
 800114a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800114c:	f7ff f9f4 	bl	8000538 <HAL_GetTick>
 8001150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001152:	e00a      	b.n	800116a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001154:	f7ff f9f0 	bl	8000538 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001162:	4293      	cmp	r3, r2
 8001164:	d901      	bls.n	800116a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e053      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 020c 	and.w	r2, r3, #12
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	429a      	cmp	r2, r3
 800117a:	d1eb      	bne.n	8001154 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800117c:	4b27      	ldr	r3, [pc, #156]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d210      	bcs.n	80011ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118a:	4b24      	ldr	r3, [pc, #144]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 0207 	bic.w	r2, r3, #7
 8001192:	4922      	ldr	r1, [pc, #136]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	4313      	orrs	r3, r2
 8001198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d001      	beq.n	80011ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e032      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d008      	beq.n	80011ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	4916      	ldr	r1, [pc, #88]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d009      	beq.n	80011ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	490e      	ldr	r1, [pc, #56]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011ea:	f000 f821 	bl	8001230 <HAL_RCC_GetSysClockFreq>
 80011ee:	4602      	mov	r2, r0
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	490a      	ldr	r1, [pc, #40]	; (8001224 <HAL_RCC_ClockConfig+0x1c8>)
 80011fc:	5ccb      	ldrb	r3, [r1, r3]
 80011fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001202:	4a09      	ldr	r2, [pc, #36]	; (8001228 <HAL_RCC_ClockConfig+0x1cc>)
 8001204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_RCC_ClockConfig+0x1d0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f952 	bl	80004b4 <HAL_InitTick>

  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40022000 	.word	0x40022000
 8001220:	40021000 	.word	0x40021000
 8001224:	08001c00 	.word	0x08001c00
 8001228:	20000000 	.word	0x20000000
 800122c:	20000004 	.word	0x20000004

08001230 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001230:	b490      	push	{r4, r7}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001236:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001238:	1d3c      	adds	r4, r7, #4
 800123a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800123c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001240:	f240 2301 	movw	r3, #513	; 0x201
 8001244:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800125a:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b04      	cmp	r3, #4
 8001268:	d002      	beq.n	8001270 <HAL_RCC_GetSysClockFreq+0x40>
 800126a:	2b08      	cmp	r3, #8
 800126c:	d003      	beq.n	8001276 <HAL_RCC_GetSysClockFreq+0x46>
 800126e:	e02d      	b.n	80012cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001270:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001272:	623b      	str	r3, [r7, #32]
      break;
 8001274:	e02d      	b.n	80012d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	0c9b      	lsrs	r3, r3, #18
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001282:	4413      	add	r3, r2
 8001284:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001288:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	0c5b      	lsrs	r3, r3, #17
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012a2:	4413      	add	r3, r2
 80012a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012ae:	fb02 f203 	mul.w	r2, r2, r3
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ba:	e004      	b.n	80012c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80012c0:	fb02 f303 	mul.w	r3, r2, r3
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	623b      	str	r3, [r7, #32]
      break;
 80012ca:	e002      	b.n	80012d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012ce:	623b      	str	r3, [r7, #32]
      break;
 80012d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012d2:	6a3b      	ldr	r3, [r7, #32]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3728      	adds	r7, #40	; 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc90      	pop	{r4, r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	08001bf0 	.word	0x08001bf0
 80012e4:	40021000 	.word	0x40021000
 80012e8:	007a1200 	.word	0x007a1200
 80012ec:	003d0900 	.word	0x003d0900

080012f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012f4:	4b02      	ldr	r3, [pc, #8]	; (8001300 <HAL_RCC_GetHCLKFreq+0x10>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	20000000 	.word	0x20000000

08001304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001308:	f7ff fff2 	bl	80012f0 <HAL_RCC_GetHCLKFreq>
 800130c:	4602      	mov	r2, r0
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	0a1b      	lsrs	r3, r3, #8
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	4903      	ldr	r1, [pc, #12]	; (8001328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800131a:	5ccb      	ldrb	r3, [r1, r3]
 800131c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001320:	4618      	mov	r0, r3
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40021000 	.word	0x40021000
 8001328:	08001c10 	.word	0x08001c10

0800132c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001330:	f7ff ffde 	bl	80012f0 <HAL_RCC_GetHCLKFreq>
 8001334:	4602      	mov	r2, r0
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	0adb      	lsrs	r3, r3, #11
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	4903      	ldr	r1, [pc, #12]	; (8001350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001342:	5ccb      	ldrb	r3, [r1, r3]
 8001344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40021000 	.word	0x40021000
 8001350:	08001c10 	.word	0x08001c10

08001354 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <RCC_Delay+0x34>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0a      	ldr	r2, [pc, #40]	; (800138c <RCC_Delay+0x38>)
 8001362:	fba2 2303 	umull	r2, r3, r2, r3
 8001366:	0a5b      	lsrs	r3, r3, #9
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	fb02 f303 	mul.w	r3, r2, r3
 800136e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001370:	bf00      	nop
  }
  while (Delay --);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1e5a      	subs	r2, r3, #1
 8001376:	60fa      	str	r2, [r7, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f9      	bne.n	8001370 <RCC_Delay+0x1c>
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	20000000 	.word	0x20000000
 800138c:	10624dd3 	.word	0x10624dd3

08001390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e03f      	b.n	8001422 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d106      	bne.n	80013bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7fe ffb4 	bl	8000324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2224      	movs	r2, #36	; 0x24
 80013c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 fb45 	bl	8001a64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80013e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	695a      	ldr	r2, [r3, #20]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2220      	movs	r2, #32
 8001414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2220      	movs	r2, #32
 800141c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b08a      	sub	sp, #40	; 0x28
 800142e:	af02      	add	r7, sp, #8
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4613      	mov	r3, r2
 8001438:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b20      	cmp	r3, #32
 8001448:	f040 8089 	bne.w	800155e <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d002      	beq.n	8001458 <HAL_UART_Receive+0x2e>
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e081      	b.n	8001560 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001462:	2b01      	cmp	r3, #1
 8001464:	d101      	bne.n	800146a <HAL_UART_Receive+0x40>
 8001466:	2302      	movs	r3, #2
 8001468:	e07a      	b.n	8001560 <HAL_UART_Receive+0x136>
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2222      	movs	r2, #34	; 0x22
 800147c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001480:	f7ff f85a 	bl	8000538 <HAL_GetTick>
 8001484:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	88fa      	ldrh	r2, [r7, #6]
 800148a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	88fa      	ldrh	r2, [r7, #6]
 8001490:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800149a:	d108      	bne.n	80014ae <HAL_UART_Receive+0x84>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d104      	bne.n	80014ae <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
 80014ac:	e003      	b.n	80014b6 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80014be:	e043      	b.n	8001548 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	2200      	movs	r2, #0
 80014c8:	2120      	movs	r1, #32
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 f967 	bl	800179e <UART_WaitOnFlagUntilTimeout>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e042      	b.n	8001560 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10c      	bne.n	80014fa <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	3302      	adds	r3, #2
 80014f6:	61bb      	str	r3, [r7, #24]
 80014f8:	e01f      	b.n	800153a <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001502:	d007      	beq.n	8001514 <HAL_UART_Receive+0xea>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10a      	bne.n	8001522 <HAL_UART_Receive+0xf8>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d106      	bne.n	8001522 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e008      	b.n	8001534 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800152e:	b2da      	uxtb	r2, r3
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	3301      	adds	r3, #1
 8001538:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800153e:	b29b      	uxth	r3, r3
 8001540:	3b01      	subs	r3, #1
 8001542:	b29a      	uxth	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800154c:	b29b      	uxth	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1b6      	bne.n	80014c0 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2220      	movs	r2, #32
 8001556:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e000      	b.n	8001560 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800155e:	2302      	movs	r3, #2
  }
}
 8001560:	4618      	mov	r0, r3
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10d      	bne.n	80015ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	f003 0320 	and.w	r3, r3, #32
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <HAL_UART_IRQHandler+0x52>
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	f003 0320 	and.w	r3, r3, #32
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f9d5 	bl	8001962 <UART_Receive_IT>
      return;
 80015b8:	e0d0      	b.n	800175c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 80b0 	beq.w	8001722 <HAL_UART_IRQHandler+0x1ba>
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d105      	bne.n	80015d8 <HAL_UART_IRQHandler+0x70>
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 80a5 	beq.w	8001722 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00a      	beq.n	80015f8 <HAL_UART_IRQHandler+0x90>
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f0:	f043 0201 	orr.w	r2, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00a      	beq.n	8001618 <HAL_UART_IRQHandler+0xb0>
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001610:	f043 0202 	orr.w	r2, r3, #2
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00a      	beq.n	8001638 <HAL_UART_IRQHandler+0xd0>
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001630:	f043 0204 	orr.w	r2, r3, #4
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00f      	beq.n	8001662 <HAL_UART_IRQHandler+0xfa>
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	f003 0320 	and.w	r3, r3, #32
 8001648:	2b00      	cmp	r3, #0
 800164a:	d104      	bne.n	8001656 <HAL_UART_IRQHandler+0xee>
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d005      	beq.n	8001662 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800165a:	f043 0208 	orr.w	r2, r3, #8
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001666:	2b00      	cmp	r3, #0
 8001668:	d077      	beq.n	800175a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	2b00      	cmp	r3, #0
 8001672:	d007      	beq.n	8001684 <HAL_UART_IRQHandler+0x11c>
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	f003 0320 	and.w	r3, r3, #32
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f96f 	bl	8001962 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800168e:	2b00      	cmp	r3, #0
 8001690:	bf14      	ite	ne
 8001692:	2301      	movne	r3, #1
 8001694:	2300      	moveq	r3, #0
 8001696:	b2db      	uxtb	r3, r3
 8001698:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <HAL_UART_IRQHandler+0x144>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d031      	beq.n	8001710 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f8c0 	bl	8001832 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d023      	beq.n	8001708 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016ce:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d013      	beq.n	8001700 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016dc:	4a21      	ldr	r2, [pc, #132]	; (8001764 <HAL_UART_IRQHandler+0x1fc>)
 80016de:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff f83f 	bl	8000768 <HAL_DMA_Abort_IT>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d016      	beq.n	800171e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016fa:	4610      	mov	r0, r2
 80016fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80016fe:	e00e      	b.n	800171e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f843 	bl	800178c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001706:	e00a      	b.n	800171e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f83f 	bl	800178c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800170e:	e006      	b.n	800171e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f83b 	bl	800178c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800171c:	e01d      	b.n	800175a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800171e:	bf00      	nop
    return;
 8001720:	e01b      	b.n	800175a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_UART_IRQHandler+0x1d6>
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f8ac 	bl	8001894 <UART_Transmit_IT>
    return;
 800173c:	e00e      	b.n	800175c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001744:	2b00      	cmp	r3, #0
 8001746:	d009      	beq.n	800175c <HAL_UART_IRQHandler+0x1f4>
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800174e:	2b00      	cmp	r3, #0
 8001750:	d004      	beq.n	800175c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f8ed 	bl	8001932 <UART_EndTransmit_IT>
    return;
 8001758:	e000      	b.n	800175c <HAL_UART_IRQHandler+0x1f4>
    return;
 800175a:	bf00      	nop
  }
}
 800175c:	3720      	adds	r7, #32
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	0800186d 	.word	0x0800186d

08001768 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr

0800179e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	4613      	mov	r3, r2
 80017ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017ae:	e02c      	b.n	800180a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b6:	d028      	beq.n	800180a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d007      	beq.n	80017ce <UART_WaitOnFlagUntilTimeout+0x30>
 80017be:	f7fe febb 	bl	8000538 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d21d      	bcs.n	800180a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80017dc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	695a      	ldr	r2, [r3, #20]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0201 	bic.w	r2, r2, #1
 80017ec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2220      	movs	r2, #32
 80017f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2220      	movs	r2, #32
 80017fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e00f      	b.n	800182a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4013      	ands	r3, r2
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	429a      	cmp	r2, r3
 8001818:	bf0c      	ite	eq
 800181a:	2301      	moveq	r3, #1
 800181c:	2300      	movne	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	429a      	cmp	r2, r3
 8001826:	d0c3      	beq.n	80017b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001848:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	695a      	ldr	r2, [r3, #20]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0201 	bic.w	r2, r2, #1
 8001858:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2220      	movs	r2, #32
 800185e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f7ff ff80 	bl	800178c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b21      	cmp	r3, #33	; 0x21
 80018a6:	d13e      	bne.n	8001926 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018b0:	d114      	bne.n	80018dc <UART_Transmit_IT+0x48>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d110      	bne.n	80018dc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	1c9a      	adds	r2, r3, #2
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	621a      	str	r2, [r3, #32]
 80018da:	e008      	b.n	80018ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	1c59      	adds	r1, r3, #1
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6211      	str	r1, [r2, #32]
 80018e6:	781a      	ldrb	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	4619      	mov	r1, r3
 80018fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10f      	bne.n	8001922 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001910:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001920:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e000      	b.n	8001928 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001926:	2302      	movs	r3, #2
  }
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001948:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2220      	movs	r2, #32
 800194e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ff08 	bl	8001768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b22      	cmp	r3, #34	; 0x22
 8001974:	d170      	bne.n	8001a58 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800197e:	d117      	bne.n	80019b0 <UART_Receive_IT+0x4e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d113      	bne.n	80019b0 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	b29b      	uxth	r3, r3
 800199a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800199e:	b29a      	uxth	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	1c9a      	adds	r2, r3, #2
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
 80019ae:	e026      	b.n	80019fe <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019c2:	d007      	beq.n	80019d4 <UART_Receive_IT+0x72>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10a      	bne.n	80019e2 <UART_Receive_IT+0x80>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d106      	bne.n	80019e2 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	e008      	b.n	80019f4 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	3b01      	subs	r3, #1
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d120      	bne.n	8001a54 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0220 	bic.w	r2, r2, #32
 8001a20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0201 	bic.w	r2, r2, #1
 8001a40:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2220      	movs	r2, #32
 8001a46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fe95 	bl	800177a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	e002      	b.n	8001a5a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	e000      	b.n	8001a5a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8001a58:	2302      	movs	r3, #2
  }
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001a9e:	f023 030c 	bic.w	r3, r3, #12
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	68b9      	ldr	r1, [r7, #8]
 8001aa8:	430b      	orrs	r3, r1
 8001aaa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699a      	ldr	r2, [r3, #24]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a2c      	ldr	r2, [pc, #176]	; (8001b78 <UART_SetConfig+0x114>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d103      	bne.n	8001ad4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001acc:	f7ff fc2e 	bl	800132c <HAL_RCC_GetPCLK2Freq>
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	e002      	b.n	8001ada <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ad4:	f7ff fc16 	bl	8001304 <HAL_RCC_GetPCLK1Freq>
 8001ad8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009a      	lsls	r2, r3, #2
 8001ae4:	441a      	add	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af0:	4a22      	ldr	r2, [pc, #136]	; (8001b7c <UART_SetConfig+0x118>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	095b      	lsrs	r3, r3, #5
 8001af8:	0119      	lsls	r1, r3, #4
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	009a      	lsls	r2, r3, #2
 8001b04:	441a      	add	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <UART_SetConfig+0x118>)
 8001b12:	fba3 0302 	umull	r0, r3, r3, r2
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	2064      	movs	r0, #100	; 0x64
 8001b1a:	fb00 f303 	mul.w	r3, r0, r3
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	3332      	adds	r3, #50	; 0x32
 8001b24:	4a15      	ldr	r2, [pc, #84]	; (8001b7c <UART_SetConfig+0x118>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b30:	4419      	add	r1, r3
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	009a      	lsls	r2, r3, #2
 8001b3c:	441a      	add	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <UART_SetConfig+0x118>)
 8001b4a:	fba3 0302 	umull	r0, r3, r3, r2
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	2064      	movs	r0, #100	; 0x64
 8001b52:	fb00 f303 	mul.w	r3, r0, r3
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	3332      	adds	r3, #50	; 0x32
 8001b5c:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <UART_SetConfig+0x118>)
 8001b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	f003 020f 	and.w	r2, r3, #15
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	440a      	add	r2, r1
 8001b6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	51eb851f 	.word	0x51eb851f

08001b80 <__libc_init_array>:
 8001b80:	b570      	push	{r4, r5, r6, lr}
 8001b82:	2600      	movs	r6, #0
 8001b84:	4d0c      	ldr	r5, [pc, #48]	; (8001bb8 <__libc_init_array+0x38>)
 8001b86:	4c0d      	ldr	r4, [pc, #52]	; (8001bbc <__libc_init_array+0x3c>)
 8001b88:	1b64      	subs	r4, r4, r5
 8001b8a:	10a4      	asrs	r4, r4, #2
 8001b8c:	42a6      	cmp	r6, r4
 8001b8e:	d109      	bne.n	8001ba4 <__libc_init_array+0x24>
 8001b90:	f000 f822 	bl	8001bd8 <_init>
 8001b94:	2600      	movs	r6, #0
 8001b96:	4d0a      	ldr	r5, [pc, #40]	; (8001bc0 <__libc_init_array+0x40>)
 8001b98:	4c0a      	ldr	r4, [pc, #40]	; (8001bc4 <__libc_init_array+0x44>)
 8001b9a:	1b64      	subs	r4, r4, r5
 8001b9c:	10a4      	asrs	r4, r4, #2
 8001b9e:	42a6      	cmp	r6, r4
 8001ba0:	d105      	bne.n	8001bae <__libc_init_array+0x2e>
 8001ba2:	bd70      	pop	{r4, r5, r6, pc}
 8001ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ba8:	4798      	blx	r3
 8001baa:	3601      	adds	r6, #1
 8001bac:	e7ee      	b.n	8001b8c <__libc_init_array+0xc>
 8001bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bb2:	4798      	blx	r3
 8001bb4:	3601      	adds	r6, #1
 8001bb6:	e7f2      	b.n	8001b9e <__libc_init_array+0x1e>
 8001bb8:	08001c18 	.word	0x08001c18
 8001bbc:	08001c18 	.word	0x08001c18
 8001bc0:	08001c18 	.word	0x08001c18
 8001bc4:	08001c1c 	.word	0x08001c1c

08001bc8 <memset>:
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4402      	add	r2, r0
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d100      	bne.n	8001bd2 <memset+0xa>
 8001bd0:	4770      	bx	lr
 8001bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8001bd6:	e7f9      	b.n	8001bcc <memset+0x4>

08001bd8 <_init>:
 8001bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bda:	bf00      	nop
 8001bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bde:	bc08      	pop	{r3}
 8001be0:	469e      	mov	lr, r3
 8001be2:	4770      	bx	lr

08001be4 <_fini>:
 8001be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be6:	bf00      	nop
 8001be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bea:	bc08      	pop	{r3}
 8001bec:	469e      	mov	lr, r3
 8001bee:	4770      	bx	lr
