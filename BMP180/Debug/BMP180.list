
BMP180.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006284  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006398  08006398  00016398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006408  08006408  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006408  08006408  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006408  08006408  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006408  08006408  00016408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800640c  0800640c  0001640c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000074  08006484  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08006484  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c96  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000159e  00000000  00000000  00027d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  000292d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  00029a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ca6  00000000  00000000  0002a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000091a4  00000000  00000000  00040d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082972  00000000  00000000  00049f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc8a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000218c  00000000  00000000  000cc8f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	0800637c 	.word	0x0800637c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	0800637c 	.word	0x0800637c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001018:	f000 fd96 	bl	8001b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101c:	f000 f81e 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001020:	f000 f890 	bl	8001144 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001024:	f000 f860 	bl	80010e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  InitBMP();
 8001028:	f000 f8ba 	bl	80011a0 <InitBMP>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Temperature = BMP180_GetTemp();
 800102c:	f000 f988 	bl	8001340 <BMP180_GetTemp>
 8001030:	4603      	mov	r3, r0
 8001032:	4a07      	ldr	r2, [pc, #28]	; (8001050 <main+0x3c>)
 8001034:	6013      	str	r3, [r2, #0]
	  Pressure = BMP180_GetPress(0);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 fa7c 	bl	8001534 <BMP180_GetPress>
 800103c:	4603      	mov	r3, r0
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <main+0x40>)
 8001040:	6013      	str	r3, [r2, #0]
	  Altitude = BMP180_GetAlt(0);
 8001042:	2000      	movs	r0, #0
 8001044:	f000 fc4c 	bl	80018e0 <BMP180_GetAlt>
 8001048:	4603      	mov	r3, r0
 800104a:	4a03      	ldr	r2, [pc, #12]	; (8001058 <main+0x44>)
 800104c:	6013      	str	r3, [r2, #0]
	  Temperature = BMP180_GetTemp();
 800104e:	e7ed      	b.n	800102c <main+0x18>
 8001050:	200000d8 	.word	0x200000d8
 8001054:	200000dc 	.word	0x200000dc
 8001058:	200000e0 	.word	0x200000e0

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b090      	sub	sp, #64	; 0x40
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0318 	add.w	r3, r7, #24
 8001066:	2228      	movs	r2, #40	; 0x28
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f004 f9ee 	bl	800544c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800107e:	2301      	movs	r3, #1
 8001080:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001086:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108c:	2301      	movs	r3, #1
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001090:	2302      	movs	r3, #2
 8001092:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001094:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001098:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800109a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800109e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a0:	f107 0318 	add.w	r3, r7, #24
 80010a4:	4618      	mov	r0, r3
 80010a6:	f003 fda1 	bl	8004bec <HAL_RCC_OscConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010b0:	f000 fc5c 	bl	800196c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b4:	230f      	movs	r3, #15
 80010b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b8:	2302      	movs	r3, #2
 80010ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2102      	movs	r1, #2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f004 f80c 	bl	80050ec <HAL_RCC_ClockConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010da:	f000 fc47 	bl	800196c <Error_Handler>
  }
}
 80010de:	bf00      	nop
 80010e0:	3740      	adds	r7, #64	; 0x40
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_I2C1_Init+0x50>)
 80010ee:	4a13      	ldr	r2, [pc, #76]	; (800113c <MX_I2C1_Init+0x54>)
 80010f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_I2C1_Init+0x50>)
 80010f4:	4a12      	ldr	r2, [pc, #72]	; (8001140 <MX_I2C1_Init+0x58>)
 80010f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_I2C1_Init+0x50>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_I2C1_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_I2C1_Init+0x50>)
 8001106:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800110a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <MX_I2C1_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_I2C1_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <MX_I2C1_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_I2C1_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_I2C1_Init+0x50>)
 8001126:	f001 f8a9 	bl	800227c <HAL_I2C_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001130:	f000 fc1c 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200000e4 	.word	0x200000e4
 800113c:	40005400 	.word	0x40005400
 8001140:	00061a80 	.word	0x00061a80

08001144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_GPIO_Init+0x58>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	4a13      	ldr	r2, [pc, #76]	; (800119c <MX_GPIO_Init+0x58>)
 8001150:	f043 0320 	orr.w	r3, r3, #32
 8001154:	6193      	str	r3, [r2, #24]
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_GPIO_Init+0x58>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 0320 	and.w	r3, r3, #32
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_GPIO_Init+0x58>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	4a0d      	ldr	r2, [pc, #52]	; (800119c <MX_GPIO_Init+0x58>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	6193      	str	r3, [r2, #24]
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <MX_GPIO_Init+0x58>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <MX_GPIO_Init+0x58>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	4a07      	ldr	r2, [pc, #28]	; (800119c <MX_GPIO_Init+0x58>)
 8001180:	f043 0308 	orr.w	r3, r3, #8
 8001184:	6193      	str	r3, [r2, #24]
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <MX_GPIO_Init+0x58>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	40021000 	.word	0x40021000

080011a0 <InitBMP>:

/* USER CODE BEGIN 4 */
void InitBMP(void){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 80011b8:	23aa      	movs	r3, #170	; 0xaa
 80011ba:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 80011bc:	8afa      	ldrh	r2, [r7, #22]
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
 80011c2:	9302      	str	r3, [sp, #8]
 80011c4:	2316      	movs	r3, #22
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	463b      	mov	r3, r7
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2301      	movs	r3, #1
 80011ce:	21ee      	movs	r1, #238	; 0xee
 80011d0:	4836      	ldr	r0, [pc, #216]	; (80012ac <InitBMP+0x10c>)
 80011d2:	f001 fa91 	bl	80026f8 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 80011d6:	783b      	ldrb	r3, [r7, #0]
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b21a      	sxth	r2, r3
 80011dc:	787b      	ldrb	r3, [r7, #1]
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	4b32      	ldr	r3, [pc, #200]	; (80012b0 <InitBMP+0x110>)
 80011e6:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 80011e8:	78bb      	ldrb	r3, [r7, #2]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	78fb      	ldrb	r3, [r7, #3]
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <InitBMP+0x114>)
 80011f8:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 80011fa:	793b      	ldrb	r3, [r7, #4]
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	b21a      	sxth	r2, r3
 8001200:	797b      	ldrb	r3, [r7, #5]
 8001202:	b21b      	sxth	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b21a      	sxth	r2, r3
 8001208:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <InitBMP+0x118>)
 800120a:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b21a      	sxth	r2, r3
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	b21b      	sxth	r3, r3
 8001216:	4313      	orrs	r3, r2
 8001218:	b21b      	sxth	r3, r3
 800121a:	b29a      	uxth	r2, r3
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <InitBMP+0x11c>)
 800121e:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8001220:	7a3b      	ldrb	r3, [r7, #8]
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b21a      	sxth	r2, r3
 8001226:	7a7b      	ldrb	r3, [r7, #9]
 8001228:	b21b      	sxth	r3, r3
 800122a:	4313      	orrs	r3, r2
 800122c:	b21b      	sxth	r3, r3
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <InitBMP+0x120>)
 8001232:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8001234:	7abb      	ldrb	r3, [r7, #10]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21a      	sxth	r2, r3
 800123a:	7afb      	ldrb	r3, [r7, #11]
 800123c:	b21b      	sxth	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b21b      	sxth	r3, r3
 8001242:	b29a      	uxth	r2, r3
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <InitBMP+0x124>)
 8001246:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8001248:	7b3b      	ldrb	r3, [r7, #12]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	b21a      	sxth	r2, r3
 800124e:	7b7b      	ldrb	r3, [r7, #13]
 8001250:	b21b      	sxth	r3, r3
 8001252:	4313      	orrs	r3, r2
 8001254:	b21a      	sxth	r2, r3
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <InitBMP+0x128>)
 8001258:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 800125a:	7bbb      	ldrb	r3, [r7, #14]
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	b21a      	sxth	r2, r3
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b21a      	sxth	r2, r3
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <InitBMP+0x12c>)
 800126a:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 800126c:	7c3b      	ldrb	r3, [r7, #16]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	b21a      	sxth	r2, r3
 8001272:	7c7b      	ldrb	r3, [r7, #17]
 8001274:	b21b      	sxth	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	b21a      	sxth	r2, r3
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <InitBMP+0x130>)
 800127c:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 800127e:	7cbb      	ldrb	r3, [r7, #18]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	b21a      	sxth	r2, r3
 8001284:	7cfb      	ldrb	r3, [r7, #19]
 8001286:	b21b      	sxth	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b21a      	sxth	r2, r3
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <InitBMP+0x134>)
 800128e:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001290:	7d3b      	ldrb	r3, [r7, #20]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b21a      	sxth	r2, r3
 8001296:	7d7b      	ldrb	r3, [r7, #21]
 8001298:	b21b      	sxth	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b21a      	sxth	r2, r3
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <InitBMP+0x138>)
 80012a0:	801a      	strh	r2, [r3, #0]
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200000e4 	.word	0x200000e4
 80012b0:	20000090 	.word	0x20000090
 80012b4:	20000092 	.word	0x20000092
 80012b8:	20000094 	.word	0x20000094
 80012bc:	20000096 	.word	0x20000096
 80012c0:	20000098 	.word	0x20000098
 80012c4:	2000009a 	.word	0x2000009a
 80012c8:	2000009c 	.word	0x2000009c
 80012cc:	2000009e 	.word	0x2000009e
 80012d0:	200000a0 	.word	0x200000a0
 80012d4:	200000a2 	.word	0x200000a2
 80012d8:	200000a4 	.word	0x200000a4

080012dc <Get_UTemp>:

uint16_t Get_UTemp (void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 80012e2:	232e      	movs	r3, #46	; 0x2e
 80012e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 80012e6:	2300      	movs	r3, #0
 80012e8:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	2301      	movs	r3, #1
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	1dfb      	adds	r3, r7, #7
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	22f4      	movs	r2, #244	; 0xf4
 80012fc:	21ee      	movs	r1, #238	; 0xee
 80012fe:	480f      	ldr	r0, [pc, #60]	; (800133c <Get_UTemp+0x60>)
 8001300:	f001 f900 	bl	8002504 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 8001304:	2005      	movs	r0, #5
 8001306:	f000 fc81 	bl	8001c0c <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	9302      	str	r3, [sp, #8]
 8001310:	2302      	movs	r3, #2
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	22f6      	movs	r2, #246	; 0xf6
 800131c:	21ee      	movs	r1, #238	; 0xee
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <Get_UTemp+0x60>)
 8001320:	f001 f9ea 	bl	80026f8 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001324:	793b      	ldrb	r3, [r7, #4]
 8001326:	b29b      	uxth	r3, r3
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	b29a      	uxth	r2, r3
 800132c:	797b      	ldrb	r3, [r7, #5]
 800132e:	b29b      	uxth	r3, r3
 8001330:	4413      	add	r3, r2
 8001332:	b29b      	uxth	r3, r3
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200000e4 	.word	0x200000e4

08001340 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 8001340:	b5b0      	push	{r4, r5, r7, lr}
 8001342:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 8001344:	f7ff ffca 	bl	80012dc <Get_UTemp>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <BMP180_GetTemp+0x104>)
 800134e:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001350:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <BMP180_GetTemp+0x104>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a3c      	ldr	r2, [pc, #240]	; (8001448 <BMP180_GetTemp+0x108>)
 8001356:	8812      	ldrh	r2, [r2, #0]
 8001358:	1a9b      	subs	r3, r3, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f84a 	bl	80003f4 <__aeabi_i2d>
 8001360:	4604      	mov	r4, r0
 8001362:	460d      	mov	r5, r1
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <BMP180_GetTemp+0x10c>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f843 	bl	80003f4 <__aeabi_i2d>
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	4b37      	ldr	r3, [pc, #220]	; (8001450 <BMP180_GetTemp+0x110>)
 8001374:	f7ff f9d2 	bl	800071c <__aeabi_ddiv>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4620      	mov	r0, r4
 800137e:	4629      	mov	r1, r5
 8001380:	f7ff f8a2 	bl	80004c8 <__aeabi_dmul>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fb4c 	bl	8000a28 <__aeabi_d2iz>
 8001390:	4603      	mov	r3, r0
 8001392:	4a30      	ldr	r2, [pc, #192]	; (8001454 <BMP180_GetTemp+0x114>)
 8001394:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001396:	4b30      	ldr	r3, [pc, #192]	; (8001458 <BMP180_GetTemp+0x118>)
 8001398:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f829 	bl	80003f4 <__aeabi_i2d>
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4b2d      	ldr	r3, [pc, #180]	; (800145c <BMP180_GetTemp+0x11c>)
 80013a8:	f7ff f88e 	bl	80004c8 <__aeabi_dmul>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4614      	mov	r4, r2
 80013b2:	461d      	mov	r5, r3
 80013b4:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <BMP180_GetTemp+0x120>)
 80013b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b25      	ldr	r3, [pc, #148]	; (8001454 <BMP180_GetTemp+0x114>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4413      	add	r3, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f816 	bl	80003f4 <__aeabi_i2d>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4620      	mov	r0, r4
 80013ce:	4629      	mov	r1, r5
 80013d0:	f7ff f9a4 	bl	800071c <__aeabi_ddiv>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	f7ff fb24 	bl	8000a28 <__aeabi_d2iz>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4a20      	ldr	r2, [pc, #128]	; (8001464 <BMP180_GetTemp+0x124>)
 80013e4:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <BMP180_GetTemp+0x114>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <BMP180_GetTemp+0x124>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a1d      	ldr	r2, [pc, #116]	; (8001468 <BMP180_GetTemp+0x128>)
 80013f2:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <BMP180_GetTemp+0x128>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3308      	adds	r3, #8
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7fe fffa 	bl	80003f4 <__aeabi_i2d>
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <BMP180_GetTemp+0x12c>)
 8001406:	f7ff f989 	bl	800071c <__aeabi_ddiv>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f7ff fb09 	bl	8000a28 <__aeabi_d2iz>
 8001416:	4603      	mov	r3, r0
 8001418:	4a15      	ldr	r2, [pc, #84]	; (8001470 <BMP180_GetTemp+0x130>)
 800141a:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <BMP180_GetTemp+0x130>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7fe ffe7 	bl	80003f4 <__aeabi_i2d>
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <BMP180_GetTemp+0x134>)
 800142c:	f7ff f976 	bl	800071c <__aeabi_ddiv>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fb3e 	bl	8000ab8 <__aeabi_d2f>
 800143c:	4603      	mov	r3, r0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bdb0      	pop	{r4, r5, r7, pc}
 8001442:	bf00      	nop
 8001444:	200000a8 	.word	0x200000a8
 8001448:	2000009a 	.word	0x2000009a
 800144c:	20000098 	.word	0x20000098
 8001450:	40e00000 	.word	0x40e00000
 8001454:	200000b0 	.word	0x200000b0
 8001458:	200000a2 	.word	0x200000a2
 800145c:	40a00000 	.word	0x40a00000
 8001460:	200000a4 	.word	0x200000a4
 8001464:	200000b4 	.word	0x200000b4
 8001468:	200000c0 	.word	0x200000c0
 800146c:	40300000 	.word	0x40300000
 8001470:	200000d4 	.word	0x200000d4
 8001474:	40240000 	.word	0x40240000

08001478 <Get_UPress>:

uint32_t Get_UPress (int oss)   // over sampling settings 0,1,2,3
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af04      	add	r7, sp, #16
 800147e:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	019b      	lsls	r3, r3, #6
 8001486:	b2db      	uxtb	r3, r3
 8001488:	3334      	adds	r3, #52	; 0x34
 800148a:	b2db      	uxtb	r3, r3
 800148c:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <Get_UPress+0xb4>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	81bb      	strh	r3, [r7, #12]
 8001494:	2300      	movs	r3, #0
 8001496:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149c:	9302      	str	r3, [sp, #8]
 800149e:	2301      	movs	r3, #1
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	f107 030f 	add.w	r3, r7, #15
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2301      	movs	r3, #1
 80014aa:	22f4      	movs	r2, #244	; 0xf4
 80014ac:	21ee      	movs	r1, #238	; 0xee
 80014ae:	4820      	ldr	r0, [pc, #128]	; (8001530 <Get_UPress+0xb8>)
 80014b0:	f001 f828 	bl	8002504 <HAL_I2C_Mem_Write>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d81a      	bhi.n	80014f0 <Get_UPress+0x78>
 80014ba:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <Get_UPress+0x48>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	080014d1 	.word	0x080014d1
 80014c4:	080014d9 	.word	0x080014d9
 80014c8:	080014e1 	.word	0x080014e1
 80014cc:	080014e9 	.word	0x080014e9
	switch (oss)
	{
		case (0):
			HAL_Delay (5);
 80014d0:	2005      	movs	r0, #5
 80014d2:	f000 fb9b 	bl	8001c0c <HAL_Delay>
			break;
 80014d6:	e00b      	b.n	80014f0 <Get_UPress+0x78>
		case (1):
			HAL_Delay (8);
 80014d8:	2008      	movs	r0, #8
 80014da:	f000 fb97 	bl	8001c0c <HAL_Delay>
			break;
 80014de:	e007      	b.n	80014f0 <Get_UPress+0x78>
		case (2):
			HAL_Delay (14);
 80014e0:	200e      	movs	r0, #14
 80014e2:	f000 fb93 	bl	8001c0c <HAL_Delay>
			break;
 80014e6:	e003      	b.n	80014f0 <Get_UPress+0x78>
		case (3):
			HAL_Delay (26);
 80014e8:	201a      	movs	r0, #26
 80014ea:	f000 fb8f 	bl	8001c0c <HAL_Delay>
			break;
 80014ee:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 80014f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f4:	9302      	str	r3, [sp, #8]
 80014f6:	2303      	movs	r3, #3
 80014f8:	9301      	str	r3, [sp, #4]
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2301      	movs	r3, #1
 8001502:	22f6      	movs	r2, #246	; 0xf6
 8001504:	21ee      	movs	r1, #238	; 0xee
 8001506:	480a      	ldr	r0, [pc, #40]	; (8001530 <Get_UPress+0xb8>)
 8001508:	f001 f8f6 	bl	80026f8 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 800150c:	7b3b      	ldrb	r3, [r7, #12]
 800150e:	041a      	lsls	r2, r3, #16
 8001510:	7b7b      	ldrb	r3, [r7, #13]
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	4413      	add	r3, r2
 8001516:	7bba      	ldrb	r2, [r7, #14]
 8001518:	441a      	add	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f1c3 0308 	rsb	r3, r3, #8
 8001520:	fa42 f303 	asr.w	r3, r2, r3
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	08006398 	.word	0x08006398
 8001530:	200000e4 	.word	0x200000e4

08001534 <BMP180_GetPress>:

float BMP180_GetPress (int oss)
{
 8001534:	b5b0      	push	{r4, r5, r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff9b 	bl	8001478 <Get_UPress>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	4b7f      	ldr	r3, [pc, #508]	; (8001744 <BMP180_GetPress+0x210>)
 8001548:	601a      	str	r2, [r3, #0]

	B6 = B5 - 4000;
 800154a:	4b7f      	ldr	r3, [pc, #508]	; (8001748 <BMP180_GetPress+0x214>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001552:	4a7e      	ldr	r2, [pc, #504]	; (800174c <BMP180_GetPress+0x218>)
 8001554:	6013      	str	r3, [r2, #0]

	X1 = (B2*(B6*B6/pow(2,12)))/pow(2,11);
 8001556:	4b7e      	ldr	r3, [pc, #504]	; (8001750 <BMP180_GetPress+0x21c>)
 8001558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe ff49 	bl	80003f4 <__aeabi_i2d>
 8001562:	4604      	mov	r4, r0
 8001564:	460d      	mov	r5, r1
 8001566:	4b79      	ldr	r3, [pc, #484]	; (800174c <BMP180_GetPress+0x218>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a78      	ldr	r2, [pc, #480]	; (800174c <BMP180_GetPress+0x218>)
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ff3e 	bl	80003f4 <__aeabi_i2d>
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	4b75      	ldr	r3, [pc, #468]	; (8001754 <BMP180_GetPress+0x220>)
 800157e:	f7ff f8cd 	bl	800071c <__aeabi_ddiv>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4620      	mov	r0, r4
 8001588:	4629      	mov	r1, r5
 800158a:	f7fe ff9d 	bl	80004c8 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	4b6f      	ldr	r3, [pc, #444]	; (8001758 <BMP180_GetPress+0x224>)
 800159c:	f7ff f8be 	bl	800071c <__aeabi_ddiv>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	f7ff fa3e 	bl	8000a28 <__aeabi_d2iz>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4a6b      	ldr	r2, [pc, #428]	; (800175c <BMP180_GetPress+0x228>)
 80015b0:	6013      	str	r3, [r2, #0]
	X2 = AC2 * B6 / pow(2,11);
 80015b2:	4b6b      	ldr	r3, [pc, #428]	; (8001760 <BMP180_GetPress+0x22c>)
 80015b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b64      	ldr	r3, [pc, #400]	; (800174c <BMP180_GetPress+0x218>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	fb03 f302 	mul.w	r3, r3, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ff16 	bl	80003f4 <__aeabi_i2d>
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	4b62      	ldr	r3, [pc, #392]	; (8001758 <BMP180_GetPress+0x224>)
 80015ce:	f7ff f8a5 	bl	800071c <__aeabi_ddiv>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff fa25 	bl	8000a28 <__aeabi_d2iz>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a60      	ldr	r2, [pc, #384]	; (8001764 <BMP180_GetPress+0x230>)
 80015e2:	6013      	str	r3, [r2, #0]
	X3 = X1 + X2;
 80015e4:	4b5d      	ldr	r3, [pc, #372]	; (800175c <BMP180_GetPress+0x228>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b5e      	ldr	r3, [pc, #376]	; (8001764 <BMP180_GetPress+0x230>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4413      	add	r3, r2
 80015ee:	4a5e      	ldr	r2, [pc, #376]	; (8001768 <BMP180_GetPress+0x234>)
 80015f0:	6013      	str	r3, [r2, #0]

	B3 = (((AC1*4+X3) << oss) + 2) / 4;
 80015f2:	4b5e      	ldr	r3, [pc, #376]	; (800176c <BMP180_GetPress+0x238>)
 80015f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f8:	009a      	lsls	r2, r3, #2
 80015fa:	4b5b      	ldr	r3, [pc, #364]	; (8001768 <BMP180_GetPress+0x234>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	441a      	add	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	3302      	adds	r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	da00      	bge.n	800160e <BMP180_GetPress+0xda>
 800160c:	3303      	adds	r3, #3
 800160e:	109b      	asrs	r3, r3, #2
 8001610:	461a      	mov	r2, r3
 8001612:	4b57      	ldr	r3, [pc, #348]	; (8001770 <BMP180_GetPress+0x23c>)
 8001614:	601a      	str	r2, [r3, #0]

	X1 = AC3 * B6 / pow(2,13);
 8001616:	4b57      	ldr	r3, [pc, #348]	; (8001774 <BMP180_GetPress+0x240>)
 8001618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161c:	461a      	mov	r2, r3
 800161e:	4b4b      	ldr	r3, [pc, #300]	; (800174c <BMP180_GetPress+0x218>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	fb03 f302 	mul.w	r3, r3, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fee4 	bl	80003f4 <__aeabi_i2d>
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	4b51      	ldr	r3, [pc, #324]	; (8001778 <BMP180_GetPress+0x244>)
 8001632:	f7ff f873 	bl	800071c <__aeabi_ddiv>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff f9f3 	bl	8000a28 <__aeabi_d2iz>
 8001642:	4603      	mov	r3, r0
 8001644:	4a45      	ldr	r2, [pc, #276]	; (800175c <BMP180_GetPress+0x228>)
 8001646:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6 * B6 / pow(2,12))) / pow(2,16);
 8001648:	4b4c      	ldr	r3, [pc, #304]	; (800177c <BMP180_GetPress+0x248>)
 800164a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fed0 	bl	80003f4 <__aeabi_i2d>
 8001654:	4604      	mov	r4, r0
 8001656:	460d      	mov	r5, r1
 8001658:	4b3c      	ldr	r3, [pc, #240]	; (800174c <BMP180_GetPress+0x218>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a3b      	ldr	r2, [pc, #236]	; (800174c <BMP180_GetPress+0x218>)
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	fb02 f303 	mul.w	r3, r2, r3
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe fec5 	bl	80003f4 <__aeabi_i2d>
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	4b39      	ldr	r3, [pc, #228]	; (8001754 <BMP180_GetPress+0x220>)
 8001670:	f7ff f854 	bl	800071c <__aeabi_ddiv>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7fe ff24 	bl	80004c8 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4b3c      	ldr	r3, [pc, #240]	; (8001780 <BMP180_GetPress+0x24c>)
 800168e:	f7ff f845 	bl	800071c <__aeabi_ddiv>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f7ff f9c5 	bl	8000a28 <__aeabi_d2iz>
 800169e:	4603      	mov	r3, r0
 80016a0:	4a30      	ldr	r2, [pc, #192]	; (8001764 <BMP180_GetPress+0x230>)
 80016a2:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2) / pow(2,2);
 80016a4:	4b2d      	ldr	r3, [pc, #180]	; (800175c <BMP180_GetPress+0x228>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b2e      	ldr	r3, [pc, #184]	; (8001764 <BMP180_GetPress+0x230>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4413      	add	r3, r2
 80016ae:	3302      	adds	r3, #2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe fe9f 	bl	80003f4 <__aeabi_i2d>
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b32      	ldr	r3, [pc, #200]	; (8001784 <BMP180_GetPress+0x250>)
 80016bc:	f7ff f82e 	bl	800071c <__aeabi_ddiv>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f7ff f9ae 	bl	8000a28 <__aeabi_d2iz>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4a26      	ldr	r2, [pc, #152]	; (8001768 <BMP180_GetPress+0x234>)
 80016d0:	6013      	str	r3, [r2, #0]

	B4 = AC4 * (unsigned long)(X3 + 32768) / pow(2,15);
 80016d2:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <BMP180_GetPress+0x254>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b23      	ldr	r3, [pc, #140]	; (8001768 <BMP180_GetPress+0x234>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80016e0:	fb03 f302 	mul.w	r3, r3, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fe75 	bl	80003d4 <__aeabi_ui2d>
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	4b27      	ldr	r3, [pc, #156]	; (800178c <BMP180_GetPress+0x258>)
 80016f0:	f7ff f814 	bl	800071c <__aeabi_ddiv>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	f7ff f9bc 	bl	8000a78 <__aeabi_d2uiz>
 8001700:	4603      	mov	r3, r0
 8001702:	4a23      	ldr	r2, [pc, #140]	; (8001790 <BMP180_GetPress+0x25c>)
 8001704:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP - B3)* (50000 >> oss);
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <BMP180_GetPress+0x210>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <BMP180_GetPress+0x23c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	fa41 f202 	asr.w	r2, r1, r2
 800171c:	fb02 f303 	mul.w	r3, r2, r3
 8001720:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <BMP180_GetPress+0x260>)
 8001722:	6013      	str	r3, [r2, #0]

	if(B7 < 0x80000000)
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <BMP180_GetPress+0x260>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db37      	blt.n	800179c <BMP180_GetPress+0x268>
		Press = (B7 * 2) / B4;
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <BMP180_GetPress+0x260>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	005a      	lsls	r2, r3, #1
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <BMP180_GetPress+0x25c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	461a      	mov	r2, r3
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <BMP180_GetPress+0x264>)
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e036      	b.n	80017b0 <BMP180_GetPress+0x27c>
 8001742:	bf00      	nop
 8001744:	200000ac 	.word	0x200000ac
 8001748:	200000c0 	.word	0x200000c0
 800174c:	200000c8 	.word	0x200000c8
 8001750:	2000009e 	.word	0x2000009e
 8001754:	40b00000 	.word	0x40b00000
 8001758:	40a00000 	.word	0x40a00000
 800175c:	200000b0 	.word	0x200000b0
 8001760:	20000092 	.word	0x20000092
 8001764:	200000b4 	.word	0x200000b4
 8001768:	200000b8 	.word	0x200000b8
 800176c:	20000090 	.word	0x20000090
 8001770:	200000bc 	.word	0x200000bc
 8001774:	20000094 	.word	0x20000094
 8001778:	40c00000 	.word	0x40c00000
 800177c:	2000009c 	.word	0x2000009c
 8001780:	40f00000 	.word	0x40f00000
 8001784:	40100000 	.word	0x40100000
 8001788:	20000096 	.word	0x20000096
 800178c:	40e00000 	.word	0x40e00000
 8001790:	200000c4 	.word	0x200000c4
 8001794:	200000cc 	.word	0x200000cc
 8001798:	200000d0 	.word	0x200000d0
	else
		Press = (B7 / B4) * 2;
 800179c:	4b46      	ldr	r3, [pc, #280]	; (80018b8 <BMP180_GetPress+0x384>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b46      	ldr	r3, [pc, #280]	; (80018bc <BMP180_GetPress+0x388>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b44      	ldr	r3, [pc, #272]	; (80018c0 <BMP180_GetPress+0x38c>)
 80017ae:	601a      	str	r2, [r3, #0]

	X1 = (Press / pow(2,8)) * (Press / pow(2,8));
 80017b0:	4b43      	ldr	r3, [pc, #268]	; (80018c0 <BMP180_GetPress+0x38c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fe1d 	bl	80003f4 <__aeabi_i2d>
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <BMP180_GetPress+0x390>)
 80017c0:	f7fe ffac 	bl	800071c <__aeabi_ddiv>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4614      	mov	r4, r2
 80017ca:	461d      	mov	r5, r3
 80017cc:	4b3c      	ldr	r3, [pc, #240]	; (80018c0 <BMP180_GetPress+0x38c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fe0f 	bl	80003f4 <__aeabi_i2d>
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	4b3a      	ldr	r3, [pc, #232]	; (80018c4 <BMP180_GetPress+0x390>)
 80017dc:	f7fe ff9e 	bl	800071c <__aeabi_ddiv>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4620      	mov	r0, r4
 80017e6:	4629      	mov	r1, r5
 80017e8:	f7fe fe6e 	bl	80004c8 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7ff f918 	bl	8000a28 <__aeabi_d2iz>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a33      	ldr	r2, [pc, #204]	; (80018c8 <BMP180_GetPress+0x394>)
 80017fc:	6013      	str	r3, [r2, #0]
	X1 = (X1 * 3038) / pow (2,16);
 80017fe:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <BMP180_GetPress+0x394>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f640 32de 	movw	r2, #3038	; 0xbde
 8001806:	fb02 f303 	mul.w	r3, r2, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fdf2 	bl	80003f4 <__aeabi_i2d>
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <BMP180_GetPress+0x398>)
 8001816:	f7fe ff81 	bl	800071c <__aeabi_ddiv>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f7ff f901 	bl	8000a28 <__aeabi_d2iz>
 8001826:	4603      	mov	r3, r0
 8001828:	4a27      	ldr	r2, [pc, #156]	; (80018c8 <BMP180_GetPress+0x394>)
 800182a:	6013      	str	r3, [r2, #0]
	X2 = (-7357 * Press) / pow(2,16);
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <BMP180_GetPress+0x38c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <BMP180_GetPress+0x39c>)
 8001832:	fb02 f303 	mul.w	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fddc 	bl	80003f4 <__aeabi_i2d>
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	4b22      	ldr	r3, [pc, #136]	; (80018cc <BMP180_GetPress+0x398>)
 8001842:	f7fe ff6b 	bl	800071c <__aeabi_ddiv>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f8eb 	bl	8000a28 <__aeabi_d2iz>
 8001852:	4603      	mov	r3, r0
 8001854:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <BMP180_GetPress+0x3a0>)
 8001856:	6013      	str	r3, [r2, #0]

	Press = Press + (X1 + X2 + 3791) / pow(2,4);
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <BMP180_GetPress+0x38c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fdc9 	bl	80003f4 <__aeabi_i2d>
 8001862:	4604      	mov	r4, r0
 8001864:	460d      	mov	r5, r1
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <BMP180_GetPress+0x394>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <BMP180_GetPress+0x3a0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4413      	add	r3, r2
 8001870:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fdbd 	bl	80003f4 <__aeabi_i2d>
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <BMP180_GetPress+0x3a4>)
 8001880:	f7fe ff4c 	bl	800071c <__aeabi_ddiv>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4620      	mov	r0, r4
 800188a:	4629      	mov	r1, r5
 800188c:	f7fe fc66 	bl	800015c <__adddf3>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	f7ff f8c6 	bl	8000a28 <__aeabi_d2iz>
 800189c:	4603      	mov	r3, r0
 800189e:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <BMP180_GetPress+0x38c>)
 80018a0:	6013      	str	r3, [r2, #0]

	return Press;
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <BMP180_GetPress+0x38c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fa10 	bl	8000ccc <__aeabi_i2f>
 80018ac:	4603      	mov	r3, r0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bdb0      	pop	{r4, r5, r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200000cc 	.word	0x200000cc
 80018bc:	200000c4 	.word	0x200000c4
 80018c0:	200000d0 	.word	0x200000d0
 80018c4:	40700000 	.word	0x40700000
 80018c8:	200000b0 	.word	0x200000b0
 80018cc:	40f00000 	.word	0x40f00000
 80018d0:	ffffe343 	.word	0xffffe343
 80018d4:	200000b4 	.word	0x200000b4
 80018d8:	40300000 	.word	0x40300000
 80018dc:	00000000 	.word	0x00000000

080018e0 <BMP180_GetAlt>:



float BMP180_GetAlt (int oss)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff fe23 	bl	8001534 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <BMP180_GetAlt+0x80>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f9ea 	bl	8000ccc <__aeabi_i2f>
 80018f8:	4603      	mov	r3, r0
 80018fa:	491a      	ldr	r1, [pc, #104]	; (8001964 <BMP180_GetAlt+0x84>)
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff faed 	bl	8000edc <__aeabi_fdiv>
 8001902:	4603      	mov	r3, r0
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fd87 	bl	8000418 <__aeabi_f2d>
 800190a:	a311      	add	r3, pc, #68	; (adr r3, 8001950 <BMP180_GetAlt+0x70>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f003 fda4 	bl	800545c <pow>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	f04f 0000 	mov.w	r0, #0
 800191c:	4912      	ldr	r1, [pc, #72]	; (8001968 <BMP180_GetAlt+0x88>)
 800191e:	f7fe fc1b 	bl	8000158 <__aeabi_dsub>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	a30b      	add	r3, pc, #44	; (adr r3, 8001958 <BMP180_GetAlt+0x78>)
 800192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001930:	f7fe fdca 	bl	80004c8 <__aeabi_dmul>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff f8bc 	bl	8000ab8 <__aeabi_d2f>
 8001940:	4603      	mov	r3, r0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	f3af 8000 	nop.w
 8001950:	ccd745e4 	.word	0xccd745e4
 8001954:	3fc85b95 	.word	0x3fc85b95
 8001958:	00000000 	.word	0x00000000
 800195c:	40e5a540 	.word	0x40e5a540
 8001960:	200000d0 	.word	0x200000d0
 8001964:	47c5e680 	.word	0x47c5e680
 8001968:	3ff00000 	.word	0x3ff00000

0800196c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001970:	b672      	cpsid	i
}
 8001972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001974:	e7fe      	b.n	8001974 <Error_Handler+0x8>
	...

08001978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_MspInit+0x5c>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <HAL_MspInit+0x5c>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6193      	str	r3, [r2, #24]
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_MspInit+0x5c>)
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <HAL_MspInit+0x5c>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <HAL_MspInit+0x5c>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a0:	61d3      	str	r3, [r2, #28]
 80019a2:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <HAL_MspInit+0x5c>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <HAL_MspInit+0x60>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_MspInit+0x60>)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40010000 	.word	0x40010000

080019dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1d      	ldr	r2, [pc, #116]	; (8001a6c <HAL_I2C_MspInit+0x90>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d133      	bne.n	8001a64 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <HAL_I2C_MspInit+0x94>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <HAL_I2C_MspInit+0x94>)
 8001a02:	f043 0308 	orr.w	r3, r3, #8
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <HAL_I2C_MspInit+0x94>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a14:	23c0      	movs	r3, #192	; 0xc0
 8001a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a18:	2312      	movs	r3, #18
 8001a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	4619      	mov	r1, r3
 8001a26:	4813      	ldr	r0, [pc, #76]	; (8001a74 <HAL_I2C_MspInit+0x98>)
 8001a28:	f000 faa4 	bl	8001f74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a2c:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_I2C_MspInit+0x94>)
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <HAL_I2C_MspInit+0x94>)
 8001a32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a36:	61d3      	str	r3, [r2, #28]
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_I2C_MspInit+0x94>)
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2100      	movs	r1, #0
 8001a48:	201f      	movs	r0, #31
 8001a4a:	f000 f9da 	bl	8001e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a4e:	201f      	movs	r0, #31
 8001a50:	f000 f9f3 	bl	8001e3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2100      	movs	r1, #0
 8001a58:	2020      	movs	r0, #32
 8001a5a:	f000 f9d2 	bl	8001e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a5e:	2020      	movs	r0, #32
 8001a60:	f000 f9eb 	bl	8001e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a64:	bf00      	nop
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40005400 	.word	0x40005400
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010c00 	.word	0x40010c00

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <NMI_Handler+0x4>

08001a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001abe:	f000 f889 	bl	8001bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <I2C1_EV_IRQHandler+0x10>)
 8001ace:	f001 f87b 	bl	8002bc8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200000e4 	.word	0x200000e4

08001adc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <I2C1_ER_IRQHandler+0x10>)
 8001ae2:	f001 f9de 	bl	8002ea2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200000e4 	.word	0x200000e4

08001af0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001afc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001afe:	e003      	b.n	8001b08 <LoopCopyDataInit>

08001b00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b06:	3104      	adds	r1, #4

08001b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b08:	480a      	ldr	r0, [pc, #40]	; (8001b34 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b10:	d3f6      	bcc.n	8001b00 <CopyDataInit>
  ldr r2, =_sbss
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b14:	e002      	b.n	8001b1c <LoopFillZerobss>

08001b16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b18:	f842 3b04 	str.w	r3, [r2], #4

08001b1c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b20:	d3f9      	bcc.n	8001b16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b22:	f7ff ffe5 	bl	8001af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b26:	f003 fc6d 	bl	8005404 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b2a:	f7ff fa73 	bl	8001014 <main>
  bx lr
 8001b2e:	4770      	bx	lr
  ldr r3, =_sidata
 8001b30:	08006410 	.word	0x08006410
  ldr r0, =_sdata
 8001b34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b38:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001b3c:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001b40:	2000013c 	.word	0x2000013c

08001b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b44:	e7fe      	b.n	8001b44 <ADC1_2_IRQHandler>
	...

08001b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_Init+0x28>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <HAL_Init+0x28>)
 8001b52:	f043 0310 	orr.w	r3, r3, #16
 8001b56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f000 f947 	bl	8001dec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f000 f808 	bl	8001b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b64:	f7ff ff08 	bl	8001978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40022000 	.word	0x40022000

08001b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_InitTick+0x54>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_InitTick+0x58>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f95f 	bl	8001e56 <HAL_SYSTICK_Config>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00e      	b.n	8001bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b0f      	cmp	r3, #15
 8001ba6:	d80a      	bhi.n	8001bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f000 f927 	bl	8001e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb4:	4a06      	ldr	r2, [pc, #24]	; (8001bd0 <HAL_InitTick+0x5c>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e000      	b.n	8001bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	20000004 	.word	0x20000004

08001bd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_IncTick+0x1c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_IncTick+0x20>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	4a03      	ldr	r2, [pc, #12]	; (8001bf4 <HAL_IncTick+0x20>)
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	20000008 	.word	0x20000008
 8001bf4:	20000138 	.word	0x20000138

08001bf8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bfc:	4b02      	ldr	r3, [pc, #8]	; (8001c08 <HAL_GetTick+0x10>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	20000138 	.word	0x20000138

08001c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff fff0 	bl	8001bf8 <HAL_GetTick>
 8001c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d005      	beq.n	8001c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_Delay+0x44>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c32:	bf00      	nop
 8001c34:	f7ff ffe0 	bl	8001bf8 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d8f7      	bhi.n	8001c34 <HAL_Delay+0x28>
  {
  }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000008 	.word	0x20000008

08001c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c70:	4013      	ands	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c86:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	60d3      	str	r3, [r2, #12]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	f003 0307 	and.w	r3, r3, #7
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	db0b      	blt.n	8001ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	4906      	ldr	r1, [pc, #24]	; (8001cec <__NVIC_EnableIRQ+0x34>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	2001      	movs	r0, #1
 8001cda:	fa00 f202 	lsl.w	r2, r0, r2
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	; (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	; (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
         );
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db8:	d301      	bcc.n	8001dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00f      	b.n	8001dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <SysTick_Config+0x40>)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc6:	210f      	movs	r1, #15
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f7ff ff90 	bl	8001cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <SysTick_Config+0x40>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd6:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <SysTick_Config+0x40>)
 8001dd8:	2207      	movs	r2, #7
 8001dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	e000e010 	.word	0xe000e010

08001dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ff2d 	bl	8001c54 <__NVIC_SetPriorityGrouping>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	4603      	mov	r3, r0
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e14:	f7ff ff42 	bl	8001c9c <__NVIC_GetPriorityGrouping>
 8001e18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	6978      	ldr	r0, [r7, #20]
 8001e20:	f7ff ff90 	bl	8001d44 <NVIC_EncodePriority>
 8001e24:	4602      	mov	r2, r0
 8001e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff5f 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff35 	bl	8001cb8 <__NVIC_EnableIRQ>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ffa2 	bl	8001da8 <SysTick_Config>
 8001e64:	4603      	mov	r3, r0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d005      	beq.n	8001e92 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2204      	movs	r2, #4
 8001e8a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	73fb      	strb	r3, [r7, #15]
 8001e90:	e051      	b.n	8001f36 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 020e 	bic.w	r2, r2, #14
 8001ea0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0201 	bic.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a22      	ldr	r2, [pc, #136]	; (8001f40 <HAL_DMA_Abort_IT+0xd0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d029      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xa0>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a20      	ldr	r2, [pc, #128]	; (8001f44 <HAL_DMA_Abort_IT+0xd4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d022      	beq.n	8001f0c <HAL_DMA_Abort_IT+0x9c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1f      	ldr	r2, [pc, #124]	; (8001f48 <HAL_DMA_Abort_IT+0xd8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d01a      	beq.n	8001f06 <HAL_DMA_Abort_IT+0x96>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1d      	ldr	r2, [pc, #116]	; (8001f4c <HAL_DMA_Abort_IT+0xdc>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d012      	beq.n	8001f00 <HAL_DMA_Abort_IT+0x90>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <HAL_DMA_Abort_IT+0xe0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00a      	beq.n	8001efa <HAL_DMA_Abort_IT+0x8a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a1a      	ldr	r2, [pc, #104]	; (8001f54 <HAL_DMA_Abort_IT+0xe4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d102      	bne.n	8001ef4 <HAL_DMA_Abort_IT+0x84>
 8001eee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ef2:	e00e      	b.n	8001f12 <HAL_DMA_Abort_IT+0xa2>
 8001ef4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ef8:	e00b      	b.n	8001f12 <HAL_DMA_Abort_IT+0xa2>
 8001efa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001efe:	e008      	b.n	8001f12 <HAL_DMA_Abort_IT+0xa2>
 8001f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f04:	e005      	b.n	8001f12 <HAL_DMA_Abort_IT+0xa2>
 8001f06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f0a:	e002      	b.n	8001f12 <HAL_DMA_Abort_IT+0xa2>
 8001f0c:	2310      	movs	r3, #16
 8001f0e:	e000      	b.n	8001f12 <HAL_DMA_Abort_IT+0xa2>
 8001f10:	2301      	movs	r3, #1
 8001f12:	4a11      	ldr	r2, [pc, #68]	; (8001f58 <HAL_DMA_Abort_IT+0xe8>)
 8001f14:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	4798      	blx	r3
    } 
  }
  return status;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40020008 	.word	0x40020008
 8001f44:	4002001c 	.word	0x4002001c
 8001f48:	40020030 	.word	0x40020030
 8001f4c:	40020044 	.word	0x40020044
 8001f50:	40020058 	.word	0x40020058
 8001f54:	4002006c 	.word	0x4002006c
 8001f58:	40020000 	.word	0x40020000

08001f5c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b08b      	sub	sp, #44	; 0x2c
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f82:	2300      	movs	r3, #0
 8001f84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f86:	e169      	b.n	800225c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	f040 8158 	bne.w	8002256 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	4a9a      	ldr	r2, [pc, #616]	; (8002214 <HAL_GPIO_Init+0x2a0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d05e      	beq.n	800206e <HAL_GPIO_Init+0xfa>
 8001fb0:	4a98      	ldr	r2, [pc, #608]	; (8002214 <HAL_GPIO_Init+0x2a0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d875      	bhi.n	80020a2 <HAL_GPIO_Init+0x12e>
 8001fb6:	4a98      	ldr	r2, [pc, #608]	; (8002218 <HAL_GPIO_Init+0x2a4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d058      	beq.n	800206e <HAL_GPIO_Init+0xfa>
 8001fbc:	4a96      	ldr	r2, [pc, #600]	; (8002218 <HAL_GPIO_Init+0x2a4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d86f      	bhi.n	80020a2 <HAL_GPIO_Init+0x12e>
 8001fc2:	4a96      	ldr	r2, [pc, #600]	; (800221c <HAL_GPIO_Init+0x2a8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d052      	beq.n	800206e <HAL_GPIO_Init+0xfa>
 8001fc8:	4a94      	ldr	r2, [pc, #592]	; (800221c <HAL_GPIO_Init+0x2a8>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d869      	bhi.n	80020a2 <HAL_GPIO_Init+0x12e>
 8001fce:	4a94      	ldr	r2, [pc, #592]	; (8002220 <HAL_GPIO_Init+0x2ac>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d04c      	beq.n	800206e <HAL_GPIO_Init+0xfa>
 8001fd4:	4a92      	ldr	r2, [pc, #584]	; (8002220 <HAL_GPIO_Init+0x2ac>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d863      	bhi.n	80020a2 <HAL_GPIO_Init+0x12e>
 8001fda:	4a92      	ldr	r2, [pc, #584]	; (8002224 <HAL_GPIO_Init+0x2b0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d046      	beq.n	800206e <HAL_GPIO_Init+0xfa>
 8001fe0:	4a90      	ldr	r2, [pc, #576]	; (8002224 <HAL_GPIO_Init+0x2b0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d85d      	bhi.n	80020a2 <HAL_GPIO_Init+0x12e>
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d82a      	bhi.n	8002040 <HAL_GPIO_Init+0xcc>
 8001fea:	2b12      	cmp	r3, #18
 8001fec:	d859      	bhi.n	80020a2 <HAL_GPIO_Init+0x12e>
 8001fee:	a201      	add	r2, pc, #4	; (adr r2, 8001ff4 <HAL_GPIO_Init+0x80>)
 8001ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff4:	0800206f 	.word	0x0800206f
 8001ff8:	08002049 	.word	0x08002049
 8001ffc:	0800205b 	.word	0x0800205b
 8002000:	0800209d 	.word	0x0800209d
 8002004:	080020a3 	.word	0x080020a3
 8002008:	080020a3 	.word	0x080020a3
 800200c:	080020a3 	.word	0x080020a3
 8002010:	080020a3 	.word	0x080020a3
 8002014:	080020a3 	.word	0x080020a3
 8002018:	080020a3 	.word	0x080020a3
 800201c:	080020a3 	.word	0x080020a3
 8002020:	080020a3 	.word	0x080020a3
 8002024:	080020a3 	.word	0x080020a3
 8002028:	080020a3 	.word	0x080020a3
 800202c:	080020a3 	.word	0x080020a3
 8002030:	080020a3 	.word	0x080020a3
 8002034:	080020a3 	.word	0x080020a3
 8002038:	08002051 	.word	0x08002051
 800203c:	08002065 	.word	0x08002065
 8002040:	4a79      	ldr	r2, [pc, #484]	; (8002228 <HAL_GPIO_Init+0x2b4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002046:	e02c      	b.n	80020a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	623b      	str	r3, [r7, #32]
          break;
 800204e:	e029      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	3304      	adds	r3, #4
 8002056:	623b      	str	r3, [r7, #32]
          break;
 8002058:	e024      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	3308      	adds	r3, #8
 8002060:	623b      	str	r3, [r7, #32]
          break;
 8002062:	e01f      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	330c      	adds	r3, #12
 800206a:	623b      	str	r3, [r7, #32]
          break;
 800206c:	e01a      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d102      	bne.n	800207c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002076:	2304      	movs	r3, #4
 8002078:	623b      	str	r3, [r7, #32]
          break;
 800207a:	e013      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d105      	bne.n	8002090 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002084:	2308      	movs	r3, #8
 8002086:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	611a      	str	r2, [r3, #16]
          break;
 800208e:	e009      	b.n	80020a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002090:	2308      	movs	r3, #8
 8002092:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	615a      	str	r2, [r3, #20]
          break;
 800209a:	e003      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
          break;
 80020a0:	e000      	b.n	80020a4 <HAL_GPIO_Init+0x130>
          break;
 80020a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2bff      	cmp	r3, #255	; 0xff
 80020a8:	d801      	bhi.n	80020ae <HAL_GPIO_Init+0x13a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	e001      	b.n	80020b2 <HAL_GPIO_Init+0x13e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3304      	adds	r3, #4
 80020b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2bff      	cmp	r3, #255	; 0xff
 80020b8:	d802      	bhi.n	80020c0 <HAL_GPIO_Init+0x14c>
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	e002      	b.n	80020c6 <HAL_GPIO_Init+0x152>
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	3b08      	subs	r3, #8
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	210f      	movs	r1, #15
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	401a      	ands	r2, r3
 80020d8:	6a39      	ldr	r1, [r7, #32]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	431a      	orrs	r2, r3
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 80b1 	beq.w	8002256 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020f4:	4b4d      	ldr	r3, [pc, #308]	; (800222c <HAL_GPIO_Init+0x2b8>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	4a4c      	ldr	r2, [pc, #304]	; (800222c <HAL_GPIO_Init+0x2b8>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6193      	str	r3, [r2, #24]
 8002100:	4b4a      	ldr	r3, [pc, #296]	; (800222c <HAL_GPIO_Init+0x2b8>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800210c:	4a48      	ldr	r2, [pc, #288]	; (8002230 <HAL_GPIO_Init+0x2bc>)
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	3302      	adds	r3, #2
 8002114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002118:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	220f      	movs	r2, #15
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4013      	ands	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a40      	ldr	r2, [pc, #256]	; (8002234 <HAL_GPIO_Init+0x2c0>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d013      	beq.n	8002160 <HAL_GPIO_Init+0x1ec>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a3f      	ldr	r2, [pc, #252]	; (8002238 <HAL_GPIO_Init+0x2c4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d00d      	beq.n	800215c <HAL_GPIO_Init+0x1e8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a3e      	ldr	r2, [pc, #248]	; (800223c <HAL_GPIO_Init+0x2c8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d007      	beq.n	8002158 <HAL_GPIO_Init+0x1e4>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a3d      	ldr	r2, [pc, #244]	; (8002240 <HAL_GPIO_Init+0x2cc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d101      	bne.n	8002154 <HAL_GPIO_Init+0x1e0>
 8002150:	2303      	movs	r3, #3
 8002152:	e006      	b.n	8002162 <HAL_GPIO_Init+0x1ee>
 8002154:	2304      	movs	r3, #4
 8002156:	e004      	b.n	8002162 <HAL_GPIO_Init+0x1ee>
 8002158:	2302      	movs	r3, #2
 800215a:	e002      	b.n	8002162 <HAL_GPIO_Init+0x1ee>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_GPIO_Init+0x1ee>
 8002160:	2300      	movs	r3, #0
 8002162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002164:	f002 0203 	and.w	r2, r2, #3
 8002168:	0092      	lsls	r2, r2, #2
 800216a:	4093      	lsls	r3, r2
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002172:	492f      	ldr	r1, [pc, #188]	; (8002230 <HAL_GPIO_Init+0x2bc>)
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d006      	beq.n	800219a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800218c:	4b2d      	ldr	r3, [pc, #180]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	492c      	ldr	r1, [pc, #176]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800219a:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	4928      	ldr	r1, [pc, #160]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021b4:	4b23      	ldr	r3, [pc, #140]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	4922      	ldr	r1, [pc, #136]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
 80021c0:	e006      	b.n	80021d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	491e      	ldr	r1, [pc, #120]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d006      	beq.n	80021ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	4918      	ldr	r1, [pc, #96]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	608b      	str	r3, [r1, #8]
 80021e8:	e006      	b.n	80021f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	4914      	ldr	r1, [pc, #80]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d021      	beq.n	8002248 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	490e      	ldr	r1, [pc, #56]	; (8002244 <HAL_GPIO_Init+0x2d0>)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	60cb      	str	r3, [r1, #12]
 8002210:	e021      	b.n	8002256 <HAL_GPIO_Init+0x2e2>
 8002212:	bf00      	nop
 8002214:	10320000 	.word	0x10320000
 8002218:	10310000 	.word	0x10310000
 800221c:	10220000 	.word	0x10220000
 8002220:	10210000 	.word	0x10210000
 8002224:	10120000 	.word	0x10120000
 8002228:	10110000 	.word	0x10110000
 800222c:	40021000 	.word	0x40021000
 8002230:	40010000 	.word	0x40010000
 8002234:	40010800 	.word	0x40010800
 8002238:	40010c00 	.word	0x40010c00
 800223c:	40011000 	.word	0x40011000
 8002240:	40011400 	.word	0x40011400
 8002244:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_GPIO_Init+0x304>)
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	43db      	mvns	r3, r3
 8002250:	4909      	ldr	r1, [pc, #36]	; (8002278 <HAL_GPIO_Init+0x304>)
 8002252:	4013      	ands	r3, r2
 8002254:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	3301      	adds	r3, #1
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	fa22 f303 	lsr.w	r3, r2, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	f47f ae8e 	bne.w	8001f88 <HAL_GPIO_Init+0x14>
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	372c      	adds	r7, #44	; 0x2c
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	40010400 	.word	0x40010400

0800227c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e12b      	b.n	80024e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff fb9a 	bl	80019dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2224      	movs	r2, #36	; 0x24
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022e0:	f003 f858 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 80022e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4a81      	ldr	r2, [pc, #516]	; (80024f0 <HAL_I2C_Init+0x274>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d807      	bhi.n	8002300 <HAL_I2C_Init+0x84>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4a80      	ldr	r2, [pc, #512]	; (80024f4 <HAL_I2C_Init+0x278>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	bf94      	ite	ls
 80022f8:	2301      	movls	r3, #1
 80022fa:	2300      	movhi	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	e006      	b.n	800230e <HAL_I2C_Init+0x92>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4a7d      	ldr	r2, [pc, #500]	; (80024f8 <HAL_I2C_Init+0x27c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	bf94      	ite	ls
 8002308:	2301      	movls	r3, #1
 800230a:	2300      	movhi	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0e7      	b.n	80024e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a78      	ldr	r2, [pc, #480]	; (80024fc <HAL_I2C_Init+0x280>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0c9b      	lsrs	r3, r3, #18
 8002320:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	430a      	orrs	r2, r1
 8002334:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a6a      	ldr	r2, [pc, #424]	; (80024f0 <HAL_I2C_Init+0x274>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d802      	bhi.n	8002350 <HAL_I2C_Init+0xd4>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3301      	adds	r3, #1
 800234e:	e009      	b.n	8002364 <HAL_I2C_Init+0xe8>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	4a69      	ldr	r2, [pc, #420]	; (8002500 <HAL_I2C_Init+0x284>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	099b      	lsrs	r3, r3, #6
 8002362:	3301      	adds	r3, #1
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	430b      	orrs	r3, r1
 800236a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002376:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	495c      	ldr	r1, [pc, #368]	; (80024f0 <HAL_I2C_Init+0x274>)
 8002380:	428b      	cmp	r3, r1
 8002382:	d819      	bhi.n	80023b8 <HAL_I2C_Init+0x13c>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e59      	subs	r1, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002392:	1c59      	adds	r1, r3, #1
 8002394:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002398:	400b      	ands	r3, r1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_I2C_Init+0x138>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1e59      	subs	r1, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b2:	e051      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 80023b4:	2304      	movs	r3, #4
 80023b6:	e04f      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d111      	bne.n	80023e4 <HAL_I2C_Init+0x168>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1e58      	subs	r0, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	440b      	add	r3, r1
 80023ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80023d2:	3301      	adds	r3, #1
 80023d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	e012      	b.n	800240a <HAL_I2C_Init+0x18e>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1e58      	subs	r0, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	0099      	lsls	r1, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023fa:	3301      	adds	r3, #1
 80023fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf0c      	ite	eq
 8002404:	2301      	moveq	r3, #1
 8002406:	2300      	movne	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Init+0x196>
 800240e:	2301      	movs	r3, #1
 8002410:	e022      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10e      	bne.n	8002438 <HAL_I2C_Init+0x1bc>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1e58      	subs	r0, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6859      	ldr	r1, [r3, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	440b      	add	r3, r1
 8002428:	fbb0 f3f3 	udiv	r3, r0, r3
 800242c:	3301      	adds	r3, #1
 800242e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002436:	e00f      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1e58      	subs	r0, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	0099      	lsls	r1, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	fbb0 f3f3 	udiv	r3, r0, r3
 800244e:	3301      	adds	r3, #1
 8002450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002454:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	6809      	ldr	r1, [r1, #0]
 800245c:	4313      	orrs	r3, r2
 800245e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69da      	ldr	r2, [r3, #28]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002486:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6911      	ldr	r1, [r2, #16]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68d2      	ldr	r2, [r2, #12]
 8002492:	4311      	orrs	r1, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	430b      	orrs	r3, r1
 800249a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	000186a0 	.word	0x000186a0
 80024f4:	001e847f 	.word	0x001e847f
 80024f8:	003d08ff 	.word	0x003d08ff
 80024fc:	431bde83 	.word	0x431bde83
 8002500:	10624dd3 	.word	0x10624dd3

08002504 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	4608      	mov	r0, r1
 800250e:	4611      	mov	r1, r2
 8002510:	461a      	mov	r2, r3
 8002512:	4603      	mov	r3, r0
 8002514:	817b      	strh	r3, [r7, #10]
 8002516:	460b      	mov	r3, r1
 8002518:	813b      	strh	r3, [r7, #8]
 800251a:	4613      	mov	r3, r2
 800251c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800251e:	f7ff fb6b 	bl	8001bf8 <HAL_GetTick>
 8002522:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b20      	cmp	r3, #32
 800252e:	f040 80d9 	bne.w	80026e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2319      	movs	r3, #25
 8002538:	2201      	movs	r2, #1
 800253a:	496d      	ldr	r1, [pc, #436]	; (80026f0 <HAL_I2C_Mem_Write+0x1ec>)
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f002 f92d 	bl	800479c <I2C_WaitOnFlagUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002548:	2302      	movs	r3, #2
 800254a:	e0cc      	b.n	80026e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_I2C_Mem_Write+0x56>
 8002556:	2302      	movs	r3, #2
 8002558:	e0c5      	b.n	80026e6 <HAL_I2C_Mem_Write+0x1e2>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b01      	cmp	r3, #1
 800256e:	d007      	beq.n	8002580 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800258e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2221      	movs	r2, #33	; 0x21
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2240      	movs	r2, #64	; 0x40
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a3a      	ldr	r2, [r7, #32]
 80025aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4a4d      	ldr	r2, [pc, #308]	; (80026f4 <HAL_I2C_Mem_Write+0x1f0>)
 80025c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025c2:	88f8      	ldrh	r0, [r7, #6]
 80025c4:	893a      	ldrh	r2, [r7, #8]
 80025c6:	8979      	ldrh	r1, [r7, #10]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	9301      	str	r3, [sp, #4]
 80025cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	4603      	mov	r3, r0
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f001 febc 	bl	8004350 <I2C_RequestMemoryWrite>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d052      	beq.n	8002684 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e081      	b.n	80026e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f002 f9ae 	bl	8004948 <I2C_WaitOnTXEFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00d      	beq.n	800260e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d107      	bne.n	800260a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002608:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e06b      	b.n	80026e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	781a      	ldrb	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b04      	cmp	r3, #4
 800264a:	d11b      	bne.n	8002684 <HAL_I2C_Mem_Write+0x180>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002650:	2b00      	cmp	r3, #0
 8002652:	d017      	beq.n	8002684 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	781a      	ldrb	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1aa      	bne.n	80025e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f002 f99a 	bl	80049ca <I2C_WaitOnBTFFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00d      	beq.n	80026b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d107      	bne.n	80026b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e016      	b.n	80026e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e000      	b.n	80026e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80026e4:	2302      	movs	r3, #2
  }
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	00100002 	.word	0x00100002
 80026f4:	ffff0000 	.word	0xffff0000

080026f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08c      	sub	sp, #48	; 0x30
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	4608      	mov	r0, r1
 8002702:	4611      	mov	r1, r2
 8002704:	461a      	mov	r2, r3
 8002706:	4603      	mov	r3, r0
 8002708:	817b      	strh	r3, [r7, #10]
 800270a:	460b      	mov	r3, r1
 800270c:	813b      	strh	r3, [r7, #8]
 800270e:	4613      	mov	r3, r2
 8002710:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002716:	f7ff fa6f 	bl	8001bf8 <HAL_GetTick>
 800271a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b20      	cmp	r3, #32
 8002726:	f040 8244 	bne.w	8002bb2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2319      	movs	r3, #25
 8002730:	2201      	movs	r2, #1
 8002732:	4982      	ldr	r1, [pc, #520]	; (800293c <HAL_I2C_Mem_Read+0x244>)
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f002 f831 	bl	800479c <I2C_WaitOnFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002740:	2302      	movs	r3, #2
 8002742:	e237      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_I2C_Mem_Read+0x5a>
 800274e:	2302      	movs	r3, #2
 8002750:	e230      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4bc>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	d007      	beq.n	8002778 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002786:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2222      	movs	r2, #34	; 0x22
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2240      	movs	r2, #64	; 0x40
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80027a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4a62      	ldr	r2, [pc, #392]	; (8002940 <HAL_I2C_Mem_Read+0x248>)
 80027b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ba:	88f8      	ldrh	r0, [r7, #6]
 80027bc:	893a      	ldrh	r2, [r7, #8]
 80027be:	8979      	ldrh	r1, [r7, #10]
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	4603      	mov	r3, r0
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f001 fe56 	bl	800447c <I2C_RequestMemoryRead>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e1ec      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d113      	bne.n	800280a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e1c0      	b.n	8002b8c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	2b01      	cmp	r3, #1
 8002810:	d11e      	bne.n	8002850 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002820:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002822:	b672      	cpsid	i
}
 8002824:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800284a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800284c:	b662      	cpsie	i
}
 800284e:	e035      	b.n	80028bc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002854:	2b02      	cmp	r3, #2
 8002856:	d11e      	bne.n	8002896 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002866:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002868:	b672      	cpsid	i
}
 800286a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002890:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002892:	b662      	cpsie	i
}
 8002894:	e012      	b.n	80028bc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028a4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80028bc:	e166      	b.n	8002b8c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	f200 811f 	bhi.w	8002b06 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d123      	bne.n	8002918 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f002 f8eb 	bl	8004ab0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e167      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691a      	ldr	r2, [r3, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002916:	e139      	b.n	8002b8c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291c:	2b02      	cmp	r3, #2
 800291e:	d152      	bne.n	80029c6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002926:	2200      	movs	r2, #0
 8002928:	4906      	ldr	r1, [pc, #24]	; (8002944 <HAL_I2C_Mem_Read+0x24c>)
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f001 ff36 	bl	800479c <I2C_WaitOnFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d008      	beq.n	8002948 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e13c      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4bc>
 800293a:	bf00      	nop
 800293c:	00100002 	.word	0x00100002
 8002940:	ffff0000 	.word	0xffff0000
 8002944:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002948:	b672      	cpsid	i
}
 800294a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800295a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800298e:	b662      	cpsie	i
}
 8002990:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029c4:	e0e2      	b.n	8002b8c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029cc:	2200      	movs	r2, #0
 80029ce:	497b      	ldr	r1, [pc, #492]	; (8002bbc <HAL_I2C_Mem_Read+0x4c4>)
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f001 fee3 	bl	800479c <I2C_WaitOnFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0e9      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80029f0:	b672      	cpsid	i
}
 80029f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a26:	4b66      	ldr	r3, [pc, #408]	; (8002bc0 <HAL_I2C_Mem_Read+0x4c8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	08db      	lsrs	r3, r3, #3
 8002a2c:	4a65      	ldr	r2, [pc, #404]	; (8002bc4 <HAL_I2C_Mem_Read+0x4cc>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0a1a      	lsrs	r2, r3, #8
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	00da      	lsls	r2, r3, #3
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d118      	bne.n	8002a7e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f043 0220 	orr.w	r2, r3, #32
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002a6e:	b662      	cpsie	i
}
 8002a70:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e09a      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d1d9      	bne.n	8002a40 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002ace:	b662      	cpsie	i
}
 8002ad0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b04:	e042      	b.n	8002b8c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f001 ffd0 	bl	8004ab0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e04c      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d118      	bne.n	8002b8c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f47f ae94 	bne.w	80028be <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e000      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002bb2:	2302      	movs	r3, #2
  }
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3728      	adds	r7, #40	; 0x28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	00010004 	.word	0x00010004
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	14f8b589 	.word	0x14f8b589

08002bc8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002be8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d003      	beq.n	8002c00 <HAL_I2C_EV_IRQHandler+0x38>
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	2b40      	cmp	r3, #64	; 0x40
 8002bfc:	f040 80bd 	bne.w	8002d7a <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10d      	bne.n	8002c36 <HAL_I2C_EV_IRQHandler+0x6e>
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002c20:	d003      	beq.n	8002c2a <HAL_I2C_EV_IRQHandler+0x62>
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002c28:	d101      	bne.n	8002c2e <HAL_I2C_EV_IRQHandler+0x66>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <HAL_I2C_EV_IRQHandler+0x68>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	f000 812e 	beq.w	8002e92 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00c      	beq.n	8002c5a <HAL_I2C_EV_IRQHandler+0x92>
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	0a5b      	lsrs	r3, r3, #9
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d006      	beq.n	8002c5a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f001 ffb3 	bl	8004bb8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fd60 	bl	8003718 <I2C_Master_SB>
 8002c58:	e08e      	b.n	8002d78 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	08db      	lsrs	r3, r3, #3
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <HAL_I2C_EV_IRQHandler+0xb2>
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	0a5b      	lsrs	r3, r3, #9
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fdd5 	bl	8003822 <I2C_Master_ADD10>
 8002c78:	e07e      	b.n	8002d78 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	085b      	lsrs	r3, r3, #1
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d009      	beq.n	8002c9a <HAL_I2C_EV_IRQHandler+0xd2>
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	0a5b      	lsrs	r3, r3, #9
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fdee 	bl	8003874 <I2C_Master_ADDR>
 8002c98:	e06e      	b.n	8002d78 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	089b      	lsrs	r3, r3, #2
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d037      	beq.n	8002d16 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cb4:	f000 80ef 	beq.w	8002e96 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	09db      	lsrs	r3, r3, #7
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00f      	beq.n	8002ce4 <HAL_I2C_EV_IRQHandler+0x11c>
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	0a9b      	lsrs	r3, r3, #10
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d009      	beq.n	8002ce4 <HAL_I2C_EV_IRQHandler+0x11c>
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	089b      	lsrs	r3, r3, #2
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d103      	bne.n	8002ce4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f9ed 	bl	80030bc <I2C_MasterTransmit_TXE>
 8002ce2:	e049      	b.n	8002d78 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80d2 	beq.w	8002e96 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	0a5b      	lsrs	r3, r3, #9
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80cb 	beq.w	8002e96 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b10      	cmp	r3, #16
 8002d04:	d103      	bne.n	8002d0e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fa74 	bl	80031f4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d0c:	e0c3      	b.n	8002e96 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fad8 	bl	80032c4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d14:	e0bf      	b.n	8002e96 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d24:	f000 80b7 	beq.w	8002e96 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	099b      	lsrs	r3, r3, #6
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00f      	beq.n	8002d54 <HAL_I2C_EV_IRQHandler+0x18c>
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	0a9b      	lsrs	r3, r3, #10
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d009      	beq.n	8002d54 <HAL_I2C_EV_IRQHandler+0x18c>
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	089b      	lsrs	r3, r3, #2
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d103      	bne.n	8002d54 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fb48 	bl	80033e2 <I2C_MasterReceive_RXNE>
 8002d52:	e011      	b.n	8002d78 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	089b      	lsrs	r3, r3, #2
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 809a 	beq.w	8002e96 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	0a5b      	lsrs	r3, r3, #9
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8093 	beq.w	8002e96 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fbe7 	bl	8003544 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d76:	e08e      	b.n	8002e96 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002d78:	e08d      	b.n	8002e96 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d004      	beq.n	8002d8c <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	e007      	b.n	8002d9c <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	085b      	lsrs	r3, r3, #1
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d012      	beq.n	8002dce <HAL_I2C_EV_IRQHandler+0x206>
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	0a5b      	lsrs	r3, r3, #9
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00c      	beq.n	8002dce <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002dc4:	69b9      	ldr	r1, [r7, #24]
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 ffab 	bl	8003d22 <I2C_Slave_ADDR>
 8002dcc:	e066      	b.n	8002e9c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <HAL_I2C_EV_IRQHandler+0x226>
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	0a5b      	lsrs	r3, r3, #9
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 ffe0 	bl	8003dac <I2C_Slave_STOPF>
 8002dec:	e056      	b.n	8002e9c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002dee:	7bbb      	ldrb	r3, [r7, #14]
 8002df0:	2b21      	cmp	r3, #33	; 0x21
 8002df2:	d002      	beq.n	8002dfa <HAL_I2C_EV_IRQHandler+0x232>
 8002df4:	7bbb      	ldrb	r3, [r7, #14]
 8002df6:	2b29      	cmp	r3, #41	; 0x29
 8002df8:	d125      	bne.n	8002e46 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	09db      	lsrs	r3, r3, #7
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00f      	beq.n	8002e26 <HAL_I2C_EV_IRQHandler+0x25e>
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	0a9b      	lsrs	r3, r3, #10
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <HAL_I2C_EV_IRQHandler+0x25e>
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d103      	bne.n	8002e26 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fec3 	bl	8003baa <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e24:	e039      	b.n	8002e9a <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	089b      	lsrs	r3, r3, #2
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d033      	beq.n	8002e9a <HAL_I2C_EV_IRQHandler+0x2d2>
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	0a5b      	lsrs	r3, r3, #9
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d02d      	beq.n	8002e9a <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fef0 	bl	8003c24 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e44:	e029      	b.n	8002e9a <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00f      	beq.n	8002e72 <HAL_I2C_EV_IRQHandler+0x2aa>
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	0a9b      	lsrs	r3, r3, #10
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d009      	beq.n	8002e72 <HAL_I2C_EV_IRQHandler+0x2aa>
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fefa 	bl	8003c64 <I2C_SlaveReceive_RXNE>
 8002e70:	e014      	b.n	8002e9c <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	089b      	lsrs	r3, r3, #2
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00e      	beq.n	8002e9c <HAL_I2C_EV_IRQHandler+0x2d4>
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	0a5b      	lsrs	r3, r3, #9
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d008      	beq.n	8002e9c <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 ff28 	bl	8003ce0 <I2C_SlaveReceive_BTF>
 8002e90:	e004      	b.n	8002e9c <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8002e92:	bf00      	nop
 8002e94:	e002      	b.n	8002e9c <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e96:	bf00      	nop
 8002e98:	e000      	b.n	8002e9c <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e9a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b08a      	sub	sp, #40	; 0x28
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ec4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d016      	beq.n	8002f00 <HAL_I2C_ER_IRQHandler+0x5e>
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d010      	beq.n	8002f00 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002eee:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002efe:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	0a5b      	lsrs	r3, r3, #9
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00e      	beq.n	8002f2a <HAL_I2C_ER_IRQHandler+0x88>
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	0a1b      	lsrs	r3, r3, #8
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	f043 0302 	orr.w	r3, r3, #2
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002f28:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	0a9b      	lsrs	r3, r3, #10
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d03f      	beq.n	8002fb6 <HAL_I2C_ER_IRQHandler+0x114>
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	0a1b      	lsrs	r3, r3, #8
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d039      	beq.n	8002fb6 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8002f42:	7efb      	ldrb	r3, [r7, #27]
 8002f44:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002f5c:	7ebb      	ldrb	r3, [r7, #26]
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d112      	bne.n	8002f88 <HAL_I2C_ER_IRQHandler+0xe6>
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10f      	bne.n	8002f88 <HAL_I2C_ER_IRQHandler+0xe6>
 8002f68:	7cfb      	ldrb	r3, [r7, #19]
 8002f6a:	2b21      	cmp	r3, #33	; 0x21
 8002f6c:	d008      	beq.n	8002f80 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002f6e:	7cfb      	ldrb	r3, [r7, #19]
 8002f70:	2b29      	cmp	r3, #41	; 0x29
 8002f72:	d005      	beq.n	8002f80 <HAL_I2C_ER_IRQHandler+0xde>
 8002f74:	7cfb      	ldrb	r3, [r7, #19]
 8002f76:	2b28      	cmp	r3, #40	; 0x28
 8002f78:	d106      	bne.n	8002f88 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2b21      	cmp	r3, #33	; 0x21
 8002f7e:	d103      	bne.n	8002f88 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f001 f843 	bl	800400c <I2C_Slave_AF>
 8002f86:	e016      	b.n	8002fb6 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f90:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	f043 0304 	orr.w	r3, r3, #4
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f9a:	7efb      	ldrb	r3, [r7, #27]
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d002      	beq.n	8002fa6 <HAL_I2C_ER_IRQHandler+0x104>
 8002fa0:	7efb      	ldrb	r3, [r7, #27]
 8002fa2:	2b40      	cmp	r3, #64	; 0x40
 8002fa4:	d107      	bne.n	8002fb6 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	0adb      	lsrs	r3, r3, #11
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00e      	beq.n	8002fe0 <HAL_I2C_ER_IRQHandler+0x13e>
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	f043 0308 	orr.w	r3, r3, #8
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002fde:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f001 f87a 	bl	80040ec <I2C_ITError>
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	3728      	adds	r7, #40	; 0x28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	70fb      	strb	r3, [r7, #3]
 8003054:	4613      	mov	r3, r2
 8003056:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr

08003062 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d150      	bne.n	8003184 <I2C_MasterTransmit_TXE+0xc8>
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	2b21      	cmp	r3, #33	; 0x21
 80030e6:	d14d      	bne.n	8003184 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d01d      	beq.n	800312a <I2C_MasterTransmit_TXE+0x6e>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d01a      	beq.n	800312a <I2C_MasterTransmit_TXE+0x6e>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030fa:	d016      	beq.n	800312a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800310a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2211      	movs	r2, #17
 8003110:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff ff6c 	bl	8003000 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003128:	e060      	b.n	80031ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003138:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003148:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d107      	bne.n	8003174 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff ff81 	bl	8003074 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003172:	e03b      	b.n	80031ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff ff3f 	bl	8003000 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003182:	e033      	b.n	80031ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b21      	cmp	r3, #33	; 0x21
 8003188:	d005      	beq.n	8003196 <I2C_MasterTransmit_TXE+0xda>
 800318a:	7bbb      	ldrb	r3, [r7, #14]
 800318c:	2b40      	cmp	r3, #64	; 0x40
 800318e:	d12d      	bne.n	80031ec <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b22      	cmp	r3, #34	; 0x22
 8003194:	d12a      	bne.n	80031ec <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d108      	bne.n	80031b2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ae:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80031b0:	e01c      	b.n	80031ec <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b40      	cmp	r3, #64	; 0x40
 80031bc:	d103      	bne.n	80031c6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f880 	bl	80032c4 <I2C_MemoryTransmit_TXE_BTF>
}
 80031c4:	e012      	b.n	80031ec <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	781a      	ldrb	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80031ea:	e7ff      	b.n	80031ec <I2C_MasterTransmit_TXE+0x130>
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b21      	cmp	r3, #33	; 0x21
 800320c:	d156      	bne.n	80032bc <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d012      	beq.n	800323e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800323c:	e03e      	b.n	80032bc <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b08      	cmp	r3, #8
 8003242:	d01d      	beq.n	8003280 <I2C_MasterTransmit_BTF+0x8c>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b20      	cmp	r3, #32
 8003248:	d01a      	beq.n	8003280 <I2C_MasterTransmit_BTF+0x8c>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003250:	d016      	beq.n	8003280 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003260:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2211      	movs	r2, #17
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff fec1 	bl	8003000 <HAL_I2C_MasterTxCpltCallback>
}
 800327e:	e01d      	b.n	80032bc <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800328e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff fea2 	bl	8003000 <HAL_I2C_MasterTxCpltCallback>
}
 80032bc:	bf00      	nop
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d11d      	bne.n	8003318 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d10b      	bne.n	80032fc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f4:	1c9a      	adds	r2, r3, #2
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80032fa:	e06e      	b.n	80033da <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003300:	b29b      	uxth	r3, r3
 8003302:	121b      	asrs	r3, r3, #8
 8003304:	b2da      	uxtb	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003316:	e060      	b.n	80033da <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800331c:	2b01      	cmp	r3, #1
 800331e:	d10b      	bne.n	8003338 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003324:	b2da      	uxtb	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003336:	e050      	b.n	80033da <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800333c:	2b02      	cmp	r3, #2
 800333e:	d14c      	bne.n	80033da <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	2b22      	cmp	r3, #34	; 0x22
 8003344:	d108      	bne.n	8003358 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003354:	601a      	str	r2, [r3, #0]
}
 8003356:	e040      	b.n	80033da <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d015      	beq.n	800338e <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	2b21      	cmp	r3, #33	; 0x21
 8003366:	d112      	bne.n	800338e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	781a      	ldrb	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800338c:	e025      	b.n	80033da <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d120      	bne.n	80033da <I2C_MemoryTransmit_TXE_BTF+0x116>
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	2b21      	cmp	r3, #33	; 0x21
 800339c:	d11d      	bne.n	80033da <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033ac:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033bc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff fe4d 	bl	8003074 <HAL_I2C_MemTxCpltCallback>
}
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b22      	cmp	r3, #34	; 0x22
 80033f4:	f040 80a2 	bne.w	800353c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b03      	cmp	r3, #3
 8003404:	d921      	bls.n	800344a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b03      	cmp	r3, #3
 8003434:	f040 8082 	bne.w	800353c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003446:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003448:	e078      	b.n	800353c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	2b02      	cmp	r3, #2
 8003450:	d074      	beq.n	800353c <I2C_MasterReceive_RXNE+0x15a>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d002      	beq.n	800345e <I2C_MasterReceive_RXNE+0x7c>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d16e      	bne.n	800353c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f001 faf4 	bl	8004a4c <I2C_WaitOnSTOPRequestThroughIT>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d142      	bne.n	80034f0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003478:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003488:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b40      	cmp	r3, #64	; 0x40
 80034c2:	d10a      	bne.n	80034da <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff fdd7 	bl	8003086 <HAL_I2C_MemRxCpltCallback>
}
 80034d8:	e030      	b.n	800353c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2212      	movs	r2, #18
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff fd92 	bl	8003012 <HAL_I2C_MasterRxCpltCallback>
}
 80034ee:	e025      	b.n	800353c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034fe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff fdae 	bl	8003098 <HAL_I2C_ErrorCallback>
}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b04      	cmp	r3, #4
 800355a:	d11b      	bne.n	8003594 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800356a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691a      	ldr	r2, [r3, #16]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003592:	e0bd      	b.n	8003710 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b03      	cmp	r3, #3
 800359c:	d129      	bne.n	80035f2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ac:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d00a      	beq.n	80035ca <I2C_MasterReceive_BTF+0x86>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d007      	beq.n	80035ca <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035f0:	e08e      	b.n	8003710 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d176      	bne.n	80036ea <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d002      	beq.n	8003608 <I2C_MasterReceive_BTF+0xc4>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b10      	cmp	r3, #16
 8003606:	d108      	bne.n	800361a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e019      	b.n	800364e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b04      	cmp	r3, #4
 800361e:	d002      	beq.n	8003626 <I2C_MasterReceive_BTF+0xe2>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d108      	bne.n	8003638 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e00a      	b.n	800364e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b10      	cmp	r3, #16
 800363c:	d007      	beq.n	800364e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80036a8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b40      	cmp	r3, #64	; 0x40
 80036bc:	d10a      	bne.n	80036d4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff fcda 	bl	8003086 <HAL_I2C_MemRxCpltCallback>
}
 80036d2:	e01d      	b.n	8003710 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2212      	movs	r2, #18
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff fc95 	bl	8003012 <HAL_I2C_MasterRxCpltCallback>
}
 80036e8:	e012      	b.n	8003710 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b40      	cmp	r3, #64	; 0x40
 800372a:	d117      	bne.n	800375c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003738:	b2db      	uxtb	r3, r3
 800373a:	461a      	mov	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003744:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003746:	e067      	b.n	8003818 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	b2da      	uxtb	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	611a      	str	r2, [r3, #16]
}
 800375a:	e05d      	b.n	8003818 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003764:	d133      	bne.n	80037ce <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b21      	cmp	r3, #33	; 0x21
 8003770:	d109      	bne.n	8003786 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	b2db      	uxtb	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003782:	611a      	str	r2, [r3, #16]
 8003784:	e008      	b.n	8003798 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	b2da      	uxtb	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379c:	2b00      	cmp	r3, #0
 800379e:	d004      	beq.n	80037aa <I2C_Master_SB+0x92>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d108      	bne.n	80037bc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d032      	beq.n	8003818 <I2C_Master_SB+0x100>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d02d      	beq.n	8003818 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ca:	605a      	str	r2, [r3, #4]
}
 80037cc:	e024      	b.n	8003818 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10e      	bne.n	80037f4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	b29b      	uxth	r3, r3
 80037dc:	11db      	asrs	r3, r3, #7
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f003 0306 	and.w	r3, r3, #6
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f063 030f 	orn	r3, r3, #15
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	611a      	str	r2, [r3, #16]
}
 80037f2:	e011      	b.n	8003818 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d10d      	bne.n	8003818 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003800:	b29b      	uxth	r3, r3
 8003802:	11db      	asrs	r3, r3, #7
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f003 0306 	and.w	r3, r3, #6
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f063 030e 	orn	r3, r3, #14
 8003810:	b2da      	uxtb	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	611a      	str	r2, [r3, #16]
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr

08003822 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	b2da      	uxtb	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383a:	2b00      	cmp	r3, #0
 800383c:	d103      	bne.n	8003846 <I2C_Master_ADD10+0x24>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	2b00      	cmp	r3, #0
 8003844:	d011      	beq.n	800386a <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	2b00      	cmp	r3, #0
 800384e:	d104      	bne.n	800385a <I2C_Master_ADD10+0x38>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003868:	605a      	str	r2, [r3, #4]
    }
  }
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr

08003874 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003874:	b480      	push	{r7}
 8003876:	b091      	sub	sp, #68	; 0x44
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003882:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b22      	cmp	r3, #34	; 0x22
 800389c:	f040 8174 	bne.w	8003b88 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10f      	bne.n	80038c8 <I2C_Master_ADDR+0x54>
 80038a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d10b      	bne.n	80038c8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b0:	2300      	movs	r3, #0
 80038b2:	633b      	str	r3, [r7, #48]	; 0x30
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	633b      	str	r3, [r7, #48]	; 0x30
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	633b      	str	r3, [r7, #48]	; 0x30
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	e16b      	b.n	8003ba0 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d11d      	bne.n	800390c <I2C_Master_ADDR+0x98>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038d8:	d118      	bne.n	800390c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038da:	2300      	movs	r3, #0
 80038dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038fe:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	651a      	str	r2, [r3, #80]	; 0x50
 800390a:	e149      	b.n	8003ba0 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d113      	bne.n	800393e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003916:	2300      	movs	r3, #0
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	62bb      	str	r3, [r7, #40]	; 0x28
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	62bb      	str	r3, [r7, #40]	; 0x28
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	e120      	b.n	8003b80 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	f040 808a 	bne.w	8003a5e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800394a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003950:	d137      	bne.n	80039c2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003960:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800396c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003970:	d113      	bne.n	800399a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003980:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003982:	2300      	movs	r3, #0
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	e0f2      	b.n	8003b80 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399a:	2300      	movs	r3, #0
 800399c:	623b      	str	r3, [r7, #32]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	623b      	str	r3, [r7, #32]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	623b      	str	r3, [r7, #32]
 80039ae:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	e0de      	b.n	8003b80 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80039c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d02e      	beq.n	8003a26 <I2C_Master_ADDR+0x1b2>
 80039c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	d02b      	beq.n	8003a26 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80039ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d0:	2b12      	cmp	r3, #18
 80039d2:	d102      	bne.n	80039da <I2C_Master_ADDR+0x166>
 80039d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d125      	bne.n	8003a26 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d00e      	beq.n	80039fe <I2C_Master_ADDR+0x18a>
 80039e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d00b      	beq.n	80039fe <I2C_Master_ADDR+0x18a>
 80039e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e8:	2b10      	cmp	r3, #16
 80039ea:	d008      	beq.n	80039fe <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	e007      	b.n	8003a0e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a0c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	61fb      	str	r3, [r7, #28]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	e0ac      	b.n	8003b80 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a34:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a36:	2300      	movs	r3, #0
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	e090      	b.n	8003b80 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d158      	bne.n	8003b1a <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d021      	beq.n	8003ab2 <I2C_Master_ADDR+0x23e>
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d01e      	beq.n	8003ab2 <I2C_Master_ADDR+0x23e>
 8003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a76:	2b10      	cmp	r3, #16
 8003a78:	d01b      	beq.n	8003ab2 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a88:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	e012      	b.n	8003ad8 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ac0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae6:	d14b      	bne.n	8003b80 <I2C_Master_ADDR+0x30c>
 8003ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aee:	d00b      	beq.n	8003b08 <I2C_Master_ADDR+0x294>
 8003af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d008      	beq.n	8003b08 <I2C_Master_ADDR+0x294>
 8003af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d005      	beq.n	8003b08 <I2C_Master_ADDR+0x294>
 8003afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afe:	2b10      	cmp	r3, #16
 8003b00:	d002      	beq.n	8003b08 <I2C_Master_ADDR+0x294>
 8003b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d13b      	bne.n	8003b80 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b16:	605a      	str	r2, [r3, #4]
 8003b18:	e032      	b.n	8003b80 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b28:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b38:	d117      	bne.n	8003b6a <I2C_Master_ADDR+0x2f6>
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b40:	d00b      	beq.n	8003b5a <I2C_Master_ADDR+0x2e6>
 8003b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d008      	beq.n	8003b5a <I2C_Master_ADDR+0x2e6>
 8003b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d005      	beq.n	8003b5a <I2C_Master_ADDR+0x2e6>
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	2b10      	cmp	r3, #16
 8003b52:	d002      	beq.n	8003b5a <I2C_Master_ADDR+0x2e6>
 8003b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b56:	2b20      	cmp	r3, #32
 8003b58:	d107      	bne.n	8003b6a <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b68:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003b86:	e00b      	b.n	8003ba0 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	60bb      	str	r3, [r7, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	60bb      	str	r3, [r7, #8]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
}
 8003b9e:	e7ff      	b.n	8003ba0 <I2C_Master_ADDR+0x32c>
 8003ba0:	bf00      	nop
 8003ba2:	3744      	adds	r7, #68	; 0x44
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr

08003baa <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d02b      	beq.n	8003c1c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d114      	bne.n	8003c1c <I2C_SlaveTransmit_TXE+0x72>
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	2b29      	cmp	r3, #41	; 0x29
 8003bf6:	d111      	bne.n	8003c1c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c06:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2221      	movs	r2, #33	; 0x21
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2228      	movs	r2, #40	; 0x28
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff fa04 	bl	8003024 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d011      	beq.n	8003c5a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	781a      	ldrb	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr

08003c64 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d02c      	beq.n	8003cd8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d114      	bne.n	8003cd8 <I2C_SlaveReceive_RXNE+0x74>
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb2:	d111      	bne.n	8003cd8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2222      	movs	r2, #34	; 0x22
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2228      	movs	r2, #40	; 0x28
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff f9af 	bl	8003036 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d012      	beq.n	8003d18 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr

08003d22 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d3c:	2b28      	cmp	r3, #40	; 0x28
 8003d3e:	d127      	bne.n	8003d90 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	089b      	lsrs	r3, r3, #2
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	09db      	lsrs	r3, r3, #7
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d103      	bne.n	8003d74 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	81bb      	strh	r3, [r7, #12]
 8003d72:	e002      	b.n	8003d7a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003d82:	89ba      	ldrh	r2, [r7, #12]
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	4619      	mov	r1, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff f95d 	bl	8003048 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d8e:	e008      	b.n	8003da2 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0202 	mvn.w	r2, #2
 8003d98:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e08:	d172      	bne.n	8003ef0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	2b22      	cmp	r3, #34	; 0x22
 8003e0e:	d002      	beq.n	8003e16 <I2C_Slave_STOPF+0x6a>
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	2b2a      	cmp	r3, #42	; 0x2a
 8003e14:	d135      	bne.n	8003e82 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f043 0204 	orr.w	r2, r3, #4
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e48:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe f884 	bl	8001f5c <HAL_DMA_GetState>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d049      	beq.n	8003eee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	4a69      	ldr	r2, [pc, #420]	; (8004004 <I2C_Slave_STOPF+0x258>)
 8003e60:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe f802 	bl	8001e70 <HAL_DMA_Abort_IT>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d03d      	beq.n	8003eee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e80:	e035      	b.n	8003eee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f043 0204 	orr.w	r2, r3, #4
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eb4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe f84e 	bl	8001f5c <HAL_DMA_GetState>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d014      	beq.n	8003ef0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eca:	4a4e      	ldr	r2, [pc, #312]	; (8004004 <I2C_Slave_STOPF+0x258>)
 8003ecc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fd ffcc 	bl	8001e70 <HAL_DMA_Abort_IT>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4798      	blx	r3
 8003eec:	e000      	b.n	8003ef0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003eee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d03e      	beq.n	8003f78 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d112      	bne.n	8003f2e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f38:	2b40      	cmp	r3, #64	; 0x40
 8003f3a:	d112      	bne.n	8003f62 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	f043 0204 	orr.w	r2, r3, #4
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f8b3 	bl	80040ec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003f86:	e039      	b.n	8003ffc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f8c:	d109      	bne.n	8003fa2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2228      	movs	r2, #40	; 0x28
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff f84a 	bl	8003036 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b28      	cmp	r3, #40	; 0x28
 8003fac:	d111      	bne.n	8003fd2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a15      	ldr	r2, [pc, #84]	; (8004008 <I2C_Slave_STOPF+0x25c>)
 8003fb2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff f849 	bl	8003062 <HAL_I2C_ListenCpltCallback>
}
 8003fd0:	e014      	b.n	8003ffc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	2b22      	cmp	r3, #34	; 0x22
 8003fd8:	d002      	beq.n	8003fe0 <I2C_Slave_STOPF+0x234>
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	2b22      	cmp	r3, #34	; 0x22
 8003fde:	d10d      	bne.n	8003ffc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff f81d 	bl	8003036 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	0800464d 	.word	0x0800464d
 8004008:	ffff0000 	.word	0xffff0000

0800400c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b08      	cmp	r3, #8
 8004026:	d002      	beq.n	800402e <I2C_Slave_AF+0x22>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b20      	cmp	r3, #32
 800402c:	d129      	bne.n	8004082 <I2C_Slave_AF+0x76>
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	2b28      	cmp	r3, #40	; 0x28
 8004032:	d126      	bne.n	8004082 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a2c      	ldr	r2, [pc, #176]	; (80040e8 <I2C_Slave_AF+0xdc>)
 8004038:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004048:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004052:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004062:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fe fff1 	bl	8003062 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004080:	e02e      	b.n	80040e0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	2b21      	cmp	r3, #33	; 0x21
 8004086:	d126      	bne.n	80040d6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <I2C_Slave_AF+0xdc>)
 800408c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2221      	movs	r2, #33	; 0x21
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040b2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040bc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040cc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fe ffa8 	bl	8003024 <HAL_I2C_SlaveTxCpltCallback>
}
 80040d4:	e004      	b.n	80040e0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040de:	615a      	str	r2, [r3, #20]
}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	ffff0000 	.word	0xffff0000

080040ec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004102:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004104:	7bbb      	ldrb	r3, [r7, #14]
 8004106:	2b10      	cmp	r3, #16
 8004108:	d002      	beq.n	8004110 <I2C_ITError+0x24>
 800410a:	7bbb      	ldrb	r3, [r7, #14]
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d10a      	bne.n	8004126 <I2C_ITError+0x3a>
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	2b22      	cmp	r3, #34	; 0x22
 8004114:	d107      	bne.n	8004126 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004124:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800412c:	2b28      	cmp	r3, #40	; 0x28
 800412e:	d107      	bne.n	8004140 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2228      	movs	r2, #40	; 0x28
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800413e:	e015      	b.n	800416c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800414e:	d00a      	beq.n	8004166 <I2C_ITError+0x7a>
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	2b60      	cmp	r3, #96	; 0x60
 8004154:	d007      	beq.n	8004166 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800417a:	d161      	bne.n	8004240 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800418a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004190:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004194:	2b01      	cmp	r3, #1
 8004196:	d020      	beq.n	80041da <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419c:	4a6a      	ldr	r2, [pc, #424]	; (8004348 <I2C_ITError+0x25c>)
 800419e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fd fe63 	bl	8001e70 <HAL_DMA_Abort_IT>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8089 	beq.w	80042c4 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0201 	bic.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041d4:	4610      	mov	r0, r2
 80041d6:	4798      	blx	r3
 80041d8:	e074      	b.n	80042c4 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041de:	4a5a      	ldr	r2, [pc, #360]	; (8004348 <I2C_ITError+0x25c>)
 80041e0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fd fe42 	bl	8001e70 <HAL_DMA_Abort_IT>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d068      	beq.n	80042c4 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fc:	2b40      	cmp	r3, #64	; 0x40
 80041fe:	d10b      	bne.n	8004218 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691a      	ldr	r2, [r3, #16]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	1c5a      	adds	r2, r3, #1
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800423a:	4610      	mov	r0, r2
 800423c:	4798      	blx	r3
 800423e:	e041      	b.n	80042c4 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b60      	cmp	r3, #96	; 0x60
 800424a:	d125      	bne.n	8004298 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004264:	2b40      	cmp	r3, #64	; 0x40
 8004266:	d10b      	bne.n	8004280 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0201 	bic.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7fe ff0a 	bl	80030aa <HAL_I2C_AbortCpltCallback>
 8004296:	e015      	b.n	80042c4 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a2:	2b40      	cmp	r3, #64	; 0x40
 80042a4:	d10b      	bne.n	80042be <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fe feea 	bl	8003098 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10e      	bne.n	80042f2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d104      	bne.n	80042f2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d007      	beq.n	8004302 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004300:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004308:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b04      	cmp	r3, #4
 8004314:	d113      	bne.n	800433e <I2C_ITError+0x252>
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b28      	cmp	r3, #40	; 0x28
 800431a:	d110      	bne.n	800433e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a0b      	ldr	r2, [pc, #44]	; (800434c <I2C_ITError+0x260>)
 8004320:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7fe fe92 	bl	8003062 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800433e:	bf00      	nop
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	0800464d 	.word	0x0800464d
 800434c:	ffff0000 	.word	0xffff0000

08004350 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	4608      	mov	r0, r1
 800435a:	4611      	mov	r1, r2
 800435c:	461a      	mov	r2, r3
 800435e:	4603      	mov	r3, r0
 8004360:	817b      	strh	r3, [r7, #10]
 8004362:	460b      	mov	r3, r1
 8004364:	813b      	strh	r3, [r7, #8]
 8004366:	4613      	mov	r3, r2
 8004368:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004378:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	2200      	movs	r2, #0
 8004382:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fa08 	bl	800479c <I2C_WaitOnFlagUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00d      	beq.n	80043ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a0:	d103      	bne.n	80043aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e05f      	b.n	800446e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043ae:	897b      	ldrh	r3, [r7, #10]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	6a3a      	ldr	r2, [r7, #32]
 80043c2:	492d      	ldr	r1, [pc, #180]	; (8004478 <I2C_RequestMemoryWrite+0x128>)
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 fa40 	bl	800484a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e04c      	b.n	800446e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ec:	6a39      	ldr	r1, [r7, #32]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 faaa 	bl	8004948 <I2C_WaitOnTXEFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00d      	beq.n	8004416 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d107      	bne.n	8004412 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004410:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e02b      	b.n	800446e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d105      	bne.n	8004428 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800441c:	893b      	ldrh	r3, [r7, #8]
 800441e:	b2da      	uxtb	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	611a      	str	r2, [r3, #16]
 8004426:	e021      	b.n	800446c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004428:	893b      	ldrh	r3, [r7, #8]
 800442a:	0a1b      	lsrs	r3, r3, #8
 800442c:	b29b      	uxth	r3, r3
 800442e:	b2da      	uxtb	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004438:	6a39      	ldr	r1, [r7, #32]
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 fa84 	bl	8004948 <I2C_WaitOnTXEFlagUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00d      	beq.n	8004462 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	2b04      	cmp	r3, #4
 800444c:	d107      	bne.n	800445e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e005      	b.n	800446e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004462:	893b      	ldrh	r3, [r7, #8]
 8004464:	b2da      	uxtb	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	00010002 	.word	0x00010002

0800447c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	4608      	mov	r0, r1
 8004486:	4611      	mov	r1, r2
 8004488:	461a      	mov	r2, r3
 800448a:	4603      	mov	r3, r0
 800448c:	817b      	strh	r3, [r7, #10]
 800448e:	460b      	mov	r3, r1
 8004490:	813b      	strh	r3, [r7, #8]
 8004492:	4613      	mov	r3, r2
 8004494:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	2200      	movs	r2, #0
 80044be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f96a 	bl	800479c <I2C_WaitOnFlagUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00d      	beq.n	80044ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044dc:	d103      	bne.n	80044e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e0aa      	b.n	8004640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044ea:	897b      	ldrh	r3, [r7, #10]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	6a3a      	ldr	r2, [r7, #32]
 80044fe:	4952      	ldr	r1, [pc, #328]	; (8004648 <I2C_RequestMemoryRead+0x1cc>)
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f9a2 	bl	800484a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e097      	b.n	8004640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004528:	6a39      	ldr	r1, [r7, #32]
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 fa0c 	bl	8004948 <I2C_WaitOnTXEFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00d      	beq.n	8004552 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	2b04      	cmp	r3, #4
 800453c:	d107      	bne.n	800454e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800454c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e076      	b.n	8004640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004552:	88fb      	ldrh	r3, [r7, #6]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d105      	bne.n	8004564 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004558:	893b      	ldrh	r3, [r7, #8]
 800455a:	b2da      	uxtb	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	611a      	str	r2, [r3, #16]
 8004562:	e021      	b.n	80045a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004564:	893b      	ldrh	r3, [r7, #8]
 8004566:	0a1b      	lsrs	r3, r3, #8
 8004568:	b29b      	uxth	r3, r3
 800456a:	b2da      	uxtb	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004574:	6a39      	ldr	r1, [r7, #32]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f9e6 	bl	8004948 <I2C_WaitOnTXEFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00d      	beq.n	800459e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	2b04      	cmp	r3, #4
 8004588:	d107      	bne.n	800459a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004598:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e050      	b.n	8004640 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800459e:	893b      	ldrh	r3, [r7, #8]
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045aa:	6a39      	ldr	r1, [r7, #32]
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 f9cb 	bl	8004948 <I2C_WaitOnTXEFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00d      	beq.n	80045d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d107      	bne.n	80045d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e035      	b.n	8004640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f8d3 	bl	800479c <I2C_WaitOnFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00d      	beq.n	8004618 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800460a:	d103      	bne.n	8004614 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004612:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e013      	b.n	8004640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004618:	897b      	ldrh	r3, [r7, #10]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	b2da      	uxtb	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	6a3a      	ldr	r2, [r7, #32]
 800462c:	4906      	ldr	r1, [pc, #24]	; (8004648 <I2C_RequestMemoryRead+0x1cc>)
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f90b 	bl	800484a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	00010002 	.word	0x00010002

0800464c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004664:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004666:	4b4b      	ldr	r3, [pc, #300]	; (8004794 <I2C_DMAAbort+0x148>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	08db      	lsrs	r3, r3, #3
 800466c:	4a4a      	ldr	r2, [pc, #296]	; (8004798 <I2C_DMAAbort+0x14c>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	0a1a      	lsrs	r2, r3, #8
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	00da      	lsls	r2, r3, #3
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f043 0220 	orr.w	r2, r3, #32
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004692:	e00a      	b.n	80046aa <I2C_DMAAbort+0x5e>
    }
    count--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3b01      	subs	r3, #1
 8004698:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a8:	d0ea      	beq.n	8004680 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b6:	2200      	movs	r2, #0
 80046b8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	2200      	movs	r2, #0
 80046c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2200      	movs	r2, #0
 80046de:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ec:	2200      	movs	r2, #0
 80046ee:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	2200      	movs	r2, #0
 80046fe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0201 	bic.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b60      	cmp	r3, #96	; 0x60
 800471a:	d10e      	bne.n	800473a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2200      	movs	r2, #0
 8004730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004732:	6978      	ldr	r0, [r7, #20]
 8004734:	f7fe fcb9 	bl	80030aa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004738:	e027      	b.n	800478a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800473a:	7cfb      	ldrb	r3, [r7, #19]
 800473c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004740:	2b28      	cmp	r3, #40	; 0x28
 8004742:	d117      	bne.n	8004774 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004762:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2200      	movs	r2, #0
 8004768:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2228      	movs	r2, #40	; 0x28
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004772:	e007      	b.n	8004784 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004784:	6978      	ldr	r0, [r7, #20]
 8004786:	f7fe fc87 	bl	8003098 <HAL_I2C_ErrorCallback>
}
 800478a:	bf00      	nop
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000000 	.word	0x20000000
 8004798:	14f8b589 	.word	0x14f8b589

0800479c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ac:	e025      	b.n	80047fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b4:	d021      	beq.n	80047fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b6:	f7fd fa1f 	bl	8001bf8 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d302      	bcc.n	80047cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d116      	bne.n	80047fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	f043 0220 	orr.w	r2, r3, #32
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e023      	b.n	8004842 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	0c1b      	lsrs	r3, r3, #16
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d10d      	bne.n	8004820 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	43da      	mvns	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4013      	ands	r3, r2
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	bf0c      	ite	eq
 8004816:	2301      	moveq	r3, #1
 8004818:	2300      	movne	r3, #0
 800481a:	b2db      	uxtb	r3, r3
 800481c:	461a      	mov	r2, r3
 800481e:	e00c      	b.n	800483a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	43da      	mvns	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4013      	ands	r3, r2
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	bf0c      	ite	eq
 8004832:	2301      	moveq	r3, #1
 8004834:	2300      	movne	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	461a      	mov	r2, r3
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	429a      	cmp	r2, r3
 800483e:	d0b6      	beq.n	80047ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
 8004856:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004858:	e051      	b.n	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004868:	d123      	bne.n	80048b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004878:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004882:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f043 0204 	orr.w	r2, r3, #4
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e046      	b.n	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b8:	d021      	beq.n	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ba:	f7fd f99d 	bl	8001bf8 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d302      	bcc.n	80048d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d116      	bne.n	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f043 0220 	orr.w	r2, r3, #32
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e020      	b.n	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	0c1b      	lsrs	r3, r3, #16
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	d10c      	bne.n	8004922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	43da      	mvns	r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4013      	ands	r3, r2
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	bf14      	ite	ne
 800491a:	2301      	movne	r3, #1
 800491c:	2300      	moveq	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	e00b      	b.n	800493a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	43da      	mvns	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	4013      	ands	r3, r2
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf14      	ite	ne
 8004934:	2301      	movne	r3, #1
 8004936:	2300      	moveq	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d18d      	bne.n	800485a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004954:	e02d      	b.n	80049b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 f900 	bl	8004b5c <I2C_IsAcknowledgeFailed>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e02d      	b.n	80049c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496c:	d021      	beq.n	80049b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496e:	f7fd f943 	bl	8001bf8 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	429a      	cmp	r2, r3
 800497c:	d302      	bcc.n	8004984 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d116      	bne.n	80049b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f043 0220 	orr.w	r2, r3, #32
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e007      	b.n	80049c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049bc:	2b80      	cmp	r3, #128	; 0x80
 80049be:	d1ca      	bne.n	8004956 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049d6:	e02d      	b.n	8004a34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f8bf 	bl	8004b5c <I2C_IsAcknowledgeFailed>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e02d      	b.n	8004a44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ee:	d021      	beq.n	8004a34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f0:	f7fd f902 	bl	8001bf8 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d302      	bcc.n	8004a06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d116      	bne.n	8004a34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	f043 0220 	orr.w	r2, r3, #32
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e007      	b.n	8004a44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d1ca      	bne.n	80049d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a58:	4b13      	ldr	r3, [pc, #76]	; (8004aa8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	08db      	lsrs	r3, r3, #3
 8004a5e:	4a13      	ldr	r2, [pc, #76]	; (8004aac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	0a1a      	lsrs	r2, r3, #8
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d107      	bne.n	8004a8a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f043 0220 	orr.w	r2, r3, #32
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e008      	b.n	8004a9c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a98:	d0e9      	beq.n	8004a6e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	20000000 	.word	0x20000000
 8004aac:	14f8b589 	.word	0x14f8b589

08004ab0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004abc:	e042      	b.n	8004b44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	f003 0310 	and.w	r3, r3, #16
 8004ac8:	2b10      	cmp	r3, #16
 8004aca:	d119      	bne.n	8004b00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0210 	mvn.w	r2, #16
 8004ad4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e029      	b.n	8004b54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b00:	f7fd f87a 	bl	8001bf8 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d302      	bcc.n	8004b16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d116      	bne.n	8004b44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	f043 0220 	orr.w	r2, r3, #32
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e007      	b.n	8004b54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4e:	2b40      	cmp	r3, #64	; 0x40
 8004b50:	d1b5      	bne.n	8004abe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b72:	d11b      	bne.n	8004bac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	f043 0204 	orr.w	r2, r3, #4
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr

08004bb8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004bc8:	d103      	bne.n	8004bd2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004bd0:	e007      	b.n	8004be2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004bda:	d102      	bne.n	8004be2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2208      	movs	r2, #8
 8004be0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr

08004bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e26c      	b.n	80050d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 8087 	beq.w	8004d1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c0c:	4b92      	ldr	r3, [pc, #584]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f003 030c 	and.w	r3, r3, #12
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d00c      	beq.n	8004c32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c18:	4b8f      	ldr	r3, [pc, #572]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d112      	bne.n	8004c4a <HAL_RCC_OscConfig+0x5e>
 8004c24:	4b8c      	ldr	r3, [pc, #560]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c30:	d10b      	bne.n	8004c4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c32:	4b89      	ldr	r3, [pc, #548]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d06c      	beq.n	8004d18 <HAL_RCC_OscConfig+0x12c>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d168      	bne.n	8004d18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e246      	b.n	80050d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c52:	d106      	bne.n	8004c62 <HAL_RCC_OscConfig+0x76>
 8004c54:	4b80      	ldr	r3, [pc, #512]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a7f      	ldr	r2, [pc, #508]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	e02e      	b.n	8004cc0 <HAL_RCC_OscConfig+0xd4>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10c      	bne.n	8004c84 <HAL_RCC_OscConfig+0x98>
 8004c6a:	4b7b      	ldr	r3, [pc, #492]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a7a      	ldr	r2, [pc, #488]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	4b78      	ldr	r3, [pc, #480]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a77      	ldr	r2, [pc, #476]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004c7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	e01d      	b.n	8004cc0 <HAL_RCC_OscConfig+0xd4>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_RCC_OscConfig+0xbc>
 8004c8e:	4b72      	ldr	r3, [pc, #456]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a71      	ldr	r2, [pc, #452]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	4b6f      	ldr	r3, [pc, #444]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a6e      	ldr	r2, [pc, #440]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	e00b      	b.n	8004cc0 <HAL_RCC_OscConfig+0xd4>
 8004ca8:	4b6b      	ldr	r3, [pc, #428]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a6a      	ldr	r2, [pc, #424]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb2:	6013      	str	r3, [r2, #0]
 8004cb4:	4b68      	ldr	r3, [pc, #416]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a67      	ldr	r2, [pc, #412]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d013      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc8:	f7fc ff96 	bl	8001bf8 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cd0:	f7fc ff92 	bl	8001bf8 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b64      	cmp	r3, #100	; 0x64
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e1fa      	b.n	80050d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce2:	4b5d      	ldr	r3, [pc, #372]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f0      	beq.n	8004cd0 <HAL_RCC_OscConfig+0xe4>
 8004cee:	e014      	b.n	8004d1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf0:	f7fc ff82 	bl	8001bf8 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf8:	f7fc ff7e 	bl	8001bf8 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b64      	cmp	r3, #100	; 0x64
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e1e6      	b.n	80050d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d0a:	4b53      	ldr	r3, [pc, #332]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f0      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x10c>
 8004d16:	e000      	b.n	8004d1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d063      	beq.n	8004dee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d26:	4b4c      	ldr	r3, [pc, #304]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00b      	beq.n	8004d4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d32:	4b49      	ldr	r3, [pc, #292]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	2b08      	cmp	r3, #8
 8004d3c:	d11c      	bne.n	8004d78 <HAL_RCC_OscConfig+0x18c>
 8004d3e:	4b46      	ldr	r3, [pc, #280]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d116      	bne.n	8004d78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d4a:	4b43      	ldr	r3, [pc, #268]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d005      	beq.n	8004d62 <HAL_RCC_OscConfig+0x176>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d001      	beq.n	8004d62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e1ba      	b.n	80050d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d62:	4b3d      	ldr	r3, [pc, #244]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	4939      	ldr	r1, [pc, #228]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d76:	e03a      	b.n	8004dee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d020      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d80:	4b36      	ldr	r3, [pc, #216]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d86:	f7fc ff37 	bl	8001bf8 <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d8c:	e008      	b.n	8004da0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d8e:	f7fc ff33 	bl	8001bf8 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e19b      	b.n	80050d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da0:	4b2d      	ldr	r3, [pc, #180]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0f0      	beq.n	8004d8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dac:	4b2a      	ldr	r3, [pc, #168]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	4927      	ldr	r1, [pc, #156]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	600b      	str	r3, [r1, #0]
 8004dc0:	e015      	b.n	8004dee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dc2:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <HAL_RCC_OscConfig+0x270>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc8:	f7fc ff16 	bl	8001bf8 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd0:	f7fc ff12 	bl	8001bf8 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e17a      	b.n	80050d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004de2:	4b1d      	ldr	r3, [pc, #116]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f0      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d03a      	beq.n	8004e70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d019      	beq.n	8004e36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e02:	4b17      	ldr	r3, [pc, #92]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004e04:	2201      	movs	r2, #1
 8004e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e08:	f7fc fef6 	bl	8001bf8 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e10:	f7fc fef2 	bl	8001bf8 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e15a      	b.n	80050d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e22:	4b0d      	ldr	r3, [pc, #52]	; (8004e58 <HAL_RCC_OscConfig+0x26c>)
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0f0      	beq.n	8004e10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e2e:	2001      	movs	r0, #1
 8004e30:	f000 fac4 	bl	80053bc <RCC_Delay>
 8004e34:	e01c      	b.n	8004e70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e36:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <HAL_RCC_OscConfig+0x274>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3c:	f7fc fedc 	bl	8001bf8 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e42:	e00f      	b.n	8004e64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e44:	f7fc fed8 	bl	8001bf8 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d908      	bls.n	8004e64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e140      	b.n	80050d8 <HAL_RCC_OscConfig+0x4ec>
 8004e56:	bf00      	nop
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	42420000 	.word	0x42420000
 8004e60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e64:	4b9e      	ldr	r3, [pc, #632]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e9      	bne.n	8004e44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 80a6 	beq.w	8004fca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e82:	4b97      	ldr	r3, [pc, #604]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10d      	bne.n	8004eaa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e8e:	4b94      	ldr	r3, [pc, #592]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	4a93      	ldr	r2, [pc, #588]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e98:	61d3      	str	r3, [r2, #28]
 8004e9a:	4b91      	ldr	r3, [pc, #580]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	60bb      	str	r3, [r7, #8]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eaa:	4b8e      	ldr	r3, [pc, #568]	; (80050e4 <HAL_RCC_OscConfig+0x4f8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d118      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eb6:	4b8b      	ldr	r3, [pc, #556]	; (80050e4 <HAL_RCC_OscConfig+0x4f8>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a8a      	ldr	r2, [pc, #552]	; (80050e4 <HAL_RCC_OscConfig+0x4f8>)
 8004ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ec2:	f7fc fe99 	bl	8001bf8 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eca:	f7fc fe95 	bl	8001bf8 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b64      	cmp	r3, #100	; 0x64
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e0fd      	b.n	80050d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004edc:	4b81      	ldr	r3, [pc, #516]	; (80050e4 <HAL_RCC_OscConfig+0x4f8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f0      	beq.n	8004eca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d106      	bne.n	8004efe <HAL_RCC_OscConfig+0x312>
 8004ef0:	4b7b      	ldr	r3, [pc, #492]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	4a7a      	ldr	r2, [pc, #488]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	6213      	str	r3, [r2, #32]
 8004efc:	e02d      	b.n	8004f5a <HAL_RCC_OscConfig+0x36e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10c      	bne.n	8004f20 <HAL_RCC_OscConfig+0x334>
 8004f06:	4b76      	ldr	r3, [pc, #472]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	4a75      	ldr	r2, [pc, #468]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004f0c:	f023 0301 	bic.w	r3, r3, #1
 8004f10:	6213      	str	r3, [r2, #32]
 8004f12:	4b73      	ldr	r3, [pc, #460]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	4a72      	ldr	r2, [pc, #456]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004f18:	f023 0304 	bic.w	r3, r3, #4
 8004f1c:	6213      	str	r3, [r2, #32]
 8004f1e:	e01c      	b.n	8004f5a <HAL_RCC_OscConfig+0x36e>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	2b05      	cmp	r3, #5
 8004f26:	d10c      	bne.n	8004f42 <HAL_RCC_OscConfig+0x356>
 8004f28:	4b6d      	ldr	r3, [pc, #436]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	4a6c      	ldr	r2, [pc, #432]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004f2e:	f043 0304 	orr.w	r3, r3, #4
 8004f32:	6213      	str	r3, [r2, #32]
 8004f34:	4b6a      	ldr	r3, [pc, #424]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	4a69      	ldr	r2, [pc, #420]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	6213      	str	r3, [r2, #32]
 8004f40:	e00b      	b.n	8004f5a <HAL_RCC_OscConfig+0x36e>
 8004f42:	4b67      	ldr	r3, [pc, #412]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	4a66      	ldr	r2, [pc, #408]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004f48:	f023 0301 	bic.w	r3, r3, #1
 8004f4c:	6213      	str	r3, [r2, #32]
 8004f4e:	4b64      	ldr	r3, [pc, #400]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	4a63      	ldr	r2, [pc, #396]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004f54:	f023 0304 	bic.w	r3, r3, #4
 8004f58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d015      	beq.n	8004f8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f62:	f7fc fe49 	bl	8001bf8 <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f68:	e00a      	b.n	8004f80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f6a:	f7fc fe45 	bl	8001bf8 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e0ab      	b.n	80050d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f80:	4b57      	ldr	r3, [pc, #348]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0ee      	beq.n	8004f6a <HAL_RCC_OscConfig+0x37e>
 8004f8c:	e014      	b.n	8004fb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f8e:	f7fc fe33 	bl	8001bf8 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f94:	e00a      	b.n	8004fac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f96:	f7fc fe2f 	bl	8001bf8 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e095      	b.n	80050d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fac:	4b4c      	ldr	r3, [pc, #304]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1ee      	bne.n	8004f96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fb8:	7dfb      	ldrb	r3, [r7, #23]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d105      	bne.n	8004fca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fbe:	4b48      	ldr	r3, [pc, #288]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	4a47      	ldr	r2, [pc, #284]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8081 	beq.w	80050d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fd4:	4b42      	ldr	r3, [pc, #264]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f003 030c 	and.w	r3, r3, #12
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d061      	beq.n	80050a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d146      	bne.n	8005076 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe8:	4b3f      	ldr	r3, [pc, #252]	; (80050e8 <HAL_RCC_OscConfig+0x4fc>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fee:	f7fc fe03 	bl	8001bf8 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff6:	f7fc fdff 	bl	8001bf8 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e067      	b.n	80050d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005008:	4b35      	ldr	r3, [pc, #212]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1f0      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800501c:	d108      	bne.n	8005030 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800501e:	4b30      	ldr	r3, [pc, #192]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	492d      	ldr	r1, [pc, #180]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 800502c:	4313      	orrs	r3, r2
 800502e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005030:	4b2b      	ldr	r3, [pc, #172]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a19      	ldr	r1, [r3, #32]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	430b      	orrs	r3, r1
 8005042:	4927      	ldr	r1, [pc, #156]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8005044:	4313      	orrs	r3, r2
 8005046:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005048:	4b27      	ldr	r3, [pc, #156]	; (80050e8 <HAL_RCC_OscConfig+0x4fc>)
 800504a:	2201      	movs	r2, #1
 800504c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504e:	f7fc fdd3 	bl	8001bf8 <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005054:	e008      	b.n	8005068 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005056:	f7fc fdcf 	bl	8001bf8 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e037      	b.n	80050d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005068:	4b1d      	ldr	r3, [pc, #116]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0f0      	beq.n	8005056 <HAL_RCC_OscConfig+0x46a>
 8005074:	e02f      	b.n	80050d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005076:	4b1c      	ldr	r3, [pc, #112]	; (80050e8 <HAL_RCC_OscConfig+0x4fc>)
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507c:	f7fc fdbc 	bl	8001bf8 <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005084:	f7fc fdb8 	bl	8001bf8 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e020      	b.n	80050d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005096:	4b12      	ldr	r3, [pc, #72]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f0      	bne.n	8005084 <HAL_RCC_OscConfig+0x498>
 80050a2:	e018      	b.n	80050d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e013      	b.n	80050d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <HAL_RCC_OscConfig+0x4f4>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d106      	bne.n	80050d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d001      	beq.n	80050d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40021000 	.word	0x40021000
 80050e4:	40007000 	.word	0x40007000
 80050e8:	42420060 	.word	0x42420060

080050ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0d0      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005100:	4b6a      	ldr	r3, [pc, #424]	; (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d910      	bls.n	8005130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510e:	4b67      	ldr	r3, [pc, #412]	; (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f023 0207 	bic.w	r2, r3, #7
 8005116:	4965      	ldr	r1, [pc, #404]	; (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	4313      	orrs	r3, r2
 800511c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800511e:	4b63      	ldr	r3, [pc, #396]	; (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d001      	beq.n	8005130 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0b8      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d020      	beq.n	800517e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005148:	4b59      	ldr	r3, [pc, #356]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	4a58      	ldr	r2, [pc, #352]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 800514e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005152:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005160:	4b53      	ldr	r3, [pc, #332]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	4a52      	ldr	r2, [pc, #328]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005166:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800516a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800516c:	4b50      	ldr	r3, [pc, #320]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	494d      	ldr	r1, [pc, #308]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 800517a:	4313      	orrs	r3, r2
 800517c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d040      	beq.n	800520c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d107      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005192:	4b47      	ldr	r3, [pc, #284]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d115      	bne.n	80051ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e07f      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d107      	bne.n	80051ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051aa:	4b41      	ldr	r3, [pc, #260]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e073      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ba:	4b3d      	ldr	r3, [pc, #244]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e06b      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ca:	4b39      	ldr	r3, [pc, #228]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f023 0203 	bic.w	r2, r3, #3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	4936      	ldr	r1, [pc, #216]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051dc:	f7fc fd0c 	bl	8001bf8 <HAL_GetTick>
 80051e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e2:	e00a      	b.n	80051fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e4:	f7fc fd08 	bl	8001bf8 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e053      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051fa:	4b2d      	ldr	r3, [pc, #180]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f003 020c 	and.w	r2, r3, #12
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	429a      	cmp	r2, r3
 800520a:	d1eb      	bne.n	80051e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800520c:	4b27      	ldr	r3, [pc, #156]	; (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d210      	bcs.n	800523c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521a:	4b24      	ldr	r3, [pc, #144]	; (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 0207 	bic.w	r2, r3, #7
 8005222:	4922      	ldr	r1, [pc, #136]	; (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	4313      	orrs	r3, r2
 8005228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800522a:	4b20      	ldr	r3, [pc, #128]	; (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e032      	b.n	80052a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4916      	ldr	r1, [pc, #88]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005256:	4313      	orrs	r3, r2
 8005258:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005266:	4b12      	ldr	r3, [pc, #72]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	490e      	ldr	r1, [pc, #56]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005276:	4313      	orrs	r3, r2
 8005278:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800527a:	f000 f821 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 800527e:	4602      	mov	r2, r0
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	490a      	ldr	r1, [pc, #40]	; (80052b4 <HAL_RCC_ClockConfig+0x1c8>)
 800528c:	5ccb      	ldrb	r3, [r1, r3]
 800528e:	fa22 f303 	lsr.w	r3, r2, r3
 8005292:	4a09      	ldr	r2, [pc, #36]	; (80052b8 <HAL_RCC_ClockConfig+0x1cc>)
 8005294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005296:	4b09      	ldr	r3, [pc, #36]	; (80052bc <HAL_RCC_ClockConfig+0x1d0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7fc fc6a 	bl	8001b74 <HAL_InitTick>

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40022000 	.word	0x40022000
 80052b0:	40021000 	.word	0x40021000
 80052b4:	080063ac 	.word	0x080063ac
 80052b8:	20000000 	.word	0x20000000
 80052bc:	20000004 	.word	0x20000004

080052c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c0:	b490      	push	{r4, r7}
 80052c2:	b08a      	sub	sp, #40	; 0x28
 80052c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80052c6:	4b2a      	ldr	r3, [pc, #168]	; (8005370 <HAL_RCC_GetSysClockFreq+0xb0>)
 80052c8:	1d3c      	adds	r4, r7, #4
 80052ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80052d0:	f240 2301 	movw	r3, #513	; 0x201
 80052d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61fb      	str	r3, [r7, #28]
 80052da:	2300      	movs	r3, #0
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	2300      	movs	r3, #0
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80052ea:	4b22      	ldr	r3, [pc, #136]	; (8005374 <HAL_RCC_GetSysClockFreq+0xb4>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f003 030c 	and.w	r3, r3, #12
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d002      	beq.n	8005300 <HAL_RCC_GetSysClockFreq+0x40>
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d003      	beq.n	8005306 <HAL_RCC_GetSysClockFreq+0x46>
 80052fe:	e02d      	b.n	800535c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005300:	4b1d      	ldr	r3, [pc, #116]	; (8005378 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005302:	623b      	str	r3, [r7, #32]
      break;
 8005304:	e02d      	b.n	8005362 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	0c9b      	lsrs	r3, r3, #18
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005312:	4413      	add	r3, r2
 8005314:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005318:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d013      	beq.n	800534c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005324:	4b13      	ldr	r3, [pc, #76]	; (8005374 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	0c5b      	lsrs	r3, r3, #17
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005332:	4413      	add	r3, r2
 8005334:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005338:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	4a0e      	ldr	r2, [pc, #56]	; (8005378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800533e:	fb02 f203 	mul.w	r2, r2, r3
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	fbb2 f3f3 	udiv	r3, r2, r3
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
 800534a:	e004      	b.n	8005356 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	4a0b      	ldr	r2, [pc, #44]	; (800537c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005350:	fb02 f303 	mul.w	r3, r2, r3
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	623b      	str	r3, [r7, #32]
      break;
 800535a:	e002      	b.n	8005362 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800535c:	4b06      	ldr	r3, [pc, #24]	; (8005378 <HAL_RCC_GetSysClockFreq+0xb8>)
 800535e:	623b      	str	r3, [r7, #32]
      break;
 8005360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005362:	6a3b      	ldr	r3, [r7, #32]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3728      	adds	r7, #40	; 0x28
 8005368:	46bd      	mov	sp, r7
 800536a:	bc90      	pop	{r4, r7}
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	0800639c 	.word	0x0800639c
 8005374:	40021000 	.word	0x40021000
 8005378:	007a1200 	.word	0x007a1200
 800537c:	003d0900 	.word	0x003d0900

08005380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005384:	4b02      	ldr	r3, [pc, #8]	; (8005390 <HAL_RCC_GetHCLKFreq+0x10>)
 8005386:	681b      	ldr	r3, [r3, #0]
}
 8005388:	4618      	mov	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr
 8005390:	20000000 	.word	0x20000000

08005394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005398:	f7ff fff2 	bl	8005380 <HAL_RCC_GetHCLKFreq>
 800539c:	4602      	mov	r2, r0
 800539e:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	0a1b      	lsrs	r3, r3, #8
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	4903      	ldr	r1, [pc, #12]	; (80053b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053aa:	5ccb      	ldrb	r3, [r1, r3]
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40021000 	.word	0x40021000
 80053b8:	080063bc 	.word	0x080063bc

080053bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80053c4:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <RCC_Delay+0x34>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a0a      	ldr	r2, [pc, #40]	; (80053f4 <RCC_Delay+0x38>)
 80053ca:	fba2 2303 	umull	r2, r3, r2, r3
 80053ce:	0a5b      	lsrs	r3, r3, #9
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	fb02 f303 	mul.w	r3, r2, r3
 80053d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80053d8:	bf00      	nop
  }
  while (Delay --);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1e5a      	subs	r2, r3, #1
 80053de:	60fa      	str	r2, [r7, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1f9      	bne.n	80053d8 <RCC_Delay+0x1c>
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bc80      	pop	{r7}
 80053ee:	4770      	bx	lr
 80053f0:	20000000 	.word	0x20000000
 80053f4:	10624dd3 	.word	0x10624dd3

080053f8 <__errno>:
 80053f8:	4b01      	ldr	r3, [pc, #4]	; (8005400 <__errno+0x8>)
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	2000000c 	.word	0x2000000c

08005404 <__libc_init_array>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	2600      	movs	r6, #0
 8005408:	4d0c      	ldr	r5, [pc, #48]	; (800543c <__libc_init_array+0x38>)
 800540a:	4c0d      	ldr	r4, [pc, #52]	; (8005440 <__libc_init_array+0x3c>)
 800540c:	1b64      	subs	r4, r4, r5
 800540e:	10a4      	asrs	r4, r4, #2
 8005410:	42a6      	cmp	r6, r4
 8005412:	d109      	bne.n	8005428 <__libc_init_array+0x24>
 8005414:	f000 ffb2 	bl	800637c <_init>
 8005418:	2600      	movs	r6, #0
 800541a:	4d0a      	ldr	r5, [pc, #40]	; (8005444 <__libc_init_array+0x40>)
 800541c:	4c0a      	ldr	r4, [pc, #40]	; (8005448 <__libc_init_array+0x44>)
 800541e:	1b64      	subs	r4, r4, r5
 8005420:	10a4      	asrs	r4, r4, #2
 8005422:	42a6      	cmp	r6, r4
 8005424:	d105      	bne.n	8005432 <__libc_init_array+0x2e>
 8005426:	bd70      	pop	{r4, r5, r6, pc}
 8005428:	f855 3b04 	ldr.w	r3, [r5], #4
 800542c:	4798      	blx	r3
 800542e:	3601      	adds	r6, #1
 8005430:	e7ee      	b.n	8005410 <__libc_init_array+0xc>
 8005432:	f855 3b04 	ldr.w	r3, [r5], #4
 8005436:	4798      	blx	r3
 8005438:	3601      	adds	r6, #1
 800543a:	e7f2      	b.n	8005422 <__libc_init_array+0x1e>
 800543c:	08006408 	.word	0x08006408
 8005440:	08006408 	.word	0x08006408
 8005444:	08006408 	.word	0x08006408
 8005448:	0800640c 	.word	0x0800640c

0800544c <memset>:
 800544c:	4603      	mov	r3, r0
 800544e:	4402      	add	r2, r0
 8005450:	4293      	cmp	r3, r2
 8005452:	d100      	bne.n	8005456 <memset+0xa>
 8005454:	4770      	bx	lr
 8005456:	f803 1b01 	strb.w	r1, [r3], #1
 800545a:	e7f9      	b.n	8005450 <memset+0x4>

0800545c <pow>:
 800545c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005460:	461f      	mov	r7, r3
 8005462:	4680      	mov	r8, r0
 8005464:	4689      	mov	r9, r1
 8005466:	4616      	mov	r6, r2
 8005468:	f000 f8a6 	bl	80055b8 <__ieee754_pow>
 800546c:	4b4d      	ldr	r3, [pc, #308]	; (80055a4 <pow+0x148>)
 800546e:	4604      	mov	r4, r0
 8005470:	f993 3000 	ldrsb.w	r3, [r3]
 8005474:	460d      	mov	r5, r1
 8005476:	3301      	adds	r3, #1
 8005478:	d015      	beq.n	80054a6 <pow+0x4a>
 800547a:	4632      	mov	r2, r6
 800547c:	463b      	mov	r3, r7
 800547e:	4630      	mov	r0, r6
 8005480:	4639      	mov	r1, r7
 8005482:	f7fb fabb 	bl	80009fc <__aeabi_dcmpun>
 8005486:	b970      	cbnz	r0, 80054a6 <pow+0x4a>
 8005488:	4642      	mov	r2, r8
 800548a:	464b      	mov	r3, r9
 800548c:	4640      	mov	r0, r8
 800548e:	4649      	mov	r1, r9
 8005490:	f7fb fab4 	bl	80009fc <__aeabi_dcmpun>
 8005494:	2200      	movs	r2, #0
 8005496:	2300      	movs	r3, #0
 8005498:	b148      	cbz	r0, 80054ae <pow+0x52>
 800549a:	4630      	mov	r0, r6
 800549c:	4639      	mov	r1, r7
 800549e:	f7fb fa7b 	bl	8000998 <__aeabi_dcmpeq>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d17b      	bne.n	800559e <pow+0x142>
 80054a6:	4620      	mov	r0, r4
 80054a8:	4629      	mov	r1, r5
 80054aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ae:	4640      	mov	r0, r8
 80054b0:	4649      	mov	r1, r9
 80054b2:	f7fb fa71 	bl	8000998 <__aeabi_dcmpeq>
 80054b6:	b1e0      	cbz	r0, 80054f2 <pow+0x96>
 80054b8:	2200      	movs	r2, #0
 80054ba:	2300      	movs	r3, #0
 80054bc:	4630      	mov	r0, r6
 80054be:	4639      	mov	r1, r7
 80054c0:	f7fb fa6a 	bl	8000998 <__aeabi_dcmpeq>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d16a      	bne.n	800559e <pow+0x142>
 80054c8:	4630      	mov	r0, r6
 80054ca:	4639      	mov	r1, r7
 80054cc:	f000 fe39 	bl	8006142 <finite>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	d0e8      	beq.n	80054a6 <pow+0x4a>
 80054d4:	2200      	movs	r2, #0
 80054d6:	2300      	movs	r3, #0
 80054d8:	4630      	mov	r0, r6
 80054da:	4639      	mov	r1, r7
 80054dc:	f7fb fa66 	bl	80009ac <__aeabi_dcmplt>
 80054e0:	2800      	cmp	r0, #0
 80054e2:	d0e0      	beq.n	80054a6 <pow+0x4a>
 80054e4:	f7ff ff88 	bl	80053f8 <__errno>
 80054e8:	2321      	movs	r3, #33	; 0x21
 80054ea:	2400      	movs	r4, #0
 80054ec:	6003      	str	r3, [r0, #0]
 80054ee:	4d2e      	ldr	r5, [pc, #184]	; (80055a8 <pow+0x14c>)
 80054f0:	e7d9      	b.n	80054a6 <pow+0x4a>
 80054f2:	4620      	mov	r0, r4
 80054f4:	4629      	mov	r1, r5
 80054f6:	f000 fe24 	bl	8006142 <finite>
 80054fa:	bba8      	cbnz	r0, 8005568 <pow+0x10c>
 80054fc:	4640      	mov	r0, r8
 80054fe:	4649      	mov	r1, r9
 8005500:	f000 fe1f 	bl	8006142 <finite>
 8005504:	b380      	cbz	r0, 8005568 <pow+0x10c>
 8005506:	4630      	mov	r0, r6
 8005508:	4639      	mov	r1, r7
 800550a:	f000 fe1a 	bl	8006142 <finite>
 800550e:	b358      	cbz	r0, 8005568 <pow+0x10c>
 8005510:	4622      	mov	r2, r4
 8005512:	462b      	mov	r3, r5
 8005514:	4620      	mov	r0, r4
 8005516:	4629      	mov	r1, r5
 8005518:	f7fb fa70 	bl	80009fc <__aeabi_dcmpun>
 800551c:	b160      	cbz	r0, 8005538 <pow+0xdc>
 800551e:	f7ff ff6b 	bl	80053f8 <__errno>
 8005522:	2321      	movs	r3, #33	; 0x21
 8005524:	2200      	movs	r2, #0
 8005526:	6003      	str	r3, [r0, #0]
 8005528:	2300      	movs	r3, #0
 800552a:	4610      	mov	r0, r2
 800552c:	4619      	mov	r1, r3
 800552e:	f7fb f8f5 	bl	800071c <__aeabi_ddiv>
 8005532:	4604      	mov	r4, r0
 8005534:	460d      	mov	r5, r1
 8005536:	e7b6      	b.n	80054a6 <pow+0x4a>
 8005538:	f7ff ff5e 	bl	80053f8 <__errno>
 800553c:	2322      	movs	r3, #34	; 0x22
 800553e:	2200      	movs	r2, #0
 8005540:	6003      	str	r3, [r0, #0]
 8005542:	4649      	mov	r1, r9
 8005544:	2300      	movs	r3, #0
 8005546:	4640      	mov	r0, r8
 8005548:	f7fb fa30 	bl	80009ac <__aeabi_dcmplt>
 800554c:	2400      	movs	r4, #0
 800554e:	b148      	cbz	r0, 8005564 <pow+0x108>
 8005550:	4630      	mov	r0, r6
 8005552:	4639      	mov	r1, r7
 8005554:	f000 fe02 	bl	800615c <rint>
 8005558:	4632      	mov	r2, r6
 800555a:	463b      	mov	r3, r7
 800555c:	f7fb fa1c 	bl	8000998 <__aeabi_dcmpeq>
 8005560:	2800      	cmp	r0, #0
 8005562:	d0c4      	beq.n	80054ee <pow+0x92>
 8005564:	4d11      	ldr	r5, [pc, #68]	; (80055ac <pow+0x150>)
 8005566:	e79e      	b.n	80054a6 <pow+0x4a>
 8005568:	2200      	movs	r2, #0
 800556a:	2300      	movs	r3, #0
 800556c:	4620      	mov	r0, r4
 800556e:	4629      	mov	r1, r5
 8005570:	f7fb fa12 	bl	8000998 <__aeabi_dcmpeq>
 8005574:	2800      	cmp	r0, #0
 8005576:	d096      	beq.n	80054a6 <pow+0x4a>
 8005578:	4640      	mov	r0, r8
 800557a:	4649      	mov	r1, r9
 800557c:	f000 fde1 	bl	8006142 <finite>
 8005580:	2800      	cmp	r0, #0
 8005582:	d090      	beq.n	80054a6 <pow+0x4a>
 8005584:	4630      	mov	r0, r6
 8005586:	4639      	mov	r1, r7
 8005588:	f000 fddb 	bl	8006142 <finite>
 800558c:	2800      	cmp	r0, #0
 800558e:	d08a      	beq.n	80054a6 <pow+0x4a>
 8005590:	f7ff ff32 	bl	80053f8 <__errno>
 8005594:	2322      	movs	r3, #34	; 0x22
 8005596:	2400      	movs	r4, #0
 8005598:	2500      	movs	r5, #0
 800559a:	6003      	str	r3, [r0, #0]
 800559c:	e783      	b.n	80054a6 <pow+0x4a>
 800559e:	2400      	movs	r4, #0
 80055a0:	4d03      	ldr	r5, [pc, #12]	; (80055b0 <pow+0x154>)
 80055a2:	e780      	b.n	80054a6 <pow+0x4a>
 80055a4:	20000070 	.word	0x20000070
 80055a8:	fff00000 	.word	0xfff00000
 80055ac:	7ff00000 	.word	0x7ff00000
 80055b0:	3ff00000 	.word	0x3ff00000
 80055b4:	00000000 	.word	0x00000000

080055b8 <__ieee754_pow>:
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	b093      	sub	sp, #76	; 0x4c
 80055be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055c2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80055c6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80055ca:	ea55 0302 	orrs.w	r3, r5, r2
 80055ce:	4607      	mov	r7, r0
 80055d0:	4688      	mov	r8, r1
 80055d2:	f000 84bf 	beq.w	8005f54 <__ieee754_pow+0x99c>
 80055d6:	4b7e      	ldr	r3, [pc, #504]	; (80057d0 <__ieee754_pow+0x218>)
 80055d8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80055dc:	429c      	cmp	r4, r3
 80055de:	4689      	mov	r9, r1
 80055e0:	4682      	mov	sl, r0
 80055e2:	dc09      	bgt.n	80055f8 <__ieee754_pow+0x40>
 80055e4:	d103      	bne.n	80055ee <__ieee754_pow+0x36>
 80055e6:	b978      	cbnz	r0, 8005608 <__ieee754_pow+0x50>
 80055e8:	42a5      	cmp	r5, r4
 80055ea:	dd02      	ble.n	80055f2 <__ieee754_pow+0x3a>
 80055ec:	e00c      	b.n	8005608 <__ieee754_pow+0x50>
 80055ee:	429d      	cmp	r5, r3
 80055f0:	dc02      	bgt.n	80055f8 <__ieee754_pow+0x40>
 80055f2:	429d      	cmp	r5, r3
 80055f4:	d10e      	bne.n	8005614 <__ieee754_pow+0x5c>
 80055f6:	b16a      	cbz	r2, 8005614 <__ieee754_pow+0x5c>
 80055f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80055fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005600:	ea54 030a 	orrs.w	r3, r4, sl
 8005604:	f000 84a6 	beq.w	8005f54 <__ieee754_pow+0x99c>
 8005608:	4872      	ldr	r0, [pc, #456]	; (80057d4 <__ieee754_pow+0x21c>)
 800560a:	b013      	add	sp, #76	; 0x4c
 800560c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005610:	f000 bd9e 	b.w	8006150 <nan>
 8005614:	f1b9 0f00 	cmp.w	r9, #0
 8005618:	da39      	bge.n	800568e <__ieee754_pow+0xd6>
 800561a:	4b6f      	ldr	r3, [pc, #444]	; (80057d8 <__ieee754_pow+0x220>)
 800561c:	429d      	cmp	r5, r3
 800561e:	dc54      	bgt.n	80056ca <__ieee754_pow+0x112>
 8005620:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005624:	429d      	cmp	r5, r3
 8005626:	f340 84a6 	ble.w	8005f76 <__ieee754_pow+0x9be>
 800562a:	152b      	asrs	r3, r5, #20
 800562c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005630:	2b14      	cmp	r3, #20
 8005632:	dd0f      	ble.n	8005654 <__ieee754_pow+0x9c>
 8005634:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005638:	fa22 f103 	lsr.w	r1, r2, r3
 800563c:	fa01 f303 	lsl.w	r3, r1, r3
 8005640:	4293      	cmp	r3, r2
 8005642:	f040 8498 	bne.w	8005f76 <__ieee754_pow+0x9be>
 8005646:	f001 0101 	and.w	r1, r1, #1
 800564a:	f1c1 0302 	rsb	r3, r1, #2
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	b182      	cbz	r2, 8005674 <__ieee754_pow+0xbc>
 8005652:	e05e      	b.n	8005712 <__ieee754_pow+0x15a>
 8005654:	2a00      	cmp	r2, #0
 8005656:	d15a      	bne.n	800570e <__ieee754_pow+0x156>
 8005658:	f1c3 0314 	rsb	r3, r3, #20
 800565c:	fa45 f103 	asr.w	r1, r5, r3
 8005660:	fa01 f303 	lsl.w	r3, r1, r3
 8005664:	42ab      	cmp	r3, r5
 8005666:	f040 8483 	bne.w	8005f70 <__ieee754_pow+0x9b8>
 800566a:	f001 0101 	and.w	r1, r1, #1
 800566e:	f1c1 0302 	rsb	r3, r1, #2
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	4b59      	ldr	r3, [pc, #356]	; (80057dc <__ieee754_pow+0x224>)
 8005676:	429d      	cmp	r5, r3
 8005678:	d130      	bne.n	80056dc <__ieee754_pow+0x124>
 800567a:	2e00      	cmp	r6, #0
 800567c:	f280 8474 	bge.w	8005f68 <__ieee754_pow+0x9b0>
 8005680:	463a      	mov	r2, r7
 8005682:	4643      	mov	r3, r8
 8005684:	2000      	movs	r0, #0
 8005686:	4955      	ldr	r1, [pc, #340]	; (80057dc <__ieee754_pow+0x224>)
 8005688:	f7fb f848 	bl	800071c <__aeabi_ddiv>
 800568c:	e02f      	b.n	80056ee <__ieee754_pow+0x136>
 800568e:	2300      	movs	r3, #0
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	2a00      	cmp	r2, #0
 8005694:	d13d      	bne.n	8005712 <__ieee754_pow+0x15a>
 8005696:	4b4e      	ldr	r3, [pc, #312]	; (80057d0 <__ieee754_pow+0x218>)
 8005698:	429d      	cmp	r5, r3
 800569a:	d1eb      	bne.n	8005674 <__ieee754_pow+0xbc>
 800569c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80056a0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80056a4:	ea53 030a 	orrs.w	r3, r3, sl
 80056a8:	f000 8454 	beq.w	8005f54 <__ieee754_pow+0x99c>
 80056ac:	4b4c      	ldr	r3, [pc, #304]	; (80057e0 <__ieee754_pow+0x228>)
 80056ae:	429c      	cmp	r4, r3
 80056b0:	dd0d      	ble.n	80056ce <__ieee754_pow+0x116>
 80056b2:	2e00      	cmp	r6, #0
 80056b4:	f280 8454 	bge.w	8005f60 <__ieee754_pow+0x9a8>
 80056b8:	f04f 0b00 	mov.w	fp, #0
 80056bc:	f04f 0c00 	mov.w	ip, #0
 80056c0:	4658      	mov	r0, fp
 80056c2:	4661      	mov	r1, ip
 80056c4:	b013      	add	sp, #76	; 0x4c
 80056c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ca:	2302      	movs	r3, #2
 80056cc:	e7e0      	b.n	8005690 <__ieee754_pow+0xd8>
 80056ce:	2e00      	cmp	r6, #0
 80056d0:	daf2      	bge.n	80056b8 <__ieee754_pow+0x100>
 80056d2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80056d6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80056da:	e7f1      	b.n	80056c0 <__ieee754_pow+0x108>
 80056dc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80056e0:	d108      	bne.n	80056f4 <__ieee754_pow+0x13c>
 80056e2:	463a      	mov	r2, r7
 80056e4:	4643      	mov	r3, r8
 80056e6:	4638      	mov	r0, r7
 80056e8:	4641      	mov	r1, r8
 80056ea:	f7fa feed 	bl	80004c8 <__aeabi_dmul>
 80056ee:	4683      	mov	fp, r0
 80056f0:	468c      	mov	ip, r1
 80056f2:	e7e5      	b.n	80056c0 <__ieee754_pow+0x108>
 80056f4:	4b3b      	ldr	r3, [pc, #236]	; (80057e4 <__ieee754_pow+0x22c>)
 80056f6:	429e      	cmp	r6, r3
 80056f8:	d10b      	bne.n	8005712 <__ieee754_pow+0x15a>
 80056fa:	f1b9 0f00 	cmp.w	r9, #0
 80056fe:	db08      	blt.n	8005712 <__ieee754_pow+0x15a>
 8005700:	4638      	mov	r0, r7
 8005702:	4641      	mov	r1, r8
 8005704:	b013      	add	sp, #76	; 0x4c
 8005706:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570a:	f000 bc6b 	b.w	8005fe4 <__ieee754_sqrt>
 800570e:	2300      	movs	r3, #0
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	4638      	mov	r0, r7
 8005714:	4641      	mov	r1, r8
 8005716:	f000 fd11 	bl	800613c <fabs>
 800571a:	4683      	mov	fp, r0
 800571c:	468c      	mov	ip, r1
 800571e:	f1ba 0f00 	cmp.w	sl, #0
 8005722:	d129      	bne.n	8005778 <__ieee754_pow+0x1c0>
 8005724:	b124      	cbz	r4, 8005730 <__ieee754_pow+0x178>
 8005726:	4b2d      	ldr	r3, [pc, #180]	; (80057dc <__ieee754_pow+0x224>)
 8005728:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800572c:	429a      	cmp	r2, r3
 800572e:	d123      	bne.n	8005778 <__ieee754_pow+0x1c0>
 8005730:	2e00      	cmp	r6, #0
 8005732:	da07      	bge.n	8005744 <__ieee754_pow+0x18c>
 8005734:	465a      	mov	r2, fp
 8005736:	4663      	mov	r3, ip
 8005738:	2000      	movs	r0, #0
 800573a:	4928      	ldr	r1, [pc, #160]	; (80057dc <__ieee754_pow+0x224>)
 800573c:	f7fa ffee 	bl	800071c <__aeabi_ddiv>
 8005740:	4683      	mov	fp, r0
 8005742:	468c      	mov	ip, r1
 8005744:	f1b9 0f00 	cmp.w	r9, #0
 8005748:	daba      	bge.n	80056c0 <__ieee754_pow+0x108>
 800574a:	9b00      	ldr	r3, [sp, #0]
 800574c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005750:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005754:	4323      	orrs	r3, r4
 8005756:	d108      	bne.n	800576a <__ieee754_pow+0x1b2>
 8005758:	465a      	mov	r2, fp
 800575a:	4663      	mov	r3, ip
 800575c:	4658      	mov	r0, fp
 800575e:	4661      	mov	r1, ip
 8005760:	f7fa fcfa 	bl	8000158 <__aeabi_dsub>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	e78e      	b.n	8005688 <__ieee754_pow+0xd0>
 800576a:	9b00      	ldr	r3, [sp, #0]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d1a7      	bne.n	80056c0 <__ieee754_pow+0x108>
 8005770:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8005774:	469c      	mov	ip, r3
 8005776:	e7a3      	b.n	80056c0 <__ieee754_pow+0x108>
 8005778:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800577c:	3b01      	subs	r3, #1
 800577e:	930c      	str	r3, [sp, #48]	; 0x30
 8005780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005782:	9b00      	ldr	r3, [sp, #0]
 8005784:	4313      	orrs	r3, r2
 8005786:	d104      	bne.n	8005792 <__ieee754_pow+0x1da>
 8005788:	463a      	mov	r2, r7
 800578a:	4643      	mov	r3, r8
 800578c:	4638      	mov	r0, r7
 800578e:	4641      	mov	r1, r8
 8005790:	e7e6      	b.n	8005760 <__ieee754_pow+0x1a8>
 8005792:	4b15      	ldr	r3, [pc, #84]	; (80057e8 <__ieee754_pow+0x230>)
 8005794:	429d      	cmp	r5, r3
 8005796:	f340 80f9 	ble.w	800598c <__ieee754_pow+0x3d4>
 800579a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800579e:	429d      	cmp	r5, r3
 80057a0:	4b0f      	ldr	r3, [pc, #60]	; (80057e0 <__ieee754_pow+0x228>)
 80057a2:	dd09      	ble.n	80057b8 <__ieee754_pow+0x200>
 80057a4:	429c      	cmp	r4, r3
 80057a6:	dc0c      	bgt.n	80057c2 <__ieee754_pow+0x20a>
 80057a8:	2e00      	cmp	r6, #0
 80057aa:	da85      	bge.n	80056b8 <__ieee754_pow+0x100>
 80057ac:	a306      	add	r3, pc, #24	; (adr r3, 80057c8 <__ieee754_pow+0x210>)
 80057ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b2:	4610      	mov	r0, r2
 80057b4:	4619      	mov	r1, r3
 80057b6:	e798      	b.n	80056ea <__ieee754_pow+0x132>
 80057b8:	429c      	cmp	r4, r3
 80057ba:	dbf5      	blt.n	80057a8 <__ieee754_pow+0x1f0>
 80057bc:	4b07      	ldr	r3, [pc, #28]	; (80057dc <__ieee754_pow+0x224>)
 80057be:	429c      	cmp	r4, r3
 80057c0:	dd14      	ble.n	80057ec <__ieee754_pow+0x234>
 80057c2:	2e00      	cmp	r6, #0
 80057c4:	dcf2      	bgt.n	80057ac <__ieee754_pow+0x1f4>
 80057c6:	e777      	b.n	80056b8 <__ieee754_pow+0x100>
 80057c8:	8800759c 	.word	0x8800759c
 80057cc:	7e37e43c 	.word	0x7e37e43c
 80057d0:	7ff00000 	.word	0x7ff00000
 80057d4:	080063c4 	.word	0x080063c4
 80057d8:	433fffff 	.word	0x433fffff
 80057dc:	3ff00000 	.word	0x3ff00000
 80057e0:	3fefffff 	.word	0x3fefffff
 80057e4:	3fe00000 	.word	0x3fe00000
 80057e8:	41e00000 	.word	0x41e00000
 80057ec:	4661      	mov	r1, ip
 80057ee:	2200      	movs	r2, #0
 80057f0:	4658      	mov	r0, fp
 80057f2:	4b61      	ldr	r3, [pc, #388]	; (8005978 <__ieee754_pow+0x3c0>)
 80057f4:	f7fa fcb0 	bl	8000158 <__aeabi_dsub>
 80057f8:	a355      	add	r3, pc, #340	; (adr r3, 8005950 <__ieee754_pow+0x398>)
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	4604      	mov	r4, r0
 8005800:	460d      	mov	r5, r1
 8005802:	f7fa fe61 	bl	80004c8 <__aeabi_dmul>
 8005806:	a354      	add	r3, pc, #336	; (adr r3, 8005958 <__ieee754_pow+0x3a0>)
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	4606      	mov	r6, r0
 800580e:	460f      	mov	r7, r1
 8005810:	4620      	mov	r0, r4
 8005812:	4629      	mov	r1, r5
 8005814:	f7fa fe58 	bl	80004c8 <__aeabi_dmul>
 8005818:	2200      	movs	r2, #0
 800581a:	4682      	mov	sl, r0
 800581c:	468b      	mov	fp, r1
 800581e:	4620      	mov	r0, r4
 8005820:	4629      	mov	r1, r5
 8005822:	4b56      	ldr	r3, [pc, #344]	; (800597c <__ieee754_pow+0x3c4>)
 8005824:	f7fa fe50 	bl	80004c8 <__aeabi_dmul>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	a14c      	add	r1, pc, #304	; (adr r1, 8005960 <__ieee754_pow+0x3a8>)
 800582e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005832:	f7fa fc91 	bl	8000158 <__aeabi_dsub>
 8005836:	4622      	mov	r2, r4
 8005838:	462b      	mov	r3, r5
 800583a:	f7fa fe45 	bl	80004c8 <__aeabi_dmul>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	2000      	movs	r0, #0
 8005844:	494e      	ldr	r1, [pc, #312]	; (8005980 <__ieee754_pow+0x3c8>)
 8005846:	f7fa fc87 	bl	8000158 <__aeabi_dsub>
 800584a:	4622      	mov	r2, r4
 800584c:	462b      	mov	r3, r5
 800584e:	4680      	mov	r8, r0
 8005850:	4689      	mov	r9, r1
 8005852:	4620      	mov	r0, r4
 8005854:	4629      	mov	r1, r5
 8005856:	f7fa fe37 	bl	80004c8 <__aeabi_dmul>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4640      	mov	r0, r8
 8005860:	4649      	mov	r1, r9
 8005862:	f7fa fe31 	bl	80004c8 <__aeabi_dmul>
 8005866:	a340      	add	r3, pc, #256	; (adr r3, 8005968 <__ieee754_pow+0x3b0>)
 8005868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586c:	f7fa fe2c 	bl	80004c8 <__aeabi_dmul>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4650      	mov	r0, sl
 8005876:	4659      	mov	r1, fp
 8005878:	f7fa fc6e 	bl	8000158 <__aeabi_dsub>
 800587c:	f04f 0a00 	mov.w	sl, #0
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4604      	mov	r4, r0
 8005886:	460d      	mov	r5, r1
 8005888:	4630      	mov	r0, r6
 800588a:	4639      	mov	r1, r7
 800588c:	f7fa fc66 	bl	800015c <__adddf3>
 8005890:	4632      	mov	r2, r6
 8005892:	463b      	mov	r3, r7
 8005894:	4650      	mov	r0, sl
 8005896:	468b      	mov	fp, r1
 8005898:	f7fa fc5e 	bl	8000158 <__aeabi_dsub>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	4620      	mov	r0, r4
 80058a2:	4629      	mov	r1, r5
 80058a4:	f7fa fc58 	bl	8000158 <__aeabi_dsub>
 80058a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80058ac:	9b00      	ldr	r3, [sp, #0]
 80058ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058b0:	3b01      	subs	r3, #1
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f04f 0600 	mov.w	r6, #0
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	bf0c      	ite	eq
 80058be:	4b31      	ldreq	r3, [pc, #196]	; (8005984 <__ieee754_pow+0x3cc>)
 80058c0:	4b2d      	ldrne	r3, [pc, #180]	; (8005978 <__ieee754_pow+0x3c0>)
 80058c2:	4604      	mov	r4, r0
 80058c4:	460d      	mov	r5, r1
 80058c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ca:	e9cd 2300 	strd	r2, r3, [sp]
 80058ce:	4632      	mov	r2, r6
 80058d0:	463b      	mov	r3, r7
 80058d2:	f7fa fc41 	bl	8000158 <__aeabi_dsub>
 80058d6:	4652      	mov	r2, sl
 80058d8:	465b      	mov	r3, fp
 80058da:	f7fa fdf5 	bl	80004c8 <__aeabi_dmul>
 80058de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058e2:	4680      	mov	r8, r0
 80058e4:	4689      	mov	r9, r1
 80058e6:	4620      	mov	r0, r4
 80058e8:	4629      	mov	r1, r5
 80058ea:	f7fa fded 	bl	80004c8 <__aeabi_dmul>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4640      	mov	r0, r8
 80058f4:	4649      	mov	r1, r9
 80058f6:	f7fa fc31 	bl	800015c <__adddf3>
 80058fa:	4632      	mov	r2, r6
 80058fc:	463b      	mov	r3, r7
 80058fe:	4680      	mov	r8, r0
 8005900:	4689      	mov	r9, r1
 8005902:	4650      	mov	r0, sl
 8005904:	4659      	mov	r1, fp
 8005906:	f7fa fddf 	bl	80004c8 <__aeabi_dmul>
 800590a:	4604      	mov	r4, r0
 800590c:	460d      	mov	r5, r1
 800590e:	460b      	mov	r3, r1
 8005910:	4602      	mov	r2, r0
 8005912:	4649      	mov	r1, r9
 8005914:	4640      	mov	r0, r8
 8005916:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800591a:	f7fa fc1f 	bl	800015c <__adddf3>
 800591e:	4b1a      	ldr	r3, [pc, #104]	; (8005988 <__ieee754_pow+0x3d0>)
 8005920:	4682      	mov	sl, r0
 8005922:	4299      	cmp	r1, r3
 8005924:	460f      	mov	r7, r1
 8005926:	460e      	mov	r6, r1
 8005928:	f340 82ed 	ble.w	8005f06 <__ieee754_pow+0x94e>
 800592c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005930:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005934:	4303      	orrs	r3, r0
 8005936:	f000 81e7 	beq.w	8005d08 <__ieee754_pow+0x750>
 800593a:	a30d      	add	r3, pc, #52	; (adr r3, 8005970 <__ieee754_pow+0x3b8>)
 800593c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005940:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005944:	f7fa fdc0 	bl	80004c8 <__aeabi_dmul>
 8005948:	a309      	add	r3, pc, #36	; (adr r3, 8005970 <__ieee754_pow+0x3b8>)
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	e6cc      	b.n	80056ea <__ieee754_pow+0x132>
 8005950:	60000000 	.word	0x60000000
 8005954:	3ff71547 	.word	0x3ff71547
 8005958:	f85ddf44 	.word	0xf85ddf44
 800595c:	3e54ae0b 	.word	0x3e54ae0b
 8005960:	55555555 	.word	0x55555555
 8005964:	3fd55555 	.word	0x3fd55555
 8005968:	652b82fe 	.word	0x652b82fe
 800596c:	3ff71547 	.word	0x3ff71547
 8005970:	8800759c 	.word	0x8800759c
 8005974:	7e37e43c 	.word	0x7e37e43c
 8005978:	3ff00000 	.word	0x3ff00000
 800597c:	3fd00000 	.word	0x3fd00000
 8005980:	3fe00000 	.word	0x3fe00000
 8005984:	bff00000 	.word	0xbff00000
 8005988:	408fffff 	.word	0x408fffff
 800598c:	4bd4      	ldr	r3, [pc, #848]	; (8005ce0 <__ieee754_pow+0x728>)
 800598e:	2200      	movs	r2, #0
 8005990:	ea09 0303 	and.w	r3, r9, r3
 8005994:	b943      	cbnz	r3, 80059a8 <__ieee754_pow+0x3f0>
 8005996:	4658      	mov	r0, fp
 8005998:	4661      	mov	r1, ip
 800599a:	4bd2      	ldr	r3, [pc, #840]	; (8005ce4 <__ieee754_pow+0x72c>)
 800599c:	f7fa fd94 	bl	80004c8 <__aeabi_dmul>
 80059a0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80059a4:	4683      	mov	fp, r0
 80059a6:	460c      	mov	r4, r1
 80059a8:	1523      	asrs	r3, r4, #20
 80059aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80059ae:	4413      	add	r3, r2
 80059b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80059b2:	4bcd      	ldr	r3, [pc, #820]	; (8005ce8 <__ieee754_pow+0x730>)
 80059b4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80059b8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80059bc:	429c      	cmp	r4, r3
 80059be:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80059c2:	dd08      	ble.n	80059d6 <__ieee754_pow+0x41e>
 80059c4:	4bc9      	ldr	r3, [pc, #804]	; (8005cec <__ieee754_pow+0x734>)
 80059c6:	429c      	cmp	r4, r3
 80059c8:	f340 819c 	ble.w	8005d04 <__ieee754_pow+0x74c>
 80059cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80059d2:	3301      	adds	r3, #1
 80059d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80059d6:	2600      	movs	r6, #0
 80059d8:	00f3      	lsls	r3, r6, #3
 80059da:	930d      	str	r3, [sp, #52]	; 0x34
 80059dc:	4bc4      	ldr	r3, [pc, #784]	; (8005cf0 <__ieee754_pow+0x738>)
 80059de:	4658      	mov	r0, fp
 80059e0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80059e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059e8:	4629      	mov	r1, r5
 80059ea:	461a      	mov	r2, r3
 80059ec:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80059f0:	4623      	mov	r3, r4
 80059f2:	f7fa fbb1 	bl	8000158 <__aeabi_dsub>
 80059f6:	46da      	mov	sl, fp
 80059f8:	462b      	mov	r3, r5
 80059fa:	4652      	mov	r2, sl
 80059fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005a00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a04:	f7fa fbaa 	bl	800015c <__adddf3>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	49b9      	ldr	r1, [pc, #740]	; (8005cf4 <__ieee754_pow+0x73c>)
 8005a10:	f7fa fe84 	bl	800071c <__aeabi_ddiv>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005a20:	f7fa fd52 	bl	80004c8 <__aeabi_dmul>
 8005a24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a28:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005a2c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a30:	2300      	movs	r3, #0
 8005a32:	2200      	movs	r2, #0
 8005a34:	46ab      	mov	fp, r5
 8005a36:	106d      	asrs	r5, r5, #1
 8005a38:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005a3c:	9304      	str	r3, [sp, #16]
 8005a3e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005a42:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005a46:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	4649      	mov	r1, r9
 8005a4e:	4614      	mov	r4, r2
 8005a50:	461d      	mov	r5, r3
 8005a52:	f7fa fd39 	bl	80004c8 <__aeabi_dmul>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005a5e:	f7fa fb7b 	bl	8000158 <__aeabi_dsub>
 8005a62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a66:	4606      	mov	r6, r0
 8005a68:	460f      	mov	r7, r1
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	f7fa fb73 	bl	8000158 <__aeabi_dsub>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4650      	mov	r0, sl
 8005a78:	4659      	mov	r1, fp
 8005a7a:	f7fa fb6d 	bl	8000158 <__aeabi_dsub>
 8005a7e:	4642      	mov	r2, r8
 8005a80:	464b      	mov	r3, r9
 8005a82:	f7fa fd21 	bl	80004c8 <__aeabi_dmul>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	4639      	mov	r1, r7
 8005a8e:	f7fa fb63 	bl	8000158 <__aeabi_dsub>
 8005a92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a96:	f7fa fd17 	bl	80004c8 <__aeabi_dmul>
 8005a9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	f7fa fd0f 	bl	80004c8 <__aeabi_dmul>
 8005aaa:	a37b      	add	r3, pc, #492	; (adr r3, 8005c98 <__ieee754_pow+0x6e0>)
 8005aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	460d      	mov	r5, r1
 8005ab4:	f7fa fd08 	bl	80004c8 <__aeabi_dmul>
 8005ab8:	a379      	add	r3, pc, #484	; (adr r3, 8005ca0 <__ieee754_pow+0x6e8>)
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	f7fa fb4d 	bl	800015c <__adddf3>
 8005ac2:	4622      	mov	r2, r4
 8005ac4:	462b      	mov	r3, r5
 8005ac6:	f7fa fcff 	bl	80004c8 <__aeabi_dmul>
 8005aca:	a377      	add	r3, pc, #476	; (adr r3, 8005ca8 <__ieee754_pow+0x6f0>)
 8005acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad0:	f7fa fb44 	bl	800015c <__adddf3>
 8005ad4:	4622      	mov	r2, r4
 8005ad6:	462b      	mov	r3, r5
 8005ad8:	f7fa fcf6 	bl	80004c8 <__aeabi_dmul>
 8005adc:	a374      	add	r3, pc, #464	; (adr r3, 8005cb0 <__ieee754_pow+0x6f8>)
 8005ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae2:	f7fa fb3b 	bl	800015c <__adddf3>
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	462b      	mov	r3, r5
 8005aea:	f7fa fced 	bl	80004c8 <__aeabi_dmul>
 8005aee:	a372      	add	r3, pc, #456	; (adr r3, 8005cb8 <__ieee754_pow+0x700>)
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f7fa fb32 	bl	800015c <__adddf3>
 8005af8:	4622      	mov	r2, r4
 8005afa:	462b      	mov	r3, r5
 8005afc:	f7fa fce4 	bl	80004c8 <__aeabi_dmul>
 8005b00:	a36f      	add	r3, pc, #444	; (adr r3, 8005cc0 <__ieee754_pow+0x708>)
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	f7fa fb29 	bl	800015c <__adddf3>
 8005b0a:	4622      	mov	r2, r4
 8005b0c:	4606      	mov	r6, r0
 8005b0e:	460f      	mov	r7, r1
 8005b10:	462b      	mov	r3, r5
 8005b12:	4620      	mov	r0, r4
 8005b14:	4629      	mov	r1, r5
 8005b16:	f7fa fcd7 	bl	80004c8 <__aeabi_dmul>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4630      	mov	r0, r6
 8005b20:	4639      	mov	r1, r7
 8005b22:	f7fa fcd1 	bl	80004c8 <__aeabi_dmul>
 8005b26:	4604      	mov	r4, r0
 8005b28:	460d      	mov	r5, r1
 8005b2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b2e:	4642      	mov	r2, r8
 8005b30:	464b      	mov	r3, r9
 8005b32:	f7fa fb13 	bl	800015c <__adddf3>
 8005b36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b3a:	f7fa fcc5 	bl	80004c8 <__aeabi_dmul>
 8005b3e:	4622      	mov	r2, r4
 8005b40:	462b      	mov	r3, r5
 8005b42:	f7fa fb0b 	bl	800015c <__adddf3>
 8005b46:	4642      	mov	r2, r8
 8005b48:	4606      	mov	r6, r0
 8005b4a:	460f      	mov	r7, r1
 8005b4c:	464b      	mov	r3, r9
 8005b4e:	4640      	mov	r0, r8
 8005b50:	4649      	mov	r1, r9
 8005b52:	f7fa fcb9 	bl	80004c8 <__aeabi_dmul>
 8005b56:	2200      	movs	r2, #0
 8005b58:	4b67      	ldr	r3, [pc, #412]	; (8005cf8 <__ieee754_pow+0x740>)
 8005b5a:	4682      	mov	sl, r0
 8005b5c:	468b      	mov	fp, r1
 8005b5e:	f7fa fafd 	bl	800015c <__adddf3>
 8005b62:	4632      	mov	r2, r6
 8005b64:	463b      	mov	r3, r7
 8005b66:	f7fa faf9 	bl	800015c <__adddf3>
 8005b6a:	9c04      	ldr	r4, [sp, #16]
 8005b6c:	460d      	mov	r5, r1
 8005b6e:	4622      	mov	r2, r4
 8005b70:	460b      	mov	r3, r1
 8005b72:	4640      	mov	r0, r8
 8005b74:	4649      	mov	r1, r9
 8005b76:	f7fa fca7 	bl	80004c8 <__aeabi_dmul>
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	4680      	mov	r8, r0
 8005b7e:	4689      	mov	r9, r1
 8005b80:	4620      	mov	r0, r4
 8005b82:	4629      	mov	r1, r5
 8005b84:	4b5c      	ldr	r3, [pc, #368]	; (8005cf8 <__ieee754_pow+0x740>)
 8005b86:	f7fa fae7 	bl	8000158 <__aeabi_dsub>
 8005b8a:	4652      	mov	r2, sl
 8005b8c:	465b      	mov	r3, fp
 8005b8e:	f7fa fae3 	bl	8000158 <__aeabi_dsub>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4630      	mov	r0, r6
 8005b98:	4639      	mov	r1, r7
 8005b9a:	f7fa fadd 	bl	8000158 <__aeabi_dsub>
 8005b9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ba2:	f7fa fc91 	bl	80004c8 <__aeabi_dmul>
 8005ba6:	4622      	mov	r2, r4
 8005ba8:	4606      	mov	r6, r0
 8005baa:	460f      	mov	r7, r1
 8005bac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005bb0:	462b      	mov	r3, r5
 8005bb2:	f7fa fc89 	bl	80004c8 <__aeabi_dmul>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4630      	mov	r0, r6
 8005bbc:	4639      	mov	r1, r7
 8005bbe:	f7fa facd 	bl	800015c <__adddf3>
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	460f      	mov	r7, r1
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4640      	mov	r0, r8
 8005bcc:	4649      	mov	r1, r9
 8005bce:	f7fa fac5 	bl	800015c <__adddf3>
 8005bd2:	a33d      	add	r3, pc, #244	; (adr r3, 8005cc8 <__ieee754_pow+0x710>)
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	9c04      	ldr	r4, [sp, #16]
 8005bda:	460d      	mov	r5, r1
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f7fa fc73 	bl	80004c8 <__aeabi_dmul>
 8005be2:	4642      	mov	r2, r8
 8005be4:	464b      	mov	r3, r9
 8005be6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005bea:	4620      	mov	r0, r4
 8005bec:	4629      	mov	r1, r5
 8005bee:	f7fa fab3 	bl	8000158 <__aeabi_dsub>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	4639      	mov	r1, r7
 8005bfa:	f7fa faad 	bl	8000158 <__aeabi_dsub>
 8005bfe:	a334      	add	r3, pc, #208	; (adr r3, 8005cd0 <__ieee754_pow+0x718>)
 8005c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c04:	f7fa fc60 	bl	80004c8 <__aeabi_dmul>
 8005c08:	a333      	add	r3, pc, #204	; (adr r3, 8005cd8 <__ieee754_pow+0x720>)
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	4606      	mov	r6, r0
 8005c10:	460f      	mov	r7, r1
 8005c12:	4620      	mov	r0, r4
 8005c14:	4629      	mov	r1, r5
 8005c16:	f7fa fc57 	bl	80004c8 <__aeabi_dmul>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4630      	mov	r0, r6
 8005c20:	4639      	mov	r1, r7
 8005c22:	f7fa fa9b 	bl	800015c <__adddf3>
 8005c26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c28:	4b34      	ldr	r3, [pc, #208]	; (8005cfc <__ieee754_pow+0x744>)
 8005c2a:	4413      	add	r3, r2
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	f7fa fa94 	bl	800015c <__adddf3>
 8005c34:	4680      	mov	r8, r0
 8005c36:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005c38:	4689      	mov	r9, r1
 8005c3a:	f7fa fbdb 	bl	80003f4 <__aeabi_i2d>
 8005c3e:	4604      	mov	r4, r0
 8005c40:	460d      	mov	r5, r1
 8005c42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c44:	4b2e      	ldr	r3, [pc, #184]	; (8005d00 <__ieee754_pow+0x748>)
 8005c46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005c50:	4642      	mov	r2, r8
 8005c52:	464b      	mov	r3, r9
 8005c54:	f7fa fa82 	bl	800015c <__adddf3>
 8005c58:	4632      	mov	r2, r6
 8005c5a:	463b      	mov	r3, r7
 8005c5c:	f7fa fa7e 	bl	800015c <__adddf3>
 8005c60:	4622      	mov	r2, r4
 8005c62:	462b      	mov	r3, r5
 8005c64:	f7fa fa7a 	bl	800015c <__adddf3>
 8005c68:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005c6c:	4622      	mov	r2, r4
 8005c6e:	462b      	mov	r3, r5
 8005c70:	4650      	mov	r0, sl
 8005c72:	468b      	mov	fp, r1
 8005c74:	f7fa fa70 	bl	8000158 <__aeabi_dsub>
 8005c78:	4632      	mov	r2, r6
 8005c7a:	463b      	mov	r3, r7
 8005c7c:	f7fa fa6c 	bl	8000158 <__aeabi_dsub>
 8005c80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c84:	f7fa fa68 	bl	8000158 <__aeabi_dsub>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4640      	mov	r0, r8
 8005c8e:	4649      	mov	r1, r9
 8005c90:	e608      	b.n	80058a4 <__ieee754_pow+0x2ec>
 8005c92:	bf00      	nop
 8005c94:	f3af 8000 	nop.w
 8005c98:	4a454eef 	.word	0x4a454eef
 8005c9c:	3fca7e28 	.word	0x3fca7e28
 8005ca0:	93c9db65 	.word	0x93c9db65
 8005ca4:	3fcd864a 	.word	0x3fcd864a
 8005ca8:	a91d4101 	.word	0xa91d4101
 8005cac:	3fd17460 	.word	0x3fd17460
 8005cb0:	518f264d 	.word	0x518f264d
 8005cb4:	3fd55555 	.word	0x3fd55555
 8005cb8:	db6fabff 	.word	0xdb6fabff
 8005cbc:	3fdb6db6 	.word	0x3fdb6db6
 8005cc0:	33333303 	.word	0x33333303
 8005cc4:	3fe33333 	.word	0x3fe33333
 8005cc8:	e0000000 	.word	0xe0000000
 8005ccc:	3feec709 	.word	0x3feec709
 8005cd0:	dc3a03fd 	.word	0xdc3a03fd
 8005cd4:	3feec709 	.word	0x3feec709
 8005cd8:	145b01f5 	.word	0x145b01f5
 8005cdc:	be3e2fe0 	.word	0xbe3e2fe0
 8005ce0:	7ff00000 	.word	0x7ff00000
 8005ce4:	43400000 	.word	0x43400000
 8005ce8:	0003988e 	.word	0x0003988e
 8005cec:	000bb679 	.word	0x000bb679
 8005cf0:	080063c8 	.word	0x080063c8
 8005cf4:	3ff00000 	.word	0x3ff00000
 8005cf8:	40080000 	.word	0x40080000
 8005cfc:	080063e8 	.word	0x080063e8
 8005d00:	080063d8 	.word	0x080063d8
 8005d04:	2601      	movs	r6, #1
 8005d06:	e667      	b.n	80059d8 <__ieee754_pow+0x420>
 8005d08:	a39d      	add	r3, pc, #628	; (adr r3, 8005f80 <__ieee754_pow+0x9c8>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	4640      	mov	r0, r8
 8005d10:	4649      	mov	r1, r9
 8005d12:	f7fa fa23 	bl	800015c <__adddf3>
 8005d16:	4622      	mov	r2, r4
 8005d18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d1c:	462b      	mov	r3, r5
 8005d1e:	4650      	mov	r0, sl
 8005d20:	4639      	mov	r1, r7
 8005d22:	f7fa fa19 	bl	8000158 <__aeabi_dsub>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d2e:	f7fa fe5b 	bl	80009e8 <__aeabi_dcmpgt>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	f47f ae01 	bne.w	800593a <__ieee754_pow+0x382>
 8005d38:	4aa5      	ldr	r2, [pc, #660]	; (8005fd0 <__ieee754_pow+0xa18>)
 8005d3a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	f340 8103 	ble.w	8005f4a <__ieee754_pow+0x992>
 8005d44:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005d48:	2000      	movs	r0, #0
 8005d4a:	151b      	asrs	r3, r3, #20
 8005d4c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005d50:	fa4a f303 	asr.w	r3, sl, r3
 8005d54:	4433      	add	r3, r6
 8005d56:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005d5a:	4f9e      	ldr	r7, [pc, #632]	; (8005fd4 <__ieee754_pow+0xa1c>)
 8005d5c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005d60:	4117      	asrs	r7, r2
 8005d62:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005d66:	ea23 0107 	bic.w	r1, r3, r7
 8005d6a:	f1c2 0214 	rsb	r2, r2, #20
 8005d6e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005d72:	460b      	mov	r3, r1
 8005d74:	fa4a fa02 	asr.w	sl, sl, r2
 8005d78:	2e00      	cmp	r6, #0
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	4620      	mov	r0, r4
 8005d80:	bfb8      	it	lt
 8005d82:	f1ca 0a00 	rsblt	sl, sl, #0
 8005d86:	f7fa f9e7 	bl	8000158 <__aeabi_dsub>
 8005d8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d92:	2400      	movs	r4, #0
 8005d94:	4642      	mov	r2, r8
 8005d96:	464b      	mov	r3, r9
 8005d98:	f7fa f9e0 	bl	800015c <__adddf3>
 8005d9c:	a37a      	add	r3, pc, #488	; (adr r3, 8005f88 <__ieee754_pow+0x9d0>)
 8005d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da2:	4620      	mov	r0, r4
 8005da4:	460d      	mov	r5, r1
 8005da6:	f7fa fb8f 	bl	80004c8 <__aeabi_dmul>
 8005daa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dae:	4606      	mov	r6, r0
 8005db0:	460f      	mov	r7, r1
 8005db2:	4620      	mov	r0, r4
 8005db4:	4629      	mov	r1, r5
 8005db6:	f7fa f9cf 	bl	8000158 <__aeabi_dsub>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	f7fa f9c9 	bl	8000158 <__aeabi_dsub>
 8005dc6:	a372      	add	r3, pc, #456	; (adr r3, 8005f90 <__ieee754_pow+0x9d8>)
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f7fa fb7c 	bl	80004c8 <__aeabi_dmul>
 8005dd0:	a371      	add	r3, pc, #452	; (adr r3, 8005f98 <__ieee754_pow+0x9e0>)
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	4680      	mov	r8, r0
 8005dd8:	4689      	mov	r9, r1
 8005dda:	4620      	mov	r0, r4
 8005ddc:	4629      	mov	r1, r5
 8005dde:	f7fa fb73 	bl	80004c8 <__aeabi_dmul>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4640      	mov	r0, r8
 8005de8:	4649      	mov	r1, r9
 8005dea:	f7fa f9b7 	bl	800015c <__adddf3>
 8005dee:	4604      	mov	r4, r0
 8005df0:	460d      	mov	r5, r1
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4630      	mov	r0, r6
 8005df8:	4639      	mov	r1, r7
 8005dfa:	f7fa f9af 	bl	800015c <__adddf3>
 8005dfe:	4632      	mov	r2, r6
 8005e00:	463b      	mov	r3, r7
 8005e02:	4680      	mov	r8, r0
 8005e04:	4689      	mov	r9, r1
 8005e06:	f7fa f9a7 	bl	8000158 <__aeabi_dsub>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4620      	mov	r0, r4
 8005e10:	4629      	mov	r1, r5
 8005e12:	f7fa f9a1 	bl	8000158 <__aeabi_dsub>
 8005e16:	4642      	mov	r2, r8
 8005e18:	4606      	mov	r6, r0
 8005e1a:	460f      	mov	r7, r1
 8005e1c:	464b      	mov	r3, r9
 8005e1e:	4640      	mov	r0, r8
 8005e20:	4649      	mov	r1, r9
 8005e22:	f7fa fb51 	bl	80004c8 <__aeabi_dmul>
 8005e26:	a35e      	add	r3, pc, #376	; (adr r3, 8005fa0 <__ieee754_pow+0x9e8>)
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	4604      	mov	r4, r0
 8005e2e:	460d      	mov	r5, r1
 8005e30:	f7fa fb4a 	bl	80004c8 <__aeabi_dmul>
 8005e34:	a35c      	add	r3, pc, #368	; (adr r3, 8005fa8 <__ieee754_pow+0x9f0>)
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	f7fa f98d 	bl	8000158 <__aeabi_dsub>
 8005e3e:	4622      	mov	r2, r4
 8005e40:	462b      	mov	r3, r5
 8005e42:	f7fa fb41 	bl	80004c8 <__aeabi_dmul>
 8005e46:	a35a      	add	r3, pc, #360	; (adr r3, 8005fb0 <__ieee754_pow+0x9f8>)
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f7fa f986 	bl	800015c <__adddf3>
 8005e50:	4622      	mov	r2, r4
 8005e52:	462b      	mov	r3, r5
 8005e54:	f7fa fb38 	bl	80004c8 <__aeabi_dmul>
 8005e58:	a357      	add	r3, pc, #348	; (adr r3, 8005fb8 <__ieee754_pow+0xa00>)
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f7fa f97b 	bl	8000158 <__aeabi_dsub>
 8005e62:	4622      	mov	r2, r4
 8005e64:	462b      	mov	r3, r5
 8005e66:	f7fa fb2f 	bl	80004c8 <__aeabi_dmul>
 8005e6a:	a355      	add	r3, pc, #340	; (adr r3, 8005fc0 <__ieee754_pow+0xa08>)
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	f7fa f974 	bl	800015c <__adddf3>
 8005e74:	4622      	mov	r2, r4
 8005e76:	462b      	mov	r3, r5
 8005e78:	f7fa fb26 	bl	80004c8 <__aeabi_dmul>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4640      	mov	r0, r8
 8005e82:	4649      	mov	r1, r9
 8005e84:	f7fa f968 	bl	8000158 <__aeabi_dsub>
 8005e88:	4604      	mov	r4, r0
 8005e8a:	460d      	mov	r5, r1
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4640      	mov	r0, r8
 8005e92:	4649      	mov	r1, r9
 8005e94:	f7fa fb18 	bl	80004c8 <__aeabi_dmul>
 8005e98:	2200      	movs	r2, #0
 8005e9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	f7fa f957 	bl	8000158 <__aeabi_dsub>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	460b      	mov	r3, r1
 8005eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eb2:	f7fa fc33 	bl	800071c <__aeabi_ddiv>
 8005eb6:	4632      	mov	r2, r6
 8005eb8:	4604      	mov	r4, r0
 8005eba:	460d      	mov	r5, r1
 8005ebc:	463b      	mov	r3, r7
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	4649      	mov	r1, r9
 8005ec2:	f7fa fb01 	bl	80004c8 <__aeabi_dmul>
 8005ec6:	4632      	mov	r2, r6
 8005ec8:	463b      	mov	r3, r7
 8005eca:	f7fa f947 	bl	800015c <__adddf3>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	f7fa f93f 	bl	8000158 <__aeabi_dsub>
 8005eda:	4642      	mov	r2, r8
 8005edc:	464b      	mov	r3, r9
 8005ede:	f7fa f93b 	bl	8000158 <__aeabi_dsub>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	493b      	ldr	r1, [pc, #236]	; (8005fd8 <__ieee754_pow+0xa20>)
 8005eea:	f7fa f935 	bl	8000158 <__aeabi_dsub>
 8005eee:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005ef2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005ef6:	da2b      	bge.n	8005f50 <__ieee754_pow+0x998>
 8005ef8:	4652      	mov	r2, sl
 8005efa:	f000 f9b9 	bl	8006270 <scalbn>
 8005efe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f02:	f7ff bbf2 	b.w	80056ea <__ieee754_pow+0x132>
 8005f06:	4b35      	ldr	r3, [pc, #212]	; (8005fdc <__ieee754_pow+0xa24>)
 8005f08:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005f0c:	429f      	cmp	r7, r3
 8005f0e:	f77f af13 	ble.w	8005d38 <__ieee754_pow+0x780>
 8005f12:	4b33      	ldr	r3, [pc, #204]	; (8005fe0 <__ieee754_pow+0xa28>)
 8005f14:	440b      	add	r3, r1
 8005f16:	4303      	orrs	r3, r0
 8005f18:	d00b      	beq.n	8005f32 <__ieee754_pow+0x97a>
 8005f1a:	a32b      	add	r3, pc, #172	; (adr r3, 8005fc8 <__ieee754_pow+0xa10>)
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f24:	f7fa fad0 	bl	80004c8 <__aeabi_dmul>
 8005f28:	a327      	add	r3, pc, #156	; (adr r3, 8005fc8 <__ieee754_pow+0xa10>)
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	f7ff bbdc 	b.w	80056ea <__ieee754_pow+0x132>
 8005f32:	4622      	mov	r2, r4
 8005f34:	462b      	mov	r3, r5
 8005f36:	f7fa f90f 	bl	8000158 <__aeabi_dsub>
 8005f3a:	4642      	mov	r2, r8
 8005f3c:	464b      	mov	r3, r9
 8005f3e:	f7fa fd49 	bl	80009d4 <__aeabi_dcmpge>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	f43f aef8 	beq.w	8005d38 <__ieee754_pow+0x780>
 8005f48:	e7e7      	b.n	8005f1a <__ieee754_pow+0x962>
 8005f4a:	f04f 0a00 	mov.w	sl, #0
 8005f4e:	e71e      	b.n	8005d8e <__ieee754_pow+0x7d6>
 8005f50:	4621      	mov	r1, r4
 8005f52:	e7d4      	b.n	8005efe <__ieee754_pow+0x946>
 8005f54:	f04f 0b00 	mov.w	fp, #0
 8005f58:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8005fd8 <__ieee754_pow+0xa20>
 8005f5c:	f7ff bbb0 	b.w	80056c0 <__ieee754_pow+0x108>
 8005f60:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005f64:	f7ff bbac 	b.w	80056c0 <__ieee754_pow+0x108>
 8005f68:	4638      	mov	r0, r7
 8005f6a:	4641      	mov	r1, r8
 8005f6c:	f7ff bbbf 	b.w	80056ee <__ieee754_pow+0x136>
 8005f70:	9200      	str	r2, [sp, #0]
 8005f72:	f7ff bb7f 	b.w	8005674 <__ieee754_pow+0xbc>
 8005f76:	2300      	movs	r3, #0
 8005f78:	f7ff bb69 	b.w	800564e <__ieee754_pow+0x96>
 8005f7c:	f3af 8000 	nop.w
 8005f80:	652b82fe 	.word	0x652b82fe
 8005f84:	3c971547 	.word	0x3c971547
 8005f88:	00000000 	.word	0x00000000
 8005f8c:	3fe62e43 	.word	0x3fe62e43
 8005f90:	fefa39ef 	.word	0xfefa39ef
 8005f94:	3fe62e42 	.word	0x3fe62e42
 8005f98:	0ca86c39 	.word	0x0ca86c39
 8005f9c:	be205c61 	.word	0xbe205c61
 8005fa0:	72bea4d0 	.word	0x72bea4d0
 8005fa4:	3e663769 	.word	0x3e663769
 8005fa8:	c5d26bf1 	.word	0xc5d26bf1
 8005fac:	3ebbbd41 	.word	0x3ebbbd41
 8005fb0:	af25de2c 	.word	0xaf25de2c
 8005fb4:	3f11566a 	.word	0x3f11566a
 8005fb8:	16bebd93 	.word	0x16bebd93
 8005fbc:	3f66c16c 	.word	0x3f66c16c
 8005fc0:	5555553e 	.word	0x5555553e
 8005fc4:	3fc55555 	.word	0x3fc55555
 8005fc8:	c2f8f359 	.word	0xc2f8f359
 8005fcc:	01a56e1f 	.word	0x01a56e1f
 8005fd0:	3fe00000 	.word	0x3fe00000
 8005fd4:	000fffff 	.word	0x000fffff
 8005fd8:	3ff00000 	.word	0x3ff00000
 8005fdc:	4090cbff 	.word	0x4090cbff
 8005fe0:	3f6f3400 	.word	0x3f6f3400

08005fe4 <__ieee754_sqrt>:
 8005fe4:	f8df c150 	ldr.w	ip, [pc, #336]	; 8006138 <__ieee754_sqrt+0x154>
 8005fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fec:	ea3c 0c01 	bics.w	ip, ip, r1
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	460d      	mov	r5, r1
 8005ff6:	460a      	mov	r2, r1
 8005ff8:	4607      	mov	r7, r0
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	d10e      	bne.n	800601c <__ieee754_sqrt+0x38>
 8005ffe:	4602      	mov	r2, r0
 8006000:	f7fa fa62 	bl	80004c8 <__aeabi_dmul>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4630      	mov	r0, r6
 800600a:	4629      	mov	r1, r5
 800600c:	f7fa f8a6 	bl	800015c <__adddf3>
 8006010:	4606      	mov	r6, r0
 8006012:	460d      	mov	r5, r1
 8006014:	4630      	mov	r0, r6
 8006016:	4629      	mov	r1, r5
 8006018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800601c:	2900      	cmp	r1, #0
 800601e:	dc0d      	bgt.n	800603c <__ieee754_sqrt+0x58>
 8006020:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006024:	ea5c 0707 	orrs.w	r7, ip, r7
 8006028:	d0f4      	beq.n	8006014 <__ieee754_sqrt+0x30>
 800602a:	b139      	cbz	r1, 800603c <__ieee754_sqrt+0x58>
 800602c:	4602      	mov	r2, r0
 800602e:	f7fa f893 	bl	8000158 <__aeabi_dsub>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	f7fa fb71 	bl	800071c <__aeabi_ddiv>
 800603a:	e7e9      	b.n	8006010 <__ieee754_sqrt+0x2c>
 800603c:	1512      	asrs	r2, r2, #20
 800603e:	d074      	beq.n	800612a <__ieee754_sqrt+0x146>
 8006040:	2000      	movs	r0, #0
 8006042:	07d5      	lsls	r5, r2, #31
 8006044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006048:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800604c:	bf5e      	ittt	pl
 800604e:	0fe3      	lsrpl	r3, r4, #31
 8006050:	0064      	lslpl	r4, r4, #1
 8006052:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8006056:	0fe3      	lsrs	r3, r4, #31
 8006058:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800605c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8006060:	2516      	movs	r5, #22
 8006062:	4601      	mov	r1, r0
 8006064:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006068:	1076      	asrs	r6, r6, #1
 800606a:	0064      	lsls	r4, r4, #1
 800606c:	188f      	adds	r7, r1, r2
 800606e:	429f      	cmp	r7, r3
 8006070:	bfde      	ittt	le
 8006072:	1bdb      	suble	r3, r3, r7
 8006074:	18b9      	addle	r1, r7, r2
 8006076:	1880      	addle	r0, r0, r2
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	3d01      	subs	r5, #1
 800607c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006080:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006084:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006088:	d1f0      	bne.n	800606c <__ieee754_sqrt+0x88>
 800608a:	462a      	mov	r2, r5
 800608c:	f04f 0e20 	mov.w	lr, #32
 8006090:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8006094:	428b      	cmp	r3, r1
 8006096:	eb07 0c05 	add.w	ip, r7, r5
 800609a:	dc02      	bgt.n	80060a2 <__ieee754_sqrt+0xbe>
 800609c:	d113      	bne.n	80060c6 <__ieee754_sqrt+0xe2>
 800609e:	45a4      	cmp	ip, r4
 80060a0:	d811      	bhi.n	80060c6 <__ieee754_sqrt+0xe2>
 80060a2:	f1bc 0f00 	cmp.w	ip, #0
 80060a6:	eb0c 0507 	add.w	r5, ip, r7
 80060aa:	da43      	bge.n	8006134 <__ieee754_sqrt+0x150>
 80060ac:	2d00      	cmp	r5, #0
 80060ae:	db41      	blt.n	8006134 <__ieee754_sqrt+0x150>
 80060b0:	f101 0801 	add.w	r8, r1, #1
 80060b4:	1a5b      	subs	r3, r3, r1
 80060b6:	4641      	mov	r1, r8
 80060b8:	45a4      	cmp	ip, r4
 80060ba:	bf88      	it	hi
 80060bc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80060c0:	eba4 040c 	sub.w	r4, r4, ip
 80060c4:	443a      	add	r2, r7
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	f1be 0e01 	subs.w	lr, lr, #1
 80060cc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80060d0:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80060d4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80060d8:	d1dc      	bne.n	8006094 <__ieee754_sqrt+0xb0>
 80060da:	4323      	orrs	r3, r4
 80060dc:	d006      	beq.n	80060ec <__ieee754_sqrt+0x108>
 80060de:	1c54      	adds	r4, r2, #1
 80060e0:	bf0b      	itete	eq
 80060e2:	4672      	moveq	r2, lr
 80060e4:	3201      	addne	r2, #1
 80060e6:	3001      	addeq	r0, #1
 80060e8:	f022 0201 	bicne.w	r2, r2, #1
 80060ec:	1043      	asrs	r3, r0, #1
 80060ee:	07c1      	lsls	r1, r0, #31
 80060f0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80060f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80060f8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80060fc:	bf48      	it	mi
 80060fe:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006102:	4610      	mov	r0, r2
 8006104:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8006108:	e782      	b.n	8006010 <__ieee754_sqrt+0x2c>
 800610a:	0ae3      	lsrs	r3, r4, #11
 800610c:	3915      	subs	r1, #21
 800610e:	0564      	lsls	r4, r4, #21
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0fa      	beq.n	800610a <__ieee754_sqrt+0x126>
 8006114:	02de      	lsls	r6, r3, #11
 8006116:	d50a      	bpl.n	800612e <__ieee754_sqrt+0x14a>
 8006118:	f1c2 0020 	rsb	r0, r2, #32
 800611c:	fa24 f000 	lsr.w	r0, r4, r0
 8006120:	1e55      	subs	r5, r2, #1
 8006122:	4094      	lsls	r4, r2
 8006124:	4303      	orrs	r3, r0
 8006126:	1b4a      	subs	r2, r1, r5
 8006128:	e78a      	b.n	8006040 <__ieee754_sqrt+0x5c>
 800612a:	4611      	mov	r1, r2
 800612c:	e7f0      	b.n	8006110 <__ieee754_sqrt+0x12c>
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	3201      	adds	r2, #1
 8006132:	e7ef      	b.n	8006114 <__ieee754_sqrt+0x130>
 8006134:	4688      	mov	r8, r1
 8006136:	e7bd      	b.n	80060b4 <__ieee754_sqrt+0xd0>
 8006138:	7ff00000 	.word	0x7ff00000

0800613c <fabs>:
 800613c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006140:	4770      	bx	lr

08006142 <finite>:
 8006142:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006146:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800614a:	0fc0      	lsrs	r0, r0, #31
 800614c:	4770      	bx	lr
	...

08006150 <nan>:
 8006150:	2000      	movs	r0, #0
 8006152:	4901      	ldr	r1, [pc, #4]	; (8006158 <nan+0x8>)
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	7ff80000 	.word	0x7ff80000

0800615c <rint>:
 800615c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8006160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006162:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8006166:	2f13      	cmp	r7, #19
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	460c      	mov	r4, r1
 800616e:	4605      	mov	r5, r0
 8006170:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8006174:	dc59      	bgt.n	800622a <rint+0xce>
 8006176:	2f00      	cmp	r7, #0
 8006178:	da2a      	bge.n	80061d0 <rint+0x74>
 800617a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800617e:	4301      	orrs	r1, r0
 8006180:	d022      	beq.n	80061c8 <rint+0x6c>
 8006182:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8006186:	4301      	orrs	r1, r0
 8006188:	424d      	negs	r5, r1
 800618a:	430d      	orrs	r5, r1
 800618c:	4936      	ldr	r1, [pc, #216]	; (8006268 <rint+0x10c>)
 800618e:	0c5c      	lsrs	r4, r3, #17
 8006190:	0b2d      	lsrs	r5, r5, #12
 8006192:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8006196:	0464      	lsls	r4, r4, #17
 8006198:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800619c:	ea45 0304 	orr.w	r3, r5, r4
 80061a0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80061a4:	4620      	mov	r0, r4
 80061a6:	4629      	mov	r1, r5
 80061a8:	f7f9 ffd8 	bl	800015c <__adddf3>
 80061ac:	e9cd 0100 	strd	r0, r1, [sp]
 80061b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061b4:	462b      	mov	r3, r5
 80061b6:	4622      	mov	r2, r4
 80061b8:	f7f9 ffce 	bl	8000158 <__aeabi_dsub>
 80061bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80061c0:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4610      	mov	r0, r2
 80061ca:	4619      	mov	r1, r3
 80061cc:	b003      	add	sp, #12
 80061ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061d0:	4926      	ldr	r1, [pc, #152]	; (800626c <rint+0x110>)
 80061d2:	4139      	asrs	r1, r7
 80061d4:	ea03 0001 	and.w	r0, r3, r1
 80061d8:	4310      	orrs	r0, r2
 80061da:	d0f5      	beq.n	80061c8 <rint+0x6c>
 80061dc:	084b      	lsrs	r3, r1, #1
 80061de:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 80061e2:	ea52 0501 	orrs.w	r5, r2, r1
 80061e6:	d00c      	beq.n	8006202 <rint+0xa6>
 80061e8:	ea24 0303 	bic.w	r3, r4, r3
 80061ec:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80061f0:	2f13      	cmp	r7, #19
 80061f2:	bf0c      	ite	eq
 80061f4:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80061f8:	2500      	movne	r5, #0
 80061fa:	fa44 f707 	asr.w	r7, r4, r7
 80061fe:	ea43 0407 	orr.w	r4, r3, r7
 8006202:	4919      	ldr	r1, [pc, #100]	; (8006268 <rint+0x10c>)
 8006204:	4623      	mov	r3, r4
 8006206:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800620a:	462a      	mov	r2, r5
 800620c:	e9d6 4500 	ldrd	r4, r5, [r6]
 8006210:	4620      	mov	r0, r4
 8006212:	4629      	mov	r1, r5
 8006214:	f7f9 ffa2 	bl	800015c <__adddf3>
 8006218:	e9cd 0100 	strd	r0, r1, [sp]
 800621c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006220:	4622      	mov	r2, r4
 8006222:	462b      	mov	r3, r5
 8006224:	f7f9 ff98 	bl	8000158 <__aeabi_dsub>
 8006228:	e7cc      	b.n	80061c4 <rint+0x68>
 800622a:	2f33      	cmp	r7, #51	; 0x33
 800622c:	dd05      	ble.n	800623a <rint+0xde>
 800622e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8006232:	d1c9      	bne.n	80061c8 <rint+0x6c>
 8006234:	f7f9 ff92 	bl	800015c <__adddf3>
 8006238:	e7c4      	b.n	80061c4 <rint+0x68>
 800623a:	f04f 31ff 	mov.w	r1, #4294967295
 800623e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8006242:	fa21 f10c 	lsr.w	r1, r1, ip
 8006246:	4208      	tst	r0, r1
 8006248:	d0be      	beq.n	80061c8 <rint+0x6c>
 800624a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800624e:	bf18      	it	ne
 8006250:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8006254:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8006258:	bf1e      	ittt	ne
 800625a:	ea20 0303 	bicne.w	r3, r0, r3
 800625e:	fa45 fc0c 	asrne.w	ip, r5, ip
 8006262:	ea43 050c 	orrne.w	r5, r3, ip
 8006266:	e7cc      	b.n	8006202 <rint+0xa6>
 8006268:	080063f8 	.word	0x080063f8
 800626c:	000fffff 	.word	0x000fffff

08006270 <scalbn>:
 8006270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006272:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006276:	4604      	mov	r4, r0
 8006278:	460d      	mov	r5, r1
 800627a:	4617      	mov	r7, r2
 800627c:	460b      	mov	r3, r1
 800627e:	b996      	cbnz	r6, 80062a6 <scalbn+0x36>
 8006280:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006284:	4303      	orrs	r3, r0
 8006286:	d039      	beq.n	80062fc <scalbn+0x8c>
 8006288:	4b35      	ldr	r3, [pc, #212]	; (8006360 <scalbn+0xf0>)
 800628a:	2200      	movs	r2, #0
 800628c:	f7fa f91c 	bl	80004c8 <__aeabi_dmul>
 8006290:	4b34      	ldr	r3, [pc, #208]	; (8006364 <scalbn+0xf4>)
 8006292:	4604      	mov	r4, r0
 8006294:	429f      	cmp	r7, r3
 8006296:	460d      	mov	r5, r1
 8006298:	da0f      	bge.n	80062ba <scalbn+0x4a>
 800629a:	a32d      	add	r3, pc, #180	; (adr r3, 8006350 <scalbn+0xe0>)
 800629c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a0:	f7fa f912 	bl	80004c8 <__aeabi_dmul>
 80062a4:	e006      	b.n	80062b4 <scalbn+0x44>
 80062a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80062aa:	4296      	cmp	r6, r2
 80062ac:	d10a      	bne.n	80062c4 <scalbn+0x54>
 80062ae:	4602      	mov	r2, r0
 80062b0:	f7f9 ff54 	bl	800015c <__adddf3>
 80062b4:	4604      	mov	r4, r0
 80062b6:	460d      	mov	r5, r1
 80062b8:	e020      	b.n	80062fc <scalbn+0x8c>
 80062ba:	460b      	mov	r3, r1
 80062bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80062c0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80062c4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80062c8:	19b9      	adds	r1, r7, r6
 80062ca:	4291      	cmp	r1, r2
 80062cc:	dd0e      	ble.n	80062ec <scalbn+0x7c>
 80062ce:	a322      	add	r3, pc, #136	; (adr r3, 8006358 <scalbn+0xe8>)
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80062d8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80062dc:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80062e0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80062e4:	4820      	ldr	r0, [pc, #128]	; (8006368 <scalbn+0xf8>)
 80062e6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80062ea:	e7d9      	b.n	80062a0 <scalbn+0x30>
 80062ec:	2900      	cmp	r1, #0
 80062ee:	dd08      	ble.n	8006302 <scalbn+0x92>
 80062f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80062f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80062f8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80062fc:	4620      	mov	r0, r4
 80062fe:	4629      	mov	r1, r5
 8006300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006302:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006306:	da16      	bge.n	8006336 <scalbn+0xc6>
 8006308:	f24c 3350 	movw	r3, #50000	; 0xc350
 800630c:	429f      	cmp	r7, r3
 800630e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006312:	dd08      	ble.n	8006326 <scalbn+0xb6>
 8006314:	4c15      	ldr	r4, [pc, #84]	; (800636c <scalbn+0xfc>)
 8006316:	4814      	ldr	r0, [pc, #80]	; (8006368 <scalbn+0xf8>)
 8006318:	f363 74df 	bfi	r4, r3, #31, #1
 800631c:	a30e      	add	r3, pc, #56	; (adr r3, 8006358 <scalbn+0xe8>)
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	4621      	mov	r1, r4
 8006324:	e7bc      	b.n	80062a0 <scalbn+0x30>
 8006326:	4c12      	ldr	r4, [pc, #72]	; (8006370 <scalbn+0x100>)
 8006328:	4812      	ldr	r0, [pc, #72]	; (8006374 <scalbn+0x104>)
 800632a:	f363 74df 	bfi	r4, r3, #31, #1
 800632e:	a308      	add	r3, pc, #32	; (adr r3, 8006350 <scalbn+0xe0>)
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	e7f5      	b.n	8006322 <scalbn+0xb2>
 8006336:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800633a:	3136      	adds	r1, #54	; 0x36
 800633c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006340:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006344:	4620      	mov	r0, r4
 8006346:	4629      	mov	r1, r5
 8006348:	2200      	movs	r2, #0
 800634a:	4b0b      	ldr	r3, [pc, #44]	; (8006378 <scalbn+0x108>)
 800634c:	e7a8      	b.n	80062a0 <scalbn+0x30>
 800634e:	bf00      	nop
 8006350:	c2f8f359 	.word	0xc2f8f359
 8006354:	01a56e1f 	.word	0x01a56e1f
 8006358:	8800759c 	.word	0x8800759c
 800635c:	7e37e43c 	.word	0x7e37e43c
 8006360:	43500000 	.word	0x43500000
 8006364:	ffff3cb0 	.word	0xffff3cb0
 8006368:	8800759c 	.word	0x8800759c
 800636c:	7e37e43c 	.word	0x7e37e43c
 8006370:	01a56e1f 	.word	0x01a56e1f
 8006374:	c2f8f359 	.word	0xc2f8f359
 8006378:	3c900000 	.word	0x3c900000

0800637c <_init>:
 800637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637e:	bf00      	nop
 8006380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006382:	bc08      	pop	{r3}
 8006384:	469e      	mov	lr, r3
 8006386:	4770      	bx	lr

08006388 <_fini>:
 8006388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638a:	bf00      	nop
 800638c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638e:	bc08      	pop	{r3}
 8006390:	469e      	mov	lr, r3
 8006392:	4770      	bx	lr
