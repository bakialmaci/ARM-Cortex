
Avionic_Test_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  0800c2f0  0800c2f0  0001c2f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c988  0800c988  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c988  0800c988  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c988  0800c988  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c988  0800c988  0001c988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c98c  0800c98c  0001c98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001e4  0800cb74  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800cb74  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1f9  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e3  00000000  00000000  0002f406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00031bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f0  00000000  00000000  000326f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f48  00000000  00000000  000330e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e60c  00000000  00000000  0004c028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000867c3  00000000  00000000  0005a634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0df7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004398  00000000  00000000  000e0e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c2d4 	.word	0x0800c2d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800c2d4 	.word	0x0800c2d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_d2lz>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	460c      	mov	r4, r1
 8001074:	4605      	mov	r5, r0
 8001076:	4621      	mov	r1, r4
 8001078:	4628      	mov	r0, r5
 800107a:	2200      	movs	r2, #0
 800107c:	2300      	movs	r3, #0
 800107e:	f7ff fc9d 	bl	80009bc <__aeabi_dcmplt>
 8001082:	b928      	cbnz	r0, 8001090 <__aeabi_d2lz+0x20>
 8001084:	4628      	mov	r0, r5
 8001086:	4621      	mov	r1, r4
 8001088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800108c:	f000 b80a 	b.w	80010a4 <__aeabi_d2ulz>
 8001090:	4628      	mov	r0, r5
 8001092:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001096:	f000 f805 	bl	80010a4 <__aeabi_d2ulz>
 800109a:	4240      	negs	r0, r0
 800109c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a0:	bd38      	pop	{r3, r4, r5, pc}
 80010a2:	bf00      	nop

080010a4 <__aeabi_d2ulz>:
 80010a4:	b5d0      	push	{r4, r6, r7, lr}
 80010a6:	2200      	movs	r2, #0
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <__aeabi_d2ulz+0x34>)
 80010aa:	4606      	mov	r6, r0
 80010ac:	460f      	mov	r7, r1
 80010ae:	f7ff fa13 	bl	80004d8 <__aeabi_dmul>
 80010b2:	f7ff fce9 	bl	8000a88 <__aeabi_d2uiz>
 80010b6:	4604      	mov	r4, r0
 80010b8:	f7ff f994 	bl	80003e4 <__aeabi_ui2d>
 80010bc:	2200      	movs	r2, #0
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <__aeabi_d2ulz+0x38>)
 80010c0:	f7ff fa0a 	bl	80004d8 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4630      	mov	r0, r6
 80010ca:	4639      	mov	r1, r7
 80010cc:	f7ff f84c 	bl	8000168 <__aeabi_dsub>
 80010d0:	f7ff fcda 	bl	8000a88 <__aeabi_d2uiz>
 80010d4:	4621      	mov	r1, r4
 80010d6:	bdd0      	pop	{r4, r6, r7, pc}
 80010d8:	3df00000 	.word	0x3df00000
 80010dc:	41f00000 	.word	0x41f00000

080010e0 <BMP_Process>:
long Temp = 0;
float Temperature = 0;
float Pressure = 0;
float Altitude = 0;

void BMP_Process(void){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	Temperature = BMP180_GetTemp();
 80010e4:	f000 f8e8 	bl	80012b8 <BMP180_GetTemp>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a08      	ldr	r2, [pc, #32]	; (800110c <BMP_Process+0x2c>)
 80010ec:	6013      	str	r3, [r2, #0]
	Pressure = BMP180_GetPress(0);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f000 f9dc 	bl	80014ac <BMP180_GetPress>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4a06      	ldr	r2, [pc, #24]	; (8001110 <BMP_Process+0x30>)
 80010f8:	6013      	str	r3, [r2, #0]
	Altitude = BMP180_GetAlt(0);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 fbac 	bl	8001858 <BMP180_GetAlt>
 8001100:	4603      	mov	r3, r0
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <BMP_Process+0x34>)
 8001104:	6013      	str	r3, [r2, #0]
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000248 	.word	0x20000248
 8001110:	2000024c 	.word	0x2000024c
 8001114:	20000250 	.word	0x20000250

08001118 <InitBMP>:

void InitBMP(void){
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8001130:	23aa      	movs	r3, #170	; 0xaa
 8001132:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8001134:	8afa      	ldrh	r2, [r7, #22]
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	9302      	str	r3, [sp, #8]
 800113c:	2316      	movs	r3, #22
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	463b      	mov	r3, r7
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2301      	movs	r3, #1
 8001146:	21ee      	movs	r1, #238	; 0xee
 8001148:	4836      	ldr	r0, [pc, #216]	; (8001224 <InitBMP+0x10c>)
 800114a:	f002 fafb 	bl	8003744 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 800114e:	783b      	ldrb	r3, [r7, #0]
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	b21a      	sxth	r2, r3
 8001154:	787b      	ldrb	r3, [r7, #1]
 8001156:	b21b      	sxth	r3, r3
 8001158:	4313      	orrs	r3, r2
 800115a:	b21a      	sxth	r2, r3
 800115c:	4b32      	ldr	r3, [pc, #200]	; (8001228 <InitBMP+0x110>)
 800115e:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8001160:	78bb      	ldrb	r3, [r7, #2]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b21a      	sxth	r2, r3
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	b21b      	sxth	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b21a      	sxth	r2, r3
 800116e:	4b2f      	ldr	r3, [pc, #188]	; (800122c <InitBMP+0x114>)
 8001170:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8001172:	793b      	ldrb	r3, [r7, #4]
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	b21a      	sxth	r2, r3
 8001178:	797b      	ldrb	r3, [r7, #5]
 800117a:	b21b      	sxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	b21a      	sxth	r2, r3
 8001180:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <InitBMP+0x118>)
 8001182:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	b21b      	sxth	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	b21b      	sxth	r3, r3
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <InitBMP+0x11c>)
 8001196:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8001198:	7a3b      	ldrb	r3, [r7, #8]
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b21a      	sxth	r2, r3
 800119e:	7a7b      	ldrb	r3, [r7, #9]
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	4313      	orrs	r3, r2
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	4b23      	ldr	r3, [pc, #140]	; (8001238 <InitBMP+0x120>)
 80011aa:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 80011ac:	7abb      	ldrb	r3, [r7, #10]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	7afb      	ldrb	r3, [r7, #11]
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <InitBMP+0x124>)
 80011be:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 80011c0:	7b3b      	ldrb	r3, [r7, #12]
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	7b7b      	ldrb	r3, [r7, #13]
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <InitBMP+0x128>)
 80011d0:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 80011d2:	7bbb      	ldrb	r3, [r7, #14]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	b21b      	sxth	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b21a      	sxth	r2, r3
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <InitBMP+0x12c>)
 80011e2:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 80011e4:	7c3b      	ldrb	r3, [r7, #16]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	7c7b      	ldrb	r3, [r7, #17]
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <InitBMP+0x130>)
 80011f4:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 80011f6:	7cbb      	ldrb	r3, [r7, #18]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	7cfb      	ldrb	r3, [r7, #19]
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21a      	sxth	r2, r3
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <InitBMP+0x134>)
 8001206:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001208:	7d3b      	ldrb	r3, [r7, #20]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b21a      	sxth	r2, r3
 800120e:	7d7b      	ldrb	r3, [r7, #21]
 8001210:	b21b      	sxth	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	b21a      	sxth	r2, r3
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <InitBMP+0x138>)
 8001218:	801a      	strh	r2, [r3, #0]
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200003e0 	.word	0x200003e0
 8001228:	20000200 	.word	0x20000200
 800122c:	20000202 	.word	0x20000202
 8001230:	20000204 	.word	0x20000204
 8001234:	20000206 	.word	0x20000206
 8001238:	20000208 	.word	0x20000208
 800123c:	2000020a 	.word	0x2000020a
 8001240:	2000020c 	.word	0x2000020c
 8001244:	2000020e 	.word	0x2000020e
 8001248:	20000210 	.word	0x20000210
 800124c:	20000212 	.word	0x20000212
 8001250:	20000214 	.word	0x20000214

08001254 <Get_UTemp>:

uint16_t Get_UTemp (void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 800125a:	232e      	movs	r3, #46	; 0x2e
 800125c:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 800125e:	2300      	movs	r3, #0
 8001260:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	9302      	str	r3, [sp, #8]
 8001268:	2301      	movs	r3, #1
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	1dfb      	adds	r3, r7, #7
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2301      	movs	r3, #1
 8001272:	22f4      	movs	r2, #244	; 0xf4
 8001274:	21ee      	movs	r1, #238	; 0xee
 8001276:	480f      	ldr	r0, [pc, #60]	; (80012b4 <Get_UTemp+0x60>)
 8001278:	f002 f96a 	bl	8003550 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 800127c:	2005      	movs	r0, #5
 800127e:	f001 fbd5 	bl	8002a2c <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 8001282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001286:	9302      	str	r3, [sp, #8]
 8001288:	2302      	movs	r3, #2
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2301      	movs	r3, #1
 8001292:	22f6      	movs	r2, #246	; 0xf6
 8001294:	21ee      	movs	r1, #238	; 0xee
 8001296:	4807      	ldr	r0, [pc, #28]	; (80012b4 <Get_UTemp+0x60>)
 8001298:	f002 fa54 	bl	8003744 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 800129c:	793b      	ldrb	r3, [r7, #4]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	797b      	ldrb	r3, [r7, #5]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	4413      	add	r3, r2
 80012aa:	b29b      	uxth	r3, r3
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200003e0 	.word	0x200003e0

080012b8 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 80012b8:	b5b0      	push	{r4, r5, r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 80012bc:	f7ff ffca 	bl	8001254 <Get_UTemp>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b3d      	ldr	r3, [pc, #244]	; (80013bc <BMP180_GetTemp+0x104>)
 80012c6:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80012c8:	4b3c      	ldr	r3, [pc, #240]	; (80013bc <BMP180_GetTemp+0x104>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a3c      	ldr	r2, [pc, #240]	; (80013c0 <BMP180_GetTemp+0x108>)
 80012ce:	8812      	ldrh	r2, [r2, #0]
 80012d0:	1a9b      	subs	r3, r3, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f896 	bl	8000404 <__aeabi_i2d>
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <BMP180_GetTemp+0x10c>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f88f 	bl	8000404 <__aeabi_i2d>
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <BMP180_GetTemp+0x110>)
 80012ec:	f7ff fa1e 	bl	800072c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4620      	mov	r0, r4
 80012f6:	4629      	mov	r1, r5
 80012f8:	f7ff f8ee 	bl	80004d8 <__aeabi_dmul>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f7ff fb98 	bl	8000a38 <__aeabi_d2iz>
 8001308:	4603      	mov	r3, r0
 800130a:	4a30      	ldr	r2, [pc, #192]	; (80013cc <BMP180_GetTemp+0x114>)
 800130c:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 800130e:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <BMP180_GetTemp+0x118>)
 8001310:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f875 	bl	8000404 <__aeabi_i2d>
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <BMP180_GetTemp+0x11c>)
 8001320:	f7ff f8da 	bl	80004d8 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4614      	mov	r4, r2
 800132a:	461d      	mov	r5, r3
 800132c:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <BMP180_GetTemp+0x120>)
 800132e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001332:	461a      	mov	r2, r3
 8001334:	4b25      	ldr	r3, [pc, #148]	; (80013cc <BMP180_GetTemp+0x114>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4413      	add	r3, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f862 	bl	8000404 <__aeabi_i2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4620      	mov	r0, r4
 8001346:	4629      	mov	r1, r5
 8001348:	f7ff f9f0 	bl	800072c <__aeabi_ddiv>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fb70 	bl	8000a38 <__aeabi_d2iz>
 8001358:	4603      	mov	r3, r0
 800135a:	4a20      	ldr	r2, [pc, #128]	; (80013dc <BMP180_GetTemp+0x124>)
 800135c:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <BMP180_GetTemp+0x114>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <BMP180_GetTemp+0x124>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a1d      	ldr	r2, [pc, #116]	; (80013e0 <BMP180_GetTemp+0x128>)
 800136a:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <BMP180_GetTemp+0x128>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3308      	adds	r3, #8
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f846 	bl	8000404 <__aeabi_i2d>
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <BMP180_GetTemp+0x12c>)
 800137e:	f7ff f9d5 	bl	800072c <__aeabi_ddiv>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f7ff fb55 	bl	8000a38 <__aeabi_d2iz>
 800138e:	4603      	mov	r3, r0
 8001390:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <BMP180_GetTemp+0x130>)
 8001392:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <BMP180_GetTemp+0x130>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f833 	bl	8000404 <__aeabi_i2d>
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <BMP180_GetTemp+0x134>)
 80013a4:	f7ff f9c2 	bl	800072c <__aeabi_ddiv>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fb8a 	bl	8000ac8 <__aeabi_d2f>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	bdb0      	pop	{r4, r5, r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000218 	.word	0x20000218
 80013c0:	2000020a 	.word	0x2000020a
 80013c4:	20000208 	.word	0x20000208
 80013c8:	40e00000 	.word	0x40e00000
 80013cc:	20000220 	.word	0x20000220
 80013d0:	20000212 	.word	0x20000212
 80013d4:	40a00000 	.word	0x40a00000
 80013d8:	20000214 	.word	0x20000214
 80013dc:	20000224 	.word	0x20000224
 80013e0:	20000230 	.word	0x20000230
 80013e4:	40300000 	.word	0x40300000
 80013e8:	20000244 	.word	0x20000244
 80013ec:	40240000 	.word	0x40240000

080013f0 <Get_UPress>:

uint32_t Get_UPress (int oss)   // over sampling settings 0,1,2,3
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af04      	add	r7, sp, #16
 80013f6:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	019b      	lsls	r3, r3, #6
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	3334      	adds	r3, #52	; 0x34
 8001402:	b2db      	uxtb	r3, r3
 8001404:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 8001406:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <Get_UPress+0xb4>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	81bb      	strh	r3, [r7, #12]
 800140c:	2300      	movs	r3, #0
 800140e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2301      	movs	r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	f107 030f 	add.w	r3, r7, #15
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2301      	movs	r3, #1
 8001422:	22f4      	movs	r2, #244	; 0xf4
 8001424:	21ee      	movs	r1, #238	; 0xee
 8001426:	4820      	ldr	r0, [pc, #128]	; (80014a8 <Get_UPress+0xb8>)
 8001428:	f002 f892 	bl	8003550 <HAL_I2C_Mem_Write>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d81a      	bhi.n	8001468 <Get_UPress+0x78>
 8001432:	a201      	add	r2, pc, #4	; (adr r2, 8001438 <Get_UPress+0x48>)
 8001434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001438:	08001449 	.word	0x08001449
 800143c:	08001451 	.word	0x08001451
 8001440:	08001459 	.word	0x08001459
 8001444:	08001461 	.word	0x08001461
	switch (oss)
	{
		case (0):
			HAL_Delay (5);
 8001448:	2005      	movs	r0, #5
 800144a:	f001 faef 	bl	8002a2c <HAL_Delay>
			break;
 800144e:	e00b      	b.n	8001468 <Get_UPress+0x78>
		case (1):
			HAL_Delay (8);
 8001450:	2008      	movs	r0, #8
 8001452:	f001 faeb 	bl	8002a2c <HAL_Delay>
			break;
 8001456:	e007      	b.n	8001468 <Get_UPress+0x78>
		case (2):
			HAL_Delay (14);
 8001458:	200e      	movs	r0, #14
 800145a:	f001 fae7 	bl	8002a2c <HAL_Delay>
			break;
 800145e:	e003      	b.n	8001468 <Get_UPress+0x78>
		case (3):
			HAL_Delay (26);
 8001460:	201a      	movs	r0, #26
 8001462:	f001 fae3 	bl	8002a2c <HAL_Delay>
			break;
 8001466:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8001468:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	2303      	movs	r3, #3
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2301      	movs	r3, #1
 800147a:	22f6      	movs	r2, #246	; 0xf6
 800147c:	21ee      	movs	r1, #238	; 0xee
 800147e:	480a      	ldr	r0, [pc, #40]	; (80014a8 <Get_UPress+0xb8>)
 8001480:	f002 f960 	bl	8003744 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	041a      	lsls	r2, r3, #16
 8001488:	7b7b      	ldrb	r3, [r7, #13]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	4413      	add	r3, r2
 800148e:	7bba      	ldrb	r2, [r7, #14]
 8001490:	441a      	add	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f1c3 0308 	rsb	r3, r3, #8
 8001498:	fa42 f303 	asr.w	r3, r2, r3
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	0800c2f0 	.word	0x0800c2f0
 80014a8:	200003e0 	.word	0x200003e0

080014ac <BMP180_GetPress>:

float BMP180_GetPress (int oss)
{
 80014ac:	b5b0      	push	{r4, r5, r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff9b 	bl	80013f0 <Get_UPress>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	4b7f      	ldr	r3, [pc, #508]	; (80016bc <BMP180_GetPress+0x210>)
 80014c0:	601a      	str	r2, [r3, #0]

	B6 = B5 - 4000;
 80014c2:	4b7f      	ldr	r3, [pc, #508]	; (80016c0 <BMP180_GetPress+0x214>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80014ca:	4a7e      	ldr	r2, [pc, #504]	; (80016c4 <BMP180_GetPress+0x218>)
 80014cc:	6013      	str	r3, [r2, #0]

	X1 = (B2*(B6*B6/pow(2,12)))/pow(2,11);
 80014ce:	4b7e      	ldr	r3, [pc, #504]	; (80016c8 <BMP180_GetPress+0x21c>)
 80014d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe ff95 	bl	8000404 <__aeabi_i2d>
 80014da:	4604      	mov	r4, r0
 80014dc:	460d      	mov	r5, r1
 80014de:	4b79      	ldr	r3, [pc, #484]	; (80016c4 <BMP180_GetPress+0x218>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a78      	ldr	r2, [pc, #480]	; (80016c4 <BMP180_GetPress+0x218>)
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7fe ff8a 	bl	8000404 <__aeabi_i2d>
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4b75      	ldr	r3, [pc, #468]	; (80016cc <BMP180_GetPress+0x220>)
 80014f6:	f7ff f919 	bl	800072c <__aeabi_ddiv>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4620      	mov	r0, r4
 8001500:	4629      	mov	r1, r5
 8001502:	f7fe ffe9 	bl	80004d8 <__aeabi_dmul>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	4b6f      	ldr	r3, [pc, #444]	; (80016d0 <BMP180_GetPress+0x224>)
 8001514:	f7ff f90a 	bl	800072c <__aeabi_ddiv>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fa8a 	bl	8000a38 <__aeabi_d2iz>
 8001524:	4603      	mov	r3, r0
 8001526:	4a6b      	ldr	r2, [pc, #428]	; (80016d4 <BMP180_GetPress+0x228>)
 8001528:	6013      	str	r3, [r2, #0]
	X2 = AC2 * B6 / pow(2,11);
 800152a:	4b6b      	ldr	r3, [pc, #428]	; (80016d8 <BMP180_GetPress+0x22c>)
 800152c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001530:	461a      	mov	r2, r3
 8001532:	4b64      	ldr	r3, [pc, #400]	; (80016c4 <BMP180_GetPress+0x218>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	fb03 f302 	mul.w	r3, r3, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f7fe ff62 	bl	8000404 <__aeabi_i2d>
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	4b62      	ldr	r3, [pc, #392]	; (80016d0 <BMP180_GetPress+0x224>)
 8001546:	f7ff f8f1 	bl	800072c <__aeabi_ddiv>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fa71 	bl	8000a38 <__aeabi_d2iz>
 8001556:	4603      	mov	r3, r0
 8001558:	4a60      	ldr	r2, [pc, #384]	; (80016dc <BMP180_GetPress+0x230>)
 800155a:	6013      	str	r3, [r2, #0]
	X3 = X1 + X2;
 800155c:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <BMP180_GetPress+0x228>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b5e      	ldr	r3, [pc, #376]	; (80016dc <BMP180_GetPress+0x230>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4413      	add	r3, r2
 8001566:	4a5e      	ldr	r2, [pc, #376]	; (80016e0 <BMP180_GetPress+0x234>)
 8001568:	6013      	str	r3, [r2, #0]

	B3 = (((AC1*4+X3) << oss) + 2) / 4;
 800156a:	4b5e      	ldr	r3, [pc, #376]	; (80016e4 <BMP180_GetPress+0x238>)
 800156c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001570:	009a      	lsls	r2, r3, #2
 8001572:	4b5b      	ldr	r3, [pc, #364]	; (80016e0 <BMP180_GetPress+0x234>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	441a      	add	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	3302      	adds	r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	da00      	bge.n	8001586 <BMP180_GetPress+0xda>
 8001584:	3303      	adds	r3, #3
 8001586:	109b      	asrs	r3, r3, #2
 8001588:	461a      	mov	r2, r3
 800158a:	4b57      	ldr	r3, [pc, #348]	; (80016e8 <BMP180_GetPress+0x23c>)
 800158c:	601a      	str	r2, [r3, #0]

	X1 = AC3 * B6 / pow(2,13);
 800158e:	4b57      	ldr	r3, [pc, #348]	; (80016ec <BMP180_GetPress+0x240>)
 8001590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001594:	461a      	mov	r2, r3
 8001596:	4b4b      	ldr	r3, [pc, #300]	; (80016c4 <BMP180_GetPress+0x218>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	fb03 f302 	mul.w	r3, r3, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ff30 	bl	8000404 <__aeabi_i2d>
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <BMP180_GetPress+0x244>)
 80015aa:	f7ff f8bf 	bl	800072c <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff fa3f 	bl	8000a38 <__aeabi_d2iz>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4a45      	ldr	r2, [pc, #276]	; (80016d4 <BMP180_GetPress+0x228>)
 80015be:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6 * B6 / pow(2,12))) / pow(2,16);
 80015c0:	4b4c      	ldr	r3, [pc, #304]	; (80016f4 <BMP180_GetPress+0x248>)
 80015c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ff1c 	bl	8000404 <__aeabi_i2d>
 80015cc:	4604      	mov	r4, r0
 80015ce:	460d      	mov	r5, r1
 80015d0:	4b3c      	ldr	r3, [pc, #240]	; (80016c4 <BMP180_GetPress+0x218>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a3b      	ldr	r2, [pc, #236]	; (80016c4 <BMP180_GetPress+0x218>)
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	fb02 f303 	mul.w	r3, r2, r3
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ff11 	bl	8000404 <__aeabi_i2d>
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	4b39      	ldr	r3, [pc, #228]	; (80016cc <BMP180_GetPress+0x220>)
 80015e8:	f7ff f8a0 	bl	800072c <__aeabi_ddiv>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4620      	mov	r0, r4
 80015f2:	4629      	mov	r1, r5
 80015f4:	f7fe ff70 	bl	80004d8 <__aeabi_dmul>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	4b3c      	ldr	r3, [pc, #240]	; (80016f8 <BMP180_GetPress+0x24c>)
 8001606:	f7ff f891 	bl	800072c <__aeabi_ddiv>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff fa11 	bl	8000a38 <__aeabi_d2iz>
 8001616:	4603      	mov	r3, r0
 8001618:	4a30      	ldr	r2, [pc, #192]	; (80016dc <BMP180_GetPress+0x230>)
 800161a:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2) / pow(2,2);
 800161c:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <BMP180_GetPress+0x228>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <BMP180_GetPress+0x230>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4413      	add	r3, r2
 8001626:	3302      	adds	r3, #2
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe feeb 	bl	8000404 <__aeabi_i2d>
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	4b32      	ldr	r3, [pc, #200]	; (80016fc <BMP180_GetPress+0x250>)
 8001634:	f7ff f87a 	bl	800072c <__aeabi_ddiv>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f7ff f9fa 	bl	8000a38 <__aeabi_d2iz>
 8001644:	4603      	mov	r3, r0
 8001646:	4a26      	ldr	r2, [pc, #152]	; (80016e0 <BMP180_GetPress+0x234>)
 8001648:	6013      	str	r3, [r2, #0]

	B4 = AC4 * (unsigned long)(X3 + 32768) / pow(2,15);
 800164a:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <BMP180_GetPress+0x254>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <BMP180_GetPress+0x234>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001658:	fb03 f302 	mul.w	r3, r3, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fec1 	bl	80003e4 <__aeabi_ui2d>
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	4b27      	ldr	r3, [pc, #156]	; (8001704 <BMP180_GetPress+0x258>)
 8001668:	f7ff f860 	bl	800072c <__aeabi_ddiv>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f7ff fa08 	bl	8000a88 <__aeabi_d2uiz>
 8001678:	4603      	mov	r3, r0
 800167a:	4a23      	ldr	r2, [pc, #140]	; (8001708 <BMP180_GetPress+0x25c>)
 800167c:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP - B3)* (50000 >> oss);
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <BMP180_GetPress+0x210>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <BMP180_GetPress+0x23c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	fa41 f202 	asr.w	r2, r1, r2
 8001694:	fb02 f303 	mul.w	r3, r2, r3
 8001698:	4a1c      	ldr	r2, [pc, #112]	; (800170c <BMP180_GetPress+0x260>)
 800169a:	6013      	str	r3, [r2, #0]

	if(B7 < 0x80000000)
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <BMP180_GetPress+0x260>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db37      	blt.n	8001714 <BMP180_GetPress+0x268>
		Press = (B7 * 2) / B4;
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <BMP180_GetPress+0x260>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	005a      	lsls	r2, r3, #1
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <BMP180_GetPress+0x25c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <BMP180_GetPress+0x264>)
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e036      	b.n	8001728 <BMP180_GetPress+0x27c>
 80016ba:	bf00      	nop
 80016bc:	2000021c 	.word	0x2000021c
 80016c0:	20000230 	.word	0x20000230
 80016c4:	20000238 	.word	0x20000238
 80016c8:	2000020e 	.word	0x2000020e
 80016cc:	40b00000 	.word	0x40b00000
 80016d0:	40a00000 	.word	0x40a00000
 80016d4:	20000220 	.word	0x20000220
 80016d8:	20000202 	.word	0x20000202
 80016dc:	20000224 	.word	0x20000224
 80016e0:	20000228 	.word	0x20000228
 80016e4:	20000200 	.word	0x20000200
 80016e8:	2000022c 	.word	0x2000022c
 80016ec:	20000204 	.word	0x20000204
 80016f0:	40c00000 	.word	0x40c00000
 80016f4:	2000020c 	.word	0x2000020c
 80016f8:	40f00000 	.word	0x40f00000
 80016fc:	40100000 	.word	0x40100000
 8001700:	20000206 	.word	0x20000206
 8001704:	40e00000 	.word	0x40e00000
 8001708:	20000234 	.word	0x20000234
 800170c:	2000023c 	.word	0x2000023c
 8001710:	20000240 	.word	0x20000240
	else
		Press = (B7 / B4) * 2;
 8001714:	4b46      	ldr	r3, [pc, #280]	; (8001830 <BMP180_GetPress+0x384>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b46      	ldr	r3, [pc, #280]	; (8001834 <BMP180_GetPress+0x388>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	461a      	mov	r2, r3
 8001724:	4b44      	ldr	r3, [pc, #272]	; (8001838 <BMP180_GetPress+0x38c>)
 8001726:	601a      	str	r2, [r3, #0]

	X1 = (Press / pow(2,8)) * (Press / pow(2,8));
 8001728:	4b43      	ldr	r3, [pc, #268]	; (8001838 <BMP180_GetPress+0x38c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fe69 	bl	8000404 <__aeabi_i2d>
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	4b41      	ldr	r3, [pc, #260]	; (800183c <BMP180_GetPress+0x390>)
 8001738:	f7fe fff8 	bl	800072c <__aeabi_ddiv>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4614      	mov	r4, r2
 8001742:	461d      	mov	r5, r3
 8001744:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <BMP180_GetPress+0x38c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fe5b 	bl	8000404 <__aeabi_i2d>
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	4b3a      	ldr	r3, [pc, #232]	; (800183c <BMP180_GetPress+0x390>)
 8001754:	f7fe ffea 	bl	800072c <__aeabi_ddiv>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4620      	mov	r0, r4
 800175e:	4629      	mov	r1, r5
 8001760:	f7fe feba 	bl	80004d8 <__aeabi_dmul>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff f964 	bl	8000a38 <__aeabi_d2iz>
 8001770:	4603      	mov	r3, r0
 8001772:	4a33      	ldr	r2, [pc, #204]	; (8001840 <BMP180_GetPress+0x394>)
 8001774:	6013      	str	r3, [r2, #0]
	X1 = (X1 * 3038) / pow (2,16);
 8001776:	4b32      	ldr	r3, [pc, #200]	; (8001840 <BMP180_GetPress+0x394>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f640 32de 	movw	r2, #3038	; 0xbde
 800177e:	fb02 f303 	mul.w	r3, r2, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fe3e 	bl	8000404 <__aeabi_i2d>
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <BMP180_GetPress+0x398>)
 800178e:	f7fe ffcd 	bl	800072c <__aeabi_ddiv>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff f94d 	bl	8000a38 <__aeabi_d2iz>
 800179e:	4603      	mov	r3, r0
 80017a0:	4a27      	ldr	r2, [pc, #156]	; (8001840 <BMP180_GetPress+0x394>)
 80017a2:	6013      	str	r3, [r2, #0]
	X2 = (-7357 * Press) / pow(2,16);
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <BMP180_GetPress+0x38c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a27      	ldr	r2, [pc, #156]	; (8001848 <BMP180_GetPress+0x39c>)
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fe28 	bl	8000404 <__aeabi_i2d>
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	4b22      	ldr	r3, [pc, #136]	; (8001844 <BMP180_GetPress+0x398>)
 80017ba:	f7fe ffb7 	bl	800072c <__aeabi_ddiv>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff f937 	bl	8000a38 <__aeabi_d2iz>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a1f      	ldr	r2, [pc, #124]	; (800184c <BMP180_GetPress+0x3a0>)
 80017ce:	6013      	str	r3, [r2, #0]

	Press = Press + (X1 + X2 + 3791) / pow(2,4);
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <BMP180_GetPress+0x38c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fe15 	bl	8000404 <__aeabi_i2d>
 80017da:	4604      	mov	r4, r0
 80017dc:	460d      	mov	r5, r1
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <BMP180_GetPress+0x394>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <BMP180_GetPress+0x3a0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fe09 	bl	8000404 <__aeabi_i2d>
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	4b16      	ldr	r3, [pc, #88]	; (8001850 <BMP180_GetPress+0x3a4>)
 80017f8:	f7fe ff98 	bl	800072c <__aeabi_ddiv>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4620      	mov	r0, r4
 8001802:	4629      	mov	r1, r5
 8001804:	f7fe fcb2 	bl	800016c <__adddf3>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff f912 	bl	8000a38 <__aeabi_d2iz>
 8001814:	4603      	mov	r3, r0
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <BMP180_GetPress+0x38c>)
 8001818:	6013      	str	r3, [r2, #0]

	return Press;
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <BMP180_GetPress+0x38c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fa5c 	bl	8000cdc <__aeabi_i2f>
 8001824:	4603      	mov	r3, r0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bdb0      	pop	{r4, r5, r7, pc}
 800182e:	bf00      	nop
 8001830:	2000023c 	.word	0x2000023c
 8001834:	20000234 	.word	0x20000234
 8001838:	20000240 	.word	0x20000240
 800183c:	40700000 	.word	0x40700000
 8001840:	20000220 	.word	0x20000220
 8001844:	40f00000 	.word	0x40f00000
 8001848:	ffffe343 	.word	0xffffe343
 800184c:	20000224 	.word	0x20000224
 8001850:	40300000 	.word	0x40300000
 8001854:	00000000 	.word	0x00000000

08001858 <BMP180_GetAlt>:

float BMP180_GetAlt (int oss)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff fe23 	bl	80014ac <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <BMP180_GetAlt+0x80>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fa36 	bl	8000cdc <__aeabi_i2f>
 8001870:	4603      	mov	r3, r0
 8001872:	491a      	ldr	r1, [pc, #104]	; (80018dc <BMP180_GetAlt+0x84>)
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fb39 	bl	8000eec <__aeabi_fdiv>
 800187a:	4603      	mov	r3, r0
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fdd3 	bl	8000428 <__aeabi_f2d>
 8001882:	a311      	add	r3, pc, #68	; (adr r3, 80018c8 <BMP180_GetAlt+0x70>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f008 fc42 	bl	800a110 <pow>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	f04f 0000 	mov.w	r0, #0
 8001894:	4912      	ldr	r1, [pc, #72]	; (80018e0 <BMP180_GetAlt+0x88>)
 8001896:	f7fe fc67 	bl	8000168 <__aeabi_dsub>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	a30b      	add	r3, pc, #44	; (adr r3, 80018d0 <BMP180_GetAlt+0x78>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f7fe fe16 	bl	80004d8 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f7ff f908 	bl	8000ac8 <__aeabi_d2f>
 80018b8:	4603      	mov	r3, r0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	f3af 8000 	nop.w
 80018c8:	ccd745e4 	.word	0xccd745e4
 80018cc:	3fc85b95 	.word	0x3fc85b95
 80018d0:	00000000 	.word	0x00000000
 80018d4:	40e5a540 	.word	0x40e5a540
 80018d8:	20000240 	.word	0x20000240
 80018dc:	47c5e680 	.word	0x47c5e680
 80018e0:	3ff00000 	.word	0x3ff00000

080018e4 <GpsToDecimalDegrees>:
void GPS_Init(void);
char *strtok_fr (char *s, char delim, char **save_ptr);
char *strtok_f (char *s, char delim);

/* Main Code */
float GpsToDecimalDegrees(char* nmeaPos, char quadrant){
 80018e4:	b5b0      	push	{r4, r5, r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	70fb      	strb	r3, [r7, #3]
	float v= 0;
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
	if(strlen(nmeaPos)>5){
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7fe fc2a 	bl	8000150 <strlen>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b05      	cmp	r3, #5
 8001900:	d944      	bls.n	800198c <GpsToDecimalDegrees+0xa8>
		char integerPart[3+1];
		int digitCount= (nmeaPos[4]=='.' ? 2 : 3);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3304      	adds	r3, #4
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b2e      	cmp	r3, #46	; 0x2e
 800190a:	d101      	bne.n	8001910 <GpsToDecimalDegrees+0x2c>
 800190c:	2302      	movs	r3, #2
 800190e:	e000      	b.n	8001912 <GpsToDecimalDegrees+0x2e>
 8001910:	2303      	movs	r3, #3
 8001912:	613b      	str	r3, [r7, #16]
		memcpy(integerPart, nmeaPos, digitCount);
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4618      	mov	r0, r3
 800191e:	f005 f893 	bl	8006a48 <memcpy>
		integerPart[digitCount]= 0;
 8001922:	f107 020c 	add.w	r2, r7, #12
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4413      	add	r3, r2
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
		nmeaPos+= digitCount;
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	607b      	str	r3, [r7, #4]
		v= atoi(integerPart) + atof(nmeaPos)/60.;
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	4618      	mov	r0, r3
 800193c:	f005 f855 	bl	80069ea <atoi>
 8001940:	4603      	mov	r3, r0
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fd5e 	bl	8000404 <__aeabi_i2d>
 8001948:	4604      	mov	r4, r0
 800194a:	460d      	mov	r5, r1
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f005 f849 	bl	80069e4 <atof>
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <GpsToDecimalDegrees+0xb4>)
 8001958:	f7fe fee8 	bl	800072c <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4620      	mov	r0, r4
 8001962:	4629      	mov	r1, r5
 8001964:	f7fe fc02 	bl	800016c <__adddf3>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff f8aa 	bl	8000ac8 <__aeabi_d2f>
 8001974:	4603      	mov	r3, r0
 8001976:	617b      	str	r3, [r7, #20]
		if(quadrant=='W' || quadrant=='S')
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	2b57      	cmp	r3, #87	; 0x57
 800197c:	d002      	beq.n	8001984 <GpsToDecimalDegrees+0xa0>
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	2b53      	cmp	r3, #83	; 0x53
 8001982:	d103      	bne.n	800198c <GpsToDecimalDegrees+0xa8>
		  v= -v;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800198a:	617b      	str	r3, [r7, #20]
	}
	return v;
 800198c:	697b      	ldr	r3, [r7, #20]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bdb0      	pop	{r4, r5, r7, pc}
 8001996:	bf00      	nop
 8001998:	404e0000 	.word	0x404e0000

0800199c <GPS_Init>:

void GPS_Init(void){
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	GPS.rxIndex=0;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <GPS_Init+0x1c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);	
 80019a8:	2201      	movs	r2, #1
 80019aa:	4904      	ldr	r1, [pc, #16]	; (80019bc <GPS_Init+0x20>)
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <GPS_Init+0x24>)
 80019ae:	f004 fd0c 	bl	80063ca <HAL_UART_Receive_IT>
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000027c 	.word	0x2000027c
 80019bc:	2000037e 	.word	0x2000037e
 80019c0:	2000048c 	.word	0x2000048c

080019c4 <GPS_CallBack>:

void GPS_CallBack(void){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 80019c8:	f001 f826 	bl	8002a18 <HAL_GetTick>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <GPS_CallBack+0x4c>)
 80019d0:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	if(GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <GPS_CallBack+0x4c>)
 80019d6:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80019da:	2bfd      	cmp	r3, #253	; 0xfd
 80019dc:	d810      	bhi.n	8001a00 <GPS_CallBack+0x3c>
	{
		GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <GPS_CallBack+0x4c>)
 80019e0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <GPS_CallBack+0x4c>)
 80019e8:	f893 1102 	ldrb.w	r1, [r3, #258]	; 0x102
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <GPS_CallBack+0x4c>)
 80019ee:	5499      	strb	r1, [r3, r2]
		GPS.rxIndex++;
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <GPS_CallBack+0x4c>)
 80019f2:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80019f6:	3301      	adds	r3, #1
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <GPS_CallBack+0x4c>)
 80019fc:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	}
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 8001a00:	2201      	movs	r2, #1
 8001a02:	4904      	ldr	r1, [pc, #16]	; (8001a14 <GPS_CallBack+0x50>)
 8001a04:	4804      	ldr	r0, [pc, #16]	; (8001a18 <GPS_CallBack+0x54>)
 8001a06:	f004 fce0 	bl	80063ca <HAL_UART_Receive_IT>
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000027c 	.word	0x2000027c
 8001a14:	2000037e 	.word	0x2000037e
 8001a18:	2000048c 	.word	0x2000048c

08001a1c <strtok_fr>:

char *strtok_fr (char *s, char delim, char **save_ptr){
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	460b      	mov	r3, r1
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	72fb      	strb	r3, [r7, #11]
    char *tail;
    char c;
    if (s == NULL)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <strtok_fr+0x1a>
        s = *save_ptr;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60fb      	str	r3, [r7, #12]
    tail = s;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	617b      	str	r3, [r7, #20]
    if ((c = *tail) == '\0') {
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	74fb      	strb	r3, [r7, #19]
 8001a40:	7cfb      	ldrb	r3, [r7, #19]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d102      	bne.n	8001a4c <strtok_fr+0x30>
        s = NULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	e012      	b.n	8001a72 <strtok_fr+0x56>
    }
    else {
        do {
            if (c == delim) {
 8001a4c:	7cfa      	ldrb	r2, [r7, #19]
 8001a4e:	7afb      	ldrb	r3, [r7, #11]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d105      	bne.n	8001a60 <strtok_fr+0x44>
                *tail++ = '\0';
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	617a      	str	r2, [r7, #20]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
                break;
 8001a5e:	e008      	b.n	8001a72 <strtok_fr+0x56>
           }
        }while ((c = *++tail) != '\0');
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	74fb      	strb	r3, [r7, #19]
 8001a6c:	7cfb      	ldrb	r3, [r7, #19]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1ec      	bne.n	8001a4c <strtok_fr+0x30>
    }
    *save_ptr = tail;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	601a      	str	r2, [r3, #0]
    return s;
 8001a78:	68fb      	ldr	r3, [r7, #12]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	371c      	adds	r7, #28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <strtok_f>:

char *strtok_f (char *s, char delim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	70fb      	strb	r3, [r7, #3]
    static char *save_ptr;
    return strtok_fr (s, delim, &save_ptr);
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <strtok_f+0x24>)
 8001a94:	4619      	mov	r1, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ffc0 	bl	8001a1c <strtok_fr>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000254 	.word	0x20000254
 8001aac:	00000000 	.word	0x00000000

08001ab0 <GPS_Process>:

void GPS_Process(void) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	//$GPGGA,031956,2218.2035,N,11410.7595,E,1,04,3,9,005.9,M,-001.3,M,,*51
	//$GPRMC,081836,A,3751.65,S,14507.36,E,000.0,360.0,130998,011.3,E*62
	if( (HAL_GetTick()-GPS.LastTime>50) && (GPS.rxIndex>0)){
 8001ab4:	f000 ffb0 	bl	8002a18 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	4b73      	ldr	r3, [pc, #460]	; (8001c88 <GPS_Process+0x1d8>)
 8001abc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b32      	cmp	r3, #50	; 0x32
 8001ac4:	f240 80d5 	bls.w	8001c72 <GPS_Process+0x1c2>
 8001ac8:	4b6f      	ldr	r3, [pc, #444]	; (8001c88 <GPS_Process+0x1d8>)
 8001aca:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 80cf 	beq.w	8001c72 <GPS_Process+0x1c2>

		str_gpgga = strstr((char*)GPS.rxBuffer,"$GPGGA,");
 8001ad4:	496d      	ldr	r1, [pc, #436]	; (8001c8c <GPS_Process+0x1dc>)
 8001ad6:	486c      	ldr	r0, [pc, #432]	; (8001c88 <GPS_Process+0x1d8>)
 8001ad8:	f005 fa02 	bl	8006ee0 <strstr>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4a6c      	ldr	r2, [pc, #432]	; (8001c90 <GPS_Process+0x1e0>)
 8001ae0:	6013      	str	r3, [r2, #0]
		str_gprmc = strstr((char*)GPS.rxBuffer,"$GPRMC,");
 8001ae2:	496c      	ldr	r1, [pc, #432]	; (8001c94 <GPS_Process+0x1e4>)
 8001ae4:	4868      	ldr	r0, [pc, #416]	; (8001c88 <GPS_Process+0x1d8>)
 8001ae6:	f005 f9fb 	bl	8006ee0 <strstr>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4a6a      	ldr	r2, [pc, #424]	; (8001c98 <GPS_Process+0x1e8>)
 8001aee:	6013      	str	r3, [r2, #0]

		if(str_gpgga != NULL && str_gprmc != NULL){
 8001af0:	4b67      	ldr	r3, [pc, #412]	; (8001c90 <GPS_Process+0x1e0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 80b2 	beq.w	8001c5e <GPS_Process+0x1ae>
 8001afa:	4b67      	ldr	r3, [pc, #412]	; (8001c98 <GPS_Process+0x1e8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 80ad 	beq.w	8001c5e <GPS_Process+0x1ae>
			/* GPGGA Parse Section */
		    GPS.GPGGA.Message_ID = strtok_f(str_gpgga,',');
 8001b04:	4b62      	ldr	r3, [pc, #392]	; (8001c90 <GPS_Process+0x1e0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	212c      	movs	r1, #44	; 0x2c
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ffba 	bl	8001a84 <strtok_f>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4a5d      	ldr	r2, [pc, #372]	; (8001c88 <GPS_Process+0x1d8>)
 8001b14:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
		    GPS.GPGGA.Time = strtok_f(NULL,',');
 8001b18:	212c      	movs	r1, #44	; 0x2c
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f7ff ffb2 	bl	8001a84 <strtok_f>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4a59      	ldr	r2, [pc, #356]	; (8001c88 <GPS_Process+0x1d8>)
 8001b24:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
		    GPS.GPGGA.Raw_Latitude = strtok_f(NULL,',');
 8001b28:	212c      	movs	r1, #44	; 0x2c
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f7ff ffaa 	bl	8001a84 <strtok_f>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4a55      	ldr	r2, [pc, #340]	; (8001c88 <GPS_Process+0x1d8>)
 8001b34:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		    GPS.GPGGA.N_S = strtok_f(NULL,',');
 8001b38:	212c      	movs	r1, #44	; 0x2c
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff ffa2 	bl	8001a84 <strtok_f>
 8001b40:	4603      	mov	r3, r0
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <GPS_Process+0x1d8>)
 8001b46:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		    GPS.GPGGA.Raw_Longitude = strtok_f(NULL,',');
 8001b4a:	212c      	movs	r1, #44	; 0x2c
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff ff99 	bl	8001a84 <strtok_f>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4a4c      	ldr	r2, [pc, #304]	; (8001c88 <GPS_Process+0x1d8>)
 8001b56:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
		    GPS.GPGGA.E_W = strtok_f(NULL,',');
 8001b5a:	212c      	movs	r1, #44	; 0x2c
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff ff91 	bl	8001a84 <strtok_f>
 8001b62:	4603      	mov	r3, r0
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4b48      	ldr	r3, [pc, #288]	; (8001c88 <GPS_Process+0x1d8>)
 8001b68:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120

		    for(i = 3; i > 0; i--)
 8001b6c:	4b4b      	ldr	r3, [pc, #300]	; (8001c9c <GPS_Process+0x1ec>)
 8001b6e:	2203      	movs	r2, #3
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e00c      	b.n	8001b8e <GPS_Process+0xde>
		    	GPS.GPGGA.tmp_misc = strtok_f(NULL,',');
 8001b74:	212c      	movs	r1, #44	; 0x2c
 8001b76:	2000      	movs	r0, #0
 8001b78:	f7ff ff84 	bl	8001a84 <strtok_f>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4a42      	ldr	r2, [pc, #264]	; (8001c88 <GPS_Process+0x1d8>)
 8001b80:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
		    for(i = 3; i > 0; i--)
 8001b84:	4b45      	ldr	r3, [pc, #276]	; (8001c9c <GPS_Process+0x1ec>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	4a44      	ldr	r2, [pc, #272]	; (8001c9c <GPS_Process+0x1ec>)
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b43      	ldr	r3, [pc, #268]	; (8001c9c <GPS_Process+0x1ec>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	dcee      	bgt.n	8001b74 <GPS_Process+0xc4>

		    GPS.GPGGA.Altitude = atof(strtok_f(NULL,','));
 8001b96:	212c      	movs	r1, #44	; 0x2c
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f7ff ff73 	bl	8001a84 <strtok_f>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f004 ff1f 	bl	80069e4 <atof>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	f7fe ff8b 	bl	8000ac8 <__aeabi_d2f>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4a34      	ldr	r2, [pc, #208]	; (8001c88 <GPS_Process+0x1d8>)
 8001bb6:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
		    GPS.GPGGA.Latitude = GpsToDecimalDegrees(GPS.GPGGA.Raw_Latitude, GPS.GPGGA.N_S);
 8001bba:	4b33      	ldr	r3, [pc, #204]	; (8001c88 <GPS_Process+0x1d8>)
 8001bbc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001bc0:	4a31      	ldr	r2, [pc, #196]	; (8001c88 <GPS_Process+0x1d8>)
 8001bc2:	f892 2118 	ldrb.w	r2, [r2, #280]	; 0x118
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fe8b 	bl	80018e4 <GpsToDecimalDegrees>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a2d      	ldr	r2, [pc, #180]	; (8001c88 <GPS_Process+0x1d8>)
 8001bd2:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
		    GPS.GPGGA.Longitude = GpsToDecimalDegrees(GPS.GPGGA.Raw_Longitude, GPS.GPGGA.E_W);
 8001bd6:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <GPS_Process+0x1d8>)
 8001bd8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001bdc:	4a2a      	ldr	r2, [pc, #168]	; (8001c88 <GPS_Process+0x1d8>)
 8001bde:	f892 2120 	ldrb.w	r2, [r2, #288]	; 0x120
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fe7d 	bl	80018e4 <GpsToDecimalDegrees>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4a26      	ldr	r2, [pc, #152]	; (8001c88 <GPS_Process+0x1d8>)
 8001bee:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

		    /* GPRMC Parse Section */
		    GPS.GPRMC.Message_ID = strtok_f(str_gprmc,',');
 8001bf2:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <GPS_Process+0x1e8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	212c      	movs	r1, #44	; 0x2c
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff43 	bl	8001a84 <strtok_f>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4a21      	ldr	r2, [pc, #132]	; (8001c88 <GPS_Process+0x1d8>)
 8001c02:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
		    for(i = 6; i > 0; i--)
 8001c06:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <GPS_Process+0x1ec>)
 8001c08:	2206      	movs	r2, #6
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	e00c      	b.n	8001c28 <GPS_Process+0x178>
		    	GPS.GPRMC.tmp_misc = strtok_f(NULL,',');
 8001c0e:	212c      	movs	r1, #44	; 0x2c
 8001c10:	2000      	movs	r0, #0
 8001c12:	f7ff ff37 	bl	8001a84 <strtok_f>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4a1b      	ldr	r2, [pc, #108]	; (8001c88 <GPS_Process+0x1d8>)
 8001c1a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
		    for(i = 6; i > 0; i--)
 8001c1e:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <GPS_Process+0x1ec>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	4a1d      	ldr	r2, [pc, #116]	; (8001c9c <GPS_Process+0x1ec>)
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <GPS_Process+0x1ec>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	dcee      	bgt.n	8001c0e <GPS_Process+0x15e>

		    GPS.GPRMC.Speed_ms = atof(strtok_f(NULL,',')) * 0.514; //knots to m/s conversion.
 8001c30:	212c      	movs	r1, #44	; 0x2c
 8001c32:	2000      	movs	r0, #0
 8001c34:	f7ff ff26 	bl	8001a84 <strtok_f>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 fed2 	bl	80069e4 <atof>
 8001c40:	a30f      	add	r3, pc, #60	; (adr r3, 8001c80 <GPS_Process+0x1d0>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	f7fe fc47 	bl	80004d8 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7fe ff39 	bl	8000ac8 <__aeabi_d2f>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <GPS_Process+0x1d8>)
 8001c5a:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
		}		
		memset(GPS.rxBuffer,0,sizeof(GPS.rxBuffer));
 8001c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c62:	2100      	movs	r1, #0
 8001c64:	4808      	ldr	r0, [pc, #32]	; (8001c88 <GPS_Process+0x1d8>)
 8001c66:	f004 fefd 	bl	8006a64 <memset>
		GPS.rxIndex=0;
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <GPS_Process+0x1d8>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	}
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 8001c72:	2201      	movs	r2, #1
 8001c74:	490a      	ldr	r1, [pc, #40]	; (8001ca0 <GPS_Process+0x1f0>)
 8001c76:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <GPS_Process+0x1f4>)
 8001c78:	f004 fba7 	bl	80063ca <HAL_UART_Receive_IT>
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20c49ba6 	.word	0x20c49ba6
 8001c84:	3fe072b0 	.word	0x3fe072b0
 8001c88:	2000027c 	.word	0x2000027c
 8001c8c:	0800c2f4 	.word	0x0800c2f4
 8001c90:	200003c0 	.word	0x200003c0
 8001c94:	0800c2fc 	.word	0x0800c2fc
 8001c98:	20000278 	.word	0x20000278
 8001c9c:	200003bc 	.word	0x200003bc
 8001ca0:	2000037e 	.word	0x2000037e
 8001ca4:	2000048c 	.word	0x2000048c

08001ca8 <MPU_Process>:

float degrees_pitch = 0;
float degrees_roll = 0;
float temp;

void MPU_Process(void){
 8001ca8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cac:	af00      	add	r7, sp, #0
	MPU6050_Read_Accel();
 8001cae:	f000 f9eb 	bl	8002088 <MPU6050_Read_Accel>
	MPU6050_Read_Gyro();
 8001cb2:	f000 fa2b 	bl	800210c <MPU6050_Read_Gyro>

	degrees_pitch += Gy * 0.0000610687;
 8001cb6:	4bc0      	ldr	r3, [pc, #768]	; (8001fb8 <MPU_Process+0x310>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fbb4 	bl	8000428 <__aeabi_f2d>
 8001cc0:	4604      	mov	r4, r0
 8001cc2:	460d      	mov	r5, r1
 8001cc4:	4bbd      	ldr	r3, [pc, #756]	; (8001fbc <MPU_Process+0x314>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fbad 	bl	8000428 <__aeabi_f2d>
 8001cce:	a3ae      	add	r3, pc, #696	; (adr r3, 8001f88 <MPU_Process+0x2e0>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	f7fe fc00 	bl	80004d8 <__aeabi_dmul>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4620      	mov	r0, r4
 8001cde:	4629      	mov	r1, r5
 8001ce0:	f7fe fa44 	bl	800016c <__adddf3>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	f7fe feec 	bl	8000ac8 <__aeabi_d2f>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4ab1      	ldr	r2, [pc, #708]	; (8001fb8 <MPU_Process+0x310>)
 8001cf4:	6013      	str	r3, [r2, #0]
	degrees_roll  += Gx * 0.0000610687;
 8001cf6:	4bb2      	ldr	r3, [pc, #712]	; (8001fc0 <MPU_Process+0x318>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fb94 	bl	8000428 <__aeabi_f2d>
 8001d00:	4604      	mov	r4, r0
 8001d02:	460d      	mov	r5, r1
 8001d04:	4baf      	ldr	r3, [pc, #700]	; (8001fc4 <MPU_Process+0x31c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fb8d 	bl	8000428 <__aeabi_f2d>
 8001d0e:	a39e      	add	r3, pc, #632	; (adr r3, 8001f88 <MPU_Process+0x2e0>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe fbe0 	bl	80004d8 <__aeabi_dmul>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	4629      	mov	r1, r5
 8001d20:	f7fe fa24 	bl	800016c <__adddf3>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f7fe fecc 	bl	8000ac8 <__aeabi_d2f>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4aa3      	ldr	r2, [pc, #652]	; (8001fc0 <MPU_Process+0x318>)
 8001d34:	6013      	str	r3, [r2, #0]

	degrees_pitch += degrees_roll * sin(Gz * 0.000001066);
 8001d36:	4ba0      	ldr	r3, [pc, #640]	; (8001fb8 <MPU_Process+0x310>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fb74 	bl	8000428 <__aeabi_f2d>
 8001d40:	4604      	mov	r4, r0
 8001d42:	460d      	mov	r5, r1
 8001d44:	4b9e      	ldr	r3, [pc, #632]	; (8001fc0 <MPU_Process+0x318>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fb6d 	bl	8000428 <__aeabi_f2d>
 8001d4e:	4680      	mov	r8, r0
 8001d50:	4689      	mov	r9, r1
 8001d52:	4b9d      	ldr	r3, [pc, #628]	; (8001fc8 <MPU_Process+0x320>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fb66 	bl	8000428 <__aeabi_f2d>
 8001d5c:	a38c      	add	r3, pc, #560	; (adr r3, 8001f90 <MPU_Process+0x2e8>)
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	f7fe fbb9 	bl	80004d8 <__aeabi_dmul>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f008 f95b 	bl	800a028 <sin>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4640      	mov	r0, r8
 8001d78:	4649      	mov	r1, r9
 8001d7a:	f7fe fbad 	bl	80004d8 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4620      	mov	r0, r4
 8001d84:	4629      	mov	r1, r5
 8001d86:	f7fe f9f1 	bl	800016c <__adddf3>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	f7fe fe99 	bl	8000ac8 <__aeabi_d2f>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4a87      	ldr	r2, [pc, #540]	; (8001fb8 <MPU_Process+0x310>)
 8001d9a:	6013      	str	r3, [r2, #0]
	degrees_roll  -= degrees_pitch * sin(Gz * 0.000001066);
 8001d9c:	4b88      	ldr	r3, [pc, #544]	; (8001fc0 <MPU_Process+0x318>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fb41 	bl	8000428 <__aeabi_f2d>
 8001da6:	4604      	mov	r4, r0
 8001da8:	460d      	mov	r5, r1
 8001daa:	4b83      	ldr	r3, [pc, #524]	; (8001fb8 <MPU_Process+0x310>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fb3a 	bl	8000428 <__aeabi_f2d>
 8001db4:	4680      	mov	r8, r0
 8001db6:	4689      	mov	r9, r1
 8001db8:	4b83      	ldr	r3, [pc, #524]	; (8001fc8 <MPU_Process+0x320>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fb33 	bl	8000428 <__aeabi_f2d>
 8001dc2:	a373      	add	r3, pc, #460	; (adr r3, 8001f90 <MPU_Process+0x2e8>)
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	f7fe fb86 	bl	80004d8 <__aeabi_dmul>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f008 f928 	bl	800a028 <sin>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4640      	mov	r0, r8
 8001dde:	4649      	mov	r1, r9
 8001de0:	f7fe fb7a 	bl	80004d8 <__aeabi_dmul>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4620      	mov	r0, r4
 8001dea:	4629      	mov	r1, r5
 8001dec:	f7fe f9bc 	bl	8000168 <__aeabi_dsub>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f7fe fe66 	bl	8000ac8 <__aeabi_d2f>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	4a70      	ldr	r2, [pc, #448]	; (8001fc0 <MPU_Process+0x318>)
 8001e00:	6013      	str	r3, [r2, #0]

	acc_vector = sqrt((Ax * Ax) + (Ay * Ay) + (Az * Az));
 8001e02:	4b72      	ldr	r3, [pc, #456]	; (8001fcc <MPU_Process+0x324>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a71      	ldr	r2, [pc, #452]	; (8001fcc <MPU_Process+0x324>)
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe ffb9 	bl	8000d84 <__aeabi_fmul>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461c      	mov	r4, r3
 8001e16:	4b6e      	ldr	r3, [pc, #440]	; (8001fd0 <MPU_Process+0x328>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a6d      	ldr	r2, [pc, #436]	; (8001fd0 <MPU_Process+0x328>)
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe ffaf 	bl	8000d84 <__aeabi_fmul>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7fe fea2 	bl	8000b74 <__addsf3>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461c      	mov	r4, r3
 8001e34:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <MPU_Process+0x32c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a66      	ldr	r2, [pc, #408]	; (8001fd4 <MPU_Process+0x32c>)
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe ffa0 	bl	8000d84 <__aeabi_fmul>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4619      	mov	r1, r3
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f7fe fe93 	bl	8000b74 <__addsf3>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fae9 	bl	8000428 <__aeabi_f2d>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f008 fa03 	bl	800a268 <sqrt>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7fe fe2d 	bl	8000ac8 <__aeabi_d2f>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4a59      	ldr	r2, [pc, #356]	; (8001fd8 <MPU_Process+0x330>)
 8001e72:	6013      	str	r3, [r2, #0]
	degrees_pitch_acc = asin((float) Ay/acc_vector) * 57.2957795;
 8001e74:	4b56      	ldr	r3, [pc, #344]	; (8001fd0 <MPU_Process+0x328>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a57      	ldr	r2, [pc, #348]	; (8001fd8 <MPU_Process+0x330>)
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff f834 	bl	8000eec <__aeabi_fdiv>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe face 	bl	8000428 <__aeabi_f2d>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	f008 f90e 	bl	800a0b4 <asin>
 8001e98:	a33f      	add	r3, pc, #252	; (adr r3, 8001f98 <MPU_Process+0x2f0>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe fb1b 	bl	80004d8 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f7fe fe0d 	bl	8000ac8 <__aeabi_d2f>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4a4a      	ldr	r2, [pc, #296]	; (8001fdc <MPU_Process+0x334>)
 8001eb2:	6013      	str	r3, [r2, #0]
	degrees_roll_acc  = asin((float) Ax/acc_vector) * -57.2957795;
 8001eb4:	4b45      	ldr	r3, [pc, #276]	; (8001fcc <MPU_Process+0x324>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a47      	ldr	r2, [pc, #284]	; (8001fd8 <MPU_Process+0x330>)
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f814 	bl	8000eec <__aeabi_fdiv>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe faae 	bl	8000428 <__aeabi_f2d>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f008 f8ee 	bl	800a0b4 <asin>
 8001ed8:	a331      	add	r3, pc, #196	; (adr r3, 8001fa0 <MPU_Process+0x2f8>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	f7fe fafb 	bl	80004d8 <__aeabi_dmul>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f7fe fded 	bl	8000ac8 <__aeabi_d2f>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4a3b      	ldr	r2, [pc, #236]	; (8001fe0 <MPU_Process+0x338>)
 8001ef2:	6013      	str	r3, [r2, #0]

	degrees_pitch = degrees_pitch * 0.97 + degrees_pitch_acc * 0.03;
 8001ef4:	4b30      	ldr	r3, [pc, #192]	; (8001fb8 <MPU_Process+0x310>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fa95 	bl	8000428 <__aeabi_f2d>
 8001efe:	a32a      	add	r3, pc, #168	; (adr r3, 8001fa8 <MPU_Process+0x300>)
 8001f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f04:	f7fe fae8 	bl	80004d8 <__aeabi_dmul>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4614      	mov	r4, r2
 8001f0e:	461d      	mov	r5, r3
 8001f10:	4b32      	ldr	r3, [pc, #200]	; (8001fdc <MPU_Process+0x334>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fa87 	bl	8000428 <__aeabi_f2d>
 8001f1a:	a325      	add	r3, pc, #148	; (adr r3, 8001fb0 <MPU_Process+0x308>)
 8001f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f20:	f7fe fada 	bl	80004d8 <__aeabi_dmul>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4620      	mov	r0, r4
 8001f2a:	4629      	mov	r1, r5
 8001f2c:	f7fe f91e 	bl	800016c <__adddf3>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	f7fe fdc6 	bl	8000ac8 <__aeabi_d2f>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4a1e      	ldr	r2, [pc, #120]	; (8001fb8 <MPU_Process+0x310>)
 8001f40:	6013      	str	r3, [r2, #0]
	degrees_roll  = degrees_roll * 0.97 + degrees_roll_acc * 0.03;
 8001f42:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <MPU_Process+0x318>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fa6e 	bl	8000428 <__aeabi_f2d>
 8001f4c:	a316      	add	r3, pc, #88	; (adr r3, 8001fa8 <MPU_Process+0x300>)
 8001f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f52:	f7fe fac1 	bl	80004d8 <__aeabi_dmul>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4614      	mov	r4, r2
 8001f5c:	461d      	mov	r5, r3
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <MPU_Process+0x338>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fa60 	bl	8000428 <__aeabi_f2d>
 8001f68:	a311      	add	r3, pc, #68	; (adr r3, 8001fb0 <MPU_Process+0x308>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	f7fe fab3 	bl	80004d8 <__aeabi_dmul>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4620      	mov	r0, r4
 8001f78:	4629      	mov	r1, r5
 8001f7a:	f7fe f8f7 	bl	800016c <__adddf3>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	e02d      	b.n	8001fe4 <MPU_Process+0x33c>
 8001f88:	46f9000a 	.word	0x46f9000a
 8001f8c:	3f100240 	.word	0x3f100240
 8001f90:	652c6e62 	.word	0x652c6e62
 8001f94:	3eb1e26f 	.word	0x3eb1e26f
 8001f98:	1a47a9e3 	.word	0x1a47a9e3
 8001f9c:	404ca5dc 	.word	0x404ca5dc
 8001fa0:	1a47a9e3 	.word	0x1a47a9e3
 8001fa4:	c04ca5dc 	.word	0xc04ca5dc
 8001fa8:	70a3d70a 	.word	0x70a3d70a
 8001fac:	3fef0a3d 	.word	0x3fef0a3d
 8001fb0:	eb851eb8 	.word	0xeb851eb8
 8001fb4:	3f9eb851 	.word	0x3f9eb851
 8001fb8:	20000264 	.word	0x20000264
 8001fbc:	200003d0 	.word	0x200003d0
 8001fc0:	20000268 	.word	0x20000268
 8001fc4:	200003c4 	.word	0x200003c4
 8001fc8:	200003dc 	.word	0x200003dc
 8001fcc:	200003d4 	.word	0x200003d4
 8001fd0:	200003cc 	.word	0x200003cc
 8001fd4:	200003d8 	.word	0x200003d8
 8001fd8:	20000260 	.word	0x20000260
 8001fdc:	20000258 	.word	0x20000258
 8001fe0:	2000025c 	.word	0x2000025c
 8001fe4:	f7fe fd70 	bl	8000ac8 <__aeabi_d2f>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4a02      	ldr	r2, [pc, #8]	; (8001ff4 <MPU_Process+0x34c>)
 8001fec:	6013      	str	r3, [r2, #0]
}
 8001fee:	bf00      	nop
 8001ff0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ff4:	20000268 	.word	0x20000268

08001ff8 <MPU6050_Init>:

void MPU6050_Init (void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af02      	add	r7, sp, #8
	  uint8_t PWR_MGMT_1[2] = {0x6B, 0x00};
 8001ffe:	236b      	movs	r3, #107	; 0x6b
 8002000:	81bb      	strh	r3, [r7, #12]
	  while (HAL_I2C_Master_Transmit(&hi2c2, MPU6050_ADDR, PWR_MGMT_1, 2, 10) != HAL_OK);
 8002002:	bf00      	nop
 8002004:	f107 020c 	add.w	r2, r7, #12
 8002008:	230a      	movs	r3, #10
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	2302      	movs	r3, #2
 800200e:	21d0      	movs	r1, #208	; 0xd0
 8002010:	481c      	ldr	r0, [pc, #112]	; (8002084 <MPU6050_Init+0x8c>)
 8002012:	f001 f99f 	bl	8003354 <HAL_I2C_Master_Transmit>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1f3      	bne.n	8002004 <MPU6050_Init+0xc>

	  uint8_t GYR_CONFIG[2] = {0x1B, 0x08};
 800201c:	f640 031b 	movw	r3, #2075	; 0x81b
 8002020:	813b      	strh	r3, [r7, #8]
	  while(HAL_I2C_Master_Transmit(&hi2c2, MPU6050_ADDR, GYR_CONFIG, 2, 10) != HAL_OK);
 8002022:	bf00      	nop
 8002024:	f107 0208 	add.w	r2, r7, #8
 8002028:	230a      	movs	r3, #10
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2302      	movs	r3, #2
 800202e:	21d0      	movs	r1, #208	; 0xd0
 8002030:	4814      	ldr	r0, [pc, #80]	; (8002084 <MPU6050_Init+0x8c>)
 8002032:	f001 f98f 	bl	8003354 <HAL_I2C_Master_Transmit>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f3      	bne.n	8002024 <MPU6050_Init+0x2c>

	  uint8_t ACC_CONFIG[2] = {0x1C, 0x10};
 800203c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002040:	80bb      	strh	r3, [r7, #4]
	  while(HAL_I2C_Master_Transmit(&hi2c2, MPU6050_ADDR, ACC_CONFIG, 2, 10) != HAL_OK);
 8002042:	bf00      	nop
 8002044:	1d3a      	adds	r2, r7, #4
 8002046:	230a      	movs	r3, #10
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2302      	movs	r3, #2
 800204c:	21d0      	movs	r1, #208	; 0xd0
 800204e:	480d      	ldr	r0, [pc, #52]	; (8002084 <MPU6050_Init+0x8c>)
 8002050:	f001 f980 	bl	8003354 <HAL_I2C_Master_Transmit>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f4      	bne.n	8002044 <MPU6050_Init+0x4c>

	  uint8_t LPF_CONFIG[2] = {0x1A, 0x03};
 800205a:	f240 331a 	movw	r3, #794	; 0x31a
 800205e:	803b      	strh	r3, [r7, #0]
	  while(HAL_I2C_Master_Transmit(&hi2c2, MPU6050_ADDR, LPF_CONFIG, 2, 10) != HAL_OK);
 8002060:	bf00      	nop
 8002062:	463a      	mov	r2, r7
 8002064:	230a      	movs	r3, #10
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	2302      	movs	r3, #2
 800206a:	21d0      	movs	r1, #208	; 0xd0
 800206c:	4805      	ldr	r0, [pc, #20]	; (8002084 <MPU6050_Init+0x8c>)
 800206e:	f001 f971 	bl	8003354 <HAL_I2C_Master_Transmit>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f4      	bne.n	8002062 <MPU6050_Init+0x6a>

}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000434 	.word	0x20000434

08002088 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel ()
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 100);
 800208e:	2364      	movs	r3, #100	; 0x64
 8002090:	9302      	str	r3, [sp, #8]
 8002092:	2306      	movs	r3, #6
 8002094:	9301      	str	r3, [sp, #4]
 8002096:	463b      	mov	r3, r7
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	2301      	movs	r3, #1
 800209c:	223b      	movs	r2, #59	; 0x3b
 800209e:	21d0      	movs	r1, #208	; 0xd0
 80020a0:	4816      	ldr	r0, [pc, #88]	; (80020fc <MPU6050_Read_Accel+0x74>)
 80020a2:	f001 fb4f 	bl	8003744 <HAL_I2C_Mem_Read>

	Ax = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80020a6:	783b      	ldrb	r3, [r7, #0]
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	b21a      	sxth	r2, r3
 80020ac:	787b      	ldrb	r3, [r7, #1]
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	4313      	orrs	r3, r2
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fe11 	bl	8000cdc <__aeabi_i2f>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4a10      	ldr	r2, [pc, #64]	; (8002100 <MPU6050_Read_Accel+0x78>)
 80020be:	6013      	str	r3, [r2, #0]
	Ay = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80020c0:	78bb      	ldrb	r3, [r7, #2]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	b21a      	sxth	r2, r3
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	4313      	orrs	r3, r2
 80020cc:	b21b      	sxth	r3, r3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fe04 	bl	8000cdc <__aeabi_i2f>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <MPU6050_Read_Accel+0x7c>)
 80020d8:	6013      	str	r3, [r2, #0]
	Az = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80020da:	793b      	ldrb	r3, [r7, #4]
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	b21a      	sxth	r2, r3
 80020e0:	797b      	ldrb	r3, [r7, #5]
 80020e2:	b21b      	sxth	r3, r3
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fdf7 	bl	8000cdc <__aeabi_i2f>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4a05      	ldr	r2, [pc, #20]	; (8002108 <MPU6050_Read_Accel+0x80>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000434 	.word	0x20000434
 8002100:	200003d4 	.word	0x200003d4
 8002104:	200003cc 	.word	0x200003cc
 8002108:	200003d8 	.word	0x200003d8

0800210c <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro (void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002116:	9302      	str	r3, [sp, #8]
 8002118:	2306      	movs	r3, #6
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	463b      	mov	r3, r7
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	2301      	movs	r3, #1
 8002122:	2243      	movs	r2, #67	; 0x43
 8002124:	21d0      	movs	r1, #208	; 0xd0
 8002126:	4817      	ldr	r0, [pc, #92]	; (8002184 <MPU6050_Read_Gyro+0x78>)
 8002128:	f001 fb0c 	bl	8003744 <HAL_I2C_Mem_Read>

	Gx = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800212c:	783b      	ldrb	r3, [r7, #0]
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	b21a      	sxth	r2, r3
 8002132:	787b      	ldrb	r3, [r7, #1]
 8002134:	b21b      	sxth	r3, r3
 8002136:	4313      	orrs	r3, r2
 8002138:	b21b      	sxth	r3, r3
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fdce 	bl	8000cdc <__aeabi_i2f>
 8002140:	4603      	mov	r3, r0
 8002142:	4a11      	ldr	r2, [pc, #68]	; (8002188 <MPU6050_Read_Gyro+0x7c>)
 8002144:	6013      	str	r3, [r2, #0]
	Gy = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8002146:	78bb      	ldrb	r3, [r7, #2]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	b21a      	sxth	r2, r3
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	b21b      	sxth	r3, r3
 8002150:	4313      	orrs	r3, r2
 8002152:	b21b      	sxth	r3, r3
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fdc1 	bl	8000cdc <__aeabi_i2f>
 800215a:	4603      	mov	r3, r0
 800215c:	4a0b      	ldr	r2, [pc, #44]	; (800218c <MPU6050_Read_Gyro+0x80>)
 800215e:	6013      	str	r3, [r2, #0]
	Gz = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8002160:	793b      	ldrb	r3, [r7, #4]
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	b21a      	sxth	r2, r3
 8002166:	797b      	ldrb	r3, [r7, #5]
 8002168:	b21b      	sxth	r3, r3
 800216a:	4313      	orrs	r3, r2
 800216c:	b21b      	sxth	r3, r3
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe fdb4 	bl	8000cdc <__aeabi_i2f>
 8002174:	4603      	mov	r3, r0
 8002176:	4a06      	ldr	r2, [pc, #24]	; (8002190 <MPU6050_Read_Gyro+0x84>)
 8002178:	6013      	str	r3, [r2, #0]

}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000434 	.word	0x20000434
 8002188:	200003c4 	.word	0x200003c4
 800218c:	200003d0 	.word	0x200003d0
 8002190:	200003dc 	.word	0x200003dc

08002194 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219a:	f107 0310 	add.w	r3, r7, #16
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a8:	4b24      	ldr	r3, [pc, #144]	; (800223c <MX_GPIO_Init+0xa8>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	4a23      	ldr	r2, [pc, #140]	; (800223c <MX_GPIO_Init+0xa8>)
 80021ae:	f043 0310 	orr.w	r3, r3, #16
 80021b2:	6193      	str	r3, [r2, #24]
 80021b4:	4b21      	ldr	r3, [pc, #132]	; (800223c <MX_GPIO_Init+0xa8>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021c0:	4b1e      	ldr	r3, [pc, #120]	; (800223c <MX_GPIO_Init+0xa8>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	4a1d      	ldr	r2, [pc, #116]	; (800223c <MX_GPIO_Init+0xa8>)
 80021c6:	f043 0320 	orr.w	r3, r3, #32
 80021ca:	6193      	str	r3, [r2, #24]
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <MX_GPIO_Init+0xa8>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f003 0320 	and.w	r3, r3, #32
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d8:	4b18      	ldr	r3, [pc, #96]	; (800223c <MX_GPIO_Init+0xa8>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4a17      	ldr	r2, [pc, #92]	; (800223c <MX_GPIO_Init+0xa8>)
 80021de:	f043 0308 	orr.w	r3, r3, #8
 80021e2:	6193      	str	r3, [r2, #24]
 80021e4:	4b15      	ldr	r3, [pc, #84]	; (800223c <MX_GPIO_Init+0xa8>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <MX_GPIO_Init+0xa8>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	4a11      	ldr	r2, [pc, #68]	; (800223c <MX_GPIO_Init+0xa8>)
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	6193      	str	r3, [r2, #24]
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <MX_GPIO_Init+0xa8>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002208:	2200      	movs	r2, #0
 800220a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800220e:	480c      	ldr	r0, [pc, #48]	; (8002240 <MX_GPIO_Init+0xac>)
 8002210:	f000 ff44 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221a:	2301      	movs	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2302      	movs	r3, #2
 8002224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002226:	f107 0310 	add.w	r3, r7, #16
 800222a:	4619      	mov	r1, r3
 800222c:	4804      	ldr	r0, [pc, #16]	; (8002240 <MX_GPIO_Init+0xac>)
 800222e:	f000 fdb1 	bl	8002d94 <HAL_GPIO_Init>

}
 8002232:	bf00      	nop
 8002234:	3720      	adds	r7, #32
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	40011000 	.word	0x40011000

08002244 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <MX_I2C1_Init+0x50>)
 800224a:	4a13      	ldr	r2, [pc, #76]	; (8002298 <MX_I2C1_Init+0x54>)
 800224c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800224e:	4b11      	ldr	r3, [pc, #68]	; (8002294 <MX_I2C1_Init+0x50>)
 8002250:	4a12      	ldr	r2, [pc, #72]	; (800229c <MX_I2C1_Init+0x58>)
 8002252:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <MX_I2C1_Init+0x50>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <MX_I2C1_Init+0x50>)
 800225c:	2200      	movs	r2, #0
 800225e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <MX_I2C1_Init+0x50>)
 8002262:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002266:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <MX_I2C1_Init+0x50>)
 800226a:	2200      	movs	r2, #0
 800226c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <MX_I2C1_Init+0x50>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <MX_I2C1_Init+0x50>)
 8002276:	2200      	movs	r2, #0
 8002278:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <MX_I2C1_Init+0x50>)
 800227c:	2200      	movs	r2, #0
 800227e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002280:	4804      	ldr	r0, [pc, #16]	; (8002294 <MX_I2C1_Init+0x50>)
 8002282:	f000 ff23 	bl	80030cc <HAL_I2C_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800228c:	f000 f984 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200003e0 	.word	0x200003e0
 8002298:	40005400 	.word	0x40005400
 800229c:	000186a0 	.word	0x000186a0

080022a0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <MX_I2C2_Init+0x50>)
 80022a6:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <MX_I2C2_Init+0x54>)
 80022a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <MX_I2C2_Init+0x50>)
 80022ac:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <MX_I2C2_Init+0x58>)
 80022ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <MX_I2C2_Init+0x50>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <MX_I2C2_Init+0x50>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <MX_I2C2_Init+0x50>)
 80022be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022c4:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <MX_I2C2_Init+0x50>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <MX_I2C2_Init+0x50>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <MX_I2C2_Init+0x50>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <MX_I2C2_Init+0x50>)
 80022d8:	2200      	movs	r2, #0
 80022da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80022dc:	4804      	ldr	r0, [pc, #16]	; (80022f0 <MX_I2C2_Init+0x50>)
 80022de:	f000 fef5 	bl	80030cc <HAL_I2C_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80022e8:	f000 f956 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000434 	.word	0x20000434
 80022f4:	40005800 	.word	0x40005800
 80022f8:	000186a0 	.word	0x000186a0

080022fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	; 0x28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 0318 	add.w	r3, r7, #24
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a33      	ldr	r2, [pc, #204]	; (80023e4 <HAL_I2C_MspInit+0xe8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d12c      	bne.n	8002376 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231c:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <HAL_I2C_MspInit+0xec>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4a31      	ldr	r2, [pc, #196]	; (80023e8 <HAL_I2C_MspInit+0xec>)
 8002322:	f043 0308 	orr.w	r3, r3, #8
 8002326:	6193      	str	r3, [r2, #24]
 8002328:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <HAL_I2C_MspInit+0xec>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002334:	23c0      	movs	r3, #192	; 0xc0
 8002336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002338:	2312      	movs	r3, #18
 800233a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800233c:	2303      	movs	r3, #3
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002340:	f107 0318 	add.w	r3, r7, #24
 8002344:	4619      	mov	r1, r3
 8002346:	4829      	ldr	r0, [pc, #164]	; (80023ec <HAL_I2C_MspInit+0xf0>)
 8002348:	f000 fd24 	bl	8002d94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800234c:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_I2C_MspInit+0xec>)
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	4a25      	ldr	r2, [pc, #148]	; (80023e8 <HAL_I2C_MspInit+0xec>)
 8002352:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002356:	61d3      	str	r3, [r2, #28]
 8002358:	4b23      	ldr	r3, [pc, #140]	; (80023e8 <HAL_I2C_MspInit+0xec>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	693b      	ldr	r3, [r7, #16]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002364:	2200      	movs	r2, #0
 8002366:	2100      	movs	r1, #0
 8002368:	201f      	movs	r0, #31
 800236a:	f000 fc5a 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800236e:	201f      	movs	r0, #31
 8002370:	f000 fc73 	bl	8002c5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002374:	e031      	b.n	80023da <HAL_I2C_MspInit+0xde>
  else if(i2cHandle->Instance==I2C2)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <HAL_I2C_MspInit+0xf4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d12c      	bne.n	80023da <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_I2C_MspInit+0xec>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	4a18      	ldr	r2, [pc, #96]	; (80023e8 <HAL_I2C_MspInit+0xec>)
 8002386:	f043 0308 	orr.w	r3, r3, #8
 800238a:	6193      	str	r3, [r2, #24]
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <HAL_I2C_MspInit+0xec>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002398:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800239c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800239e:	2312      	movs	r3, #18
 80023a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023a2:	2303      	movs	r3, #3
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a6:	f107 0318 	add.w	r3, r7, #24
 80023aa:	4619      	mov	r1, r3
 80023ac:	480f      	ldr	r0, [pc, #60]	; (80023ec <HAL_I2C_MspInit+0xf0>)
 80023ae:	f000 fcf1 	bl	8002d94 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_I2C_MspInit+0xec>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <HAL_I2C_MspInit+0xec>)
 80023b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023bc:	61d3      	str	r3, [r2, #28]
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <HAL_I2C_MspInit+0xec>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2100      	movs	r1, #0
 80023ce:	2021      	movs	r0, #33	; 0x21
 80023d0:	f000 fc27 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80023d4:	2021      	movs	r0, #33	; 0x21
 80023d6:	f000 fc40 	bl	8002c5a <HAL_NVIC_EnableIRQ>
}
 80023da:	bf00      	nop
 80023dc:	3728      	adds	r7, #40	; 0x28
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40005400 	.word	0x40005400
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40010c00 	.word	0x40010c00
 80023f0:	40005800 	.word	0x40005800

080023f4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPS_CallBack();
 80023fc:	f7ff fae2 	bl	80019c4 <GPS_CallBack>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800240c:	f000 faac 	bl	8002968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002410:	f000 f817 	bl	8002442 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002414:	f7ff febe 	bl	8002194 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002418:	f7ff ff14 	bl	8002244 <MX_I2C1_Init>
  MX_I2C2_Init();
 800241c:	f7ff ff40 	bl	80022a0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8002420:	f000 f9fe 	bl	8002820 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 8002424:	f7ff faba 	bl	800199c <GPS_Init>
  InitBMP();
 8002428:	f7fe fe76 	bl	8001118 <InitBMP>
  MPU6050_Init();
 800242c:	f7ff fde4 	bl	8001ff8 <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	GPS_Process();
 8002430:	f7ff fb3e 	bl	8001ab0 <GPS_Process>
	BMP_Process();
 8002434:	f7fe fe54 	bl	80010e0 <BMP_Process>
	MPU_Process();
 8002438:	f7ff fc36 	bl	8001ca8 <MPU_Process>

	Check_Recovery();
 800243c:	f000 f848 	bl	80024d0 <Check_Recovery>
	GPS_Process();
 8002440:	e7f6      	b.n	8002430 <main+0x28>

08002442 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b090      	sub	sp, #64	; 0x40
 8002446:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002448:	f107 0318 	add.w	r3, r7, #24
 800244c:	2228      	movs	r2, #40	; 0x28
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f004 fb07 	bl	8006a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002464:	2301      	movs	r3, #1
 8002466:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002468:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800246c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002472:	2301      	movs	r3, #1
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002476:	2302      	movs	r3, #2
 8002478:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800247a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800247e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002480:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002484:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002486:	f107 0318 	add.w	r3, r7, #24
 800248a:	4618      	mov	r0, r3
 800248c:	f003 fb36 	bl	8005afc <HAL_RCC_OscConfig>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002496:	f000 f87f 	bl	8002598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800249a:	230f      	movs	r3, #15
 800249c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800249e:	2302      	movs	r3, #2
 80024a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2102      	movs	r1, #2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f003 fda1 	bl	8005ffc <HAL_RCC_ClockConfig>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80024c0:	f000 f86a 	bl	8002598 <Error_Handler>
  }
}
 80024c4:	bf00      	nop
 80024c6:	3740      	adds	r7, #64	; 0x40
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	0000      	movs	r0, r0
	...

080024d0 <Check_Recovery>:

/* USER CODE BEGIN 4 */
void Check_Recovery(void){
 80024d0:	b5b0      	push	{r4, r5, r7, lr}
 80024d2:	af00      	add	r7, sp, #0
	overall_altitude = GPS.GPGGA.Altitude*0.6 + Altitude*0.4;
 80024d4:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <Check_Recovery+0xb0>)
 80024d6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fd ffa4 	bl	8000428 <__aeabi_f2d>
 80024e0:	a323      	add	r3, pc, #140	; (adr r3, 8002570 <Check_Recovery+0xa0>)
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	f7fd fff7 	bl	80004d8 <__aeabi_dmul>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4614      	mov	r4, r2
 80024f0:	461d      	mov	r5, r3
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <Check_Recovery+0xb4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fd ff96 	bl	8000428 <__aeabi_f2d>
 80024fc:	a31e      	add	r3, pc, #120	; (adr r3, 8002578 <Check_Recovery+0xa8>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f7fd ffe9 	bl	80004d8 <__aeabi_dmul>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4620      	mov	r0, r4
 800250c:	4629      	mov	r1, r5
 800250e:	f7fd fe2d 	bl	800016c <__adddf3>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	f7fe fad5 	bl	8000ac8 <__aeabi_d2f>
 800251e:	4603      	mov	r3, r0
 8002520:	4a19      	ldr	r2, [pc, #100]	; (8002588 <Check_Recovery+0xb8>)
 8002522:	6013      	str	r3, [r2, #0]

	if(abs(degrees_pitch) > 20.0 || abs(degrees_roll) > 20.0){
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <Check_Recovery+0xbc>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe fd7b 	bl	8001024 <__aeabi_f2iz>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	bfb8      	it	lt
 8002534:	425b      	neglt	r3, r3
 8002536:	2b14      	cmp	r3, #20
 8002538:	dc0a      	bgt.n	8002550 <Check_Recovery+0x80>
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <Check_Recovery+0xc0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe fd70 	bl	8001024 <__aeabi_f2iz>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	bfb8      	it	lt
 800254a:	425b      	neglt	r3, r3
 800254c:	2b14      	cmp	r3, #20
 800254e:	dd06      	ble.n	800255e <Check_Recovery+0x8e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002550:	2201      	movs	r2, #1
 8002552:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002556:	480f      	ldr	r0, [pc, #60]	; (8002594 <Check_Recovery+0xc4>)
 8002558:	f000 fda0 	bl	800309c <HAL_GPIO_WritePin>
 800255c:	e006      	b.n	800256c <Check_Recovery+0x9c>
	}else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800255e:	2200      	movs	r2, #0
 8002560:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002564:	480b      	ldr	r0, [pc, #44]	; (8002594 <Check_Recovery+0xc4>)
 8002566:	f000 fd99 	bl	800309c <HAL_GPIO_WritePin>
	}
}
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	bdb0      	pop	{r4, r5, r7, pc}
 8002570:	33333333 	.word	0x33333333
 8002574:	3fe33333 	.word	0x3fe33333
 8002578:	9999999a 	.word	0x9999999a
 800257c:	3fd99999 	.word	0x3fd99999
 8002580:	2000027c 	.word	0x2000027c
 8002584:	20000250 	.word	0x20000250
 8002588:	20000488 	.word	0x20000488
 800258c:	20000264 	.word	0x20000264
 8002590:	20000268 	.word	0x20000268
 8002594:	40011000 	.word	0x40011000

08002598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800259c:	b672      	cpsid	i
}
 800259e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <Error_Handler+0x8>
	...

080025a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <HAL_MspInit+0x5c>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	4a14      	ldr	r2, [pc, #80]	; (8002600 <HAL_MspInit+0x5c>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6193      	str	r3, [r2, #24]
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <HAL_MspInit+0x5c>)
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <HAL_MspInit+0x5c>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <HAL_MspInit+0x5c>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025cc:	61d3      	str	r3, [r2, #28]
 80025ce:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <HAL_MspInit+0x5c>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_MspInit+0x60>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	4a04      	ldr	r2, [pc, #16]	; (8002604 <HAL_MspInit+0x60>)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	40021000 	.word	0x40021000
 8002604:	40010000 	.word	0x40010000

08002608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800260c:	e7fe      	b.n	800260c <NMI_Handler+0x4>

0800260e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002612:	e7fe      	b.n	8002612 <HardFault_Handler+0x4>

08002614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002618:	e7fe      	b.n	8002618 <MemManage_Handler+0x4>

0800261a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800261e:	e7fe      	b.n	800261e <BusFault_Handler+0x4>

08002620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002624:	e7fe      	b.n	8002624 <UsageFault_Handler+0x4>

08002626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800264e:	f000 f9d1 	bl	80029f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800265c:	4802      	ldr	r0, [pc, #8]	; (8002668 <I2C1_EV_IRQHandler+0x10>)
 800265e:	f001 fad9 	bl	8003c14 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	200003e0 	.word	0x200003e0

0800266c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <I2C2_EV_IRQHandler+0x10>)
 8002672:	f001 facf 	bl	8003c14 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000434 	.word	0x20000434

08002680 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002684:	4802      	ldr	r0, [pc, #8]	; (8002690 <USART1_IRQHandler+0x10>)
 8002686:	f003 fef5 	bl	8006474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	2000048c 	.word	0x2000048c

08002694 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
	return 1;
 8002698:	2301      	movs	r3, #1
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <_kill>:

int _kill(int pid, int sig)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026ac:	f004 f9a2 	bl	80069f4 <__errno>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2216      	movs	r2, #22
 80026b4:	601a      	str	r2, [r3, #0]
	return -1;
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <_exit>:

void _exit (int status)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026ca:	f04f 31ff 	mov.w	r1, #4294967295
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ffe7 	bl	80026a2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026d4:	e7fe      	b.n	80026d4 <_exit+0x12>

080026d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	e00a      	b.n	80026fe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026e8:	f3af 8000 	nop.w
 80026ec:	4601      	mov	r1, r0
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	60ba      	str	r2, [r7, #8]
 80026f4:	b2ca      	uxtb	r2, r1
 80026f6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	3301      	adds	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	dbf0      	blt.n	80026e8 <_read+0x12>
	}

return len;
 8002706:	687b      	ldr	r3, [r7, #4]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	e009      	b.n	8002736 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	60ba      	str	r2, [r7, #8]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3301      	adds	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	429a      	cmp	r2, r3
 800273c:	dbf1      	blt.n	8002722 <_write+0x12>
	}
	return len;
 800273e:	687b      	ldr	r3, [r7, #4]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <_close>:

int _close(int file)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	return -1;
 8002750:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800276e:	605a      	str	r2, [r3, #4]
	return 0;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <_isatty>:

int _isatty(int file)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
	return 1;
 8002784:	2301      	movs	r3, #1
}
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
	return 0;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b0:	4a14      	ldr	r2, [pc, #80]	; (8002804 <_sbrk+0x5c>)
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <_sbrk+0x60>)
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <_sbrk+0x64>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <_sbrk+0x64>)
 80027c6:	4a12      	ldr	r2, [pc, #72]	; (8002810 <_sbrk+0x68>)
 80027c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <_sbrk+0x64>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d207      	bcs.n	80027e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027d8:	f004 f90c 	bl	80069f4 <__errno>
 80027dc:	4603      	mov	r3, r0
 80027de:	220c      	movs	r2, #12
 80027e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
 80027e6:	e009      	b.n	80027fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <_sbrk+0x64>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <_sbrk+0x64>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	4a05      	ldr	r2, [pc, #20]	; (800280c <_sbrk+0x64>)
 80027f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027fa:	68fb      	ldr	r3, [r7, #12]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20005000 	.word	0x20005000
 8002808:	00000400 	.word	0x00000400
 800280c:	2000026c 	.word	0x2000026c
 8002810:	200004e0 	.word	0x200004e0

08002814 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <MX_USART1_UART_Init+0x4c>)
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <MX_USART1_UART_Init+0x50>)
 8002828:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <MX_USART1_UART_Init+0x4c>)
 800282c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002830:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002832:	4b0e      	ldr	r3, [pc, #56]	; (800286c <MX_USART1_UART_Init+0x4c>)
 8002834:	2200      	movs	r2, #0
 8002836:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <MX_USART1_UART_Init+0x4c>)
 800283a:	2200      	movs	r2, #0
 800283c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800283e:	4b0b      	ldr	r3, [pc, #44]	; (800286c <MX_USART1_UART_Init+0x4c>)
 8002840:	2200      	movs	r2, #0
 8002842:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <MX_USART1_UART_Init+0x4c>)
 8002846:	220c      	movs	r2, #12
 8002848:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <MX_USART1_UART_Init+0x4c>)
 800284c:	2200      	movs	r2, #0
 800284e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <MX_USART1_UART_Init+0x4c>)
 8002852:	2200      	movs	r2, #0
 8002854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002856:	4805      	ldr	r0, [pc, #20]	; (800286c <MX_USART1_UART_Init+0x4c>)
 8002858:	f003 fd6a 	bl	8006330 <HAL_UART_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002862:	f7ff fe99 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	2000048c 	.word	0x2000048c
 8002870:	40013800 	.word	0x40013800

08002874 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 0310 	add.w	r3, r7, #16
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a20      	ldr	r2, [pc, #128]	; (8002910 <HAL_UART_MspInit+0x9c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d139      	bne.n	8002908 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002894:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <HAL_UART_MspInit+0xa0>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	4a1e      	ldr	r2, [pc, #120]	; (8002914 <HAL_UART_MspInit+0xa0>)
 800289a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800289e:	6193      	str	r3, [r2, #24]
 80028a0:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <HAL_UART_MspInit+0xa0>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ac:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_UART_MspInit+0xa0>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	4a18      	ldr	r2, [pc, #96]	; (8002914 <HAL_UART_MspInit+0xa0>)
 80028b2:	f043 0304 	orr.w	r3, r3, #4
 80028b6:	6193      	str	r3, [r2, #24]
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <HAL_UART_MspInit+0xa0>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028ce:	2303      	movs	r3, #3
 80028d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d2:	f107 0310 	add.w	r3, r7, #16
 80028d6:	4619      	mov	r1, r3
 80028d8:	480f      	ldr	r0, [pc, #60]	; (8002918 <HAL_UART_MspInit+0xa4>)
 80028da:	f000 fa5b 	bl	8002d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ec:	f107 0310 	add.w	r3, r7, #16
 80028f0:	4619      	mov	r1, r3
 80028f2:	4809      	ldr	r0, [pc, #36]	; (8002918 <HAL_UART_MspInit+0xa4>)
 80028f4:	f000 fa4e 	bl	8002d94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028f8:	2200      	movs	r2, #0
 80028fa:	2100      	movs	r1, #0
 80028fc:	2025      	movs	r0, #37	; 0x25
 80028fe:	f000 f990 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002902:	2025      	movs	r0, #37	; 0x25
 8002904:	f000 f9a9 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002908:	bf00      	nop
 800290a:	3720      	adds	r7, #32
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40013800 	.word	0x40013800
 8002914:	40021000 	.word	0x40021000
 8002918:	40010800 	.word	0x40010800

0800291c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800291c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800291e:	e003      	b.n	8002928 <LoopCopyDataInit>

08002920 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002922:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002924:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002926:	3104      	adds	r1, #4

08002928 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002928:	480a      	ldr	r0, [pc, #40]	; (8002954 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800292c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800292e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002930:	d3f6      	bcc.n	8002920 <CopyDataInit>
  ldr r2, =_sbss
 8002932:	4a0a      	ldr	r2, [pc, #40]	; (800295c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002934:	e002      	b.n	800293c <LoopFillZerobss>

08002936 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002936:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002938:	f842 3b04 	str.w	r3, [r2], #4

0800293c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800293c:	4b08      	ldr	r3, [pc, #32]	; (8002960 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800293e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002940:	d3f9      	bcc.n	8002936 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002942:	f7ff ff67 	bl	8002814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002946:	f004 f85b 	bl	8006a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800294a:	f7ff fd5d 	bl	8002408 <main>
  bx lr
 800294e:	4770      	bx	lr
  ldr r3, =_sidata
 8002950:	0800c990 	.word	0x0800c990
  ldr r0, =_sdata
 8002954:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002958:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 800295c:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8002960:	200004e0 	.word	0x200004e0

08002964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002964:	e7fe      	b.n	8002964 <ADC1_2_IRQHandler>
	...

08002968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <HAL_Init+0x28>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a07      	ldr	r2, [pc, #28]	; (8002990 <HAL_Init+0x28>)
 8002972:	f043 0310 	orr.w	r3, r3, #16
 8002976:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002978:	2003      	movs	r0, #3
 800297a:	f000 f947 	bl	8002c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800297e:	2000      	movs	r0, #0
 8002980:	f000 f808 	bl	8002994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002984:	f7ff fe0e 	bl	80025a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40022000 	.word	0x40022000

08002994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_InitTick+0x54>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_InitTick+0x58>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	4619      	mov	r1, r3
 80029a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f95f 	bl	8002c76 <HAL_SYSTICK_Config>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e00e      	b.n	80029e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b0f      	cmp	r3, #15
 80029c6:	d80a      	bhi.n	80029de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c8:	2200      	movs	r2, #0
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	f04f 30ff 	mov.w	r0, #4294967295
 80029d0:	f000 f927 	bl	8002c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d4:	4a06      	ldr	r2, [pc, #24]	; (80029f0 <HAL_InitTick+0x5c>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	e000      	b.n	80029e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000000 	.word	0x20000000
 80029ec:	20000008 	.word	0x20000008
 80029f0:	20000004 	.word	0x20000004

080029f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_IncTick+0x1c>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_IncTick+0x20>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4413      	add	r3, r2
 8002a04:	4a03      	ldr	r2, [pc, #12]	; (8002a14 <HAL_IncTick+0x20>)
 8002a06:	6013      	str	r3, [r2, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	20000008 	.word	0x20000008
 8002a14:	200004cc 	.word	0x200004cc

08002a18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a1c:	4b02      	ldr	r3, [pc, #8]	; (8002a28 <HAL_GetTick+0x10>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	200004cc 	.word	0x200004cc

08002a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a34:	f7ff fff0 	bl	8002a18 <HAL_GetTick>
 8002a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d005      	beq.n	8002a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a46:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <HAL_Delay+0x44>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4413      	add	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a52:	bf00      	nop
 8002a54:	f7ff ffe0 	bl	8002a18 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d8f7      	bhi.n	8002a54 <HAL_Delay+0x28>
  {
  }
}
 8002a64:	bf00      	nop
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000008 	.word	0x20000008

08002a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a90:	4013      	ands	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa6:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	60d3      	str	r3, [r2, #12]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	f003 0307 	and.w	r3, r3, #7
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	db0b      	blt.n	8002b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	f003 021f 	and.w	r2, r3, #31
 8002af0:	4906      	ldr	r1, [pc, #24]	; (8002b0c <__NVIC_EnableIRQ+0x34>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2001      	movs	r0, #1
 8002afa:	fa00 f202 	lsl.w	r2, r0, r2
 8002afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	e000e100 	.word	0xe000e100

08002b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	db0a      	blt.n	8002b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	490c      	ldr	r1, [pc, #48]	; (8002b5c <__NVIC_SetPriority+0x4c>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	0112      	lsls	r2, r2, #4
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	440b      	add	r3, r1
 8002b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b38:	e00a      	b.n	8002b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4908      	ldr	r1, [pc, #32]	; (8002b60 <__NVIC_SetPriority+0x50>)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	3b04      	subs	r3, #4
 8002b48:	0112      	lsls	r2, r2, #4
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	761a      	strb	r2, [r3, #24]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000e100 	.word	0xe000e100
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	; 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f1c3 0307 	rsb	r3, r3, #7
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	bf28      	it	cs
 8002b82:	2304      	movcs	r3, #4
 8002b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d902      	bls.n	8002b94 <NVIC_EncodePriority+0x30>
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3b03      	subs	r3, #3
 8002b92:	e000      	b.n	8002b96 <NVIC_EncodePriority+0x32>
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bac:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	43d9      	mvns	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	4313      	orrs	r3, r2
         );
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bd8:	d301      	bcc.n	8002bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e00f      	b.n	8002bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bde:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <SysTick_Config+0x40>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002be6:	210f      	movs	r1, #15
 8002be8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bec:	f7ff ff90 	bl	8002b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <SysTick_Config+0x40>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bf6:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <SysTick_Config+0x40>)
 8002bf8:	2207      	movs	r2, #7
 8002bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	e000e010 	.word	0xe000e010

08002c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff ff2d 	bl	8002a74 <__NVIC_SetPriorityGrouping>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b086      	sub	sp, #24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c34:	f7ff ff42 	bl	8002abc <__NVIC_GetPriorityGrouping>
 8002c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	6978      	ldr	r0, [r7, #20]
 8002c40:	f7ff ff90 	bl	8002b64 <NVIC_EncodePriority>
 8002c44:	4602      	mov	r2, r0
 8002c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ff5f 	bl	8002b10 <__NVIC_SetPriority>
}
 8002c52:	bf00      	nop
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff35 	bl	8002ad8 <__NVIC_EnableIRQ>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ffa2 	bl	8002bc8 <SysTick_Config>
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d005      	beq.n	8002cb2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2204      	movs	r2, #4
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
 8002cb0:	e051      	b.n	8002d56 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 020e 	bic.w	r2, r2, #14
 8002cc0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a22      	ldr	r2, [pc, #136]	; (8002d60 <HAL_DMA_Abort_IT+0xd0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d029      	beq.n	8002d30 <HAL_DMA_Abort_IT+0xa0>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a20      	ldr	r2, [pc, #128]	; (8002d64 <HAL_DMA_Abort_IT+0xd4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d022      	beq.n	8002d2c <HAL_DMA_Abort_IT+0x9c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a1f      	ldr	r2, [pc, #124]	; (8002d68 <HAL_DMA_Abort_IT+0xd8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d01a      	beq.n	8002d26 <HAL_DMA_Abort_IT+0x96>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1d      	ldr	r2, [pc, #116]	; (8002d6c <HAL_DMA_Abort_IT+0xdc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d012      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x90>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <HAL_DMA_Abort_IT+0xe0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00a      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x8a>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a1a      	ldr	r2, [pc, #104]	; (8002d74 <HAL_DMA_Abort_IT+0xe4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d102      	bne.n	8002d14 <HAL_DMA_Abort_IT+0x84>
 8002d0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d12:	e00e      	b.n	8002d32 <HAL_DMA_Abort_IT+0xa2>
 8002d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d18:	e00b      	b.n	8002d32 <HAL_DMA_Abort_IT+0xa2>
 8002d1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d1e:	e008      	b.n	8002d32 <HAL_DMA_Abort_IT+0xa2>
 8002d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d24:	e005      	b.n	8002d32 <HAL_DMA_Abort_IT+0xa2>
 8002d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d2a:	e002      	b.n	8002d32 <HAL_DMA_Abort_IT+0xa2>
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	e000      	b.n	8002d32 <HAL_DMA_Abort_IT+0xa2>
 8002d30:	2301      	movs	r3, #1
 8002d32:	4a11      	ldr	r2, [pc, #68]	; (8002d78 <HAL_DMA_Abort_IT+0xe8>)
 8002d34:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	4798      	blx	r3
    } 
  }
  return status;
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40020008 	.word	0x40020008
 8002d64:	4002001c 	.word	0x4002001c
 8002d68:	40020030 	.word	0x40020030
 8002d6c:	40020044 	.word	0x40020044
 8002d70:	40020058 	.word	0x40020058
 8002d74:	4002006c 	.word	0x4002006c
 8002d78:	40020000 	.word	0x40020000

08002d7c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b08b      	sub	sp, #44	; 0x2c
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002da2:	2300      	movs	r3, #0
 8002da4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002da6:	e169      	b.n	800307c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002da8:	2201      	movs	r2, #1
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	f040 8158 	bne.w	8003076 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4a9a      	ldr	r2, [pc, #616]	; (8003034 <HAL_GPIO_Init+0x2a0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d05e      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002dd0:	4a98      	ldr	r2, [pc, #608]	; (8003034 <HAL_GPIO_Init+0x2a0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d875      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002dd6:	4a98      	ldr	r2, [pc, #608]	; (8003038 <HAL_GPIO_Init+0x2a4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d058      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002ddc:	4a96      	ldr	r2, [pc, #600]	; (8003038 <HAL_GPIO_Init+0x2a4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d86f      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002de2:	4a96      	ldr	r2, [pc, #600]	; (800303c <HAL_GPIO_Init+0x2a8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d052      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002de8:	4a94      	ldr	r2, [pc, #592]	; (800303c <HAL_GPIO_Init+0x2a8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d869      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002dee:	4a94      	ldr	r2, [pc, #592]	; (8003040 <HAL_GPIO_Init+0x2ac>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d04c      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002df4:	4a92      	ldr	r2, [pc, #584]	; (8003040 <HAL_GPIO_Init+0x2ac>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d863      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002dfa:	4a92      	ldr	r2, [pc, #584]	; (8003044 <HAL_GPIO_Init+0x2b0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d046      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
 8002e00:	4a90      	ldr	r2, [pc, #576]	; (8003044 <HAL_GPIO_Init+0x2b0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d85d      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002e06:	2b12      	cmp	r3, #18
 8002e08:	d82a      	bhi.n	8002e60 <HAL_GPIO_Init+0xcc>
 8002e0a:	2b12      	cmp	r3, #18
 8002e0c:	d859      	bhi.n	8002ec2 <HAL_GPIO_Init+0x12e>
 8002e0e:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <HAL_GPIO_Init+0x80>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e8f 	.word	0x08002e8f
 8002e18:	08002e69 	.word	0x08002e69
 8002e1c:	08002e7b 	.word	0x08002e7b
 8002e20:	08002ebd 	.word	0x08002ebd
 8002e24:	08002ec3 	.word	0x08002ec3
 8002e28:	08002ec3 	.word	0x08002ec3
 8002e2c:	08002ec3 	.word	0x08002ec3
 8002e30:	08002ec3 	.word	0x08002ec3
 8002e34:	08002ec3 	.word	0x08002ec3
 8002e38:	08002ec3 	.word	0x08002ec3
 8002e3c:	08002ec3 	.word	0x08002ec3
 8002e40:	08002ec3 	.word	0x08002ec3
 8002e44:	08002ec3 	.word	0x08002ec3
 8002e48:	08002ec3 	.word	0x08002ec3
 8002e4c:	08002ec3 	.word	0x08002ec3
 8002e50:	08002ec3 	.word	0x08002ec3
 8002e54:	08002ec3 	.word	0x08002ec3
 8002e58:	08002e71 	.word	0x08002e71
 8002e5c:	08002e85 	.word	0x08002e85
 8002e60:	4a79      	ldr	r2, [pc, #484]	; (8003048 <HAL_GPIO_Init+0x2b4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d013      	beq.n	8002e8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e66:	e02c      	b.n	8002ec2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	623b      	str	r3, [r7, #32]
          break;
 8002e6e:	e029      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	3304      	adds	r3, #4
 8002e76:	623b      	str	r3, [r7, #32]
          break;
 8002e78:	e024      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	3308      	adds	r3, #8
 8002e80:	623b      	str	r3, [r7, #32]
          break;
 8002e82:	e01f      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	623b      	str	r3, [r7, #32]
          break;
 8002e8c:	e01a      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d102      	bne.n	8002e9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e96:	2304      	movs	r3, #4
 8002e98:	623b      	str	r3, [r7, #32]
          break;
 8002e9a:	e013      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d105      	bne.n	8002eb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	611a      	str	r2, [r3, #16]
          break;
 8002eae:	e009      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002eb0:	2308      	movs	r3, #8
 8002eb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	615a      	str	r2, [r3, #20]
          break;
 8002eba:	e003      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	623b      	str	r3, [r7, #32]
          break;
 8002ec0:	e000      	b.n	8002ec4 <HAL_GPIO_Init+0x130>
          break;
 8002ec2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2bff      	cmp	r3, #255	; 0xff
 8002ec8:	d801      	bhi.n	8002ece <HAL_GPIO_Init+0x13a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	e001      	b.n	8002ed2 <HAL_GPIO_Init+0x13e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2bff      	cmp	r3, #255	; 0xff
 8002ed8:	d802      	bhi.n	8002ee0 <HAL_GPIO_Init+0x14c>
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	e002      	b.n	8002ee6 <HAL_GPIO_Init+0x152>
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	3b08      	subs	r3, #8
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	210f      	movs	r1, #15
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	6a39      	ldr	r1, [r7, #32]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	431a      	orrs	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 80b1 	beq.w	8003076 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f14:	4b4d      	ldr	r3, [pc, #308]	; (800304c <HAL_GPIO_Init+0x2b8>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	4a4c      	ldr	r2, [pc, #304]	; (800304c <HAL_GPIO_Init+0x2b8>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6193      	str	r3, [r2, #24]
 8002f20:	4b4a      	ldr	r3, [pc, #296]	; (800304c <HAL_GPIO_Init+0x2b8>)
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f2c:	4a48      	ldr	r2, [pc, #288]	; (8003050 <HAL_GPIO_Init+0x2bc>)
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	089b      	lsrs	r3, r3, #2
 8002f32:	3302      	adds	r3, #2
 8002f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	220f      	movs	r2, #15
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a40      	ldr	r2, [pc, #256]	; (8003054 <HAL_GPIO_Init+0x2c0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d013      	beq.n	8002f80 <HAL_GPIO_Init+0x1ec>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a3f      	ldr	r2, [pc, #252]	; (8003058 <HAL_GPIO_Init+0x2c4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00d      	beq.n	8002f7c <HAL_GPIO_Init+0x1e8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a3e      	ldr	r2, [pc, #248]	; (800305c <HAL_GPIO_Init+0x2c8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d007      	beq.n	8002f78 <HAL_GPIO_Init+0x1e4>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a3d      	ldr	r2, [pc, #244]	; (8003060 <HAL_GPIO_Init+0x2cc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d101      	bne.n	8002f74 <HAL_GPIO_Init+0x1e0>
 8002f70:	2303      	movs	r3, #3
 8002f72:	e006      	b.n	8002f82 <HAL_GPIO_Init+0x1ee>
 8002f74:	2304      	movs	r3, #4
 8002f76:	e004      	b.n	8002f82 <HAL_GPIO_Init+0x1ee>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e002      	b.n	8002f82 <HAL_GPIO_Init+0x1ee>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <HAL_GPIO_Init+0x1ee>
 8002f80:	2300      	movs	r3, #0
 8002f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f84:	f002 0203 	and.w	r2, r2, #3
 8002f88:	0092      	lsls	r2, r2, #2
 8002f8a:	4093      	lsls	r3, r2
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f92:	492f      	ldr	r1, [pc, #188]	; (8003050 <HAL_GPIO_Init+0x2bc>)
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	089b      	lsrs	r3, r3, #2
 8002f98:	3302      	adds	r3, #2
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d006      	beq.n	8002fba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fac:	4b2d      	ldr	r3, [pc, #180]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	492c      	ldr	r1, [pc, #176]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]
 8002fb8:	e006      	b.n	8002fc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fba:	4b2a      	ldr	r3, [pc, #168]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	4928      	ldr	r1, [pc, #160]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d006      	beq.n	8002fe2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fd4:	4b23      	ldr	r3, [pc, #140]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	4922      	ldr	r1, [pc, #136]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
 8002fe0:	e006      	b.n	8002ff0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fe2:	4b20      	ldr	r3, [pc, #128]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	491e      	ldr	r1, [pc, #120]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d006      	beq.n	800300a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ffc:	4b19      	ldr	r3, [pc, #100]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	4918      	ldr	r1, [pc, #96]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	608b      	str	r3, [r1, #8]
 8003008:	e006      	b.n	8003018 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800300a:	4b16      	ldr	r3, [pc, #88]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	43db      	mvns	r3, r3
 8003012:	4914      	ldr	r1, [pc, #80]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8003014:	4013      	ands	r3, r2
 8003016:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d021      	beq.n	8003068 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003024:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	490e      	ldr	r1, [pc, #56]	; (8003064 <HAL_GPIO_Init+0x2d0>)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	4313      	orrs	r3, r2
 800302e:	60cb      	str	r3, [r1, #12]
 8003030:	e021      	b.n	8003076 <HAL_GPIO_Init+0x2e2>
 8003032:	bf00      	nop
 8003034:	10320000 	.word	0x10320000
 8003038:	10310000 	.word	0x10310000
 800303c:	10220000 	.word	0x10220000
 8003040:	10210000 	.word	0x10210000
 8003044:	10120000 	.word	0x10120000
 8003048:	10110000 	.word	0x10110000
 800304c:	40021000 	.word	0x40021000
 8003050:	40010000 	.word	0x40010000
 8003054:	40010800 	.word	0x40010800
 8003058:	40010c00 	.word	0x40010c00
 800305c:	40011000 	.word	0x40011000
 8003060:	40011400 	.word	0x40011400
 8003064:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_GPIO_Init+0x304>)
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	43db      	mvns	r3, r3
 8003070:	4909      	ldr	r1, [pc, #36]	; (8003098 <HAL_GPIO_Init+0x304>)
 8003072:	4013      	ands	r3, r2
 8003074:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	3301      	adds	r3, #1
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	fa22 f303 	lsr.w	r3, r2, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	f47f ae8e 	bne.w	8002da8 <HAL_GPIO_Init+0x14>
  }
}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	372c      	adds	r7, #44	; 0x2c
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	40010400 	.word	0x40010400

0800309c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
 80030a8:	4613      	mov	r3, r2
 80030aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030ac:	787b      	ldrb	r3, [r7, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030b8:	e003      	b.n	80030c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	041a      	lsls	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	611a      	str	r2, [r3, #16]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e12b      	b.n	8003336 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff f902 	bl	80022fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2224      	movs	r2, #36	; 0x24
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800311e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800312e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003130:	f003 f8b8 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 8003134:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4a81      	ldr	r2, [pc, #516]	; (8003340 <HAL_I2C_Init+0x274>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d807      	bhi.n	8003150 <HAL_I2C_Init+0x84>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4a80      	ldr	r2, [pc, #512]	; (8003344 <HAL_I2C_Init+0x278>)
 8003144:	4293      	cmp	r3, r2
 8003146:	bf94      	ite	ls
 8003148:	2301      	movls	r3, #1
 800314a:	2300      	movhi	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	e006      	b.n	800315e <HAL_I2C_Init+0x92>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4a7d      	ldr	r2, [pc, #500]	; (8003348 <HAL_I2C_Init+0x27c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	bf94      	ite	ls
 8003158:	2301      	movls	r3, #1
 800315a:	2300      	movhi	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0e7      	b.n	8003336 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4a78      	ldr	r2, [pc, #480]	; (800334c <HAL_I2C_Init+0x280>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	0c9b      	lsrs	r3, r3, #18
 8003170:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4a6a      	ldr	r2, [pc, #424]	; (8003340 <HAL_I2C_Init+0x274>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d802      	bhi.n	80031a0 <HAL_I2C_Init+0xd4>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	3301      	adds	r3, #1
 800319e:	e009      	b.n	80031b4 <HAL_I2C_Init+0xe8>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031a6:	fb02 f303 	mul.w	r3, r2, r3
 80031aa:	4a69      	ldr	r2, [pc, #420]	; (8003350 <HAL_I2C_Init+0x284>)
 80031ac:	fba2 2303 	umull	r2, r3, r2, r3
 80031b0:	099b      	lsrs	r3, r3, #6
 80031b2:	3301      	adds	r3, #1
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	495c      	ldr	r1, [pc, #368]	; (8003340 <HAL_I2C_Init+0x274>)
 80031d0:	428b      	cmp	r3, r1
 80031d2:	d819      	bhi.n	8003208 <HAL_I2C_Init+0x13c>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1e59      	subs	r1, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e2:	1c59      	adds	r1, r3, #1
 80031e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031e8:	400b      	ands	r3, r1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_I2C_Init+0x138>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1e59      	subs	r1, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031fc:	3301      	adds	r3, #1
 80031fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003202:	e051      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003204:	2304      	movs	r3, #4
 8003206:	e04f      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d111      	bne.n	8003234 <HAL_I2C_Init+0x168>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1e58      	subs	r0, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6859      	ldr	r1, [r3, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	440b      	add	r3, r1
 800321e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003222:	3301      	adds	r3, #1
 8003224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e012      	b.n	800325a <HAL_I2C_Init+0x18e>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1e58      	subs	r0, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	0099      	lsls	r1, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	fbb0 f3f3 	udiv	r3, r0, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_I2C_Init+0x196>
 800325e:	2301      	movs	r3, #1
 8003260:	e022      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10e      	bne.n	8003288 <HAL_I2C_Init+0x1bc>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	1e58      	subs	r0, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6859      	ldr	r1, [r3, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	440b      	add	r3, r1
 8003278:	fbb0 f3f3 	udiv	r3, r0, r3
 800327c:	3301      	adds	r3, #1
 800327e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003286:	e00f      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1e58      	subs	r0, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	0099      	lsls	r1, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	fbb0 f3f3 	udiv	r3, r0, r3
 800329e:	3301      	adds	r3, #1
 80032a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	6809      	ldr	r1, [r1, #0]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69da      	ldr	r2, [r3, #28]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6911      	ldr	r1, [r2, #16]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68d2      	ldr	r2, [r2, #12]
 80032e2:	4311      	orrs	r1, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	430b      	orrs	r3, r1
 80032ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	000186a0 	.word	0x000186a0
 8003344:	001e847f 	.word	0x001e847f
 8003348:	003d08ff 	.word	0x003d08ff
 800334c:	431bde83 	.word	0x431bde83
 8003350:	10624dd3 	.word	0x10624dd3

08003354 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	461a      	mov	r2, r3
 8003360:	460b      	mov	r3, r1
 8003362:	817b      	strh	r3, [r7, #10]
 8003364:	4613      	mov	r3, r2
 8003366:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003368:	f7ff fb56 	bl	8002a18 <HAL_GetTick>
 800336c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b20      	cmp	r3, #32
 8003378:	f040 80e0 	bne.w	800353c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	2319      	movs	r3, #25
 8003382:	2201      	movs	r2, #1
 8003384:	4970      	ldr	r1, [pc, #448]	; (8003548 <HAL_I2C_Master_Transmit+0x1f4>)
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f002 f990 	bl	80056ac <I2C_WaitOnFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003392:	2302      	movs	r3, #2
 8003394:	e0d3      	b.n	800353e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_I2C_Master_Transmit+0x50>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e0cc      	b.n	800353e <HAL_I2C_Master_Transmit+0x1ea>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d007      	beq.n	80033ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0201 	orr.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2221      	movs	r2, #33	; 0x21
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2210      	movs	r2, #16
 80033e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	893a      	ldrh	r2, [r7, #8]
 80033fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4a50      	ldr	r2, [pc, #320]	; (800354c <HAL_I2C_Master_Transmit+0x1f8>)
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800340c:	8979      	ldrh	r1, [r7, #10]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	6a3a      	ldr	r2, [r7, #32]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f001 fea2 	bl	800515c <I2C_MasterRequestWrite>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e08d      	b.n	800353e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003438:	e066      	b.n	8003508 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	6a39      	ldr	r1, [r7, #32]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f002 fa0a 	bl	8005858 <I2C_WaitOnTXEFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00d      	beq.n	8003466 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2b04      	cmp	r3, #4
 8003450:	d107      	bne.n	8003462 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003460:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e06b      	b.n	800353e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d11b      	bne.n	80034dc <HAL_I2C_Master_Transmit+0x188>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d017      	beq.n	80034dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	781a      	ldrb	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	6a39      	ldr	r1, [r7, #32]
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f002 f9fa 	bl	80058da <I2C_WaitOnBTFFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00d      	beq.n	8003508 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d107      	bne.n	8003504 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003502:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e01a      	b.n	800353e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	d194      	bne.n	800343a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800351e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	e000      	b.n	800353e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800353c:	2302      	movs	r3, #2
  }
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	00100002 	.word	0x00100002
 800354c:	ffff0000 	.word	0xffff0000

08003550 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	4608      	mov	r0, r1
 800355a:	4611      	mov	r1, r2
 800355c:	461a      	mov	r2, r3
 800355e:	4603      	mov	r3, r0
 8003560:	817b      	strh	r3, [r7, #10]
 8003562:	460b      	mov	r3, r1
 8003564:	813b      	strh	r3, [r7, #8]
 8003566:	4613      	mov	r3, r2
 8003568:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800356a:	f7ff fa55 	bl	8002a18 <HAL_GetTick>
 800356e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b20      	cmp	r3, #32
 800357a:	f040 80d9 	bne.w	8003730 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2319      	movs	r3, #25
 8003584:	2201      	movs	r2, #1
 8003586:	496d      	ldr	r1, [pc, #436]	; (800373c <HAL_I2C_Mem_Write+0x1ec>)
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f002 f88f 	bl	80056ac <I2C_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003594:	2302      	movs	r3, #2
 8003596:	e0cc      	b.n	8003732 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_I2C_Mem_Write+0x56>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e0c5      	b.n	8003732 <HAL_I2C_Mem_Write+0x1e2>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d007      	beq.n	80035cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2221      	movs	r2, #33	; 0x21
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2240      	movs	r2, #64	; 0x40
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a3a      	ldr	r2, [r7, #32]
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a4d      	ldr	r2, [pc, #308]	; (8003740 <HAL_I2C_Mem_Write+0x1f0>)
 800360c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800360e:	88f8      	ldrh	r0, [r7, #6]
 8003610:	893a      	ldrh	r2, [r7, #8]
 8003612:	8979      	ldrh	r1, [r7, #10]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	4603      	mov	r3, r0
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f001 fe1e 	bl	8005260 <I2C_RequestMemoryWrite>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d052      	beq.n	80036d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e081      	b.n	8003732 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f002 f910 	bl	8005858 <I2C_WaitOnTXEFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	2b04      	cmp	r3, #4
 8003644:	d107      	bne.n	8003656 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003654:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e06b      	b.n	8003732 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	781a      	ldrb	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b04      	cmp	r3, #4
 8003696:	d11b      	bne.n	80036d0 <HAL_I2C_Mem_Write+0x180>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369c:	2b00      	cmp	r3, #0
 800369e:	d017      	beq.n	80036d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1aa      	bne.n	800362e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f002 f8fc 	bl	80058da <I2C_WaitOnBTFFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00d      	beq.n	8003704 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d107      	bne.n	8003700 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e016      	b.n	8003732 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	00100002 	.word	0x00100002
 8003740:	ffff0000 	.word	0xffff0000

08003744 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08c      	sub	sp, #48	; 0x30
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	4608      	mov	r0, r1
 800374e:	4611      	mov	r1, r2
 8003750:	461a      	mov	r2, r3
 8003752:	4603      	mov	r3, r0
 8003754:	817b      	strh	r3, [r7, #10]
 8003756:	460b      	mov	r3, r1
 8003758:	813b      	strh	r3, [r7, #8]
 800375a:	4613      	mov	r3, r2
 800375c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003762:	f7ff f959 	bl	8002a18 <HAL_GetTick>
 8003766:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b20      	cmp	r3, #32
 8003772:	f040 8244 	bne.w	8003bfe <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	2319      	movs	r3, #25
 800377c:	2201      	movs	r2, #1
 800377e:	4982      	ldr	r1, [pc, #520]	; (8003988 <HAL_I2C_Mem_Read+0x244>)
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f001 ff93 	bl	80056ac <I2C_WaitOnFlagUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800378c:	2302      	movs	r3, #2
 800378e:	e237      	b.n	8003c00 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_I2C_Mem_Read+0x5a>
 800379a:	2302      	movs	r3, #2
 800379c:	e230      	b.n	8003c00 <HAL_I2C_Mem_Read+0x4bc>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d007      	beq.n	80037c4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2222      	movs	r2, #34	; 0x22
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2240      	movs	r2, #64	; 0x40
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80037f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a62      	ldr	r2, [pc, #392]	; (800398c <HAL_I2C_Mem_Read+0x248>)
 8003804:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003806:	88f8      	ldrh	r0, [r7, #6]
 8003808:	893a      	ldrh	r2, [r7, #8]
 800380a:	8979      	ldrh	r1, [r7, #10]
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	4603      	mov	r3, r0
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f001 fdb8 	bl	800538c <I2C_RequestMemoryRead>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e1ec      	b.n	8003c00 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382a:	2b00      	cmp	r3, #0
 800382c:	d113      	bne.n	8003856 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	e1c0      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	2b01      	cmp	r3, #1
 800385c:	d11e      	bne.n	800389c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800386c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800386e:	b672      	cpsid	i
}
 8003870:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003872:	2300      	movs	r3, #0
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003896:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003898:	b662      	cpsie	i
}
 800389a:	e035      	b.n	8003908 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d11e      	bne.n	80038e2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038b4:	b672      	cpsid	i
}
 80038b6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038de:	b662      	cpsie	i
}
 80038e0:	e012      	b.n	8003908 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038f0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003908:	e166      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390e:	2b03      	cmp	r3, #3
 8003910:	f200 811f 	bhi.w	8003b52 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003918:	2b01      	cmp	r3, #1
 800391a:	d123      	bne.n	8003964 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f002 f84d 	bl	80059c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e167      	b.n	8003c00 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003962:	e139      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003968:	2b02      	cmp	r3, #2
 800396a:	d152      	bne.n	8003a12 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003972:	2200      	movs	r2, #0
 8003974:	4906      	ldr	r1, [pc, #24]	; (8003990 <HAL_I2C_Mem_Read+0x24c>)
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f001 fe98 	bl	80056ac <I2C_WaitOnFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d008      	beq.n	8003994 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e13c      	b.n	8003c00 <HAL_I2C_Mem_Read+0x4bc>
 8003986:	bf00      	nop
 8003988:	00100002 	.word	0x00100002
 800398c:	ffff0000 	.word	0xffff0000
 8003990:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003994:	b672      	cpsid	i
}
 8003996:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039da:	b662      	cpsie	i
}
 80039dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a10:	e0e2      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a18:	2200      	movs	r2, #0
 8003a1a:	497b      	ldr	r1, [pc, #492]	; (8003c08 <HAL_I2C_Mem_Read+0x4c4>)
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f001 fe45 	bl	80056ac <I2C_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0e9      	b.n	8003c00 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a3c:	b672      	cpsid	i
}
 8003a3e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a72:	4b66      	ldr	r3, [pc, #408]	; (8003c0c <HAL_I2C_Mem_Read+0x4c8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	08db      	lsrs	r3, r3, #3
 8003a78:	4a65      	ldr	r2, [pc, #404]	; (8003c10 <HAL_I2C_Mem_Read+0x4cc>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	0a1a      	lsrs	r2, r3, #8
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	00da      	lsls	r2, r3, #3
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d118      	bne.n	8003aca <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f043 0220 	orr.w	r2, r3, #32
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003aba:	b662      	cpsie	i
}
 8003abc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e09a      	b.n	8003c00 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d1d9      	bne.n	8003a8c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b1a:	b662      	cpsie	i
}
 8003b1c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b50:	e042      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f001 ff32 	bl	80059c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e04c      	b.n	8003c00 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d118      	bne.n	8003bd8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f47f ae94 	bne.w	800390a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
  }
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3728      	adds	r7, #40	; 0x28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	00010004 	.word	0x00010004
 8003c0c:	20000000 	.word	0x20000000
 8003c10:	14f8b589 	.word	0x14f8b589

08003c14 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c34:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2b10      	cmp	r3, #16
 8003c42:	d003      	beq.n	8003c4c <HAL_I2C_EV_IRQHandler+0x38>
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	2b40      	cmp	r3, #64	; 0x40
 8003c48:	f040 80bd 	bne.w	8003dc6 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10d      	bne.n	8003c82 <HAL_I2C_EV_IRQHandler+0x6e>
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c6c:	d003      	beq.n	8003c76 <HAL_I2C_EV_IRQHandler+0x62>
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c74:	d101      	bne.n	8003c7a <HAL_I2C_EV_IRQHandler+0x66>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <HAL_I2C_EV_IRQHandler+0x68>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	f000 812e 	beq.w	8003ede <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00c      	beq.n	8003ca6 <HAL_I2C_EV_IRQHandler+0x92>
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	0a5b      	lsrs	r3, r3, #9
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d006      	beq.n	8003ca6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f001 ff15 	bl	8005ac8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fcb1 	bl	8004606 <I2C_Master_SB>
 8003ca4:	e08e      	b.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	08db      	lsrs	r3, r3, #3
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <HAL_I2C_EV_IRQHandler+0xb2>
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	0a5b      	lsrs	r3, r3, #9
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fd26 	bl	8004710 <I2C_Master_ADD10>
 8003cc4:	e07e      	b.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	085b      	lsrs	r3, r3, #1
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d009      	beq.n	8003ce6 <HAL_I2C_EV_IRQHandler+0xd2>
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	0a5b      	lsrs	r3, r3, #9
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fd3f 	bl	8004762 <I2C_Master_ADDR>
 8003ce4:	e06e      	b.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d037      	beq.n	8003d62 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d00:	f000 80ef 	beq.w	8003ee2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	09db      	lsrs	r3, r3, #7
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00f      	beq.n	8003d30 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	0a9b      	lsrs	r3, r3, #10
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d009      	beq.n	8003d30 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	089b      	lsrs	r3, r3, #2
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d103      	bne.n	8003d30 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f93e 	bl	8003faa <I2C_MasterTransmit_TXE>
 8003d2e:	e049      	b.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	089b      	lsrs	r3, r3, #2
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80d2 	beq.w	8003ee2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	0a5b      	lsrs	r3, r3, #9
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80cb 	beq.w	8003ee2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d103      	bne.n	8003d5a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f9c5 	bl	80040e2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d58:	e0c3      	b.n	8003ee2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fa29 	bl	80041b2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d60:	e0bf      	b.n	8003ee2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d70:	f000 80b7 	beq.w	8003ee2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	099b      	lsrs	r3, r3, #6
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00f      	beq.n	8003da0 <HAL_I2C_EV_IRQHandler+0x18c>
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	0a9b      	lsrs	r3, r3, #10
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d009      	beq.n	8003da0 <HAL_I2C_EV_IRQHandler+0x18c>
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	089b      	lsrs	r3, r3, #2
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d103      	bne.n	8003da0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fa99 	bl	80042d0 <I2C_MasterReceive_RXNE>
 8003d9e:	e011      	b.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	089b      	lsrs	r3, r3, #2
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 809a 	beq.w	8003ee2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	0a5b      	lsrs	r3, r3, #9
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8093 	beq.w	8003ee2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fb38 	bl	8004432 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc2:	e08e      	b.n	8003ee2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003dc4:	e08d      	b.n	8003ee2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d004      	beq.n	8003dd8 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	e007      	b.n	8003de8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	085b      	lsrs	r3, r3, #1
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d012      	beq.n	8003e1a <HAL_I2C_EV_IRQHandler+0x206>
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	0a5b      	lsrs	r3, r3, #9
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00c      	beq.n	8003e1a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e10:	69b9      	ldr	r1, [r7, #24]
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fefc 	bl	8004c10 <I2C_Slave_ADDR>
 8003e18:	e066      	b.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_I2C_EV_IRQHandler+0x226>
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	0a5b      	lsrs	r3, r3, #9
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 ff30 	bl	8004c98 <I2C_Slave_STOPF>
 8003e38:	e056      	b.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e3a:	7bbb      	ldrb	r3, [r7, #14]
 8003e3c:	2b21      	cmp	r3, #33	; 0x21
 8003e3e:	d002      	beq.n	8003e46 <HAL_I2C_EV_IRQHandler+0x232>
 8003e40:	7bbb      	ldrb	r3, [r7, #14]
 8003e42:	2b29      	cmp	r3, #41	; 0x29
 8003e44:	d125      	bne.n	8003e92 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	09db      	lsrs	r3, r3, #7
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00f      	beq.n	8003e72 <HAL_I2C_EV_IRQHandler+0x25e>
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	0a9b      	lsrs	r3, r3, #10
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <HAL_I2C_EV_IRQHandler+0x25e>
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	089b      	lsrs	r3, r3, #2
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d103      	bne.n	8003e72 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fe14 	bl	8004a98 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e70:	e039      	b.n	8003ee6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	089b      	lsrs	r3, r3, #2
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d033      	beq.n	8003ee6 <HAL_I2C_EV_IRQHandler+0x2d2>
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	0a5b      	lsrs	r3, r3, #9
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d02d      	beq.n	8003ee6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fe41 	bl	8004b12 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e90:	e029      	b.n	8003ee6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	099b      	lsrs	r3, r3, #6
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00f      	beq.n	8003ebe <HAL_I2C_EV_IRQHandler+0x2aa>
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	0a9b      	lsrs	r3, r3, #10
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <HAL_I2C_EV_IRQHandler+0x2aa>
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	089b      	lsrs	r3, r3, #2
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d103      	bne.n	8003ebe <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fe4b 	bl	8004b52 <I2C_SlaveReceive_RXNE>
 8003ebc:	e014      	b.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	089b      	lsrs	r3, r3, #2
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00e      	beq.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x2d4>
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	0a5b      	lsrs	r3, r3, #9
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d008      	beq.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fe79 	bl	8004bce <I2C_SlaveReceive_BTF>
 8003edc:	e004      	b.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8003ede:	bf00      	nop
 8003ee0:	e002      	b.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ee2:	bf00      	nop
 8003ee4:	e000      	b.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ee6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ee8:	3720      	adds	r7, #32
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr

08003f24 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr

08003f36 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	460b      	mov	r3, r1
 8003f40:	70fb      	strb	r3, [r7, #3]
 8003f42:	4613      	mov	r3, r2
 8003f44:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr

08003f50 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr

08003f62 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr

08003f74 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr

08003f86 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr

08003faa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fc0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d150      	bne.n	8004072 <I2C_MasterTransmit_TXE+0xc8>
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
 8003fd2:	2b21      	cmp	r3, #33	; 0x21
 8003fd4:	d14d      	bne.n	8004072 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d01d      	beq.n	8004018 <I2C_MasterTransmit_TXE+0x6e>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d01a      	beq.n	8004018 <I2C_MasterTransmit_TXE+0x6e>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fe8:	d016      	beq.n	8004018 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ff8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2211      	movs	r2, #17
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff ff6c 	bl	8003eee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004016:	e060      	b.n	80040da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004026:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004036:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b40      	cmp	r3, #64	; 0x40
 8004050:	d107      	bne.n	8004062 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ff81 	bl	8003f62 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004060:	e03b      	b.n	80040da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ff3f 	bl	8003eee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004070:	e033      	b.n	80040da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	2b21      	cmp	r3, #33	; 0x21
 8004076:	d005      	beq.n	8004084 <I2C_MasterTransmit_TXE+0xda>
 8004078:	7bbb      	ldrb	r3, [r7, #14]
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d12d      	bne.n	80040da <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	2b22      	cmp	r3, #34	; 0x22
 8004082:	d12a      	bne.n	80040da <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d108      	bne.n	80040a0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800409e:	e01c      	b.n	80040da <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b40      	cmp	r3, #64	; 0x40
 80040aa:	d103      	bne.n	80040b4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f880 	bl	80041b2 <I2C_MemoryTransmit_TXE_BTF>
}
 80040b2:	e012      	b.n	80040da <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	781a      	ldrb	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040d8:	e7ff      	b.n	80040da <I2C_MasterTransmit_TXE+0x130>
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b21      	cmp	r3, #33	; 0x21
 80040fa:	d156      	bne.n	80041aa <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d012      	beq.n	800412c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	781a      	ldrb	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800412a:	e03e      	b.n	80041aa <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b08      	cmp	r3, #8
 8004130:	d01d      	beq.n	800416e <I2C_MasterTransmit_BTF+0x8c>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b20      	cmp	r3, #32
 8004136:	d01a      	beq.n	800416e <I2C_MasterTransmit_BTF+0x8c>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800413e:	d016      	beq.n	800416e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800414e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2211      	movs	r2, #17
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff fec1 	bl	8003eee <HAL_I2C_MasterTxCpltCallback>
}
 800416c:	e01d      	b.n	80041aa <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800417c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff fea2 	bl	8003eee <HAL_I2C_MasterTxCpltCallback>
}
 80041aa:	bf00      	nop
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d11d      	bne.n	8004206 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d10b      	bne.n	80041ea <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e2:	1c9a      	adds	r2, r3, #2
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80041e8:	e06e      	b.n	80042c8 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	121b      	asrs	r3, r3, #8
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004204:	e060      	b.n	80042c8 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420a:	2b01      	cmp	r3, #1
 800420c:	d10b      	bne.n	8004226 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004212:	b2da      	uxtb	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004224:	e050      	b.n	80042c8 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422a:	2b02      	cmp	r3, #2
 800422c:	d14c      	bne.n	80042c8 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	2b22      	cmp	r3, #34	; 0x22
 8004232:	d108      	bne.n	8004246 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004242:	601a      	str	r2, [r3, #0]
}
 8004244:	e040      	b.n	80042c8 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d015      	beq.n	800427c <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b21      	cmp	r3, #33	; 0x21
 8004254:	d112      	bne.n	800427c <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	781a      	ldrb	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800427a:	e025      	b.n	80042c8 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d120      	bne.n	80042c8 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	2b21      	cmp	r3, #33	; 0x21
 800428a:	d11d      	bne.n	80042c8 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800429a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff fe4d 	bl	8003f62 <HAL_I2C_MemTxCpltCallback>
}
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b22      	cmp	r3, #34	; 0x22
 80042e2:	f040 80a2 	bne.w	800442a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d921      	bls.n	8004338 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b03      	cmp	r3, #3
 8004322:	f040 8082 	bne.w	800442a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004334:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004336:	e078      	b.n	800442a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	2b02      	cmp	r3, #2
 800433e:	d074      	beq.n	800442a <I2C_MasterReceive_RXNE+0x15a>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d002      	beq.n	800434c <I2C_MasterReceive_RXNE+0x7c>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d16e      	bne.n	800442a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f001 fb05 	bl	800595c <I2C_WaitOnSTOPRequestThroughIT>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d142      	bne.n	80043de <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004366:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004376:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b40      	cmp	r3, #64	; 0x40
 80043b0:	d10a      	bne.n	80043c8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff fdd7 	bl	8003f74 <HAL_I2C_MemRxCpltCallback>
}
 80043c6:	e030      	b.n	800442a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2212      	movs	r2, #18
 80043d4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fd92 	bl	8003f00 <HAL_I2C_MasterRxCpltCallback>
}
 80043dc:	e025      	b.n	800442a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043ec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7ff fdae 	bl	8003f86 <HAL_I2C_ErrorCallback>
}
 800442a:	bf00      	nop
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b084      	sub	sp, #16
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b04      	cmp	r3, #4
 8004448:	d11b      	bne.n	8004482 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004458:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004480:	e0bd      	b.n	80045fe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b03      	cmp	r3, #3
 800448a:	d129      	bne.n	80044e0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800449a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d00a      	beq.n	80044b8 <I2C_MasterReceive_BTF+0x86>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d007      	beq.n	80044b8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80044de:	e08e      	b.n	80045fe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d176      	bne.n	80045d8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d002      	beq.n	80044f6 <I2C_MasterReceive_BTF+0xc4>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b10      	cmp	r3, #16
 80044f4:	d108      	bne.n	8004508 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	e019      	b.n	800453c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b04      	cmp	r3, #4
 800450c:	d002      	beq.n	8004514 <I2C_MasterReceive_BTF+0xe2>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d108      	bne.n	8004526 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	e00a      	b.n	800453c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b10      	cmp	r3, #16
 800452a:	d007      	beq.n	800453c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004596:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b40      	cmp	r3, #64	; 0x40
 80045aa:	d10a      	bne.n	80045c2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff fcda 	bl	8003f74 <HAL_I2C_MemRxCpltCallback>
}
 80045c0:	e01d      	b.n	80045fe <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2212      	movs	r2, #18
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff fc95 	bl	8003f00 <HAL_I2C_MasterRxCpltCallback>
}
 80045d6:	e012      	b.n	80045fe <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045fe:	bf00      	nop
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b40      	cmp	r3, #64	; 0x40
 8004618:	d117      	bne.n	800464a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461e:	2b00      	cmp	r3, #0
 8004620:	d109      	bne.n	8004636 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	b2db      	uxtb	r3, r3
 8004628:	461a      	mov	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004632:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004634:	e067      	b.n	8004706 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	b2db      	uxtb	r3, r3
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	b2da      	uxtb	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	611a      	str	r2, [r3, #16]
}
 8004648:	e05d      	b.n	8004706 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004652:	d133      	bne.n	80046bc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b21      	cmp	r3, #33	; 0x21
 800465e:	d109      	bne.n	8004674 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004664:	b2db      	uxtb	r3, r3
 8004666:	461a      	mov	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004670:	611a      	str	r2, [r3, #16]
 8004672:	e008      	b.n	8004686 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004678:	b2db      	uxtb	r3, r3
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	b2da      	uxtb	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468a:	2b00      	cmp	r3, #0
 800468c:	d004      	beq.n	8004698 <I2C_Master_SB+0x92>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004694:	2b00      	cmp	r3, #0
 8004696:	d108      	bne.n	80046aa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	2b00      	cmp	r3, #0
 800469e:	d032      	beq.n	8004706 <I2C_Master_SB+0x100>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d02d      	beq.n	8004706 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046b8:	605a      	str	r2, [r3, #4]
}
 80046ba:	e024      	b.n	8004706 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10e      	bne.n	80046e2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	11db      	asrs	r3, r3, #7
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f003 0306 	and.w	r3, r3, #6
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	f063 030f 	orn	r3, r3, #15
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	611a      	str	r2, [r3, #16]
}
 80046e0:	e011      	b.n	8004706 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d10d      	bne.n	8004706 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	11db      	asrs	r3, r3, #7
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	f003 0306 	and.w	r3, r3, #6
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	f063 030e 	orn	r3, r3, #14
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	611a      	str	r2, [r3, #16]
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr

08004710 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471c:	b2da      	uxtb	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004728:	2b00      	cmp	r3, #0
 800472a:	d103      	bne.n	8004734 <I2C_Master_ADD10+0x24>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	2b00      	cmp	r3, #0
 8004732:	d011      	beq.n	8004758 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	2b00      	cmp	r3, #0
 800473c:	d104      	bne.n	8004748 <I2C_Master_ADD10+0x38>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004756:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr

08004762 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004762:	b480      	push	{r7}
 8004764:	b091      	sub	sp, #68	; 0x44
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004770:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b22      	cmp	r3, #34	; 0x22
 800478a:	f040 8174 	bne.w	8004a76 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10f      	bne.n	80047b6 <I2C_Master_ADDR+0x54>
 8004796:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800479a:	2b40      	cmp	r3, #64	; 0x40
 800479c:	d10b      	bne.n	80047b6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800479e:	2300      	movs	r3, #0
 80047a0:	633b      	str	r3, [r7, #48]	; 0x30
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	633b      	str	r3, [r7, #48]	; 0x30
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	633b      	str	r3, [r7, #48]	; 0x30
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	e16b      	b.n	8004a8e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d11d      	bne.n	80047fa <I2C_Master_ADDR+0x98>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047c6:	d118      	bne.n	80047fa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047c8:	2300      	movs	r3, #0
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ec:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	651a      	str	r2, [r3, #80]	; 0x50
 80047f8:	e149      	b.n	8004a8e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d113      	bne.n	800482c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004804:	2300      	movs	r3, #0
 8004806:	62bb      	str	r3, [r7, #40]	; 0x28
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	62bb      	str	r3, [r7, #40]	; 0x28
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e120      	b.n	8004a6e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b01      	cmp	r3, #1
 8004834:	f040 808a 	bne.w	800494c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800483e:	d137      	bne.n	80048b0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800485a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800485e:	d113      	bne.n	8004888 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004870:	2300      	movs	r3, #0
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	e0f2      	b.n	8004a6e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004888:	2300      	movs	r3, #0
 800488a:	623b      	str	r3, [r7, #32]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	623b      	str	r3, [r7, #32]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	623b      	str	r3, [r7, #32]
 800489c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	e0de      	b.n	8004a6e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80048b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d02e      	beq.n	8004914 <I2C_Master_ADDR+0x1b2>
 80048b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	d02b      	beq.n	8004914 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80048bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048be:	2b12      	cmp	r3, #18
 80048c0:	d102      	bne.n	80048c8 <I2C_Master_ADDR+0x166>
 80048c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d125      	bne.n	8004914 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80048c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d00e      	beq.n	80048ec <I2C_Master_ADDR+0x18a>
 80048ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d00b      	beq.n	80048ec <I2C_Master_ADDR+0x18a>
 80048d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d6:	2b10      	cmp	r3, #16
 80048d8:	d008      	beq.n	80048ec <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e007      	b.n	80048fc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048fa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048fc:	2300      	movs	r3, #0
 80048fe:	61fb      	str	r3, [r7, #28]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	61fb      	str	r3, [r7, #28]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	e0ac      	b.n	8004a6e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004922:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004924:	2300      	movs	r3, #0
 8004926:	61bb      	str	r3, [r7, #24]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	61bb      	str	r3, [r7, #24]
 8004938:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e090      	b.n	8004a6e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d158      	bne.n	8004a08 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	2b04      	cmp	r3, #4
 800495a:	d021      	beq.n	80049a0 <I2C_Master_ADDR+0x23e>
 800495c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495e:	2b02      	cmp	r3, #2
 8004960:	d01e      	beq.n	80049a0 <I2C_Master_ADDR+0x23e>
 8004962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004964:	2b10      	cmp	r3, #16
 8004966:	d01b      	beq.n	80049a0 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004976:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	e012      	b.n	80049c6 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049ae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049b0:	2300      	movs	r3, #0
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d4:	d14b      	bne.n	8004a6e <I2C_Master_ADDR+0x30c>
 80049d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049dc:	d00b      	beq.n	80049f6 <I2C_Master_ADDR+0x294>
 80049de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d008      	beq.n	80049f6 <I2C_Master_ADDR+0x294>
 80049e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d005      	beq.n	80049f6 <I2C_Master_ADDR+0x294>
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	2b10      	cmp	r3, #16
 80049ee:	d002      	beq.n	80049f6 <I2C_Master_ADDR+0x294>
 80049f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d13b      	bne.n	8004a6e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a04:	605a      	str	r2, [r3, #4]
 8004a06:	e032      	b.n	8004a6e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a16:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a26:	d117      	bne.n	8004a58 <I2C_Master_ADDR+0x2f6>
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a2e:	d00b      	beq.n	8004a48 <I2C_Master_ADDR+0x2e6>
 8004a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d008      	beq.n	8004a48 <I2C_Master_ADDR+0x2e6>
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d005      	beq.n	8004a48 <I2C_Master_ADDR+0x2e6>
 8004a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3e:	2b10      	cmp	r3, #16
 8004a40:	d002      	beq.n	8004a48 <I2C_Master_ADDR+0x2e6>
 8004a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d107      	bne.n	8004a58 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a56:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004a74:	e00b      	b.n	8004a8e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a76:	2300      	movs	r3, #0
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
}
 8004a8c:	e7ff      	b.n	8004a8e <I2C_Master_ADDR+0x32c>
 8004a8e:	bf00      	nop
 8004a90:	3744      	adds	r7, #68	; 0x44
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d02b      	beq.n	8004b0a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	781a      	ldrb	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d114      	bne.n	8004b0a <I2C_SlaveTransmit_TXE+0x72>
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	2b29      	cmp	r3, #41	; 0x29
 8004ae4:	d111      	bne.n	8004b0a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2221      	movs	r2, #33	; 0x21
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2228      	movs	r2, #40	; 0x28
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff fa04 	bl	8003f12 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b0a:	bf00      	nop
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d011      	beq.n	8004b48 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	781a      	ldrb	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr

08004b52 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b60:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d02c      	beq.n	8004bc6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691a      	ldr	r2, [r3, #16]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d114      	bne.n	8004bc6 <I2C_SlaveReceive_RXNE+0x74>
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8004ba0:	d111      	bne.n	8004bc6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2222      	movs	r2, #34	; 0x22
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2228      	movs	r2, #40	; 0x28
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff f9af 	bl	8003f24 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bc6:	bf00      	nop
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d012      	beq.n	8004c06 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691a      	ldr	r2, [r3, #16]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c2a:	2b28      	cmp	r3, #40	; 0x28
 8004c2c:	d127      	bne.n	8004c7e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	089b      	lsrs	r3, r3, #2
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	09db      	lsrs	r3, r3, #7
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d103      	bne.n	8004c62 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	81bb      	strh	r3, [r7, #12]
 8004c60:	e002      	b.n	8004c68 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004c70:	89ba      	ldrh	r2, [r7, #12]
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
 8004c74:	4619      	mov	r1, r3
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff f95d 	bl	8003f36 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c7c:	e008      	b.n	8004c90 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f06f 0202 	mvn.w	r2, #2
 8004c86:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004c90:	bf00      	nop
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cb6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60bb      	str	r3, [r7, #8]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cf4:	d172      	bne.n	8004ddc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	2b22      	cmp	r3, #34	; 0x22
 8004cfa:	d002      	beq.n	8004d02 <I2C_Slave_STOPF+0x6a>
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8004d00:	d135      	bne.n	8004d6e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d005      	beq.n	8004d26 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	f043 0204 	orr.w	r2, r3, #4
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fe f81e 	bl	8002d7c <HAL_DMA_GetState>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d049      	beq.n	8004dda <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	4a69      	ldr	r2, [pc, #420]	; (8004ef0 <I2C_Slave_STOPF+0x258>)
 8004d4c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fd ff9c 	bl	8002c90 <HAL_DMA_Abort_IT>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d03d      	beq.n	8004dda <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d68:	4610      	mov	r0, r2
 8004d6a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d6c:	e035      	b.n	8004dda <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f043 0204 	orr.w	r2, r3, #4
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004da0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fd ffe8 	bl	8002d7c <HAL_DMA_GetState>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d014      	beq.n	8004ddc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db6:	4a4e      	ldr	r2, [pc, #312]	; (8004ef0 <I2C_Slave_STOPF+0x258>)
 8004db8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fd ff66 	bl	8002c90 <HAL_DMA_Abort_IT>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	4798      	blx	r3
 8004dd8:	e000      	b.n	8004ddc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dda:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d03e      	beq.n	8004e64 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d112      	bne.n	8004e1a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691a      	ldr	r2, [r3, #16]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	d112      	bne.n	8004e4e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	f043 0204 	orr.w	r2, r3, #4
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f843 	bl	8004ef8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004e72:	e039      	b.n	8004ee8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b2a      	cmp	r3, #42	; 0x2a
 8004e78:	d109      	bne.n	8004e8e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2228      	movs	r2, #40	; 0x28
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff f84b 	bl	8003f24 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b28      	cmp	r3, #40	; 0x28
 8004e98:	d111      	bne.n	8004ebe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a15      	ldr	r2, [pc, #84]	; (8004ef4 <I2C_Slave_STOPF+0x25c>)
 8004e9e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff f84a 	bl	8003f50 <HAL_I2C_ListenCpltCallback>
}
 8004ebc:	e014      	b.n	8004ee8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	2b22      	cmp	r3, #34	; 0x22
 8004ec4:	d002      	beq.n	8004ecc <I2C_Slave_STOPF+0x234>
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	2b22      	cmp	r3, #34	; 0x22
 8004eca:	d10d      	bne.n	8004ee8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff f81e 	bl	8003f24 <HAL_I2C_SlaveRxCpltCallback>
}
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	0800555d 	.word	0x0800555d
 8004ef4:	ffff0000 	.word	0xffff0000

08004ef8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f06:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f0e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f10:	7bbb      	ldrb	r3, [r7, #14]
 8004f12:	2b10      	cmp	r3, #16
 8004f14:	d002      	beq.n	8004f1c <I2C_ITError+0x24>
 8004f16:	7bbb      	ldrb	r3, [r7, #14]
 8004f18:	2b40      	cmp	r3, #64	; 0x40
 8004f1a:	d10a      	bne.n	8004f32 <I2C_ITError+0x3a>
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	2b22      	cmp	r3, #34	; 0x22
 8004f20:	d107      	bne.n	8004f32 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f30:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f38:	2b28      	cmp	r3, #40	; 0x28
 8004f3a:	d107      	bne.n	8004f4c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2228      	movs	r2, #40	; 0x28
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f4a:	e015      	b.n	8004f78 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f5a:	d00a      	beq.n	8004f72 <I2C_ITError+0x7a>
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	2b60      	cmp	r3, #96	; 0x60
 8004f60:	d007      	beq.n	8004f72 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f86:	d161      	bne.n	800504c <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f96:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d020      	beq.n	8004fe6 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa8:	4a6a      	ldr	r2, [pc, #424]	; (8005154 <I2C_ITError+0x25c>)
 8004faa:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fd fe6d 	bl	8002c90 <HAL_DMA_Abort_IT>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 8089 	beq.w	80050d0 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0201 	bic.w	r2, r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	4798      	blx	r3
 8004fe4:	e074      	b.n	80050d0 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	4a5a      	ldr	r2, [pc, #360]	; (8005154 <I2C_ITError+0x25c>)
 8004fec:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fd fe4c 	bl	8002c90 <HAL_DMA_Abort_IT>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d068      	beq.n	80050d0 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005008:	2b40      	cmp	r3, #64	; 0x40
 800500a:	d10b      	bne.n	8005024 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0201 	bic.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005046:	4610      	mov	r0, r2
 8005048:	4798      	blx	r3
 800504a:	e041      	b.n	80050d0 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b60      	cmp	r3, #96	; 0x60
 8005056:	d125      	bne.n	80050a4 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005070:	2b40      	cmp	r3, #64	; 0x40
 8005072:	d10b      	bne.n	800508c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691a      	ldr	r2, [r3, #16]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0201 	bic.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7fe ff7b 	bl	8003f98 <HAL_I2C_AbortCpltCallback>
 80050a2:	e015      	b.n	80050d0 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b40      	cmp	r3, #64	; 0x40
 80050b0:	d10b      	bne.n	80050ca <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fe ff5b 	bl	8003f86 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10e      	bne.n	80050fe <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d109      	bne.n	80050fe <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d104      	bne.n	80050fe <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d007      	beq.n	800510e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800510c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005114:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	2b04      	cmp	r3, #4
 8005120:	d113      	bne.n	800514a <I2C_ITError+0x252>
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	2b28      	cmp	r3, #40	; 0x28
 8005126:	d110      	bne.n	800514a <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a0b      	ldr	r2, [pc, #44]	; (8005158 <I2C_ITError+0x260>)
 800512c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7fe ff03 	bl	8003f50 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800514a:	bf00      	nop
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	0800555d 	.word	0x0800555d
 8005158:	ffff0000 	.word	0xffff0000

0800515c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af02      	add	r7, sp, #8
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	607a      	str	r2, [r7, #4]
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	460b      	mov	r3, r1
 800516a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005170:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b08      	cmp	r3, #8
 8005176:	d006      	beq.n	8005186 <I2C_MasterRequestWrite+0x2a>
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d003      	beq.n	8005186 <I2C_MasterRequestWrite+0x2a>
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005184:	d108      	bne.n	8005198 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e00b      	b.n	80051b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	2b12      	cmp	r3, #18
 800519e:	d107      	bne.n	80051b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fa75 	bl	80056ac <I2C_WaitOnFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00d      	beq.n	80051e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d6:	d103      	bne.n	80051e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e035      	b.n	8005250 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051ec:	d108      	bne.n	8005200 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051ee:	897b      	ldrh	r3, [r7, #10]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051fc:	611a      	str	r2, [r3, #16]
 80051fe:	e01b      	b.n	8005238 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005200:	897b      	ldrh	r3, [r7, #10]
 8005202:	11db      	asrs	r3, r3, #7
 8005204:	b2db      	uxtb	r3, r3
 8005206:	f003 0306 	and.w	r3, r3, #6
 800520a:	b2db      	uxtb	r3, r3
 800520c:	f063 030f 	orn	r3, r3, #15
 8005210:	b2da      	uxtb	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	490e      	ldr	r1, [pc, #56]	; (8005258 <I2C_MasterRequestWrite+0xfc>)
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 fa9b 	bl	800575a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e010      	b.n	8005250 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800522e:	897b      	ldrh	r3, [r7, #10]
 8005230:	b2da      	uxtb	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	4907      	ldr	r1, [pc, #28]	; (800525c <I2C_MasterRequestWrite+0x100>)
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 fa8b 	bl	800575a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	00010008 	.word	0x00010008
 800525c:	00010002 	.word	0x00010002

08005260 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	4608      	mov	r0, r1
 800526a:	4611      	mov	r1, r2
 800526c:	461a      	mov	r2, r3
 800526e:	4603      	mov	r3, r0
 8005270:	817b      	strh	r3, [r7, #10]
 8005272:	460b      	mov	r3, r1
 8005274:	813b      	strh	r3, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005288:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	2200      	movs	r2, #0
 8005292:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fa08 	bl	80056ac <I2C_WaitOnFlagUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00d      	beq.n	80052be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b0:	d103      	bne.n	80052ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e05f      	b.n	800537e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052be:	897b      	ldrh	r3, [r7, #10]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	6a3a      	ldr	r2, [r7, #32]
 80052d2:	492d      	ldr	r1, [pc, #180]	; (8005388 <I2C_RequestMemoryWrite+0x128>)
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 fa40 	bl	800575a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e04c      	b.n	800537e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fc:	6a39      	ldr	r1, [r7, #32]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 faaa 	bl	8005858 <I2C_WaitOnTXEFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00d      	beq.n	8005326 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	2b04      	cmp	r3, #4
 8005310:	d107      	bne.n	8005322 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005320:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e02b      	b.n	800537e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d105      	bne.n	8005338 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800532c:	893b      	ldrh	r3, [r7, #8]
 800532e:	b2da      	uxtb	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	611a      	str	r2, [r3, #16]
 8005336:	e021      	b.n	800537c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005338:	893b      	ldrh	r3, [r7, #8]
 800533a:	0a1b      	lsrs	r3, r3, #8
 800533c:	b29b      	uxth	r3, r3
 800533e:	b2da      	uxtb	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005348:	6a39      	ldr	r1, [r7, #32]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 fa84 	bl	8005858 <I2C_WaitOnTXEFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00d      	beq.n	8005372 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	2b04      	cmp	r3, #4
 800535c:	d107      	bne.n	800536e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e005      	b.n	800537e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005372:	893b      	ldrh	r3, [r7, #8]
 8005374:	b2da      	uxtb	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	00010002 	.word	0x00010002

0800538c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af02      	add	r7, sp, #8
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	4608      	mov	r0, r1
 8005396:	4611      	mov	r1, r2
 8005398:	461a      	mov	r2, r3
 800539a:	4603      	mov	r3, r0
 800539c:	817b      	strh	r3, [r7, #10]
 800539e:	460b      	mov	r3, r1
 80053a0:	813b      	strh	r3, [r7, #8]
 80053a2:	4613      	mov	r3, r2
 80053a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 f96a 	bl	80056ac <I2C_WaitOnFlagUntilTimeout>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00d      	beq.n	80053fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ec:	d103      	bne.n	80053f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e0aa      	b.n	8005550 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053fa:	897b      	ldrh	r3, [r7, #10]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005408:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	6a3a      	ldr	r2, [r7, #32]
 800540e:	4952      	ldr	r1, [pc, #328]	; (8005558 <I2C_RequestMemoryRead+0x1cc>)
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 f9a2 	bl	800575a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e097      	b.n	8005550 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005438:	6a39      	ldr	r1, [r7, #32]
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 fa0c 	bl	8005858 <I2C_WaitOnTXEFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00d      	beq.n	8005462 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	2b04      	cmp	r3, #4
 800544c:	d107      	bne.n	800545e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800545c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e076      	b.n	8005550 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005462:	88fb      	ldrh	r3, [r7, #6]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d105      	bne.n	8005474 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005468:	893b      	ldrh	r3, [r7, #8]
 800546a:	b2da      	uxtb	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	611a      	str	r2, [r3, #16]
 8005472:	e021      	b.n	80054b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005474:	893b      	ldrh	r3, [r7, #8]
 8005476:	0a1b      	lsrs	r3, r3, #8
 8005478:	b29b      	uxth	r3, r3
 800547a:	b2da      	uxtb	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005484:	6a39      	ldr	r1, [r7, #32]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f9e6 	bl	8005858 <I2C_WaitOnTXEFlagUntilTimeout>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00d      	beq.n	80054ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	2b04      	cmp	r3, #4
 8005498:	d107      	bne.n	80054aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e050      	b.n	8005550 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054ae:	893b      	ldrh	r3, [r7, #8]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ba:	6a39      	ldr	r1, [r7, #32]
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f9cb 	bl	8005858 <I2C_WaitOnTXEFlagUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00d      	beq.n	80054e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d107      	bne.n	80054e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e035      	b.n	8005550 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f8d3 	bl	80056ac <I2C_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00d      	beq.n	8005528 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551a:	d103      	bne.n	8005524 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005522:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e013      	b.n	8005550 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005528:	897b      	ldrh	r3, [r7, #10]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	f043 0301 	orr.w	r3, r3, #1
 8005530:	b2da      	uxtb	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	6a3a      	ldr	r2, [r7, #32]
 800553c:	4906      	ldr	r1, [pc, #24]	; (8005558 <I2C_RequestMemoryRead+0x1cc>)
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 f90b 	bl	800575a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	00010002 	.word	0x00010002

0800555c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005574:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005576:	4b4b      	ldr	r3, [pc, #300]	; (80056a4 <I2C_DMAAbort+0x148>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	08db      	lsrs	r3, r3, #3
 800557c:	4a4a      	ldr	r2, [pc, #296]	; (80056a8 <I2C_DMAAbort+0x14c>)
 800557e:	fba2 2303 	umull	r2, r3, r2, r3
 8005582:	0a1a      	lsrs	r2, r3, #8
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	00da      	lsls	r2, r3, #3
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	f043 0220 	orr.w	r2, r3, #32
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80055a2:	e00a      	b.n	80055ba <I2C_DMAAbort+0x5e>
    }
    count--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055b8:	d0ea      	beq.n	8005590 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c6:	2200      	movs	r2, #0
 80055c8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d6:	2200      	movs	r2, #0
 80055d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2200      	movs	r2, #0
 80055ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fc:	2200      	movs	r2, #0
 80055fe:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	2200      	movs	r2, #0
 800560e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0201 	bic.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b60      	cmp	r3, #96	; 0x60
 800562a:	d10e      	bne.n	800564a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2200      	movs	r2, #0
 8005640:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005642:	6978      	ldr	r0, [r7, #20]
 8005644:	f7fe fca8 	bl	8003f98 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005648:	e027      	b.n	800569a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800564a:	7cfb      	ldrb	r3, [r7, #19]
 800564c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005650:	2b28      	cmp	r3, #40	; 0x28
 8005652:	d117      	bne.n	8005684 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005672:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2200      	movs	r2, #0
 8005678:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2228      	movs	r2, #40	; 0x28
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005682:	e007      	b.n	8005694 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005694:	6978      	ldr	r0, [r7, #20]
 8005696:	f7fe fc76 	bl	8003f86 <HAL_I2C_ErrorCallback>
}
 800569a:	bf00      	nop
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20000000 	.word	0x20000000
 80056a8:	14f8b589 	.word	0x14f8b589

080056ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	603b      	str	r3, [r7, #0]
 80056b8:	4613      	mov	r3, r2
 80056ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056bc:	e025      	b.n	800570a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d021      	beq.n	800570a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c6:	f7fd f9a7 	bl	8002a18 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d302      	bcc.n	80056dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d116      	bne.n	800570a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f043 0220 	orr.w	r2, r3, #32
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e023      	b.n	8005752 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	0c1b      	lsrs	r3, r3, #16
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	d10d      	bne.n	8005730 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	43da      	mvns	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4013      	ands	r3, r2
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	bf0c      	ite	eq
 8005726:	2301      	moveq	r3, #1
 8005728:	2300      	movne	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	461a      	mov	r2, r3
 800572e:	e00c      	b.n	800574a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	43da      	mvns	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4013      	ands	r3, r2
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	bf0c      	ite	eq
 8005742:	2301      	moveq	r3, #1
 8005744:	2300      	movne	r3, #0
 8005746:	b2db      	uxtb	r3, r3
 8005748:	461a      	mov	r2, r3
 800574a:	79fb      	ldrb	r3, [r7, #7]
 800574c:	429a      	cmp	r2, r3
 800574e:	d0b6      	beq.n	80056be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
 8005766:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005768:	e051      	b.n	800580e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005778:	d123      	bne.n	80057c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005788:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005792:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	f043 0204 	orr.w	r2, r3, #4
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e046      	b.n	8005850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c8:	d021      	beq.n	800580e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ca:	f7fd f925 	bl	8002a18 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d302      	bcc.n	80057e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d116      	bne.n	800580e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	f043 0220 	orr.w	r2, r3, #32
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e020      	b.n	8005850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	0c1b      	lsrs	r3, r3, #16
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	d10c      	bne.n	8005832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	43da      	mvns	r2, r3
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4013      	ands	r3, r2
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	bf14      	ite	ne
 800582a:	2301      	movne	r3, #1
 800582c:	2300      	moveq	r3, #0
 800582e:	b2db      	uxtb	r3, r3
 8005830:	e00b      	b.n	800584a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	43da      	mvns	r2, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	4013      	ands	r3, r2
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	bf14      	ite	ne
 8005844:	2301      	movne	r3, #1
 8005846:	2300      	moveq	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d18d      	bne.n	800576a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005864:	e02d      	b.n	80058c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 f900 	bl	8005a6c <I2C_IsAcknowledgeFailed>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e02d      	b.n	80058d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587c:	d021      	beq.n	80058c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587e:	f7fd f8cb 	bl	8002a18 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	429a      	cmp	r2, r3
 800588c:	d302      	bcc.n	8005894 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d116      	bne.n	80058c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2220      	movs	r2, #32
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	f043 0220 	orr.w	r2, r3, #32
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e007      	b.n	80058d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058cc:	2b80      	cmp	r3, #128	; 0x80
 80058ce:	d1ca      	bne.n	8005866 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	60f8      	str	r0, [r7, #12]
 80058e2:	60b9      	str	r1, [r7, #8]
 80058e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058e6:	e02d      	b.n	8005944 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 f8bf 	bl	8005a6c <I2C_IsAcknowledgeFailed>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e02d      	b.n	8005954 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fe:	d021      	beq.n	8005944 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005900:	f7fd f88a 	bl	8002a18 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	429a      	cmp	r2, r3
 800590e:	d302      	bcc.n	8005916 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d116      	bne.n	8005944 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	f043 0220 	orr.w	r2, r3, #32
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e007      	b.n	8005954 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b04      	cmp	r3, #4
 8005950:	d1ca      	bne.n	80058e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005968:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	08db      	lsrs	r3, r3, #3
 800596e:	4a13      	ldr	r2, [pc, #76]	; (80059bc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005970:	fba2 2303 	umull	r2, r3, r2, r3
 8005974:	0a1a      	lsrs	r2, r3, #8
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3b01      	subs	r3, #1
 8005982:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d107      	bne.n	800599a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	f043 0220 	orr.w	r2, r3, #32
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e008      	b.n	80059ac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059a8:	d0e9      	beq.n	800597e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	20000000 	.word	0x20000000
 80059bc:	14f8b589 	.word	0x14f8b589

080059c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059cc:	e042      	b.n	8005a54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b10      	cmp	r3, #16
 80059da:	d119      	bne.n	8005a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0210 	mvn.w	r2, #16
 80059e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e029      	b.n	8005a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a10:	f7fd f802 	bl	8002a18 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d302      	bcc.n	8005a26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d116      	bne.n	8005a54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	f043 0220 	orr.w	r2, r3, #32
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e007      	b.n	8005a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5e:	2b40      	cmp	r3, #64	; 0x40
 8005a60:	d1b5      	bne.n	80059ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a82:	d11b      	bne.n	8005abc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	f043 0204 	orr.w	r2, r3, #4
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bc80      	pop	{r7}
 8005ac6:	4770      	bx	lr

08005ac8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005ad8:	d103      	bne.n	8005ae2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005ae0:	e007      	b.n	8005af2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005aea:	d102      	bne.n	8005af2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2208      	movs	r2, #8
 8005af0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr

08005afc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e26c      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 8087 	beq.w	8005c2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b1c:	4b92      	ldr	r3, [pc, #584]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f003 030c 	and.w	r3, r3, #12
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d00c      	beq.n	8005b42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005b28:	4b8f      	ldr	r3, [pc, #572]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f003 030c 	and.w	r3, r3, #12
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d112      	bne.n	8005b5a <HAL_RCC_OscConfig+0x5e>
 8005b34:	4b8c      	ldr	r3, [pc, #560]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b40:	d10b      	bne.n	8005b5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b42:	4b89      	ldr	r3, [pc, #548]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d06c      	beq.n	8005c28 <HAL_RCC_OscConfig+0x12c>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d168      	bne.n	8005c28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e246      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b62:	d106      	bne.n	8005b72 <HAL_RCC_OscConfig+0x76>
 8005b64:	4b80      	ldr	r3, [pc, #512]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a7f      	ldr	r2, [pc, #508]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	e02e      	b.n	8005bd0 <HAL_RCC_OscConfig+0xd4>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10c      	bne.n	8005b94 <HAL_RCC_OscConfig+0x98>
 8005b7a:	4b7b      	ldr	r3, [pc, #492]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a7a      	ldr	r2, [pc, #488]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	4b78      	ldr	r3, [pc, #480]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a77      	ldr	r2, [pc, #476]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005b8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	e01d      	b.n	8005bd0 <HAL_RCC_OscConfig+0xd4>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b9c:	d10c      	bne.n	8005bb8 <HAL_RCC_OscConfig+0xbc>
 8005b9e:	4b72      	ldr	r3, [pc, #456]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a71      	ldr	r2, [pc, #452]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	4b6f      	ldr	r3, [pc, #444]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a6e      	ldr	r2, [pc, #440]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	e00b      	b.n	8005bd0 <HAL_RCC_OscConfig+0xd4>
 8005bb8:	4b6b      	ldr	r3, [pc, #428]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a6a      	ldr	r2, [pc, #424]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	4b68      	ldr	r3, [pc, #416]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a67      	ldr	r2, [pc, #412]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d013      	beq.n	8005c00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd8:	f7fc ff1e 	bl	8002a18 <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005be0:	f7fc ff1a 	bl	8002a18 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b64      	cmp	r3, #100	; 0x64
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e1fa      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bf2:	4b5d      	ldr	r3, [pc, #372]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0f0      	beq.n	8005be0 <HAL_RCC_OscConfig+0xe4>
 8005bfe:	e014      	b.n	8005c2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c00:	f7fc ff0a 	bl	8002a18 <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c08:	f7fc ff06 	bl	8002a18 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b64      	cmp	r3, #100	; 0x64
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e1e6      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c1a:	4b53      	ldr	r3, [pc, #332]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f0      	bne.n	8005c08 <HAL_RCC_OscConfig+0x10c>
 8005c26:	e000      	b.n	8005c2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d063      	beq.n	8005cfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c36:	4b4c      	ldr	r3, [pc, #304]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f003 030c 	and.w	r3, r3, #12
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00b      	beq.n	8005c5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005c42:	4b49      	ldr	r3, [pc, #292]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f003 030c 	and.w	r3, r3, #12
 8005c4a:	2b08      	cmp	r3, #8
 8005c4c:	d11c      	bne.n	8005c88 <HAL_RCC_OscConfig+0x18c>
 8005c4e:	4b46      	ldr	r3, [pc, #280]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d116      	bne.n	8005c88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c5a:	4b43      	ldr	r3, [pc, #268]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d005      	beq.n	8005c72 <HAL_RCC_OscConfig+0x176>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d001      	beq.n	8005c72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e1ba      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c72:	4b3d      	ldr	r3, [pc, #244]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	4939      	ldr	r1, [pc, #228]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c86:	e03a      	b.n	8005cfe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d020      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c90:	4b36      	ldr	r3, [pc, #216]	; (8005d6c <HAL_RCC_OscConfig+0x270>)
 8005c92:	2201      	movs	r2, #1
 8005c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c96:	f7fc febf 	bl	8002a18 <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c9c:	e008      	b.n	8005cb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c9e:	f7fc febb 	bl	8002a18 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d901      	bls.n	8005cb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e19b      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cb0:	4b2d      	ldr	r3, [pc, #180]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0f0      	beq.n	8005c9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cbc:	4b2a      	ldr	r3, [pc, #168]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	4927      	ldr	r1, [pc, #156]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	600b      	str	r3, [r1, #0]
 8005cd0:	e015      	b.n	8005cfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cd2:	4b26      	ldr	r3, [pc, #152]	; (8005d6c <HAL_RCC_OscConfig+0x270>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd8:	f7fc fe9e 	bl	8002a18 <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ce0:	f7fc fe9a 	bl	8002a18 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e17a      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cf2:	4b1d      	ldr	r3, [pc, #116]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f0      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d03a      	beq.n	8005d80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d019      	beq.n	8005d46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d12:	4b17      	ldr	r3, [pc, #92]	; (8005d70 <HAL_RCC_OscConfig+0x274>)
 8005d14:	2201      	movs	r2, #1
 8005d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d18:	f7fc fe7e 	bl	8002a18 <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d1e:	e008      	b.n	8005d32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d20:	f7fc fe7a 	bl	8002a18 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e15a      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d32:	4b0d      	ldr	r3, [pc, #52]	; (8005d68 <HAL_RCC_OscConfig+0x26c>)
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0f0      	beq.n	8005d20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005d3e:	2001      	movs	r0, #1
 8005d40:	f000 fad8 	bl	80062f4 <RCC_Delay>
 8005d44:	e01c      	b.n	8005d80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d46:	4b0a      	ldr	r3, [pc, #40]	; (8005d70 <HAL_RCC_OscConfig+0x274>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d4c:	f7fc fe64 	bl	8002a18 <HAL_GetTick>
 8005d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d52:	e00f      	b.n	8005d74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d54:	f7fc fe60 	bl	8002a18 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d908      	bls.n	8005d74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e140      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4ec>
 8005d66:	bf00      	nop
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	42420000 	.word	0x42420000
 8005d70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d74:	4b9e      	ldr	r3, [pc, #632]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	f003 0302 	and.w	r3, r3, #2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e9      	bne.n	8005d54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 80a6 	beq.w	8005eda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d92:	4b97      	ldr	r3, [pc, #604]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10d      	bne.n	8005dba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d9e:	4b94      	ldr	r3, [pc, #592]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	4a93      	ldr	r2, [pc, #588]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da8:	61d3      	str	r3, [r2, #28]
 8005daa:	4b91      	ldr	r3, [pc, #580]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db2:	60bb      	str	r3, [r7, #8]
 8005db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005db6:	2301      	movs	r3, #1
 8005db8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dba:	4b8e      	ldr	r3, [pc, #568]	; (8005ff4 <HAL_RCC_OscConfig+0x4f8>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d118      	bne.n	8005df8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dc6:	4b8b      	ldr	r3, [pc, #556]	; (8005ff4 <HAL_RCC_OscConfig+0x4f8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a8a      	ldr	r2, [pc, #552]	; (8005ff4 <HAL_RCC_OscConfig+0x4f8>)
 8005dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dd2:	f7fc fe21 	bl	8002a18 <HAL_GetTick>
 8005dd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd8:	e008      	b.n	8005dec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dda:	f7fc fe1d 	bl	8002a18 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b64      	cmp	r3, #100	; 0x64
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e0fd      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dec:	4b81      	ldr	r3, [pc, #516]	; (8005ff4 <HAL_RCC_OscConfig+0x4f8>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0f0      	beq.n	8005dda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d106      	bne.n	8005e0e <HAL_RCC_OscConfig+0x312>
 8005e00:	4b7b      	ldr	r3, [pc, #492]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	4a7a      	ldr	r2, [pc, #488]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005e06:	f043 0301 	orr.w	r3, r3, #1
 8005e0a:	6213      	str	r3, [r2, #32]
 8005e0c:	e02d      	b.n	8005e6a <HAL_RCC_OscConfig+0x36e>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10c      	bne.n	8005e30 <HAL_RCC_OscConfig+0x334>
 8005e16:	4b76      	ldr	r3, [pc, #472]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	4a75      	ldr	r2, [pc, #468]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005e1c:	f023 0301 	bic.w	r3, r3, #1
 8005e20:	6213      	str	r3, [r2, #32]
 8005e22:	4b73      	ldr	r3, [pc, #460]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	4a72      	ldr	r2, [pc, #456]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005e28:	f023 0304 	bic.w	r3, r3, #4
 8005e2c:	6213      	str	r3, [r2, #32]
 8005e2e:	e01c      	b.n	8005e6a <HAL_RCC_OscConfig+0x36e>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	2b05      	cmp	r3, #5
 8005e36:	d10c      	bne.n	8005e52 <HAL_RCC_OscConfig+0x356>
 8005e38:	4b6d      	ldr	r3, [pc, #436]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	4a6c      	ldr	r2, [pc, #432]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005e3e:	f043 0304 	orr.w	r3, r3, #4
 8005e42:	6213      	str	r3, [r2, #32]
 8005e44:	4b6a      	ldr	r3, [pc, #424]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	4a69      	ldr	r2, [pc, #420]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005e4a:	f043 0301 	orr.w	r3, r3, #1
 8005e4e:	6213      	str	r3, [r2, #32]
 8005e50:	e00b      	b.n	8005e6a <HAL_RCC_OscConfig+0x36e>
 8005e52:	4b67      	ldr	r3, [pc, #412]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	4a66      	ldr	r2, [pc, #408]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005e58:	f023 0301 	bic.w	r3, r3, #1
 8005e5c:	6213      	str	r3, [r2, #32]
 8005e5e:	4b64      	ldr	r3, [pc, #400]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	4a63      	ldr	r2, [pc, #396]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005e64:	f023 0304 	bic.w	r3, r3, #4
 8005e68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d015      	beq.n	8005e9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e72:	f7fc fdd1 	bl	8002a18 <HAL_GetTick>
 8005e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e78:	e00a      	b.n	8005e90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e7a:	f7fc fdcd 	bl	8002a18 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d901      	bls.n	8005e90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e0ab      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e90:	4b57      	ldr	r3, [pc, #348]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0ee      	beq.n	8005e7a <HAL_RCC_OscConfig+0x37e>
 8005e9c:	e014      	b.n	8005ec8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e9e:	f7fc fdbb 	bl	8002a18 <HAL_GetTick>
 8005ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea4:	e00a      	b.n	8005ebc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea6:	f7fc fdb7 	bl	8002a18 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d901      	bls.n	8005ebc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e095      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ebc:	4b4c      	ldr	r3, [pc, #304]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1ee      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d105      	bne.n	8005eda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ece:	4b48      	ldr	r3, [pc, #288]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	4a47      	ldr	r2, [pc, #284]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ed8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 8081 	beq.w	8005fe6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ee4:	4b42      	ldr	r3, [pc, #264]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f003 030c 	and.w	r3, r3, #12
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d061      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d146      	bne.n	8005f86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ef8:	4b3f      	ldr	r3, [pc, #252]	; (8005ff8 <HAL_RCC_OscConfig+0x4fc>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005efe:	f7fc fd8b 	bl	8002a18 <HAL_GetTick>
 8005f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f04:	e008      	b.n	8005f18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f06:	f7fc fd87 	bl	8002a18 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e067      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f18:	4b35      	ldr	r3, [pc, #212]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1f0      	bne.n	8005f06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f2c:	d108      	bne.n	8005f40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f2e:	4b30      	ldr	r3, [pc, #192]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	492d      	ldr	r1, [pc, #180]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f40:	4b2b      	ldr	r3, [pc, #172]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a19      	ldr	r1, [r3, #32]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	430b      	orrs	r3, r1
 8005f52:	4927      	ldr	r1, [pc, #156]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f58:	4b27      	ldr	r3, [pc, #156]	; (8005ff8 <HAL_RCC_OscConfig+0x4fc>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f5e:	f7fc fd5b 	bl	8002a18 <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f64:	e008      	b.n	8005f78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f66:	f7fc fd57 	bl	8002a18 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e037      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f78:	4b1d      	ldr	r3, [pc, #116]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f0      	beq.n	8005f66 <HAL_RCC_OscConfig+0x46a>
 8005f84:	e02f      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f86:	4b1c      	ldr	r3, [pc, #112]	; (8005ff8 <HAL_RCC_OscConfig+0x4fc>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f8c:	f7fc fd44 	bl	8002a18 <HAL_GetTick>
 8005f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f94:	f7fc fd40 	bl	8002a18 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e020      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fa6:	4b12      	ldr	r3, [pc, #72]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f0      	bne.n	8005f94 <HAL_RCC_OscConfig+0x498>
 8005fb2:	e018      	b.n	8005fe6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e013      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005fc0:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <HAL_RCC_OscConfig+0x4f4>)
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d106      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d001      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e000      	b.n	8005fe8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	40021000 	.word	0x40021000
 8005ff4:	40007000 	.word	0x40007000
 8005ff8:	42420060 	.word	0x42420060

08005ffc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e0d0      	b.n	80061b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006010:	4b6a      	ldr	r3, [pc, #424]	; (80061bc <HAL_RCC_ClockConfig+0x1c0>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d910      	bls.n	8006040 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601e:	4b67      	ldr	r3, [pc, #412]	; (80061bc <HAL_RCC_ClockConfig+0x1c0>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f023 0207 	bic.w	r2, r3, #7
 8006026:	4965      	ldr	r1, [pc, #404]	; (80061bc <HAL_RCC_ClockConfig+0x1c0>)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	4313      	orrs	r3, r2
 800602c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800602e:	4b63      	ldr	r3, [pc, #396]	; (80061bc <HAL_RCC_ClockConfig+0x1c0>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	429a      	cmp	r2, r3
 800603a:	d001      	beq.n	8006040 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e0b8      	b.n	80061b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d020      	beq.n	800608e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0304 	and.w	r3, r3, #4
 8006054:	2b00      	cmp	r3, #0
 8006056:	d005      	beq.n	8006064 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006058:	4b59      	ldr	r3, [pc, #356]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	4a58      	ldr	r2, [pc, #352]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 800605e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006062:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0308 	and.w	r3, r3, #8
 800606c:	2b00      	cmp	r3, #0
 800606e:	d005      	beq.n	800607c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006070:	4b53      	ldr	r3, [pc, #332]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	4a52      	ldr	r2, [pc, #328]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 8006076:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800607a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800607c:	4b50      	ldr	r3, [pc, #320]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	494d      	ldr	r1, [pc, #308]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 800608a:	4313      	orrs	r3, r2
 800608c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	d040      	beq.n	800611c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d107      	bne.n	80060b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060a2:	4b47      	ldr	r3, [pc, #284]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d115      	bne.n	80060da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e07f      	b.n	80061b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d107      	bne.n	80060ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ba:	4b41      	ldr	r3, [pc, #260]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d109      	bne.n	80060da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e073      	b.n	80061b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ca:	4b3d      	ldr	r3, [pc, #244]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e06b      	b.n	80061b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060da:	4b39      	ldr	r3, [pc, #228]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f023 0203 	bic.w	r2, r3, #3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	4936      	ldr	r1, [pc, #216]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060ec:	f7fc fc94 	bl	8002a18 <HAL_GetTick>
 80060f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060f2:	e00a      	b.n	800610a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060f4:	f7fc fc90 	bl	8002a18 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006102:	4293      	cmp	r3, r2
 8006104:	d901      	bls.n	800610a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e053      	b.n	80061b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800610a:	4b2d      	ldr	r3, [pc, #180]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f003 020c 	and.w	r2, r3, #12
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	429a      	cmp	r2, r3
 800611a:	d1eb      	bne.n	80060f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800611c:	4b27      	ldr	r3, [pc, #156]	; (80061bc <HAL_RCC_ClockConfig+0x1c0>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d210      	bcs.n	800614c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800612a:	4b24      	ldr	r3, [pc, #144]	; (80061bc <HAL_RCC_ClockConfig+0x1c0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f023 0207 	bic.w	r2, r3, #7
 8006132:	4922      	ldr	r1, [pc, #136]	; (80061bc <HAL_RCC_ClockConfig+0x1c0>)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	4313      	orrs	r3, r2
 8006138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800613a:	4b20      	ldr	r3, [pc, #128]	; (80061bc <HAL_RCC_ClockConfig+0x1c0>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d001      	beq.n	800614c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e032      	b.n	80061b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b00      	cmp	r3, #0
 8006156:	d008      	beq.n	800616a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006158:	4b19      	ldr	r3, [pc, #100]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	4916      	ldr	r1, [pc, #88]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 8006166:	4313      	orrs	r3, r2
 8006168:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	2b00      	cmp	r3, #0
 8006174:	d009      	beq.n	800618a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006176:	4b12      	ldr	r3, [pc, #72]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	490e      	ldr	r1, [pc, #56]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 8006186:	4313      	orrs	r3, r2
 8006188:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800618a:	f000 f821 	bl	80061d0 <HAL_RCC_GetSysClockFreq>
 800618e:	4602      	mov	r2, r0
 8006190:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	091b      	lsrs	r3, r3, #4
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	490a      	ldr	r1, [pc, #40]	; (80061c4 <HAL_RCC_ClockConfig+0x1c8>)
 800619c:	5ccb      	ldrb	r3, [r1, r3]
 800619e:	fa22 f303 	lsr.w	r3, r2, r3
 80061a2:	4a09      	ldr	r2, [pc, #36]	; (80061c8 <HAL_RCC_ClockConfig+0x1cc>)
 80061a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80061a6:	4b09      	ldr	r3, [pc, #36]	; (80061cc <HAL_RCC_ClockConfig+0x1d0>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fc fbf2 	bl	8002994 <HAL_InitTick>

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40022000 	.word	0x40022000
 80061c0:	40021000 	.word	0x40021000
 80061c4:	0800c314 	.word	0x0800c314
 80061c8:	20000000 	.word	0x20000000
 80061cc:	20000004 	.word	0x20000004

080061d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061d0:	b490      	push	{r4, r7}
 80061d2:	b08a      	sub	sp, #40	; 0x28
 80061d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80061d6:	4b2a      	ldr	r3, [pc, #168]	; (8006280 <HAL_RCC_GetSysClockFreq+0xb0>)
 80061d8:	1d3c      	adds	r4, r7, #4
 80061da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80061dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80061e0:	f240 2301 	movw	r3, #513	; 0x201
 80061e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	61fb      	str	r3, [r7, #28]
 80061ea:	2300      	movs	r3, #0
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	2300      	movs	r3, #0
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
 80061f2:	2300      	movs	r3, #0
 80061f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80061fa:	4b22      	ldr	r3, [pc, #136]	; (8006284 <HAL_RCC_GetSysClockFreq+0xb4>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	f003 030c 	and.w	r3, r3, #12
 8006206:	2b04      	cmp	r3, #4
 8006208:	d002      	beq.n	8006210 <HAL_RCC_GetSysClockFreq+0x40>
 800620a:	2b08      	cmp	r3, #8
 800620c:	d003      	beq.n	8006216 <HAL_RCC_GetSysClockFreq+0x46>
 800620e:	e02d      	b.n	800626c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006210:	4b1d      	ldr	r3, [pc, #116]	; (8006288 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006212:	623b      	str	r3, [r7, #32]
      break;
 8006214:	e02d      	b.n	8006272 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	0c9b      	lsrs	r3, r3, #18
 800621a:	f003 030f 	and.w	r3, r3, #15
 800621e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006222:	4413      	add	r3, r2
 8006224:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006228:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d013      	beq.n	800625c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006234:	4b13      	ldr	r3, [pc, #76]	; (8006284 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	0c5b      	lsrs	r3, r3, #17
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006242:	4413      	add	r3, r2
 8006244:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006248:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	4a0e      	ldr	r2, [pc, #56]	; (8006288 <HAL_RCC_GetSysClockFreq+0xb8>)
 800624e:	fb02 f203 	mul.w	r2, r2, r3
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	fbb2 f3f3 	udiv	r3, r2, r3
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
 800625a:	e004      	b.n	8006266 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	4a0b      	ldr	r2, [pc, #44]	; (800628c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006260:	fb02 f303 	mul.w	r3, r2, r3
 8006264:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	623b      	str	r3, [r7, #32]
      break;
 800626a:	e002      	b.n	8006272 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800626c:	4b06      	ldr	r3, [pc, #24]	; (8006288 <HAL_RCC_GetSysClockFreq+0xb8>)
 800626e:	623b      	str	r3, [r7, #32]
      break;
 8006270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006272:	6a3b      	ldr	r3, [r7, #32]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3728      	adds	r7, #40	; 0x28
 8006278:	46bd      	mov	sp, r7
 800627a:	bc90      	pop	{r4, r7}
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	0800c304 	.word	0x0800c304
 8006284:	40021000 	.word	0x40021000
 8006288:	007a1200 	.word	0x007a1200
 800628c:	003d0900 	.word	0x003d0900

08006290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006290:	b480      	push	{r7}
 8006292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006294:	4b02      	ldr	r3, [pc, #8]	; (80062a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006296:	681b      	ldr	r3, [r3, #0]
}
 8006298:	4618      	mov	r0, r3
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr
 80062a0:	20000000 	.word	0x20000000

080062a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80062a8:	f7ff fff2 	bl	8006290 <HAL_RCC_GetHCLKFreq>
 80062ac:	4602      	mov	r2, r0
 80062ae:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	0a1b      	lsrs	r3, r3, #8
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	4903      	ldr	r1, [pc, #12]	; (80062c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062ba:	5ccb      	ldrb	r3, [r1, r3]
 80062bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	40021000 	.word	0x40021000
 80062c8:	0800c324 	.word	0x0800c324

080062cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80062d0:	f7ff ffde 	bl	8006290 <HAL_RCC_GetHCLKFreq>
 80062d4:	4602      	mov	r2, r0
 80062d6:	4b05      	ldr	r3, [pc, #20]	; (80062ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	0adb      	lsrs	r3, r3, #11
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	4903      	ldr	r1, [pc, #12]	; (80062f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062e2:	5ccb      	ldrb	r3, [r1, r3]
 80062e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40021000 	.word	0x40021000
 80062f0:	0800c324 	.word	0x0800c324

080062f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80062fc:	4b0a      	ldr	r3, [pc, #40]	; (8006328 <RCC_Delay+0x34>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a0a      	ldr	r2, [pc, #40]	; (800632c <RCC_Delay+0x38>)
 8006302:	fba2 2303 	umull	r2, r3, r2, r3
 8006306:	0a5b      	lsrs	r3, r3, #9
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	fb02 f303 	mul.w	r3, r2, r3
 800630e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006310:	bf00      	nop
  }
  while (Delay --);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	1e5a      	subs	r2, r3, #1
 8006316:	60fa      	str	r2, [r7, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1f9      	bne.n	8006310 <RCC_Delay+0x1c>
}
 800631c:	bf00      	nop
 800631e:	bf00      	nop
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	bc80      	pop	{r7}
 8006326:	4770      	bx	lr
 8006328:	20000000 	.word	0x20000000
 800632c:	10624dd3 	.word	0x10624dd3

08006330 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e03f      	b.n	80063c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fc fa8c 	bl	8002874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2224      	movs	r2, #36	; 0x24
 8006360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68da      	ldr	r2, [r3, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006372:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 faa7 	bl	80068c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	691a      	ldr	r2, [r3, #16]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006388:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695a      	ldr	r2, [r3, #20]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006398:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b085      	sub	sp, #20
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	4613      	mov	r3, r2
 80063d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	d140      	bne.n	8006466 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <HAL_UART_Receive_IT+0x26>
 80063ea:	88fb      	ldrh	r3, [r7, #6]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e039      	b.n	8006468 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_UART_Receive_IT+0x38>
 80063fe:	2302      	movs	r3, #2
 8006400:	e032      	b.n	8006468 <HAL_UART_Receive_IT+0x9e>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	88fa      	ldrh	r2, [r7, #6]
 8006414:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	88fa      	ldrh	r2, [r7, #6]
 800641a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2222      	movs	r2, #34	; 0x22
 8006426:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006440:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	695a      	ldr	r2, [r3, #20]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f042 0201 	orr.w	r2, r2, #1
 8006450:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f042 0220 	orr.w	r2, r2, #32
 8006460:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e000      	b.n	8006468 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006466:	2302      	movs	r3, #2
  }
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	bc80      	pop	{r7}
 8006470:	4770      	bx	lr
	...

08006474 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b088      	sub	sp, #32
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006494:	2300      	movs	r3, #0
 8006496:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10d      	bne.n	80064c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	f003 0320 	and.w	r3, r3, #32
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d008      	beq.n	80064c6 <HAL_UART_IRQHandler+0x52>
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f982 	bl	80067c8 <UART_Receive_IT>
      return;
 80064c4:	e0d0      	b.n	8006668 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 80b0 	beq.w	800662e <HAL_UART_IRQHandler+0x1ba>
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d105      	bne.n	80064e4 <HAL_UART_IRQHandler+0x70>
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 80a5 	beq.w	800662e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <HAL_UART_IRQHandler+0x90>
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d005      	beq.n	8006504 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fc:	f043 0201 	orr.w	r2, r3, #1
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	f003 0304 	and.w	r3, r3, #4
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <HAL_UART_IRQHandler+0xb0>
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d005      	beq.n	8006524 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651c:	f043 0202 	orr.w	r2, r3, #2
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <HAL_UART_IRQHandler+0xd0>
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d005      	beq.n	8006544 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653c:	f043 0204 	orr.w	r2, r3, #4
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00f      	beq.n	800656e <HAL_UART_IRQHandler+0xfa>
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	f003 0320 	and.w	r3, r3, #32
 8006554:	2b00      	cmp	r3, #0
 8006556:	d104      	bne.n	8006562 <HAL_UART_IRQHandler+0xee>
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006566:	f043 0208 	orr.w	r2, r3, #8
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006572:	2b00      	cmp	r3, #0
 8006574:	d077      	beq.n	8006666 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	f003 0320 	and.w	r3, r3, #32
 800657c:	2b00      	cmp	r3, #0
 800657e:	d007      	beq.n	8006590 <HAL_UART_IRQHandler+0x11c>
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	f003 0320 	and.w	r3, r3, #32
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f91c 	bl	80067c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659a:	2b00      	cmp	r3, #0
 800659c:	bf14      	ite	ne
 800659e:	2301      	movne	r3, #1
 80065a0:	2300      	moveq	r3, #0
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065aa:	f003 0308 	and.w	r3, r3, #8
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d102      	bne.n	80065b8 <HAL_UART_IRQHandler+0x144>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d031      	beq.n	800661c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f86d 	bl	8006698 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d023      	beq.n	8006614 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695a      	ldr	r2, [r3, #20]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065da:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d013      	beq.n	800660c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e8:	4a21      	ldr	r2, [pc, #132]	; (8006670 <HAL_UART_IRQHandler+0x1fc>)
 80065ea:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fc fb4d 	bl	8002c90 <HAL_DMA_Abort_IT>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d016      	beq.n	800662a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006606:	4610      	mov	r0, r2
 8006608:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660a:	e00e      	b.n	800662a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f83a 	bl	8006686 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006612:	e00a      	b.n	800662a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f836 	bl	8006686 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800661a:	e006      	b.n	800662a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f832 	bl	8006686 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006628:	e01d      	b.n	8006666 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662a:	bf00      	nop
    return;
 800662c:	e01b      	b.n	8006666 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006634:	2b00      	cmp	r3, #0
 8006636:	d008      	beq.n	800664a <HAL_UART_IRQHandler+0x1d6>
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f859 	bl	80066fa <UART_Transmit_IT>
    return;
 8006648:	e00e      	b.n	8006668 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006650:	2b00      	cmp	r3, #0
 8006652:	d009      	beq.n	8006668 <HAL_UART_IRQHandler+0x1f4>
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665a:	2b00      	cmp	r3, #0
 800665c:	d004      	beq.n	8006668 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f89a 	bl	8006798 <UART_EndTransmit_IT>
    return;
 8006664:	e000      	b.n	8006668 <HAL_UART_IRQHandler+0x1f4>
    return;
 8006666:	bf00      	nop
  }
}
 8006668:	3720      	adds	r7, #32
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	080066d3 	.word	0x080066d3

08006674 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	bc80      	pop	{r7}
 8006684:	4770      	bx	lr

08006686 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr

08006698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68da      	ldr	r2, [r3, #12]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	695a      	ldr	r2, [r3, #20]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0201 	bic.w	r2, r2, #1
 80066be:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc80      	pop	{r7}
 80066d0:	4770      	bx	lr

080066d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7ff ffca 	bl	8006686 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066f2:	bf00      	nop
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b085      	sub	sp, #20
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b21      	cmp	r3, #33	; 0x21
 800670c:	d13e      	bne.n	800678c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006716:	d114      	bne.n	8006742 <UART_Transmit_IT+0x48>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d110      	bne.n	8006742 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006734:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	1c9a      	adds	r2, r3, #2
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	621a      	str	r2, [r3, #32]
 8006740:	e008      	b.n	8006754 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	1c59      	adds	r1, r3, #1
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	6211      	str	r1, [r2, #32]
 800674c:	781a      	ldrb	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006758:	b29b      	uxth	r3, r3
 800675a:	3b01      	subs	r3, #1
 800675c:	b29b      	uxth	r3, r3
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	4619      	mov	r1, r3
 8006762:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10f      	bne.n	8006788 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68da      	ldr	r2, [r3, #12]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006776:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006786:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	e000      	b.n	800678e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800678c:	2302      	movs	r3, #2
  }
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr

08006798 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7ff ff5b 	bl	8006674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b22      	cmp	r3, #34	; 0x22
 80067da:	d170      	bne.n	80068be <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e4:	d117      	bne.n	8006816 <UART_Receive_IT+0x4e>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d113      	bne.n	8006816 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006804:	b29a      	uxth	r2, r3
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680e:	1c9a      	adds	r2, r3, #2
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	629a      	str	r2, [r3, #40]	; 0x28
 8006814:	e026      	b.n	8006864 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800681c:	2300      	movs	r3, #0
 800681e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006828:	d007      	beq.n	800683a <UART_Receive_IT+0x72>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10a      	bne.n	8006848 <UART_Receive_IT+0x80>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d106      	bne.n	8006848 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	b2da      	uxtb	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	e008      	b.n	800685a <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006854:	b2da      	uxtb	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006868:	b29b      	uxth	r3, r3
 800686a:	3b01      	subs	r3, #1
 800686c:	b29b      	uxth	r3, r3
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	4619      	mov	r1, r3
 8006872:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006874:	2b00      	cmp	r3, #0
 8006876:	d120      	bne.n	80068ba <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0220 	bic.w	r2, r2, #32
 8006886:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68da      	ldr	r2, [r3, #12]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006896:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	695a      	ldr	r2, [r3, #20]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0201 	bic.w	r2, r2, #1
 80068a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7fb fd9f 	bl	80023f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	e002      	b.n	80068c0 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	e000      	b.n	80068c0 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80068be:	2302      	movs	r3, #2
  }
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006902:	f023 030c 	bic.w	r3, r3, #12
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	6812      	ldr	r2, [r2, #0]
 800690a:	68b9      	ldr	r1, [r7, #8]
 800690c:	430b      	orrs	r3, r1
 800690e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	699a      	ldr	r2, [r3, #24]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a2c      	ldr	r2, [pc, #176]	; (80069dc <UART_SetConfig+0x114>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d103      	bne.n	8006938 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006930:	f7ff fccc 	bl	80062cc <HAL_RCC_GetPCLK2Freq>
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	e002      	b.n	800693e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006938:	f7ff fcb4 	bl	80062a4 <HAL_RCC_GetPCLK1Freq>
 800693c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	009a      	lsls	r2, r3, #2
 8006948:	441a      	add	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	fbb2 f3f3 	udiv	r3, r2, r3
 8006954:	4a22      	ldr	r2, [pc, #136]	; (80069e0 <UART_SetConfig+0x118>)
 8006956:	fba2 2303 	umull	r2, r3, r2, r3
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	0119      	lsls	r1, r3, #4
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	4613      	mov	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	009a      	lsls	r2, r3, #2
 8006968:	441a      	add	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	fbb2 f2f3 	udiv	r2, r2, r3
 8006974:	4b1a      	ldr	r3, [pc, #104]	; (80069e0 <UART_SetConfig+0x118>)
 8006976:	fba3 0302 	umull	r0, r3, r3, r2
 800697a:	095b      	lsrs	r3, r3, #5
 800697c:	2064      	movs	r0, #100	; 0x64
 800697e:	fb00 f303 	mul.w	r3, r0, r3
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	3332      	adds	r3, #50	; 0x32
 8006988:	4a15      	ldr	r2, [pc, #84]	; (80069e0 <UART_SetConfig+0x118>)
 800698a:	fba2 2303 	umull	r2, r3, r2, r3
 800698e:	095b      	lsrs	r3, r3, #5
 8006990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006994:	4419      	add	r1, r3
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4613      	mov	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	009a      	lsls	r2, r3, #2
 80069a0:	441a      	add	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80069ac:	4b0c      	ldr	r3, [pc, #48]	; (80069e0 <UART_SetConfig+0x118>)
 80069ae:	fba3 0302 	umull	r0, r3, r3, r2
 80069b2:	095b      	lsrs	r3, r3, #5
 80069b4:	2064      	movs	r0, #100	; 0x64
 80069b6:	fb00 f303 	mul.w	r3, r0, r3
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	3332      	adds	r3, #50	; 0x32
 80069c0:	4a07      	ldr	r2, [pc, #28]	; (80069e0 <UART_SetConfig+0x118>)
 80069c2:	fba2 2303 	umull	r2, r3, r2, r3
 80069c6:	095b      	lsrs	r3, r3, #5
 80069c8:	f003 020f 	and.w	r2, r3, #15
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	440a      	add	r2, r1
 80069d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80069d4:	bf00      	nop
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	40013800 	.word	0x40013800
 80069e0:	51eb851f 	.word	0x51eb851f

080069e4 <atof>:
 80069e4:	2100      	movs	r1, #0
 80069e6:	f001 b8ad 	b.w	8007b44 <strtod>

080069ea <atoi>:
 80069ea:	220a      	movs	r2, #10
 80069ec:	2100      	movs	r1, #0
 80069ee:	f001 b93d 	b.w	8007c6c <strtol>
	...

080069f4 <__errno>:
 80069f4:	4b01      	ldr	r3, [pc, #4]	; (80069fc <__errno+0x8>)
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	2000000c 	.word	0x2000000c

08006a00 <__libc_init_array>:
 8006a00:	b570      	push	{r4, r5, r6, lr}
 8006a02:	2600      	movs	r6, #0
 8006a04:	4d0c      	ldr	r5, [pc, #48]	; (8006a38 <__libc_init_array+0x38>)
 8006a06:	4c0d      	ldr	r4, [pc, #52]	; (8006a3c <__libc_init_array+0x3c>)
 8006a08:	1b64      	subs	r4, r4, r5
 8006a0a:	10a4      	asrs	r4, r4, #2
 8006a0c:	42a6      	cmp	r6, r4
 8006a0e:	d109      	bne.n	8006a24 <__libc_init_array+0x24>
 8006a10:	f005 fc60 	bl	800c2d4 <_init>
 8006a14:	2600      	movs	r6, #0
 8006a16:	4d0a      	ldr	r5, [pc, #40]	; (8006a40 <__libc_init_array+0x40>)
 8006a18:	4c0a      	ldr	r4, [pc, #40]	; (8006a44 <__libc_init_array+0x44>)
 8006a1a:	1b64      	subs	r4, r4, r5
 8006a1c:	10a4      	asrs	r4, r4, #2
 8006a1e:	42a6      	cmp	r6, r4
 8006a20:	d105      	bne.n	8006a2e <__libc_init_array+0x2e>
 8006a22:	bd70      	pop	{r4, r5, r6, pc}
 8006a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a28:	4798      	blx	r3
 8006a2a:	3601      	adds	r6, #1
 8006a2c:	e7ee      	b.n	8006a0c <__libc_init_array+0xc>
 8006a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a32:	4798      	blx	r3
 8006a34:	3601      	adds	r6, #1
 8006a36:	e7f2      	b.n	8006a1e <__libc_init_array+0x1e>
 8006a38:	0800c988 	.word	0x0800c988
 8006a3c:	0800c988 	.word	0x0800c988
 8006a40:	0800c988 	.word	0x0800c988
 8006a44:	0800c98c 	.word	0x0800c98c

08006a48 <memcpy>:
 8006a48:	440a      	add	r2, r1
 8006a4a:	4291      	cmp	r1, r2
 8006a4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a50:	d100      	bne.n	8006a54 <memcpy+0xc>
 8006a52:	4770      	bx	lr
 8006a54:	b510      	push	{r4, lr}
 8006a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a5a:	4291      	cmp	r1, r2
 8006a5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a60:	d1f9      	bne.n	8006a56 <memcpy+0xe>
 8006a62:	bd10      	pop	{r4, pc}

08006a64 <memset>:
 8006a64:	4603      	mov	r3, r0
 8006a66:	4402      	add	r2, r0
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d100      	bne.n	8006a6e <memset+0xa>
 8006a6c:	4770      	bx	lr
 8006a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a72:	e7f9      	b.n	8006a68 <memset+0x4>

08006a74 <_scanf_float>:
 8006a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a78:	b087      	sub	sp, #28
 8006a7a:	9303      	str	r3, [sp, #12]
 8006a7c:	688b      	ldr	r3, [r1, #8]
 8006a7e:	4617      	mov	r7, r2
 8006a80:	1e5a      	subs	r2, r3, #1
 8006a82:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006a86:	bf85      	ittet	hi
 8006a88:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006a8c:	195b      	addhi	r3, r3, r5
 8006a8e:	2300      	movls	r3, #0
 8006a90:	9302      	strhi	r3, [sp, #8]
 8006a92:	bf88      	it	hi
 8006a94:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006a98:	468b      	mov	fp, r1
 8006a9a:	f04f 0500 	mov.w	r5, #0
 8006a9e:	bf8c      	ite	hi
 8006aa0:	608b      	strhi	r3, [r1, #8]
 8006aa2:	9302      	strls	r3, [sp, #8]
 8006aa4:	680b      	ldr	r3, [r1, #0]
 8006aa6:	4680      	mov	r8, r0
 8006aa8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006aac:	f84b 3b1c 	str.w	r3, [fp], #28
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	465e      	mov	r6, fp
 8006ab4:	46aa      	mov	sl, r5
 8006ab6:	46a9      	mov	r9, r5
 8006ab8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006abc:	9501      	str	r5, [sp, #4]
 8006abe:	68a2      	ldr	r2, [r4, #8]
 8006ac0:	b152      	cbz	r2, 8006ad8 <_scanf_float+0x64>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b4e      	cmp	r3, #78	; 0x4e
 8006ac8:	d864      	bhi.n	8006b94 <_scanf_float+0x120>
 8006aca:	2b40      	cmp	r3, #64	; 0x40
 8006acc:	d83c      	bhi.n	8006b48 <_scanf_float+0xd4>
 8006ace:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006ad2:	b2c8      	uxtb	r0, r1
 8006ad4:	280e      	cmp	r0, #14
 8006ad6:	d93a      	bls.n	8006b4e <_scanf_float+0xda>
 8006ad8:	f1b9 0f00 	cmp.w	r9, #0
 8006adc:	d003      	beq.n	8006ae6 <_scanf_float+0x72>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aea:	f1ba 0f01 	cmp.w	sl, #1
 8006aee:	f200 8113 	bhi.w	8006d18 <_scanf_float+0x2a4>
 8006af2:	455e      	cmp	r6, fp
 8006af4:	f200 8105 	bhi.w	8006d02 <_scanf_float+0x28e>
 8006af8:	2501      	movs	r5, #1
 8006afa:	4628      	mov	r0, r5
 8006afc:	b007      	add	sp, #28
 8006afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b02:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b06:	2a0d      	cmp	r2, #13
 8006b08:	d8e6      	bhi.n	8006ad8 <_scanf_float+0x64>
 8006b0a:	a101      	add	r1, pc, #4	; (adr r1, 8006b10 <_scanf_float+0x9c>)
 8006b0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b10:	08006c4f 	.word	0x08006c4f
 8006b14:	08006ad9 	.word	0x08006ad9
 8006b18:	08006ad9 	.word	0x08006ad9
 8006b1c:	08006ad9 	.word	0x08006ad9
 8006b20:	08006caf 	.word	0x08006caf
 8006b24:	08006c87 	.word	0x08006c87
 8006b28:	08006ad9 	.word	0x08006ad9
 8006b2c:	08006ad9 	.word	0x08006ad9
 8006b30:	08006c5d 	.word	0x08006c5d
 8006b34:	08006ad9 	.word	0x08006ad9
 8006b38:	08006ad9 	.word	0x08006ad9
 8006b3c:	08006ad9 	.word	0x08006ad9
 8006b40:	08006ad9 	.word	0x08006ad9
 8006b44:	08006c15 	.word	0x08006c15
 8006b48:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006b4c:	e7db      	b.n	8006b06 <_scanf_float+0x92>
 8006b4e:	290e      	cmp	r1, #14
 8006b50:	d8c2      	bhi.n	8006ad8 <_scanf_float+0x64>
 8006b52:	a001      	add	r0, pc, #4	; (adr r0, 8006b58 <_scanf_float+0xe4>)
 8006b54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b58:	08006c07 	.word	0x08006c07
 8006b5c:	08006ad9 	.word	0x08006ad9
 8006b60:	08006c07 	.word	0x08006c07
 8006b64:	08006c9b 	.word	0x08006c9b
 8006b68:	08006ad9 	.word	0x08006ad9
 8006b6c:	08006bb5 	.word	0x08006bb5
 8006b70:	08006bf1 	.word	0x08006bf1
 8006b74:	08006bf1 	.word	0x08006bf1
 8006b78:	08006bf1 	.word	0x08006bf1
 8006b7c:	08006bf1 	.word	0x08006bf1
 8006b80:	08006bf1 	.word	0x08006bf1
 8006b84:	08006bf1 	.word	0x08006bf1
 8006b88:	08006bf1 	.word	0x08006bf1
 8006b8c:	08006bf1 	.word	0x08006bf1
 8006b90:	08006bf1 	.word	0x08006bf1
 8006b94:	2b6e      	cmp	r3, #110	; 0x6e
 8006b96:	d809      	bhi.n	8006bac <_scanf_float+0x138>
 8006b98:	2b60      	cmp	r3, #96	; 0x60
 8006b9a:	d8b2      	bhi.n	8006b02 <_scanf_float+0x8e>
 8006b9c:	2b54      	cmp	r3, #84	; 0x54
 8006b9e:	d077      	beq.n	8006c90 <_scanf_float+0x21c>
 8006ba0:	2b59      	cmp	r3, #89	; 0x59
 8006ba2:	d199      	bne.n	8006ad8 <_scanf_float+0x64>
 8006ba4:	2d07      	cmp	r5, #7
 8006ba6:	d197      	bne.n	8006ad8 <_scanf_float+0x64>
 8006ba8:	2508      	movs	r5, #8
 8006baa:	e029      	b.n	8006c00 <_scanf_float+0x18c>
 8006bac:	2b74      	cmp	r3, #116	; 0x74
 8006bae:	d06f      	beq.n	8006c90 <_scanf_float+0x21c>
 8006bb0:	2b79      	cmp	r3, #121	; 0x79
 8006bb2:	e7f6      	b.n	8006ba2 <_scanf_float+0x12e>
 8006bb4:	6821      	ldr	r1, [r4, #0]
 8006bb6:	05c8      	lsls	r0, r1, #23
 8006bb8:	d51a      	bpl.n	8006bf0 <_scanf_float+0x17c>
 8006bba:	9b02      	ldr	r3, [sp, #8]
 8006bbc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006bc0:	6021      	str	r1, [r4, #0]
 8006bc2:	f109 0901 	add.w	r9, r9, #1
 8006bc6:	b11b      	cbz	r3, 8006bd0 <_scanf_float+0x15c>
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	3201      	adds	r2, #1
 8006bcc:	9302      	str	r3, [sp, #8]
 8006bce:	60a2      	str	r2, [r4, #8]
 8006bd0:	68a3      	ldr	r3, [r4, #8]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	60a3      	str	r3, [r4, #8]
 8006bd6:	6923      	ldr	r3, [r4, #16]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	6123      	str	r3, [r4, #16]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	607b      	str	r3, [r7, #4]
 8006be4:	f340 8084 	ble.w	8006cf0 <_scanf_float+0x27c>
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	3301      	adds	r3, #1
 8006bec:	603b      	str	r3, [r7, #0]
 8006bee:	e766      	b.n	8006abe <_scanf_float+0x4a>
 8006bf0:	eb1a 0f05 	cmn.w	sl, r5
 8006bf4:	f47f af70 	bne.w	8006ad8 <_scanf_float+0x64>
 8006bf8:	6822      	ldr	r2, [r4, #0]
 8006bfa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006bfe:	6022      	str	r2, [r4, #0]
 8006c00:	f806 3b01 	strb.w	r3, [r6], #1
 8006c04:	e7e4      	b.n	8006bd0 <_scanf_float+0x15c>
 8006c06:	6822      	ldr	r2, [r4, #0]
 8006c08:	0610      	lsls	r0, r2, #24
 8006c0a:	f57f af65 	bpl.w	8006ad8 <_scanf_float+0x64>
 8006c0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c12:	e7f4      	b.n	8006bfe <_scanf_float+0x18a>
 8006c14:	f1ba 0f00 	cmp.w	sl, #0
 8006c18:	d10e      	bne.n	8006c38 <_scanf_float+0x1c4>
 8006c1a:	f1b9 0f00 	cmp.w	r9, #0
 8006c1e:	d10e      	bne.n	8006c3e <_scanf_float+0x1ca>
 8006c20:	6822      	ldr	r2, [r4, #0]
 8006c22:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c26:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c2a:	d108      	bne.n	8006c3e <_scanf_float+0x1ca>
 8006c2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c30:	f04f 0a01 	mov.w	sl, #1
 8006c34:	6022      	str	r2, [r4, #0]
 8006c36:	e7e3      	b.n	8006c00 <_scanf_float+0x18c>
 8006c38:	f1ba 0f02 	cmp.w	sl, #2
 8006c3c:	d055      	beq.n	8006cea <_scanf_float+0x276>
 8006c3e:	2d01      	cmp	r5, #1
 8006c40:	d002      	beq.n	8006c48 <_scanf_float+0x1d4>
 8006c42:	2d04      	cmp	r5, #4
 8006c44:	f47f af48 	bne.w	8006ad8 <_scanf_float+0x64>
 8006c48:	3501      	adds	r5, #1
 8006c4a:	b2ed      	uxtb	r5, r5
 8006c4c:	e7d8      	b.n	8006c00 <_scanf_float+0x18c>
 8006c4e:	f1ba 0f01 	cmp.w	sl, #1
 8006c52:	f47f af41 	bne.w	8006ad8 <_scanf_float+0x64>
 8006c56:	f04f 0a02 	mov.w	sl, #2
 8006c5a:	e7d1      	b.n	8006c00 <_scanf_float+0x18c>
 8006c5c:	b97d      	cbnz	r5, 8006c7e <_scanf_float+0x20a>
 8006c5e:	f1b9 0f00 	cmp.w	r9, #0
 8006c62:	f47f af3c 	bne.w	8006ade <_scanf_float+0x6a>
 8006c66:	6822      	ldr	r2, [r4, #0]
 8006c68:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c6c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c70:	f47f af39 	bne.w	8006ae6 <_scanf_float+0x72>
 8006c74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c78:	2501      	movs	r5, #1
 8006c7a:	6022      	str	r2, [r4, #0]
 8006c7c:	e7c0      	b.n	8006c00 <_scanf_float+0x18c>
 8006c7e:	2d03      	cmp	r5, #3
 8006c80:	d0e2      	beq.n	8006c48 <_scanf_float+0x1d4>
 8006c82:	2d05      	cmp	r5, #5
 8006c84:	e7de      	b.n	8006c44 <_scanf_float+0x1d0>
 8006c86:	2d02      	cmp	r5, #2
 8006c88:	f47f af26 	bne.w	8006ad8 <_scanf_float+0x64>
 8006c8c:	2503      	movs	r5, #3
 8006c8e:	e7b7      	b.n	8006c00 <_scanf_float+0x18c>
 8006c90:	2d06      	cmp	r5, #6
 8006c92:	f47f af21 	bne.w	8006ad8 <_scanf_float+0x64>
 8006c96:	2507      	movs	r5, #7
 8006c98:	e7b2      	b.n	8006c00 <_scanf_float+0x18c>
 8006c9a:	6822      	ldr	r2, [r4, #0]
 8006c9c:	0591      	lsls	r1, r2, #22
 8006c9e:	f57f af1b 	bpl.w	8006ad8 <_scanf_float+0x64>
 8006ca2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006ca6:	6022      	str	r2, [r4, #0]
 8006ca8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006cac:	e7a8      	b.n	8006c00 <_scanf_float+0x18c>
 8006cae:	6822      	ldr	r2, [r4, #0]
 8006cb0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006cb4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006cb8:	d006      	beq.n	8006cc8 <_scanf_float+0x254>
 8006cba:	0550      	lsls	r0, r2, #21
 8006cbc:	f57f af0c 	bpl.w	8006ad8 <_scanf_float+0x64>
 8006cc0:	f1b9 0f00 	cmp.w	r9, #0
 8006cc4:	f43f af0f 	beq.w	8006ae6 <_scanf_float+0x72>
 8006cc8:	0591      	lsls	r1, r2, #22
 8006cca:	bf58      	it	pl
 8006ccc:	9901      	ldrpl	r1, [sp, #4]
 8006cce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006cd2:	bf58      	it	pl
 8006cd4:	eba9 0101 	subpl.w	r1, r9, r1
 8006cd8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006cdc:	f04f 0900 	mov.w	r9, #0
 8006ce0:	bf58      	it	pl
 8006ce2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006ce6:	6022      	str	r2, [r4, #0]
 8006ce8:	e78a      	b.n	8006c00 <_scanf_float+0x18c>
 8006cea:	f04f 0a03 	mov.w	sl, #3
 8006cee:	e787      	b.n	8006c00 <_scanf_float+0x18c>
 8006cf0:	4639      	mov	r1, r7
 8006cf2:	4640      	mov	r0, r8
 8006cf4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006cf8:	4798      	blx	r3
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	f43f aedf 	beq.w	8006abe <_scanf_float+0x4a>
 8006d00:	e6ea      	b.n	8006ad8 <_scanf_float+0x64>
 8006d02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d06:	463a      	mov	r2, r7
 8006d08:	4640      	mov	r0, r8
 8006d0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d0e:	4798      	blx	r3
 8006d10:	6923      	ldr	r3, [r4, #16]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	6123      	str	r3, [r4, #16]
 8006d16:	e6ec      	b.n	8006af2 <_scanf_float+0x7e>
 8006d18:	1e6b      	subs	r3, r5, #1
 8006d1a:	2b06      	cmp	r3, #6
 8006d1c:	d825      	bhi.n	8006d6a <_scanf_float+0x2f6>
 8006d1e:	2d02      	cmp	r5, #2
 8006d20:	d836      	bhi.n	8006d90 <_scanf_float+0x31c>
 8006d22:	455e      	cmp	r6, fp
 8006d24:	f67f aee8 	bls.w	8006af8 <_scanf_float+0x84>
 8006d28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d2c:	463a      	mov	r2, r7
 8006d2e:	4640      	mov	r0, r8
 8006d30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d34:	4798      	blx	r3
 8006d36:	6923      	ldr	r3, [r4, #16]
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	6123      	str	r3, [r4, #16]
 8006d3c:	e7f1      	b.n	8006d22 <_scanf_float+0x2ae>
 8006d3e:	9802      	ldr	r0, [sp, #8]
 8006d40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d44:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006d48:	463a      	mov	r2, r7
 8006d4a:	9002      	str	r0, [sp, #8]
 8006d4c:	4640      	mov	r0, r8
 8006d4e:	4798      	blx	r3
 8006d50:	6923      	ldr	r3, [r4, #16]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	6123      	str	r3, [r4, #16]
 8006d56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d5a:	fa5f fa8a 	uxtb.w	sl, sl
 8006d5e:	f1ba 0f02 	cmp.w	sl, #2
 8006d62:	d1ec      	bne.n	8006d3e <_scanf_float+0x2ca>
 8006d64:	3d03      	subs	r5, #3
 8006d66:	b2ed      	uxtb	r5, r5
 8006d68:	1b76      	subs	r6, r6, r5
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	05da      	lsls	r2, r3, #23
 8006d6e:	d52f      	bpl.n	8006dd0 <_scanf_float+0x35c>
 8006d70:	055b      	lsls	r3, r3, #21
 8006d72:	d510      	bpl.n	8006d96 <_scanf_float+0x322>
 8006d74:	455e      	cmp	r6, fp
 8006d76:	f67f aebf 	bls.w	8006af8 <_scanf_float+0x84>
 8006d7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d7e:	463a      	mov	r2, r7
 8006d80:	4640      	mov	r0, r8
 8006d82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d86:	4798      	blx	r3
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	6123      	str	r3, [r4, #16]
 8006d8e:	e7f1      	b.n	8006d74 <_scanf_float+0x300>
 8006d90:	46aa      	mov	sl, r5
 8006d92:	9602      	str	r6, [sp, #8]
 8006d94:	e7df      	b.n	8006d56 <_scanf_float+0x2e2>
 8006d96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006d9a:	6923      	ldr	r3, [r4, #16]
 8006d9c:	2965      	cmp	r1, #101	; 0x65
 8006d9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006da2:	f106 35ff 	add.w	r5, r6, #4294967295
 8006da6:	6123      	str	r3, [r4, #16]
 8006da8:	d00c      	beq.n	8006dc4 <_scanf_float+0x350>
 8006daa:	2945      	cmp	r1, #69	; 0x45
 8006dac:	d00a      	beq.n	8006dc4 <_scanf_float+0x350>
 8006dae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006db2:	463a      	mov	r2, r7
 8006db4:	4640      	mov	r0, r8
 8006db6:	4798      	blx	r3
 8006db8:	6923      	ldr	r3, [r4, #16]
 8006dba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	1eb5      	subs	r5, r6, #2
 8006dc2:	6123      	str	r3, [r4, #16]
 8006dc4:	463a      	mov	r2, r7
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dcc:	4798      	blx	r3
 8006dce:	462e      	mov	r6, r5
 8006dd0:	6825      	ldr	r5, [r4, #0]
 8006dd2:	f015 0510 	ands.w	r5, r5, #16
 8006dd6:	d159      	bne.n	8006e8c <_scanf_float+0x418>
 8006dd8:	7035      	strb	r5, [r6, #0]
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de4:	d11c      	bne.n	8006e20 <_scanf_float+0x3ac>
 8006de6:	9b01      	ldr	r3, [sp, #4]
 8006de8:	454b      	cmp	r3, r9
 8006dea:	eba3 0209 	sub.w	r2, r3, r9
 8006dee:	d124      	bne.n	8006e3a <_scanf_float+0x3c6>
 8006df0:	2200      	movs	r2, #0
 8006df2:	4659      	mov	r1, fp
 8006df4:	4640      	mov	r0, r8
 8006df6:	f000 fe9f 	bl	8007b38 <_strtod_r>
 8006dfa:	f8d4 c000 	ldr.w	ip, [r4]
 8006dfe:	9b03      	ldr	r3, [sp, #12]
 8006e00:	f01c 0f02 	tst.w	ip, #2
 8006e04:	4606      	mov	r6, r0
 8006e06:	460f      	mov	r7, r1
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	d021      	beq.n	8006e50 <_scanf_float+0x3dc>
 8006e0c:	9903      	ldr	r1, [sp, #12]
 8006e0e:	1d1a      	adds	r2, r3, #4
 8006e10:	600a      	str	r2, [r1, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	e9c3 6700 	strd	r6, r7, [r3]
 8006e18:	68e3      	ldr	r3, [r4, #12]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	60e3      	str	r3, [r4, #12]
 8006e1e:	e66c      	b.n	8006afa <_scanf_float+0x86>
 8006e20:	9b04      	ldr	r3, [sp, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d0e4      	beq.n	8006df0 <_scanf_float+0x37c>
 8006e26:	9905      	ldr	r1, [sp, #20]
 8006e28:	230a      	movs	r3, #10
 8006e2a:	462a      	mov	r2, r5
 8006e2c:	4640      	mov	r0, r8
 8006e2e:	3101      	adds	r1, #1
 8006e30:	f000 ff1a 	bl	8007c68 <_strtol_r>
 8006e34:	9b04      	ldr	r3, [sp, #16]
 8006e36:	9e05      	ldr	r6, [sp, #20]
 8006e38:	1ac2      	subs	r2, r0, r3
 8006e3a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006e3e:	429e      	cmp	r6, r3
 8006e40:	bf28      	it	cs
 8006e42:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006e46:	4630      	mov	r0, r6
 8006e48:	4911      	ldr	r1, [pc, #68]	; (8006e90 <_scanf_float+0x41c>)
 8006e4a:	f000 f829 	bl	8006ea0 <siprintf>
 8006e4e:	e7cf      	b.n	8006df0 <_scanf_float+0x37c>
 8006e50:	f01c 0f04 	tst.w	ip, #4
 8006e54:	f103 0e04 	add.w	lr, r3, #4
 8006e58:	d003      	beq.n	8006e62 <_scanf_float+0x3ee>
 8006e5a:	9903      	ldr	r1, [sp, #12]
 8006e5c:	f8c1 e000 	str.w	lr, [r1]
 8006e60:	e7d7      	b.n	8006e12 <_scanf_float+0x39e>
 8006e62:	9a03      	ldr	r2, [sp, #12]
 8006e64:	f8c2 e000 	str.w	lr, [r2]
 8006e68:	f8d3 8000 	ldr.w	r8, [r3]
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	f7f9 fdcc 	bl	8000a0c <__aeabi_dcmpun>
 8006e74:	b128      	cbz	r0, 8006e82 <_scanf_float+0x40e>
 8006e76:	4807      	ldr	r0, [pc, #28]	; (8006e94 <_scanf_float+0x420>)
 8006e78:	f000 f80e 	bl	8006e98 <nanf>
 8006e7c:	f8c8 0000 	str.w	r0, [r8]
 8006e80:	e7ca      	b.n	8006e18 <_scanf_float+0x3a4>
 8006e82:	4630      	mov	r0, r6
 8006e84:	4639      	mov	r1, r7
 8006e86:	f7f9 fe1f 	bl	8000ac8 <__aeabi_d2f>
 8006e8a:	e7f7      	b.n	8006e7c <_scanf_float+0x408>
 8006e8c:	2500      	movs	r5, #0
 8006e8e:	e634      	b.n	8006afa <_scanf_float+0x86>
 8006e90:	0800c330 	.word	0x0800c330
 8006e94:	0800c70a 	.word	0x0800c70a

08006e98 <nanf>:
 8006e98:	4800      	ldr	r0, [pc, #0]	; (8006e9c <nanf+0x4>)
 8006e9a:	4770      	bx	lr
 8006e9c:	7fc00000 	.word	0x7fc00000

08006ea0 <siprintf>:
 8006ea0:	b40e      	push	{r1, r2, r3}
 8006ea2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ea6:	b500      	push	{lr}
 8006ea8:	b09c      	sub	sp, #112	; 0x70
 8006eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8006eac:	9002      	str	r0, [sp, #8]
 8006eae:	9006      	str	r0, [sp, #24]
 8006eb0:	9107      	str	r1, [sp, #28]
 8006eb2:	9104      	str	r1, [sp, #16]
 8006eb4:	4808      	ldr	r0, [pc, #32]	; (8006ed8 <siprintf+0x38>)
 8006eb6:	4909      	ldr	r1, [pc, #36]	; (8006edc <siprintf+0x3c>)
 8006eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ebc:	9105      	str	r1, [sp, #20]
 8006ebe:	6800      	ldr	r0, [r0, #0]
 8006ec0:	a902      	add	r1, sp, #8
 8006ec2:	9301      	str	r3, [sp, #4]
 8006ec4:	f001 ffd0 	bl	8008e68 <_svfiprintf_r>
 8006ec8:	2200      	movs	r2, #0
 8006eca:	9b02      	ldr	r3, [sp, #8]
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	b01c      	add	sp, #112	; 0x70
 8006ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ed4:	b003      	add	sp, #12
 8006ed6:	4770      	bx	lr
 8006ed8:	2000000c 	.word	0x2000000c
 8006edc:	ffff0208 	.word	0xffff0208

08006ee0 <strstr>:
 8006ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ee2:	780c      	ldrb	r4, [r1, #0]
 8006ee4:	b164      	cbz	r4, 8006f00 <strstr+0x20>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	781a      	ldrb	r2, [r3, #0]
 8006eea:	4618      	mov	r0, r3
 8006eec:	1c5e      	adds	r6, r3, #1
 8006eee:	b90a      	cbnz	r2, 8006ef4 <strstr+0x14>
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	e005      	b.n	8006f00 <strstr+0x20>
 8006ef4:	4294      	cmp	r4, r2
 8006ef6:	d108      	bne.n	8006f0a <strstr+0x2a>
 8006ef8:	460d      	mov	r5, r1
 8006efa:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8006efe:	b902      	cbnz	r2, 8006f02 <strstr+0x22>
 8006f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f02:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8006f06:	4297      	cmp	r7, r2
 8006f08:	d0f7      	beq.n	8006efa <strstr+0x1a>
 8006f0a:	4633      	mov	r3, r6
 8006f0c:	e7ec      	b.n	8006ee8 <strstr+0x8>

08006f0e <sulp>:
 8006f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f12:	460f      	mov	r7, r1
 8006f14:	4690      	mov	r8, r2
 8006f16:	f001 fd9b 	bl	8008a50 <__ulp>
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	460d      	mov	r5, r1
 8006f1e:	f1b8 0f00 	cmp.w	r8, #0
 8006f22:	d011      	beq.n	8006f48 <sulp+0x3a>
 8006f24:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006f28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	dd0b      	ble.n	8006f48 <sulp+0x3a>
 8006f30:	2400      	movs	r4, #0
 8006f32:	051b      	lsls	r3, r3, #20
 8006f34:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006f38:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	462b      	mov	r3, r5
 8006f40:	f7f9 faca 	bl	80004d8 <__aeabi_dmul>
 8006f44:	4604      	mov	r4, r0
 8006f46:	460d      	mov	r5, r1
 8006f48:	4620      	mov	r0, r4
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006f50 <_strtod_l>:
 8006f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f54:	469b      	mov	fp, r3
 8006f56:	2300      	movs	r3, #0
 8006f58:	b0a1      	sub	sp, #132	; 0x84
 8006f5a:	931c      	str	r3, [sp, #112]	; 0x70
 8006f5c:	4ba1      	ldr	r3, [pc, #644]	; (80071e4 <_strtod_l+0x294>)
 8006f5e:	4682      	mov	sl, r0
 8006f60:	681f      	ldr	r7, [r3, #0]
 8006f62:	460e      	mov	r6, r1
 8006f64:	4638      	mov	r0, r7
 8006f66:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f68:	f7f9 f8f2 	bl	8000150 <strlen>
 8006f6c:	f04f 0800 	mov.w	r8, #0
 8006f70:	4604      	mov	r4, r0
 8006f72:	f04f 0900 	mov.w	r9, #0
 8006f76:	961b      	str	r6, [sp, #108]	; 0x6c
 8006f78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f7a:	781a      	ldrb	r2, [r3, #0]
 8006f7c:	2a2b      	cmp	r2, #43	; 0x2b
 8006f7e:	d04c      	beq.n	800701a <_strtod_l+0xca>
 8006f80:	d83a      	bhi.n	8006ff8 <_strtod_l+0xa8>
 8006f82:	2a0d      	cmp	r2, #13
 8006f84:	d833      	bhi.n	8006fee <_strtod_l+0x9e>
 8006f86:	2a08      	cmp	r2, #8
 8006f88:	d833      	bhi.n	8006ff2 <_strtod_l+0xa2>
 8006f8a:	2a00      	cmp	r2, #0
 8006f8c:	d03d      	beq.n	800700a <_strtod_l+0xba>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	930c      	str	r3, [sp, #48]	; 0x30
 8006f92:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006f94:	782b      	ldrb	r3, [r5, #0]
 8006f96:	2b30      	cmp	r3, #48	; 0x30
 8006f98:	f040 80af 	bne.w	80070fa <_strtod_l+0x1aa>
 8006f9c:	786b      	ldrb	r3, [r5, #1]
 8006f9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006fa2:	2b58      	cmp	r3, #88	; 0x58
 8006fa4:	d16c      	bne.n	8007080 <_strtod_l+0x130>
 8006fa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fa8:	4650      	mov	r0, sl
 8006faa:	9301      	str	r3, [sp, #4]
 8006fac:	ab1c      	add	r3, sp, #112	; 0x70
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	4a8d      	ldr	r2, [pc, #564]	; (80071e8 <_strtod_l+0x298>)
 8006fb2:	f8cd b008 	str.w	fp, [sp, #8]
 8006fb6:	ab1d      	add	r3, sp, #116	; 0x74
 8006fb8:	a91b      	add	r1, sp, #108	; 0x6c
 8006fba:	f000 fec9 	bl	8007d50 <__gethex>
 8006fbe:	f010 0607 	ands.w	r6, r0, #7
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	d005      	beq.n	8006fd2 <_strtod_l+0x82>
 8006fc6:	2e06      	cmp	r6, #6
 8006fc8:	d129      	bne.n	800701e <_strtod_l+0xce>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	3501      	adds	r5, #1
 8006fce:	951b      	str	r5, [sp, #108]	; 0x6c
 8006fd0:	930c      	str	r3, [sp, #48]	; 0x30
 8006fd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f040 8596 	bne.w	8007b06 <_strtod_l+0xbb6>
 8006fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fdc:	b1d3      	cbz	r3, 8007014 <_strtod_l+0xc4>
 8006fde:	4642      	mov	r2, r8
 8006fe0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	b021      	add	sp, #132	; 0x84
 8006fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fee:	2a20      	cmp	r2, #32
 8006ff0:	d1cd      	bne.n	8006f8e <_strtod_l+0x3e>
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	931b      	str	r3, [sp, #108]	; 0x6c
 8006ff6:	e7bf      	b.n	8006f78 <_strtod_l+0x28>
 8006ff8:	2a2d      	cmp	r2, #45	; 0x2d
 8006ffa:	d1c8      	bne.n	8006f8e <_strtod_l+0x3e>
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	920c      	str	r2, [sp, #48]	; 0x30
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	921b      	str	r2, [sp, #108]	; 0x6c
 8007004:	785b      	ldrb	r3, [r3, #1]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1c3      	bne.n	8006f92 <_strtod_l+0x42>
 800700a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800700c:	961b      	str	r6, [sp, #108]	; 0x6c
 800700e:	2b00      	cmp	r3, #0
 8007010:	f040 8577 	bne.w	8007b02 <_strtod_l+0xbb2>
 8007014:	4642      	mov	r2, r8
 8007016:	464b      	mov	r3, r9
 8007018:	e7e4      	b.n	8006fe4 <_strtod_l+0x94>
 800701a:	2200      	movs	r2, #0
 800701c:	e7ef      	b.n	8006ffe <_strtod_l+0xae>
 800701e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007020:	b13a      	cbz	r2, 8007032 <_strtod_l+0xe2>
 8007022:	2135      	movs	r1, #53	; 0x35
 8007024:	a81e      	add	r0, sp, #120	; 0x78
 8007026:	f001 fe17 	bl	8008c58 <__copybits>
 800702a:	4650      	mov	r0, sl
 800702c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800702e:	f001 f9df 	bl	80083f0 <_Bfree>
 8007032:	3e01      	subs	r6, #1
 8007034:	2e05      	cmp	r6, #5
 8007036:	d807      	bhi.n	8007048 <_strtod_l+0xf8>
 8007038:	e8df f006 	tbb	[pc, r6]
 800703c:	1d180b0e 	.word	0x1d180b0e
 8007040:	030e      	.short	0x030e
 8007042:	f04f 0900 	mov.w	r9, #0
 8007046:	46c8      	mov	r8, r9
 8007048:	0721      	lsls	r1, r4, #28
 800704a:	d5c2      	bpl.n	8006fd2 <_strtod_l+0x82>
 800704c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007050:	e7bf      	b.n	8006fd2 <_strtod_l+0x82>
 8007052:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8007056:	e7f7      	b.n	8007048 <_strtod_l+0xf8>
 8007058:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800705a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800705e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007062:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007066:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800706a:	e7ed      	b.n	8007048 <_strtod_l+0xf8>
 800706c:	f04f 0800 	mov.w	r8, #0
 8007070:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80071ec <_strtod_l+0x29c>
 8007074:	e7e8      	b.n	8007048 <_strtod_l+0xf8>
 8007076:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800707a:	f04f 38ff 	mov.w	r8, #4294967295
 800707e:	e7e3      	b.n	8007048 <_strtod_l+0xf8>
 8007080:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	921b      	str	r2, [sp, #108]	; 0x6c
 8007086:	785b      	ldrb	r3, [r3, #1]
 8007088:	2b30      	cmp	r3, #48	; 0x30
 800708a:	d0f9      	beq.n	8007080 <_strtod_l+0x130>
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0a0      	beq.n	8006fd2 <_strtod_l+0x82>
 8007090:	2301      	movs	r3, #1
 8007092:	9307      	str	r3, [sp, #28]
 8007094:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007096:	220a      	movs	r2, #10
 8007098:	9308      	str	r3, [sp, #32]
 800709a:	2300      	movs	r3, #0
 800709c:	469b      	mov	fp, r3
 800709e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80070a2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80070a4:	7805      	ldrb	r5, [r0, #0]
 80070a6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80070aa:	b2d9      	uxtb	r1, r3
 80070ac:	2909      	cmp	r1, #9
 80070ae:	d926      	bls.n	80070fe <_strtod_l+0x1ae>
 80070b0:	4622      	mov	r2, r4
 80070b2:	4639      	mov	r1, r7
 80070b4:	f002 f984 	bl	80093c0 <strncmp>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	d032      	beq.n	8007122 <_strtod_l+0x1d2>
 80070bc:	2000      	movs	r0, #0
 80070be:	462b      	mov	r3, r5
 80070c0:	465c      	mov	r4, fp
 80070c2:	4602      	mov	r2, r0
 80070c4:	9004      	str	r0, [sp, #16]
 80070c6:	2b65      	cmp	r3, #101	; 0x65
 80070c8:	d001      	beq.n	80070ce <_strtod_l+0x17e>
 80070ca:	2b45      	cmp	r3, #69	; 0x45
 80070cc:	d113      	bne.n	80070f6 <_strtod_l+0x1a6>
 80070ce:	b91c      	cbnz	r4, 80070d8 <_strtod_l+0x188>
 80070d0:	9b07      	ldr	r3, [sp, #28]
 80070d2:	4303      	orrs	r3, r0
 80070d4:	d099      	beq.n	800700a <_strtod_l+0xba>
 80070d6:	2400      	movs	r4, #0
 80070d8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80070da:	1c73      	adds	r3, r6, #1
 80070dc:	931b      	str	r3, [sp, #108]	; 0x6c
 80070de:	7873      	ldrb	r3, [r6, #1]
 80070e0:	2b2b      	cmp	r3, #43	; 0x2b
 80070e2:	d078      	beq.n	80071d6 <_strtod_l+0x286>
 80070e4:	2b2d      	cmp	r3, #45	; 0x2d
 80070e6:	d07b      	beq.n	80071e0 <_strtod_l+0x290>
 80070e8:	2700      	movs	r7, #0
 80070ea:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80070ee:	2909      	cmp	r1, #9
 80070f0:	f240 8082 	bls.w	80071f8 <_strtod_l+0x2a8>
 80070f4:	961b      	str	r6, [sp, #108]	; 0x6c
 80070f6:	2500      	movs	r5, #0
 80070f8:	e09e      	b.n	8007238 <_strtod_l+0x2e8>
 80070fa:	2300      	movs	r3, #0
 80070fc:	e7c9      	b.n	8007092 <_strtod_l+0x142>
 80070fe:	f1bb 0f08 	cmp.w	fp, #8
 8007102:	bfd5      	itete	le
 8007104:	9906      	ldrle	r1, [sp, #24]
 8007106:	9905      	ldrgt	r1, [sp, #20]
 8007108:	fb02 3301 	mlale	r3, r2, r1, r3
 800710c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007110:	f100 0001 	add.w	r0, r0, #1
 8007114:	bfd4      	ite	le
 8007116:	9306      	strle	r3, [sp, #24]
 8007118:	9305      	strgt	r3, [sp, #20]
 800711a:	f10b 0b01 	add.w	fp, fp, #1
 800711e:	901b      	str	r0, [sp, #108]	; 0x6c
 8007120:	e7bf      	b.n	80070a2 <_strtod_l+0x152>
 8007122:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007124:	191a      	adds	r2, r3, r4
 8007126:	921b      	str	r2, [sp, #108]	; 0x6c
 8007128:	5d1b      	ldrb	r3, [r3, r4]
 800712a:	f1bb 0f00 	cmp.w	fp, #0
 800712e:	d036      	beq.n	800719e <_strtod_l+0x24e>
 8007130:	465c      	mov	r4, fp
 8007132:	9004      	str	r0, [sp, #16]
 8007134:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007138:	2a09      	cmp	r2, #9
 800713a:	d912      	bls.n	8007162 <_strtod_l+0x212>
 800713c:	2201      	movs	r2, #1
 800713e:	e7c2      	b.n	80070c6 <_strtod_l+0x176>
 8007140:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007142:	3001      	adds	r0, #1
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	921b      	str	r2, [sp, #108]	; 0x6c
 8007148:	785b      	ldrb	r3, [r3, #1]
 800714a:	2b30      	cmp	r3, #48	; 0x30
 800714c:	d0f8      	beq.n	8007140 <_strtod_l+0x1f0>
 800714e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007152:	2a08      	cmp	r2, #8
 8007154:	f200 84dc 	bhi.w	8007b10 <_strtod_l+0xbc0>
 8007158:	9004      	str	r0, [sp, #16]
 800715a:	2000      	movs	r0, #0
 800715c:	4604      	mov	r4, r0
 800715e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007160:	9208      	str	r2, [sp, #32]
 8007162:	3b30      	subs	r3, #48	; 0x30
 8007164:	f100 0201 	add.w	r2, r0, #1
 8007168:	d013      	beq.n	8007192 <_strtod_l+0x242>
 800716a:	9904      	ldr	r1, [sp, #16]
 800716c:	1905      	adds	r5, r0, r4
 800716e:	4411      	add	r1, r2
 8007170:	9104      	str	r1, [sp, #16]
 8007172:	4622      	mov	r2, r4
 8007174:	210a      	movs	r1, #10
 8007176:	42aa      	cmp	r2, r5
 8007178:	d113      	bne.n	80071a2 <_strtod_l+0x252>
 800717a:	1822      	adds	r2, r4, r0
 800717c:	2a08      	cmp	r2, #8
 800717e:	f104 0401 	add.w	r4, r4, #1
 8007182:	4404      	add	r4, r0
 8007184:	dc1b      	bgt.n	80071be <_strtod_l+0x26e>
 8007186:	220a      	movs	r2, #10
 8007188:	9906      	ldr	r1, [sp, #24]
 800718a:	fb02 3301 	mla	r3, r2, r1, r3
 800718e:	9306      	str	r3, [sp, #24]
 8007190:	2200      	movs	r2, #0
 8007192:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007194:	4610      	mov	r0, r2
 8007196:	1c59      	adds	r1, r3, #1
 8007198:	911b      	str	r1, [sp, #108]	; 0x6c
 800719a:	785b      	ldrb	r3, [r3, #1]
 800719c:	e7ca      	b.n	8007134 <_strtod_l+0x1e4>
 800719e:	4658      	mov	r0, fp
 80071a0:	e7d3      	b.n	800714a <_strtod_l+0x1fa>
 80071a2:	2a08      	cmp	r2, #8
 80071a4:	dc04      	bgt.n	80071b0 <_strtod_l+0x260>
 80071a6:	9f06      	ldr	r7, [sp, #24]
 80071a8:	434f      	muls	r7, r1
 80071aa:	9706      	str	r7, [sp, #24]
 80071ac:	3201      	adds	r2, #1
 80071ae:	e7e2      	b.n	8007176 <_strtod_l+0x226>
 80071b0:	1c57      	adds	r7, r2, #1
 80071b2:	2f10      	cmp	r7, #16
 80071b4:	bfde      	ittt	le
 80071b6:	9f05      	ldrle	r7, [sp, #20]
 80071b8:	434f      	mulle	r7, r1
 80071ba:	9705      	strle	r7, [sp, #20]
 80071bc:	e7f6      	b.n	80071ac <_strtod_l+0x25c>
 80071be:	2c10      	cmp	r4, #16
 80071c0:	bfdf      	itttt	le
 80071c2:	220a      	movle	r2, #10
 80071c4:	9905      	ldrle	r1, [sp, #20]
 80071c6:	fb02 3301 	mlale	r3, r2, r1, r3
 80071ca:	9305      	strle	r3, [sp, #20]
 80071cc:	e7e0      	b.n	8007190 <_strtod_l+0x240>
 80071ce:	2300      	movs	r3, #0
 80071d0:	2201      	movs	r2, #1
 80071d2:	9304      	str	r3, [sp, #16]
 80071d4:	e77c      	b.n	80070d0 <_strtod_l+0x180>
 80071d6:	2700      	movs	r7, #0
 80071d8:	1cb3      	adds	r3, r6, #2
 80071da:	931b      	str	r3, [sp, #108]	; 0x6c
 80071dc:	78b3      	ldrb	r3, [r6, #2]
 80071de:	e784      	b.n	80070ea <_strtod_l+0x19a>
 80071e0:	2701      	movs	r7, #1
 80071e2:	e7f9      	b.n	80071d8 <_strtod_l+0x288>
 80071e4:	0800c514 	.word	0x0800c514
 80071e8:	0800c344 	.word	0x0800c344
 80071ec:	7ff00000 	.word	0x7ff00000
 80071f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071f2:	1c59      	adds	r1, r3, #1
 80071f4:	911b      	str	r1, [sp, #108]	; 0x6c
 80071f6:	785b      	ldrb	r3, [r3, #1]
 80071f8:	2b30      	cmp	r3, #48	; 0x30
 80071fa:	d0f9      	beq.n	80071f0 <_strtod_l+0x2a0>
 80071fc:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007200:	2908      	cmp	r1, #8
 8007202:	f63f af78 	bhi.w	80070f6 <_strtod_l+0x1a6>
 8007206:	f04f 0e0a 	mov.w	lr, #10
 800720a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800720e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007210:	9309      	str	r3, [sp, #36]	; 0x24
 8007212:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007214:	1c59      	adds	r1, r3, #1
 8007216:	911b      	str	r1, [sp, #108]	; 0x6c
 8007218:	785b      	ldrb	r3, [r3, #1]
 800721a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800721e:	2d09      	cmp	r5, #9
 8007220:	d935      	bls.n	800728e <_strtod_l+0x33e>
 8007222:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007224:	1b49      	subs	r1, r1, r5
 8007226:	2908      	cmp	r1, #8
 8007228:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800722c:	dc02      	bgt.n	8007234 <_strtod_l+0x2e4>
 800722e:	4565      	cmp	r5, ip
 8007230:	bfa8      	it	ge
 8007232:	4665      	movge	r5, ip
 8007234:	b107      	cbz	r7, 8007238 <_strtod_l+0x2e8>
 8007236:	426d      	negs	r5, r5
 8007238:	2c00      	cmp	r4, #0
 800723a:	d14c      	bne.n	80072d6 <_strtod_l+0x386>
 800723c:	9907      	ldr	r1, [sp, #28]
 800723e:	4301      	orrs	r1, r0
 8007240:	f47f aec7 	bne.w	8006fd2 <_strtod_l+0x82>
 8007244:	2a00      	cmp	r2, #0
 8007246:	f47f aee0 	bne.w	800700a <_strtod_l+0xba>
 800724a:	2b69      	cmp	r3, #105	; 0x69
 800724c:	d026      	beq.n	800729c <_strtod_l+0x34c>
 800724e:	dc23      	bgt.n	8007298 <_strtod_l+0x348>
 8007250:	2b49      	cmp	r3, #73	; 0x49
 8007252:	d023      	beq.n	800729c <_strtod_l+0x34c>
 8007254:	2b4e      	cmp	r3, #78	; 0x4e
 8007256:	f47f aed8 	bne.w	800700a <_strtod_l+0xba>
 800725a:	499c      	ldr	r1, [pc, #624]	; (80074cc <_strtod_l+0x57c>)
 800725c:	a81b      	add	r0, sp, #108	; 0x6c
 800725e:	f000 ffc5 	bl	80081ec <__match>
 8007262:	2800      	cmp	r0, #0
 8007264:	f43f aed1 	beq.w	800700a <_strtod_l+0xba>
 8007268:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	2b28      	cmp	r3, #40	; 0x28
 800726e:	d12c      	bne.n	80072ca <_strtod_l+0x37a>
 8007270:	4997      	ldr	r1, [pc, #604]	; (80074d0 <_strtod_l+0x580>)
 8007272:	aa1e      	add	r2, sp, #120	; 0x78
 8007274:	a81b      	add	r0, sp, #108	; 0x6c
 8007276:	f000 ffcd 	bl	8008214 <__hexnan>
 800727a:	2805      	cmp	r0, #5
 800727c:	d125      	bne.n	80072ca <_strtod_l+0x37a>
 800727e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007280:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8007284:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007288:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800728c:	e6a1      	b.n	8006fd2 <_strtod_l+0x82>
 800728e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8007292:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007296:	e7bc      	b.n	8007212 <_strtod_l+0x2c2>
 8007298:	2b6e      	cmp	r3, #110	; 0x6e
 800729a:	e7dc      	b.n	8007256 <_strtod_l+0x306>
 800729c:	498d      	ldr	r1, [pc, #564]	; (80074d4 <_strtod_l+0x584>)
 800729e:	a81b      	add	r0, sp, #108	; 0x6c
 80072a0:	f000 ffa4 	bl	80081ec <__match>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f43f aeb0 	beq.w	800700a <_strtod_l+0xba>
 80072aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072ac:	498a      	ldr	r1, [pc, #552]	; (80074d8 <_strtod_l+0x588>)
 80072ae:	3b01      	subs	r3, #1
 80072b0:	a81b      	add	r0, sp, #108	; 0x6c
 80072b2:	931b      	str	r3, [sp, #108]	; 0x6c
 80072b4:	f000 ff9a 	bl	80081ec <__match>
 80072b8:	b910      	cbnz	r0, 80072c0 <_strtod_l+0x370>
 80072ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072bc:	3301      	adds	r3, #1
 80072be:	931b      	str	r3, [sp, #108]	; 0x6c
 80072c0:	f04f 0800 	mov.w	r8, #0
 80072c4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80074e8 <_strtod_l+0x598>
 80072c8:	e683      	b.n	8006fd2 <_strtod_l+0x82>
 80072ca:	4884      	ldr	r0, [pc, #528]	; (80074dc <_strtod_l+0x58c>)
 80072cc:	f002 f862 	bl	8009394 <nan>
 80072d0:	4680      	mov	r8, r0
 80072d2:	4689      	mov	r9, r1
 80072d4:	e67d      	b.n	8006fd2 <_strtod_l+0x82>
 80072d6:	9b04      	ldr	r3, [sp, #16]
 80072d8:	f1bb 0f00 	cmp.w	fp, #0
 80072dc:	bf08      	it	eq
 80072de:	46a3      	moveq	fp, r4
 80072e0:	1aeb      	subs	r3, r5, r3
 80072e2:	2c10      	cmp	r4, #16
 80072e4:	9806      	ldr	r0, [sp, #24]
 80072e6:	4626      	mov	r6, r4
 80072e8:	9307      	str	r3, [sp, #28]
 80072ea:	bfa8      	it	ge
 80072ec:	2610      	movge	r6, #16
 80072ee:	f7f9 f879 	bl	80003e4 <__aeabi_ui2d>
 80072f2:	2c09      	cmp	r4, #9
 80072f4:	4680      	mov	r8, r0
 80072f6:	4689      	mov	r9, r1
 80072f8:	dd13      	ble.n	8007322 <_strtod_l+0x3d2>
 80072fa:	4b79      	ldr	r3, [pc, #484]	; (80074e0 <_strtod_l+0x590>)
 80072fc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007300:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007304:	f7f9 f8e8 	bl	80004d8 <__aeabi_dmul>
 8007308:	4680      	mov	r8, r0
 800730a:	9805      	ldr	r0, [sp, #20]
 800730c:	4689      	mov	r9, r1
 800730e:	f7f9 f869 	bl	80003e4 <__aeabi_ui2d>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	4640      	mov	r0, r8
 8007318:	4649      	mov	r1, r9
 800731a:	f7f8 ff27 	bl	800016c <__adddf3>
 800731e:	4680      	mov	r8, r0
 8007320:	4689      	mov	r9, r1
 8007322:	2c0f      	cmp	r4, #15
 8007324:	dc36      	bgt.n	8007394 <_strtod_l+0x444>
 8007326:	9b07      	ldr	r3, [sp, #28]
 8007328:	2b00      	cmp	r3, #0
 800732a:	f43f ae52 	beq.w	8006fd2 <_strtod_l+0x82>
 800732e:	dd22      	ble.n	8007376 <_strtod_l+0x426>
 8007330:	2b16      	cmp	r3, #22
 8007332:	dc09      	bgt.n	8007348 <_strtod_l+0x3f8>
 8007334:	4c6a      	ldr	r4, [pc, #424]	; (80074e0 <_strtod_l+0x590>)
 8007336:	4642      	mov	r2, r8
 8007338:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800733c:	464b      	mov	r3, r9
 800733e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007342:	f7f9 f8c9 	bl	80004d8 <__aeabi_dmul>
 8007346:	e7c3      	b.n	80072d0 <_strtod_l+0x380>
 8007348:	9a07      	ldr	r2, [sp, #28]
 800734a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800734e:	4293      	cmp	r3, r2
 8007350:	db20      	blt.n	8007394 <_strtod_l+0x444>
 8007352:	4d63      	ldr	r5, [pc, #396]	; (80074e0 <_strtod_l+0x590>)
 8007354:	f1c4 040f 	rsb	r4, r4, #15
 8007358:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800735c:	4642      	mov	r2, r8
 800735e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007362:	464b      	mov	r3, r9
 8007364:	f7f9 f8b8 	bl	80004d8 <__aeabi_dmul>
 8007368:	9b07      	ldr	r3, [sp, #28]
 800736a:	1b1c      	subs	r4, r3, r4
 800736c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007370:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007374:	e7e5      	b.n	8007342 <_strtod_l+0x3f2>
 8007376:	9b07      	ldr	r3, [sp, #28]
 8007378:	3316      	adds	r3, #22
 800737a:	db0b      	blt.n	8007394 <_strtod_l+0x444>
 800737c:	9b04      	ldr	r3, [sp, #16]
 800737e:	4a58      	ldr	r2, [pc, #352]	; (80074e0 <_strtod_l+0x590>)
 8007380:	1b5d      	subs	r5, r3, r5
 8007382:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007386:	4640      	mov	r0, r8
 8007388:	e9d5 2300 	ldrd	r2, r3, [r5]
 800738c:	4649      	mov	r1, r9
 800738e:	f7f9 f9cd 	bl	800072c <__aeabi_ddiv>
 8007392:	e79d      	b.n	80072d0 <_strtod_l+0x380>
 8007394:	9b07      	ldr	r3, [sp, #28]
 8007396:	1ba6      	subs	r6, r4, r6
 8007398:	441e      	add	r6, r3
 800739a:	2e00      	cmp	r6, #0
 800739c:	dd71      	ble.n	8007482 <_strtod_l+0x532>
 800739e:	f016 030f 	ands.w	r3, r6, #15
 80073a2:	d00a      	beq.n	80073ba <_strtod_l+0x46a>
 80073a4:	494e      	ldr	r1, [pc, #312]	; (80074e0 <_strtod_l+0x590>)
 80073a6:	4642      	mov	r2, r8
 80073a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073b0:	464b      	mov	r3, r9
 80073b2:	f7f9 f891 	bl	80004d8 <__aeabi_dmul>
 80073b6:	4680      	mov	r8, r0
 80073b8:	4689      	mov	r9, r1
 80073ba:	f036 060f 	bics.w	r6, r6, #15
 80073be:	d050      	beq.n	8007462 <_strtod_l+0x512>
 80073c0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80073c4:	dd27      	ble.n	8007416 <_strtod_l+0x4c6>
 80073c6:	f04f 0b00 	mov.w	fp, #0
 80073ca:	f8cd b010 	str.w	fp, [sp, #16]
 80073ce:	f8cd b020 	str.w	fp, [sp, #32]
 80073d2:	f8cd b018 	str.w	fp, [sp, #24]
 80073d6:	2322      	movs	r3, #34	; 0x22
 80073d8:	f04f 0800 	mov.w	r8, #0
 80073dc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80074e8 <_strtod_l+0x598>
 80073e0:	f8ca 3000 	str.w	r3, [sl]
 80073e4:	9b08      	ldr	r3, [sp, #32]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f43f adf3 	beq.w	8006fd2 <_strtod_l+0x82>
 80073ec:	4650      	mov	r0, sl
 80073ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 80073f0:	f000 fffe 	bl	80083f0 <_Bfree>
 80073f4:	4650      	mov	r0, sl
 80073f6:	9906      	ldr	r1, [sp, #24]
 80073f8:	f000 fffa 	bl	80083f0 <_Bfree>
 80073fc:	4650      	mov	r0, sl
 80073fe:	9904      	ldr	r1, [sp, #16]
 8007400:	f000 fff6 	bl	80083f0 <_Bfree>
 8007404:	4650      	mov	r0, sl
 8007406:	9908      	ldr	r1, [sp, #32]
 8007408:	f000 fff2 	bl	80083f0 <_Bfree>
 800740c:	4659      	mov	r1, fp
 800740e:	4650      	mov	r0, sl
 8007410:	f000 ffee 	bl	80083f0 <_Bfree>
 8007414:	e5dd      	b.n	8006fd2 <_strtod_l+0x82>
 8007416:	2300      	movs	r3, #0
 8007418:	4640      	mov	r0, r8
 800741a:	4649      	mov	r1, r9
 800741c:	461f      	mov	r7, r3
 800741e:	1136      	asrs	r6, r6, #4
 8007420:	2e01      	cmp	r6, #1
 8007422:	dc21      	bgt.n	8007468 <_strtod_l+0x518>
 8007424:	b10b      	cbz	r3, 800742a <_strtod_l+0x4da>
 8007426:	4680      	mov	r8, r0
 8007428:	4689      	mov	r9, r1
 800742a:	4b2e      	ldr	r3, [pc, #184]	; (80074e4 <_strtod_l+0x594>)
 800742c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007430:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007434:	4642      	mov	r2, r8
 8007436:	e9d7 0100 	ldrd	r0, r1, [r7]
 800743a:	464b      	mov	r3, r9
 800743c:	f7f9 f84c 	bl	80004d8 <__aeabi_dmul>
 8007440:	4b29      	ldr	r3, [pc, #164]	; (80074e8 <_strtod_l+0x598>)
 8007442:	460a      	mov	r2, r1
 8007444:	400b      	ands	r3, r1
 8007446:	4929      	ldr	r1, [pc, #164]	; (80074ec <_strtod_l+0x59c>)
 8007448:	4680      	mov	r8, r0
 800744a:	428b      	cmp	r3, r1
 800744c:	d8bb      	bhi.n	80073c6 <_strtod_l+0x476>
 800744e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007452:	428b      	cmp	r3, r1
 8007454:	bf86      	itte	hi
 8007456:	f04f 38ff 	movhi.w	r8, #4294967295
 800745a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80074f0 <_strtod_l+0x5a0>
 800745e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007462:	2300      	movs	r3, #0
 8007464:	9305      	str	r3, [sp, #20]
 8007466:	e07e      	b.n	8007566 <_strtod_l+0x616>
 8007468:	07f2      	lsls	r2, r6, #31
 800746a:	d507      	bpl.n	800747c <_strtod_l+0x52c>
 800746c:	4b1d      	ldr	r3, [pc, #116]	; (80074e4 <_strtod_l+0x594>)
 800746e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007476:	f7f9 f82f 	bl	80004d8 <__aeabi_dmul>
 800747a:	2301      	movs	r3, #1
 800747c:	3701      	adds	r7, #1
 800747e:	1076      	asrs	r6, r6, #1
 8007480:	e7ce      	b.n	8007420 <_strtod_l+0x4d0>
 8007482:	d0ee      	beq.n	8007462 <_strtod_l+0x512>
 8007484:	4276      	negs	r6, r6
 8007486:	f016 020f 	ands.w	r2, r6, #15
 800748a:	d00a      	beq.n	80074a2 <_strtod_l+0x552>
 800748c:	4b14      	ldr	r3, [pc, #80]	; (80074e0 <_strtod_l+0x590>)
 800748e:	4640      	mov	r0, r8
 8007490:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007494:	4649      	mov	r1, r9
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	f7f9 f947 	bl	800072c <__aeabi_ddiv>
 800749e:	4680      	mov	r8, r0
 80074a0:	4689      	mov	r9, r1
 80074a2:	1136      	asrs	r6, r6, #4
 80074a4:	d0dd      	beq.n	8007462 <_strtod_l+0x512>
 80074a6:	2e1f      	cmp	r6, #31
 80074a8:	dd24      	ble.n	80074f4 <_strtod_l+0x5a4>
 80074aa:	f04f 0b00 	mov.w	fp, #0
 80074ae:	f8cd b010 	str.w	fp, [sp, #16]
 80074b2:	f8cd b020 	str.w	fp, [sp, #32]
 80074b6:	f8cd b018 	str.w	fp, [sp, #24]
 80074ba:	2322      	movs	r3, #34	; 0x22
 80074bc:	f04f 0800 	mov.w	r8, #0
 80074c0:	f04f 0900 	mov.w	r9, #0
 80074c4:	f8ca 3000 	str.w	r3, [sl]
 80074c8:	e78c      	b.n	80073e4 <_strtod_l+0x494>
 80074ca:	bf00      	nop
 80074cc:	0800c33e 	.word	0x0800c33e
 80074d0:	0800c358 	.word	0x0800c358
 80074d4:	0800c335 	.word	0x0800c335
 80074d8:	0800c338 	.word	0x0800c338
 80074dc:	0800c70a 	.word	0x0800c70a
 80074e0:	0800c5c8 	.word	0x0800c5c8
 80074e4:	0800c5a0 	.word	0x0800c5a0
 80074e8:	7ff00000 	.word	0x7ff00000
 80074ec:	7ca00000 	.word	0x7ca00000
 80074f0:	7fefffff 	.word	0x7fefffff
 80074f4:	f016 0310 	ands.w	r3, r6, #16
 80074f8:	bf18      	it	ne
 80074fa:	236a      	movne	r3, #106	; 0x6a
 80074fc:	4640      	mov	r0, r8
 80074fe:	9305      	str	r3, [sp, #20]
 8007500:	4649      	mov	r1, r9
 8007502:	2300      	movs	r3, #0
 8007504:	4fb2      	ldr	r7, [pc, #712]	; (80077d0 <_strtod_l+0x880>)
 8007506:	07f2      	lsls	r2, r6, #31
 8007508:	d504      	bpl.n	8007514 <_strtod_l+0x5c4>
 800750a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800750e:	f7f8 ffe3 	bl	80004d8 <__aeabi_dmul>
 8007512:	2301      	movs	r3, #1
 8007514:	1076      	asrs	r6, r6, #1
 8007516:	f107 0708 	add.w	r7, r7, #8
 800751a:	d1f4      	bne.n	8007506 <_strtod_l+0x5b6>
 800751c:	b10b      	cbz	r3, 8007522 <_strtod_l+0x5d2>
 800751e:	4680      	mov	r8, r0
 8007520:	4689      	mov	r9, r1
 8007522:	9b05      	ldr	r3, [sp, #20]
 8007524:	b1bb      	cbz	r3, 8007556 <_strtod_l+0x606>
 8007526:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800752a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800752e:	2b00      	cmp	r3, #0
 8007530:	4649      	mov	r1, r9
 8007532:	dd10      	ble.n	8007556 <_strtod_l+0x606>
 8007534:	2b1f      	cmp	r3, #31
 8007536:	f340 812b 	ble.w	8007790 <_strtod_l+0x840>
 800753a:	2b34      	cmp	r3, #52	; 0x34
 800753c:	bfd8      	it	le
 800753e:	f04f 32ff 	movle.w	r2, #4294967295
 8007542:	f04f 0800 	mov.w	r8, #0
 8007546:	bfcf      	iteee	gt
 8007548:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800754c:	3b20      	suble	r3, #32
 800754e:	fa02 f303 	lslle.w	r3, r2, r3
 8007552:	ea03 0901 	andle.w	r9, r3, r1
 8007556:	2200      	movs	r2, #0
 8007558:	2300      	movs	r3, #0
 800755a:	4640      	mov	r0, r8
 800755c:	4649      	mov	r1, r9
 800755e:	f7f9 fa23 	bl	80009a8 <__aeabi_dcmpeq>
 8007562:	2800      	cmp	r0, #0
 8007564:	d1a1      	bne.n	80074aa <_strtod_l+0x55a>
 8007566:	9b06      	ldr	r3, [sp, #24]
 8007568:	465a      	mov	r2, fp
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	4650      	mov	r0, sl
 800756e:	4623      	mov	r3, r4
 8007570:	9908      	ldr	r1, [sp, #32]
 8007572:	f000 ffa9 	bl	80084c8 <__s2b>
 8007576:	9008      	str	r0, [sp, #32]
 8007578:	2800      	cmp	r0, #0
 800757a:	f43f af24 	beq.w	80073c6 <_strtod_l+0x476>
 800757e:	9b04      	ldr	r3, [sp, #16]
 8007580:	f04f 0b00 	mov.w	fp, #0
 8007584:	1b5d      	subs	r5, r3, r5
 8007586:	9b07      	ldr	r3, [sp, #28]
 8007588:	f8cd b010 	str.w	fp, [sp, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	bfb4      	ite	lt
 8007590:	462b      	movlt	r3, r5
 8007592:	2300      	movge	r3, #0
 8007594:	930e      	str	r3, [sp, #56]	; 0x38
 8007596:	9b07      	ldr	r3, [sp, #28]
 8007598:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800759c:	9316      	str	r3, [sp, #88]	; 0x58
 800759e:	9b08      	ldr	r3, [sp, #32]
 80075a0:	4650      	mov	r0, sl
 80075a2:	6859      	ldr	r1, [r3, #4]
 80075a4:	f000 fee4 	bl	8008370 <_Balloc>
 80075a8:	9006      	str	r0, [sp, #24]
 80075aa:	2800      	cmp	r0, #0
 80075ac:	f43f af13 	beq.w	80073d6 <_strtod_l+0x486>
 80075b0:	9b08      	ldr	r3, [sp, #32]
 80075b2:	300c      	adds	r0, #12
 80075b4:	691a      	ldr	r2, [r3, #16]
 80075b6:	f103 010c 	add.w	r1, r3, #12
 80075ba:	3202      	adds	r2, #2
 80075bc:	0092      	lsls	r2, r2, #2
 80075be:	f7ff fa43 	bl	8006a48 <memcpy>
 80075c2:	ab1e      	add	r3, sp, #120	; 0x78
 80075c4:	9301      	str	r3, [sp, #4]
 80075c6:	ab1d      	add	r3, sp, #116	; 0x74
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	4642      	mov	r2, r8
 80075cc:	464b      	mov	r3, r9
 80075ce:	4650      	mov	r0, sl
 80075d0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80075d4:	f001 fab6 	bl	8008b44 <__d2b>
 80075d8:	901c      	str	r0, [sp, #112]	; 0x70
 80075da:	2800      	cmp	r0, #0
 80075dc:	f43f aefb 	beq.w	80073d6 <_strtod_l+0x486>
 80075e0:	2101      	movs	r1, #1
 80075e2:	4650      	mov	r0, sl
 80075e4:	f001 f808 	bl	80085f8 <__i2b>
 80075e8:	4603      	mov	r3, r0
 80075ea:	9004      	str	r0, [sp, #16]
 80075ec:	2800      	cmp	r0, #0
 80075ee:	f43f aef2 	beq.w	80073d6 <_strtod_l+0x486>
 80075f2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80075f4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80075f6:	2d00      	cmp	r5, #0
 80075f8:	bfab      	itete	ge
 80075fa:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80075fc:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80075fe:	18ee      	addge	r6, r5, r3
 8007600:	1b5c      	sublt	r4, r3, r5
 8007602:	9b05      	ldr	r3, [sp, #20]
 8007604:	bfa8      	it	ge
 8007606:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007608:	eba5 0503 	sub.w	r5, r5, r3
 800760c:	4415      	add	r5, r2
 800760e:	4b71      	ldr	r3, [pc, #452]	; (80077d4 <_strtod_l+0x884>)
 8007610:	f105 35ff 	add.w	r5, r5, #4294967295
 8007614:	bfb8      	it	lt
 8007616:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007618:	429d      	cmp	r5, r3
 800761a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800761e:	f280 80c9 	bge.w	80077b4 <_strtod_l+0x864>
 8007622:	1b5b      	subs	r3, r3, r5
 8007624:	2b1f      	cmp	r3, #31
 8007626:	f04f 0701 	mov.w	r7, #1
 800762a:	eba2 0203 	sub.w	r2, r2, r3
 800762e:	f300 80b6 	bgt.w	800779e <_strtod_l+0x84e>
 8007632:	2500      	movs	r5, #0
 8007634:	fa07 f303 	lsl.w	r3, r7, r3
 8007638:	930f      	str	r3, [sp, #60]	; 0x3c
 800763a:	18b7      	adds	r7, r6, r2
 800763c:	9b05      	ldr	r3, [sp, #20]
 800763e:	42be      	cmp	r6, r7
 8007640:	4414      	add	r4, r2
 8007642:	441c      	add	r4, r3
 8007644:	4633      	mov	r3, r6
 8007646:	bfa8      	it	ge
 8007648:	463b      	movge	r3, r7
 800764a:	42a3      	cmp	r3, r4
 800764c:	bfa8      	it	ge
 800764e:	4623      	movge	r3, r4
 8007650:	2b00      	cmp	r3, #0
 8007652:	bfc2      	ittt	gt
 8007654:	1aff      	subgt	r7, r7, r3
 8007656:	1ae4      	subgt	r4, r4, r3
 8007658:	1af6      	subgt	r6, r6, r3
 800765a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800765c:	2b00      	cmp	r3, #0
 800765e:	dd17      	ble.n	8007690 <_strtod_l+0x740>
 8007660:	461a      	mov	r2, r3
 8007662:	4650      	mov	r0, sl
 8007664:	9904      	ldr	r1, [sp, #16]
 8007666:	f001 f881 	bl	800876c <__pow5mult>
 800766a:	9004      	str	r0, [sp, #16]
 800766c:	2800      	cmp	r0, #0
 800766e:	f43f aeb2 	beq.w	80073d6 <_strtod_l+0x486>
 8007672:	4601      	mov	r1, r0
 8007674:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007676:	4650      	mov	r0, sl
 8007678:	f000 ffd4 	bl	8008624 <__multiply>
 800767c:	9009      	str	r0, [sp, #36]	; 0x24
 800767e:	2800      	cmp	r0, #0
 8007680:	f43f aea9 	beq.w	80073d6 <_strtod_l+0x486>
 8007684:	4650      	mov	r0, sl
 8007686:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007688:	f000 feb2 	bl	80083f0 <_Bfree>
 800768c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800768e:	931c      	str	r3, [sp, #112]	; 0x70
 8007690:	2f00      	cmp	r7, #0
 8007692:	f300 8093 	bgt.w	80077bc <_strtod_l+0x86c>
 8007696:	9b07      	ldr	r3, [sp, #28]
 8007698:	2b00      	cmp	r3, #0
 800769a:	dd08      	ble.n	80076ae <_strtod_l+0x75e>
 800769c:	4650      	mov	r0, sl
 800769e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80076a0:	9906      	ldr	r1, [sp, #24]
 80076a2:	f001 f863 	bl	800876c <__pow5mult>
 80076a6:	9006      	str	r0, [sp, #24]
 80076a8:	2800      	cmp	r0, #0
 80076aa:	f43f ae94 	beq.w	80073d6 <_strtod_l+0x486>
 80076ae:	2c00      	cmp	r4, #0
 80076b0:	dd08      	ble.n	80076c4 <_strtod_l+0x774>
 80076b2:	4622      	mov	r2, r4
 80076b4:	4650      	mov	r0, sl
 80076b6:	9906      	ldr	r1, [sp, #24]
 80076b8:	f001 f8b2 	bl	8008820 <__lshift>
 80076bc:	9006      	str	r0, [sp, #24]
 80076be:	2800      	cmp	r0, #0
 80076c0:	f43f ae89 	beq.w	80073d6 <_strtod_l+0x486>
 80076c4:	2e00      	cmp	r6, #0
 80076c6:	dd08      	ble.n	80076da <_strtod_l+0x78a>
 80076c8:	4632      	mov	r2, r6
 80076ca:	4650      	mov	r0, sl
 80076cc:	9904      	ldr	r1, [sp, #16]
 80076ce:	f001 f8a7 	bl	8008820 <__lshift>
 80076d2:	9004      	str	r0, [sp, #16]
 80076d4:	2800      	cmp	r0, #0
 80076d6:	f43f ae7e 	beq.w	80073d6 <_strtod_l+0x486>
 80076da:	4650      	mov	r0, sl
 80076dc:	9a06      	ldr	r2, [sp, #24]
 80076de:	991c      	ldr	r1, [sp, #112]	; 0x70
 80076e0:	f001 f926 	bl	8008930 <__mdiff>
 80076e4:	4683      	mov	fp, r0
 80076e6:	2800      	cmp	r0, #0
 80076e8:	f43f ae75 	beq.w	80073d6 <_strtod_l+0x486>
 80076ec:	2400      	movs	r4, #0
 80076ee:	68c3      	ldr	r3, [r0, #12]
 80076f0:	9904      	ldr	r1, [sp, #16]
 80076f2:	60c4      	str	r4, [r0, #12]
 80076f4:	930d      	str	r3, [sp, #52]	; 0x34
 80076f6:	f001 f8ff 	bl	80088f8 <__mcmp>
 80076fa:	42a0      	cmp	r0, r4
 80076fc:	da70      	bge.n	80077e0 <_strtod_l+0x890>
 80076fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007700:	ea53 0308 	orrs.w	r3, r3, r8
 8007704:	f040 8096 	bne.w	8007834 <_strtod_l+0x8e4>
 8007708:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800770c:	2b00      	cmp	r3, #0
 800770e:	f040 8091 	bne.w	8007834 <_strtod_l+0x8e4>
 8007712:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007716:	0d1b      	lsrs	r3, r3, #20
 8007718:	051b      	lsls	r3, r3, #20
 800771a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800771e:	f240 8089 	bls.w	8007834 <_strtod_l+0x8e4>
 8007722:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007726:	b923      	cbnz	r3, 8007732 <_strtod_l+0x7e2>
 8007728:	f8db 3010 	ldr.w	r3, [fp, #16]
 800772c:	2b01      	cmp	r3, #1
 800772e:	f340 8081 	ble.w	8007834 <_strtod_l+0x8e4>
 8007732:	4659      	mov	r1, fp
 8007734:	2201      	movs	r2, #1
 8007736:	4650      	mov	r0, sl
 8007738:	f001 f872 	bl	8008820 <__lshift>
 800773c:	9904      	ldr	r1, [sp, #16]
 800773e:	4683      	mov	fp, r0
 8007740:	f001 f8da 	bl	80088f8 <__mcmp>
 8007744:	2800      	cmp	r0, #0
 8007746:	dd75      	ble.n	8007834 <_strtod_l+0x8e4>
 8007748:	9905      	ldr	r1, [sp, #20]
 800774a:	464b      	mov	r3, r9
 800774c:	4a22      	ldr	r2, [pc, #136]	; (80077d8 <_strtod_l+0x888>)
 800774e:	2900      	cmp	r1, #0
 8007750:	f000 8091 	beq.w	8007876 <_strtod_l+0x926>
 8007754:	ea02 0109 	and.w	r1, r2, r9
 8007758:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800775c:	f300 808b 	bgt.w	8007876 <_strtod_l+0x926>
 8007760:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007764:	f77f aea9 	ble.w	80074ba <_strtod_l+0x56a>
 8007768:	2300      	movs	r3, #0
 800776a:	4a1c      	ldr	r2, [pc, #112]	; (80077dc <_strtod_l+0x88c>)
 800776c:	4640      	mov	r0, r8
 800776e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007772:	4649      	mov	r1, r9
 8007774:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007778:	f7f8 feae 	bl	80004d8 <__aeabi_dmul>
 800777c:	460b      	mov	r3, r1
 800777e:	4303      	orrs	r3, r0
 8007780:	bf08      	it	eq
 8007782:	2322      	moveq	r3, #34	; 0x22
 8007784:	4680      	mov	r8, r0
 8007786:	4689      	mov	r9, r1
 8007788:	bf08      	it	eq
 800778a:	f8ca 3000 	streq.w	r3, [sl]
 800778e:	e62d      	b.n	80073ec <_strtod_l+0x49c>
 8007790:	f04f 32ff 	mov.w	r2, #4294967295
 8007794:	fa02 f303 	lsl.w	r3, r2, r3
 8007798:	ea03 0808 	and.w	r8, r3, r8
 800779c:	e6db      	b.n	8007556 <_strtod_l+0x606>
 800779e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80077a2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80077a6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80077aa:	35e2      	adds	r5, #226	; 0xe2
 80077ac:	fa07 f505 	lsl.w	r5, r7, r5
 80077b0:	970f      	str	r7, [sp, #60]	; 0x3c
 80077b2:	e742      	b.n	800763a <_strtod_l+0x6ea>
 80077b4:	2301      	movs	r3, #1
 80077b6:	2500      	movs	r5, #0
 80077b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80077ba:	e73e      	b.n	800763a <_strtod_l+0x6ea>
 80077bc:	463a      	mov	r2, r7
 80077be:	4650      	mov	r0, sl
 80077c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80077c2:	f001 f82d 	bl	8008820 <__lshift>
 80077c6:	901c      	str	r0, [sp, #112]	; 0x70
 80077c8:	2800      	cmp	r0, #0
 80077ca:	f47f af64 	bne.w	8007696 <_strtod_l+0x746>
 80077ce:	e602      	b.n	80073d6 <_strtod_l+0x486>
 80077d0:	0800c370 	.word	0x0800c370
 80077d4:	fffffc02 	.word	0xfffffc02
 80077d8:	7ff00000 	.word	0x7ff00000
 80077dc:	39500000 	.word	0x39500000
 80077e0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80077e4:	d166      	bne.n	80078b4 <_strtod_l+0x964>
 80077e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077ec:	b35a      	cbz	r2, 8007846 <_strtod_l+0x8f6>
 80077ee:	4a9c      	ldr	r2, [pc, #624]	; (8007a60 <_strtod_l+0xb10>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d12c      	bne.n	800784e <_strtod_l+0x8fe>
 80077f4:	9b05      	ldr	r3, [sp, #20]
 80077f6:	4640      	mov	r0, r8
 80077f8:	b303      	cbz	r3, 800783c <_strtod_l+0x8ec>
 80077fa:	464b      	mov	r3, r9
 80077fc:	4a99      	ldr	r2, [pc, #612]	; (8007a64 <_strtod_l+0xb14>)
 80077fe:	f04f 31ff 	mov.w	r1, #4294967295
 8007802:	401a      	ands	r2, r3
 8007804:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007808:	d81b      	bhi.n	8007842 <_strtod_l+0x8f2>
 800780a:	0d12      	lsrs	r2, r2, #20
 800780c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007810:	fa01 f303 	lsl.w	r3, r1, r3
 8007814:	4298      	cmp	r0, r3
 8007816:	d11a      	bne.n	800784e <_strtod_l+0x8fe>
 8007818:	4b93      	ldr	r3, [pc, #588]	; (8007a68 <_strtod_l+0xb18>)
 800781a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800781c:	429a      	cmp	r2, r3
 800781e:	d102      	bne.n	8007826 <_strtod_l+0x8d6>
 8007820:	3001      	adds	r0, #1
 8007822:	f43f add8 	beq.w	80073d6 <_strtod_l+0x486>
 8007826:	f04f 0800 	mov.w	r8, #0
 800782a:	4b8e      	ldr	r3, [pc, #568]	; (8007a64 <_strtod_l+0xb14>)
 800782c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800782e:	401a      	ands	r2, r3
 8007830:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007834:	9b05      	ldr	r3, [sp, #20]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d196      	bne.n	8007768 <_strtod_l+0x818>
 800783a:	e5d7      	b.n	80073ec <_strtod_l+0x49c>
 800783c:	f04f 33ff 	mov.w	r3, #4294967295
 8007840:	e7e8      	b.n	8007814 <_strtod_l+0x8c4>
 8007842:	460b      	mov	r3, r1
 8007844:	e7e6      	b.n	8007814 <_strtod_l+0x8c4>
 8007846:	ea53 0308 	orrs.w	r3, r3, r8
 800784a:	f43f af7d 	beq.w	8007748 <_strtod_l+0x7f8>
 800784e:	b1e5      	cbz	r5, 800788a <_strtod_l+0x93a>
 8007850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007852:	421d      	tst	r5, r3
 8007854:	d0ee      	beq.n	8007834 <_strtod_l+0x8e4>
 8007856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007858:	4640      	mov	r0, r8
 800785a:	4649      	mov	r1, r9
 800785c:	9a05      	ldr	r2, [sp, #20]
 800785e:	b1c3      	cbz	r3, 8007892 <_strtod_l+0x942>
 8007860:	f7ff fb55 	bl	8006f0e <sulp>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800786c:	f7f8 fc7e 	bl	800016c <__adddf3>
 8007870:	4680      	mov	r8, r0
 8007872:	4689      	mov	r9, r1
 8007874:	e7de      	b.n	8007834 <_strtod_l+0x8e4>
 8007876:	4013      	ands	r3, r2
 8007878:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800787c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007880:	f04f 38ff 	mov.w	r8, #4294967295
 8007884:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007888:	e7d4      	b.n	8007834 <_strtod_l+0x8e4>
 800788a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800788c:	ea13 0f08 	tst.w	r3, r8
 8007890:	e7e0      	b.n	8007854 <_strtod_l+0x904>
 8007892:	f7ff fb3c 	bl	8006f0e <sulp>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800789e:	f7f8 fc63 	bl	8000168 <__aeabi_dsub>
 80078a2:	2200      	movs	r2, #0
 80078a4:	2300      	movs	r3, #0
 80078a6:	4680      	mov	r8, r0
 80078a8:	4689      	mov	r9, r1
 80078aa:	f7f9 f87d 	bl	80009a8 <__aeabi_dcmpeq>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d0c0      	beq.n	8007834 <_strtod_l+0x8e4>
 80078b2:	e602      	b.n	80074ba <_strtod_l+0x56a>
 80078b4:	4658      	mov	r0, fp
 80078b6:	9904      	ldr	r1, [sp, #16]
 80078b8:	f001 f9a0 	bl	8008bfc <__ratio>
 80078bc:	2200      	movs	r2, #0
 80078be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078c2:	4606      	mov	r6, r0
 80078c4:	460f      	mov	r7, r1
 80078c6:	f7f9 f883 	bl	80009d0 <__aeabi_dcmple>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d075      	beq.n	80079ba <_strtod_l+0xa6a>
 80078ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d047      	beq.n	8007964 <_strtod_l+0xa14>
 80078d4:	2600      	movs	r6, #0
 80078d6:	4f65      	ldr	r7, [pc, #404]	; (8007a6c <_strtod_l+0xb1c>)
 80078d8:	4d64      	ldr	r5, [pc, #400]	; (8007a6c <_strtod_l+0xb1c>)
 80078da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078e0:	0d1b      	lsrs	r3, r3, #20
 80078e2:	051b      	lsls	r3, r3, #20
 80078e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80078e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078e8:	4b61      	ldr	r3, [pc, #388]	; (8007a70 <_strtod_l+0xb20>)
 80078ea:	429a      	cmp	r2, r3
 80078ec:	f040 80c8 	bne.w	8007a80 <_strtod_l+0xb30>
 80078f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80078f4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80078f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078fa:	4640      	mov	r0, r8
 80078fc:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007900:	4649      	mov	r1, r9
 8007902:	f001 f8a5 	bl	8008a50 <__ulp>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	4630      	mov	r0, r6
 800790c:	4639      	mov	r1, r7
 800790e:	f7f8 fde3 	bl	80004d8 <__aeabi_dmul>
 8007912:	4642      	mov	r2, r8
 8007914:	464b      	mov	r3, r9
 8007916:	f7f8 fc29 	bl	800016c <__adddf3>
 800791a:	460b      	mov	r3, r1
 800791c:	4951      	ldr	r1, [pc, #324]	; (8007a64 <_strtod_l+0xb14>)
 800791e:	4a55      	ldr	r2, [pc, #340]	; (8007a74 <_strtod_l+0xb24>)
 8007920:	4019      	ands	r1, r3
 8007922:	4291      	cmp	r1, r2
 8007924:	4680      	mov	r8, r0
 8007926:	d95e      	bls.n	80079e6 <_strtod_l+0xa96>
 8007928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800792a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800792e:	4293      	cmp	r3, r2
 8007930:	d103      	bne.n	800793a <_strtod_l+0x9ea>
 8007932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007934:	3301      	adds	r3, #1
 8007936:	f43f ad4e 	beq.w	80073d6 <_strtod_l+0x486>
 800793a:	f04f 38ff 	mov.w	r8, #4294967295
 800793e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007a68 <_strtod_l+0xb18>
 8007942:	4650      	mov	r0, sl
 8007944:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007946:	f000 fd53 	bl	80083f0 <_Bfree>
 800794a:	4650      	mov	r0, sl
 800794c:	9906      	ldr	r1, [sp, #24]
 800794e:	f000 fd4f 	bl	80083f0 <_Bfree>
 8007952:	4650      	mov	r0, sl
 8007954:	9904      	ldr	r1, [sp, #16]
 8007956:	f000 fd4b 	bl	80083f0 <_Bfree>
 800795a:	4659      	mov	r1, fp
 800795c:	4650      	mov	r0, sl
 800795e:	f000 fd47 	bl	80083f0 <_Bfree>
 8007962:	e61c      	b.n	800759e <_strtod_l+0x64e>
 8007964:	f1b8 0f00 	cmp.w	r8, #0
 8007968:	d119      	bne.n	800799e <_strtod_l+0xa4e>
 800796a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800796c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007970:	b9e3      	cbnz	r3, 80079ac <_strtod_l+0xa5c>
 8007972:	2200      	movs	r2, #0
 8007974:	4630      	mov	r0, r6
 8007976:	4639      	mov	r1, r7
 8007978:	4b3c      	ldr	r3, [pc, #240]	; (8007a6c <_strtod_l+0xb1c>)
 800797a:	f7f9 f81f 	bl	80009bc <__aeabi_dcmplt>
 800797e:	b9c8      	cbnz	r0, 80079b4 <_strtod_l+0xa64>
 8007980:	2200      	movs	r2, #0
 8007982:	4630      	mov	r0, r6
 8007984:	4639      	mov	r1, r7
 8007986:	4b3c      	ldr	r3, [pc, #240]	; (8007a78 <_strtod_l+0xb28>)
 8007988:	f7f8 fda6 	bl	80004d8 <__aeabi_dmul>
 800798c:	4604      	mov	r4, r0
 800798e:	460d      	mov	r5, r1
 8007990:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007994:	9418      	str	r4, [sp, #96]	; 0x60
 8007996:	9319      	str	r3, [sp, #100]	; 0x64
 8007998:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800799c:	e79d      	b.n	80078da <_strtod_l+0x98a>
 800799e:	f1b8 0f01 	cmp.w	r8, #1
 80079a2:	d103      	bne.n	80079ac <_strtod_l+0xa5c>
 80079a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f43f ad87 	beq.w	80074ba <_strtod_l+0x56a>
 80079ac:	2600      	movs	r6, #0
 80079ae:	2400      	movs	r4, #0
 80079b0:	4f32      	ldr	r7, [pc, #200]	; (8007a7c <_strtod_l+0xb2c>)
 80079b2:	e791      	b.n	80078d8 <_strtod_l+0x988>
 80079b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80079b6:	4d30      	ldr	r5, [pc, #192]	; (8007a78 <_strtod_l+0xb28>)
 80079b8:	e7ea      	b.n	8007990 <_strtod_l+0xa40>
 80079ba:	4b2f      	ldr	r3, [pc, #188]	; (8007a78 <_strtod_l+0xb28>)
 80079bc:	2200      	movs	r2, #0
 80079be:	4630      	mov	r0, r6
 80079c0:	4639      	mov	r1, r7
 80079c2:	f7f8 fd89 	bl	80004d8 <__aeabi_dmul>
 80079c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079c8:	4604      	mov	r4, r0
 80079ca:	460d      	mov	r5, r1
 80079cc:	b933      	cbnz	r3, 80079dc <_strtod_l+0xa8c>
 80079ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079d2:	9010      	str	r0, [sp, #64]	; 0x40
 80079d4:	9311      	str	r3, [sp, #68]	; 0x44
 80079d6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80079da:	e77e      	b.n	80078da <_strtod_l+0x98a>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80079e4:	e7f7      	b.n	80079d6 <_strtod_l+0xa86>
 80079e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80079ea:	9b05      	ldr	r3, [sp, #20]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1a8      	bne.n	8007942 <_strtod_l+0x9f2>
 80079f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079f6:	0d1b      	lsrs	r3, r3, #20
 80079f8:	051b      	lsls	r3, r3, #20
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d1a1      	bne.n	8007942 <_strtod_l+0x9f2>
 80079fe:	4620      	mov	r0, r4
 8007a00:	4629      	mov	r1, r5
 8007a02:	f7f9 fb35 	bl	8001070 <__aeabi_d2lz>
 8007a06:	f7f8 fd39 	bl	800047c <__aeabi_l2d>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	4620      	mov	r0, r4
 8007a10:	4629      	mov	r1, r5
 8007a12:	f7f8 fba9 	bl	8000168 <__aeabi_dsub>
 8007a16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a1c:	ea43 0308 	orr.w	r3, r3, r8
 8007a20:	4313      	orrs	r3, r2
 8007a22:	4604      	mov	r4, r0
 8007a24:	460d      	mov	r5, r1
 8007a26:	d066      	beq.n	8007af6 <_strtod_l+0xba6>
 8007a28:	a309      	add	r3, pc, #36	; (adr r3, 8007a50 <_strtod_l+0xb00>)
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	f7f8 ffc5 	bl	80009bc <__aeabi_dcmplt>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	f47f acda 	bne.w	80073ec <_strtod_l+0x49c>
 8007a38:	a307      	add	r3, pc, #28	; (adr r3, 8007a58 <_strtod_l+0xb08>)
 8007a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3e:	4620      	mov	r0, r4
 8007a40:	4629      	mov	r1, r5
 8007a42:	f7f8 ffd9 	bl	80009f8 <__aeabi_dcmpgt>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	f43f af7b 	beq.w	8007942 <_strtod_l+0x9f2>
 8007a4c:	e4ce      	b.n	80073ec <_strtod_l+0x49c>
 8007a4e:	bf00      	nop
 8007a50:	94a03595 	.word	0x94a03595
 8007a54:	3fdfffff 	.word	0x3fdfffff
 8007a58:	35afe535 	.word	0x35afe535
 8007a5c:	3fe00000 	.word	0x3fe00000
 8007a60:	000fffff 	.word	0x000fffff
 8007a64:	7ff00000 	.word	0x7ff00000
 8007a68:	7fefffff 	.word	0x7fefffff
 8007a6c:	3ff00000 	.word	0x3ff00000
 8007a70:	7fe00000 	.word	0x7fe00000
 8007a74:	7c9fffff 	.word	0x7c9fffff
 8007a78:	3fe00000 	.word	0x3fe00000
 8007a7c:	bff00000 	.word	0xbff00000
 8007a80:	9b05      	ldr	r3, [sp, #20]
 8007a82:	b313      	cbz	r3, 8007aca <_strtod_l+0xb7a>
 8007a84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a8a:	d81e      	bhi.n	8007aca <_strtod_l+0xb7a>
 8007a8c:	a326      	add	r3, pc, #152	; (adr r3, 8007b28 <_strtod_l+0xbd8>)
 8007a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a92:	4620      	mov	r0, r4
 8007a94:	4629      	mov	r1, r5
 8007a96:	f7f8 ff9b 	bl	80009d0 <__aeabi_dcmple>
 8007a9a:	b190      	cbz	r0, 8007ac2 <_strtod_l+0xb72>
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f7f8 fff2 	bl	8000a88 <__aeabi_d2uiz>
 8007aa4:	2801      	cmp	r0, #1
 8007aa6:	bf38      	it	cc
 8007aa8:	2001      	movcc	r0, #1
 8007aaa:	f7f8 fc9b 	bl	80003e4 <__aeabi_ui2d>
 8007aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	460d      	mov	r5, r1
 8007ab4:	b9d3      	cbnz	r3, 8007aec <_strtod_l+0xb9c>
 8007ab6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007aba:	9012      	str	r0, [sp, #72]	; 0x48
 8007abc:	9313      	str	r3, [sp, #76]	; 0x4c
 8007abe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007ac2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ac4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007ac8:	1a9f      	subs	r7, r3, r2
 8007aca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ace:	f000 ffbf 	bl	8008a50 <__ulp>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	4639      	mov	r1, r7
 8007ada:	f7f8 fcfd 	bl	80004d8 <__aeabi_dmul>
 8007ade:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ae2:	f7f8 fb43 	bl	800016c <__adddf3>
 8007ae6:	4680      	mov	r8, r0
 8007ae8:	4689      	mov	r9, r1
 8007aea:	e77e      	b.n	80079ea <_strtod_l+0xa9a>
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007af4:	e7e3      	b.n	8007abe <_strtod_l+0xb6e>
 8007af6:	a30e      	add	r3, pc, #56	; (adr r3, 8007b30 <_strtod_l+0xbe0>)
 8007af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afc:	f7f8 ff5e 	bl	80009bc <__aeabi_dcmplt>
 8007b00:	e7a1      	b.n	8007a46 <_strtod_l+0xaf6>
 8007b02:	2300      	movs	r3, #0
 8007b04:	930c      	str	r3, [sp, #48]	; 0x30
 8007b06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	f7ff ba65 	b.w	8006fda <_strtod_l+0x8a>
 8007b10:	2b65      	cmp	r3, #101	; 0x65
 8007b12:	f43f ab5c 	beq.w	80071ce <_strtod_l+0x27e>
 8007b16:	2b45      	cmp	r3, #69	; 0x45
 8007b18:	f43f ab59 	beq.w	80071ce <_strtod_l+0x27e>
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f7ff bb8d 	b.w	800723c <_strtod_l+0x2ec>
 8007b22:	bf00      	nop
 8007b24:	f3af 8000 	nop.w
 8007b28:	ffc00000 	.word	0xffc00000
 8007b2c:	41dfffff 	.word	0x41dfffff
 8007b30:	94a03595 	.word	0x94a03595
 8007b34:	3fcfffff 	.word	0x3fcfffff

08007b38 <_strtod_r>:
 8007b38:	4b01      	ldr	r3, [pc, #4]	; (8007b40 <_strtod_r+0x8>)
 8007b3a:	f7ff ba09 	b.w	8006f50 <_strtod_l>
 8007b3e:	bf00      	nop
 8007b40:	20000074 	.word	0x20000074

08007b44 <strtod>:
 8007b44:	460a      	mov	r2, r1
 8007b46:	4601      	mov	r1, r0
 8007b48:	4802      	ldr	r0, [pc, #8]	; (8007b54 <strtod+0x10>)
 8007b4a:	4b03      	ldr	r3, [pc, #12]	; (8007b58 <strtod+0x14>)
 8007b4c:	6800      	ldr	r0, [r0, #0]
 8007b4e:	f7ff b9ff 	b.w	8006f50 <_strtod_l>
 8007b52:	bf00      	nop
 8007b54:	2000000c 	.word	0x2000000c
 8007b58:	20000074 	.word	0x20000074

08007b5c <_strtol_l.isra.0>:
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b62:	4686      	mov	lr, r0
 8007b64:	d001      	beq.n	8007b6a <_strtol_l.isra.0+0xe>
 8007b66:	2b24      	cmp	r3, #36	; 0x24
 8007b68:	d906      	bls.n	8007b78 <_strtol_l.isra.0+0x1c>
 8007b6a:	f7fe ff43 	bl	80069f4 <__errno>
 8007b6e:	2316      	movs	r3, #22
 8007b70:	6003      	str	r3, [r0, #0]
 8007b72:	2000      	movs	r0, #0
 8007b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b78:	468c      	mov	ip, r1
 8007b7a:	4e3a      	ldr	r6, [pc, #232]	; (8007c64 <_strtol_l.isra.0+0x108>)
 8007b7c:	4660      	mov	r0, ip
 8007b7e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007b82:	5da5      	ldrb	r5, [r4, r6]
 8007b84:	f015 0508 	ands.w	r5, r5, #8
 8007b88:	d1f8      	bne.n	8007b7c <_strtol_l.isra.0+0x20>
 8007b8a:	2c2d      	cmp	r4, #45	; 0x2d
 8007b8c:	d133      	bne.n	8007bf6 <_strtol_l.isra.0+0x9a>
 8007b8e:	f04f 0801 	mov.w	r8, #1
 8007b92:	f89c 4000 	ldrb.w	r4, [ip]
 8007b96:	f100 0c02 	add.w	ip, r0, #2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d05d      	beq.n	8007c5a <_strtol_l.isra.0+0xfe>
 8007b9e:	2b10      	cmp	r3, #16
 8007ba0:	d10c      	bne.n	8007bbc <_strtol_l.isra.0+0x60>
 8007ba2:	2c30      	cmp	r4, #48	; 0x30
 8007ba4:	d10a      	bne.n	8007bbc <_strtol_l.isra.0+0x60>
 8007ba6:	f89c 0000 	ldrb.w	r0, [ip]
 8007baa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007bae:	2858      	cmp	r0, #88	; 0x58
 8007bb0:	d14e      	bne.n	8007c50 <_strtol_l.isra.0+0xf4>
 8007bb2:	2310      	movs	r3, #16
 8007bb4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8007bb8:	f10c 0c02 	add.w	ip, ip, #2
 8007bbc:	2500      	movs	r5, #0
 8007bbe:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8007bc2:	3f01      	subs	r7, #1
 8007bc4:	fbb7 f9f3 	udiv	r9, r7, r3
 8007bc8:	4628      	mov	r0, r5
 8007bca:	fb03 7a19 	mls	sl, r3, r9, r7
 8007bce:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8007bd2:	2e09      	cmp	r6, #9
 8007bd4:	d818      	bhi.n	8007c08 <_strtol_l.isra.0+0xac>
 8007bd6:	4634      	mov	r4, r6
 8007bd8:	42a3      	cmp	r3, r4
 8007bda:	dd24      	ble.n	8007c26 <_strtol_l.isra.0+0xca>
 8007bdc:	2d00      	cmp	r5, #0
 8007bde:	db1f      	blt.n	8007c20 <_strtol_l.isra.0+0xc4>
 8007be0:	4581      	cmp	r9, r0
 8007be2:	d31d      	bcc.n	8007c20 <_strtol_l.isra.0+0xc4>
 8007be4:	d101      	bne.n	8007bea <_strtol_l.isra.0+0x8e>
 8007be6:	45a2      	cmp	sl, r4
 8007be8:	db1a      	blt.n	8007c20 <_strtol_l.isra.0+0xc4>
 8007bea:	2501      	movs	r5, #1
 8007bec:	fb00 4003 	mla	r0, r0, r3, r4
 8007bf0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007bf4:	e7eb      	b.n	8007bce <_strtol_l.isra.0+0x72>
 8007bf6:	2c2b      	cmp	r4, #43	; 0x2b
 8007bf8:	bf08      	it	eq
 8007bfa:	f89c 4000 	ldrbeq.w	r4, [ip]
 8007bfe:	46a8      	mov	r8, r5
 8007c00:	bf08      	it	eq
 8007c02:	f100 0c02 	addeq.w	ip, r0, #2
 8007c06:	e7c8      	b.n	8007b9a <_strtol_l.isra.0+0x3e>
 8007c08:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8007c0c:	2e19      	cmp	r6, #25
 8007c0e:	d801      	bhi.n	8007c14 <_strtol_l.isra.0+0xb8>
 8007c10:	3c37      	subs	r4, #55	; 0x37
 8007c12:	e7e1      	b.n	8007bd8 <_strtol_l.isra.0+0x7c>
 8007c14:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007c18:	2e19      	cmp	r6, #25
 8007c1a:	d804      	bhi.n	8007c26 <_strtol_l.isra.0+0xca>
 8007c1c:	3c57      	subs	r4, #87	; 0x57
 8007c1e:	e7db      	b.n	8007bd8 <_strtol_l.isra.0+0x7c>
 8007c20:	f04f 35ff 	mov.w	r5, #4294967295
 8007c24:	e7e4      	b.n	8007bf0 <_strtol_l.isra.0+0x94>
 8007c26:	2d00      	cmp	r5, #0
 8007c28:	da08      	bge.n	8007c3c <_strtol_l.isra.0+0xe0>
 8007c2a:	2322      	movs	r3, #34	; 0x22
 8007c2c:	4638      	mov	r0, r7
 8007c2e:	f8ce 3000 	str.w	r3, [lr]
 8007c32:	2a00      	cmp	r2, #0
 8007c34:	d09e      	beq.n	8007b74 <_strtol_l.isra.0+0x18>
 8007c36:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007c3a:	e007      	b.n	8007c4c <_strtol_l.isra.0+0xf0>
 8007c3c:	f1b8 0f00 	cmp.w	r8, #0
 8007c40:	d000      	beq.n	8007c44 <_strtol_l.isra.0+0xe8>
 8007c42:	4240      	negs	r0, r0
 8007c44:	2a00      	cmp	r2, #0
 8007c46:	d095      	beq.n	8007b74 <_strtol_l.isra.0+0x18>
 8007c48:	2d00      	cmp	r5, #0
 8007c4a:	d1f4      	bne.n	8007c36 <_strtol_l.isra.0+0xda>
 8007c4c:	6011      	str	r1, [r2, #0]
 8007c4e:	e791      	b.n	8007b74 <_strtol_l.isra.0+0x18>
 8007c50:	2430      	movs	r4, #48	; 0x30
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1b2      	bne.n	8007bbc <_strtol_l.isra.0+0x60>
 8007c56:	2308      	movs	r3, #8
 8007c58:	e7b0      	b.n	8007bbc <_strtol_l.isra.0+0x60>
 8007c5a:	2c30      	cmp	r4, #48	; 0x30
 8007c5c:	d0a3      	beq.n	8007ba6 <_strtol_l.isra.0+0x4a>
 8007c5e:	230a      	movs	r3, #10
 8007c60:	e7ac      	b.n	8007bbc <_strtol_l.isra.0+0x60>
 8007c62:	bf00      	nop
 8007c64:	0800c399 	.word	0x0800c399

08007c68 <_strtol_r>:
 8007c68:	f7ff bf78 	b.w	8007b5c <_strtol_l.isra.0>

08007c6c <strtol>:
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	460a      	mov	r2, r1
 8007c70:	4601      	mov	r1, r0
 8007c72:	4802      	ldr	r0, [pc, #8]	; (8007c7c <strtol+0x10>)
 8007c74:	6800      	ldr	r0, [r0, #0]
 8007c76:	f7ff bf71 	b.w	8007b5c <_strtol_l.isra.0>
 8007c7a:	bf00      	nop
 8007c7c:	2000000c 	.word	0x2000000c

08007c80 <rshift>:
 8007c80:	6903      	ldr	r3, [r0, #16]
 8007c82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007c8a:	f100 0414 	add.w	r4, r0, #20
 8007c8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007c92:	dd46      	ble.n	8007d22 <rshift+0xa2>
 8007c94:	f011 011f 	ands.w	r1, r1, #31
 8007c98:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007c9c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ca0:	d10c      	bne.n	8007cbc <rshift+0x3c>
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	f100 0710 	add.w	r7, r0, #16
 8007ca8:	42b1      	cmp	r1, r6
 8007caa:	d335      	bcc.n	8007d18 <rshift+0x98>
 8007cac:	1a9b      	subs	r3, r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	1eea      	subs	r2, r5, #3
 8007cb2:	4296      	cmp	r6, r2
 8007cb4:	bf38      	it	cc
 8007cb6:	2300      	movcc	r3, #0
 8007cb8:	4423      	add	r3, r4
 8007cba:	e015      	b.n	8007ce8 <rshift+0x68>
 8007cbc:	46a1      	mov	r9, r4
 8007cbe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007cc2:	f1c1 0820 	rsb	r8, r1, #32
 8007cc6:	40cf      	lsrs	r7, r1
 8007cc8:	f105 0e04 	add.w	lr, r5, #4
 8007ccc:	4576      	cmp	r6, lr
 8007cce:	46f4      	mov	ip, lr
 8007cd0:	d816      	bhi.n	8007d00 <rshift+0x80>
 8007cd2:	1a9b      	subs	r3, r3, r2
 8007cd4:	009a      	lsls	r2, r3, #2
 8007cd6:	3a04      	subs	r2, #4
 8007cd8:	3501      	adds	r5, #1
 8007cda:	42ae      	cmp	r6, r5
 8007cdc:	bf38      	it	cc
 8007cde:	2200      	movcc	r2, #0
 8007ce0:	18a3      	adds	r3, r4, r2
 8007ce2:	50a7      	str	r7, [r4, r2]
 8007ce4:	b107      	cbz	r7, 8007ce8 <rshift+0x68>
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	42a3      	cmp	r3, r4
 8007cea:	eba3 0204 	sub.w	r2, r3, r4
 8007cee:	bf08      	it	eq
 8007cf0:	2300      	moveq	r3, #0
 8007cf2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007cf6:	6102      	str	r2, [r0, #16]
 8007cf8:	bf08      	it	eq
 8007cfa:	6143      	streq	r3, [r0, #20]
 8007cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d00:	f8dc c000 	ldr.w	ip, [ip]
 8007d04:	fa0c fc08 	lsl.w	ip, ip, r8
 8007d08:	ea4c 0707 	orr.w	r7, ip, r7
 8007d0c:	f849 7b04 	str.w	r7, [r9], #4
 8007d10:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d14:	40cf      	lsrs	r7, r1
 8007d16:	e7d9      	b.n	8007ccc <rshift+0x4c>
 8007d18:	f851 cb04 	ldr.w	ip, [r1], #4
 8007d1c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007d20:	e7c2      	b.n	8007ca8 <rshift+0x28>
 8007d22:	4623      	mov	r3, r4
 8007d24:	e7e0      	b.n	8007ce8 <rshift+0x68>

08007d26 <__hexdig_fun>:
 8007d26:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007d2a:	2b09      	cmp	r3, #9
 8007d2c:	d802      	bhi.n	8007d34 <__hexdig_fun+0xe>
 8007d2e:	3820      	subs	r0, #32
 8007d30:	b2c0      	uxtb	r0, r0
 8007d32:	4770      	bx	lr
 8007d34:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007d38:	2b05      	cmp	r3, #5
 8007d3a:	d801      	bhi.n	8007d40 <__hexdig_fun+0x1a>
 8007d3c:	3847      	subs	r0, #71	; 0x47
 8007d3e:	e7f7      	b.n	8007d30 <__hexdig_fun+0xa>
 8007d40:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007d44:	2b05      	cmp	r3, #5
 8007d46:	d801      	bhi.n	8007d4c <__hexdig_fun+0x26>
 8007d48:	3827      	subs	r0, #39	; 0x27
 8007d4a:	e7f1      	b.n	8007d30 <__hexdig_fun+0xa>
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	4770      	bx	lr

08007d50 <__gethex>:
 8007d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d54:	b08b      	sub	sp, #44	; 0x2c
 8007d56:	9306      	str	r3, [sp, #24]
 8007d58:	4bb9      	ldr	r3, [pc, #740]	; (8008040 <__gethex+0x2f0>)
 8007d5a:	9002      	str	r0, [sp, #8]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	468b      	mov	fp, r1
 8007d60:	4618      	mov	r0, r3
 8007d62:	4690      	mov	r8, r2
 8007d64:	9303      	str	r3, [sp, #12]
 8007d66:	f7f8 f9f3 	bl	8000150 <strlen>
 8007d6a:	4682      	mov	sl, r0
 8007d6c:	9b03      	ldr	r3, [sp, #12]
 8007d6e:	f8db 2000 	ldr.w	r2, [fp]
 8007d72:	4403      	add	r3, r0
 8007d74:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007d78:	9307      	str	r3, [sp, #28]
 8007d7a:	1c93      	adds	r3, r2, #2
 8007d7c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007d80:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007d84:	32fe      	adds	r2, #254	; 0xfe
 8007d86:	18d1      	adds	r1, r2, r3
 8007d88:	461f      	mov	r7, r3
 8007d8a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007d8e:	9101      	str	r1, [sp, #4]
 8007d90:	2830      	cmp	r0, #48	; 0x30
 8007d92:	d0f8      	beq.n	8007d86 <__gethex+0x36>
 8007d94:	f7ff ffc7 	bl	8007d26 <__hexdig_fun>
 8007d98:	4604      	mov	r4, r0
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d13a      	bne.n	8007e14 <__gethex+0xc4>
 8007d9e:	4652      	mov	r2, sl
 8007da0:	4638      	mov	r0, r7
 8007da2:	9903      	ldr	r1, [sp, #12]
 8007da4:	f001 fb0c 	bl	80093c0 <strncmp>
 8007da8:	4605      	mov	r5, r0
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d166      	bne.n	8007e7c <__gethex+0x12c>
 8007dae:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007db2:	eb07 060a 	add.w	r6, r7, sl
 8007db6:	f7ff ffb6 	bl	8007d26 <__hexdig_fun>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d060      	beq.n	8007e80 <__gethex+0x130>
 8007dbe:	4633      	mov	r3, r6
 8007dc0:	7818      	ldrb	r0, [r3, #0]
 8007dc2:	461f      	mov	r7, r3
 8007dc4:	2830      	cmp	r0, #48	; 0x30
 8007dc6:	f103 0301 	add.w	r3, r3, #1
 8007dca:	d0f9      	beq.n	8007dc0 <__gethex+0x70>
 8007dcc:	f7ff ffab 	bl	8007d26 <__hexdig_fun>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	fab0 f480 	clz	r4, r0
 8007dd6:	4635      	mov	r5, r6
 8007dd8:	0964      	lsrs	r4, r4, #5
 8007dda:	9301      	str	r3, [sp, #4]
 8007ddc:	463a      	mov	r2, r7
 8007dde:	4616      	mov	r6, r2
 8007de0:	7830      	ldrb	r0, [r6, #0]
 8007de2:	3201      	adds	r2, #1
 8007de4:	f7ff ff9f 	bl	8007d26 <__hexdig_fun>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d1f8      	bne.n	8007dde <__gethex+0x8e>
 8007dec:	4652      	mov	r2, sl
 8007dee:	4630      	mov	r0, r6
 8007df0:	9903      	ldr	r1, [sp, #12]
 8007df2:	f001 fae5 	bl	80093c0 <strncmp>
 8007df6:	b980      	cbnz	r0, 8007e1a <__gethex+0xca>
 8007df8:	b94d      	cbnz	r5, 8007e0e <__gethex+0xbe>
 8007dfa:	eb06 050a 	add.w	r5, r6, sl
 8007dfe:	462a      	mov	r2, r5
 8007e00:	4616      	mov	r6, r2
 8007e02:	7830      	ldrb	r0, [r6, #0]
 8007e04:	3201      	adds	r2, #1
 8007e06:	f7ff ff8e 	bl	8007d26 <__hexdig_fun>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d1f8      	bne.n	8007e00 <__gethex+0xb0>
 8007e0e:	1bad      	subs	r5, r5, r6
 8007e10:	00ad      	lsls	r5, r5, #2
 8007e12:	e004      	b.n	8007e1e <__gethex+0xce>
 8007e14:	2400      	movs	r4, #0
 8007e16:	4625      	mov	r5, r4
 8007e18:	e7e0      	b.n	8007ddc <__gethex+0x8c>
 8007e1a:	2d00      	cmp	r5, #0
 8007e1c:	d1f7      	bne.n	8007e0e <__gethex+0xbe>
 8007e1e:	7833      	ldrb	r3, [r6, #0]
 8007e20:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e24:	2b50      	cmp	r3, #80	; 0x50
 8007e26:	d139      	bne.n	8007e9c <__gethex+0x14c>
 8007e28:	7873      	ldrb	r3, [r6, #1]
 8007e2a:	2b2b      	cmp	r3, #43	; 0x2b
 8007e2c:	d02a      	beq.n	8007e84 <__gethex+0x134>
 8007e2e:	2b2d      	cmp	r3, #45	; 0x2d
 8007e30:	d02c      	beq.n	8007e8c <__gethex+0x13c>
 8007e32:	f04f 0900 	mov.w	r9, #0
 8007e36:	1c71      	adds	r1, r6, #1
 8007e38:	7808      	ldrb	r0, [r1, #0]
 8007e3a:	f7ff ff74 	bl	8007d26 <__hexdig_fun>
 8007e3e:	1e43      	subs	r3, r0, #1
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b18      	cmp	r3, #24
 8007e44:	d82a      	bhi.n	8007e9c <__gethex+0x14c>
 8007e46:	f1a0 0210 	sub.w	r2, r0, #16
 8007e4a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007e4e:	f7ff ff6a 	bl	8007d26 <__hexdig_fun>
 8007e52:	1e43      	subs	r3, r0, #1
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b18      	cmp	r3, #24
 8007e58:	d91b      	bls.n	8007e92 <__gethex+0x142>
 8007e5a:	f1b9 0f00 	cmp.w	r9, #0
 8007e5e:	d000      	beq.n	8007e62 <__gethex+0x112>
 8007e60:	4252      	negs	r2, r2
 8007e62:	4415      	add	r5, r2
 8007e64:	f8cb 1000 	str.w	r1, [fp]
 8007e68:	b1d4      	cbz	r4, 8007ea0 <__gethex+0x150>
 8007e6a:	9b01      	ldr	r3, [sp, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	bf14      	ite	ne
 8007e70:	2700      	movne	r7, #0
 8007e72:	2706      	moveq	r7, #6
 8007e74:	4638      	mov	r0, r7
 8007e76:	b00b      	add	sp, #44	; 0x2c
 8007e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7c:	463e      	mov	r6, r7
 8007e7e:	4625      	mov	r5, r4
 8007e80:	2401      	movs	r4, #1
 8007e82:	e7cc      	b.n	8007e1e <__gethex+0xce>
 8007e84:	f04f 0900 	mov.w	r9, #0
 8007e88:	1cb1      	adds	r1, r6, #2
 8007e8a:	e7d5      	b.n	8007e38 <__gethex+0xe8>
 8007e8c:	f04f 0901 	mov.w	r9, #1
 8007e90:	e7fa      	b.n	8007e88 <__gethex+0x138>
 8007e92:	230a      	movs	r3, #10
 8007e94:	fb03 0202 	mla	r2, r3, r2, r0
 8007e98:	3a10      	subs	r2, #16
 8007e9a:	e7d6      	b.n	8007e4a <__gethex+0xfa>
 8007e9c:	4631      	mov	r1, r6
 8007e9e:	e7e1      	b.n	8007e64 <__gethex+0x114>
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	1bf3      	subs	r3, r6, r7
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	2b07      	cmp	r3, #7
 8007ea8:	dc0a      	bgt.n	8007ec0 <__gethex+0x170>
 8007eaa:	9802      	ldr	r0, [sp, #8]
 8007eac:	f000 fa60 	bl	8008370 <_Balloc>
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	b940      	cbnz	r0, 8007ec6 <__gethex+0x176>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	21de      	movs	r1, #222	; 0xde
 8007eb8:	4b62      	ldr	r3, [pc, #392]	; (8008044 <__gethex+0x2f4>)
 8007eba:	4863      	ldr	r0, [pc, #396]	; (8008048 <__gethex+0x2f8>)
 8007ebc:	f001 faa0 	bl	8009400 <__assert_func>
 8007ec0:	3101      	adds	r1, #1
 8007ec2:	105b      	asrs	r3, r3, #1
 8007ec4:	e7ef      	b.n	8007ea6 <__gethex+0x156>
 8007ec6:	f04f 0b00 	mov.w	fp, #0
 8007eca:	f100 0914 	add.w	r9, r0, #20
 8007ece:	f1ca 0301 	rsb	r3, sl, #1
 8007ed2:	f8cd 9010 	str.w	r9, [sp, #16]
 8007ed6:	f8cd b004 	str.w	fp, [sp, #4]
 8007eda:	9308      	str	r3, [sp, #32]
 8007edc:	42b7      	cmp	r7, r6
 8007ede:	d33f      	bcc.n	8007f60 <__gethex+0x210>
 8007ee0:	9f04      	ldr	r7, [sp, #16]
 8007ee2:	9b01      	ldr	r3, [sp, #4]
 8007ee4:	f847 3b04 	str.w	r3, [r7], #4
 8007ee8:	eba7 0709 	sub.w	r7, r7, r9
 8007eec:	10bf      	asrs	r7, r7, #2
 8007eee:	6127      	str	r7, [r4, #16]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 fb33 	bl	800855c <__hi0bits>
 8007ef6:	017f      	lsls	r7, r7, #5
 8007ef8:	f8d8 6000 	ldr.w	r6, [r8]
 8007efc:	1a3f      	subs	r7, r7, r0
 8007efe:	42b7      	cmp	r7, r6
 8007f00:	dd62      	ble.n	8007fc8 <__gethex+0x278>
 8007f02:	1bbf      	subs	r7, r7, r6
 8007f04:	4639      	mov	r1, r7
 8007f06:	4620      	mov	r0, r4
 8007f08:	f000 fec9 	bl	8008c9e <__any_on>
 8007f0c:	4682      	mov	sl, r0
 8007f0e:	b1a8      	cbz	r0, 8007f3c <__gethex+0x1ec>
 8007f10:	f04f 0a01 	mov.w	sl, #1
 8007f14:	1e7b      	subs	r3, r7, #1
 8007f16:	1159      	asrs	r1, r3, #5
 8007f18:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007f1c:	f003 021f 	and.w	r2, r3, #31
 8007f20:	fa0a f202 	lsl.w	r2, sl, r2
 8007f24:	420a      	tst	r2, r1
 8007f26:	d009      	beq.n	8007f3c <__gethex+0x1ec>
 8007f28:	4553      	cmp	r3, sl
 8007f2a:	dd05      	ble.n	8007f38 <__gethex+0x1e8>
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	1eb9      	subs	r1, r7, #2
 8007f30:	f000 feb5 	bl	8008c9e <__any_on>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	d144      	bne.n	8007fc2 <__gethex+0x272>
 8007f38:	f04f 0a02 	mov.w	sl, #2
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f7ff fe9e 	bl	8007c80 <rshift>
 8007f44:	443d      	add	r5, r7
 8007f46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f4a:	42ab      	cmp	r3, r5
 8007f4c:	da4a      	bge.n	8007fe4 <__gethex+0x294>
 8007f4e:	4621      	mov	r1, r4
 8007f50:	9802      	ldr	r0, [sp, #8]
 8007f52:	f000 fa4d 	bl	80083f0 <_Bfree>
 8007f56:	2300      	movs	r3, #0
 8007f58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f5a:	27a3      	movs	r7, #163	; 0xa3
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	e789      	b.n	8007e74 <__gethex+0x124>
 8007f60:	1e73      	subs	r3, r6, #1
 8007f62:	9a07      	ldr	r2, [sp, #28]
 8007f64:	9305      	str	r3, [sp, #20]
 8007f66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d019      	beq.n	8007fa2 <__gethex+0x252>
 8007f6e:	f1bb 0f20 	cmp.w	fp, #32
 8007f72:	d107      	bne.n	8007f84 <__gethex+0x234>
 8007f74:	9b04      	ldr	r3, [sp, #16]
 8007f76:	9a01      	ldr	r2, [sp, #4]
 8007f78:	f843 2b04 	str.w	r2, [r3], #4
 8007f7c:	9304      	str	r3, [sp, #16]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	469b      	mov	fp, r3
 8007f82:	9301      	str	r3, [sp, #4]
 8007f84:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007f88:	f7ff fecd 	bl	8007d26 <__hexdig_fun>
 8007f8c:	9b01      	ldr	r3, [sp, #4]
 8007f8e:	f000 000f 	and.w	r0, r0, #15
 8007f92:	fa00 f00b 	lsl.w	r0, r0, fp
 8007f96:	4303      	orrs	r3, r0
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	f10b 0b04 	add.w	fp, fp, #4
 8007f9e:	9b05      	ldr	r3, [sp, #20]
 8007fa0:	e00d      	b.n	8007fbe <__gethex+0x26e>
 8007fa2:	9b05      	ldr	r3, [sp, #20]
 8007fa4:	9a08      	ldr	r2, [sp, #32]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	42bb      	cmp	r3, r7
 8007faa:	d3e0      	bcc.n	8007f6e <__gethex+0x21e>
 8007fac:	4618      	mov	r0, r3
 8007fae:	4652      	mov	r2, sl
 8007fb0:	9903      	ldr	r1, [sp, #12]
 8007fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fb4:	f001 fa04 	bl	80093c0 <strncmp>
 8007fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	d1d7      	bne.n	8007f6e <__gethex+0x21e>
 8007fbe:	461e      	mov	r6, r3
 8007fc0:	e78c      	b.n	8007edc <__gethex+0x18c>
 8007fc2:	f04f 0a03 	mov.w	sl, #3
 8007fc6:	e7b9      	b.n	8007f3c <__gethex+0x1ec>
 8007fc8:	da09      	bge.n	8007fde <__gethex+0x28e>
 8007fca:	1bf7      	subs	r7, r6, r7
 8007fcc:	4621      	mov	r1, r4
 8007fce:	463a      	mov	r2, r7
 8007fd0:	9802      	ldr	r0, [sp, #8]
 8007fd2:	f000 fc25 	bl	8008820 <__lshift>
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	1bed      	subs	r5, r5, r7
 8007fda:	f100 0914 	add.w	r9, r0, #20
 8007fde:	f04f 0a00 	mov.w	sl, #0
 8007fe2:	e7b0      	b.n	8007f46 <__gethex+0x1f6>
 8007fe4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007fe8:	42a8      	cmp	r0, r5
 8007fea:	dd71      	ble.n	80080d0 <__gethex+0x380>
 8007fec:	1b45      	subs	r5, r0, r5
 8007fee:	42ae      	cmp	r6, r5
 8007ff0:	dc34      	bgt.n	800805c <__gethex+0x30c>
 8007ff2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d028      	beq.n	800804c <__gethex+0x2fc>
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d02a      	beq.n	8008054 <__gethex+0x304>
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d115      	bne.n	800802e <__gethex+0x2de>
 8008002:	42ae      	cmp	r6, r5
 8008004:	d113      	bne.n	800802e <__gethex+0x2de>
 8008006:	2e01      	cmp	r6, #1
 8008008:	d10b      	bne.n	8008022 <__gethex+0x2d2>
 800800a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800800e:	9a06      	ldr	r2, [sp, #24]
 8008010:	2762      	movs	r7, #98	; 0x62
 8008012:	6013      	str	r3, [r2, #0]
 8008014:	2301      	movs	r3, #1
 8008016:	6123      	str	r3, [r4, #16]
 8008018:	f8c9 3000 	str.w	r3, [r9]
 800801c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800801e:	601c      	str	r4, [r3, #0]
 8008020:	e728      	b.n	8007e74 <__gethex+0x124>
 8008022:	4620      	mov	r0, r4
 8008024:	1e71      	subs	r1, r6, #1
 8008026:	f000 fe3a 	bl	8008c9e <__any_on>
 800802a:	2800      	cmp	r0, #0
 800802c:	d1ed      	bne.n	800800a <__gethex+0x2ba>
 800802e:	4621      	mov	r1, r4
 8008030:	9802      	ldr	r0, [sp, #8]
 8008032:	f000 f9dd 	bl	80083f0 <_Bfree>
 8008036:	2300      	movs	r3, #0
 8008038:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800803a:	2750      	movs	r7, #80	; 0x50
 800803c:	6013      	str	r3, [r2, #0]
 800803e:	e719      	b.n	8007e74 <__gethex+0x124>
 8008040:	0800c514 	.word	0x0800c514
 8008044:	0800c499 	.word	0x0800c499
 8008048:	0800c4aa 	.word	0x0800c4aa
 800804c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1ed      	bne.n	800802e <__gethex+0x2de>
 8008052:	e7da      	b.n	800800a <__gethex+0x2ba>
 8008054:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1d7      	bne.n	800800a <__gethex+0x2ba>
 800805a:	e7e8      	b.n	800802e <__gethex+0x2de>
 800805c:	1e6f      	subs	r7, r5, #1
 800805e:	f1ba 0f00 	cmp.w	sl, #0
 8008062:	d132      	bne.n	80080ca <__gethex+0x37a>
 8008064:	b127      	cbz	r7, 8008070 <__gethex+0x320>
 8008066:	4639      	mov	r1, r7
 8008068:	4620      	mov	r0, r4
 800806a:	f000 fe18 	bl	8008c9e <__any_on>
 800806e:	4682      	mov	sl, r0
 8008070:	2101      	movs	r1, #1
 8008072:	117b      	asrs	r3, r7, #5
 8008074:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008078:	f007 071f 	and.w	r7, r7, #31
 800807c:	fa01 f707 	lsl.w	r7, r1, r7
 8008080:	421f      	tst	r7, r3
 8008082:	f04f 0702 	mov.w	r7, #2
 8008086:	4629      	mov	r1, r5
 8008088:	4620      	mov	r0, r4
 800808a:	bf18      	it	ne
 800808c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008090:	1b76      	subs	r6, r6, r5
 8008092:	f7ff fdf5 	bl	8007c80 <rshift>
 8008096:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800809a:	f1ba 0f00 	cmp.w	sl, #0
 800809e:	d048      	beq.n	8008132 <__gethex+0x3e2>
 80080a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d015      	beq.n	80080d4 <__gethex+0x384>
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d017      	beq.n	80080dc <__gethex+0x38c>
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d109      	bne.n	80080c4 <__gethex+0x374>
 80080b0:	f01a 0f02 	tst.w	sl, #2
 80080b4:	d006      	beq.n	80080c4 <__gethex+0x374>
 80080b6:	f8d9 0000 	ldr.w	r0, [r9]
 80080ba:	ea4a 0a00 	orr.w	sl, sl, r0
 80080be:	f01a 0f01 	tst.w	sl, #1
 80080c2:	d10e      	bne.n	80080e2 <__gethex+0x392>
 80080c4:	f047 0710 	orr.w	r7, r7, #16
 80080c8:	e033      	b.n	8008132 <__gethex+0x3e2>
 80080ca:	f04f 0a01 	mov.w	sl, #1
 80080ce:	e7cf      	b.n	8008070 <__gethex+0x320>
 80080d0:	2701      	movs	r7, #1
 80080d2:	e7e2      	b.n	800809a <__gethex+0x34a>
 80080d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080d6:	f1c3 0301 	rsb	r3, r3, #1
 80080da:	9315      	str	r3, [sp, #84]	; 0x54
 80080dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0f0      	beq.n	80080c4 <__gethex+0x374>
 80080e2:	f04f 0c00 	mov.w	ip, #0
 80080e6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80080ea:	f104 0314 	add.w	r3, r4, #20
 80080ee:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80080f2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80080f6:	4618      	mov	r0, r3
 80080f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008100:	d01c      	beq.n	800813c <__gethex+0x3ec>
 8008102:	3201      	adds	r2, #1
 8008104:	6002      	str	r2, [r0, #0]
 8008106:	2f02      	cmp	r7, #2
 8008108:	f104 0314 	add.w	r3, r4, #20
 800810c:	d13d      	bne.n	800818a <__gethex+0x43a>
 800810e:	f8d8 2000 	ldr.w	r2, [r8]
 8008112:	3a01      	subs	r2, #1
 8008114:	42b2      	cmp	r2, r6
 8008116:	d10a      	bne.n	800812e <__gethex+0x3de>
 8008118:	2201      	movs	r2, #1
 800811a:	1171      	asrs	r1, r6, #5
 800811c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008120:	f006 061f 	and.w	r6, r6, #31
 8008124:	fa02 f606 	lsl.w	r6, r2, r6
 8008128:	421e      	tst	r6, r3
 800812a:	bf18      	it	ne
 800812c:	4617      	movne	r7, r2
 800812e:	f047 0720 	orr.w	r7, r7, #32
 8008132:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008134:	601c      	str	r4, [r3, #0]
 8008136:	9b06      	ldr	r3, [sp, #24]
 8008138:	601d      	str	r5, [r3, #0]
 800813a:	e69b      	b.n	8007e74 <__gethex+0x124>
 800813c:	4299      	cmp	r1, r3
 800813e:	f843 cc04 	str.w	ip, [r3, #-4]
 8008142:	d8d8      	bhi.n	80080f6 <__gethex+0x3a6>
 8008144:	68a3      	ldr	r3, [r4, #8]
 8008146:	459b      	cmp	fp, r3
 8008148:	db17      	blt.n	800817a <__gethex+0x42a>
 800814a:	6861      	ldr	r1, [r4, #4]
 800814c:	9802      	ldr	r0, [sp, #8]
 800814e:	3101      	adds	r1, #1
 8008150:	f000 f90e 	bl	8008370 <_Balloc>
 8008154:	4681      	mov	r9, r0
 8008156:	b918      	cbnz	r0, 8008160 <__gethex+0x410>
 8008158:	4602      	mov	r2, r0
 800815a:	2184      	movs	r1, #132	; 0x84
 800815c:	4b19      	ldr	r3, [pc, #100]	; (80081c4 <__gethex+0x474>)
 800815e:	e6ac      	b.n	8007eba <__gethex+0x16a>
 8008160:	6922      	ldr	r2, [r4, #16]
 8008162:	f104 010c 	add.w	r1, r4, #12
 8008166:	3202      	adds	r2, #2
 8008168:	0092      	lsls	r2, r2, #2
 800816a:	300c      	adds	r0, #12
 800816c:	f7fe fc6c 	bl	8006a48 <memcpy>
 8008170:	4621      	mov	r1, r4
 8008172:	9802      	ldr	r0, [sp, #8]
 8008174:	f000 f93c 	bl	80083f0 <_Bfree>
 8008178:	464c      	mov	r4, r9
 800817a:	6923      	ldr	r3, [r4, #16]
 800817c:	1c5a      	adds	r2, r3, #1
 800817e:	6122      	str	r2, [r4, #16]
 8008180:	2201      	movs	r2, #1
 8008182:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008186:	615a      	str	r2, [r3, #20]
 8008188:	e7bd      	b.n	8008106 <__gethex+0x3b6>
 800818a:	6922      	ldr	r2, [r4, #16]
 800818c:	455a      	cmp	r2, fp
 800818e:	dd0b      	ble.n	80081a8 <__gethex+0x458>
 8008190:	2101      	movs	r1, #1
 8008192:	4620      	mov	r0, r4
 8008194:	f7ff fd74 	bl	8007c80 <rshift>
 8008198:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800819c:	3501      	adds	r5, #1
 800819e:	42ab      	cmp	r3, r5
 80081a0:	f6ff aed5 	blt.w	8007f4e <__gethex+0x1fe>
 80081a4:	2701      	movs	r7, #1
 80081a6:	e7c2      	b.n	800812e <__gethex+0x3de>
 80081a8:	f016 061f 	ands.w	r6, r6, #31
 80081ac:	d0fa      	beq.n	80081a4 <__gethex+0x454>
 80081ae:	449a      	add	sl, r3
 80081b0:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80081b4:	f000 f9d2 	bl	800855c <__hi0bits>
 80081b8:	f1c6 0620 	rsb	r6, r6, #32
 80081bc:	42b0      	cmp	r0, r6
 80081be:	dbe7      	blt.n	8008190 <__gethex+0x440>
 80081c0:	e7f0      	b.n	80081a4 <__gethex+0x454>
 80081c2:	bf00      	nop
 80081c4:	0800c499 	.word	0x0800c499

080081c8 <L_shift>:
 80081c8:	f1c2 0208 	rsb	r2, r2, #8
 80081cc:	0092      	lsls	r2, r2, #2
 80081ce:	b570      	push	{r4, r5, r6, lr}
 80081d0:	f1c2 0620 	rsb	r6, r2, #32
 80081d4:	6843      	ldr	r3, [r0, #4]
 80081d6:	6804      	ldr	r4, [r0, #0]
 80081d8:	fa03 f506 	lsl.w	r5, r3, r6
 80081dc:	432c      	orrs	r4, r5
 80081de:	40d3      	lsrs	r3, r2
 80081e0:	6004      	str	r4, [r0, #0]
 80081e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80081e6:	4288      	cmp	r0, r1
 80081e8:	d3f4      	bcc.n	80081d4 <L_shift+0xc>
 80081ea:	bd70      	pop	{r4, r5, r6, pc}

080081ec <__match>:
 80081ec:	b530      	push	{r4, r5, lr}
 80081ee:	6803      	ldr	r3, [r0, #0]
 80081f0:	3301      	adds	r3, #1
 80081f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081f6:	b914      	cbnz	r4, 80081fe <__match+0x12>
 80081f8:	6003      	str	r3, [r0, #0]
 80081fa:	2001      	movs	r0, #1
 80081fc:	bd30      	pop	{r4, r5, pc}
 80081fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008202:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008206:	2d19      	cmp	r5, #25
 8008208:	bf98      	it	ls
 800820a:	3220      	addls	r2, #32
 800820c:	42a2      	cmp	r2, r4
 800820e:	d0f0      	beq.n	80081f2 <__match+0x6>
 8008210:	2000      	movs	r0, #0
 8008212:	e7f3      	b.n	80081fc <__match+0x10>

08008214 <__hexnan>:
 8008214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008218:	2500      	movs	r5, #0
 800821a:	680b      	ldr	r3, [r1, #0]
 800821c:	4682      	mov	sl, r0
 800821e:	115e      	asrs	r6, r3, #5
 8008220:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008224:	f013 031f 	ands.w	r3, r3, #31
 8008228:	bf18      	it	ne
 800822a:	3604      	addne	r6, #4
 800822c:	1f37      	subs	r7, r6, #4
 800822e:	4690      	mov	r8, r2
 8008230:	46b9      	mov	r9, r7
 8008232:	463c      	mov	r4, r7
 8008234:	46ab      	mov	fp, r5
 8008236:	b087      	sub	sp, #28
 8008238:	6801      	ldr	r1, [r0, #0]
 800823a:	9301      	str	r3, [sp, #4]
 800823c:	f846 5c04 	str.w	r5, [r6, #-4]
 8008240:	9502      	str	r5, [sp, #8]
 8008242:	784a      	ldrb	r2, [r1, #1]
 8008244:	1c4b      	adds	r3, r1, #1
 8008246:	9303      	str	r3, [sp, #12]
 8008248:	b342      	cbz	r2, 800829c <__hexnan+0x88>
 800824a:	4610      	mov	r0, r2
 800824c:	9105      	str	r1, [sp, #20]
 800824e:	9204      	str	r2, [sp, #16]
 8008250:	f7ff fd69 	bl	8007d26 <__hexdig_fun>
 8008254:	2800      	cmp	r0, #0
 8008256:	d14f      	bne.n	80082f8 <__hexnan+0xe4>
 8008258:	9a04      	ldr	r2, [sp, #16]
 800825a:	9905      	ldr	r1, [sp, #20]
 800825c:	2a20      	cmp	r2, #32
 800825e:	d818      	bhi.n	8008292 <__hexnan+0x7e>
 8008260:	9b02      	ldr	r3, [sp, #8]
 8008262:	459b      	cmp	fp, r3
 8008264:	dd13      	ble.n	800828e <__hexnan+0x7a>
 8008266:	454c      	cmp	r4, r9
 8008268:	d206      	bcs.n	8008278 <__hexnan+0x64>
 800826a:	2d07      	cmp	r5, #7
 800826c:	dc04      	bgt.n	8008278 <__hexnan+0x64>
 800826e:	462a      	mov	r2, r5
 8008270:	4649      	mov	r1, r9
 8008272:	4620      	mov	r0, r4
 8008274:	f7ff ffa8 	bl	80081c8 <L_shift>
 8008278:	4544      	cmp	r4, r8
 800827a:	d950      	bls.n	800831e <__hexnan+0x10a>
 800827c:	2300      	movs	r3, #0
 800827e:	f1a4 0904 	sub.w	r9, r4, #4
 8008282:	f844 3c04 	str.w	r3, [r4, #-4]
 8008286:	461d      	mov	r5, r3
 8008288:	464c      	mov	r4, r9
 800828a:	f8cd b008 	str.w	fp, [sp, #8]
 800828e:	9903      	ldr	r1, [sp, #12]
 8008290:	e7d7      	b.n	8008242 <__hexnan+0x2e>
 8008292:	2a29      	cmp	r2, #41	; 0x29
 8008294:	d156      	bne.n	8008344 <__hexnan+0x130>
 8008296:	3102      	adds	r1, #2
 8008298:	f8ca 1000 	str.w	r1, [sl]
 800829c:	f1bb 0f00 	cmp.w	fp, #0
 80082a0:	d050      	beq.n	8008344 <__hexnan+0x130>
 80082a2:	454c      	cmp	r4, r9
 80082a4:	d206      	bcs.n	80082b4 <__hexnan+0xa0>
 80082a6:	2d07      	cmp	r5, #7
 80082a8:	dc04      	bgt.n	80082b4 <__hexnan+0xa0>
 80082aa:	462a      	mov	r2, r5
 80082ac:	4649      	mov	r1, r9
 80082ae:	4620      	mov	r0, r4
 80082b0:	f7ff ff8a 	bl	80081c8 <L_shift>
 80082b4:	4544      	cmp	r4, r8
 80082b6:	d934      	bls.n	8008322 <__hexnan+0x10e>
 80082b8:	4623      	mov	r3, r4
 80082ba:	f1a8 0204 	sub.w	r2, r8, #4
 80082be:	f853 1b04 	ldr.w	r1, [r3], #4
 80082c2:	429f      	cmp	r7, r3
 80082c4:	f842 1f04 	str.w	r1, [r2, #4]!
 80082c8:	d2f9      	bcs.n	80082be <__hexnan+0xaa>
 80082ca:	1b3b      	subs	r3, r7, r4
 80082cc:	f023 0303 	bic.w	r3, r3, #3
 80082d0:	3304      	adds	r3, #4
 80082d2:	3401      	adds	r4, #1
 80082d4:	3e03      	subs	r6, #3
 80082d6:	42b4      	cmp	r4, r6
 80082d8:	bf88      	it	hi
 80082da:	2304      	movhi	r3, #4
 80082dc:	2200      	movs	r2, #0
 80082de:	4443      	add	r3, r8
 80082e0:	f843 2b04 	str.w	r2, [r3], #4
 80082e4:	429f      	cmp	r7, r3
 80082e6:	d2fb      	bcs.n	80082e0 <__hexnan+0xcc>
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	b91b      	cbnz	r3, 80082f4 <__hexnan+0xe0>
 80082ec:	4547      	cmp	r7, r8
 80082ee:	d127      	bne.n	8008340 <__hexnan+0x12c>
 80082f0:	2301      	movs	r3, #1
 80082f2:	603b      	str	r3, [r7, #0]
 80082f4:	2005      	movs	r0, #5
 80082f6:	e026      	b.n	8008346 <__hexnan+0x132>
 80082f8:	3501      	adds	r5, #1
 80082fa:	2d08      	cmp	r5, #8
 80082fc:	f10b 0b01 	add.w	fp, fp, #1
 8008300:	dd06      	ble.n	8008310 <__hexnan+0xfc>
 8008302:	4544      	cmp	r4, r8
 8008304:	d9c3      	bls.n	800828e <__hexnan+0x7a>
 8008306:	2300      	movs	r3, #0
 8008308:	2501      	movs	r5, #1
 800830a:	f844 3c04 	str.w	r3, [r4, #-4]
 800830e:	3c04      	subs	r4, #4
 8008310:	6822      	ldr	r2, [r4, #0]
 8008312:	f000 000f 	and.w	r0, r0, #15
 8008316:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800831a:	6022      	str	r2, [r4, #0]
 800831c:	e7b7      	b.n	800828e <__hexnan+0x7a>
 800831e:	2508      	movs	r5, #8
 8008320:	e7b5      	b.n	800828e <__hexnan+0x7a>
 8008322:	9b01      	ldr	r3, [sp, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d0df      	beq.n	80082e8 <__hexnan+0xd4>
 8008328:	f04f 32ff 	mov.w	r2, #4294967295
 800832c:	f1c3 0320 	rsb	r3, r3, #32
 8008330:	fa22 f303 	lsr.w	r3, r2, r3
 8008334:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008338:	401a      	ands	r2, r3
 800833a:	f846 2c04 	str.w	r2, [r6, #-4]
 800833e:	e7d3      	b.n	80082e8 <__hexnan+0xd4>
 8008340:	3f04      	subs	r7, #4
 8008342:	e7d1      	b.n	80082e8 <__hexnan+0xd4>
 8008344:	2004      	movs	r0, #4
 8008346:	b007      	add	sp, #28
 8008348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800834c <__ascii_mbtowc>:
 800834c:	b082      	sub	sp, #8
 800834e:	b901      	cbnz	r1, 8008352 <__ascii_mbtowc+0x6>
 8008350:	a901      	add	r1, sp, #4
 8008352:	b142      	cbz	r2, 8008366 <__ascii_mbtowc+0x1a>
 8008354:	b14b      	cbz	r3, 800836a <__ascii_mbtowc+0x1e>
 8008356:	7813      	ldrb	r3, [r2, #0]
 8008358:	600b      	str	r3, [r1, #0]
 800835a:	7812      	ldrb	r2, [r2, #0]
 800835c:	1e10      	subs	r0, r2, #0
 800835e:	bf18      	it	ne
 8008360:	2001      	movne	r0, #1
 8008362:	b002      	add	sp, #8
 8008364:	4770      	bx	lr
 8008366:	4610      	mov	r0, r2
 8008368:	e7fb      	b.n	8008362 <__ascii_mbtowc+0x16>
 800836a:	f06f 0001 	mvn.w	r0, #1
 800836e:	e7f8      	b.n	8008362 <__ascii_mbtowc+0x16>

08008370 <_Balloc>:
 8008370:	b570      	push	{r4, r5, r6, lr}
 8008372:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008374:	4604      	mov	r4, r0
 8008376:	460d      	mov	r5, r1
 8008378:	b976      	cbnz	r6, 8008398 <_Balloc+0x28>
 800837a:	2010      	movs	r0, #16
 800837c:	f001 f870 	bl	8009460 <malloc>
 8008380:	4602      	mov	r2, r0
 8008382:	6260      	str	r0, [r4, #36]	; 0x24
 8008384:	b920      	cbnz	r0, 8008390 <_Balloc+0x20>
 8008386:	2166      	movs	r1, #102	; 0x66
 8008388:	4b17      	ldr	r3, [pc, #92]	; (80083e8 <_Balloc+0x78>)
 800838a:	4818      	ldr	r0, [pc, #96]	; (80083ec <_Balloc+0x7c>)
 800838c:	f001 f838 	bl	8009400 <__assert_func>
 8008390:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008394:	6006      	str	r6, [r0, #0]
 8008396:	60c6      	str	r6, [r0, #12]
 8008398:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800839a:	68f3      	ldr	r3, [r6, #12]
 800839c:	b183      	cbz	r3, 80083c0 <_Balloc+0x50>
 800839e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083a6:	b9b8      	cbnz	r0, 80083d8 <_Balloc+0x68>
 80083a8:	2101      	movs	r1, #1
 80083aa:	fa01 f605 	lsl.w	r6, r1, r5
 80083ae:	1d72      	adds	r2, r6, #5
 80083b0:	4620      	mov	r0, r4
 80083b2:	0092      	lsls	r2, r2, #2
 80083b4:	f000 fc94 	bl	8008ce0 <_calloc_r>
 80083b8:	b160      	cbz	r0, 80083d4 <_Balloc+0x64>
 80083ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083be:	e00e      	b.n	80083de <_Balloc+0x6e>
 80083c0:	2221      	movs	r2, #33	; 0x21
 80083c2:	2104      	movs	r1, #4
 80083c4:	4620      	mov	r0, r4
 80083c6:	f000 fc8b 	bl	8008ce0 <_calloc_r>
 80083ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083cc:	60f0      	str	r0, [r6, #12]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1e4      	bne.n	800839e <_Balloc+0x2e>
 80083d4:	2000      	movs	r0, #0
 80083d6:	bd70      	pop	{r4, r5, r6, pc}
 80083d8:	6802      	ldr	r2, [r0, #0]
 80083da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083de:	2300      	movs	r3, #0
 80083e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083e4:	e7f7      	b.n	80083d6 <_Balloc+0x66>
 80083e6:	bf00      	nop
 80083e8:	0800c528 	.word	0x0800c528
 80083ec:	0800c53f 	.word	0x0800c53f

080083f0 <_Bfree>:
 80083f0:	b570      	push	{r4, r5, r6, lr}
 80083f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80083f4:	4605      	mov	r5, r0
 80083f6:	460c      	mov	r4, r1
 80083f8:	b976      	cbnz	r6, 8008418 <_Bfree+0x28>
 80083fa:	2010      	movs	r0, #16
 80083fc:	f001 f830 	bl	8009460 <malloc>
 8008400:	4602      	mov	r2, r0
 8008402:	6268      	str	r0, [r5, #36]	; 0x24
 8008404:	b920      	cbnz	r0, 8008410 <_Bfree+0x20>
 8008406:	218a      	movs	r1, #138	; 0x8a
 8008408:	4b08      	ldr	r3, [pc, #32]	; (800842c <_Bfree+0x3c>)
 800840a:	4809      	ldr	r0, [pc, #36]	; (8008430 <_Bfree+0x40>)
 800840c:	f000 fff8 	bl	8009400 <__assert_func>
 8008410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008414:	6006      	str	r6, [r0, #0]
 8008416:	60c6      	str	r6, [r0, #12]
 8008418:	b13c      	cbz	r4, 800842a <_Bfree+0x3a>
 800841a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800841c:	6862      	ldr	r2, [r4, #4]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008424:	6021      	str	r1, [r4, #0]
 8008426:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800842a:	bd70      	pop	{r4, r5, r6, pc}
 800842c:	0800c528 	.word	0x0800c528
 8008430:	0800c53f 	.word	0x0800c53f

08008434 <__multadd>:
 8008434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008438:	4698      	mov	r8, r3
 800843a:	460c      	mov	r4, r1
 800843c:	2300      	movs	r3, #0
 800843e:	690e      	ldr	r6, [r1, #16]
 8008440:	4607      	mov	r7, r0
 8008442:	f101 0014 	add.w	r0, r1, #20
 8008446:	6805      	ldr	r5, [r0, #0]
 8008448:	3301      	adds	r3, #1
 800844a:	b2a9      	uxth	r1, r5
 800844c:	fb02 8101 	mla	r1, r2, r1, r8
 8008450:	0c2d      	lsrs	r5, r5, #16
 8008452:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008456:	fb02 c505 	mla	r5, r2, r5, ip
 800845a:	b289      	uxth	r1, r1
 800845c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008460:	429e      	cmp	r6, r3
 8008462:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008466:	f840 1b04 	str.w	r1, [r0], #4
 800846a:	dcec      	bgt.n	8008446 <__multadd+0x12>
 800846c:	f1b8 0f00 	cmp.w	r8, #0
 8008470:	d022      	beq.n	80084b8 <__multadd+0x84>
 8008472:	68a3      	ldr	r3, [r4, #8]
 8008474:	42b3      	cmp	r3, r6
 8008476:	dc19      	bgt.n	80084ac <__multadd+0x78>
 8008478:	6861      	ldr	r1, [r4, #4]
 800847a:	4638      	mov	r0, r7
 800847c:	3101      	adds	r1, #1
 800847e:	f7ff ff77 	bl	8008370 <_Balloc>
 8008482:	4605      	mov	r5, r0
 8008484:	b928      	cbnz	r0, 8008492 <__multadd+0x5e>
 8008486:	4602      	mov	r2, r0
 8008488:	21b5      	movs	r1, #181	; 0xb5
 800848a:	4b0d      	ldr	r3, [pc, #52]	; (80084c0 <__multadd+0x8c>)
 800848c:	480d      	ldr	r0, [pc, #52]	; (80084c4 <__multadd+0x90>)
 800848e:	f000 ffb7 	bl	8009400 <__assert_func>
 8008492:	6922      	ldr	r2, [r4, #16]
 8008494:	f104 010c 	add.w	r1, r4, #12
 8008498:	3202      	adds	r2, #2
 800849a:	0092      	lsls	r2, r2, #2
 800849c:	300c      	adds	r0, #12
 800849e:	f7fe fad3 	bl	8006a48 <memcpy>
 80084a2:	4621      	mov	r1, r4
 80084a4:	4638      	mov	r0, r7
 80084a6:	f7ff ffa3 	bl	80083f0 <_Bfree>
 80084aa:	462c      	mov	r4, r5
 80084ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80084b0:	3601      	adds	r6, #1
 80084b2:	f8c3 8014 	str.w	r8, [r3, #20]
 80084b6:	6126      	str	r6, [r4, #16]
 80084b8:	4620      	mov	r0, r4
 80084ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084be:	bf00      	nop
 80084c0:	0800c499 	.word	0x0800c499
 80084c4:	0800c53f 	.word	0x0800c53f

080084c8 <__s2b>:
 80084c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084cc:	4615      	mov	r5, r2
 80084ce:	2209      	movs	r2, #9
 80084d0:	461f      	mov	r7, r3
 80084d2:	3308      	adds	r3, #8
 80084d4:	460c      	mov	r4, r1
 80084d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80084da:	4606      	mov	r6, r0
 80084dc:	2201      	movs	r2, #1
 80084de:	2100      	movs	r1, #0
 80084e0:	429a      	cmp	r2, r3
 80084e2:	db09      	blt.n	80084f8 <__s2b+0x30>
 80084e4:	4630      	mov	r0, r6
 80084e6:	f7ff ff43 	bl	8008370 <_Balloc>
 80084ea:	b940      	cbnz	r0, 80084fe <__s2b+0x36>
 80084ec:	4602      	mov	r2, r0
 80084ee:	21ce      	movs	r1, #206	; 0xce
 80084f0:	4b18      	ldr	r3, [pc, #96]	; (8008554 <__s2b+0x8c>)
 80084f2:	4819      	ldr	r0, [pc, #100]	; (8008558 <__s2b+0x90>)
 80084f4:	f000 ff84 	bl	8009400 <__assert_func>
 80084f8:	0052      	lsls	r2, r2, #1
 80084fa:	3101      	adds	r1, #1
 80084fc:	e7f0      	b.n	80084e0 <__s2b+0x18>
 80084fe:	9b08      	ldr	r3, [sp, #32]
 8008500:	2d09      	cmp	r5, #9
 8008502:	6143      	str	r3, [r0, #20]
 8008504:	f04f 0301 	mov.w	r3, #1
 8008508:	6103      	str	r3, [r0, #16]
 800850a:	dd16      	ble.n	800853a <__s2b+0x72>
 800850c:	f104 0909 	add.w	r9, r4, #9
 8008510:	46c8      	mov	r8, r9
 8008512:	442c      	add	r4, r5
 8008514:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008518:	4601      	mov	r1, r0
 800851a:	220a      	movs	r2, #10
 800851c:	4630      	mov	r0, r6
 800851e:	3b30      	subs	r3, #48	; 0x30
 8008520:	f7ff ff88 	bl	8008434 <__multadd>
 8008524:	45a0      	cmp	r8, r4
 8008526:	d1f5      	bne.n	8008514 <__s2b+0x4c>
 8008528:	f1a5 0408 	sub.w	r4, r5, #8
 800852c:	444c      	add	r4, r9
 800852e:	1b2d      	subs	r5, r5, r4
 8008530:	1963      	adds	r3, r4, r5
 8008532:	42bb      	cmp	r3, r7
 8008534:	db04      	blt.n	8008540 <__s2b+0x78>
 8008536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800853a:	2509      	movs	r5, #9
 800853c:	340a      	adds	r4, #10
 800853e:	e7f6      	b.n	800852e <__s2b+0x66>
 8008540:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008544:	4601      	mov	r1, r0
 8008546:	220a      	movs	r2, #10
 8008548:	4630      	mov	r0, r6
 800854a:	3b30      	subs	r3, #48	; 0x30
 800854c:	f7ff ff72 	bl	8008434 <__multadd>
 8008550:	e7ee      	b.n	8008530 <__s2b+0x68>
 8008552:	bf00      	nop
 8008554:	0800c499 	.word	0x0800c499
 8008558:	0800c53f 	.word	0x0800c53f

0800855c <__hi0bits>:
 800855c:	0c02      	lsrs	r2, r0, #16
 800855e:	0412      	lsls	r2, r2, #16
 8008560:	4603      	mov	r3, r0
 8008562:	b9ca      	cbnz	r2, 8008598 <__hi0bits+0x3c>
 8008564:	0403      	lsls	r3, r0, #16
 8008566:	2010      	movs	r0, #16
 8008568:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800856c:	bf04      	itt	eq
 800856e:	021b      	lsleq	r3, r3, #8
 8008570:	3008      	addeq	r0, #8
 8008572:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008576:	bf04      	itt	eq
 8008578:	011b      	lsleq	r3, r3, #4
 800857a:	3004      	addeq	r0, #4
 800857c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008580:	bf04      	itt	eq
 8008582:	009b      	lsleq	r3, r3, #2
 8008584:	3002      	addeq	r0, #2
 8008586:	2b00      	cmp	r3, #0
 8008588:	db05      	blt.n	8008596 <__hi0bits+0x3a>
 800858a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800858e:	f100 0001 	add.w	r0, r0, #1
 8008592:	bf08      	it	eq
 8008594:	2020      	moveq	r0, #32
 8008596:	4770      	bx	lr
 8008598:	2000      	movs	r0, #0
 800859a:	e7e5      	b.n	8008568 <__hi0bits+0xc>

0800859c <__lo0bits>:
 800859c:	6803      	ldr	r3, [r0, #0]
 800859e:	4602      	mov	r2, r0
 80085a0:	f013 0007 	ands.w	r0, r3, #7
 80085a4:	d00b      	beq.n	80085be <__lo0bits+0x22>
 80085a6:	07d9      	lsls	r1, r3, #31
 80085a8:	d422      	bmi.n	80085f0 <__lo0bits+0x54>
 80085aa:	0798      	lsls	r0, r3, #30
 80085ac:	bf49      	itett	mi
 80085ae:	085b      	lsrmi	r3, r3, #1
 80085b0:	089b      	lsrpl	r3, r3, #2
 80085b2:	2001      	movmi	r0, #1
 80085b4:	6013      	strmi	r3, [r2, #0]
 80085b6:	bf5c      	itt	pl
 80085b8:	2002      	movpl	r0, #2
 80085ba:	6013      	strpl	r3, [r2, #0]
 80085bc:	4770      	bx	lr
 80085be:	b299      	uxth	r1, r3
 80085c0:	b909      	cbnz	r1, 80085c6 <__lo0bits+0x2a>
 80085c2:	2010      	movs	r0, #16
 80085c4:	0c1b      	lsrs	r3, r3, #16
 80085c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80085ca:	bf04      	itt	eq
 80085cc:	0a1b      	lsreq	r3, r3, #8
 80085ce:	3008      	addeq	r0, #8
 80085d0:	0719      	lsls	r1, r3, #28
 80085d2:	bf04      	itt	eq
 80085d4:	091b      	lsreq	r3, r3, #4
 80085d6:	3004      	addeq	r0, #4
 80085d8:	0799      	lsls	r1, r3, #30
 80085da:	bf04      	itt	eq
 80085dc:	089b      	lsreq	r3, r3, #2
 80085de:	3002      	addeq	r0, #2
 80085e0:	07d9      	lsls	r1, r3, #31
 80085e2:	d403      	bmi.n	80085ec <__lo0bits+0x50>
 80085e4:	085b      	lsrs	r3, r3, #1
 80085e6:	f100 0001 	add.w	r0, r0, #1
 80085ea:	d003      	beq.n	80085f4 <__lo0bits+0x58>
 80085ec:	6013      	str	r3, [r2, #0]
 80085ee:	4770      	bx	lr
 80085f0:	2000      	movs	r0, #0
 80085f2:	4770      	bx	lr
 80085f4:	2020      	movs	r0, #32
 80085f6:	4770      	bx	lr

080085f8 <__i2b>:
 80085f8:	b510      	push	{r4, lr}
 80085fa:	460c      	mov	r4, r1
 80085fc:	2101      	movs	r1, #1
 80085fe:	f7ff feb7 	bl	8008370 <_Balloc>
 8008602:	4602      	mov	r2, r0
 8008604:	b928      	cbnz	r0, 8008612 <__i2b+0x1a>
 8008606:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800860a:	4b04      	ldr	r3, [pc, #16]	; (800861c <__i2b+0x24>)
 800860c:	4804      	ldr	r0, [pc, #16]	; (8008620 <__i2b+0x28>)
 800860e:	f000 fef7 	bl	8009400 <__assert_func>
 8008612:	2301      	movs	r3, #1
 8008614:	6144      	str	r4, [r0, #20]
 8008616:	6103      	str	r3, [r0, #16]
 8008618:	bd10      	pop	{r4, pc}
 800861a:	bf00      	nop
 800861c:	0800c499 	.word	0x0800c499
 8008620:	0800c53f 	.word	0x0800c53f

08008624 <__multiply>:
 8008624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008628:	4614      	mov	r4, r2
 800862a:	690a      	ldr	r2, [r1, #16]
 800862c:	6923      	ldr	r3, [r4, #16]
 800862e:	460d      	mov	r5, r1
 8008630:	429a      	cmp	r2, r3
 8008632:	bfbe      	ittt	lt
 8008634:	460b      	movlt	r3, r1
 8008636:	4625      	movlt	r5, r4
 8008638:	461c      	movlt	r4, r3
 800863a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800863e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008642:	68ab      	ldr	r3, [r5, #8]
 8008644:	6869      	ldr	r1, [r5, #4]
 8008646:	eb0a 0709 	add.w	r7, sl, r9
 800864a:	42bb      	cmp	r3, r7
 800864c:	b085      	sub	sp, #20
 800864e:	bfb8      	it	lt
 8008650:	3101      	addlt	r1, #1
 8008652:	f7ff fe8d 	bl	8008370 <_Balloc>
 8008656:	b930      	cbnz	r0, 8008666 <__multiply+0x42>
 8008658:	4602      	mov	r2, r0
 800865a:	f240 115d 	movw	r1, #349	; 0x15d
 800865e:	4b41      	ldr	r3, [pc, #260]	; (8008764 <__multiply+0x140>)
 8008660:	4841      	ldr	r0, [pc, #260]	; (8008768 <__multiply+0x144>)
 8008662:	f000 fecd 	bl	8009400 <__assert_func>
 8008666:	f100 0614 	add.w	r6, r0, #20
 800866a:	4633      	mov	r3, r6
 800866c:	2200      	movs	r2, #0
 800866e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008672:	4543      	cmp	r3, r8
 8008674:	d31e      	bcc.n	80086b4 <__multiply+0x90>
 8008676:	f105 0c14 	add.w	ip, r5, #20
 800867a:	f104 0314 	add.w	r3, r4, #20
 800867e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008682:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008686:	9202      	str	r2, [sp, #8]
 8008688:	ebac 0205 	sub.w	r2, ip, r5
 800868c:	3a15      	subs	r2, #21
 800868e:	f022 0203 	bic.w	r2, r2, #3
 8008692:	3204      	adds	r2, #4
 8008694:	f105 0115 	add.w	r1, r5, #21
 8008698:	458c      	cmp	ip, r1
 800869a:	bf38      	it	cc
 800869c:	2204      	movcc	r2, #4
 800869e:	9201      	str	r2, [sp, #4]
 80086a0:	9a02      	ldr	r2, [sp, #8]
 80086a2:	9303      	str	r3, [sp, #12]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d808      	bhi.n	80086ba <__multiply+0x96>
 80086a8:	2f00      	cmp	r7, #0
 80086aa:	dc55      	bgt.n	8008758 <__multiply+0x134>
 80086ac:	6107      	str	r7, [r0, #16]
 80086ae:	b005      	add	sp, #20
 80086b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b4:	f843 2b04 	str.w	r2, [r3], #4
 80086b8:	e7db      	b.n	8008672 <__multiply+0x4e>
 80086ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80086be:	f1ba 0f00 	cmp.w	sl, #0
 80086c2:	d020      	beq.n	8008706 <__multiply+0xe2>
 80086c4:	46b1      	mov	r9, r6
 80086c6:	2200      	movs	r2, #0
 80086c8:	f105 0e14 	add.w	lr, r5, #20
 80086cc:	f85e 4b04 	ldr.w	r4, [lr], #4
 80086d0:	f8d9 b000 	ldr.w	fp, [r9]
 80086d4:	b2a1      	uxth	r1, r4
 80086d6:	fa1f fb8b 	uxth.w	fp, fp
 80086da:	fb0a b101 	mla	r1, sl, r1, fp
 80086de:	4411      	add	r1, r2
 80086e0:	f8d9 2000 	ldr.w	r2, [r9]
 80086e4:	0c24      	lsrs	r4, r4, #16
 80086e6:	0c12      	lsrs	r2, r2, #16
 80086e8:	fb0a 2404 	mla	r4, sl, r4, r2
 80086ec:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80086f0:	b289      	uxth	r1, r1
 80086f2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80086f6:	45f4      	cmp	ip, lr
 80086f8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80086fc:	f849 1b04 	str.w	r1, [r9], #4
 8008700:	d8e4      	bhi.n	80086cc <__multiply+0xa8>
 8008702:	9901      	ldr	r1, [sp, #4]
 8008704:	5072      	str	r2, [r6, r1]
 8008706:	9a03      	ldr	r2, [sp, #12]
 8008708:	3304      	adds	r3, #4
 800870a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800870e:	f1b9 0f00 	cmp.w	r9, #0
 8008712:	d01f      	beq.n	8008754 <__multiply+0x130>
 8008714:	46b6      	mov	lr, r6
 8008716:	f04f 0a00 	mov.w	sl, #0
 800871a:	6834      	ldr	r4, [r6, #0]
 800871c:	f105 0114 	add.w	r1, r5, #20
 8008720:	880a      	ldrh	r2, [r1, #0]
 8008722:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008726:	b2a4      	uxth	r4, r4
 8008728:	fb09 b202 	mla	r2, r9, r2, fp
 800872c:	4492      	add	sl, r2
 800872e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008732:	f84e 4b04 	str.w	r4, [lr], #4
 8008736:	f851 4b04 	ldr.w	r4, [r1], #4
 800873a:	f8be 2000 	ldrh.w	r2, [lr]
 800873e:	0c24      	lsrs	r4, r4, #16
 8008740:	fb09 2404 	mla	r4, r9, r4, r2
 8008744:	458c      	cmp	ip, r1
 8008746:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800874a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800874e:	d8e7      	bhi.n	8008720 <__multiply+0xfc>
 8008750:	9a01      	ldr	r2, [sp, #4]
 8008752:	50b4      	str	r4, [r6, r2]
 8008754:	3604      	adds	r6, #4
 8008756:	e7a3      	b.n	80086a0 <__multiply+0x7c>
 8008758:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1a5      	bne.n	80086ac <__multiply+0x88>
 8008760:	3f01      	subs	r7, #1
 8008762:	e7a1      	b.n	80086a8 <__multiply+0x84>
 8008764:	0800c499 	.word	0x0800c499
 8008768:	0800c53f 	.word	0x0800c53f

0800876c <__pow5mult>:
 800876c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008770:	4615      	mov	r5, r2
 8008772:	f012 0203 	ands.w	r2, r2, #3
 8008776:	4606      	mov	r6, r0
 8008778:	460f      	mov	r7, r1
 800877a:	d007      	beq.n	800878c <__pow5mult+0x20>
 800877c:	4c25      	ldr	r4, [pc, #148]	; (8008814 <__pow5mult+0xa8>)
 800877e:	3a01      	subs	r2, #1
 8008780:	2300      	movs	r3, #0
 8008782:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008786:	f7ff fe55 	bl	8008434 <__multadd>
 800878a:	4607      	mov	r7, r0
 800878c:	10ad      	asrs	r5, r5, #2
 800878e:	d03d      	beq.n	800880c <__pow5mult+0xa0>
 8008790:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008792:	b97c      	cbnz	r4, 80087b4 <__pow5mult+0x48>
 8008794:	2010      	movs	r0, #16
 8008796:	f000 fe63 	bl	8009460 <malloc>
 800879a:	4602      	mov	r2, r0
 800879c:	6270      	str	r0, [r6, #36]	; 0x24
 800879e:	b928      	cbnz	r0, 80087ac <__pow5mult+0x40>
 80087a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80087a4:	4b1c      	ldr	r3, [pc, #112]	; (8008818 <__pow5mult+0xac>)
 80087a6:	481d      	ldr	r0, [pc, #116]	; (800881c <__pow5mult+0xb0>)
 80087a8:	f000 fe2a 	bl	8009400 <__assert_func>
 80087ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087b0:	6004      	str	r4, [r0, #0]
 80087b2:	60c4      	str	r4, [r0, #12]
 80087b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80087b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087bc:	b94c      	cbnz	r4, 80087d2 <__pow5mult+0x66>
 80087be:	f240 2171 	movw	r1, #625	; 0x271
 80087c2:	4630      	mov	r0, r6
 80087c4:	f7ff ff18 	bl	80085f8 <__i2b>
 80087c8:	2300      	movs	r3, #0
 80087ca:	4604      	mov	r4, r0
 80087cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80087d0:	6003      	str	r3, [r0, #0]
 80087d2:	f04f 0900 	mov.w	r9, #0
 80087d6:	07eb      	lsls	r3, r5, #31
 80087d8:	d50a      	bpl.n	80087f0 <__pow5mult+0x84>
 80087da:	4639      	mov	r1, r7
 80087dc:	4622      	mov	r2, r4
 80087de:	4630      	mov	r0, r6
 80087e0:	f7ff ff20 	bl	8008624 <__multiply>
 80087e4:	4680      	mov	r8, r0
 80087e6:	4639      	mov	r1, r7
 80087e8:	4630      	mov	r0, r6
 80087ea:	f7ff fe01 	bl	80083f0 <_Bfree>
 80087ee:	4647      	mov	r7, r8
 80087f0:	106d      	asrs	r5, r5, #1
 80087f2:	d00b      	beq.n	800880c <__pow5mult+0xa0>
 80087f4:	6820      	ldr	r0, [r4, #0]
 80087f6:	b938      	cbnz	r0, 8008808 <__pow5mult+0x9c>
 80087f8:	4622      	mov	r2, r4
 80087fa:	4621      	mov	r1, r4
 80087fc:	4630      	mov	r0, r6
 80087fe:	f7ff ff11 	bl	8008624 <__multiply>
 8008802:	6020      	str	r0, [r4, #0]
 8008804:	f8c0 9000 	str.w	r9, [r0]
 8008808:	4604      	mov	r4, r0
 800880a:	e7e4      	b.n	80087d6 <__pow5mult+0x6a>
 800880c:	4638      	mov	r0, r7
 800880e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008812:	bf00      	nop
 8008814:	0800c690 	.word	0x0800c690
 8008818:	0800c528 	.word	0x0800c528
 800881c:	0800c53f 	.word	0x0800c53f

08008820 <__lshift>:
 8008820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008824:	460c      	mov	r4, r1
 8008826:	4607      	mov	r7, r0
 8008828:	4691      	mov	r9, r2
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	6849      	ldr	r1, [r1, #4]
 800882e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008832:	68a3      	ldr	r3, [r4, #8]
 8008834:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008838:	f108 0601 	add.w	r6, r8, #1
 800883c:	42b3      	cmp	r3, r6
 800883e:	db0b      	blt.n	8008858 <__lshift+0x38>
 8008840:	4638      	mov	r0, r7
 8008842:	f7ff fd95 	bl	8008370 <_Balloc>
 8008846:	4605      	mov	r5, r0
 8008848:	b948      	cbnz	r0, 800885e <__lshift+0x3e>
 800884a:	4602      	mov	r2, r0
 800884c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008850:	4b27      	ldr	r3, [pc, #156]	; (80088f0 <__lshift+0xd0>)
 8008852:	4828      	ldr	r0, [pc, #160]	; (80088f4 <__lshift+0xd4>)
 8008854:	f000 fdd4 	bl	8009400 <__assert_func>
 8008858:	3101      	adds	r1, #1
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	e7ee      	b.n	800883c <__lshift+0x1c>
 800885e:	2300      	movs	r3, #0
 8008860:	f100 0114 	add.w	r1, r0, #20
 8008864:	f100 0210 	add.w	r2, r0, #16
 8008868:	4618      	mov	r0, r3
 800886a:	4553      	cmp	r3, sl
 800886c:	db33      	blt.n	80088d6 <__lshift+0xb6>
 800886e:	6920      	ldr	r0, [r4, #16]
 8008870:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008874:	f104 0314 	add.w	r3, r4, #20
 8008878:	f019 091f 	ands.w	r9, r9, #31
 800887c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008880:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008884:	d02b      	beq.n	80088de <__lshift+0xbe>
 8008886:	468a      	mov	sl, r1
 8008888:	2200      	movs	r2, #0
 800888a:	f1c9 0e20 	rsb	lr, r9, #32
 800888e:	6818      	ldr	r0, [r3, #0]
 8008890:	fa00 f009 	lsl.w	r0, r0, r9
 8008894:	4302      	orrs	r2, r0
 8008896:	f84a 2b04 	str.w	r2, [sl], #4
 800889a:	f853 2b04 	ldr.w	r2, [r3], #4
 800889e:	459c      	cmp	ip, r3
 80088a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80088a4:	d8f3      	bhi.n	800888e <__lshift+0x6e>
 80088a6:	ebac 0304 	sub.w	r3, ip, r4
 80088aa:	3b15      	subs	r3, #21
 80088ac:	f023 0303 	bic.w	r3, r3, #3
 80088b0:	3304      	adds	r3, #4
 80088b2:	f104 0015 	add.w	r0, r4, #21
 80088b6:	4584      	cmp	ip, r0
 80088b8:	bf38      	it	cc
 80088ba:	2304      	movcc	r3, #4
 80088bc:	50ca      	str	r2, [r1, r3]
 80088be:	b10a      	cbz	r2, 80088c4 <__lshift+0xa4>
 80088c0:	f108 0602 	add.w	r6, r8, #2
 80088c4:	3e01      	subs	r6, #1
 80088c6:	4638      	mov	r0, r7
 80088c8:	4621      	mov	r1, r4
 80088ca:	612e      	str	r6, [r5, #16]
 80088cc:	f7ff fd90 	bl	80083f0 <_Bfree>
 80088d0:	4628      	mov	r0, r5
 80088d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80088da:	3301      	adds	r3, #1
 80088dc:	e7c5      	b.n	800886a <__lshift+0x4a>
 80088de:	3904      	subs	r1, #4
 80088e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80088e4:	459c      	cmp	ip, r3
 80088e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80088ea:	d8f9      	bhi.n	80088e0 <__lshift+0xc0>
 80088ec:	e7ea      	b.n	80088c4 <__lshift+0xa4>
 80088ee:	bf00      	nop
 80088f0:	0800c499 	.word	0x0800c499
 80088f4:	0800c53f 	.word	0x0800c53f

080088f8 <__mcmp>:
 80088f8:	4603      	mov	r3, r0
 80088fa:	690a      	ldr	r2, [r1, #16]
 80088fc:	6900      	ldr	r0, [r0, #16]
 80088fe:	b530      	push	{r4, r5, lr}
 8008900:	1a80      	subs	r0, r0, r2
 8008902:	d10d      	bne.n	8008920 <__mcmp+0x28>
 8008904:	3314      	adds	r3, #20
 8008906:	3114      	adds	r1, #20
 8008908:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800890c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008910:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008914:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008918:	4295      	cmp	r5, r2
 800891a:	d002      	beq.n	8008922 <__mcmp+0x2a>
 800891c:	d304      	bcc.n	8008928 <__mcmp+0x30>
 800891e:	2001      	movs	r0, #1
 8008920:	bd30      	pop	{r4, r5, pc}
 8008922:	42a3      	cmp	r3, r4
 8008924:	d3f4      	bcc.n	8008910 <__mcmp+0x18>
 8008926:	e7fb      	b.n	8008920 <__mcmp+0x28>
 8008928:	f04f 30ff 	mov.w	r0, #4294967295
 800892c:	e7f8      	b.n	8008920 <__mcmp+0x28>
	...

08008930 <__mdiff>:
 8008930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008934:	460c      	mov	r4, r1
 8008936:	4606      	mov	r6, r0
 8008938:	4611      	mov	r1, r2
 800893a:	4620      	mov	r0, r4
 800893c:	4692      	mov	sl, r2
 800893e:	f7ff ffdb 	bl	80088f8 <__mcmp>
 8008942:	1e05      	subs	r5, r0, #0
 8008944:	d111      	bne.n	800896a <__mdiff+0x3a>
 8008946:	4629      	mov	r1, r5
 8008948:	4630      	mov	r0, r6
 800894a:	f7ff fd11 	bl	8008370 <_Balloc>
 800894e:	4602      	mov	r2, r0
 8008950:	b928      	cbnz	r0, 800895e <__mdiff+0x2e>
 8008952:	f240 2132 	movw	r1, #562	; 0x232
 8008956:	4b3c      	ldr	r3, [pc, #240]	; (8008a48 <__mdiff+0x118>)
 8008958:	483c      	ldr	r0, [pc, #240]	; (8008a4c <__mdiff+0x11c>)
 800895a:	f000 fd51 	bl	8009400 <__assert_func>
 800895e:	2301      	movs	r3, #1
 8008960:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008964:	4610      	mov	r0, r2
 8008966:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896a:	bfa4      	itt	ge
 800896c:	4653      	movge	r3, sl
 800896e:	46a2      	movge	sl, r4
 8008970:	4630      	mov	r0, r6
 8008972:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008976:	bfa6      	itte	ge
 8008978:	461c      	movge	r4, r3
 800897a:	2500      	movge	r5, #0
 800897c:	2501      	movlt	r5, #1
 800897e:	f7ff fcf7 	bl	8008370 <_Balloc>
 8008982:	4602      	mov	r2, r0
 8008984:	b918      	cbnz	r0, 800898e <__mdiff+0x5e>
 8008986:	f44f 7110 	mov.w	r1, #576	; 0x240
 800898a:	4b2f      	ldr	r3, [pc, #188]	; (8008a48 <__mdiff+0x118>)
 800898c:	e7e4      	b.n	8008958 <__mdiff+0x28>
 800898e:	f100 0814 	add.w	r8, r0, #20
 8008992:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008996:	60c5      	str	r5, [r0, #12]
 8008998:	f04f 0c00 	mov.w	ip, #0
 800899c:	f10a 0514 	add.w	r5, sl, #20
 80089a0:	f10a 0010 	add.w	r0, sl, #16
 80089a4:	46c2      	mov	sl, r8
 80089a6:	6926      	ldr	r6, [r4, #16]
 80089a8:	f104 0914 	add.w	r9, r4, #20
 80089ac:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80089b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80089b4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80089b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80089bc:	fa1f f18b 	uxth.w	r1, fp
 80089c0:	4461      	add	r1, ip
 80089c2:	fa1f fc83 	uxth.w	ip, r3
 80089c6:	0c1b      	lsrs	r3, r3, #16
 80089c8:	eba1 010c 	sub.w	r1, r1, ip
 80089cc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80089d0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80089d4:	b289      	uxth	r1, r1
 80089d6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80089da:	454e      	cmp	r6, r9
 80089dc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80089e0:	f84a 3b04 	str.w	r3, [sl], #4
 80089e4:	d8e6      	bhi.n	80089b4 <__mdiff+0x84>
 80089e6:	1b33      	subs	r3, r6, r4
 80089e8:	3b15      	subs	r3, #21
 80089ea:	f023 0303 	bic.w	r3, r3, #3
 80089ee:	3415      	adds	r4, #21
 80089f0:	3304      	adds	r3, #4
 80089f2:	42a6      	cmp	r6, r4
 80089f4:	bf38      	it	cc
 80089f6:	2304      	movcc	r3, #4
 80089f8:	441d      	add	r5, r3
 80089fa:	4443      	add	r3, r8
 80089fc:	461e      	mov	r6, r3
 80089fe:	462c      	mov	r4, r5
 8008a00:	4574      	cmp	r4, lr
 8008a02:	d30e      	bcc.n	8008a22 <__mdiff+0xf2>
 8008a04:	f10e 0103 	add.w	r1, lr, #3
 8008a08:	1b49      	subs	r1, r1, r5
 8008a0a:	f021 0103 	bic.w	r1, r1, #3
 8008a0e:	3d03      	subs	r5, #3
 8008a10:	45ae      	cmp	lr, r5
 8008a12:	bf38      	it	cc
 8008a14:	2100      	movcc	r1, #0
 8008a16:	4419      	add	r1, r3
 8008a18:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008a1c:	b18b      	cbz	r3, 8008a42 <__mdiff+0x112>
 8008a1e:	6117      	str	r7, [r2, #16]
 8008a20:	e7a0      	b.n	8008964 <__mdiff+0x34>
 8008a22:	f854 8b04 	ldr.w	r8, [r4], #4
 8008a26:	fa1f f188 	uxth.w	r1, r8
 8008a2a:	4461      	add	r1, ip
 8008a2c:	1408      	asrs	r0, r1, #16
 8008a2e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008a32:	b289      	uxth	r1, r1
 8008a34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a3c:	f846 1b04 	str.w	r1, [r6], #4
 8008a40:	e7de      	b.n	8008a00 <__mdiff+0xd0>
 8008a42:	3f01      	subs	r7, #1
 8008a44:	e7e8      	b.n	8008a18 <__mdiff+0xe8>
 8008a46:	bf00      	nop
 8008a48:	0800c499 	.word	0x0800c499
 8008a4c:	0800c53f 	.word	0x0800c53f

08008a50 <__ulp>:
 8008a50:	4b11      	ldr	r3, [pc, #68]	; (8008a98 <__ulp+0x48>)
 8008a52:	400b      	ands	r3, r1
 8008a54:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	dd02      	ble.n	8008a62 <__ulp+0x12>
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	4619      	mov	r1, r3
 8008a60:	4770      	bx	lr
 8008a62:	425b      	negs	r3, r3
 8008a64:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008a68:	f04f 0000 	mov.w	r0, #0
 8008a6c:	f04f 0100 	mov.w	r1, #0
 8008a70:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008a74:	da04      	bge.n	8008a80 <__ulp+0x30>
 8008a76:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a7a:	fa43 f102 	asr.w	r1, r3, r2
 8008a7e:	4770      	bx	lr
 8008a80:	f1a2 0314 	sub.w	r3, r2, #20
 8008a84:	2b1e      	cmp	r3, #30
 8008a86:	bfd6      	itet	le
 8008a88:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008a8c:	2301      	movgt	r3, #1
 8008a8e:	fa22 f303 	lsrle.w	r3, r2, r3
 8008a92:	4618      	mov	r0, r3
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	7ff00000 	.word	0x7ff00000

08008a9c <__b2d>:
 8008a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aa0:	6907      	ldr	r7, [r0, #16]
 8008aa2:	f100 0914 	add.w	r9, r0, #20
 8008aa6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008aaa:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008aae:	f1a7 0804 	sub.w	r8, r7, #4
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	f7ff fd52 	bl	800855c <__hi0bits>
 8008ab8:	f1c0 0320 	rsb	r3, r0, #32
 8008abc:	280a      	cmp	r0, #10
 8008abe:	600b      	str	r3, [r1, #0]
 8008ac0:	491f      	ldr	r1, [pc, #124]	; (8008b40 <__b2d+0xa4>)
 8008ac2:	dc17      	bgt.n	8008af4 <__b2d+0x58>
 8008ac4:	45c1      	cmp	r9, r8
 8008ac6:	bf28      	it	cs
 8008ac8:	2200      	movcs	r2, #0
 8008aca:	f1c0 0c0b 	rsb	ip, r0, #11
 8008ace:	fa26 f30c 	lsr.w	r3, r6, ip
 8008ad2:	bf38      	it	cc
 8008ad4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008ad8:	ea43 0501 	orr.w	r5, r3, r1
 8008adc:	f100 0315 	add.w	r3, r0, #21
 8008ae0:	fa06 f303 	lsl.w	r3, r6, r3
 8008ae4:	fa22 f20c 	lsr.w	r2, r2, ip
 8008ae8:	ea43 0402 	orr.w	r4, r3, r2
 8008aec:	4620      	mov	r0, r4
 8008aee:	4629      	mov	r1, r5
 8008af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008af4:	45c1      	cmp	r9, r8
 8008af6:	bf2e      	itee	cs
 8008af8:	2200      	movcs	r2, #0
 8008afa:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008afe:	f1a7 0808 	subcc.w	r8, r7, #8
 8008b02:	f1b0 030b 	subs.w	r3, r0, #11
 8008b06:	d016      	beq.n	8008b36 <__b2d+0x9a>
 8008b08:	f1c3 0720 	rsb	r7, r3, #32
 8008b0c:	fa22 f107 	lsr.w	r1, r2, r7
 8008b10:	45c8      	cmp	r8, r9
 8008b12:	fa06 f603 	lsl.w	r6, r6, r3
 8008b16:	ea46 0601 	orr.w	r6, r6, r1
 8008b1a:	bf94      	ite	ls
 8008b1c:	2100      	movls	r1, #0
 8008b1e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008b22:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008b26:	fa02 f003 	lsl.w	r0, r2, r3
 8008b2a:	40f9      	lsrs	r1, r7
 8008b2c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008b30:	ea40 0401 	orr.w	r4, r0, r1
 8008b34:	e7da      	b.n	8008aec <__b2d+0x50>
 8008b36:	4614      	mov	r4, r2
 8008b38:	ea46 0501 	orr.w	r5, r6, r1
 8008b3c:	e7d6      	b.n	8008aec <__b2d+0x50>
 8008b3e:	bf00      	nop
 8008b40:	3ff00000 	.word	0x3ff00000

08008b44 <__d2b>:
 8008b44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008b48:	2101      	movs	r1, #1
 8008b4a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008b4e:	4690      	mov	r8, r2
 8008b50:	461d      	mov	r5, r3
 8008b52:	f7ff fc0d 	bl	8008370 <_Balloc>
 8008b56:	4604      	mov	r4, r0
 8008b58:	b930      	cbnz	r0, 8008b68 <__d2b+0x24>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	f240 310a 	movw	r1, #778	; 0x30a
 8008b60:	4b24      	ldr	r3, [pc, #144]	; (8008bf4 <__d2b+0xb0>)
 8008b62:	4825      	ldr	r0, [pc, #148]	; (8008bf8 <__d2b+0xb4>)
 8008b64:	f000 fc4c 	bl	8009400 <__assert_func>
 8008b68:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008b6c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008b70:	bb2d      	cbnz	r5, 8008bbe <__d2b+0x7a>
 8008b72:	9301      	str	r3, [sp, #4]
 8008b74:	f1b8 0300 	subs.w	r3, r8, #0
 8008b78:	d026      	beq.n	8008bc8 <__d2b+0x84>
 8008b7a:	4668      	mov	r0, sp
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	f7ff fd0d 	bl	800859c <__lo0bits>
 8008b82:	9900      	ldr	r1, [sp, #0]
 8008b84:	b1f0      	cbz	r0, 8008bc4 <__d2b+0x80>
 8008b86:	9a01      	ldr	r2, [sp, #4]
 8008b88:	f1c0 0320 	rsb	r3, r0, #32
 8008b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b90:	430b      	orrs	r3, r1
 8008b92:	40c2      	lsrs	r2, r0
 8008b94:	6163      	str	r3, [r4, #20]
 8008b96:	9201      	str	r2, [sp, #4]
 8008b98:	9b01      	ldr	r3, [sp, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	bf14      	ite	ne
 8008b9e:	2102      	movne	r1, #2
 8008ba0:	2101      	moveq	r1, #1
 8008ba2:	61a3      	str	r3, [r4, #24]
 8008ba4:	6121      	str	r1, [r4, #16]
 8008ba6:	b1c5      	cbz	r5, 8008bda <__d2b+0x96>
 8008ba8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008bac:	4405      	add	r5, r0
 8008bae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008bb2:	603d      	str	r5, [r7, #0]
 8008bb4:	6030      	str	r0, [r6, #0]
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	b002      	add	sp, #8
 8008bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bc2:	e7d6      	b.n	8008b72 <__d2b+0x2e>
 8008bc4:	6161      	str	r1, [r4, #20]
 8008bc6:	e7e7      	b.n	8008b98 <__d2b+0x54>
 8008bc8:	a801      	add	r0, sp, #4
 8008bca:	f7ff fce7 	bl	800859c <__lo0bits>
 8008bce:	2101      	movs	r1, #1
 8008bd0:	9b01      	ldr	r3, [sp, #4]
 8008bd2:	6121      	str	r1, [r4, #16]
 8008bd4:	6163      	str	r3, [r4, #20]
 8008bd6:	3020      	adds	r0, #32
 8008bd8:	e7e5      	b.n	8008ba6 <__d2b+0x62>
 8008bda:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008bde:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008be2:	6038      	str	r0, [r7, #0]
 8008be4:	6918      	ldr	r0, [r3, #16]
 8008be6:	f7ff fcb9 	bl	800855c <__hi0bits>
 8008bea:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008bee:	6031      	str	r1, [r6, #0]
 8008bf0:	e7e1      	b.n	8008bb6 <__d2b+0x72>
 8008bf2:	bf00      	nop
 8008bf4:	0800c499 	.word	0x0800c499
 8008bf8:	0800c53f 	.word	0x0800c53f

08008bfc <__ratio>:
 8008bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	4688      	mov	r8, r1
 8008c02:	4669      	mov	r1, sp
 8008c04:	4681      	mov	r9, r0
 8008c06:	f7ff ff49 	bl	8008a9c <__b2d>
 8008c0a:	460f      	mov	r7, r1
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	460d      	mov	r5, r1
 8008c10:	4640      	mov	r0, r8
 8008c12:	a901      	add	r1, sp, #4
 8008c14:	f7ff ff42 	bl	8008a9c <__b2d>
 8008c18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c1c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008c20:	468b      	mov	fp, r1
 8008c22:	eba3 0c02 	sub.w	ip, r3, r2
 8008c26:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008c2a:	1a9b      	subs	r3, r3, r2
 8008c2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	bfd5      	itete	le
 8008c34:	460a      	movle	r2, r1
 8008c36:	462a      	movgt	r2, r5
 8008c38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c3c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008c40:	bfd8      	it	le
 8008c42:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008c46:	465b      	mov	r3, fp
 8008c48:	4602      	mov	r2, r0
 8008c4a:	4639      	mov	r1, r7
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f7f7 fd6d 	bl	800072c <__aeabi_ddiv>
 8008c52:	b003      	add	sp, #12
 8008c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c58 <__copybits>:
 8008c58:	3901      	subs	r1, #1
 8008c5a:	b570      	push	{r4, r5, r6, lr}
 8008c5c:	1149      	asrs	r1, r1, #5
 8008c5e:	6914      	ldr	r4, [r2, #16]
 8008c60:	3101      	adds	r1, #1
 8008c62:	f102 0314 	add.w	r3, r2, #20
 8008c66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c6a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c6e:	1f05      	subs	r5, r0, #4
 8008c70:	42a3      	cmp	r3, r4
 8008c72:	d30c      	bcc.n	8008c8e <__copybits+0x36>
 8008c74:	1aa3      	subs	r3, r4, r2
 8008c76:	3b11      	subs	r3, #17
 8008c78:	f023 0303 	bic.w	r3, r3, #3
 8008c7c:	3211      	adds	r2, #17
 8008c7e:	42a2      	cmp	r2, r4
 8008c80:	bf88      	it	hi
 8008c82:	2300      	movhi	r3, #0
 8008c84:	4418      	add	r0, r3
 8008c86:	2300      	movs	r3, #0
 8008c88:	4288      	cmp	r0, r1
 8008c8a:	d305      	bcc.n	8008c98 <__copybits+0x40>
 8008c8c:	bd70      	pop	{r4, r5, r6, pc}
 8008c8e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008c92:	f845 6f04 	str.w	r6, [r5, #4]!
 8008c96:	e7eb      	b.n	8008c70 <__copybits+0x18>
 8008c98:	f840 3b04 	str.w	r3, [r0], #4
 8008c9c:	e7f4      	b.n	8008c88 <__copybits+0x30>

08008c9e <__any_on>:
 8008c9e:	f100 0214 	add.w	r2, r0, #20
 8008ca2:	6900      	ldr	r0, [r0, #16]
 8008ca4:	114b      	asrs	r3, r1, #5
 8008ca6:	4298      	cmp	r0, r3
 8008ca8:	b510      	push	{r4, lr}
 8008caa:	db11      	blt.n	8008cd0 <__any_on+0x32>
 8008cac:	dd0a      	ble.n	8008cc4 <__any_on+0x26>
 8008cae:	f011 011f 	ands.w	r1, r1, #31
 8008cb2:	d007      	beq.n	8008cc4 <__any_on+0x26>
 8008cb4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008cb8:	fa24 f001 	lsr.w	r0, r4, r1
 8008cbc:	fa00 f101 	lsl.w	r1, r0, r1
 8008cc0:	428c      	cmp	r4, r1
 8008cc2:	d10b      	bne.n	8008cdc <__any_on+0x3e>
 8008cc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d803      	bhi.n	8008cd4 <__any_on+0x36>
 8008ccc:	2000      	movs	r0, #0
 8008cce:	bd10      	pop	{r4, pc}
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	e7f7      	b.n	8008cc4 <__any_on+0x26>
 8008cd4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cd8:	2900      	cmp	r1, #0
 8008cda:	d0f5      	beq.n	8008cc8 <__any_on+0x2a>
 8008cdc:	2001      	movs	r0, #1
 8008cde:	e7f6      	b.n	8008cce <__any_on+0x30>

08008ce0 <_calloc_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	fb02 f501 	mul.w	r5, r2, r1
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	f000 f808 	bl	8008cfc <_malloc_r>
 8008cec:	4604      	mov	r4, r0
 8008cee:	b118      	cbz	r0, 8008cf8 <_calloc_r+0x18>
 8008cf0:	462a      	mov	r2, r5
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	f7fd feb6 	bl	8006a64 <memset>
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	bd38      	pop	{r3, r4, r5, pc}

08008cfc <_malloc_r>:
 8008cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfe:	1ccd      	adds	r5, r1, #3
 8008d00:	f025 0503 	bic.w	r5, r5, #3
 8008d04:	3508      	adds	r5, #8
 8008d06:	2d0c      	cmp	r5, #12
 8008d08:	bf38      	it	cc
 8008d0a:	250c      	movcc	r5, #12
 8008d0c:	2d00      	cmp	r5, #0
 8008d0e:	4606      	mov	r6, r0
 8008d10:	db01      	blt.n	8008d16 <_malloc_r+0x1a>
 8008d12:	42a9      	cmp	r1, r5
 8008d14:	d903      	bls.n	8008d1e <_malloc_r+0x22>
 8008d16:	230c      	movs	r3, #12
 8008d18:	6033      	str	r3, [r6, #0]
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d1e:	f000 fbcf 	bl	80094c0 <__malloc_lock>
 8008d22:	4921      	ldr	r1, [pc, #132]	; (8008da8 <_malloc_r+0xac>)
 8008d24:	680a      	ldr	r2, [r1, #0]
 8008d26:	4614      	mov	r4, r2
 8008d28:	b99c      	cbnz	r4, 8008d52 <_malloc_r+0x56>
 8008d2a:	4f20      	ldr	r7, [pc, #128]	; (8008dac <_malloc_r+0xb0>)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	b923      	cbnz	r3, 8008d3a <_malloc_r+0x3e>
 8008d30:	4621      	mov	r1, r4
 8008d32:	4630      	mov	r0, r6
 8008d34:	f000 fb34 	bl	80093a0 <_sbrk_r>
 8008d38:	6038      	str	r0, [r7, #0]
 8008d3a:	4629      	mov	r1, r5
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	f000 fb2f 	bl	80093a0 <_sbrk_r>
 8008d42:	1c43      	adds	r3, r0, #1
 8008d44:	d123      	bne.n	8008d8e <_malloc_r+0x92>
 8008d46:	230c      	movs	r3, #12
 8008d48:	4630      	mov	r0, r6
 8008d4a:	6033      	str	r3, [r6, #0]
 8008d4c:	f000 fbbe 	bl	80094cc <__malloc_unlock>
 8008d50:	e7e3      	b.n	8008d1a <_malloc_r+0x1e>
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	1b5b      	subs	r3, r3, r5
 8008d56:	d417      	bmi.n	8008d88 <_malloc_r+0x8c>
 8008d58:	2b0b      	cmp	r3, #11
 8008d5a:	d903      	bls.n	8008d64 <_malloc_r+0x68>
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	441c      	add	r4, r3
 8008d60:	6025      	str	r5, [r4, #0]
 8008d62:	e004      	b.n	8008d6e <_malloc_r+0x72>
 8008d64:	6863      	ldr	r3, [r4, #4]
 8008d66:	42a2      	cmp	r2, r4
 8008d68:	bf0c      	ite	eq
 8008d6a:	600b      	streq	r3, [r1, #0]
 8008d6c:	6053      	strne	r3, [r2, #4]
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f000 fbac 	bl	80094cc <__malloc_unlock>
 8008d74:	f104 000b 	add.w	r0, r4, #11
 8008d78:	1d23      	adds	r3, r4, #4
 8008d7a:	f020 0007 	bic.w	r0, r0, #7
 8008d7e:	1ac2      	subs	r2, r0, r3
 8008d80:	d0cc      	beq.n	8008d1c <_malloc_r+0x20>
 8008d82:	1a1b      	subs	r3, r3, r0
 8008d84:	50a3      	str	r3, [r4, r2]
 8008d86:	e7c9      	b.n	8008d1c <_malloc_r+0x20>
 8008d88:	4622      	mov	r2, r4
 8008d8a:	6864      	ldr	r4, [r4, #4]
 8008d8c:	e7cc      	b.n	8008d28 <_malloc_r+0x2c>
 8008d8e:	1cc4      	adds	r4, r0, #3
 8008d90:	f024 0403 	bic.w	r4, r4, #3
 8008d94:	42a0      	cmp	r0, r4
 8008d96:	d0e3      	beq.n	8008d60 <_malloc_r+0x64>
 8008d98:	1a21      	subs	r1, r4, r0
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f000 fb00 	bl	80093a0 <_sbrk_r>
 8008da0:	3001      	adds	r0, #1
 8008da2:	d1dd      	bne.n	8008d60 <_malloc_r+0x64>
 8008da4:	e7cf      	b.n	8008d46 <_malloc_r+0x4a>
 8008da6:	bf00      	nop
 8008da8:	20000270 	.word	0x20000270
 8008dac:	20000274 	.word	0x20000274

08008db0 <__ssputs_r>:
 8008db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db4:	688e      	ldr	r6, [r1, #8]
 8008db6:	4682      	mov	sl, r0
 8008db8:	429e      	cmp	r6, r3
 8008dba:	460c      	mov	r4, r1
 8008dbc:	4690      	mov	r8, r2
 8008dbe:	461f      	mov	r7, r3
 8008dc0:	d838      	bhi.n	8008e34 <__ssputs_r+0x84>
 8008dc2:	898a      	ldrh	r2, [r1, #12]
 8008dc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008dc8:	d032      	beq.n	8008e30 <__ssputs_r+0x80>
 8008dca:	6825      	ldr	r5, [r4, #0]
 8008dcc:	6909      	ldr	r1, [r1, #16]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	eba5 0901 	sub.w	r9, r5, r1
 8008dd4:	6965      	ldr	r5, [r4, #20]
 8008dd6:	444b      	add	r3, r9
 8008dd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ddc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008de0:	106d      	asrs	r5, r5, #1
 8008de2:	429d      	cmp	r5, r3
 8008de4:	bf38      	it	cc
 8008de6:	461d      	movcc	r5, r3
 8008de8:	0553      	lsls	r3, r2, #21
 8008dea:	d531      	bpl.n	8008e50 <__ssputs_r+0xa0>
 8008dec:	4629      	mov	r1, r5
 8008dee:	f7ff ff85 	bl	8008cfc <_malloc_r>
 8008df2:	4606      	mov	r6, r0
 8008df4:	b950      	cbnz	r0, 8008e0c <__ssputs_r+0x5c>
 8008df6:	230c      	movs	r3, #12
 8008df8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfc:	f8ca 3000 	str.w	r3, [sl]
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e06:	81a3      	strh	r3, [r4, #12]
 8008e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0c:	464a      	mov	r2, r9
 8008e0e:	6921      	ldr	r1, [r4, #16]
 8008e10:	f7fd fe1a 	bl	8006a48 <memcpy>
 8008e14:	89a3      	ldrh	r3, [r4, #12]
 8008e16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e1e:	81a3      	strh	r3, [r4, #12]
 8008e20:	6126      	str	r6, [r4, #16]
 8008e22:	444e      	add	r6, r9
 8008e24:	6026      	str	r6, [r4, #0]
 8008e26:	463e      	mov	r6, r7
 8008e28:	6165      	str	r5, [r4, #20]
 8008e2a:	eba5 0509 	sub.w	r5, r5, r9
 8008e2e:	60a5      	str	r5, [r4, #8]
 8008e30:	42be      	cmp	r6, r7
 8008e32:	d900      	bls.n	8008e36 <__ssputs_r+0x86>
 8008e34:	463e      	mov	r6, r7
 8008e36:	4632      	mov	r2, r6
 8008e38:	4641      	mov	r1, r8
 8008e3a:	6820      	ldr	r0, [r4, #0]
 8008e3c:	f000 fb26 	bl	800948c <memmove>
 8008e40:	68a3      	ldr	r3, [r4, #8]
 8008e42:	6822      	ldr	r2, [r4, #0]
 8008e44:	1b9b      	subs	r3, r3, r6
 8008e46:	4432      	add	r2, r6
 8008e48:	2000      	movs	r0, #0
 8008e4a:	60a3      	str	r3, [r4, #8]
 8008e4c:	6022      	str	r2, [r4, #0]
 8008e4e:	e7db      	b.n	8008e08 <__ssputs_r+0x58>
 8008e50:	462a      	mov	r2, r5
 8008e52:	f000 fb8d 	bl	8009570 <_realloc_r>
 8008e56:	4606      	mov	r6, r0
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d1e1      	bne.n	8008e20 <__ssputs_r+0x70>
 8008e5c:	4650      	mov	r0, sl
 8008e5e:	6921      	ldr	r1, [r4, #16]
 8008e60:	f000 fb3a 	bl	80094d8 <_free_r>
 8008e64:	e7c7      	b.n	8008df6 <__ssputs_r+0x46>
	...

08008e68 <_svfiprintf_r>:
 8008e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6c:	4698      	mov	r8, r3
 8008e6e:	898b      	ldrh	r3, [r1, #12]
 8008e70:	4607      	mov	r7, r0
 8008e72:	061b      	lsls	r3, r3, #24
 8008e74:	460d      	mov	r5, r1
 8008e76:	4614      	mov	r4, r2
 8008e78:	b09d      	sub	sp, #116	; 0x74
 8008e7a:	d50e      	bpl.n	8008e9a <_svfiprintf_r+0x32>
 8008e7c:	690b      	ldr	r3, [r1, #16]
 8008e7e:	b963      	cbnz	r3, 8008e9a <_svfiprintf_r+0x32>
 8008e80:	2140      	movs	r1, #64	; 0x40
 8008e82:	f7ff ff3b 	bl	8008cfc <_malloc_r>
 8008e86:	6028      	str	r0, [r5, #0]
 8008e88:	6128      	str	r0, [r5, #16]
 8008e8a:	b920      	cbnz	r0, 8008e96 <_svfiprintf_r+0x2e>
 8008e8c:	230c      	movs	r3, #12
 8008e8e:	603b      	str	r3, [r7, #0]
 8008e90:	f04f 30ff 	mov.w	r0, #4294967295
 8008e94:	e0d1      	b.n	800903a <_svfiprintf_r+0x1d2>
 8008e96:	2340      	movs	r3, #64	; 0x40
 8008e98:	616b      	str	r3, [r5, #20]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e9e:	2320      	movs	r3, #32
 8008ea0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ea4:	2330      	movs	r3, #48	; 0x30
 8008ea6:	f04f 0901 	mov.w	r9, #1
 8008eaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009054 <_svfiprintf_r+0x1ec>
 8008eb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008eb6:	4623      	mov	r3, r4
 8008eb8:	469a      	mov	sl, r3
 8008eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ebe:	b10a      	cbz	r2, 8008ec4 <_svfiprintf_r+0x5c>
 8008ec0:	2a25      	cmp	r2, #37	; 0x25
 8008ec2:	d1f9      	bne.n	8008eb8 <_svfiprintf_r+0x50>
 8008ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ec8:	d00b      	beq.n	8008ee2 <_svfiprintf_r+0x7a>
 8008eca:	465b      	mov	r3, fp
 8008ecc:	4622      	mov	r2, r4
 8008ece:	4629      	mov	r1, r5
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	f7ff ff6d 	bl	8008db0 <__ssputs_r>
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	f000 80aa 	beq.w	8009030 <_svfiprintf_r+0x1c8>
 8008edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ede:	445a      	add	r2, fp
 8008ee0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 80a2 	beq.w	8009030 <_svfiprintf_r+0x1c8>
 8008eec:	2300      	movs	r3, #0
 8008eee:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ef6:	f10a 0a01 	add.w	sl, sl, #1
 8008efa:	9304      	str	r3, [sp, #16]
 8008efc:	9307      	str	r3, [sp, #28]
 8008efe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f02:	931a      	str	r3, [sp, #104]	; 0x68
 8008f04:	4654      	mov	r4, sl
 8008f06:	2205      	movs	r2, #5
 8008f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f0c:	4851      	ldr	r0, [pc, #324]	; (8009054 <_svfiprintf_r+0x1ec>)
 8008f0e:	f000 faaf 	bl	8009470 <memchr>
 8008f12:	9a04      	ldr	r2, [sp, #16]
 8008f14:	b9d8      	cbnz	r0, 8008f4e <_svfiprintf_r+0xe6>
 8008f16:	06d0      	lsls	r0, r2, #27
 8008f18:	bf44      	itt	mi
 8008f1a:	2320      	movmi	r3, #32
 8008f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f20:	0711      	lsls	r1, r2, #28
 8008f22:	bf44      	itt	mi
 8008f24:	232b      	movmi	r3, #43	; 0x2b
 8008f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f30:	d015      	beq.n	8008f5e <_svfiprintf_r+0xf6>
 8008f32:	4654      	mov	r4, sl
 8008f34:	2000      	movs	r0, #0
 8008f36:	f04f 0c0a 	mov.w	ip, #10
 8008f3a:	9a07      	ldr	r2, [sp, #28]
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f42:	3b30      	subs	r3, #48	; 0x30
 8008f44:	2b09      	cmp	r3, #9
 8008f46:	d94e      	bls.n	8008fe6 <_svfiprintf_r+0x17e>
 8008f48:	b1b0      	cbz	r0, 8008f78 <_svfiprintf_r+0x110>
 8008f4a:	9207      	str	r2, [sp, #28]
 8008f4c:	e014      	b.n	8008f78 <_svfiprintf_r+0x110>
 8008f4e:	eba0 0308 	sub.w	r3, r0, r8
 8008f52:	fa09 f303 	lsl.w	r3, r9, r3
 8008f56:	4313      	orrs	r3, r2
 8008f58:	46a2      	mov	sl, r4
 8008f5a:	9304      	str	r3, [sp, #16]
 8008f5c:	e7d2      	b.n	8008f04 <_svfiprintf_r+0x9c>
 8008f5e:	9b03      	ldr	r3, [sp, #12]
 8008f60:	1d19      	adds	r1, r3, #4
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	9103      	str	r1, [sp, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	bfbb      	ittet	lt
 8008f6a:	425b      	neglt	r3, r3
 8008f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8008f70:	9307      	strge	r3, [sp, #28]
 8008f72:	9307      	strlt	r3, [sp, #28]
 8008f74:	bfb8      	it	lt
 8008f76:	9204      	strlt	r2, [sp, #16]
 8008f78:	7823      	ldrb	r3, [r4, #0]
 8008f7a:	2b2e      	cmp	r3, #46	; 0x2e
 8008f7c:	d10c      	bne.n	8008f98 <_svfiprintf_r+0x130>
 8008f7e:	7863      	ldrb	r3, [r4, #1]
 8008f80:	2b2a      	cmp	r3, #42	; 0x2a
 8008f82:	d135      	bne.n	8008ff0 <_svfiprintf_r+0x188>
 8008f84:	9b03      	ldr	r3, [sp, #12]
 8008f86:	3402      	adds	r4, #2
 8008f88:	1d1a      	adds	r2, r3, #4
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	9203      	str	r2, [sp, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	bfb8      	it	lt
 8008f92:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f96:	9305      	str	r3, [sp, #20]
 8008f98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009064 <_svfiprintf_r+0x1fc>
 8008f9c:	2203      	movs	r2, #3
 8008f9e:	4650      	mov	r0, sl
 8008fa0:	7821      	ldrb	r1, [r4, #0]
 8008fa2:	f000 fa65 	bl	8009470 <memchr>
 8008fa6:	b140      	cbz	r0, 8008fba <_svfiprintf_r+0x152>
 8008fa8:	2340      	movs	r3, #64	; 0x40
 8008faa:	eba0 000a 	sub.w	r0, r0, sl
 8008fae:	fa03 f000 	lsl.w	r0, r3, r0
 8008fb2:	9b04      	ldr	r3, [sp, #16]
 8008fb4:	3401      	adds	r4, #1
 8008fb6:	4303      	orrs	r3, r0
 8008fb8:	9304      	str	r3, [sp, #16]
 8008fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fbe:	2206      	movs	r2, #6
 8008fc0:	4825      	ldr	r0, [pc, #148]	; (8009058 <_svfiprintf_r+0x1f0>)
 8008fc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fc6:	f000 fa53 	bl	8009470 <memchr>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d038      	beq.n	8009040 <_svfiprintf_r+0x1d8>
 8008fce:	4b23      	ldr	r3, [pc, #140]	; (800905c <_svfiprintf_r+0x1f4>)
 8008fd0:	bb1b      	cbnz	r3, 800901a <_svfiprintf_r+0x1b2>
 8008fd2:	9b03      	ldr	r3, [sp, #12]
 8008fd4:	3307      	adds	r3, #7
 8008fd6:	f023 0307 	bic.w	r3, r3, #7
 8008fda:	3308      	adds	r3, #8
 8008fdc:	9303      	str	r3, [sp, #12]
 8008fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe0:	4433      	add	r3, r6
 8008fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe4:	e767      	b.n	8008eb6 <_svfiprintf_r+0x4e>
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	2001      	movs	r0, #1
 8008fea:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fee:	e7a5      	b.n	8008f3c <_svfiprintf_r+0xd4>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	f04f 0c0a 	mov.w	ip, #10
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	3401      	adds	r4, #1
 8008ffa:	9305      	str	r3, [sp, #20]
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009002:	3a30      	subs	r2, #48	; 0x30
 8009004:	2a09      	cmp	r2, #9
 8009006:	d903      	bls.n	8009010 <_svfiprintf_r+0x1a8>
 8009008:	2b00      	cmp	r3, #0
 800900a:	d0c5      	beq.n	8008f98 <_svfiprintf_r+0x130>
 800900c:	9105      	str	r1, [sp, #20]
 800900e:	e7c3      	b.n	8008f98 <_svfiprintf_r+0x130>
 8009010:	4604      	mov	r4, r0
 8009012:	2301      	movs	r3, #1
 8009014:	fb0c 2101 	mla	r1, ip, r1, r2
 8009018:	e7f0      	b.n	8008ffc <_svfiprintf_r+0x194>
 800901a:	ab03      	add	r3, sp, #12
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	462a      	mov	r2, r5
 8009020:	4638      	mov	r0, r7
 8009022:	4b0f      	ldr	r3, [pc, #60]	; (8009060 <_svfiprintf_r+0x1f8>)
 8009024:	a904      	add	r1, sp, #16
 8009026:	f3af 8000 	nop.w
 800902a:	1c42      	adds	r2, r0, #1
 800902c:	4606      	mov	r6, r0
 800902e:	d1d6      	bne.n	8008fde <_svfiprintf_r+0x176>
 8009030:	89ab      	ldrh	r3, [r5, #12]
 8009032:	065b      	lsls	r3, r3, #25
 8009034:	f53f af2c 	bmi.w	8008e90 <_svfiprintf_r+0x28>
 8009038:	9809      	ldr	r0, [sp, #36]	; 0x24
 800903a:	b01d      	add	sp, #116	; 0x74
 800903c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009040:	ab03      	add	r3, sp, #12
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	462a      	mov	r2, r5
 8009046:	4638      	mov	r0, r7
 8009048:	4b05      	ldr	r3, [pc, #20]	; (8009060 <_svfiprintf_r+0x1f8>)
 800904a:	a904      	add	r1, sp, #16
 800904c:	f000 f87c 	bl	8009148 <_printf_i>
 8009050:	e7eb      	b.n	800902a <_svfiprintf_r+0x1c2>
 8009052:	bf00      	nop
 8009054:	0800c69c 	.word	0x0800c69c
 8009058:	0800c6a6 	.word	0x0800c6a6
 800905c:	00000000 	.word	0x00000000
 8009060:	08008db1 	.word	0x08008db1
 8009064:	0800c6a2 	.word	0x0800c6a2

08009068 <_printf_common>:
 8009068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800906c:	4616      	mov	r6, r2
 800906e:	4699      	mov	r9, r3
 8009070:	688a      	ldr	r2, [r1, #8]
 8009072:	690b      	ldr	r3, [r1, #16]
 8009074:	4607      	mov	r7, r0
 8009076:	4293      	cmp	r3, r2
 8009078:	bfb8      	it	lt
 800907a:	4613      	movlt	r3, r2
 800907c:	6033      	str	r3, [r6, #0]
 800907e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009082:	460c      	mov	r4, r1
 8009084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009088:	b10a      	cbz	r2, 800908e <_printf_common+0x26>
 800908a:	3301      	adds	r3, #1
 800908c:	6033      	str	r3, [r6, #0]
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	0699      	lsls	r1, r3, #26
 8009092:	bf42      	ittt	mi
 8009094:	6833      	ldrmi	r3, [r6, #0]
 8009096:	3302      	addmi	r3, #2
 8009098:	6033      	strmi	r3, [r6, #0]
 800909a:	6825      	ldr	r5, [r4, #0]
 800909c:	f015 0506 	ands.w	r5, r5, #6
 80090a0:	d106      	bne.n	80090b0 <_printf_common+0x48>
 80090a2:	f104 0a19 	add.w	sl, r4, #25
 80090a6:	68e3      	ldr	r3, [r4, #12]
 80090a8:	6832      	ldr	r2, [r6, #0]
 80090aa:	1a9b      	subs	r3, r3, r2
 80090ac:	42ab      	cmp	r3, r5
 80090ae:	dc28      	bgt.n	8009102 <_printf_common+0x9a>
 80090b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090b4:	1e13      	subs	r3, r2, #0
 80090b6:	6822      	ldr	r2, [r4, #0]
 80090b8:	bf18      	it	ne
 80090ba:	2301      	movne	r3, #1
 80090bc:	0692      	lsls	r2, r2, #26
 80090be:	d42d      	bmi.n	800911c <_printf_common+0xb4>
 80090c0:	4649      	mov	r1, r9
 80090c2:	4638      	mov	r0, r7
 80090c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090c8:	47c0      	blx	r8
 80090ca:	3001      	adds	r0, #1
 80090cc:	d020      	beq.n	8009110 <_printf_common+0xa8>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	68e5      	ldr	r5, [r4, #12]
 80090d2:	f003 0306 	and.w	r3, r3, #6
 80090d6:	2b04      	cmp	r3, #4
 80090d8:	bf18      	it	ne
 80090da:	2500      	movne	r5, #0
 80090dc:	6832      	ldr	r2, [r6, #0]
 80090de:	f04f 0600 	mov.w	r6, #0
 80090e2:	68a3      	ldr	r3, [r4, #8]
 80090e4:	bf08      	it	eq
 80090e6:	1aad      	subeq	r5, r5, r2
 80090e8:	6922      	ldr	r2, [r4, #16]
 80090ea:	bf08      	it	eq
 80090ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090f0:	4293      	cmp	r3, r2
 80090f2:	bfc4      	itt	gt
 80090f4:	1a9b      	subgt	r3, r3, r2
 80090f6:	18ed      	addgt	r5, r5, r3
 80090f8:	341a      	adds	r4, #26
 80090fa:	42b5      	cmp	r5, r6
 80090fc:	d11a      	bne.n	8009134 <_printf_common+0xcc>
 80090fe:	2000      	movs	r0, #0
 8009100:	e008      	b.n	8009114 <_printf_common+0xac>
 8009102:	2301      	movs	r3, #1
 8009104:	4652      	mov	r2, sl
 8009106:	4649      	mov	r1, r9
 8009108:	4638      	mov	r0, r7
 800910a:	47c0      	blx	r8
 800910c:	3001      	adds	r0, #1
 800910e:	d103      	bne.n	8009118 <_printf_common+0xb0>
 8009110:	f04f 30ff 	mov.w	r0, #4294967295
 8009114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009118:	3501      	adds	r5, #1
 800911a:	e7c4      	b.n	80090a6 <_printf_common+0x3e>
 800911c:	2030      	movs	r0, #48	; 0x30
 800911e:	18e1      	adds	r1, r4, r3
 8009120:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009124:	1c5a      	adds	r2, r3, #1
 8009126:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800912a:	4422      	add	r2, r4
 800912c:	3302      	adds	r3, #2
 800912e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009132:	e7c5      	b.n	80090c0 <_printf_common+0x58>
 8009134:	2301      	movs	r3, #1
 8009136:	4622      	mov	r2, r4
 8009138:	4649      	mov	r1, r9
 800913a:	4638      	mov	r0, r7
 800913c:	47c0      	blx	r8
 800913e:	3001      	adds	r0, #1
 8009140:	d0e6      	beq.n	8009110 <_printf_common+0xa8>
 8009142:	3601      	adds	r6, #1
 8009144:	e7d9      	b.n	80090fa <_printf_common+0x92>
	...

08009148 <_printf_i>:
 8009148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800914c:	460c      	mov	r4, r1
 800914e:	7e27      	ldrb	r7, [r4, #24]
 8009150:	4691      	mov	r9, r2
 8009152:	2f78      	cmp	r7, #120	; 0x78
 8009154:	4680      	mov	r8, r0
 8009156:	469a      	mov	sl, r3
 8009158:	990c      	ldr	r1, [sp, #48]	; 0x30
 800915a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800915e:	d807      	bhi.n	8009170 <_printf_i+0x28>
 8009160:	2f62      	cmp	r7, #98	; 0x62
 8009162:	d80a      	bhi.n	800917a <_printf_i+0x32>
 8009164:	2f00      	cmp	r7, #0
 8009166:	f000 80d9 	beq.w	800931c <_printf_i+0x1d4>
 800916a:	2f58      	cmp	r7, #88	; 0x58
 800916c:	f000 80a4 	beq.w	80092b8 <_printf_i+0x170>
 8009170:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009178:	e03a      	b.n	80091f0 <_printf_i+0xa8>
 800917a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800917e:	2b15      	cmp	r3, #21
 8009180:	d8f6      	bhi.n	8009170 <_printf_i+0x28>
 8009182:	a001      	add	r0, pc, #4	; (adr r0, 8009188 <_printf_i+0x40>)
 8009184:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009188:	080091e1 	.word	0x080091e1
 800918c:	080091f5 	.word	0x080091f5
 8009190:	08009171 	.word	0x08009171
 8009194:	08009171 	.word	0x08009171
 8009198:	08009171 	.word	0x08009171
 800919c:	08009171 	.word	0x08009171
 80091a0:	080091f5 	.word	0x080091f5
 80091a4:	08009171 	.word	0x08009171
 80091a8:	08009171 	.word	0x08009171
 80091ac:	08009171 	.word	0x08009171
 80091b0:	08009171 	.word	0x08009171
 80091b4:	08009303 	.word	0x08009303
 80091b8:	08009225 	.word	0x08009225
 80091bc:	080092e5 	.word	0x080092e5
 80091c0:	08009171 	.word	0x08009171
 80091c4:	08009171 	.word	0x08009171
 80091c8:	08009325 	.word	0x08009325
 80091cc:	08009171 	.word	0x08009171
 80091d0:	08009225 	.word	0x08009225
 80091d4:	08009171 	.word	0x08009171
 80091d8:	08009171 	.word	0x08009171
 80091dc:	080092ed 	.word	0x080092ed
 80091e0:	680b      	ldr	r3, [r1, #0]
 80091e2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091e6:	1d1a      	adds	r2, r3, #4
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	600a      	str	r2, [r1, #0]
 80091ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091f0:	2301      	movs	r3, #1
 80091f2:	e0a4      	b.n	800933e <_printf_i+0x1f6>
 80091f4:	6825      	ldr	r5, [r4, #0]
 80091f6:	6808      	ldr	r0, [r1, #0]
 80091f8:	062e      	lsls	r6, r5, #24
 80091fa:	f100 0304 	add.w	r3, r0, #4
 80091fe:	d50a      	bpl.n	8009216 <_printf_i+0xce>
 8009200:	6805      	ldr	r5, [r0, #0]
 8009202:	600b      	str	r3, [r1, #0]
 8009204:	2d00      	cmp	r5, #0
 8009206:	da03      	bge.n	8009210 <_printf_i+0xc8>
 8009208:	232d      	movs	r3, #45	; 0x2d
 800920a:	426d      	negs	r5, r5
 800920c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009210:	230a      	movs	r3, #10
 8009212:	485e      	ldr	r0, [pc, #376]	; (800938c <_printf_i+0x244>)
 8009214:	e019      	b.n	800924a <_printf_i+0x102>
 8009216:	f015 0f40 	tst.w	r5, #64	; 0x40
 800921a:	6805      	ldr	r5, [r0, #0]
 800921c:	600b      	str	r3, [r1, #0]
 800921e:	bf18      	it	ne
 8009220:	b22d      	sxthne	r5, r5
 8009222:	e7ef      	b.n	8009204 <_printf_i+0xbc>
 8009224:	680b      	ldr	r3, [r1, #0]
 8009226:	6825      	ldr	r5, [r4, #0]
 8009228:	1d18      	adds	r0, r3, #4
 800922a:	6008      	str	r0, [r1, #0]
 800922c:	0628      	lsls	r0, r5, #24
 800922e:	d501      	bpl.n	8009234 <_printf_i+0xec>
 8009230:	681d      	ldr	r5, [r3, #0]
 8009232:	e002      	b.n	800923a <_printf_i+0xf2>
 8009234:	0669      	lsls	r1, r5, #25
 8009236:	d5fb      	bpl.n	8009230 <_printf_i+0xe8>
 8009238:	881d      	ldrh	r5, [r3, #0]
 800923a:	2f6f      	cmp	r7, #111	; 0x6f
 800923c:	bf0c      	ite	eq
 800923e:	2308      	moveq	r3, #8
 8009240:	230a      	movne	r3, #10
 8009242:	4852      	ldr	r0, [pc, #328]	; (800938c <_printf_i+0x244>)
 8009244:	2100      	movs	r1, #0
 8009246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800924a:	6866      	ldr	r6, [r4, #4]
 800924c:	2e00      	cmp	r6, #0
 800924e:	bfa8      	it	ge
 8009250:	6821      	ldrge	r1, [r4, #0]
 8009252:	60a6      	str	r6, [r4, #8]
 8009254:	bfa4      	itt	ge
 8009256:	f021 0104 	bicge.w	r1, r1, #4
 800925a:	6021      	strge	r1, [r4, #0]
 800925c:	b90d      	cbnz	r5, 8009262 <_printf_i+0x11a>
 800925e:	2e00      	cmp	r6, #0
 8009260:	d04d      	beq.n	80092fe <_printf_i+0x1b6>
 8009262:	4616      	mov	r6, r2
 8009264:	fbb5 f1f3 	udiv	r1, r5, r3
 8009268:	fb03 5711 	mls	r7, r3, r1, r5
 800926c:	5dc7      	ldrb	r7, [r0, r7]
 800926e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009272:	462f      	mov	r7, r5
 8009274:	42bb      	cmp	r3, r7
 8009276:	460d      	mov	r5, r1
 8009278:	d9f4      	bls.n	8009264 <_printf_i+0x11c>
 800927a:	2b08      	cmp	r3, #8
 800927c:	d10b      	bne.n	8009296 <_printf_i+0x14e>
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	07df      	lsls	r7, r3, #31
 8009282:	d508      	bpl.n	8009296 <_printf_i+0x14e>
 8009284:	6923      	ldr	r3, [r4, #16]
 8009286:	6861      	ldr	r1, [r4, #4]
 8009288:	4299      	cmp	r1, r3
 800928a:	bfde      	ittt	le
 800928c:	2330      	movle	r3, #48	; 0x30
 800928e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009292:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009296:	1b92      	subs	r2, r2, r6
 8009298:	6122      	str	r2, [r4, #16]
 800929a:	464b      	mov	r3, r9
 800929c:	4621      	mov	r1, r4
 800929e:	4640      	mov	r0, r8
 80092a0:	f8cd a000 	str.w	sl, [sp]
 80092a4:	aa03      	add	r2, sp, #12
 80092a6:	f7ff fedf 	bl	8009068 <_printf_common>
 80092aa:	3001      	adds	r0, #1
 80092ac:	d14c      	bne.n	8009348 <_printf_i+0x200>
 80092ae:	f04f 30ff 	mov.w	r0, #4294967295
 80092b2:	b004      	add	sp, #16
 80092b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b8:	4834      	ldr	r0, [pc, #208]	; (800938c <_printf_i+0x244>)
 80092ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092be:	680e      	ldr	r6, [r1, #0]
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80092c6:	061f      	lsls	r7, r3, #24
 80092c8:	600e      	str	r6, [r1, #0]
 80092ca:	d514      	bpl.n	80092f6 <_printf_i+0x1ae>
 80092cc:	07d9      	lsls	r1, r3, #31
 80092ce:	bf44      	itt	mi
 80092d0:	f043 0320 	orrmi.w	r3, r3, #32
 80092d4:	6023      	strmi	r3, [r4, #0]
 80092d6:	b91d      	cbnz	r5, 80092e0 <_printf_i+0x198>
 80092d8:	6823      	ldr	r3, [r4, #0]
 80092da:	f023 0320 	bic.w	r3, r3, #32
 80092de:	6023      	str	r3, [r4, #0]
 80092e0:	2310      	movs	r3, #16
 80092e2:	e7af      	b.n	8009244 <_printf_i+0xfc>
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	f043 0320 	orr.w	r3, r3, #32
 80092ea:	6023      	str	r3, [r4, #0]
 80092ec:	2378      	movs	r3, #120	; 0x78
 80092ee:	4828      	ldr	r0, [pc, #160]	; (8009390 <_printf_i+0x248>)
 80092f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092f4:	e7e3      	b.n	80092be <_printf_i+0x176>
 80092f6:	065e      	lsls	r6, r3, #25
 80092f8:	bf48      	it	mi
 80092fa:	b2ad      	uxthmi	r5, r5
 80092fc:	e7e6      	b.n	80092cc <_printf_i+0x184>
 80092fe:	4616      	mov	r6, r2
 8009300:	e7bb      	b.n	800927a <_printf_i+0x132>
 8009302:	680b      	ldr	r3, [r1, #0]
 8009304:	6826      	ldr	r6, [r4, #0]
 8009306:	1d1d      	adds	r5, r3, #4
 8009308:	6960      	ldr	r0, [r4, #20]
 800930a:	600d      	str	r5, [r1, #0]
 800930c:	0635      	lsls	r5, r6, #24
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	d501      	bpl.n	8009316 <_printf_i+0x1ce>
 8009312:	6018      	str	r0, [r3, #0]
 8009314:	e002      	b.n	800931c <_printf_i+0x1d4>
 8009316:	0671      	lsls	r1, r6, #25
 8009318:	d5fb      	bpl.n	8009312 <_printf_i+0x1ca>
 800931a:	8018      	strh	r0, [r3, #0]
 800931c:	2300      	movs	r3, #0
 800931e:	4616      	mov	r6, r2
 8009320:	6123      	str	r3, [r4, #16]
 8009322:	e7ba      	b.n	800929a <_printf_i+0x152>
 8009324:	680b      	ldr	r3, [r1, #0]
 8009326:	1d1a      	adds	r2, r3, #4
 8009328:	600a      	str	r2, [r1, #0]
 800932a:	681e      	ldr	r6, [r3, #0]
 800932c:	2100      	movs	r1, #0
 800932e:	4630      	mov	r0, r6
 8009330:	6862      	ldr	r2, [r4, #4]
 8009332:	f000 f89d 	bl	8009470 <memchr>
 8009336:	b108      	cbz	r0, 800933c <_printf_i+0x1f4>
 8009338:	1b80      	subs	r0, r0, r6
 800933a:	6060      	str	r0, [r4, #4]
 800933c:	6863      	ldr	r3, [r4, #4]
 800933e:	6123      	str	r3, [r4, #16]
 8009340:	2300      	movs	r3, #0
 8009342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009346:	e7a8      	b.n	800929a <_printf_i+0x152>
 8009348:	4632      	mov	r2, r6
 800934a:	4649      	mov	r1, r9
 800934c:	4640      	mov	r0, r8
 800934e:	6923      	ldr	r3, [r4, #16]
 8009350:	47d0      	blx	sl
 8009352:	3001      	adds	r0, #1
 8009354:	d0ab      	beq.n	80092ae <_printf_i+0x166>
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	079b      	lsls	r3, r3, #30
 800935a:	d413      	bmi.n	8009384 <_printf_i+0x23c>
 800935c:	68e0      	ldr	r0, [r4, #12]
 800935e:	9b03      	ldr	r3, [sp, #12]
 8009360:	4298      	cmp	r0, r3
 8009362:	bfb8      	it	lt
 8009364:	4618      	movlt	r0, r3
 8009366:	e7a4      	b.n	80092b2 <_printf_i+0x16a>
 8009368:	2301      	movs	r3, #1
 800936a:	4632      	mov	r2, r6
 800936c:	4649      	mov	r1, r9
 800936e:	4640      	mov	r0, r8
 8009370:	47d0      	blx	sl
 8009372:	3001      	adds	r0, #1
 8009374:	d09b      	beq.n	80092ae <_printf_i+0x166>
 8009376:	3501      	adds	r5, #1
 8009378:	68e3      	ldr	r3, [r4, #12]
 800937a:	9903      	ldr	r1, [sp, #12]
 800937c:	1a5b      	subs	r3, r3, r1
 800937e:	42ab      	cmp	r3, r5
 8009380:	dcf2      	bgt.n	8009368 <_printf_i+0x220>
 8009382:	e7eb      	b.n	800935c <_printf_i+0x214>
 8009384:	2500      	movs	r5, #0
 8009386:	f104 0619 	add.w	r6, r4, #25
 800938a:	e7f5      	b.n	8009378 <_printf_i+0x230>
 800938c:	0800c6ad 	.word	0x0800c6ad
 8009390:	0800c6be 	.word	0x0800c6be

08009394 <nan>:
 8009394:	2000      	movs	r0, #0
 8009396:	4901      	ldr	r1, [pc, #4]	; (800939c <nan+0x8>)
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	7ff80000 	.word	0x7ff80000

080093a0 <_sbrk_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	2300      	movs	r3, #0
 80093a4:	4d05      	ldr	r5, [pc, #20]	; (80093bc <_sbrk_r+0x1c>)
 80093a6:	4604      	mov	r4, r0
 80093a8:	4608      	mov	r0, r1
 80093aa:	602b      	str	r3, [r5, #0]
 80093ac:	f7f9 f9fc 	bl	80027a8 <_sbrk>
 80093b0:	1c43      	adds	r3, r0, #1
 80093b2:	d102      	bne.n	80093ba <_sbrk_r+0x1a>
 80093b4:	682b      	ldr	r3, [r5, #0]
 80093b6:	b103      	cbz	r3, 80093ba <_sbrk_r+0x1a>
 80093b8:	6023      	str	r3, [r4, #0]
 80093ba:	bd38      	pop	{r3, r4, r5, pc}
 80093bc:	200004d0 	.word	0x200004d0

080093c0 <strncmp>:
 80093c0:	b510      	push	{r4, lr}
 80093c2:	b16a      	cbz	r2, 80093e0 <strncmp+0x20>
 80093c4:	3901      	subs	r1, #1
 80093c6:	1884      	adds	r4, r0, r2
 80093c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80093cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d103      	bne.n	80093dc <strncmp+0x1c>
 80093d4:	42a0      	cmp	r0, r4
 80093d6:	d001      	beq.n	80093dc <strncmp+0x1c>
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1f5      	bne.n	80093c8 <strncmp+0x8>
 80093dc:	1a98      	subs	r0, r3, r2
 80093de:	bd10      	pop	{r4, pc}
 80093e0:	4610      	mov	r0, r2
 80093e2:	e7fc      	b.n	80093de <strncmp+0x1e>

080093e4 <__ascii_wctomb>:
 80093e4:	4603      	mov	r3, r0
 80093e6:	4608      	mov	r0, r1
 80093e8:	b141      	cbz	r1, 80093fc <__ascii_wctomb+0x18>
 80093ea:	2aff      	cmp	r2, #255	; 0xff
 80093ec:	d904      	bls.n	80093f8 <__ascii_wctomb+0x14>
 80093ee:	228a      	movs	r2, #138	; 0x8a
 80093f0:	f04f 30ff 	mov.w	r0, #4294967295
 80093f4:	601a      	str	r2, [r3, #0]
 80093f6:	4770      	bx	lr
 80093f8:	2001      	movs	r0, #1
 80093fa:	700a      	strb	r2, [r1, #0]
 80093fc:	4770      	bx	lr
	...

08009400 <__assert_func>:
 8009400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009402:	4614      	mov	r4, r2
 8009404:	461a      	mov	r2, r3
 8009406:	4b09      	ldr	r3, [pc, #36]	; (800942c <__assert_func+0x2c>)
 8009408:	4605      	mov	r5, r0
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68d8      	ldr	r0, [r3, #12]
 800940e:	b14c      	cbz	r4, 8009424 <__assert_func+0x24>
 8009410:	4b07      	ldr	r3, [pc, #28]	; (8009430 <__assert_func+0x30>)
 8009412:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009416:	9100      	str	r1, [sp, #0]
 8009418:	462b      	mov	r3, r5
 800941a:	4906      	ldr	r1, [pc, #24]	; (8009434 <__assert_func+0x34>)
 800941c:	f000 f80e 	bl	800943c <fiprintf>
 8009420:	f000 fae4 	bl	80099ec <abort>
 8009424:	4b04      	ldr	r3, [pc, #16]	; (8009438 <__assert_func+0x38>)
 8009426:	461c      	mov	r4, r3
 8009428:	e7f3      	b.n	8009412 <__assert_func+0x12>
 800942a:	bf00      	nop
 800942c:	2000000c 	.word	0x2000000c
 8009430:	0800c6cf 	.word	0x0800c6cf
 8009434:	0800c6dc 	.word	0x0800c6dc
 8009438:	0800c70a 	.word	0x0800c70a

0800943c <fiprintf>:
 800943c:	b40e      	push	{r1, r2, r3}
 800943e:	b503      	push	{r0, r1, lr}
 8009440:	4601      	mov	r1, r0
 8009442:	ab03      	add	r3, sp, #12
 8009444:	4805      	ldr	r0, [pc, #20]	; (800945c <fiprintf+0x20>)
 8009446:	f853 2b04 	ldr.w	r2, [r3], #4
 800944a:	6800      	ldr	r0, [r0, #0]
 800944c:	9301      	str	r3, [sp, #4]
 800944e:	f000 f8dd 	bl	800960c <_vfiprintf_r>
 8009452:	b002      	add	sp, #8
 8009454:	f85d eb04 	ldr.w	lr, [sp], #4
 8009458:	b003      	add	sp, #12
 800945a:	4770      	bx	lr
 800945c:	2000000c 	.word	0x2000000c

08009460 <malloc>:
 8009460:	4b02      	ldr	r3, [pc, #8]	; (800946c <malloc+0xc>)
 8009462:	4601      	mov	r1, r0
 8009464:	6818      	ldr	r0, [r3, #0]
 8009466:	f7ff bc49 	b.w	8008cfc <_malloc_r>
 800946a:	bf00      	nop
 800946c:	2000000c 	.word	0x2000000c

08009470 <memchr>:
 8009470:	4603      	mov	r3, r0
 8009472:	b510      	push	{r4, lr}
 8009474:	b2c9      	uxtb	r1, r1
 8009476:	4402      	add	r2, r0
 8009478:	4293      	cmp	r3, r2
 800947a:	4618      	mov	r0, r3
 800947c:	d101      	bne.n	8009482 <memchr+0x12>
 800947e:	2000      	movs	r0, #0
 8009480:	e003      	b.n	800948a <memchr+0x1a>
 8009482:	7804      	ldrb	r4, [r0, #0]
 8009484:	3301      	adds	r3, #1
 8009486:	428c      	cmp	r4, r1
 8009488:	d1f6      	bne.n	8009478 <memchr+0x8>
 800948a:	bd10      	pop	{r4, pc}

0800948c <memmove>:
 800948c:	4288      	cmp	r0, r1
 800948e:	b510      	push	{r4, lr}
 8009490:	eb01 0402 	add.w	r4, r1, r2
 8009494:	d902      	bls.n	800949c <memmove+0x10>
 8009496:	4284      	cmp	r4, r0
 8009498:	4623      	mov	r3, r4
 800949a:	d807      	bhi.n	80094ac <memmove+0x20>
 800949c:	1e43      	subs	r3, r0, #1
 800949e:	42a1      	cmp	r1, r4
 80094a0:	d008      	beq.n	80094b4 <memmove+0x28>
 80094a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094aa:	e7f8      	b.n	800949e <memmove+0x12>
 80094ac:	4601      	mov	r1, r0
 80094ae:	4402      	add	r2, r0
 80094b0:	428a      	cmp	r2, r1
 80094b2:	d100      	bne.n	80094b6 <memmove+0x2a>
 80094b4:	bd10      	pop	{r4, pc}
 80094b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094be:	e7f7      	b.n	80094b0 <memmove+0x24>

080094c0 <__malloc_lock>:
 80094c0:	4801      	ldr	r0, [pc, #4]	; (80094c8 <__malloc_lock+0x8>)
 80094c2:	f000 bc53 	b.w	8009d6c <__retarget_lock_acquire_recursive>
 80094c6:	bf00      	nop
 80094c8:	200004d8 	.word	0x200004d8

080094cc <__malloc_unlock>:
 80094cc:	4801      	ldr	r0, [pc, #4]	; (80094d4 <__malloc_unlock+0x8>)
 80094ce:	f000 bc4e 	b.w	8009d6e <__retarget_lock_release_recursive>
 80094d2:	bf00      	nop
 80094d4:	200004d8 	.word	0x200004d8

080094d8 <_free_r>:
 80094d8:	b538      	push	{r3, r4, r5, lr}
 80094da:	4605      	mov	r5, r0
 80094dc:	2900      	cmp	r1, #0
 80094de:	d043      	beq.n	8009568 <_free_r+0x90>
 80094e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094e4:	1f0c      	subs	r4, r1, #4
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	bfb8      	it	lt
 80094ea:	18e4      	addlt	r4, r4, r3
 80094ec:	f7ff ffe8 	bl	80094c0 <__malloc_lock>
 80094f0:	4a1e      	ldr	r2, [pc, #120]	; (800956c <_free_r+0x94>)
 80094f2:	6813      	ldr	r3, [r2, #0]
 80094f4:	4610      	mov	r0, r2
 80094f6:	b933      	cbnz	r3, 8009506 <_free_r+0x2e>
 80094f8:	6063      	str	r3, [r4, #4]
 80094fa:	6014      	str	r4, [r2, #0]
 80094fc:	4628      	mov	r0, r5
 80094fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009502:	f7ff bfe3 	b.w	80094cc <__malloc_unlock>
 8009506:	42a3      	cmp	r3, r4
 8009508:	d90a      	bls.n	8009520 <_free_r+0x48>
 800950a:	6821      	ldr	r1, [r4, #0]
 800950c:	1862      	adds	r2, r4, r1
 800950e:	4293      	cmp	r3, r2
 8009510:	bf01      	itttt	eq
 8009512:	681a      	ldreq	r2, [r3, #0]
 8009514:	685b      	ldreq	r3, [r3, #4]
 8009516:	1852      	addeq	r2, r2, r1
 8009518:	6022      	streq	r2, [r4, #0]
 800951a:	6063      	str	r3, [r4, #4]
 800951c:	6004      	str	r4, [r0, #0]
 800951e:	e7ed      	b.n	80094fc <_free_r+0x24>
 8009520:	461a      	mov	r2, r3
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	b10b      	cbz	r3, 800952a <_free_r+0x52>
 8009526:	42a3      	cmp	r3, r4
 8009528:	d9fa      	bls.n	8009520 <_free_r+0x48>
 800952a:	6811      	ldr	r1, [r2, #0]
 800952c:	1850      	adds	r0, r2, r1
 800952e:	42a0      	cmp	r0, r4
 8009530:	d10b      	bne.n	800954a <_free_r+0x72>
 8009532:	6820      	ldr	r0, [r4, #0]
 8009534:	4401      	add	r1, r0
 8009536:	1850      	adds	r0, r2, r1
 8009538:	4283      	cmp	r3, r0
 800953a:	6011      	str	r1, [r2, #0]
 800953c:	d1de      	bne.n	80094fc <_free_r+0x24>
 800953e:	6818      	ldr	r0, [r3, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	4401      	add	r1, r0
 8009544:	6011      	str	r1, [r2, #0]
 8009546:	6053      	str	r3, [r2, #4]
 8009548:	e7d8      	b.n	80094fc <_free_r+0x24>
 800954a:	d902      	bls.n	8009552 <_free_r+0x7a>
 800954c:	230c      	movs	r3, #12
 800954e:	602b      	str	r3, [r5, #0]
 8009550:	e7d4      	b.n	80094fc <_free_r+0x24>
 8009552:	6820      	ldr	r0, [r4, #0]
 8009554:	1821      	adds	r1, r4, r0
 8009556:	428b      	cmp	r3, r1
 8009558:	bf01      	itttt	eq
 800955a:	6819      	ldreq	r1, [r3, #0]
 800955c:	685b      	ldreq	r3, [r3, #4]
 800955e:	1809      	addeq	r1, r1, r0
 8009560:	6021      	streq	r1, [r4, #0]
 8009562:	6063      	str	r3, [r4, #4]
 8009564:	6054      	str	r4, [r2, #4]
 8009566:	e7c9      	b.n	80094fc <_free_r+0x24>
 8009568:	bd38      	pop	{r3, r4, r5, pc}
 800956a:	bf00      	nop
 800956c:	20000270 	.word	0x20000270

08009570 <_realloc_r>:
 8009570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009572:	4607      	mov	r7, r0
 8009574:	4614      	mov	r4, r2
 8009576:	460e      	mov	r6, r1
 8009578:	b921      	cbnz	r1, 8009584 <_realloc_r+0x14>
 800957a:	4611      	mov	r1, r2
 800957c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009580:	f7ff bbbc 	b.w	8008cfc <_malloc_r>
 8009584:	b922      	cbnz	r2, 8009590 <_realloc_r+0x20>
 8009586:	f7ff ffa7 	bl	80094d8 <_free_r>
 800958a:	4625      	mov	r5, r4
 800958c:	4628      	mov	r0, r5
 800958e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009590:	f000 fc52 	bl	8009e38 <_malloc_usable_size_r>
 8009594:	42a0      	cmp	r0, r4
 8009596:	d20f      	bcs.n	80095b8 <_realloc_r+0x48>
 8009598:	4621      	mov	r1, r4
 800959a:	4638      	mov	r0, r7
 800959c:	f7ff fbae 	bl	8008cfc <_malloc_r>
 80095a0:	4605      	mov	r5, r0
 80095a2:	2800      	cmp	r0, #0
 80095a4:	d0f2      	beq.n	800958c <_realloc_r+0x1c>
 80095a6:	4631      	mov	r1, r6
 80095a8:	4622      	mov	r2, r4
 80095aa:	f7fd fa4d 	bl	8006a48 <memcpy>
 80095ae:	4631      	mov	r1, r6
 80095b0:	4638      	mov	r0, r7
 80095b2:	f7ff ff91 	bl	80094d8 <_free_r>
 80095b6:	e7e9      	b.n	800958c <_realloc_r+0x1c>
 80095b8:	4635      	mov	r5, r6
 80095ba:	e7e7      	b.n	800958c <_realloc_r+0x1c>

080095bc <__sfputc_r>:
 80095bc:	6893      	ldr	r3, [r2, #8]
 80095be:	b410      	push	{r4}
 80095c0:	3b01      	subs	r3, #1
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	6093      	str	r3, [r2, #8]
 80095c6:	da07      	bge.n	80095d8 <__sfputc_r+0x1c>
 80095c8:	6994      	ldr	r4, [r2, #24]
 80095ca:	42a3      	cmp	r3, r4
 80095cc:	db01      	blt.n	80095d2 <__sfputc_r+0x16>
 80095ce:	290a      	cmp	r1, #10
 80095d0:	d102      	bne.n	80095d8 <__sfputc_r+0x1c>
 80095d2:	bc10      	pop	{r4}
 80095d4:	f000 b94a 	b.w	800986c <__swbuf_r>
 80095d8:	6813      	ldr	r3, [r2, #0]
 80095da:	1c58      	adds	r0, r3, #1
 80095dc:	6010      	str	r0, [r2, #0]
 80095de:	7019      	strb	r1, [r3, #0]
 80095e0:	4608      	mov	r0, r1
 80095e2:	bc10      	pop	{r4}
 80095e4:	4770      	bx	lr

080095e6 <__sfputs_r>:
 80095e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e8:	4606      	mov	r6, r0
 80095ea:	460f      	mov	r7, r1
 80095ec:	4614      	mov	r4, r2
 80095ee:	18d5      	adds	r5, r2, r3
 80095f0:	42ac      	cmp	r4, r5
 80095f2:	d101      	bne.n	80095f8 <__sfputs_r+0x12>
 80095f4:	2000      	movs	r0, #0
 80095f6:	e007      	b.n	8009608 <__sfputs_r+0x22>
 80095f8:	463a      	mov	r2, r7
 80095fa:	4630      	mov	r0, r6
 80095fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009600:	f7ff ffdc 	bl	80095bc <__sfputc_r>
 8009604:	1c43      	adds	r3, r0, #1
 8009606:	d1f3      	bne.n	80095f0 <__sfputs_r+0xa>
 8009608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800960c <_vfiprintf_r>:
 800960c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009610:	460d      	mov	r5, r1
 8009612:	4614      	mov	r4, r2
 8009614:	4698      	mov	r8, r3
 8009616:	4606      	mov	r6, r0
 8009618:	b09d      	sub	sp, #116	; 0x74
 800961a:	b118      	cbz	r0, 8009624 <_vfiprintf_r+0x18>
 800961c:	6983      	ldr	r3, [r0, #24]
 800961e:	b90b      	cbnz	r3, 8009624 <_vfiprintf_r+0x18>
 8009620:	f000 fb06 	bl	8009c30 <__sinit>
 8009624:	4b89      	ldr	r3, [pc, #548]	; (800984c <_vfiprintf_r+0x240>)
 8009626:	429d      	cmp	r5, r3
 8009628:	d11b      	bne.n	8009662 <_vfiprintf_r+0x56>
 800962a:	6875      	ldr	r5, [r6, #4]
 800962c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800962e:	07d9      	lsls	r1, r3, #31
 8009630:	d405      	bmi.n	800963e <_vfiprintf_r+0x32>
 8009632:	89ab      	ldrh	r3, [r5, #12]
 8009634:	059a      	lsls	r2, r3, #22
 8009636:	d402      	bmi.n	800963e <_vfiprintf_r+0x32>
 8009638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800963a:	f000 fb97 	bl	8009d6c <__retarget_lock_acquire_recursive>
 800963e:	89ab      	ldrh	r3, [r5, #12]
 8009640:	071b      	lsls	r3, r3, #28
 8009642:	d501      	bpl.n	8009648 <_vfiprintf_r+0x3c>
 8009644:	692b      	ldr	r3, [r5, #16]
 8009646:	b9eb      	cbnz	r3, 8009684 <_vfiprintf_r+0x78>
 8009648:	4629      	mov	r1, r5
 800964a:	4630      	mov	r0, r6
 800964c:	f000 f960 	bl	8009910 <__swsetup_r>
 8009650:	b1c0      	cbz	r0, 8009684 <_vfiprintf_r+0x78>
 8009652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009654:	07dc      	lsls	r4, r3, #31
 8009656:	d50e      	bpl.n	8009676 <_vfiprintf_r+0x6a>
 8009658:	f04f 30ff 	mov.w	r0, #4294967295
 800965c:	b01d      	add	sp, #116	; 0x74
 800965e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009662:	4b7b      	ldr	r3, [pc, #492]	; (8009850 <_vfiprintf_r+0x244>)
 8009664:	429d      	cmp	r5, r3
 8009666:	d101      	bne.n	800966c <_vfiprintf_r+0x60>
 8009668:	68b5      	ldr	r5, [r6, #8]
 800966a:	e7df      	b.n	800962c <_vfiprintf_r+0x20>
 800966c:	4b79      	ldr	r3, [pc, #484]	; (8009854 <_vfiprintf_r+0x248>)
 800966e:	429d      	cmp	r5, r3
 8009670:	bf08      	it	eq
 8009672:	68f5      	ldreq	r5, [r6, #12]
 8009674:	e7da      	b.n	800962c <_vfiprintf_r+0x20>
 8009676:	89ab      	ldrh	r3, [r5, #12]
 8009678:	0598      	lsls	r0, r3, #22
 800967a:	d4ed      	bmi.n	8009658 <_vfiprintf_r+0x4c>
 800967c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800967e:	f000 fb76 	bl	8009d6e <__retarget_lock_release_recursive>
 8009682:	e7e9      	b.n	8009658 <_vfiprintf_r+0x4c>
 8009684:	2300      	movs	r3, #0
 8009686:	9309      	str	r3, [sp, #36]	; 0x24
 8009688:	2320      	movs	r3, #32
 800968a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800968e:	2330      	movs	r3, #48	; 0x30
 8009690:	f04f 0901 	mov.w	r9, #1
 8009694:	f8cd 800c 	str.w	r8, [sp, #12]
 8009698:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009858 <_vfiprintf_r+0x24c>
 800969c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096a0:	4623      	mov	r3, r4
 80096a2:	469a      	mov	sl, r3
 80096a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096a8:	b10a      	cbz	r2, 80096ae <_vfiprintf_r+0xa2>
 80096aa:	2a25      	cmp	r2, #37	; 0x25
 80096ac:	d1f9      	bne.n	80096a2 <_vfiprintf_r+0x96>
 80096ae:	ebba 0b04 	subs.w	fp, sl, r4
 80096b2:	d00b      	beq.n	80096cc <_vfiprintf_r+0xc0>
 80096b4:	465b      	mov	r3, fp
 80096b6:	4622      	mov	r2, r4
 80096b8:	4629      	mov	r1, r5
 80096ba:	4630      	mov	r0, r6
 80096bc:	f7ff ff93 	bl	80095e6 <__sfputs_r>
 80096c0:	3001      	adds	r0, #1
 80096c2:	f000 80aa 	beq.w	800981a <_vfiprintf_r+0x20e>
 80096c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096c8:	445a      	add	r2, fp
 80096ca:	9209      	str	r2, [sp, #36]	; 0x24
 80096cc:	f89a 3000 	ldrb.w	r3, [sl]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f000 80a2 	beq.w	800981a <_vfiprintf_r+0x20e>
 80096d6:	2300      	movs	r3, #0
 80096d8:	f04f 32ff 	mov.w	r2, #4294967295
 80096dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096e0:	f10a 0a01 	add.w	sl, sl, #1
 80096e4:	9304      	str	r3, [sp, #16]
 80096e6:	9307      	str	r3, [sp, #28]
 80096e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096ec:	931a      	str	r3, [sp, #104]	; 0x68
 80096ee:	4654      	mov	r4, sl
 80096f0:	2205      	movs	r2, #5
 80096f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096f6:	4858      	ldr	r0, [pc, #352]	; (8009858 <_vfiprintf_r+0x24c>)
 80096f8:	f7ff feba 	bl	8009470 <memchr>
 80096fc:	9a04      	ldr	r2, [sp, #16]
 80096fe:	b9d8      	cbnz	r0, 8009738 <_vfiprintf_r+0x12c>
 8009700:	06d1      	lsls	r1, r2, #27
 8009702:	bf44      	itt	mi
 8009704:	2320      	movmi	r3, #32
 8009706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800970a:	0713      	lsls	r3, r2, #28
 800970c:	bf44      	itt	mi
 800970e:	232b      	movmi	r3, #43	; 0x2b
 8009710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009714:	f89a 3000 	ldrb.w	r3, [sl]
 8009718:	2b2a      	cmp	r3, #42	; 0x2a
 800971a:	d015      	beq.n	8009748 <_vfiprintf_r+0x13c>
 800971c:	4654      	mov	r4, sl
 800971e:	2000      	movs	r0, #0
 8009720:	f04f 0c0a 	mov.w	ip, #10
 8009724:	9a07      	ldr	r2, [sp, #28]
 8009726:	4621      	mov	r1, r4
 8009728:	f811 3b01 	ldrb.w	r3, [r1], #1
 800972c:	3b30      	subs	r3, #48	; 0x30
 800972e:	2b09      	cmp	r3, #9
 8009730:	d94e      	bls.n	80097d0 <_vfiprintf_r+0x1c4>
 8009732:	b1b0      	cbz	r0, 8009762 <_vfiprintf_r+0x156>
 8009734:	9207      	str	r2, [sp, #28]
 8009736:	e014      	b.n	8009762 <_vfiprintf_r+0x156>
 8009738:	eba0 0308 	sub.w	r3, r0, r8
 800973c:	fa09 f303 	lsl.w	r3, r9, r3
 8009740:	4313      	orrs	r3, r2
 8009742:	46a2      	mov	sl, r4
 8009744:	9304      	str	r3, [sp, #16]
 8009746:	e7d2      	b.n	80096ee <_vfiprintf_r+0xe2>
 8009748:	9b03      	ldr	r3, [sp, #12]
 800974a:	1d19      	adds	r1, r3, #4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	9103      	str	r1, [sp, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	bfbb      	ittet	lt
 8009754:	425b      	neglt	r3, r3
 8009756:	f042 0202 	orrlt.w	r2, r2, #2
 800975a:	9307      	strge	r3, [sp, #28]
 800975c:	9307      	strlt	r3, [sp, #28]
 800975e:	bfb8      	it	lt
 8009760:	9204      	strlt	r2, [sp, #16]
 8009762:	7823      	ldrb	r3, [r4, #0]
 8009764:	2b2e      	cmp	r3, #46	; 0x2e
 8009766:	d10c      	bne.n	8009782 <_vfiprintf_r+0x176>
 8009768:	7863      	ldrb	r3, [r4, #1]
 800976a:	2b2a      	cmp	r3, #42	; 0x2a
 800976c:	d135      	bne.n	80097da <_vfiprintf_r+0x1ce>
 800976e:	9b03      	ldr	r3, [sp, #12]
 8009770:	3402      	adds	r4, #2
 8009772:	1d1a      	adds	r2, r3, #4
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	9203      	str	r2, [sp, #12]
 8009778:	2b00      	cmp	r3, #0
 800977a:	bfb8      	it	lt
 800977c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009780:	9305      	str	r3, [sp, #20]
 8009782:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009868 <_vfiprintf_r+0x25c>
 8009786:	2203      	movs	r2, #3
 8009788:	4650      	mov	r0, sl
 800978a:	7821      	ldrb	r1, [r4, #0]
 800978c:	f7ff fe70 	bl	8009470 <memchr>
 8009790:	b140      	cbz	r0, 80097a4 <_vfiprintf_r+0x198>
 8009792:	2340      	movs	r3, #64	; 0x40
 8009794:	eba0 000a 	sub.w	r0, r0, sl
 8009798:	fa03 f000 	lsl.w	r0, r3, r0
 800979c:	9b04      	ldr	r3, [sp, #16]
 800979e:	3401      	adds	r4, #1
 80097a0:	4303      	orrs	r3, r0
 80097a2:	9304      	str	r3, [sp, #16]
 80097a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a8:	2206      	movs	r2, #6
 80097aa:	482c      	ldr	r0, [pc, #176]	; (800985c <_vfiprintf_r+0x250>)
 80097ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097b0:	f7ff fe5e 	bl	8009470 <memchr>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d03f      	beq.n	8009838 <_vfiprintf_r+0x22c>
 80097b8:	4b29      	ldr	r3, [pc, #164]	; (8009860 <_vfiprintf_r+0x254>)
 80097ba:	bb1b      	cbnz	r3, 8009804 <_vfiprintf_r+0x1f8>
 80097bc:	9b03      	ldr	r3, [sp, #12]
 80097be:	3307      	adds	r3, #7
 80097c0:	f023 0307 	bic.w	r3, r3, #7
 80097c4:	3308      	adds	r3, #8
 80097c6:	9303      	str	r3, [sp, #12]
 80097c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ca:	443b      	add	r3, r7
 80097cc:	9309      	str	r3, [sp, #36]	; 0x24
 80097ce:	e767      	b.n	80096a0 <_vfiprintf_r+0x94>
 80097d0:	460c      	mov	r4, r1
 80097d2:	2001      	movs	r0, #1
 80097d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80097d8:	e7a5      	b.n	8009726 <_vfiprintf_r+0x11a>
 80097da:	2300      	movs	r3, #0
 80097dc:	f04f 0c0a 	mov.w	ip, #10
 80097e0:	4619      	mov	r1, r3
 80097e2:	3401      	adds	r4, #1
 80097e4:	9305      	str	r3, [sp, #20]
 80097e6:	4620      	mov	r0, r4
 80097e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097ec:	3a30      	subs	r2, #48	; 0x30
 80097ee:	2a09      	cmp	r2, #9
 80097f0:	d903      	bls.n	80097fa <_vfiprintf_r+0x1ee>
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d0c5      	beq.n	8009782 <_vfiprintf_r+0x176>
 80097f6:	9105      	str	r1, [sp, #20]
 80097f8:	e7c3      	b.n	8009782 <_vfiprintf_r+0x176>
 80097fa:	4604      	mov	r4, r0
 80097fc:	2301      	movs	r3, #1
 80097fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009802:	e7f0      	b.n	80097e6 <_vfiprintf_r+0x1da>
 8009804:	ab03      	add	r3, sp, #12
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	462a      	mov	r2, r5
 800980a:	4630      	mov	r0, r6
 800980c:	4b15      	ldr	r3, [pc, #84]	; (8009864 <_vfiprintf_r+0x258>)
 800980e:	a904      	add	r1, sp, #16
 8009810:	f3af 8000 	nop.w
 8009814:	4607      	mov	r7, r0
 8009816:	1c78      	adds	r0, r7, #1
 8009818:	d1d6      	bne.n	80097c8 <_vfiprintf_r+0x1bc>
 800981a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800981c:	07d9      	lsls	r1, r3, #31
 800981e:	d405      	bmi.n	800982c <_vfiprintf_r+0x220>
 8009820:	89ab      	ldrh	r3, [r5, #12]
 8009822:	059a      	lsls	r2, r3, #22
 8009824:	d402      	bmi.n	800982c <_vfiprintf_r+0x220>
 8009826:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009828:	f000 faa1 	bl	8009d6e <__retarget_lock_release_recursive>
 800982c:	89ab      	ldrh	r3, [r5, #12]
 800982e:	065b      	lsls	r3, r3, #25
 8009830:	f53f af12 	bmi.w	8009658 <_vfiprintf_r+0x4c>
 8009834:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009836:	e711      	b.n	800965c <_vfiprintf_r+0x50>
 8009838:	ab03      	add	r3, sp, #12
 800983a:	9300      	str	r3, [sp, #0]
 800983c:	462a      	mov	r2, r5
 800983e:	4630      	mov	r0, r6
 8009840:	4b08      	ldr	r3, [pc, #32]	; (8009864 <_vfiprintf_r+0x258>)
 8009842:	a904      	add	r1, sp, #16
 8009844:	f7ff fc80 	bl	8009148 <_printf_i>
 8009848:	e7e4      	b.n	8009814 <_vfiprintf_r+0x208>
 800984a:	bf00      	nop
 800984c:	0800c72c 	.word	0x0800c72c
 8009850:	0800c74c 	.word	0x0800c74c
 8009854:	0800c70c 	.word	0x0800c70c
 8009858:	0800c69c 	.word	0x0800c69c
 800985c:	0800c6a6 	.word	0x0800c6a6
 8009860:	00000000 	.word	0x00000000
 8009864:	080095e7 	.word	0x080095e7
 8009868:	0800c6a2 	.word	0x0800c6a2

0800986c <__swbuf_r>:
 800986c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986e:	460e      	mov	r6, r1
 8009870:	4614      	mov	r4, r2
 8009872:	4605      	mov	r5, r0
 8009874:	b118      	cbz	r0, 800987e <__swbuf_r+0x12>
 8009876:	6983      	ldr	r3, [r0, #24]
 8009878:	b90b      	cbnz	r3, 800987e <__swbuf_r+0x12>
 800987a:	f000 f9d9 	bl	8009c30 <__sinit>
 800987e:	4b21      	ldr	r3, [pc, #132]	; (8009904 <__swbuf_r+0x98>)
 8009880:	429c      	cmp	r4, r3
 8009882:	d12b      	bne.n	80098dc <__swbuf_r+0x70>
 8009884:	686c      	ldr	r4, [r5, #4]
 8009886:	69a3      	ldr	r3, [r4, #24]
 8009888:	60a3      	str	r3, [r4, #8]
 800988a:	89a3      	ldrh	r3, [r4, #12]
 800988c:	071a      	lsls	r2, r3, #28
 800988e:	d52f      	bpl.n	80098f0 <__swbuf_r+0x84>
 8009890:	6923      	ldr	r3, [r4, #16]
 8009892:	b36b      	cbz	r3, 80098f0 <__swbuf_r+0x84>
 8009894:	6923      	ldr	r3, [r4, #16]
 8009896:	6820      	ldr	r0, [r4, #0]
 8009898:	b2f6      	uxtb	r6, r6
 800989a:	1ac0      	subs	r0, r0, r3
 800989c:	6963      	ldr	r3, [r4, #20]
 800989e:	4637      	mov	r7, r6
 80098a0:	4283      	cmp	r3, r0
 80098a2:	dc04      	bgt.n	80098ae <__swbuf_r+0x42>
 80098a4:	4621      	mov	r1, r4
 80098a6:	4628      	mov	r0, r5
 80098a8:	f000 f92e 	bl	8009b08 <_fflush_r>
 80098ac:	bb30      	cbnz	r0, 80098fc <__swbuf_r+0x90>
 80098ae:	68a3      	ldr	r3, [r4, #8]
 80098b0:	3001      	adds	r0, #1
 80098b2:	3b01      	subs	r3, #1
 80098b4:	60a3      	str	r3, [r4, #8]
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	6022      	str	r2, [r4, #0]
 80098bc:	701e      	strb	r6, [r3, #0]
 80098be:	6963      	ldr	r3, [r4, #20]
 80098c0:	4283      	cmp	r3, r0
 80098c2:	d004      	beq.n	80098ce <__swbuf_r+0x62>
 80098c4:	89a3      	ldrh	r3, [r4, #12]
 80098c6:	07db      	lsls	r3, r3, #31
 80098c8:	d506      	bpl.n	80098d8 <__swbuf_r+0x6c>
 80098ca:	2e0a      	cmp	r6, #10
 80098cc:	d104      	bne.n	80098d8 <__swbuf_r+0x6c>
 80098ce:	4621      	mov	r1, r4
 80098d0:	4628      	mov	r0, r5
 80098d2:	f000 f919 	bl	8009b08 <_fflush_r>
 80098d6:	b988      	cbnz	r0, 80098fc <__swbuf_r+0x90>
 80098d8:	4638      	mov	r0, r7
 80098da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098dc:	4b0a      	ldr	r3, [pc, #40]	; (8009908 <__swbuf_r+0x9c>)
 80098de:	429c      	cmp	r4, r3
 80098e0:	d101      	bne.n	80098e6 <__swbuf_r+0x7a>
 80098e2:	68ac      	ldr	r4, [r5, #8]
 80098e4:	e7cf      	b.n	8009886 <__swbuf_r+0x1a>
 80098e6:	4b09      	ldr	r3, [pc, #36]	; (800990c <__swbuf_r+0xa0>)
 80098e8:	429c      	cmp	r4, r3
 80098ea:	bf08      	it	eq
 80098ec:	68ec      	ldreq	r4, [r5, #12]
 80098ee:	e7ca      	b.n	8009886 <__swbuf_r+0x1a>
 80098f0:	4621      	mov	r1, r4
 80098f2:	4628      	mov	r0, r5
 80098f4:	f000 f80c 	bl	8009910 <__swsetup_r>
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d0cb      	beq.n	8009894 <__swbuf_r+0x28>
 80098fc:	f04f 37ff 	mov.w	r7, #4294967295
 8009900:	e7ea      	b.n	80098d8 <__swbuf_r+0x6c>
 8009902:	bf00      	nop
 8009904:	0800c72c 	.word	0x0800c72c
 8009908:	0800c74c 	.word	0x0800c74c
 800990c:	0800c70c 	.word	0x0800c70c

08009910 <__swsetup_r>:
 8009910:	4b32      	ldr	r3, [pc, #200]	; (80099dc <__swsetup_r+0xcc>)
 8009912:	b570      	push	{r4, r5, r6, lr}
 8009914:	681d      	ldr	r5, [r3, #0]
 8009916:	4606      	mov	r6, r0
 8009918:	460c      	mov	r4, r1
 800991a:	b125      	cbz	r5, 8009926 <__swsetup_r+0x16>
 800991c:	69ab      	ldr	r3, [r5, #24]
 800991e:	b913      	cbnz	r3, 8009926 <__swsetup_r+0x16>
 8009920:	4628      	mov	r0, r5
 8009922:	f000 f985 	bl	8009c30 <__sinit>
 8009926:	4b2e      	ldr	r3, [pc, #184]	; (80099e0 <__swsetup_r+0xd0>)
 8009928:	429c      	cmp	r4, r3
 800992a:	d10f      	bne.n	800994c <__swsetup_r+0x3c>
 800992c:	686c      	ldr	r4, [r5, #4]
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009934:	0719      	lsls	r1, r3, #28
 8009936:	d42c      	bmi.n	8009992 <__swsetup_r+0x82>
 8009938:	06dd      	lsls	r5, r3, #27
 800993a:	d411      	bmi.n	8009960 <__swsetup_r+0x50>
 800993c:	2309      	movs	r3, #9
 800993e:	6033      	str	r3, [r6, #0]
 8009940:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009944:	f04f 30ff 	mov.w	r0, #4294967295
 8009948:	81a3      	strh	r3, [r4, #12]
 800994a:	e03e      	b.n	80099ca <__swsetup_r+0xba>
 800994c:	4b25      	ldr	r3, [pc, #148]	; (80099e4 <__swsetup_r+0xd4>)
 800994e:	429c      	cmp	r4, r3
 8009950:	d101      	bne.n	8009956 <__swsetup_r+0x46>
 8009952:	68ac      	ldr	r4, [r5, #8]
 8009954:	e7eb      	b.n	800992e <__swsetup_r+0x1e>
 8009956:	4b24      	ldr	r3, [pc, #144]	; (80099e8 <__swsetup_r+0xd8>)
 8009958:	429c      	cmp	r4, r3
 800995a:	bf08      	it	eq
 800995c:	68ec      	ldreq	r4, [r5, #12]
 800995e:	e7e6      	b.n	800992e <__swsetup_r+0x1e>
 8009960:	0758      	lsls	r0, r3, #29
 8009962:	d512      	bpl.n	800998a <__swsetup_r+0x7a>
 8009964:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009966:	b141      	cbz	r1, 800997a <__swsetup_r+0x6a>
 8009968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800996c:	4299      	cmp	r1, r3
 800996e:	d002      	beq.n	8009976 <__swsetup_r+0x66>
 8009970:	4630      	mov	r0, r6
 8009972:	f7ff fdb1 	bl	80094d8 <_free_r>
 8009976:	2300      	movs	r3, #0
 8009978:	6363      	str	r3, [r4, #52]	; 0x34
 800997a:	89a3      	ldrh	r3, [r4, #12]
 800997c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009980:	81a3      	strh	r3, [r4, #12]
 8009982:	2300      	movs	r3, #0
 8009984:	6063      	str	r3, [r4, #4]
 8009986:	6923      	ldr	r3, [r4, #16]
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	f043 0308 	orr.w	r3, r3, #8
 8009990:	81a3      	strh	r3, [r4, #12]
 8009992:	6923      	ldr	r3, [r4, #16]
 8009994:	b94b      	cbnz	r3, 80099aa <__swsetup_r+0x9a>
 8009996:	89a3      	ldrh	r3, [r4, #12]
 8009998:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800999c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099a0:	d003      	beq.n	80099aa <__swsetup_r+0x9a>
 80099a2:	4621      	mov	r1, r4
 80099a4:	4630      	mov	r0, r6
 80099a6:	f000 fa07 	bl	8009db8 <__smakebuf_r>
 80099aa:	89a0      	ldrh	r0, [r4, #12]
 80099ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099b0:	f010 0301 	ands.w	r3, r0, #1
 80099b4:	d00a      	beq.n	80099cc <__swsetup_r+0xbc>
 80099b6:	2300      	movs	r3, #0
 80099b8:	60a3      	str	r3, [r4, #8]
 80099ba:	6963      	ldr	r3, [r4, #20]
 80099bc:	425b      	negs	r3, r3
 80099be:	61a3      	str	r3, [r4, #24]
 80099c0:	6923      	ldr	r3, [r4, #16]
 80099c2:	b943      	cbnz	r3, 80099d6 <__swsetup_r+0xc6>
 80099c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099c8:	d1ba      	bne.n	8009940 <__swsetup_r+0x30>
 80099ca:	bd70      	pop	{r4, r5, r6, pc}
 80099cc:	0781      	lsls	r1, r0, #30
 80099ce:	bf58      	it	pl
 80099d0:	6963      	ldrpl	r3, [r4, #20]
 80099d2:	60a3      	str	r3, [r4, #8]
 80099d4:	e7f4      	b.n	80099c0 <__swsetup_r+0xb0>
 80099d6:	2000      	movs	r0, #0
 80099d8:	e7f7      	b.n	80099ca <__swsetup_r+0xba>
 80099da:	bf00      	nop
 80099dc:	2000000c 	.word	0x2000000c
 80099e0:	0800c72c 	.word	0x0800c72c
 80099e4:	0800c74c 	.word	0x0800c74c
 80099e8:	0800c70c 	.word	0x0800c70c

080099ec <abort>:
 80099ec:	2006      	movs	r0, #6
 80099ee:	b508      	push	{r3, lr}
 80099f0:	f000 fa52 	bl	8009e98 <raise>
 80099f4:	2001      	movs	r0, #1
 80099f6:	f7f8 fe64 	bl	80026c2 <_exit>
	...

080099fc <__sflush_r>:
 80099fc:	898a      	ldrh	r2, [r1, #12]
 80099fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a02:	4605      	mov	r5, r0
 8009a04:	0710      	lsls	r0, r2, #28
 8009a06:	460c      	mov	r4, r1
 8009a08:	d458      	bmi.n	8009abc <__sflush_r+0xc0>
 8009a0a:	684b      	ldr	r3, [r1, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	dc05      	bgt.n	8009a1c <__sflush_r+0x20>
 8009a10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	dc02      	bgt.n	8009a1c <__sflush_r+0x20>
 8009a16:	2000      	movs	r0, #0
 8009a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a1e:	2e00      	cmp	r6, #0
 8009a20:	d0f9      	beq.n	8009a16 <__sflush_r+0x1a>
 8009a22:	2300      	movs	r3, #0
 8009a24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a28:	682f      	ldr	r7, [r5, #0]
 8009a2a:	602b      	str	r3, [r5, #0]
 8009a2c:	d032      	beq.n	8009a94 <__sflush_r+0x98>
 8009a2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a30:	89a3      	ldrh	r3, [r4, #12]
 8009a32:	075a      	lsls	r2, r3, #29
 8009a34:	d505      	bpl.n	8009a42 <__sflush_r+0x46>
 8009a36:	6863      	ldr	r3, [r4, #4]
 8009a38:	1ac0      	subs	r0, r0, r3
 8009a3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a3c:	b10b      	cbz	r3, 8009a42 <__sflush_r+0x46>
 8009a3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a40:	1ac0      	subs	r0, r0, r3
 8009a42:	2300      	movs	r3, #0
 8009a44:	4602      	mov	r2, r0
 8009a46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a48:	4628      	mov	r0, r5
 8009a4a:	6a21      	ldr	r1, [r4, #32]
 8009a4c:	47b0      	blx	r6
 8009a4e:	1c43      	adds	r3, r0, #1
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	d106      	bne.n	8009a62 <__sflush_r+0x66>
 8009a54:	6829      	ldr	r1, [r5, #0]
 8009a56:	291d      	cmp	r1, #29
 8009a58:	d82c      	bhi.n	8009ab4 <__sflush_r+0xb8>
 8009a5a:	4a2a      	ldr	r2, [pc, #168]	; (8009b04 <__sflush_r+0x108>)
 8009a5c:	40ca      	lsrs	r2, r1
 8009a5e:	07d6      	lsls	r6, r2, #31
 8009a60:	d528      	bpl.n	8009ab4 <__sflush_r+0xb8>
 8009a62:	2200      	movs	r2, #0
 8009a64:	6062      	str	r2, [r4, #4]
 8009a66:	6922      	ldr	r2, [r4, #16]
 8009a68:	04d9      	lsls	r1, r3, #19
 8009a6a:	6022      	str	r2, [r4, #0]
 8009a6c:	d504      	bpl.n	8009a78 <__sflush_r+0x7c>
 8009a6e:	1c42      	adds	r2, r0, #1
 8009a70:	d101      	bne.n	8009a76 <__sflush_r+0x7a>
 8009a72:	682b      	ldr	r3, [r5, #0]
 8009a74:	b903      	cbnz	r3, 8009a78 <__sflush_r+0x7c>
 8009a76:	6560      	str	r0, [r4, #84]	; 0x54
 8009a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a7a:	602f      	str	r7, [r5, #0]
 8009a7c:	2900      	cmp	r1, #0
 8009a7e:	d0ca      	beq.n	8009a16 <__sflush_r+0x1a>
 8009a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a84:	4299      	cmp	r1, r3
 8009a86:	d002      	beq.n	8009a8e <__sflush_r+0x92>
 8009a88:	4628      	mov	r0, r5
 8009a8a:	f7ff fd25 	bl	80094d8 <_free_r>
 8009a8e:	2000      	movs	r0, #0
 8009a90:	6360      	str	r0, [r4, #52]	; 0x34
 8009a92:	e7c1      	b.n	8009a18 <__sflush_r+0x1c>
 8009a94:	6a21      	ldr	r1, [r4, #32]
 8009a96:	2301      	movs	r3, #1
 8009a98:	4628      	mov	r0, r5
 8009a9a:	47b0      	blx	r6
 8009a9c:	1c41      	adds	r1, r0, #1
 8009a9e:	d1c7      	bne.n	8009a30 <__sflush_r+0x34>
 8009aa0:	682b      	ldr	r3, [r5, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d0c4      	beq.n	8009a30 <__sflush_r+0x34>
 8009aa6:	2b1d      	cmp	r3, #29
 8009aa8:	d001      	beq.n	8009aae <__sflush_r+0xb2>
 8009aaa:	2b16      	cmp	r3, #22
 8009aac:	d101      	bne.n	8009ab2 <__sflush_r+0xb6>
 8009aae:	602f      	str	r7, [r5, #0]
 8009ab0:	e7b1      	b.n	8009a16 <__sflush_r+0x1a>
 8009ab2:	89a3      	ldrh	r3, [r4, #12]
 8009ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ab8:	81a3      	strh	r3, [r4, #12]
 8009aba:	e7ad      	b.n	8009a18 <__sflush_r+0x1c>
 8009abc:	690f      	ldr	r7, [r1, #16]
 8009abe:	2f00      	cmp	r7, #0
 8009ac0:	d0a9      	beq.n	8009a16 <__sflush_r+0x1a>
 8009ac2:	0793      	lsls	r3, r2, #30
 8009ac4:	bf18      	it	ne
 8009ac6:	2300      	movne	r3, #0
 8009ac8:	680e      	ldr	r6, [r1, #0]
 8009aca:	bf08      	it	eq
 8009acc:	694b      	ldreq	r3, [r1, #20]
 8009ace:	eba6 0807 	sub.w	r8, r6, r7
 8009ad2:	600f      	str	r7, [r1, #0]
 8009ad4:	608b      	str	r3, [r1, #8]
 8009ad6:	f1b8 0f00 	cmp.w	r8, #0
 8009ada:	dd9c      	ble.n	8009a16 <__sflush_r+0x1a>
 8009adc:	4643      	mov	r3, r8
 8009ade:	463a      	mov	r2, r7
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	6a21      	ldr	r1, [r4, #32]
 8009ae4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ae6:	47b0      	blx	r6
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	dc06      	bgt.n	8009afa <__sflush_r+0xfe>
 8009aec:	89a3      	ldrh	r3, [r4, #12]
 8009aee:	f04f 30ff 	mov.w	r0, #4294967295
 8009af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009af6:	81a3      	strh	r3, [r4, #12]
 8009af8:	e78e      	b.n	8009a18 <__sflush_r+0x1c>
 8009afa:	4407      	add	r7, r0
 8009afc:	eba8 0800 	sub.w	r8, r8, r0
 8009b00:	e7e9      	b.n	8009ad6 <__sflush_r+0xda>
 8009b02:	bf00      	nop
 8009b04:	20400001 	.word	0x20400001

08009b08 <_fflush_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	690b      	ldr	r3, [r1, #16]
 8009b0c:	4605      	mov	r5, r0
 8009b0e:	460c      	mov	r4, r1
 8009b10:	b913      	cbnz	r3, 8009b18 <_fflush_r+0x10>
 8009b12:	2500      	movs	r5, #0
 8009b14:	4628      	mov	r0, r5
 8009b16:	bd38      	pop	{r3, r4, r5, pc}
 8009b18:	b118      	cbz	r0, 8009b22 <_fflush_r+0x1a>
 8009b1a:	6983      	ldr	r3, [r0, #24]
 8009b1c:	b90b      	cbnz	r3, 8009b22 <_fflush_r+0x1a>
 8009b1e:	f000 f887 	bl	8009c30 <__sinit>
 8009b22:	4b14      	ldr	r3, [pc, #80]	; (8009b74 <_fflush_r+0x6c>)
 8009b24:	429c      	cmp	r4, r3
 8009b26:	d11b      	bne.n	8009b60 <_fflush_r+0x58>
 8009b28:	686c      	ldr	r4, [r5, #4]
 8009b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d0ef      	beq.n	8009b12 <_fflush_r+0xa>
 8009b32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b34:	07d0      	lsls	r0, r2, #31
 8009b36:	d404      	bmi.n	8009b42 <_fflush_r+0x3a>
 8009b38:	0599      	lsls	r1, r3, #22
 8009b3a:	d402      	bmi.n	8009b42 <_fflush_r+0x3a>
 8009b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b3e:	f000 f915 	bl	8009d6c <__retarget_lock_acquire_recursive>
 8009b42:	4628      	mov	r0, r5
 8009b44:	4621      	mov	r1, r4
 8009b46:	f7ff ff59 	bl	80099fc <__sflush_r>
 8009b4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b4c:	4605      	mov	r5, r0
 8009b4e:	07da      	lsls	r2, r3, #31
 8009b50:	d4e0      	bmi.n	8009b14 <_fflush_r+0xc>
 8009b52:	89a3      	ldrh	r3, [r4, #12]
 8009b54:	059b      	lsls	r3, r3, #22
 8009b56:	d4dd      	bmi.n	8009b14 <_fflush_r+0xc>
 8009b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b5a:	f000 f908 	bl	8009d6e <__retarget_lock_release_recursive>
 8009b5e:	e7d9      	b.n	8009b14 <_fflush_r+0xc>
 8009b60:	4b05      	ldr	r3, [pc, #20]	; (8009b78 <_fflush_r+0x70>)
 8009b62:	429c      	cmp	r4, r3
 8009b64:	d101      	bne.n	8009b6a <_fflush_r+0x62>
 8009b66:	68ac      	ldr	r4, [r5, #8]
 8009b68:	e7df      	b.n	8009b2a <_fflush_r+0x22>
 8009b6a:	4b04      	ldr	r3, [pc, #16]	; (8009b7c <_fflush_r+0x74>)
 8009b6c:	429c      	cmp	r4, r3
 8009b6e:	bf08      	it	eq
 8009b70:	68ec      	ldreq	r4, [r5, #12]
 8009b72:	e7da      	b.n	8009b2a <_fflush_r+0x22>
 8009b74:	0800c72c 	.word	0x0800c72c
 8009b78:	0800c74c 	.word	0x0800c74c
 8009b7c:	0800c70c 	.word	0x0800c70c

08009b80 <std>:
 8009b80:	2300      	movs	r3, #0
 8009b82:	b510      	push	{r4, lr}
 8009b84:	4604      	mov	r4, r0
 8009b86:	e9c0 3300 	strd	r3, r3, [r0]
 8009b8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b8e:	6083      	str	r3, [r0, #8]
 8009b90:	8181      	strh	r1, [r0, #12]
 8009b92:	6643      	str	r3, [r0, #100]	; 0x64
 8009b94:	81c2      	strh	r2, [r0, #14]
 8009b96:	6183      	str	r3, [r0, #24]
 8009b98:	4619      	mov	r1, r3
 8009b9a:	2208      	movs	r2, #8
 8009b9c:	305c      	adds	r0, #92	; 0x5c
 8009b9e:	f7fc ff61 	bl	8006a64 <memset>
 8009ba2:	4b05      	ldr	r3, [pc, #20]	; (8009bb8 <std+0x38>)
 8009ba4:	6224      	str	r4, [r4, #32]
 8009ba6:	6263      	str	r3, [r4, #36]	; 0x24
 8009ba8:	4b04      	ldr	r3, [pc, #16]	; (8009bbc <std+0x3c>)
 8009baa:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bac:	4b04      	ldr	r3, [pc, #16]	; (8009bc0 <std+0x40>)
 8009bae:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bb0:	4b04      	ldr	r3, [pc, #16]	; (8009bc4 <std+0x44>)
 8009bb2:	6323      	str	r3, [r4, #48]	; 0x30
 8009bb4:	bd10      	pop	{r4, pc}
 8009bb6:	bf00      	nop
 8009bb8:	08009ed1 	.word	0x08009ed1
 8009bbc:	08009ef3 	.word	0x08009ef3
 8009bc0:	08009f2b 	.word	0x08009f2b
 8009bc4:	08009f4f 	.word	0x08009f4f

08009bc8 <_cleanup_r>:
 8009bc8:	4901      	ldr	r1, [pc, #4]	; (8009bd0 <_cleanup_r+0x8>)
 8009bca:	f000 b8af 	b.w	8009d2c <_fwalk_reent>
 8009bce:	bf00      	nop
 8009bd0:	08009b09 	.word	0x08009b09

08009bd4 <__sfmoreglue>:
 8009bd4:	b570      	push	{r4, r5, r6, lr}
 8009bd6:	2568      	movs	r5, #104	; 0x68
 8009bd8:	1e4a      	subs	r2, r1, #1
 8009bda:	4355      	muls	r5, r2
 8009bdc:	460e      	mov	r6, r1
 8009bde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009be2:	f7ff f88b 	bl	8008cfc <_malloc_r>
 8009be6:	4604      	mov	r4, r0
 8009be8:	b140      	cbz	r0, 8009bfc <__sfmoreglue+0x28>
 8009bea:	2100      	movs	r1, #0
 8009bec:	e9c0 1600 	strd	r1, r6, [r0]
 8009bf0:	300c      	adds	r0, #12
 8009bf2:	60a0      	str	r0, [r4, #8]
 8009bf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009bf8:	f7fc ff34 	bl	8006a64 <memset>
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	bd70      	pop	{r4, r5, r6, pc}

08009c00 <__sfp_lock_acquire>:
 8009c00:	4801      	ldr	r0, [pc, #4]	; (8009c08 <__sfp_lock_acquire+0x8>)
 8009c02:	f000 b8b3 	b.w	8009d6c <__retarget_lock_acquire_recursive>
 8009c06:	bf00      	nop
 8009c08:	200004dc 	.word	0x200004dc

08009c0c <__sfp_lock_release>:
 8009c0c:	4801      	ldr	r0, [pc, #4]	; (8009c14 <__sfp_lock_release+0x8>)
 8009c0e:	f000 b8ae 	b.w	8009d6e <__retarget_lock_release_recursive>
 8009c12:	bf00      	nop
 8009c14:	200004dc 	.word	0x200004dc

08009c18 <__sinit_lock_acquire>:
 8009c18:	4801      	ldr	r0, [pc, #4]	; (8009c20 <__sinit_lock_acquire+0x8>)
 8009c1a:	f000 b8a7 	b.w	8009d6c <__retarget_lock_acquire_recursive>
 8009c1e:	bf00      	nop
 8009c20:	200004d7 	.word	0x200004d7

08009c24 <__sinit_lock_release>:
 8009c24:	4801      	ldr	r0, [pc, #4]	; (8009c2c <__sinit_lock_release+0x8>)
 8009c26:	f000 b8a2 	b.w	8009d6e <__retarget_lock_release_recursive>
 8009c2a:	bf00      	nop
 8009c2c:	200004d7 	.word	0x200004d7

08009c30 <__sinit>:
 8009c30:	b510      	push	{r4, lr}
 8009c32:	4604      	mov	r4, r0
 8009c34:	f7ff fff0 	bl	8009c18 <__sinit_lock_acquire>
 8009c38:	69a3      	ldr	r3, [r4, #24]
 8009c3a:	b11b      	cbz	r3, 8009c44 <__sinit+0x14>
 8009c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c40:	f7ff bff0 	b.w	8009c24 <__sinit_lock_release>
 8009c44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c48:	6523      	str	r3, [r4, #80]	; 0x50
 8009c4a:	4b13      	ldr	r3, [pc, #76]	; (8009c98 <__sinit+0x68>)
 8009c4c:	4a13      	ldr	r2, [pc, #76]	; (8009c9c <__sinit+0x6c>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c52:	42a3      	cmp	r3, r4
 8009c54:	bf08      	it	eq
 8009c56:	2301      	moveq	r3, #1
 8009c58:	4620      	mov	r0, r4
 8009c5a:	bf08      	it	eq
 8009c5c:	61a3      	streq	r3, [r4, #24]
 8009c5e:	f000 f81f 	bl	8009ca0 <__sfp>
 8009c62:	6060      	str	r0, [r4, #4]
 8009c64:	4620      	mov	r0, r4
 8009c66:	f000 f81b 	bl	8009ca0 <__sfp>
 8009c6a:	60a0      	str	r0, [r4, #8]
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	f000 f817 	bl	8009ca0 <__sfp>
 8009c72:	2200      	movs	r2, #0
 8009c74:	2104      	movs	r1, #4
 8009c76:	60e0      	str	r0, [r4, #12]
 8009c78:	6860      	ldr	r0, [r4, #4]
 8009c7a:	f7ff ff81 	bl	8009b80 <std>
 8009c7e:	2201      	movs	r2, #1
 8009c80:	2109      	movs	r1, #9
 8009c82:	68a0      	ldr	r0, [r4, #8]
 8009c84:	f7ff ff7c 	bl	8009b80 <std>
 8009c88:	2202      	movs	r2, #2
 8009c8a:	2112      	movs	r1, #18
 8009c8c:	68e0      	ldr	r0, [r4, #12]
 8009c8e:	f7ff ff77 	bl	8009b80 <std>
 8009c92:	2301      	movs	r3, #1
 8009c94:	61a3      	str	r3, [r4, #24]
 8009c96:	e7d1      	b.n	8009c3c <__sinit+0xc>
 8009c98:	0800c32c 	.word	0x0800c32c
 8009c9c:	08009bc9 	.word	0x08009bc9

08009ca0 <__sfp>:
 8009ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca2:	4607      	mov	r7, r0
 8009ca4:	f7ff ffac 	bl	8009c00 <__sfp_lock_acquire>
 8009ca8:	4b1e      	ldr	r3, [pc, #120]	; (8009d24 <__sfp+0x84>)
 8009caa:	681e      	ldr	r6, [r3, #0]
 8009cac:	69b3      	ldr	r3, [r6, #24]
 8009cae:	b913      	cbnz	r3, 8009cb6 <__sfp+0x16>
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	f7ff ffbd 	bl	8009c30 <__sinit>
 8009cb6:	3648      	adds	r6, #72	; 0x48
 8009cb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	d503      	bpl.n	8009cc8 <__sfp+0x28>
 8009cc0:	6833      	ldr	r3, [r6, #0]
 8009cc2:	b30b      	cbz	r3, 8009d08 <__sfp+0x68>
 8009cc4:	6836      	ldr	r6, [r6, #0]
 8009cc6:	e7f7      	b.n	8009cb8 <__sfp+0x18>
 8009cc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ccc:	b9d5      	cbnz	r5, 8009d04 <__sfp+0x64>
 8009cce:	4b16      	ldr	r3, [pc, #88]	; (8009d28 <__sfp+0x88>)
 8009cd0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cd4:	60e3      	str	r3, [r4, #12]
 8009cd6:	6665      	str	r5, [r4, #100]	; 0x64
 8009cd8:	f000 f847 	bl	8009d6a <__retarget_lock_init_recursive>
 8009cdc:	f7ff ff96 	bl	8009c0c <__sfp_lock_release>
 8009ce0:	2208      	movs	r2, #8
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ce8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009cec:	6025      	str	r5, [r4, #0]
 8009cee:	61a5      	str	r5, [r4, #24]
 8009cf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009cf4:	f7fc feb6 	bl	8006a64 <memset>
 8009cf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d00:	4620      	mov	r0, r4
 8009d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d04:	3468      	adds	r4, #104	; 0x68
 8009d06:	e7d9      	b.n	8009cbc <__sfp+0x1c>
 8009d08:	2104      	movs	r1, #4
 8009d0a:	4638      	mov	r0, r7
 8009d0c:	f7ff ff62 	bl	8009bd4 <__sfmoreglue>
 8009d10:	4604      	mov	r4, r0
 8009d12:	6030      	str	r0, [r6, #0]
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d1d5      	bne.n	8009cc4 <__sfp+0x24>
 8009d18:	f7ff ff78 	bl	8009c0c <__sfp_lock_release>
 8009d1c:	230c      	movs	r3, #12
 8009d1e:	603b      	str	r3, [r7, #0]
 8009d20:	e7ee      	b.n	8009d00 <__sfp+0x60>
 8009d22:	bf00      	nop
 8009d24:	0800c32c 	.word	0x0800c32c
 8009d28:	ffff0001 	.word	0xffff0001

08009d2c <_fwalk_reent>:
 8009d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d30:	4606      	mov	r6, r0
 8009d32:	4688      	mov	r8, r1
 8009d34:	2700      	movs	r7, #0
 8009d36:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d3e:	f1b9 0901 	subs.w	r9, r9, #1
 8009d42:	d505      	bpl.n	8009d50 <_fwalk_reent+0x24>
 8009d44:	6824      	ldr	r4, [r4, #0]
 8009d46:	2c00      	cmp	r4, #0
 8009d48:	d1f7      	bne.n	8009d3a <_fwalk_reent+0xe>
 8009d4a:	4638      	mov	r0, r7
 8009d4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d50:	89ab      	ldrh	r3, [r5, #12]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d907      	bls.n	8009d66 <_fwalk_reent+0x3a>
 8009d56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	d003      	beq.n	8009d66 <_fwalk_reent+0x3a>
 8009d5e:	4629      	mov	r1, r5
 8009d60:	4630      	mov	r0, r6
 8009d62:	47c0      	blx	r8
 8009d64:	4307      	orrs	r7, r0
 8009d66:	3568      	adds	r5, #104	; 0x68
 8009d68:	e7e9      	b.n	8009d3e <_fwalk_reent+0x12>

08009d6a <__retarget_lock_init_recursive>:
 8009d6a:	4770      	bx	lr

08009d6c <__retarget_lock_acquire_recursive>:
 8009d6c:	4770      	bx	lr

08009d6e <__retarget_lock_release_recursive>:
 8009d6e:	4770      	bx	lr

08009d70 <__swhatbuf_r>:
 8009d70:	b570      	push	{r4, r5, r6, lr}
 8009d72:	460e      	mov	r6, r1
 8009d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d78:	4614      	mov	r4, r2
 8009d7a:	2900      	cmp	r1, #0
 8009d7c:	461d      	mov	r5, r3
 8009d7e:	b096      	sub	sp, #88	; 0x58
 8009d80:	da07      	bge.n	8009d92 <__swhatbuf_r+0x22>
 8009d82:	2300      	movs	r3, #0
 8009d84:	602b      	str	r3, [r5, #0]
 8009d86:	89b3      	ldrh	r3, [r6, #12]
 8009d88:	061a      	lsls	r2, r3, #24
 8009d8a:	d410      	bmi.n	8009dae <__swhatbuf_r+0x3e>
 8009d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d90:	e00e      	b.n	8009db0 <__swhatbuf_r+0x40>
 8009d92:	466a      	mov	r2, sp
 8009d94:	f000 f902 	bl	8009f9c <_fstat_r>
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	dbf2      	blt.n	8009d82 <__swhatbuf_r+0x12>
 8009d9c:	9a01      	ldr	r2, [sp, #4]
 8009d9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009da2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009da6:	425a      	negs	r2, r3
 8009da8:	415a      	adcs	r2, r3
 8009daa:	602a      	str	r2, [r5, #0]
 8009dac:	e7ee      	b.n	8009d8c <__swhatbuf_r+0x1c>
 8009dae:	2340      	movs	r3, #64	; 0x40
 8009db0:	2000      	movs	r0, #0
 8009db2:	6023      	str	r3, [r4, #0]
 8009db4:	b016      	add	sp, #88	; 0x58
 8009db6:	bd70      	pop	{r4, r5, r6, pc}

08009db8 <__smakebuf_r>:
 8009db8:	898b      	ldrh	r3, [r1, #12]
 8009dba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dbc:	079d      	lsls	r5, r3, #30
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	460c      	mov	r4, r1
 8009dc2:	d507      	bpl.n	8009dd4 <__smakebuf_r+0x1c>
 8009dc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	6123      	str	r3, [r4, #16]
 8009dcc:	2301      	movs	r3, #1
 8009dce:	6163      	str	r3, [r4, #20]
 8009dd0:	b002      	add	sp, #8
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}
 8009dd4:	466a      	mov	r2, sp
 8009dd6:	ab01      	add	r3, sp, #4
 8009dd8:	f7ff ffca 	bl	8009d70 <__swhatbuf_r>
 8009ddc:	9900      	ldr	r1, [sp, #0]
 8009dde:	4605      	mov	r5, r0
 8009de0:	4630      	mov	r0, r6
 8009de2:	f7fe ff8b 	bl	8008cfc <_malloc_r>
 8009de6:	b948      	cbnz	r0, 8009dfc <__smakebuf_r+0x44>
 8009de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dec:	059a      	lsls	r2, r3, #22
 8009dee:	d4ef      	bmi.n	8009dd0 <__smakebuf_r+0x18>
 8009df0:	f023 0303 	bic.w	r3, r3, #3
 8009df4:	f043 0302 	orr.w	r3, r3, #2
 8009df8:	81a3      	strh	r3, [r4, #12]
 8009dfa:	e7e3      	b.n	8009dc4 <__smakebuf_r+0xc>
 8009dfc:	4b0d      	ldr	r3, [pc, #52]	; (8009e34 <__smakebuf_r+0x7c>)
 8009dfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	6020      	str	r0, [r4, #0]
 8009e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e08:	81a3      	strh	r3, [r4, #12]
 8009e0a:	9b00      	ldr	r3, [sp, #0]
 8009e0c:	6120      	str	r0, [r4, #16]
 8009e0e:	6163      	str	r3, [r4, #20]
 8009e10:	9b01      	ldr	r3, [sp, #4]
 8009e12:	b15b      	cbz	r3, 8009e2c <__smakebuf_r+0x74>
 8009e14:	4630      	mov	r0, r6
 8009e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e1a:	f000 f8d1 	bl	8009fc0 <_isatty_r>
 8009e1e:	b128      	cbz	r0, 8009e2c <__smakebuf_r+0x74>
 8009e20:	89a3      	ldrh	r3, [r4, #12]
 8009e22:	f023 0303 	bic.w	r3, r3, #3
 8009e26:	f043 0301 	orr.w	r3, r3, #1
 8009e2a:	81a3      	strh	r3, [r4, #12]
 8009e2c:	89a0      	ldrh	r0, [r4, #12]
 8009e2e:	4305      	orrs	r5, r0
 8009e30:	81a5      	strh	r5, [r4, #12]
 8009e32:	e7cd      	b.n	8009dd0 <__smakebuf_r+0x18>
 8009e34:	08009bc9 	.word	0x08009bc9

08009e38 <_malloc_usable_size_r>:
 8009e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e3c:	1f18      	subs	r0, r3, #4
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	bfbc      	itt	lt
 8009e42:	580b      	ldrlt	r3, [r1, r0]
 8009e44:	18c0      	addlt	r0, r0, r3
 8009e46:	4770      	bx	lr

08009e48 <_raise_r>:
 8009e48:	291f      	cmp	r1, #31
 8009e4a:	b538      	push	{r3, r4, r5, lr}
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	460d      	mov	r5, r1
 8009e50:	d904      	bls.n	8009e5c <_raise_r+0x14>
 8009e52:	2316      	movs	r3, #22
 8009e54:	6003      	str	r3, [r0, #0]
 8009e56:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5a:	bd38      	pop	{r3, r4, r5, pc}
 8009e5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e5e:	b112      	cbz	r2, 8009e66 <_raise_r+0x1e>
 8009e60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e64:	b94b      	cbnz	r3, 8009e7a <_raise_r+0x32>
 8009e66:	4620      	mov	r0, r4
 8009e68:	f000 f830 	bl	8009ecc <_getpid_r>
 8009e6c:	462a      	mov	r2, r5
 8009e6e:	4601      	mov	r1, r0
 8009e70:	4620      	mov	r0, r4
 8009e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e76:	f000 b817 	b.w	8009ea8 <_kill_r>
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d00a      	beq.n	8009e94 <_raise_r+0x4c>
 8009e7e:	1c59      	adds	r1, r3, #1
 8009e80:	d103      	bne.n	8009e8a <_raise_r+0x42>
 8009e82:	2316      	movs	r3, #22
 8009e84:	6003      	str	r3, [r0, #0]
 8009e86:	2001      	movs	r0, #1
 8009e88:	e7e7      	b.n	8009e5a <_raise_r+0x12>
 8009e8a:	2400      	movs	r4, #0
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e92:	4798      	blx	r3
 8009e94:	2000      	movs	r0, #0
 8009e96:	e7e0      	b.n	8009e5a <_raise_r+0x12>

08009e98 <raise>:
 8009e98:	4b02      	ldr	r3, [pc, #8]	; (8009ea4 <raise+0xc>)
 8009e9a:	4601      	mov	r1, r0
 8009e9c:	6818      	ldr	r0, [r3, #0]
 8009e9e:	f7ff bfd3 	b.w	8009e48 <_raise_r>
 8009ea2:	bf00      	nop
 8009ea4:	2000000c 	.word	0x2000000c

08009ea8 <_kill_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	2300      	movs	r3, #0
 8009eac:	4d06      	ldr	r5, [pc, #24]	; (8009ec8 <_kill_r+0x20>)
 8009eae:	4604      	mov	r4, r0
 8009eb0:	4608      	mov	r0, r1
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	602b      	str	r3, [r5, #0]
 8009eb6:	f7f8 fbf4 	bl	80026a2 <_kill>
 8009eba:	1c43      	adds	r3, r0, #1
 8009ebc:	d102      	bne.n	8009ec4 <_kill_r+0x1c>
 8009ebe:	682b      	ldr	r3, [r5, #0]
 8009ec0:	b103      	cbz	r3, 8009ec4 <_kill_r+0x1c>
 8009ec2:	6023      	str	r3, [r4, #0]
 8009ec4:	bd38      	pop	{r3, r4, r5, pc}
 8009ec6:	bf00      	nop
 8009ec8:	200004d0 	.word	0x200004d0

08009ecc <_getpid_r>:
 8009ecc:	f7f8 bbe2 	b.w	8002694 <_getpid>

08009ed0 <__sread>:
 8009ed0:	b510      	push	{r4, lr}
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed8:	f000 f894 	bl	800a004 <_read_r>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	bfab      	itete	ge
 8009ee0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ee4:	181b      	addge	r3, r3, r0
 8009ee6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009eea:	bfac      	ite	ge
 8009eec:	6563      	strge	r3, [r4, #84]	; 0x54
 8009eee:	81a3      	strhlt	r3, [r4, #12]
 8009ef0:	bd10      	pop	{r4, pc}

08009ef2 <__swrite>:
 8009ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef6:	461f      	mov	r7, r3
 8009ef8:	898b      	ldrh	r3, [r1, #12]
 8009efa:	4605      	mov	r5, r0
 8009efc:	05db      	lsls	r3, r3, #23
 8009efe:	460c      	mov	r4, r1
 8009f00:	4616      	mov	r6, r2
 8009f02:	d505      	bpl.n	8009f10 <__swrite+0x1e>
 8009f04:	2302      	movs	r3, #2
 8009f06:	2200      	movs	r2, #0
 8009f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f0c:	f000 f868 	bl	8009fe0 <_lseek_r>
 8009f10:	89a3      	ldrh	r3, [r4, #12]
 8009f12:	4632      	mov	r2, r6
 8009f14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f18:	81a3      	strh	r3, [r4, #12]
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	463b      	mov	r3, r7
 8009f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f26:	f000 b817 	b.w	8009f58 <_write_r>

08009f2a <__sseek>:
 8009f2a:	b510      	push	{r4, lr}
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f32:	f000 f855 	bl	8009fe0 <_lseek_r>
 8009f36:	1c43      	adds	r3, r0, #1
 8009f38:	89a3      	ldrh	r3, [r4, #12]
 8009f3a:	bf15      	itete	ne
 8009f3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f46:	81a3      	strheq	r3, [r4, #12]
 8009f48:	bf18      	it	ne
 8009f4a:	81a3      	strhne	r3, [r4, #12]
 8009f4c:	bd10      	pop	{r4, pc}

08009f4e <__sclose>:
 8009f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f52:	f000 b813 	b.w	8009f7c <_close_r>
	...

08009f58 <_write_r>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	4608      	mov	r0, r1
 8009f5e:	4611      	mov	r1, r2
 8009f60:	2200      	movs	r2, #0
 8009f62:	4d05      	ldr	r5, [pc, #20]	; (8009f78 <_write_r+0x20>)
 8009f64:	602a      	str	r2, [r5, #0]
 8009f66:	461a      	mov	r2, r3
 8009f68:	f7f8 fbd2 	bl	8002710 <_write>
 8009f6c:	1c43      	adds	r3, r0, #1
 8009f6e:	d102      	bne.n	8009f76 <_write_r+0x1e>
 8009f70:	682b      	ldr	r3, [r5, #0]
 8009f72:	b103      	cbz	r3, 8009f76 <_write_r+0x1e>
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	bd38      	pop	{r3, r4, r5, pc}
 8009f78:	200004d0 	.word	0x200004d0

08009f7c <_close_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	2300      	movs	r3, #0
 8009f80:	4d05      	ldr	r5, [pc, #20]	; (8009f98 <_close_r+0x1c>)
 8009f82:	4604      	mov	r4, r0
 8009f84:	4608      	mov	r0, r1
 8009f86:	602b      	str	r3, [r5, #0]
 8009f88:	f7f8 fbde 	bl	8002748 <_close>
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	d102      	bne.n	8009f96 <_close_r+0x1a>
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	b103      	cbz	r3, 8009f96 <_close_r+0x1a>
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	200004d0 	.word	0x200004d0

08009f9c <_fstat_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	4d06      	ldr	r5, [pc, #24]	; (8009fbc <_fstat_r+0x20>)
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	602b      	str	r3, [r5, #0]
 8009faa:	f7f8 fbd8 	bl	800275e <_fstat>
 8009fae:	1c43      	adds	r3, r0, #1
 8009fb0:	d102      	bne.n	8009fb8 <_fstat_r+0x1c>
 8009fb2:	682b      	ldr	r3, [r5, #0]
 8009fb4:	b103      	cbz	r3, 8009fb8 <_fstat_r+0x1c>
 8009fb6:	6023      	str	r3, [r4, #0]
 8009fb8:	bd38      	pop	{r3, r4, r5, pc}
 8009fba:	bf00      	nop
 8009fbc:	200004d0 	.word	0x200004d0

08009fc0 <_isatty_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	4d05      	ldr	r5, [pc, #20]	; (8009fdc <_isatty_r+0x1c>)
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	4608      	mov	r0, r1
 8009fca:	602b      	str	r3, [r5, #0]
 8009fcc:	f7f8 fbd6 	bl	800277c <_isatty>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d102      	bne.n	8009fda <_isatty_r+0x1a>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	b103      	cbz	r3, 8009fda <_isatty_r+0x1a>
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	bd38      	pop	{r3, r4, r5, pc}
 8009fdc:	200004d0 	.word	0x200004d0

08009fe0 <_lseek_r>:
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	4608      	mov	r0, r1
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	2200      	movs	r2, #0
 8009fea:	4d05      	ldr	r5, [pc, #20]	; (800a000 <_lseek_r+0x20>)
 8009fec:	602a      	str	r2, [r5, #0]
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f7f8 fbce 	bl	8002790 <_lseek>
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	d102      	bne.n	8009ffe <_lseek_r+0x1e>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	b103      	cbz	r3, 8009ffe <_lseek_r+0x1e>
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	bd38      	pop	{r3, r4, r5, pc}
 800a000:	200004d0 	.word	0x200004d0

0800a004 <_read_r>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	4604      	mov	r4, r0
 800a008:	4608      	mov	r0, r1
 800a00a:	4611      	mov	r1, r2
 800a00c:	2200      	movs	r2, #0
 800a00e:	4d05      	ldr	r5, [pc, #20]	; (800a024 <_read_r+0x20>)
 800a010:	602a      	str	r2, [r5, #0]
 800a012:	461a      	mov	r2, r3
 800a014:	f7f8 fb5f 	bl	80026d6 <_read>
 800a018:	1c43      	adds	r3, r0, #1
 800a01a:	d102      	bne.n	800a022 <_read_r+0x1e>
 800a01c:	682b      	ldr	r3, [r5, #0]
 800a01e:	b103      	cbz	r3, 800a022 <_read_r+0x1e>
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	bd38      	pop	{r3, r4, r5, pc}
 800a024:	200004d0 	.word	0x200004d0

0800a028 <sin>:
 800a028:	b530      	push	{r4, r5, lr}
 800a02a:	4a20      	ldr	r2, [pc, #128]	; (800a0ac <sin+0x84>)
 800a02c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a030:	4293      	cmp	r3, r2
 800a032:	b087      	sub	sp, #28
 800a034:	dc06      	bgt.n	800a044 <sin+0x1c>
 800a036:	2300      	movs	r3, #0
 800a038:	2200      	movs	r2, #0
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	2300      	movs	r3, #0
 800a03e:	f001 fef7 	bl	800be30 <__kernel_sin>
 800a042:	e006      	b.n	800a052 <sin+0x2a>
 800a044:	4a1a      	ldr	r2, [pc, #104]	; (800a0b0 <sin+0x88>)
 800a046:	4293      	cmp	r3, r2
 800a048:	dd05      	ble.n	800a056 <sin+0x2e>
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	f7f6 f88b 	bl	8000168 <__aeabi_dsub>
 800a052:	b007      	add	sp, #28
 800a054:	bd30      	pop	{r4, r5, pc}
 800a056:	aa02      	add	r2, sp, #8
 800a058:	f001 f846 	bl	800b0e8 <__ieee754_rem_pio2>
 800a05c:	f000 0003 	and.w	r0, r0, #3
 800a060:	2801      	cmp	r0, #1
 800a062:	d009      	beq.n	800a078 <sin+0x50>
 800a064:	2802      	cmp	r0, #2
 800a066:	d00e      	beq.n	800a086 <sin+0x5e>
 800a068:	b9c0      	cbnz	r0, 800a09c <sin+0x74>
 800a06a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a06e:	2301      	movs	r3, #1
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a076:	e7e2      	b.n	800a03e <sin+0x16>
 800a078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a07c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a080:	f001 face 	bl	800b620 <__kernel_cos>
 800a084:	e7e5      	b.n	800a052 <sin+0x2a>
 800a086:	2301      	movs	r3, #1
 800a088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a092:	f001 fecd 	bl	800be30 <__kernel_sin>
 800a096:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a09a:	e7da      	b.n	800a052 <sin+0x2a>
 800a09c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0a4:	f001 fabc 	bl	800b620 <__kernel_cos>
 800a0a8:	e7f5      	b.n	800a096 <sin+0x6e>
 800a0aa:	bf00      	nop
 800a0ac:	3fe921fb 	.word	0x3fe921fb
 800a0b0:	7fefffff 	.word	0x7fefffff

0800a0b4 <asin>:
 800a0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	460d      	mov	r5, r1
 800a0ba:	f000 f901 	bl	800a2c0 <__ieee754_asin>
 800a0be:	4b11      	ldr	r3, [pc, #68]	; (800a104 <asin+0x50>)
 800a0c0:	4606      	mov	r6, r0
 800a0c2:	f993 3000 	ldrsb.w	r3, [r3]
 800a0c6:	460f      	mov	r7, r1
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	d018      	beq.n	800a0fe <asin+0x4a>
 800a0cc:	4622      	mov	r2, r4
 800a0ce:	462b      	mov	r3, r5
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	4629      	mov	r1, r5
 800a0d4:	f7f6 fc9a 	bl	8000a0c <__aeabi_dcmpun>
 800a0d8:	b988      	cbnz	r0, 800a0fe <asin+0x4a>
 800a0da:	4620      	mov	r0, r4
 800a0dc:	4629      	mov	r1, r5
 800a0de:	f001 ff5d 	bl	800bf9c <fabs>
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	4b08      	ldr	r3, [pc, #32]	; (800a108 <asin+0x54>)
 800a0e6:	f7f6 fc87 	bl	80009f8 <__aeabi_dcmpgt>
 800a0ea:	b140      	cbz	r0, 800a0fe <asin+0x4a>
 800a0ec:	f7fc fc82 	bl	80069f4 <__errno>
 800a0f0:	2321      	movs	r3, #33	; 0x21
 800a0f2:	6003      	str	r3, [r0, #0]
 800a0f4:	4805      	ldr	r0, [pc, #20]	; (800a10c <asin+0x58>)
 800a0f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a0fa:	f7ff b94b 	b.w	8009394 <nan>
 800a0fe:	4630      	mov	r0, r6
 800a100:	4639      	mov	r1, r7
 800a102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a104:	200001e0 	.word	0x200001e0
 800a108:	3ff00000 	.word	0x3ff00000
 800a10c:	0800c70a 	.word	0x0800c70a

0800a110 <pow>:
 800a110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a114:	461f      	mov	r7, r3
 800a116:	4680      	mov	r8, r0
 800a118:	4689      	mov	r9, r1
 800a11a:	4616      	mov	r6, r2
 800a11c:	f000 facc 	bl	800a6b8 <__ieee754_pow>
 800a120:	4b4d      	ldr	r3, [pc, #308]	; (800a258 <pow+0x148>)
 800a122:	4604      	mov	r4, r0
 800a124:	f993 3000 	ldrsb.w	r3, [r3]
 800a128:	460d      	mov	r5, r1
 800a12a:	3301      	adds	r3, #1
 800a12c:	d015      	beq.n	800a15a <pow+0x4a>
 800a12e:	4632      	mov	r2, r6
 800a130:	463b      	mov	r3, r7
 800a132:	4630      	mov	r0, r6
 800a134:	4639      	mov	r1, r7
 800a136:	f7f6 fc69 	bl	8000a0c <__aeabi_dcmpun>
 800a13a:	b970      	cbnz	r0, 800a15a <pow+0x4a>
 800a13c:	4642      	mov	r2, r8
 800a13e:	464b      	mov	r3, r9
 800a140:	4640      	mov	r0, r8
 800a142:	4649      	mov	r1, r9
 800a144:	f7f6 fc62 	bl	8000a0c <__aeabi_dcmpun>
 800a148:	2200      	movs	r2, #0
 800a14a:	2300      	movs	r3, #0
 800a14c:	b148      	cbz	r0, 800a162 <pow+0x52>
 800a14e:	4630      	mov	r0, r6
 800a150:	4639      	mov	r1, r7
 800a152:	f7f6 fc29 	bl	80009a8 <__aeabi_dcmpeq>
 800a156:	2800      	cmp	r0, #0
 800a158:	d17b      	bne.n	800a252 <pow+0x142>
 800a15a:	4620      	mov	r0, r4
 800a15c:	4629      	mov	r1, r5
 800a15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a162:	4640      	mov	r0, r8
 800a164:	4649      	mov	r1, r9
 800a166:	f7f6 fc1f 	bl	80009a8 <__aeabi_dcmpeq>
 800a16a:	b1e0      	cbz	r0, 800a1a6 <pow+0x96>
 800a16c:	2200      	movs	r2, #0
 800a16e:	2300      	movs	r3, #0
 800a170:	4630      	mov	r0, r6
 800a172:	4639      	mov	r1, r7
 800a174:	f7f6 fc18 	bl	80009a8 <__aeabi_dcmpeq>
 800a178:	2800      	cmp	r0, #0
 800a17a:	d16a      	bne.n	800a252 <pow+0x142>
 800a17c:	4630      	mov	r0, r6
 800a17e:	4639      	mov	r1, r7
 800a180:	f001 ff0f 	bl	800bfa2 <finite>
 800a184:	2800      	cmp	r0, #0
 800a186:	d0e8      	beq.n	800a15a <pow+0x4a>
 800a188:	2200      	movs	r2, #0
 800a18a:	2300      	movs	r3, #0
 800a18c:	4630      	mov	r0, r6
 800a18e:	4639      	mov	r1, r7
 800a190:	f7f6 fc14 	bl	80009bc <__aeabi_dcmplt>
 800a194:	2800      	cmp	r0, #0
 800a196:	d0e0      	beq.n	800a15a <pow+0x4a>
 800a198:	f7fc fc2c 	bl	80069f4 <__errno>
 800a19c:	2321      	movs	r3, #33	; 0x21
 800a19e:	2400      	movs	r4, #0
 800a1a0:	6003      	str	r3, [r0, #0]
 800a1a2:	4d2e      	ldr	r5, [pc, #184]	; (800a25c <pow+0x14c>)
 800a1a4:	e7d9      	b.n	800a15a <pow+0x4a>
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	f001 fefa 	bl	800bfa2 <finite>
 800a1ae:	bba8      	cbnz	r0, 800a21c <pow+0x10c>
 800a1b0:	4640      	mov	r0, r8
 800a1b2:	4649      	mov	r1, r9
 800a1b4:	f001 fef5 	bl	800bfa2 <finite>
 800a1b8:	b380      	cbz	r0, 800a21c <pow+0x10c>
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	4639      	mov	r1, r7
 800a1be:	f001 fef0 	bl	800bfa2 <finite>
 800a1c2:	b358      	cbz	r0, 800a21c <pow+0x10c>
 800a1c4:	4622      	mov	r2, r4
 800a1c6:	462b      	mov	r3, r5
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	4629      	mov	r1, r5
 800a1cc:	f7f6 fc1e 	bl	8000a0c <__aeabi_dcmpun>
 800a1d0:	b160      	cbz	r0, 800a1ec <pow+0xdc>
 800a1d2:	f7fc fc0f 	bl	80069f4 <__errno>
 800a1d6:	2321      	movs	r3, #33	; 0x21
 800a1d8:	2200      	movs	r2, #0
 800a1da:	6003      	str	r3, [r0, #0]
 800a1dc:	2300      	movs	r3, #0
 800a1de:	4610      	mov	r0, r2
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	f7f6 faa3 	bl	800072c <__aeabi_ddiv>
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	460d      	mov	r5, r1
 800a1ea:	e7b6      	b.n	800a15a <pow+0x4a>
 800a1ec:	f7fc fc02 	bl	80069f4 <__errno>
 800a1f0:	2322      	movs	r3, #34	; 0x22
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	6003      	str	r3, [r0, #0]
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	4640      	mov	r0, r8
 800a1fc:	f7f6 fbde 	bl	80009bc <__aeabi_dcmplt>
 800a200:	2400      	movs	r4, #0
 800a202:	b148      	cbz	r0, 800a218 <pow+0x108>
 800a204:	4630      	mov	r0, r6
 800a206:	4639      	mov	r1, r7
 800a208:	f001 ff52 	bl	800c0b0 <rint>
 800a20c:	4632      	mov	r2, r6
 800a20e:	463b      	mov	r3, r7
 800a210:	f7f6 fbca 	bl	80009a8 <__aeabi_dcmpeq>
 800a214:	2800      	cmp	r0, #0
 800a216:	d0c4      	beq.n	800a1a2 <pow+0x92>
 800a218:	4d11      	ldr	r5, [pc, #68]	; (800a260 <pow+0x150>)
 800a21a:	e79e      	b.n	800a15a <pow+0x4a>
 800a21c:	2200      	movs	r2, #0
 800a21e:	2300      	movs	r3, #0
 800a220:	4620      	mov	r0, r4
 800a222:	4629      	mov	r1, r5
 800a224:	f7f6 fbc0 	bl	80009a8 <__aeabi_dcmpeq>
 800a228:	2800      	cmp	r0, #0
 800a22a:	d096      	beq.n	800a15a <pow+0x4a>
 800a22c:	4640      	mov	r0, r8
 800a22e:	4649      	mov	r1, r9
 800a230:	f001 feb7 	bl	800bfa2 <finite>
 800a234:	2800      	cmp	r0, #0
 800a236:	d090      	beq.n	800a15a <pow+0x4a>
 800a238:	4630      	mov	r0, r6
 800a23a:	4639      	mov	r1, r7
 800a23c:	f001 feb1 	bl	800bfa2 <finite>
 800a240:	2800      	cmp	r0, #0
 800a242:	d08a      	beq.n	800a15a <pow+0x4a>
 800a244:	f7fc fbd6 	bl	80069f4 <__errno>
 800a248:	2322      	movs	r3, #34	; 0x22
 800a24a:	2400      	movs	r4, #0
 800a24c:	2500      	movs	r5, #0
 800a24e:	6003      	str	r3, [r0, #0]
 800a250:	e783      	b.n	800a15a <pow+0x4a>
 800a252:	2400      	movs	r4, #0
 800a254:	4d03      	ldr	r5, [pc, #12]	; (800a264 <pow+0x154>)
 800a256:	e780      	b.n	800a15a <pow+0x4a>
 800a258:	200001e0 	.word	0x200001e0
 800a25c:	fff00000 	.word	0xfff00000
 800a260:	7ff00000 	.word	0x7ff00000
 800a264:	3ff00000 	.word	0x3ff00000

0800a268 <sqrt>:
 800a268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26a:	4606      	mov	r6, r0
 800a26c:	460f      	mov	r7, r1
 800a26e:	f001 f92b 	bl	800b4c8 <__ieee754_sqrt>
 800a272:	4b12      	ldr	r3, [pc, #72]	; (800a2bc <sqrt+0x54>)
 800a274:	4604      	mov	r4, r0
 800a276:	f993 3000 	ldrsb.w	r3, [r3]
 800a27a:	460d      	mov	r5, r1
 800a27c:	3301      	adds	r3, #1
 800a27e:	d019      	beq.n	800a2b4 <sqrt+0x4c>
 800a280:	4632      	mov	r2, r6
 800a282:	463b      	mov	r3, r7
 800a284:	4630      	mov	r0, r6
 800a286:	4639      	mov	r1, r7
 800a288:	f7f6 fbc0 	bl	8000a0c <__aeabi_dcmpun>
 800a28c:	b990      	cbnz	r0, 800a2b4 <sqrt+0x4c>
 800a28e:	2200      	movs	r2, #0
 800a290:	2300      	movs	r3, #0
 800a292:	4630      	mov	r0, r6
 800a294:	4639      	mov	r1, r7
 800a296:	f7f6 fb91 	bl	80009bc <__aeabi_dcmplt>
 800a29a:	b158      	cbz	r0, 800a2b4 <sqrt+0x4c>
 800a29c:	f7fc fbaa 	bl	80069f4 <__errno>
 800a2a0:	2321      	movs	r3, #33	; 0x21
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	6003      	str	r3, [r0, #0]
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	f7f6 fa3e 	bl	800072c <__aeabi_ddiv>
 800a2b0:	4604      	mov	r4, r0
 800a2b2:	460d      	mov	r5, r1
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	200001e0 	.word	0x200001e0

0800a2c0 <__ieee754_asin>:
 800a2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c4:	4bc4      	ldr	r3, [pc, #784]	; (800a5d8 <__ieee754_asin+0x318>)
 800a2c6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a2ca:	b087      	sub	sp, #28
 800a2cc:	429e      	cmp	r6, r3
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	4604      	mov	r4, r0
 800a2d2:	460d      	mov	r5, r1
 800a2d4:	9105      	str	r1, [sp, #20]
 800a2d6:	dd29      	ble.n	800a32c <__ieee754_asin+0x6c>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 800a2de:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800a2e2:	4333      	orrs	r3, r6
 800a2e4:	d114      	bne.n	800a310 <__ieee754_asin+0x50>
 800a2e6:	a3a2      	add	r3, pc, #648	; (adr r3, 800a570 <__ieee754_asin+0x2b0>)
 800a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ec:	f7f6 f8f4 	bl	80004d8 <__aeabi_dmul>
 800a2f0:	a3a1      	add	r3, pc, #644	; (adr r3, 800a578 <__ieee754_asin+0x2b8>)
 800a2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	460f      	mov	r7, r1
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	f7f6 f8eb 	bl	80004d8 <__aeabi_dmul>
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	4630      	mov	r0, r6
 800a308:	4639      	mov	r1, r7
 800a30a:	f7f5 ff2f 	bl	800016c <__adddf3>
 800a30e:	e006      	b.n	800a31e <__ieee754_asin+0x5e>
 800a310:	460b      	mov	r3, r1
 800a312:	f7f5 ff29 	bl	8000168 <__aeabi_dsub>
 800a316:	4602      	mov	r2, r0
 800a318:	460b      	mov	r3, r1
 800a31a:	f7f6 fa07 	bl	800072c <__aeabi_ddiv>
 800a31e:	4604      	mov	r4, r0
 800a320:	460d      	mov	r5, r1
 800a322:	4620      	mov	r0, r4
 800a324:	4629      	mov	r1, r5
 800a326:	b007      	add	sp, #28
 800a328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32c:	4bab      	ldr	r3, [pc, #684]	; (800a5dc <__ieee754_asin+0x31c>)
 800a32e:	429e      	cmp	r6, r3
 800a330:	dc0e      	bgt.n	800a350 <__ieee754_asin+0x90>
 800a332:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a336:	f280 80ab 	bge.w	800a490 <__ieee754_asin+0x1d0>
 800a33a:	a391      	add	r3, pc, #580	; (adr r3, 800a580 <__ieee754_asin+0x2c0>)
 800a33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a340:	f7f5 ff14 	bl	800016c <__adddf3>
 800a344:	2200      	movs	r2, #0
 800a346:	4ba6      	ldr	r3, [pc, #664]	; (800a5e0 <__ieee754_asin+0x320>)
 800a348:	f7f6 fb56 	bl	80009f8 <__aeabi_dcmpgt>
 800a34c:	2800      	cmp	r0, #0
 800a34e:	d1e8      	bne.n	800a322 <__ieee754_asin+0x62>
 800a350:	4620      	mov	r0, r4
 800a352:	4629      	mov	r1, r5
 800a354:	f001 fe22 	bl	800bf9c <fabs>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	2000      	movs	r0, #0
 800a35e:	49a0      	ldr	r1, [pc, #640]	; (800a5e0 <__ieee754_asin+0x320>)
 800a360:	f7f5 ff02 	bl	8000168 <__aeabi_dsub>
 800a364:	2200      	movs	r2, #0
 800a366:	4b9f      	ldr	r3, [pc, #636]	; (800a5e4 <__ieee754_asin+0x324>)
 800a368:	f7f6 f8b6 	bl	80004d8 <__aeabi_dmul>
 800a36c:	a386      	add	r3, pc, #536	; (adr r3, 800a588 <__ieee754_asin+0x2c8>)
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	4604      	mov	r4, r0
 800a374:	460d      	mov	r5, r1
 800a376:	f7f6 f8af 	bl	80004d8 <__aeabi_dmul>
 800a37a:	a385      	add	r3, pc, #532	; (adr r3, 800a590 <__ieee754_asin+0x2d0>)
 800a37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a380:	f7f5 fef4 	bl	800016c <__adddf3>
 800a384:	4622      	mov	r2, r4
 800a386:	462b      	mov	r3, r5
 800a388:	f7f6 f8a6 	bl	80004d8 <__aeabi_dmul>
 800a38c:	a382      	add	r3, pc, #520	; (adr r3, 800a598 <__ieee754_asin+0x2d8>)
 800a38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a392:	f7f5 fee9 	bl	8000168 <__aeabi_dsub>
 800a396:	4622      	mov	r2, r4
 800a398:	462b      	mov	r3, r5
 800a39a:	f7f6 f89d 	bl	80004d8 <__aeabi_dmul>
 800a39e:	a380      	add	r3, pc, #512	; (adr r3, 800a5a0 <__ieee754_asin+0x2e0>)
 800a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a4:	f7f5 fee2 	bl	800016c <__adddf3>
 800a3a8:	4622      	mov	r2, r4
 800a3aa:	462b      	mov	r3, r5
 800a3ac:	f7f6 f894 	bl	80004d8 <__aeabi_dmul>
 800a3b0:	a37d      	add	r3, pc, #500	; (adr r3, 800a5a8 <__ieee754_asin+0x2e8>)
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	f7f5 fed7 	bl	8000168 <__aeabi_dsub>
 800a3ba:	4622      	mov	r2, r4
 800a3bc:	462b      	mov	r3, r5
 800a3be:	f7f6 f88b 	bl	80004d8 <__aeabi_dmul>
 800a3c2:	a37b      	add	r3, pc, #492	; (adr r3, 800a5b0 <__ieee754_asin+0x2f0>)
 800a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c8:	f7f5 fed0 	bl	800016c <__adddf3>
 800a3cc:	4622      	mov	r2, r4
 800a3ce:	462b      	mov	r3, r5
 800a3d0:	f7f6 f882 	bl	80004d8 <__aeabi_dmul>
 800a3d4:	a378      	add	r3, pc, #480	; (adr r3, 800a5b8 <__ieee754_asin+0x2f8>)
 800a3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3da:	e9cd 0100 	strd	r0, r1, [sp]
 800a3de:	4620      	mov	r0, r4
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	f7f6 f879 	bl	80004d8 <__aeabi_dmul>
 800a3e6:	a376      	add	r3, pc, #472	; (adr r3, 800a5c0 <__ieee754_asin+0x300>)
 800a3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ec:	f7f5 febc 	bl	8000168 <__aeabi_dsub>
 800a3f0:	4622      	mov	r2, r4
 800a3f2:	462b      	mov	r3, r5
 800a3f4:	f7f6 f870 	bl	80004d8 <__aeabi_dmul>
 800a3f8:	a373      	add	r3, pc, #460	; (adr r3, 800a5c8 <__ieee754_asin+0x308>)
 800a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fe:	f7f5 feb5 	bl	800016c <__adddf3>
 800a402:	4622      	mov	r2, r4
 800a404:	462b      	mov	r3, r5
 800a406:	f7f6 f867 	bl	80004d8 <__aeabi_dmul>
 800a40a:	a371      	add	r3, pc, #452	; (adr r3, 800a5d0 <__ieee754_asin+0x310>)
 800a40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a410:	f7f5 feaa 	bl	8000168 <__aeabi_dsub>
 800a414:	4622      	mov	r2, r4
 800a416:	462b      	mov	r3, r5
 800a418:	f7f6 f85e 	bl	80004d8 <__aeabi_dmul>
 800a41c:	4b70      	ldr	r3, [pc, #448]	; (800a5e0 <__ieee754_asin+0x320>)
 800a41e:	2200      	movs	r2, #0
 800a420:	f7f5 fea4 	bl	800016c <__adddf3>
 800a424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a428:	4620      	mov	r0, r4
 800a42a:	4629      	mov	r1, r5
 800a42c:	f001 f84c 	bl	800b4c8 <__ieee754_sqrt>
 800a430:	4b6d      	ldr	r3, [pc, #436]	; (800a5e8 <__ieee754_asin+0x328>)
 800a432:	4682      	mov	sl, r0
 800a434:	429e      	cmp	r6, r3
 800a436:	468b      	mov	fp, r1
 800a438:	f340 80d8 	ble.w	800a5ec <__ieee754_asin+0x32c>
 800a43c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a440:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a444:	f7f6 f972 	bl	800072c <__aeabi_ddiv>
 800a448:	4652      	mov	r2, sl
 800a44a:	465b      	mov	r3, fp
 800a44c:	f7f6 f844 	bl	80004d8 <__aeabi_dmul>
 800a450:	4652      	mov	r2, sl
 800a452:	465b      	mov	r3, fp
 800a454:	f7f5 fe8a 	bl	800016c <__adddf3>
 800a458:	4602      	mov	r2, r0
 800a45a:	460b      	mov	r3, r1
 800a45c:	f7f5 fe86 	bl	800016c <__adddf3>
 800a460:	a345      	add	r3, pc, #276	; (adr r3, 800a578 <__ieee754_asin+0x2b8>)
 800a462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a466:	f7f5 fe7f 	bl	8000168 <__aeabi_dsub>
 800a46a:	4602      	mov	r2, r0
 800a46c:	460b      	mov	r3, r1
 800a46e:	a140      	add	r1, pc, #256	; (adr r1, 800a570 <__ieee754_asin+0x2b0>)
 800a470:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a474:	f7f5 fe78 	bl	8000168 <__aeabi_dsub>
 800a478:	9b05      	ldr	r3, [sp, #20]
 800a47a:	4604      	mov	r4, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	bfdc      	itt	le
 800a480:	4602      	movle	r2, r0
 800a482:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800a486:	460d      	mov	r5, r1
 800a488:	bfdc      	itt	le
 800a48a:	4614      	movle	r4, r2
 800a48c:	461d      	movle	r5, r3
 800a48e:	e748      	b.n	800a322 <__ieee754_asin+0x62>
 800a490:	460b      	mov	r3, r1
 800a492:	f7f6 f821 	bl	80004d8 <__aeabi_dmul>
 800a496:	a33c      	add	r3, pc, #240	; (adr r3, 800a588 <__ieee754_asin+0x2c8>)
 800a498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49c:	4606      	mov	r6, r0
 800a49e:	460f      	mov	r7, r1
 800a4a0:	f7f6 f81a 	bl	80004d8 <__aeabi_dmul>
 800a4a4:	a33a      	add	r3, pc, #232	; (adr r3, 800a590 <__ieee754_asin+0x2d0>)
 800a4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4aa:	f7f5 fe5f 	bl	800016c <__adddf3>
 800a4ae:	4632      	mov	r2, r6
 800a4b0:	463b      	mov	r3, r7
 800a4b2:	f7f6 f811 	bl	80004d8 <__aeabi_dmul>
 800a4b6:	a338      	add	r3, pc, #224	; (adr r3, 800a598 <__ieee754_asin+0x2d8>)
 800a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4bc:	f7f5 fe54 	bl	8000168 <__aeabi_dsub>
 800a4c0:	4632      	mov	r2, r6
 800a4c2:	463b      	mov	r3, r7
 800a4c4:	f7f6 f808 	bl	80004d8 <__aeabi_dmul>
 800a4c8:	a335      	add	r3, pc, #212	; (adr r3, 800a5a0 <__ieee754_asin+0x2e0>)
 800a4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ce:	f7f5 fe4d 	bl	800016c <__adddf3>
 800a4d2:	4632      	mov	r2, r6
 800a4d4:	463b      	mov	r3, r7
 800a4d6:	f7f5 ffff 	bl	80004d8 <__aeabi_dmul>
 800a4da:	a333      	add	r3, pc, #204	; (adr r3, 800a5a8 <__ieee754_asin+0x2e8>)
 800a4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e0:	f7f5 fe42 	bl	8000168 <__aeabi_dsub>
 800a4e4:	4632      	mov	r2, r6
 800a4e6:	463b      	mov	r3, r7
 800a4e8:	f7f5 fff6 	bl	80004d8 <__aeabi_dmul>
 800a4ec:	a330      	add	r3, pc, #192	; (adr r3, 800a5b0 <__ieee754_asin+0x2f0>)
 800a4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f2:	f7f5 fe3b 	bl	800016c <__adddf3>
 800a4f6:	4632      	mov	r2, r6
 800a4f8:	463b      	mov	r3, r7
 800a4fa:	f7f5 ffed 	bl	80004d8 <__aeabi_dmul>
 800a4fe:	a32e      	add	r3, pc, #184	; (adr r3, 800a5b8 <__ieee754_asin+0x2f8>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	4680      	mov	r8, r0
 800a506:	4689      	mov	r9, r1
 800a508:	4630      	mov	r0, r6
 800a50a:	4639      	mov	r1, r7
 800a50c:	f7f5 ffe4 	bl	80004d8 <__aeabi_dmul>
 800a510:	a32b      	add	r3, pc, #172	; (adr r3, 800a5c0 <__ieee754_asin+0x300>)
 800a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a516:	f7f5 fe27 	bl	8000168 <__aeabi_dsub>
 800a51a:	4632      	mov	r2, r6
 800a51c:	463b      	mov	r3, r7
 800a51e:	f7f5 ffdb 	bl	80004d8 <__aeabi_dmul>
 800a522:	a329      	add	r3, pc, #164	; (adr r3, 800a5c8 <__ieee754_asin+0x308>)
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	f7f5 fe20 	bl	800016c <__adddf3>
 800a52c:	4632      	mov	r2, r6
 800a52e:	463b      	mov	r3, r7
 800a530:	f7f5 ffd2 	bl	80004d8 <__aeabi_dmul>
 800a534:	a326      	add	r3, pc, #152	; (adr r3, 800a5d0 <__ieee754_asin+0x310>)
 800a536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53a:	f7f5 fe15 	bl	8000168 <__aeabi_dsub>
 800a53e:	4632      	mov	r2, r6
 800a540:	463b      	mov	r3, r7
 800a542:	f7f5 ffc9 	bl	80004d8 <__aeabi_dmul>
 800a546:	2200      	movs	r2, #0
 800a548:	4b25      	ldr	r3, [pc, #148]	; (800a5e0 <__ieee754_asin+0x320>)
 800a54a:	f7f5 fe0f 	bl	800016c <__adddf3>
 800a54e:	4602      	mov	r2, r0
 800a550:	460b      	mov	r3, r1
 800a552:	4640      	mov	r0, r8
 800a554:	4649      	mov	r1, r9
 800a556:	f7f6 f8e9 	bl	800072c <__aeabi_ddiv>
 800a55a:	4622      	mov	r2, r4
 800a55c:	462b      	mov	r3, r5
 800a55e:	f7f5 ffbb 	bl	80004d8 <__aeabi_dmul>
 800a562:	4602      	mov	r2, r0
 800a564:	460b      	mov	r3, r1
 800a566:	4620      	mov	r0, r4
 800a568:	4629      	mov	r1, r5
 800a56a:	e6ce      	b.n	800a30a <__ieee754_asin+0x4a>
 800a56c:	f3af 8000 	nop.w
 800a570:	54442d18 	.word	0x54442d18
 800a574:	3ff921fb 	.word	0x3ff921fb
 800a578:	33145c07 	.word	0x33145c07
 800a57c:	3c91a626 	.word	0x3c91a626
 800a580:	8800759c 	.word	0x8800759c
 800a584:	7e37e43c 	.word	0x7e37e43c
 800a588:	0dfdf709 	.word	0x0dfdf709
 800a58c:	3f023de1 	.word	0x3f023de1
 800a590:	7501b288 	.word	0x7501b288
 800a594:	3f49efe0 	.word	0x3f49efe0
 800a598:	b5688f3b 	.word	0xb5688f3b
 800a59c:	3fa48228 	.word	0x3fa48228
 800a5a0:	0e884455 	.word	0x0e884455
 800a5a4:	3fc9c155 	.word	0x3fc9c155
 800a5a8:	03eb6f7d 	.word	0x03eb6f7d
 800a5ac:	3fd4d612 	.word	0x3fd4d612
 800a5b0:	55555555 	.word	0x55555555
 800a5b4:	3fc55555 	.word	0x3fc55555
 800a5b8:	b12e9282 	.word	0xb12e9282
 800a5bc:	3fb3b8c5 	.word	0x3fb3b8c5
 800a5c0:	1b8d0159 	.word	0x1b8d0159
 800a5c4:	3fe6066c 	.word	0x3fe6066c
 800a5c8:	9c598ac8 	.word	0x9c598ac8
 800a5cc:	40002ae5 	.word	0x40002ae5
 800a5d0:	1c8a2d4b 	.word	0x1c8a2d4b
 800a5d4:	40033a27 	.word	0x40033a27
 800a5d8:	3fefffff 	.word	0x3fefffff
 800a5dc:	3fdfffff 	.word	0x3fdfffff
 800a5e0:	3ff00000 	.word	0x3ff00000
 800a5e4:	3fe00000 	.word	0x3fe00000
 800a5e8:	3fef3332 	.word	0x3fef3332
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	f7f5 fdbc 	bl	800016c <__adddf3>
 800a5f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5f8:	4606      	mov	r6, r0
 800a5fa:	460f      	mov	r7, r1
 800a5fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a600:	f7f6 f894 	bl	800072c <__aeabi_ddiv>
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	4630      	mov	r0, r6
 800a60a:	4639      	mov	r1, r7
 800a60c:	f7f5 ff64 	bl	80004d8 <__aeabi_dmul>
 800a610:	f04f 0800 	mov.w	r8, #0
 800a614:	4606      	mov	r6, r0
 800a616:	460f      	mov	r7, r1
 800a618:	4642      	mov	r2, r8
 800a61a:	465b      	mov	r3, fp
 800a61c:	4640      	mov	r0, r8
 800a61e:	4659      	mov	r1, fp
 800a620:	f7f5 ff5a 	bl	80004d8 <__aeabi_dmul>
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	4620      	mov	r0, r4
 800a62a:	4629      	mov	r1, r5
 800a62c:	f7f5 fd9c 	bl	8000168 <__aeabi_dsub>
 800a630:	4642      	mov	r2, r8
 800a632:	4604      	mov	r4, r0
 800a634:	460d      	mov	r5, r1
 800a636:	465b      	mov	r3, fp
 800a638:	4650      	mov	r0, sl
 800a63a:	4659      	mov	r1, fp
 800a63c:	f7f5 fd96 	bl	800016c <__adddf3>
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	4620      	mov	r0, r4
 800a646:	4629      	mov	r1, r5
 800a648:	f7f6 f870 	bl	800072c <__aeabi_ddiv>
 800a64c:	4602      	mov	r2, r0
 800a64e:	460b      	mov	r3, r1
 800a650:	f7f5 fd8c 	bl	800016c <__adddf3>
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	a113      	add	r1, pc, #76	; (adr r1, 800a6a8 <__ieee754_asin+0x3e8>)
 800a65a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a65e:	f7f5 fd83 	bl	8000168 <__aeabi_dsub>
 800a662:	4602      	mov	r2, r0
 800a664:	460b      	mov	r3, r1
 800a666:	4630      	mov	r0, r6
 800a668:	4639      	mov	r1, r7
 800a66a:	f7f5 fd7d 	bl	8000168 <__aeabi_dsub>
 800a66e:	4642      	mov	r2, r8
 800a670:	4604      	mov	r4, r0
 800a672:	460d      	mov	r5, r1
 800a674:	465b      	mov	r3, fp
 800a676:	4640      	mov	r0, r8
 800a678:	4659      	mov	r1, fp
 800a67a:	f7f5 fd77 	bl	800016c <__adddf3>
 800a67e:	4602      	mov	r2, r0
 800a680:	460b      	mov	r3, r1
 800a682:	a10b      	add	r1, pc, #44	; (adr r1, 800a6b0 <__ieee754_asin+0x3f0>)
 800a684:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a688:	f7f5 fd6e 	bl	8000168 <__aeabi_dsub>
 800a68c:	4602      	mov	r2, r0
 800a68e:	460b      	mov	r3, r1
 800a690:	4620      	mov	r0, r4
 800a692:	4629      	mov	r1, r5
 800a694:	f7f5 fd68 	bl	8000168 <__aeabi_dsub>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	a104      	add	r1, pc, #16	; (adr r1, 800a6b0 <__ieee754_asin+0x3f0>)
 800a69e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6a2:	e6e7      	b.n	800a474 <__ieee754_asin+0x1b4>
 800a6a4:	f3af 8000 	nop.w
 800a6a8:	33145c07 	.word	0x33145c07
 800a6ac:	3c91a626 	.word	0x3c91a626
 800a6b0:	54442d18 	.word	0x54442d18
 800a6b4:	3fe921fb 	.word	0x3fe921fb

0800a6b8 <__ieee754_pow>:
 800a6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	b093      	sub	sp, #76	; 0x4c
 800a6be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6c2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800a6c6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a6ca:	ea55 0302 	orrs.w	r3, r5, r2
 800a6ce:	4607      	mov	r7, r0
 800a6d0:	4688      	mov	r8, r1
 800a6d2:	f000 84bf 	beq.w	800b054 <__ieee754_pow+0x99c>
 800a6d6:	4b7e      	ldr	r3, [pc, #504]	; (800a8d0 <__ieee754_pow+0x218>)
 800a6d8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a6dc:	429c      	cmp	r4, r3
 800a6de:	4689      	mov	r9, r1
 800a6e0:	4682      	mov	sl, r0
 800a6e2:	dc09      	bgt.n	800a6f8 <__ieee754_pow+0x40>
 800a6e4:	d103      	bne.n	800a6ee <__ieee754_pow+0x36>
 800a6e6:	b978      	cbnz	r0, 800a708 <__ieee754_pow+0x50>
 800a6e8:	42a5      	cmp	r5, r4
 800a6ea:	dd02      	ble.n	800a6f2 <__ieee754_pow+0x3a>
 800a6ec:	e00c      	b.n	800a708 <__ieee754_pow+0x50>
 800a6ee:	429d      	cmp	r5, r3
 800a6f0:	dc02      	bgt.n	800a6f8 <__ieee754_pow+0x40>
 800a6f2:	429d      	cmp	r5, r3
 800a6f4:	d10e      	bne.n	800a714 <__ieee754_pow+0x5c>
 800a6f6:	b16a      	cbz	r2, 800a714 <__ieee754_pow+0x5c>
 800a6f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a6fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a700:	ea54 030a 	orrs.w	r3, r4, sl
 800a704:	f000 84a6 	beq.w	800b054 <__ieee754_pow+0x99c>
 800a708:	4872      	ldr	r0, [pc, #456]	; (800a8d4 <__ieee754_pow+0x21c>)
 800a70a:	b013      	add	sp, #76	; 0x4c
 800a70c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a710:	f7fe be40 	b.w	8009394 <nan>
 800a714:	f1b9 0f00 	cmp.w	r9, #0
 800a718:	da39      	bge.n	800a78e <__ieee754_pow+0xd6>
 800a71a:	4b6f      	ldr	r3, [pc, #444]	; (800a8d8 <__ieee754_pow+0x220>)
 800a71c:	429d      	cmp	r5, r3
 800a71e:	dc54      	bgt.n	800a7ca <__ieee754_pow+0x112>
 800a720:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a724:	429d      	cmp	r5, r3
 800a726:	f340 84a6 	ble.w	800b076 <__ieee754_pow+0x9be>
 800a72a:	152b      	asrs	r3, r5, #20
 800a72c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a730:	2b14      	cmp	r3, #20
 800a732:	dd0f      	ble.n	800a754 <__ieee754_pow+0x9c>
 800a734:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a738:	fa22 f103 	lsr.w	r1, r2, r3
 800a73c:	fa01 f303 	lsl.w	r3, r1, r3
 800a740:	4293      	cmp	r3, r2
 800a742:	f040 8498 	bne.w	800b076 <__ieee754_pow+0x9be>
 800a746:	f001 0101 	and.w	r1, r1, #1
 800a74a:	f1c1 0302 	rsb	r3, r1, #2
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	b182      	cbz	r2, 800a774 <__ieee754_pow+0xbc>
 800a752:	e05e      	b.n	800a812 <__ieee754_pow+0x15a>
 800a754:	2a00      	cmp	r2, #0
 800a756:	d15a      	bne.n	800a80e <__ieee754_pow+0x156>
 800a758:	f1c3 0314 	rsb	r3, r3, #20
 800a75c:	fa45 f103 	asr.w	r1, r5, r3
 800a760:	fa01 f303 	lsl.w	r3, r1, r3
 800a764:	42ab      	cmp	r3, r5
 800a766:	f040 8483 	bne.w	800b070 <__ieee754_pow+0x9b8>
 800a76a:	f001 0101 	and.w	r1, r1, #1
 800a76e:	f1c1 0302 	rsb	r3, r1, #2
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	4b59      	ldr	r3, [pc, #356]	; (800a8dc <__ieee754_pow+0x224>)
 800a776:	429d      	cmp	r5, r3
 800a778:	d130      	bne.n	800a7dc <__ieee754_pow+0x124>
 800a77a:	2e00      	cmp	r6, #0
 800a77c:	f280 8474 	bge.w	800b068 <__ieee754_pow+0x9b0>
 800a780:	463a      	mov	r2, r7
 800a782:	4643      	mov	r3, r8
 800a784:	2000      	movs	r0, #0
 800a786:	4955      	ldr	r1, [pc, #340]	; (800a8dc <__ieee754_pow+0x224>)
 800a788:	f7f5 ffd0 	bl	800072c <__aeabi_ddiv>
 800a78c:	e02f      	b.n	800a7ee <__ieee754_pow+0x136>
 800a78e:	2300      	movs	r3, #0
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	2a00      	cmp	r2, #0
 800a794:	d13d      	bne.n	800a812 <__ieee754_pow+0x15a>
 800a796:	4b4e      	ldr	r3, [pc, #312]	; (800a8d0 <__ieee754_pow+0x218>)
 800a798:	429d      	cmp	r5, r3
 800a79a:	d1eb      	bne.n	800a774 <__ieee754_pow+0xbc>
 800a79c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a7a0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a7a4:	ea53 030a 	orrs.w	r3, r3, sl
 800a7a8:	f000 8454 	beq.w	800b054 <__ieee754_pow+0x99c>
 800a7ac:	4b4c      	ldr	r3, [pc, #304]	; (800a8e0 <__ieee754_pow+0x228>)
 800a7ae:	429c      	cmp	r4, r3
 800a7b0:	dd0d      	ble.n	800a7ce <__ieee754_pow+0x116>
 800a7b2:	2e00      	cmp	r6, #0
 800a7b4:	f280 8454 	bge.w	800b060 <__ieee754_pow+0x9a8>
 800a7b8:	f04f 0b00 	mov.w	fp, #0
 800a7bc:	f04f 0c00 	mov.w	ip, #0
 800a7c0:	4658      	mov	r0, fp
 800a7c2:	4661      	mov	r1, ip
 800a7c4:	b013      	add	sp, #76	; 0x4c
 800a7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ca:	2302      	movs	r3, #2
 800a7cc:	e7e0      	b.n	800a790 <__ieee754_pow+0xd8>
 800a7ce:	2e00      	cmp	r6, #0
 800a7d0:	daf2      	bge.n	800a7b8 <__ieee754_pow+0x100>
 800a7d2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800a7d6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800a7da:	e7f1      	b.n	800a7c0 <__ieee754_pow+0x108>
 800a7dc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800a7e0:	d108      	bne.n	800a7f4 <__ieee754_pow+0x13c>
 800a7e2:	463a      	mov	r2, r7
 800a7e4:	4643      	mov	r3, r8
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	4641      	mov	r1, r8
 800a7ea:	f7f5 fe75 	bl	80004d8 <__aeabi_dmul>
 800a7ee:	4683      	mov	fp, r0
 800a7f0:	468c      	mov	ip, r1
 800a7f2:	e7e5      	b.n	800a7c0 <__ieee754_pow+0x108>
 800a7f4:	4b3b      	ldr	r3, [pc, #236]	; (800a8e4 <__ieee754_pow+0x22c>)
 800a7f6:	429e      	cmp	r6, r3
 800a7f8:	d10b      	bne.n	800a812 <__ieee754_pow+0x15a>
 800a7fa:	f1b9 0f00 	cmp.w	r9, #0
 800a7fe:	db08      	blt.n	800a812 <__ieee754_pow+0x15a>
 800a800:	4638      	mov	r0, r7
 800a802:	4641      	mov	r1, r8
 800a804:	b013      	add	sp, #76	; 0x4c
 800a806:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80a:	f000 be5d 	b.w	800b4c8 <__ieee754_sqrt>
 800a80e:	2300      	movs	r3, #0
 800a810:	9300      	str	r3, [sp, #0]
 800a812:	4638      	mov	r0, r7
 800a814:	4641      	mov	r1, r8
 800a816:	f001 fbc1 	bl	800bf9c <fabs>
 800a81a:	4683      	mov	fp, r0
 800a81c:	468c      	mov	ip, r1
 800a81e:	f1ba 0f00 	cmp.w	sl, #0
 800a822:	d129      	bne.n	800a878 <__ieee754_pow+0x1c0>
 800a824:	b124      	cbz	r4, 800a830 <__ieee754_pow+0x178>
 800a826:	4b2d      	ldr	r3, [pc, #180]	; (800a8dc <__ieee754_pow+0x224>)
 800a828:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d123      	bne.n	800a878 <__ieee754_pow+0x1c0>
 800a830:	2e00      	cmp	r6, #0
 800a832:	da07      	bge.n	800a844 <__ieee754_pow+0x18c>
 800a834:	465a      	mov	r2, fp
 800a836:	4663      	mov	r3, ip
 800a838:	2000      	movs	r0, #0
 800a83a:	4928      	ldr	r1, [pc, #160]	; (800a8dc <__ieee754_pow+0x224>)
 800a83c:	f7f5 ff76 	bl	800072c <__aeabi_ddiv>
 800a840:	4683      	mov	fp, r0
 800a842:	468c      	mov	ip, r1
 800a844:	f1b9 0f00 	cmp.w	r9, #0
 800a848:	daba      	bge.n	800a7c0 <__ieee754_pow+0x108>
 800a84a:	9b00      	ldr	r3, [sp, #0]
 800a84c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a850:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a854:	4323      	orrs	r3, r4
 800a856:	d108      	bne.n	800a86a <__ieee754_pow+0x1b2>
 800a858:	465a      	mov	r2, fp
 800a85a:	4663      	mov	r3, ip
 800a85c:	4658      	mov	r0, fp
 800a85e:	4661      	mov	r1, ip
 800a860:	f7f5 fc82 	bl	8000168 <__aeabi_dsub>
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	e78e      	b.n	800a788 <__ieee754_pow+0xd0>
 800a86a:	9b00      	ldr	r3, [sp, #0]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d1a7      	bne.n	800a7c0 <__ieee754_pow+0x108>
 800a870:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800a874:	469c      	mov	ip, r3
 800a876:	e7a3      	b.n	800a7c0 <__ieee754_pow+0x108>
 800a878:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800a87c:	3b01      	subs	r3, #1
 800a87e:	930c      	str	r3, [sp, #48]	; 0x30
 800a880:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a882:	9b00      	ldr	r3, [sp, #0]
 800a884:	4313      	orrs	r3, r2
 800a886:	d104      	bne.n	800a892 <__ieee754_pow+0x1da>
 800a888:	463a      	mov	r2, r7
 800a88a:	4643      	mov	r3, r8
 800a88c:	4638      	mov	r0, r7
 800a88e:	4641      	mov	r1, r8
 800a890:	e7e6      	b.n	800a860 <__ieee754_pow+0x1a8>
 800a892:	4b15      	ldr	r3, [pc, #84]	; (800a8e8 <__ieee754_pow+0x230>)
 800a894:	429d      	cmp	r5, r3
 800a896:	f340 80f9 	ble.w	800aa8c <__ieee754_pow+0x3d4>
 800a89a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a89e:	429d      	cmp	r5, r3
 800a8a0:	4b0f      	ldr	r3, [pc, #60]	; (800a8e0 <__ieee754_pow+0x228>)
 800a8a2:	dd09      	ble.n	800a8b8 <__ieee754_pow+0x200>
 800a8a4:	429c      	cmp	r4, r3
 800a8a6:	dc0c      	bgt.n	800a8c2 <__ieee754_pow+0x20a>
 800a8a8:	2e00      	cmp	r6, #0
 800a8aa:	da85      	bge.n	800a7b8 <__ieee754_pow+0x100>
 800a8ac:	a306      	add	r3, pc, #24	; (adr r3, 800a8c8 <__ieee754_pow+0x210>)
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	e798      	b.n	800a7ea <__ieee754_pow+0x132>
 800a8b8:	429c      	cmp	r4, r3
 800a8ba:	dbf5      	blt.n	800a8a8 <__ieee754_pow+0x1f0>
 800a8bc:	4b07      	ldr	r3, [pc, #28]	; (800a8dc <__ieee754_pow+0x224>)
 800a8be:	429c      	cmp	r4, r3
 800a8c0:	dd14      	ble.n	800a8ec <__ieee754_pow+0x234>
 800a8c2:	2e00      	cmp	r6, #0
 800a8c4:	dcf2      	bgt.n	800a8ac <__ieee754_pow+0x1f4>
 800a8c6:	e777      	b.n	800a7b8 <__ieee754_pow+0x100>
 800a8c8:	8800759c 	.word	0x8800759c
 800a8cc:	7e37e43c 	.word	0x7e37e43c
 800a8d0:	7ff00000 	.word	0x7ff00000
 800a8d4:	0800c70a 	.word	0x0800c70a
 800a8d8:	433fffff 	.word	0x433fffff
 800a8dc:	3ff00000 	.word	0x3ff00000
 800a8e0:	3fefffff 	.word	0x3fefffff
 800a8e4:	3fe00000 	.word	0x3fe00000
 800a8e8:	41e00000 	.word	0x41e00000
 800a8ec:	4661      	mov	r1, ip
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	4658      	mov	r0, fp
 800a8f2:	4b61      	ldr	r3, [pc, #388]	; (800aa78 <__ieee754_pow+0x3c0>)
 800a8f4:	f7f5 fc38 	bl	8000168 <__aeabi_dsub>
 800a8f8:	a355      	add	r3, pc, #340	; (adr r3, 800aa50 <__ieee754_pow+0x398>)
 800a8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fe:	4604      	mov	r4, r0
 800a900:	460d      	mov	r5, r1
 800a902:	f7f5 fde9 	bl	80004d8 <__aeabi_dmul>
 800a906:	a354      	add	r3, pc, #336	; (adr r3, 800aa58 <__ieee754_pow+0x3a0>)
 800a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90c:	4606      	mov	r6, r0
 800a90e:	460f      	mov	r7, r1
 800a910:	4620      	mov	r0, r4
 800a912:	4629      	mov	r1, r5
 800a914:	f7f5 fde0 	bl	80004d8 <__aeabi_dmul>
 800a918:	2200      	movs	r2, #0
 800a91a:	4682      	mov	sl, r0
 800a91c:	468b      	mov	fp, r1
 800a91e:	4620      	mov	r0, r4
 800a920:	4629      	mov	r1, r5
 800a922:	4b56      	ldr	r3, [pc, #344]	; (800aa7c <__ieee754_pow+0x3c4>)
 800a924:	f7f5 fdd8 	bl	80004d8 <__aeabi_dmul>
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	a14c      	add	r1, pc, #304	; (adr r1, 800aa60 <__ieee754_pow+0x3a8>)
 800a92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a932:	f7f5 fc19 	bl	8000168 <__aeabi_dsub>
 800a936:	4622      	mov	r2, r4
 800a938:	462b      	mov	r3, r5
 800a93a:	f7f5 fdcd 	bl	80004d8 <__aeabi_dmul>
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	2000      	movs	r0, #0
 800a944:	494e      	ldr	r1, [pc, #312]	; (800aa80 <__ieee754_pow+0x3c8>)
 800a946:	f7f5 fc0f 	bl	8000168 <__aeabi_dsub>
 800a94a:	4622      	mov	r2, r4
 800a94c:	462b      	mov	r3, r5
 800a94e:	4680      	mov	r8, r0
 800a950:	4689      	mov	r9, r1
 800a952:	4620      	mov	r0, r4
 800a954:	4629      	mov	r1, r5
 800a956:	f7f5 fdbf 	bl	80004d8 <__aeabi_dmul>
 800a95a:	4602      	mov	r2, r0
 800a95c:	460b      	mov	r3, r1
 800a95e:	4640      	mov	r0, r8
 800a960:	4649      	mov	r1, r9
 800a962:	f7f5 fdb9 	bl	80004d8 <__aeabi_dmul>
 800a966:	a340      	add	r3, pc, #256	; (adr r3, 800aa68 <__ieee754_pow+0x3b0>)
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	f7f5 fdb4 	bl	80004d8 <__aeabi_dmul>
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	4650      	mov	r0, sl
 800a976:	4659      	mov	r1, fp
 800a978:	f7f5 fbf6 	bl	8000168 <__aeabi_dsub>
 800a97c:	f04f 0a00 	mov.w	sl, #0
 800a980:	4602      	mov	r2, r0
 800a982:	460b      	mov	r3, r1
 800a984:	4604      	mov	r4, r0
 800a986:	460d      	mov	r5, r1
 800a988:	4630      	mov	r0, r6
 800a98a:	4639      	mov	r1, r7
 800a98c:	f7f5 fbee 	bl	800016c <__adddf3>
 800a990:	4632      	mov	r2, r6
 800a992:	463b      	mov	r3, r7
 800a994:	4650      	mov	r0, sl
 800a996:	468b      	mov	fp, r1
 800a998:	f7f5 fbe6 	bl	8000168 <__aeabi_dsub>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	4629      	mov	r1, r5
 800a9a4:	f7f5 fbe0 	bl	8000168 <__aeabi_dsub>
 800a9a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a9ac:	9b00      	ldr	r3, [sp, #0]
 800a9ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	f04f 0600 	mov.w	r6, #0
 800a9b8:	f04f 0200 	mov.w	r2, #0
 800a9bc:	bf0c      	ite	eq
 800a9be:	4b31      	ldreq	r3, [pc, #196]	; (800aa84 <__ieee754_pow+0x3cc>)
 800a9c0:	4b2d      	ldrne	r3, [pc, #180]	; (800aa78 <__ieee754_pow+0x3c0>)
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	460d      	mov	r5, r1
 800a9c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9ca:	e9cd 2300 	strd	r2, r3, [sp]
 800a9ce:	4632      	mov	r2, r6
 800a9d0:	463b      	mov	r3, r7
 800a9d2:	f7f5 fbc9 	bl	8000168 <__aeabi_dsub>
 800a9d6:	4652      	mov	r2, sl
 800a9d8:	465b      	mov	r3, fp
 800a9da:	f7f5 fd7d 	bl	80004d8 <__aeabi_dmul>
 800a9de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9e2:	4680      	mov	r8, r0
 800a9e4:	4689      	mov	r9, r1
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	f7f5 fd75 	bl	80004d8 <__aeabi_dmul>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	4640      	mov	r0, r8
 800a9f4:	4649      	mov	r1, r9
 800a9f6:	f7f5 fbb9 	bl	800016c <__adddf3>
 800a9fa:	4632      	mov	r2, r6
 800a9fc:	463b      	mov	r3, r7
 800a9fe:	4680      	mov	r8, r0
 800aa00:	4689      	mov	r9, r1
 800aa02:	4650      	mov	r0, sl
 800aa04:	4659      	mov	r1, fp
 800aa06:	f7f5 fd67 	bl	80004d8 <__aeabi_dmul>
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	460d      	mov	r5, r1
 800aa0e:	460b      	mov	r3, r1
 800aa10:	4602      	mov	r2, r0
 800aa12:	4649      	mov	r1, r9
 800aa14:	4640      	mov	r0, r8
 800aa16:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800aa1a:	f7f5 fba7 	bl	800016c <__adddf3>
 800aa1e:	4b1a      	ldr	r3, [pc, #104]	; (800aa88 <__ieee754_pow+0x3d0>)
 800aa20:	4682      	mov	sl, r0
 800aa22:	4299      	cmp	r1, r3
 800aa24:	460f      	mov	r7, r1
 800aa26:	460e      	mov	r6, r1
 800aa28:	f340 82ed 	ble.w	800b006 <__ieee754_pow+0x94e>
 800aa2c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800aa30:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800aa34:	4303      	orrs	r3, r0
 800aa36:	f000 81e7 	beq.w	800ae08 <__ieee754_pow+0x750>
 800aa3a:	a30d      	add	r3, pc, #52	; (adr r3, 800aa70 <__ieee754_pow+0x3b8>)
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa44:	f7f5 fd48 	bl	80004d8 <__aeabi_dmul>
 800aa48:	a309      	add	r3, pc, #36	; (adr r3, 800aa70 <__ieee754_pow+0x3b8>)
 800aa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4e:	e6cc      	b.n	800a7ea <__ieee754_pow+0x132>
 800aa50:	60000000 	.word	0x60000000
 800aa54:	3ff71547 	.word	0x3ff71547
 800aa58:	f85ddf44 	.word	0xf85ddf44
 800aa5c:	3e54ae0b 	.word	0x3e54ae0b
 800aa60:	55555555 	.word	0x55555555
 800aa64:	3fd55555 	.word	0x3fd55555
 800aa68:	652b82fe 	.word	0x652b82fe
 800aa6c:	3ff71547 	.word	0x3ff71547
 800aa70:	8800759c 	.word	0x8800759c
 800aa74:	7e37e43c 	.word	0x7e37e43c
 800aa78:	3ff00000 	.word	0x3ff00000
 800aa7c:	3fd00000 	.word	0x3fd00000
 800aa80:	3fe00000 	.word	0x3fe00000
 800aa84:	bff00000 	.word	0xbff00000
 800aa88:	408fffff 	.word	0x408fffff
 800aa8c:	4bd4      	ldr	r3, [pc, #848]	; (800ade0 <__ieee754_pow+0x728>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	ea09 0303 	and.w	r3, r9, r3
 800aa94:	b943      	cbnz	r3, 800aaa8 <__ieee754_pow+0x3f0>
 800aa96:	4658      	mov	r0, fp
 800aa98:	4661      	mov	r1, ip
 800aa9a:	4bd2      	ldr	r3, [pc, #840]	; (800ade4 <__ieee754_pow+0x72c>)
 800aa9c:	f7f5 fd1c 	bl	80004d8 <__aeabi_dmul>
 800aaa0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800aaa4:	4683      	mov	fp, r0
 800aaa6:	460c      	mov	r4, r1
 800aaa8:	1523      	asrs	r3, r4, #20
 800aaaa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aaae:	4413      	add	r3, r2
 800aab0:	930b      	str	r3, [sp, #44]	; 0x2c
 800aab2:	4bcd      	ldr	r3, [pc, #820]	; (800ade8 <__ieee754_pow+0x730>)
 800aab4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aab8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800aabc:	429c      	cmp	r4, r3
 800aabe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aac2:	dd08      	ble.n	800aad6 <__ieee754_pow+0x41e>
 800aac4:	4bc9      	ldr	r3, [pc, #804]	; (800adec <__ieee754_pow+0x734>)
 800aac6:	429c      	cmp	r4, r3
 800aac8:	f340 819c 	ble.w	800ae04 <__ieee754_pow+0x74c>
 800aacc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aace:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800aad2:	3301      	adds	r3, #1
 800aad4:	930b      	str	r3, [sp, #44]	; 0x2c
 800aad6:	2600      	movs	r6, #0
 800aad8:	00f3      	lsls	r3, r6, #3
 800aada:	930d      	str	r3, [sp, #52]	; 0x34
 800aadc:	4bc4      	ldr	r3, [pc, #784]	; (800adf0 <__ieee754_pow+0x738>)
 800aade:	4658      	mov	r0, fp
 800aae0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aae4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aae8:	4629      	mov	r1, r5
 800aaea:	461a      	mov	r2, r3
 800aaec:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800aaf0:	4623      	mov	r3, r4
 800aaf2:	f7f5 fb39 	bl	8000168 <__aeabi_dsub>
 800aaf6:	46da      	mov	sl, fp
 800aaf8:	462b      	mov	r3, r5
 800aafa:	4652      	mov	r2, sl
 800aafc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ab00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab04:	f7f5 fb32 	bl	800016c <__adddf3>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	49b9      	ldr	r1, [pc, #740]	; (800adf4 <__ieee754_pow+0x73c>)
 800ab10:	f7f5 fe0c 	bl	800072c <__aeabi_ddiv>
 800ab14:	4602      	mov	r2, r0
 800ab16:	460b      	mov	r3, r1
 800ab18:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ab20:	f7f5 fcda 	bl	80004d8 <__aeabi_dmul>
 800ab24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab28:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800ab2c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ab30:	2300      	movs	r3, #0
 800ab32:	2200      	movs	r2, #0
 800ab34:	46ab      	mov	fp, r5
 800ab36:	106d      	asrs	r5, r5, #1
 800ab38:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ab3c:	9304      	str	r3, [sp, #16]
 800ab3e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ab42:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ab46:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800ab4a:	4640      	mov	r0, r8
 800ab4c:	4649      	mov	r1, r9
 800ab4e:	4614      	mov	r4, r2
 800ab50:	461d      	mov	r5, r3
 800ab52:	f7f5 fcc1 	bl	80004d8 <__aeabi_dmul>
 800ab56:	4602      	mov	r2, r0
 800ab58:	460b      	mov	r3, r1
 800ab5a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ab5e:	f7f5 fb03 	bl	8000168 <__aeabi_dsub>
 800ab62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab66:	4606      	mov	r6, r0
 800ab68:	460f      	mov	r7, r1
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	f7f5 fafb 	bl	8000168 <__aeabi_dsub>
 800ab72:	4602      	mov	r2, r0
 800ab74:	460b      	mov	r3, r1
 800ab76:	4650      	mov	r0, sl
 800ab78:	4659      	mov	r1, fp
 800ab7a:	f7f5 faf5 	bl	8000168 <__aeabi_dsub>
 800ab7e:	4642      	mov	r2, r8
 800ab80:	464b      	mov	r3, r9
 800ab82:	f7f5 fca9 	bl	80004d8 <__aeabi_dmul>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	4639      	mov	r1, r7
 800ab8e:	f7f5 faeb 	bl	8000168 <__aeabi_dsub>
 800ab92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab96:	f7f5 fc9f 	bl	80004d8 <__aeabi_dmul>
 800ab9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aba2:	4610      	mov	r0, r2
 800aba4:	4619      	mov	r1, r3
 800aba6:	f7f5 fc97 	bl	80004d8 <__aeabi_dmul>
 800abaa:	a37b      	add	r3, pc, #492	; (adr r3, 800ad98 <__ieee754_pow+0x6e0>)
 800abac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb0:	4604      	mov	r4, r0
 800abb2:	460d      	mov	r5, r1
 800abb4:	f7f5 fc90 	bl	80004d8 <__aeabi_dmul>
 800abb8:	a379      	add	r3, pc, #484	; (adr r3, 800ada0 <__ieee754_pow+0x6e8>)
 800abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbe:	f7f5 fad5 	bl	800016c <__adddf3>
 800abc2:	4622      	mov	r2, r4
 800abc4:	462b      	mov	r3, r5
 800abc6:	f7f5 fc87 	bl	80004d8 <__aeabi_dmul>
 800abca:	a377      	add	r3, pc, #476	; (adr r3, 800ada8 <__ieee754_pow+0x6f0>)
 800abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd0:	f7f5 facc 	bl	800016c <__adddf3>
 800abd4:	4622      	mov	r2, r4
 800abd6:	462b      	mov	r3, r5
 800abd8:	f7f5 fc7e 	bl	80004d8 <__aeabi_dmul>
 800abdc:	a374      	add	r3, pc, #464	; (adr r3, 800adb0 <__ieee754_pow+0x6f8>)
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	f7f5 fac3 	bl	800016c <__adddf3>
 800abe6:	4622      	mov	r2, r4
 800abe8:	462b      	mov	r3, r5
 800abea:	f7f5 fc75 	bl	80004d8 <__aeabi_dmul>
 800abee:	a372      	add	r3, pc, #456	; (adr r3, 800adb8 <__ieee754_pow+0x700>)
 800abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf4:	f7f5 faba 	bl	800016c <__adddf3>
 800abf8:	4622      	mov	r2, r4
 800abfa:	462b      	mov	r3, r5
 800abfc:	f7f5 fc6c 	bl	80004d8 <__aeabi_dmul>
 800ac00:	a36f      	add	r3, pc, #444	; (adr r3, 800adc0 <__ieee754_pow+0x708>)
 800ac02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac06:	f7f5 fab1 	bl	800016c <__adddf3>
 800ac0a:	4622      	mov	r2, r4
 800ac0c:	4606      	mov	r6, r0
 800ac0e:	460f      	mov	r7, r1
 800ac10:	462b      	mov	r3, r5
 800ac12:	4620      	mov	r0, r4
 800ac14:	4629      	mov	r1, r5
 800ac16:	f7f5 fc5f 	bl	80004d8 <__aeabi_dmul>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	4630      	mov	r0, r6
 800ac20:	4639      	mov	r1, r7
 800ac22:	f7f5 fc59 	bl	80004d8 <__aeabi_dmul>
 800ac26:	4604      	mov	r4, r0
 800ac28:	460d      	mov	r5, r1
 800ac2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac2e:	4642      	mov	r2, r8
 800ac30:	464b      	mov	r3, r9
 800ac32:	f7f5 fa9b 	bl	800016c <__adddf3>
 800ac36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ac3a:	f7f5 fc4d 	bl	80004d8 <__aeabi_dmul>
 800ac3e:	4622      	mov	r2, r4
 800ac40:	462b      	mov	r3, r5
 800ac42:	f7f5 fa93 	bl	800016c <__adddf3>
 800ac46:	4642      	mov	r2, r8
 800ac48:	4606      	mov	r6, r0
 800ac4a:	460f      	mov	r7, r1
 800ac4c:	464b      	mov	r3, r9
 800ac4e:	4640      	mov	r0, r8
 800ac50:	4649      	mov	r1, r9
 800ac52:	f7f5 fc41 	bl	80004d8 <__aeabi_dmul>
 800ac56:	2200      	movs	r2, #0
 800ac58:	4b67      	ldr	r3, [pc, #412]	; (800adf8 <__ieee754_pow+0x740>)
 800ac5a:	4682      	mov	sl, r0
 800ac5c:	468b      	mov	fp, r1
 800ac5e:	f7f5 fa85 	bl	800016c <__adddf3>
 800ac62:	4632      	mov	r2, r6
 800ac64:	463b      	mov	r3, r7
 800ac66:	f7f5 fa81 	bl	800016c <__adddf3>
 800ac6a:	9c04      	ldr	r4, [sp, #16]
 800ac6c:	460d      	mov	r5, r1
 800ac6e:	4622      	mov	r2, r4
 800ac70:	460b      	mov	r3, r1
 800ac72:	4640      	mov	r0, r8
 800ac74:	4649      	mov	r1, r9
 800ac76:	f7f5 fc2f 	bl	80004d8 <__aeabi_dmul>
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	4680      	mov	r8, r0
 800ac7e:	4689      	mov	r9, r1
 800ac80:	4620      	mov	r0, r4
 800ac82:	4629      	mov	r1, r5
 800ac84:	4b5c      	ldr	r3, [pc, #368]	; (800adf8 <__ieee754_pow+0x740>)
 800ac86:	f7f5 fa6f 	bl	8000168 <__aeabi_dsub>
 800ac8a:	4652      	mov	r2, sl
 800ac8c:	465b      	mov	r3, fp
 800ac8e:	f7f5 fa6b 	bl	8000168 <__aeabi_dsub>
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	4630      	mov	r0, r6
 800ac98:	4639      	mov	r1, r7
 800ac9a:	f7f5 fa65 	bl	8000168 <__aeabi_dsub>
 800ac9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aca2:	f7f5 fc19 	bl	80004d8 <__aeabi_dmul>
 800aca6:	4622      	mov	r2, r4
 800aca8:	4606      	mov	r6, r0
 800acaa:	460f      	mov	r7, r1
 800acac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800acb0:	462b      	mov	r3, r5
 800acb2:	f7f5 fc11 	bl	80004d8 <__aeabi_dmul>
 800acb6:	4602      	mov	r2, r0
 800acb8:	460b      	mov	r3, r1
 800acba:	4630      	mov	r0, r6
 800acbc:	4639      	mov	r1, r7
 800acbe:	f7f5 fa55 	bl	800016c <__adddf3>
 800acc2:	4606      	mov	r6, r0
 800acc4:	460f      	mov	r7, r1
 800acc6:	4602      	mov	r2, r0
 800acc8:	460b      	mov	r3, r1
 800acca:	4640      	mov	r0, r8
 800accc:	4649      	mov	r1, r9
 800acce:	f7f5 fa4d 	bl	800016c <__adddf3>
 800acd2:	a33d      	add	r3, pc, #244	; (adr r3, 800adc8 <__ieee754_pow+0x710>)
 800acd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd8:	9c04      	ldr	r4, [sp, #16]
 800acda:	460d      	mov	r5, r1
 800acdc:	4620      	mov	r0, r4
 800acde:	f7f5 fbfb 	bl	80004d8 <__aeabi_dmul>
 800ace2:	4642      	mov	r2, r8
 800ace4:	464b      	mov	r3, r9
 800ace6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800acea:	4620      	mov	r0, r4
 800acec:	4629      	mov	r1, r5
 800acee:	f7f5 fa3b 	bl	8000168 <__aeabi_dsub>
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	4630      	mov	r0, r6
 800acf8:	4639      	mov	r1, r7
 800acfa:	f7f5 fa35 	bl	8000168 <__aeabi_dsub>
 800acfe:	a334      	add	r3, pc, #208	; (adr r3, 800add0 <__ieee754_pow+0x718>)
 800ad00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad04:	f7f5 fbe8 	bl	80004d8 <__aeabi_dmul>
 800ad08:	a333      	add	r3, pc, #204	; (adr r3, 800add8 <__ieee754_pow+0x720>)
 800ad0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0e:	4606      	mov	r6, r0
 800ad10:	460f      	mov	r7, r1
 800ad12:	4620      	mov	r0, r4
 800ad14:	4629      	mov	r1, r5
 800ad16:	f7f5 fbdf 	bl	80004d8 <__aeabi_dmul>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	4630      	mov	r0, r6
 800ad20:	4639      	mov	r1, r7
 800ad22:	f7f5 fa23 	bl	800016c <__adddf3>
 800ad26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad28:	4b34      	ldr	r3, [pc, #208]	; (800adfc <__ieee754_pow+0x744>)
 800ad2a:	4413      	add	r3, r2
 800ad2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad30:	f7f5 fa1c 	bl	800016c <__adddf3>
 800ad34:	4680      	mov	r8, r0
 800ad36:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ad38:	4689      	mov	r9, r1
 800ad3a:	f7f5 fb63 	bl	8000404 <__aeabi_i2d>
 800ad3e:	4604      	mov	r4, r0
 800ad40:	460d      	mov	r5, r1
 800ad42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad44:	4b2e      	ldr	r3, [pc, #184]	; (800ae00 <__ieee754_pow+0x748>)
 800ad46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ad50:	4642      	mov	r2, r8
 800ad52:	464b      	mov	r3, r9
 800ad54:	f7f5 fa0a 	bl	800016c <__adddf3>
 800ad58:	4632      	mov	r2, r6
 800ad5a:	463b      	mov	r3, r7
 800ad5c:	f7f5 fa06 	bl	800016c <__adddf3>
 800ad60:	4622      	mov	r2, r4
 800ad62:	462b      	mov	r3, r5
 800ad64:	f7f5 fa02 	bl	800016c <__adddf3>
 800ad68:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ad6c:	4622      	mov	r2, r4
 800ad6e:	462b      	mov	r3, r5
 800ad70:	4650      	mov	r0, sl
 800ad72:	468b      	mov	fp, r1
 800ad74:	f7f5 f9f8 	bl	8000168 <__aeabi_dsub>
 800ad78:	4632      	mov	r2, r6
 800ad7a:	463b      	mov	r3, r7
 800ad7c:	f7f5 f9f4 	bl	8000168 <__aeabi_dsub>
 800ad80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad84:	f7f5 f9f0 	bl	8000168 <__aeabi_dsub>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4640      	mov	r0, r8
 800ad8e:	4649      	mov	r1, r9
 800ad90:	e608      	b.n	800a9a4 <__ieee754_pow+0x2ec>
 800ad92:	bf00      	nop
 800ad94:	f3af 8000 	nop.w
 800ad98:	4a454eef 	.word	0x4a454eef
 800ad9c:	3fca7e28 	.word	0x3fca7e28
 800ada0:	93c9db65 	.word	0x93c9db65
 800ada4:	3fcd864a 	.word	0x3fcd864a
 800ada8:	a91d4101 	.word	0xa91d4101
 800adac:	3fd17460 	.word	0x3fd17460
 800adb0:	518f264d 	.word	0x518f264d
 800adb4:	3fd55555 	.word	0x3fd55555
 800adb8:	db6fabff 	.word	0xdb6fabff
 800adbc:	3fdb6db6 	.word	0x3fdb6db6
 800adc0:	33333303 	.word	0x33333303
 800adc4:	3fe33333 	.word	0x3fe33333
 800adc8:	e0000000 	.word	0xe0000000
 800adcc:	3feec709 	.word	0x3feec709
 800add0:	dc3a03fd 	.word	0xdc3a03fd
 800add4:	3feec709 	.word	0x3feec709
 800add8:	145b01f5 	.word	0x145b01f5
 800addc:	be3e2fe0 	.word	0xbe3e2fe0
 800ade0:	7ff00000 	.word	0x7ff00000
 800ade4:	43400000 	.word	0x43400000
 800ade8:	0003988e 	.word	0x0003988e
 800adec:	000bb679 	.word	0x000bb679
 800adf0:	0800c770 	.word	0x0800c770
 800adf4:	3ff00000 	.word	0x3ff00000
 800adf8:	40080000 	.word	0x40080000
 800adfc:	0800c790 	.word	0x0800c790
 800ae00:	0800c780 	.word	0x0800c780
 800ae04:	2601      	movs	r6, #1
 800ae06:	e667      	b.n	800aad8 <__ieee754_pow+0x420>
 800ae08:	a39d      	add	r3, pc, #628	; (adr r3, 800b080 <__ieee754_pow+0x9c8>)
 800ae0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0e:	4640      	mov	r0, r8
 800ae10:	4649      	mov	r1, r9
 800ae12:	f7f5 f9ab 	bl	800016c <__adddf3>
 800ae16:	4622      	mov	r2, r4
 800ae18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae1c:	462b      	mov	r3, r5
 800ae1e:	4650      	mov	r0, sl
 800ae20:	4639      	mov	r1, r7
 800ae22:	f7f5 f9a1 	bl	8000168 <__aeabi_dsub>
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae2e:	f7f5 fde3 	bl	80009f8 <__aeabi_dcmpgt>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	f47f ae01 	bne.w	800aa3a <__ieee754_pow+0x382>
 800ae38:	4aa5      	ldr	r2, [pc, #660]	; (800b0d0 <__ieee754_pow+0xa18>)
 800ae3a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	f340 8103 	ble.w	800b04a <__ieee754_pow+0x992>
 800ae44:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ae48:	2000      	movs	r0, #0
 800ae4a:	151b      	asrs	r3, r3, #20
 800ae4c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ae50:	fa4a f303 	asr.w	r3, sl, r3
 800ae54:	4433      	add	r3, r6
 800ae56:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ae5a:	4f9e      	ldr	r7, [pc, #632]	; (800b0d4 <__ieee754_pow+0xa1c>)
 800ae5c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ae60:	4117      	asrs	r7, r2
 800ae62:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ae66:	ea23 0107 	bic.w	r1, r3, r7
 800ae6a:	f1c2 0214 	rsb	r2, r2, #20
 800ae6e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ae72:	460b      	mov	r3, r1
 800ae74:	fa4a fa02 	asr.w	sl, sl, r2
 800ae78:	2e00      	cmp	r6, #0
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	4629      	mov	r1, r5
 800ae7e:	4620      	mov	r0, r4
 800ae80:	bfb8      	it	lt
 800ae82:	f1ca 0a00 	rsblt	sl, sl, #0
 800ae86:	f7f5 f96f 	bl	8000168 <__aeabi_dsub>
 800ae8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae92:	2400      	movs	r4, #0
 800ae94:	4642      	mov	r2, r8
 800ae96:	464b      	mov	r3, r9
 800ae98:	f7f5 f968 	bl	800016c <__adddf3>
 800ae9c:	a37a      	add	r3, pc, #488	; (adr r3, 800b088 <__ieee754_pow+0x9d0>)
 800ae9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea2:	4620      	mov	r0, r4
 800aea4:	460d      	mov	r5, r1
 800aea6:	f7f5 fb17 	bl	80004d8 <__aeabi_dmul>
 800aeaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aeae:	4606      	mov	r6, r0
 800aeb0:	460f      	mov	r7, r1
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	4629      	mov	r1, r5
 800aeb6:	f7f5 f957 	bl	8000168 <__aeabi_dsub>
 800aeba:	4602      	mov	r2, r0
 800aebc:	460b      	mov	r3, r1
 800aebe:	4640      	mov	r0, r8
 800aec0:	4649      	mov	r1, r9
 800aec2:	f7f5 f951 	bl	8000168 <__aeabi_dsub>
 800aec6:	a372      	add	r3, pc, #456	; (adr r3, 800b090 <__ieee754_pow+0x9d8>)
 800aec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aecc:	f7f5 fb04 	bl	80004d8 <__aeabi_dmul>
 800aed0:	a371      	add	r3, pc, #452	; (adr r3, 800b098 <__ieee754_pow+0x9e0>)
 800aed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed6:	4680      	mov	r8, r0
 800aed8:	4689      	mov	r9, r1
 800aeda:	4620      	mov	r0, r4
 800aedc:	4629      	mov	r1, r5
 800aede:	f7f5 fafb 	bl	80004d8 <__aeabi_dmul>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	4640      	mov	r0, r8
 800aee8:	4649      	mov	r1, r9
 800aeea:	f7f5 f93f 	bl	800016c <__adddf3>
 800aeee:	4604      	mov	r4, r0
 800aef0:	460d      	mov	r5, r1
 800aef2:	4602      	mov	r2, r0
 800aef4:	460b      	mov	r3, r1
 800aef6:	4630      	mov	r0, r6
 800aef8:	4639      	mov	r1, r7
 800aefa:	f7f5 f937 	bl	800016c <__adddf3>
 800aefe:	4632      	mov	r2, r6
 800af00:	463b      	mov	r3, r7
 800af02:	4680      	mov	r8, r0
 800af04:	4689      	mov	r9, r1
 800af06:	f7f5 f92f 	bl	8000168 <__aeabi_dsub>
 800af0a:	4602      	mov	r2, r0
 800af0c:	460b      	mov	r3, r1
 800af0e:	4620      	mov	r0, r4
 800af10:	4629      	mov	r1, r5
 800af12:	f7f5 f929 	bl	8000168 <__aeabi_dsub>
 800af16:	4642      	mov	r2, r8
 800af18:	4606      	mov	r6, r0
 800af1a:	460f      	mov	r7, r1
 800af1c:	464b      	mov	r3, r9
 800af1e:	4640      	mov	r0, r8
 800af20:	4649      	mov	r1, r9
 800af22:	f7f5 fad9 	bl	80004d8 <__aeabi_dmul>
 800af26:	a35e      	add	r3, pc, #376	; (adr r3, 800b0a0 <__ieee754_pow+0x9e8>)
 800af28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2c:	4604      	mov	r4, r0
 800af2e:	460d      	mov	r5, r1
 800af30:	f7f5 fad2 	bl	80004d8 <__aeabi_dmul>
 800af34:	a35c      	add	r3, pc, #368	; (adr r3, 800b0a8 <__ieee754_pow+0x9f0>)
 800af36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3a:	f7f5 f915 	bl	8000168 <__aeabi_dsub>
 800af3e:	4622      	mov	r2, r4
 800af40:	462b      	mov	r3, r5
 800af42:	f7f5 fac9 	bl	80004d8 <__aeabi_dmul>
 800af46:	a35a      	add	r3, pc, #360	; (adr r3, 800b0b0 <__ieee754_pow+0x9f8>)
 800af48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4c:	f7f5 f90e 	bl	800016c <__adddf3>
 800af50:	4622      	mov	r2, r4
 800af52:	462b      	mov	r3, r5
 800af54:	f7f5 fac0 	bl	80004d8 <__aeabi_dmul>
 800af58:	a357      	add	r3, pc, #348	; (adr r3, 800b0b8 <__ieee754_pow+0xa00>)
 800af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5e:	f7f5 f903 	bl	8000168 <__aeabi_dsub>
 800af62:	4622      	mov	r2, r4
 800af64:	462b      	mov	r3, r5
 800af66:	f7f5 fab7 	bl	80004d8 <__aeabi_dmul>
 800af6a:	a355      	add	r3, pc, #340	; (adr r3, 800b0c0 <__ieee754_pow+0xa08>)
 800af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af70:	f7f5 f8fc 	bl	800016c <__adddf3>
 800af74:	4622      	mov	r2, r4
 800af76:	462b      	mov	r3, r5
 800af78:	f7f5 faae 	bl	80004d8 <__aeabi_dmul>
 800af7c:	4602      	mov	r2, r0
 800af7e:	460b      	mov	r3, r1
 800af80:	4640      	mov	r0, r8
 800af82:	4649      	mov	r1, r9
 800af84:	f7f5 f8f0 	bl	8000168 <__aeabi_dsub>
 800af88:	4604      	mov	r4, r0
 800af8a:	460d      	mov	r5, r1
 800af8c:	4602      	mov	r2, r0
 800af8e:	460b      	mov	r3, r1
 800af90:	4640      	mov	r0, r8
 800af92:	4649      	mov	r1, r9
 800af94:	f7f5 faa0 	bl	80004d8 <__aeabi_dmul>
 800af98:	2200      	movs	r2, #0
 800af9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800afa2:	4620      	mov	r0, r4
 800afa4:	4629      	mov	r1, r5
 800afa6:	f7f5 f8df 	bl	8000168 <__aeabi_dsub>
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afb2:	f7f5 fbbb 	bl	800072c <__aeabi_ddiv>
 800afb6:	4632      	mov	r2, r6
 800afb8:	4604      	mov	r4, r0
 800afba:	460d      	mov	r5, r1
 800afbc:	463b      	mov	r3, r7
 800afbe:	4640      	mov	r0, r8
 800afc0:	4649      	mov	r1, r9
 800afc2:	f7f5 fa89 	bl	80004d8 <__aeabi_dmul>
 800afc6:	4632      	mov	r2, r6
 800afc8:	463b      	mov	r3, r7
 800afca:	f7f5 f8cf 	bl	800016c <__adddf3>
 800afce:	4602      	mov	r2, r0
 800afd0:	460b      	mov	r3, r1
 800afd2:	4620      	mov	r0, r4
 800afd4:	4629      	mov	r1, r5
 800afd6:	f7f5 f8c7 	bl	8000168 <__aeabi_dsub>
 800afda:	4642      	mov	r2, r8
 800afdc:	464b      	mov	r3, r9
 800afde:	f7f5 f8c3 	bl	8000168 <__aeabi_dsub>
 800afe2:	4602      	mov	r2, r0
 800afe4:	460b      	mov	r3, r1
 800afe6:	2000      	movs	r0, #0
 800afe8:	493b      	ldr	r1, [pc, #236]	; (800b0d8 <__ieee754_pow+0xa20>)
 800afea:	f7f5 f8bd 	bl	8000168 <__aeabi_dsub>
 800afee:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800aff2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800aff6:	da2b      	bge.n	800b050 <__ieee754_pow+0x998>
 800aff8:	4652      	mov	r2, sl
 800affa:	f001 f8e5 	bl	800c1c8 <scalbn>
 800affe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b002:	f7ff bbf2 	b.w	800a7ea <__ieee754_pow+0x132>
 800b006:	4b35      	ldr	r3, [pc, #212]	; (800b0dc <__ieee754_pow+0xa24>)
 800b008:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b00c:	429f      	cmp	r7, r3
 800b00e:	f77f af13 	ble.w	800ae38 <__ieee754_pow+0x780>
 800b012:	4b33      	ldr	r3, [pc, #204]	; (800b0e0 <__ieee754_pow+0xa28>)
 800b014:	440b      	add	r3, r1
 800b016:	4303      	orrs	r3, r0
 800b018:	d00b      	beq.n	800b032 <__ieee754_pow+0x97a>
 800b01a:	a32b      	add	r3, pc, #172	; (adr r3, 800b0c8 <__ieee754_pow+0xa10>)
 800b01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b020:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b024:	f7f5 fa58 	bl	80004d8 <__aeabi_dmul>
 800b028:	a327      	add	r3, pc, #156	; (adr r3, 800b0c8 <__ieee754_pow+0xa10>)
 800b02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02e:	f7ff bbdc 	b.w	800a7ea <__ieee754_pow+0x132>
 800b032:	4622      	mov	r2, r4
 800b034:	462b      	mov	r3, r5
 800b036:	f7f5 f897 	bl	8000168 <__aeabi_dsub>
 800b03a:	4642      	mov	r2, r8
 800b03c:	464b      	mov	r3, r9
 800b03e:	f7f5 fcd1 	bl	80009e4 <__aeabi_dcmpge>
 800b042:	2800      	cmp	r0, #0
 800b044:	f43f aef8 	beq.w	800ae38 <__ieee754_pow+0x780>
 800b048:	e7e7      	b.n	800b01a <__ieee754_pow+0x962>
 800b04a:	f04f 0a00 	mov.w	sl, #0
 800b04e:	e71e      	b.n	800ae8e <__ieee754_pow+0x7d6>
 800b050:	4621      	mov	r1, r4
 800b052:	e7d4      	b.n	800affe <__ieee754_pow+0x946>
 800b054:	f04f 0b00 	mov.w	fp, #0
 800b058:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b0d8 <__ieee754_pow+0xa20>
 800b05c:	f7ff bbb0 	b.w	800a7c0 <__ieee754_pow+0x108>
 800b060:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b064:	f7ff bbac 	b.w	800a7c0 <__ieee754_pow+0x108>
 800b068:	4638      	mov	r0, r7
 800b06a:	4641      	mov	r1, r8
 800b06c:	f7ff bbbf 	b.w	800a7ee <__ieee754_pow+0x136>
 800b070:	9200      	str	r2, [sp, #0]
 800b072:	f7ff bb7f 	b.w	800a774 <__ieee754_pow+0xbc>
 800b076:	2300      	movs	r3, #0
 800b078:	f7ff bb69 	b.w	800a74e <__ieee754_pow+0x96>
 800b07c:	f3af 8000 	nop.w
 800b080:	652b82fe 	.word	0x652b82fe
 800b084:	3c971547 	.word	0x3c971547
 800b088:	00000000 	.word	0x00000000
 800b08c:	3fe62e43 	.word	0x3fe62e43
 800b090:	fefa39ef 	.word	0xfefa39ef
 800b094:	3fe62e42 	.word	0x3fe62e42
 800b098:	0ca86c39 	.word	0x0ca86c39
 800b09c:	be205c61 	.word	0xbe205c61
 800b0a0:	72bea4d0 	.word	0x72bea4d0
 800b0a4:	3e663769 	.word	0x3e663769
 800b0a8:	c5d26bf1 	.word	0xc5d26bf1
 800b0ac:	3ebbbd41 	.word	0x3ebbbd41
 800b0b0:	af25de2c 	.word	0xaf25de2c
 800b0b4:	3f11566a 	.word	0x3f11566a
 800b0b8:	16bebd93 	.word	0x16bebd93
 800b0bc:	3f66c16c 	.word	0x3f66c16c
 800b0c0:	5555553e 	.word	0x5555553e
 800b0c4:	3fc55555 	.word	0x3fc55555
 800b0c8:	c2f8f359 	.word	0xc2f8f359
 800b0cc:	01a56e1f 	.word	0x01a56e1f
 800b0d0:	3fe00000 	.word	0x3fe00000
 800b0d4:	000fffff 	.word	0x000fffff
 800b0d8:	3ff00000 	.word	0x3ff00000
 800b0dc:	4090cbff 	.word	0x4090cbff
 800b0e0:	3f6f3400 	.word	0x3f6f3400
 800b0e4:	00000000 	.word	0x00000000

0800b0e8 <__ieee754_rem_pio2>:
 800b0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ec:	4614      	mov	r4, r2
 800b0ee:	4ac4      	ldr	r2, [pc, #784]	; (800b400 <__ieee754_rem_pio2+0x318>)
 800b0f0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800b0f4:	b08d      	sub	sp, #52	; 0x34
 800b0f6:	4592      	cmp	sl, r2
 800b0f8:	9104      	str	r1, [sp, #16]
 800b0fa:	dc07      	bgt.n	800b10c <__ieee754_rem_pio2+0x24>
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	2300      	movs	r3, #0
 800b100:	e9c4 0100 	strd	r0, r1, [r4]
 800b104:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b108:	2500      	movs	r5, #0
 800b10a:	e024      	b.n	800b156 <__ieee754_rem_pio2+0x6e>
 800b10c:	4abd      	ldr	r2, [pc, #756]	; (800b404 <__ieee754_rem_pio2+0x31c>)
 800b10e:	4592      	cmp	sl, r2
 800b110:	dc72      	bgt.n	800b1f8 <__ieee754_rem_pio2+0x110>
 800b112:	9b04      	ldr	r3, [sp, #16]
 800b114:	4dbc      	ldr	r5, [pc, #752]	; (800b408 <__ieee754_rem_pio2+0x320>)
 800b116:	2b00      	cmp	r3, #0
 800b118:	a3ab      	add	r3, pc, #684	; (adr r3, 800b3c8 <__ieee754_rem_pio2+0x2e0>)
 800b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11e:	dd36      	ble.n	800b18e <__ieee754_rem_pio2+0xa6>
 800b120:	f7f5 f822 	bl	8000168 <__aeabi_dsub>
 800b124:	45aa      	cmp	sl, r5
 800b126:	4606      	mov	r6, r0
 800b128:	460f      	mov	r7, r1
 800b12a:	d018      	beq.n	800b15e <__ieee754_rem_pio2+0x76>
 800b12c:	a3a8      	add	r3, pc, #672	; (adr r3, 800b3d0 <__ieee754_rem_pio2+0x2e8>)
 800b12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b132:	f7f5 f819 	bl	8000168 <__aeabi_dsub>
 800b136:	4602      	mov	r2, r0
 800b138:	460b      	mov	r3, r1
 800b13a:	4630      	mov	r0, r6
 800b13c:	e9c4 2300 	strd	r2, r3, [r4]
 800b140:	4639      	mov	r1, r7
 800b142:	f7f5 f811 	bl	8000168 <__aeabi_dsub>
 800b146:	a3a2      	add	r3, pc, #648	; (adr r3, 800b3d0 <__ieee754_rem_pio2+0x2e8>)
 800b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14c:	f7f5 f80c 	bl	8000168 <__aeabi_dsub>
 800b150:	2501      	movs	r5, #1
 800b152:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b156:	4628      	mov	r0, r5
 800b158:	b00d      	add	sp, #52	; 0x34
 800b15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b15e:	a39e      	add	r3, pc, #632	; (adr r3, 800b3d8 <__ieee754_rem_pio2+0x2f0>)
 800b160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b164:	f7f5 f800 	bl	8000168 <__aeabi_dsub>
 800b168:	a39d      	add	r3, pc, #628	; (adr r3, 800b3e0 <__ieee754_rem_pio2+0x2f8>)
 800b16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16e:	4606      	mov	r6, r0
 800b170:	460f      	mov	r7, r1
 800b172:	f7f4 fff9 	bl	8000168 <__aeabi_dsub>
 800b176:	4602      	mov	r2, r0
 800b178:	460b      	mov	r3, r1
 800b17a:	4630      	mov	r0, r6
 800b17c:	e9c4 2300 	strd	r2, r3, [r4]
 800b180:	4639      	mov	r1, r7
 800b182:	f7f4 fff1 	bl	8000168 <__aeabi_dsub>
 800b186:	a396      	add	r3, pc, #600	; (adr r3, 800b3e0 <__ieee754_rem_pio2+0x2f8>)
 800b188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18c:	e7de      	b.n	800b14c <__ieee754_rem_pio2+0x64>
 800b18e:	f7f4 ffed 	bl	800016c <__adddf3>
 800b192:	45aa      	cmp	sl, r5
 800b194:	4606      	mov	r6, r0
 800b196:	460f      	mov	r7, r1
 800b198:	d016      	beq.n	800b1c8 <__ieee754_rem_pio2+0xe0>
 800b19a:	a38d      	add	r3, pc, #564	; (adr r3, 800b3d0 <__ieee754_rem_pio2+0x2e8>)
 800b19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a0:	f7f4 ffe4 	bl	800016c <__adddf3>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	e9c4 2300 	strd	r2, r3, [r4]
 800b1ae:	4639      	mov	r1, r7
 800b1b0:	f7f4 ffda 	bl	8000168 <__aeabi_dsub>
 800b1b4:	a386      	add	r3, pc, #536	; (adr r3, 800b3d0 <__ieee754_rem_pio2+0x2e8>)
 800b1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ba:	f7f4 ffd7 	bl	800016c <__adddf3>
 800b1be:	f04f 35ff 	mov.w	r5, #4294967295
 800b1c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b1c6:	e7c6      	b.n	800b156 <__ieee754_rem_pio2+0x6e>
 800b1c8:	a383      	add	r3, pc, #524	; (adr r3, 800b3d8 <__ieee754_rem_pio2+0x2f0>)
 800b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ce:	f7f4 ffcd 	bl	800016c <__adddf3>
 800b1d2:	a383      	add	r3, pc, #524	; (adr r3, 800b3e0 <__ieee754_rem_pio2+0x2f8>)
 800b1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d8:	4606      	mov	r6, r0
 800b1da:	460f      	mov	r7, r1
 800b1dc:	f7f4 ffc6 	bl	800016c <__adddf3>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4630      	mov	r0, r6
 800b1e6:	e9c4 2300 	strd	r2, r3, [r4]
 800b1ea:	4639      	mov	r1, r7
 800b1ec:	f7f4 ffbc 	bl	8000168 <__aeabi_dsub>
 800b1f0:	a37b      	add	r3, pc, #492	; (adr r3, 800b3e0 <__ieee754_rem_pio2+0x2f8>)
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	e7e0      	b.n	800b1ba <__ieee754_rem_pio2+0xd2>
 800b1f8:	4a84      	ldr	r2, [pc, #528]	; (800b40c <__ieee754_rem_pio2+0x324>)
 800b1fa:	4592      	cmp	sl, r2
 800b1fc:	f300 80d5 	bgt.w	800b3aa <__ieee754_rem_pio2+0x2c2>
 800b200:	f000 fecc 	bl	800bf9c <fabs>
 800b204:	a378      	add	r3, pc, #480	; (adr r3, 800b3e8 <__ieee754_rem_pio2+0x300>)
 800b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20a:	4606      	mov	r6, r0
 800b20c:	460f      	mov	r7, r1
 800b20e:	f7f5 f963 	bl	80004d8 <__aeabi_dmul>
 800b212:	2200      	movs	r2, #0
 800b214:	4b7e      	ldr	r3, [pc, #504]	; (800b410 <__ieee754_rem_pio2+0x328>)
 800b216:	f7f4 ffa9 	bl	800016c <__adddf3>
 800b21a:	f7f5 fc0d 	bl	8000a38 <__aeabi_d2iz>
 800b21e:	4605      	mov	r5, r0
 800b220:	f7f5 f8f0 	bl	8000404 <__aeabi_i2d>
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b22c:	a366      	add	r3, pc, #408	; (adr r3, 800b3c8 <__ieee754_rem_pio2+0x2e0>)
 800b22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b232:	f7f5 f951 	bl	80004d8 <__aeabi_dmul>
 800b236:	4602      	mov	r2, r0
 800b238:	460b      	mov	r3, r1
 800b23a:	4630      	mov	r0, r6
 800b23c:	4639      	mov	r1, r7
 800b23e:	f7f4 ff93 	bl	8000168 <__aeabi_dsub>
 800b242:	a363      	add	r3, pc, #396	; (adr r3, 800b3d0 <__ieee754_rem_pio2+0x2e8>)
 800b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b248:	4680      	mov	r8, r0
 800b24a:	4689      	mov	r9, r1
 800b24c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b250:	f7f5 f942 	bl	80004d8 <__aeabi_dmul>
 800b254:	2d1f      	cmp	r5, #31
 800b256:	4606      	mov	r6, r0
 800b258:	460f      	mov	r7, r1
 800b25a:	dc0e      	bgt.n	800b27a <__ieee754_rem_pio2+0x192>
 800b25c:	4b6d      	ldr	r3, [pc, #436]	; (800b414 <__ieee754_rem_pio2+0x32c>)
 800b25e:	1e6a      	subs	r2, r5, #1
 800b260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b264:	4553      	cmp	r3, sl
 800b266:	d008      	beq.n	800b27a <__ieee754_rem_pio2+0x192>
 800b268:	4632      	mov	r2, r6
 800b26a:	463b      	mov	r3, r7
 800b26c:	4640      	mov	r0, r8
 800b26e:	4649      	mov	r1, r9
 800b270:	f7f4 ff7a 	bl	8000168 <__aeabi_dsub>
 800b274:	e9c4 0100 	strd	r0, r1, [r4]
 800b278:	e013      	b.n	800b2a2 <__ieee754_rem_pio2+0x1ba>
 800b27a:	463b      	mov	r3, r7
 800b27c:	4632      	mov	r2, r6
 800b27e:	4640      	mov	r0, r8
 800b280:	4649      	mov	r1, r9
 800b282:	f7f4 ff71 	bl	8000168 <__aeabi_dsub>
 800b286:	ea4f 532a 	mov.w	r3, sl, asr #20
 800b28a:	9305      	str	r3, [sp, #20]
 800b28c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b290:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800b294:	f1ba 0f10 	cmp.w	sl, #16
 800b298:	dc1f      	bgt.n	800b2da <__ieee754_rem_pio2+0x1f2>
 800b29a:	4602      	mov	r2, r0
 800b29c:	460b      	mov	r3, r1
 800b29e:	e9c4 2300 	strd	r2, r3, [r4]
 800b2a2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800b2a6:	4640      	mov	r0, r8
 800b2a8:	4653      	mov	r3, sl
 800b2aa:	4649      	mov	r1, r9
 800b2ac:	f7f4 ff5c 	bl	8000168 <__aeabi_dsub>
 800b2b0:	4632      	mov	r2, r6
 800b2b2:	463b      	mov	r3, r7
 800b2b4:	f7f4 ff58 	bl	8000168 <__aeabi_dsub>
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b2be:	9904      	ldr	r1, [sp, #16]
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	2900      	cmp	r1, #0
 800b2c4:	f6bf af47 	bge.w	800b156 <__ieee754_rem_pio2+0x6e>
 800b2c8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800b2cc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b2d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2d4:	60e3      	str	r3, [r4, #12]
 800b2d6:	426d      	negs	r5, r5
 800b2d8:	e73d      	b.n	800b156 <__ieee754_rem_pio2+0x6e>
 800b2da:	a33f      	add	r3, pc, #252	; (adr r3, 800b3d8 <__ieee754_rem_pio2+0x2f0>)
 800b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2e4:	f7f5 f8f8 	bl	80004d8 <__aeabi_dmul>
 800b2e8:	4606      	mov	r6, r0
 800b2ea:	460f      	mov	r7, r1
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	4640      	mov	r0, r8
 800b2f2:	4649      	mov	r1, r9
 800b2f4:	f7f4 ff38 	bl	8000168 <__aeabi_dsub>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	4682      	mov	sl, r0
 800b2fe:	468b      	mov	fp, r1
 800b300:	4640      	mov	r0, r8
 800b302:	4649      	mov	r1, r9
 800b304:	f7f4 ff30 	bl	8000168 <__aeabi_dsub>
 800b308:	4632      	mov	r2, r6
 800b30a:	463b      	mov	r3, r7
 800b30c:	f7f4 ff2c 	bl	8000168 <__aeabi_dsub>
 800b310:	a333      	add	r3, pc, #204	; (adr r3, 800b3e0 <__ieee754_rem_pio2+0x2f8>)
 800b312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b316:	4606      	mov	r6, r0
 800b318:	460f      	mov	r7, r1
 800b31a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b31e:	f7f5 f8db 	bl	80004d8 <__aeabi_dmul>
 800b322:	4632      	mov	r2, r6
 800b324:	463b      	mov	r3, r7
 800b326:	f7f4 ff1f 	bl	8000168 <__aeabi_dsub>
 800b32a:	4602      	mov	r2, r0
 800b32c:	460b      	mov	r3, r1
 800b32e:	4606      	mov	r6, r0
 800b330:	460f      	mov	r7, r1
 800b332:	4650      	mov	r0, sl
 800b334:	4659      	mov	r1, fp
 800b336:	f7f4 ff17 	bl	8000168 <__aeabi_dsub>
 800b33a:	9a05      	ldr	r2, [sp, #20]
 800b33c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b340:	1ad3      	subs	r3, r2, r3
 800b342:	2b31      	cmp	r3, #49	; 0x31
 800b344:	dc06      	bgt.n	800b354 <__ieee754_rem_pio2+0x26c>
 800b346:	4602      	mov	r2, r0
 800b348:	460b      	mov	r3, r1
 800b34a:	46d0      	mov	r8, sl
 800b34c:	46d9      	mov	r9, fp
 800b34e:	e9c4 2300 	strd	r2, r3, [r4]
 800b352:	e7a6      	b.n	800b2a2 <__ieee754_rem_pio2+0x1ba>
 800b354:	a326      	add	r3, pc, #152	; (adr r3, 800b3f0 <__ieee754_rem_pio2+0x308>)
 800b356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b35e:	f7f5 f8bb 	bl	80004d8 <__aeabi_dmul>
 800b362:	4606      	mov	r6, r0
 800b364:	460f      	mov	r7, r1
 800b366:	4602      	mov	r2, r0
 800b368:	460b      	mov	r3, r1
 800b36a:	4650      	mov	r0, sl
 800b36c:	4659      	mov	r1, fp
 800b36e:	f7f4 fefb 	bl	8000168 <__aeabi_dsub>
 800b372:	4602      	mov	r2, r0
 800b374:	460b      	mov	r3, r1
 800b376:	4680      	mov	r8, r0
 800b378:	4689      	mov	r9, r1
 800b37a:	4650      	mov	r0, sl
 800b37c:	4659      	mov	r1, fp
 800b37e:	f7f4 fef3 	bl	8000168 <__aeabi_dsub>
 800b382:	4632      	mov	r2, r6
 800b384:	463b      	mov	r3, r7
 800b386:	f7f4 feef 	bl	8000168 <__aeabi_dsub>
 800b38a:	a31b      	add	r3, pc, #108	; (adr r3, 800b3f8 <__ieee754_rem_pio2+0x310>)
 800b38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b390:	4606      	mov	r6, r0
 800b392:	460f      	mov	r7, r1
 800b394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b398:	f7f5 f89e 	bl	80004d8 <__aeabi_dmul>
 800b39c:	4632      	mov	r2, r6
 800b39e:	463b      	mov	r3, r7
 800b3a0:	f7f4 fee2 	bl	8000168 <__aeabi_dsub>
 800b3a4:	4606      	mov	r6, r0
 800b3a6:	460f      	mov	r7, r1
 800b3a8:	e75e      	b.n	800b268 <__ieee754_rem_pio2+0x180>
 800b3aa:	4a1b      	ldr	r2, [pc, #108]	; (800b418 <__ieee754_rem_pio2+0x330>)
 800b3ac:	4592      	cmp	sl, r2
 800b3ae:	dd35      	ble.n	800b41c <__ieee754_rem_pio2+0x334>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	f7f4 fed8 	bl	8000168 <__aeabi_dsub>
 800b3b8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b3bc:	e9c4 0100 	strd	r0, r1, [r4]
 800b3c0:	e6a2      	b.n	800b108 <__ieee754_rem_pio2+0x20>
 800b3c2:	bf00      	nop
 800b3c4:	f3af 8000 	nop.w
 800b3c8:	54400000 	.word	0x54400000
 800b3cc:	3ff921fb 	.word	0x3ff921fb
 800b3d0:	1a626331 	.word	0x1a626331
 800b3d4:	3dd0b461 	.word	0x3dd0b461
 800b3d8:	1a600000 	.word	0x1a600000
 800b3dc:	3dd0b461 	.word	0x3dd0b461
 800b3e0:	2e037073 	.word	0x2e037073
 800b3e4:	3ba3198a 	.word	0x3ba3198a
 800b3e8:	6dc9c883 	.word	0x6dc9c883
 800b3ec:	3fe45f30 	.word	0x3fe45f30
 800b3f0:	2e000000 	.word	0x2e000000
 800b3f4:	3ba3198a 	.word	0x3ba3198a
 800b3f8:	252049c1 	.word	0x252049c1
 800b3fc:	397b839a 	.word	0x397b839a
 800b400:	3fe921fb 	.word	0x3fe921fb
 800b404:	4002d97b 	.word	0x4002d97b
 800b408:	3ff921fb 	.word	0x3ff921fb
 800b40c:	413921fb 	.word	0x413921fb
 800b410:	3fe00000 	.word	0x3fe00000
 800b414:	0800c7a0 	.word	0x0800c7a0
 800b418:	7fefffff 	.word	0x7fefffff
 800b41c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800b420:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b424:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800b428:	460f      	mov	r7, r1
 800b42a:	4606      	mov	r6, r0
 800b42c:	f7f5 fb04 	bl	8000a38 <__aeabi_d2iz>
 800b430:	f7f4 ffe8 	bl	8000404 <__aeabi_i2d>
 800b434:	4602      	mov	r2, r0
 800b436:	460b      	mov	r3, r1
 800b438:	4630      	mov	r0, r6
 800b43a:	4639      	mov	r1, r7
 800b43c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b440:	f7f4 fe92 	bl	8000168 <__aeabi_dsub>
 800b444:	2200      	movs	r2, #0
 800b446:	4b1e      	ldr	r3, [pc, #120]	; (800b4c0 <__ieee754_rem_pio2+0x3d8>)
 800b448:	f7f5 f846 	bl	80004d8 <__aeabi_dmul>
 800b44c:	460f      	mov	r7, r1
 800b44e:	4606      	mov	r6, r0
 800b450:	f7f5 faf2 	bl	8000a38 <__aeabi_d2iz>
 800b454:	f7f4 ffd6 	bl	8000404 <__aeabi_i2d>
 800b458:	4602      	mov	r2, r0
 800b45a:	460b      	mov	r3, r1
 800b45c:	4630      	mov	r0, r6
 800b45e:	4639      	mov	r1, r7
 800b460:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b464:	f7f4 fe80 	bl	8000168 <__aeabi_dsub>
 800b468:	2200      	movs	r2, #0
 800b46a:	4b15      	ldr	r3, [pc, #84]	; (800b4c0 <__ieee754_rem_pio2+0x3d8>)
 800b46c:	f7f5 f834 	bl	80004d8 <__aeabi_dmul>
 800b470:	f04f 0803 	mov.w	r8, #3
 800b474:	2600      	movs	r6, #0
 800b476:	2700      	movs	r7, #0
 800b478:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b47c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800b480:	4632      	mov	r2, r6
 800b482:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800b486:	463b      	mov	r3, r7
 800b488:	46c2      	mov	sl, r8
 800b48a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b48e:	f7f5 fa8b 	bl	80009a8 <__aeabi_dcmpeq>
 800b492:	2800      	cmp	r0, #0
 800b494:	d1f4      	bne.n	800b480 <__ieee754_rem_pio2+0x398>
 800b496:	4b0b      	ldr	r3, [pc, #44]	; (800b4c4 <__ieee754_rem_pio2+0x3dc>)
 800b498:	462a      	mov	r2, r5
 800b49a:	9301      	str	r3, [sp, #4]
 800b49c:	2302      	movs	r3, #2
 800b49e:	4621      	mov	r1, r4
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	a806      	add	r0, sp, #24
 800b4a4:	4653      	mov	r3, sl
 800b4a6:	f000 f979 	bl	800b79c <__kernel_rem_pio2>
 800b4aa:	9b04      	ldr	r3, [sp, #16]
 800b4ac:	4605      	mov	r5, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	f6bf ae51 	bge.w	800b156 <__ieee754_rem_pio2+0x6e>
 800b4b4:	6863      	ldr	r3, [r4, #4]
 800b4b6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b4ba:	6063      	str	r3, [r4, #4]
 800b4bc:	68e3      	ldr	r3, [r4, #12]
 800b4be:	e707      	b.n	800b2d0 <__ieee754_rem_pio2+0x1e8>
 800b4c0:	41700000 	.word	0x41700000
 800b4c4:	0800c820 	.word	0x0800c820

0800b4c8 <__ieee754_sqrt>:
 800b4c8:	f8df c150 	ldr.w	ip, [pc, #336]	; 800b61c <__ieee754_sqrt+0x154>
 800b4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d0:	ea3c 0c01 	bics.w	ip, ip, r1
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	4606      	mov	r6, r0
 800b4d8:	460d      	mov	r5, r1
 800b4da:	460a      	mov	r2, r1
 800b4dc:	4607      	mov	r7, r0
 800b4de:	4604      	mov	r4, r0
 800b4e0:	d10e      	bne.n	800b500 <__ieee754_sqrt+0x38>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	f7f4 fff8 	bl	80004d8 <__aeabi_dmul>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	4629      	mov	r1, r5
 800b4f0:	f7f4 fe3c 	bl	800016c <__adddf3>
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	460d      	mov	r5, r1
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	4629      	mov	r1, r5
 800b4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b500:	2900      	cmp	r1, #0
 800b502:	dc0d      	bgt.n	800b520 <__ieee754_sqrt+0x58>
 800b504:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b508:	ea5c 0707 	orrs.w	r7, ip, r7
 800b50c:	d0f4      	beq.n	800b4f8 <__ieee754_sqrt+0x30>
 800b50e:	b139      	cbz	r1, 800b520 <__ieee754_sqrt+0x58>
 800b510:	4602      	mov	r2, r0
 800b512:	f7f4 fe29 	bl	8000168 <__aeabi_dsub>
 800b516:	4602      	mov	r2, r0
 800b518:	460b      	mov	r3, r1
 800b51a:	f7f5 f907 	bl	800072c <__aeabi_ddiv>
 800b51e:	e7e9      	b.n	800b4f4 <__ieee754_sqrt+0x2c>
 800b520:	1512      	asrs	r2, r2, #20
 800b522:	d074      	beq.n	800b60e <__ieee754_sqrt+0x146>
 800b524:	2000      	movs	r0, #0
 800b526:	07d5      	lsls	r5, r2, #31
 800b528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b52c:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800b530:	bf5e      	ittt	pl
 800b532:	0fe3      	lsrpl	r3, r4, #31
 800b534:	0064      	lslpl	r4, r4, #1
 800b536:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800b53a:	0fe3      	lsrs	r3, r4, #31
 800b53c:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b540:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800b544:	2516      	movs	r5, #22
 800b546:	4601      	mov	r1, r0
 800b548:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b54c:	1076      	asrs	r6, r6, #1
 800b54e:	0064      	lsls	r4, r4, #1
 800b550:	188f      	adds	r7, r1, r2
 800b552:	429f      	cmp	r7, r3
 800b554:	bfde      	ittt	le
 800b556:	1bdb      	suble	r3, r3, r7
 800b558:	18b9      	addle	r1, r7, r2
 800b55a:	1880      	addle	r0, r0, r2
 800b55c:	005b      	lsls	r3, r3, #1
 800b55e:	3d01      	subs	r5, #1
 800b560:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b564:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b568:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b56c:	d1f0      	bne.n	800b550 <__ieee754_sqrt+0x88>
 800b56e:	462a      	mov	r2, r5
 800b570:	f04f 0e20 	mov.w	lr, #32
 800b574:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800b578:	428b      	cmp	r3, r1
 800b57a:	eb07 0c05 	add.w	ip, r7, r5
 800b57e:	dc02      	bgt.n	800b586 <__ieee754_sqrt+0xbe>
 800b580:	d113      	bne.n	800b5aa <__ieee754_sqrt+0xe2>
 800b582:	45a4      	cmp	ip, r4
 800b584:	d811      	bhi.n	800b5aa <__ieee754_sqrt+0xe2>
 800b586:	f1bc 0f00 	cmp.w	ip, #0
 800b58a:	eb0c 0507 	add.w	r5, ip, r7
 800b58e:	da43      	bge.n	800b618 <__ieee754_sqrt+0x150>
 800b590:	2d00      	cmp	r5, #0
 800b592:	db41      	blt.n	800b618 <__ieee754_sqrt+0x150>
 800b594:	f101 0801 	add.w	r8, r1, #1
 800b598:	1a5b      	subs	r3, r3, r1
 800b59a:	4641      	mov	r1, r8
 800b59c:	45a4      	cmp	ip, r4
 800b59e:	bf88      	it	hi
 800b5a0:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b5a4:	eba4 040c 	sub.w	r4, r4, ip
 800b5a8:	443a      	add	r2, r7
 800b5aa:	005b      	lsls	r3, r3, #1
 800b5ac:	f1be 0e01 	subs.w	lr, lr, #1
 800b5b0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b5b4:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800b5b8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b5bc:	d1dc      	bne.n	800b578 <__ieee754_sqrt+0xb0>
 800b5be:	4323      	orrs	r3, r4
 800b5c0:	d006      	beq.n	800b5d0 <__ieee754_sqrt+0x108>
 800b5c2:	1c54      	adds	r4, r2, #1
 800b5c4:	bf0b      	itete	eq
 800b5c6:	4672      	moveq	r2, lr
 800b5c8:	3201      	addne	r2, #1
 800b5ca:	3001      	addeq	r0, #1
 800b5cc:	f022 0201 	bicne.w	r2, r2, #1
 800b5d0:	1043      	asrs	r3, r0, #1
 800b5d2:	07c1      	lsls	r1, r0, #31
 800b5d4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b5d8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b5dc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b5e0:	bf48      	it	mi
 800b5e2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b5e6:	4610      	mov	r0, r2
 800b5e8:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800b5ec:	e782      	b.n	800b4f4 <__ieee754_sqrt+0x2c>
 800b5ee:	0ae3      	lsrs	r3, r4, #11
 800b5f0:	3915      	subs	r1, #21
 800b5f2:	0564      	lsls	r4, r4, #21
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d0fa      	beq.n	800b5ee <__ieee754_sqrt+0x126>
 800b5f8:	02de      	lsls	r6, r3, #11
 800b5fa:	d50a      	bpl.n	800b612 <__ieee754_sqrt+0x14a>
 800b5fc:	f1c2 0020 	rsb	r0, r2, #32
 800b600:	fa24 f000 	lsr.w	r0, r4, r0
 800b604:	1e55      	subs	r5, r2, #1
 800b606:	4094      	lsls	r4, r2
 800b608:	4303      	orrs	r3, r0
 800b60a:	1b4a      	subs	r2, r1, r5
 800b60c:	e78a      	b.n	800b524 <__ieee754_sqrt+0x5c>
 800b60e:	4611      	mov	r1, r2
 800b610:	e7f0      	b.n	800b5f4 <__ieee754_sqrt+0x12c>
 800b612:	005b      	lsls	r3, r3, #1
 800b614:	3201      	adds	r2, #1
 800b616:	e7ef      	b.n	800b5f8 <__ieee754_sqrt+0x130>
 800b618:	4688      	mov	r8, r1
 800b61a:	e7bd      	b.n	800b598 <__ieee754_sqrt+0xd0>
 800b61c:	7ff00000 	.word	0x7ff00000

0800b620 <__kernel_cos>:
 800b620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b624:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b628:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b62c:	4680      	mov	r8, r0
 800b62e:	460f      	mov	r7, r1
 800b630:	e9cd 2300 	strd	r2, r3, [sp]
 800b634:	da04      	bge.n	800b640 <__kernel_cos+0x20>
 800b636:	f7f5 f9ff 	bl	8000a38 <__aeabi_d2iz>
 800b63a:	2800      	cmp	r0, #0
 800b63c:	f000 8086 	beq.w	800b74c <__kernel_cos+0x12c>
 800b640:	4642      	mov	r2, r8
 800b642:	463b      	mov	r3, r7
 800b644:	4640      	mov	r0, r8
 800b646:	4639      	mov	r1, r7
 800b648:	f7f4 ff46 	bl	80004d8 <__aeabi_dmul>
 800b64c:	2200      	movs	r2, #0
 800b64e:	4b4e      	ldr	r3, [pc, #312]	; (800b788 <__kernel_cos+0x168>)
 800b650:	4604      	mov	r4, r0
 800b652:	460d      	mov	r5, r1
 800b654:	f7f4 ff40 	bl	80004d8 <__aeabi_dmul>
 800b658:	a33f      	add	r3, pc, #252	; (adr r3, 800b758 <__kernel_cos+0x138>)
 800b65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65e:	4682      	mov	sl, r0
 800b660:	468b      	mov	fp, r1
 800b662:	4620      	mov	r0, r4
 800b664:	4629      	mov	r1, r5
 800b666:	f7f4 ff37 	bl	80004d8 <__aeabi_dmul>
 800b66a:	a33d      	add	r3, pc, #244	; (adr r3, 800b760 <__kernel_cos+0x140>)
 800b66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b670:	f7f4 fd7c 	bl	800016c <__adddf3>
 800b674:	4622      	mov	r2, r4
 800b676:	462b      	mov	r3, r5
 800b678:	f7f4 ff2e 	bl	80004d8 <__aeabi_dmul>
 800b67c:	a33a      	add	r3, pc, #232	; (adr r3, 800b768 <__kernel_cos+0x148>)
 800b67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b682:	f7f4 fd71 	bl	8000168 <__aeabi_dsub>
 800b686:	4622      	mov	r2, r4
 800b688:	462b      	mov	r3, r5
 800b68a:	f7f4 ff25 	bl	80004d8 <__aeabi_dmul>
 800b68e:	a338      	add	r3, pc, #224	; (adr r3, 800b770 <__kernel_cos+0x150>)
 800b690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b694:	f7f4 fd6a 	bl	800016c <__adddf3>
 800b698:	4622      	mov	r2, r4
 800b69a:	462b      	mov	r3, r5
 800b69c:	f7f4 ff1c 	bl	80004d8 <__aeabi_dmul>
 800b6a0:	a335      	add	r3, pc, #212	; (adr r3, 800b778 <__kernel_cos+0x158>)
 800b6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a6:	f7f4 fd5f 	bl	8000168 <__aeabi_dsub>
 800b6aa:	4622      	mov	r2, r4
 800b6ac:	462b      	mov	r3, r5
 800b6ae:	f7f4 ff13 	bl	80004d8 <__aeabi_dmul>
 800b6b2:	a333      	add	r3, pc, #204	; (adr r3, 800b780 <__kernel_cos+0x160>)
 800b6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b8:	f7f4 fd58 	bl	800016c <__adddf3>
 800b6bc:	4622      	mov	r2, r4
 800b6be:	462b      	mov	r3, r5
 800b6c0:	f7f4 ff0a 	bl	80004d8 <__aeabi_dmul>
 800b6c4:	4622      	mov	r2, r4
 800b6c6:	462b      	mov	r3, r5
 800b6c8:	f7f4 ff06 	bl	80004d8 <__aeabi_dmul>
 800b6cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	460d      	mov	r5, r1
 800b6d4:	4640      	mov	r0, r8
 800b6d6:	4639      	mov	r1, r7
 800b6d8:	f7f4 fefe 	bl	80004d8 <__aeabi_dmul>
 800b6dc:	460b      	mov	r3, r1
 800b6de:	4602      	mov	r2, r0
 800b6e0:	4629      	mov	r1, r5
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f7f4 fd40 	bl	8000168 <__aeabi_dsub>
 800b6e8:	4b28      	ldr	r3, [pc, #160]	; (800b78c <__kernel_cos+0x16c>)
 800b6ea:	4680      	mov	r8, r0
 800b6ec:	429e      	cmp	r6, r3
 800b6ee:	4689      	mov	r9, r1
 800b6f0:	dc0e      	bgt.n	800b710 <__kernel_cos+0xf0>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	4650      	mov	r0, sl
 800b6f8:	4659      	mov	r1, fp
 800b6fa:	f7f4 fd35 	bl	8000168 <__aeabi_dsub>
 800b6fe:	4602      	mov	r2, r0
 800b700:	2000      	movs	r0, #0
 800b702:	460b      	mov	r3, r1
 800b704:	4922      	ldr	r1, [pc, #136]	; (800b790 <__kernel_cos+0x170>)
 800b706:	f7f4 fd2f 	bl	8000168 <__aeabi_dsub>
 800b70a:	b003      	add	sp, #12
 800b70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b710:	2400      	movs	r4, #0
 800b712:	4b20      	ldr	r3, [pc, #128]	; (800b794 <__kernel_cos+0x174>)
 800b714:	4622      	mov	r2, r4
 800b716:	429e      	cmp	r6, r3
 800b718:	bfcc      	ite	gt
 800b71a:	4d1f      	ldrgt	r5, [pc, #124]	; (800b798 <__kernel_cos+0x178>)
 800b71c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b720:	462b      	mov	r3, r5
 800b722:	2000      	movs	r0, #0
 800b724:	491a      	ldr	r1, [pc, #104]	; (800b790 <__kernel_cos+0x170>)
 800b726:	f7f4 fd1f 	bl	8000168 <__aeabi_dsub>
 800b72a:	4622      	mov	r2, r4
 800b72c:	4606      	mov	r6, r0
 800b72e:	460f      	mov	r7, r1
 800b730:	462b      	mov	r3, r5
 800b732:	4650      	mov	r0, sl
 800b734:	4659      	mov	r1, fp
 800b736:	f7f4 fd17 	bl	8000168 <__aeabi_dsub>
 800b73a:	4642      	mov	r2, r8
 800b73c:	464b      	mov	r3, r9
 800b73e:	f7f4 fd13 	bl	8000168 <__aeabi_dsub>
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
 800b746:	4630      	mov	r0, r6
 800b748:	4639      	mov	r1, r7
 800b74a:	e7dc      	b.n	800b706 <__kernel_cos+0xe6>
 800b74c:	2000      	movs	r0, #0
 800b74e:	4910      	ldr	r1, [pc, #64]	; (800b790 <__kernel_cos+0x170>)
 800b750:	e7db      	b.n	800b70a <__kernel_cos+0xea>
 800b752:	bf00      	nop
 800b754:	f3af 8000 	nop.w
 800b758:	be8838d4 	.word	0xbe8838d4
 800b75c:	bda8fae9 	.word	0xbda8fae9
 800b760:	bdb4b1c4 	.word	0xbdb4b1c4
 800b764:	3e21ee9e 	.word	0x3e21ee9e
 800b768:	809c52ad 	.word	0x809c52ad
 800b76c:	3e927e4f 	.word	0x3e927e4f
 800b770:	19cb1590 	.word	0x19cb1590
 800b774:	3efa01a0 	.word	0x3efa01a0
 800b778:	16c15177 	.word	0x16c15177
 800b77c:	3f56c16c 	.word	0x3f56c16c
 800b780:	5555554c 	.word	0x5555554c
 800b784:	3fa55555 	.word	0x3fa55555
 800b788:	3fe00000 	.word	0x3fe00000
 800b78c:	3fd33332 	.word	0x3fd33332
 800b790:	3ff00000 	.word	0x3ff00000
 800b794:	3fe90000 	.word	0x3fe90000
 800b798:	3fd20000 	.word	0x3fd20000

0800b79c <__kernel_rem_pio2>:
 800b79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b7a4:	9308      	str	r3, [sp, #32]
 800b7a6:	9101      	str	r1, [sp, #4]
 800b7a8:	4bc0      	ldr	r3, [pc, #768]	; (800baac <__kernel_rem_pio2+0x310>)
 800b7aa:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b7ac:	f112 0f14 	cmn.w	r2, #20
 800b7b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b7b4:	bfa8      	it	ge
 800b7b6:	1ed4      	subge	r4, r2, #3
 800b7b8:	9304      	str	r3, [sp, #16]
 800b7ba:	9b08      	ldr	r3, [sp, #32]
 800b7bc:	bfb8      	it	lt
 800b7be:	2400      	movlt	r4, #0
 800b7c0:	f103 33ff 	add.w	r3, r3, #4294967295
 800b7c4:	9306      	str	r3, [sp, #24]
 800b7c6:	bfa4      	itt	ge
 800b7c8:	2318      	movge	r3, #24
 800b7ca:	fb94 f4f3 	sdivge	r4, r4, r3
 800b7ce:	f06f 0317 	mvn.w	r3, #23
 800b7d2:	fb04 3303 	mla	r3, r4, r3, r3
 800b7d6:	eb03 0a02 	add.w	sl, r3, r2
 800b7da:	9a06      	ldr	r2, [sp, #24]
 800b7dc:	9b04      	ldr	r3, [sp, #16]
 800b7de:	1aa7      	subs	r7, r4, r2
 800b7e0:	eb03 0802 	add.w	r8, r3, r2
 800b7e4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b7e6:	2500      	movs	r5, #0
 800b7e8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	9009      	str	r0, [sp, #36]	; 0x24
 800b7f2:	ae20      	add	r6, sp, #128	; 0x80
 800b7f4:	4545      	cmp	r5, r8
 800b7f6:	dd19      	ble.n	800b82c <__kernel_rem_pio2+0x90>
 800b7f8:	9b08      	ldr	r3, [sp, #32]
 800b7fa:	aa20      	add	r2, sp, #128	; 0x80
 800b7fc:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b800:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b804:	f1c3 0301 	rsb	r3, r3, #1
 800b808:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b80c:	9307      	str	r3, [sp, #28]
 800b80e:	9b07      	ldr	r3, [sp, #28]
 800b810:	9a04      	ldr	r2, [sp, #16]
 800b812:	4443      	add	r3, r8
 800b814:	429a      	cmp	r2, r3
 800b816:	db35      	blt.n	800b884 <__kernel_rem_pio2+0xe8>
 800b818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b81a:	2200      	movs	r2, #0
 800b81c:	f1a3 0908 	sub.w	r9, r3, #8
 800b820:	2300      	movs	r3, #0
 800b822:	462f      	mov	r7, r5
 800b824:	2600      	movs	r6, #0
 800b826:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b82a:	e01f      	b.n	800b86c <__kernel_rem_pio2+0xd0>
 800b82c:	42ef      	cmn	r7, r5
 800b82e:	d40b      	bmi.n	800b848 <__kernel_rem_pio2+0xac>
 800b830:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b834:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b838:	f7f4 fde4 	bl	8000404 <__aeabi_i2d>
 800b83c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b840:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b844:	3501      	adds	r5, #1
 800b846:	e7d5      	b.n	800b7f4 <__kernel_rem_pio2+0x58>
 800b848:	4610      	mov	r0, r2
 800b84a:	4619      	mov	r1, r3
 800b84c:	e7f8      	b.n	800b840 <__kernel_rem_pio2+0xa4>
 800b84e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b852:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800b856:	f7f4 fe3f 	bl	80004d8 <__aeabi_dmul>
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b862:	f7f4 fc83 	bl	800016c <__adddf3>
 800b866:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b86a:	3601      	adds	r6, #1
 800b86c:	9b06      	ldr	r3, [sp, #24]
 800b86e:	3f08      	subs	r7, #8
 800b870:	429e      	cmp	r6, r3
 800b872:	ddec      	ble.n	800b84e <__kernel_rem_pio2+0xb2>
 800b874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b878:	3508      	adds	r5, #8
 800b87a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800b87e:	f108 0801 	add.w	r8, r8, #1
 800b882:	e7c4      	b.n	800b80e <__kernel_rem_pio2+0x72>
 800b884:	9b04      	ldr	r3, [sp, #16]
 800b886:	aa0c      	add	r2, sp, #48	; 0x30
 800b888:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b88c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b88e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b890:	9f04      	ldr	r7, [sp, #16]
 800b892:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b896:	930a      	str	r3, [sp, #40]	; 0x28
 800b898:	463e      	mov	r6, r7
 800b89a:	ab98      	add	r3, sp, #608	; 0x260
 800b89c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800b8a0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b8a4:	f8cd b008 	str.w	fp, [sp, #8]
 800b8a8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800b8ac:	2e00      	cmp	r6, #0
 800b8ae:	dc71      	bgt.n	800b994 <__kernel_rem_pio2+0x1f8>
 800b8b0:	4652      	mov	r2, sl
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	f000 fc87 	bl	800c1c8 <scalbn>
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	460d      	mov	r5, r1
 800b8c4:	f7f4 fe08 	bl	80004d8 <__aeabi_dmul>
 800b8c8:	f000 fb72 	bl	800bfb0 <floor>
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	4b78      	ldr	r3, [pc, #480]	; (800bab0 <__kernel_rem_pio2+0x314>)
 800b8d0:	f7f4 fe02 	bl	80004d8 <__aeabi_dmul>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	4620      	mov	r0, r4
 800b8da:	4629      	mov	r1, r5
 800b8dc:	f7f4 fc44 	bl	8000168 <__aeabi_dsub>
 800b8e0:	460d      	mov	r5, r1
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	f7f5 f8a8 	bl	8000a38 <__aeabi_d2iz>
 800b8e8:	9007      	str	r0, [sp, #28]
 800b8ea:	f7f4 fd8b 	bl	8000404 <__aeabi_i2d>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	f7f4 fc37 	bl	8000168 <__aeabi_dsub>
 800b8fa:	f1ba 0f00 	cmp.w	sl, #0
 800b8fe:	4680      	mov	r8, r0
 800b900:	4689      	mov	r9, r1
 800b902:	dd70      	ble.n	800b9e6 <__kernel_rem_pio2+0x24a>
 800b904:	1e7a      	subs	r2, r7, #1
 800b906:	ab0c      	add	r3, sp, #48	; 0x30
 800b908:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b90c:	9c07      	ldr	r4, [sp, #28]
 800b90e:	f1ca 0118 	rsb	r1, sl, #24
 800b912:	fa40 f301 	asr.w	r3, r0, r1
 800b916:	441c      	add	r4, r3
 800b918:	408b      	lsls	r3, r1
 800b91a:	1ac0      	subs	r0, r0, r3
 800b91c:	ab0c      	add	r3, sp, #48	; 0x30
 800b91e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b922:	f1ca 0317 	rsb	r3, sl, #23
 800b926:	9407      	str	r4, [sp, #28]
 800b928:	fa40 f303 	asr.w	r3, r0, r3
 800b92c:	9302      	str	r3, [sp, #8]
 800b92e:	9b02      	ldr	r3, [sp, #8]
 800b930:	2b00      	cmp	r3, #0
 800b932:	dd66      	ble.n	800ba02 <__kernel_rem_pio2+0x266>
 800b934:	2200      	movs	r2, #0
 800b936:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b93a:	4614      	mov	r4, r2
 800b93c:	9b07      	ldr	r3, [sp, #28]
 800b93e:	3301      	adds	r3, #1
 800b940:	9307      	str	r3, [sp, #28]
 800b942:	4297      	cmp	r7, r2
 800b944:	f300 809f 	bgt.w	800ba86 <__kernel_rem_pio2+0x2ea>
 800b948:	f1ba 0f00 	cmp.w	sl, #0
 800b94c:	dd07      	ble.n	800b95e <__kernel_rem_pio2+0x1c2>
 800b94e:	f1ba 0f01 	cmp.w	sl, #1
 800b952:	f000 80b9 	beq.w	800bac8 <__kernel_rem_pio2+0x32c>
 800b956:	f1ba 0f02 	cmp.w	sl, #2
 800b95a:	f000 80bf 	beq.w	800badc <__kernel_rem_pio2+0x340>
 800b95e:	9b02      	ldr	r3, [sp, #8]
 800b960:	2b02      	cmp	r3, #2
 800b962:	d14e      	bne.n	800ba02 <__kernel_rem_pio2+0x266>
 800b964:	4642      	mov	r2, r8
 800b966:	464b      	mov	r3, r9
 800b968:	2000      	movs	r0, #0
 800b96a:	4952      	ldr	r1, [pc, #328]	; (800bab4 <__kernel_rem_pio2+0x318>)
 800b96c:	f7f4 fbfc 	bl	8000168 <__aeabi_dsub>
 800b970:	4680      	mov	r8, r0
 800b972:	4689      	mov	r9, r1
 800b974:	2c00      	cmp	r4, #0
 800b976:	d044      	beq.n	800ba02 <__kernel_rem_pio2+0x266>
 800b978:	4652      	mov	r2, sl
 800b97a:	2000      	movs	r0, #0
 800b97c:	494d      	ldr	r1, [pc, #308]	; (800bab4 <__kernel_rem_pio2+0x318>)
 800b97e:	f000 fc23 	bl	800c1c8 <scalbn>
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	4640      	mov	r0, r8
 800b988:	4649      	mov	r1, r9
 800b98a:	f7f4 fbed 	bl	8000168 <__aeabi_dsub>
 800b98e:	4680      	mov	r8, r0
 800b990:	4689      	mov	r9, r1
 800b992:	e036      	b.n	800ba02 <__kernel_rem_pio2+0x266>
 800b994:	2200      	movs	r2, #0
 800b996:	4b48      	ldr	r3, [pc, #288]	; (800bab8 <__kernel_rem_pio2+0x31c>)
 800b998:	4620      	mov	r0, r4
 800b99a:	4629      	mov	r1, r5
 800b99c:	f7f4 fd9c 	bl	80004d8 <__aeabi_dmul>
 800b9a0:	f7f5 f84a 	bl	8000a38 <__aeabi_d2iz>
 800b9a4:	f7f4 fd2e 	bl	8000404 <__aeabi_i2d>
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	4b44      	ldr	r3, [pc, #272]	; (800babc <__kernel_rem_pio2+0x320>)
 800b9ac:	4680      	mov	r8, r0
 800b9ae:	4689      	mov	r9, r1
 800b9b0:	f7f4 fd92 	bl	80004d8 <__aeabi_dmul>
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	4629      	mov	r1, r5
 800b9bc:	f7f4 fbd4 	bl	8000168 <__aeabi_dsub>
 800b9c0:	f7f5 f83a 	bl	8000a38 <__aeabi_d2iz>
 800b9c4:	9b02      	ldr	r3, [sp, #8]
 800b9c6:	3e01      	subs	r6, #1
 800b9c8:	f843 0b04 	str.w	r0, [r3], #4
 800b9cc:	9302      	str	r3, [sp, #8]
 800b9ce:	ab70      	add	r3, sp, #448	; 0x1c0
 800b9d0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b9d4:	4640      	mov	r0, r8
 800b9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9da:	4649      	mov	r1, r9
 800b9dc:	f7f4 fbc6 	bl	800016c <__adddf3>
 800b9e0:	4604      	mov	r4, r0
 800b9e2:	460d      	mov	r5, r1
 800b9e4:	e762      	b.n	800b8ac <__kernel_rem_pio2+0x110>
 800b9e6:	d105      	bne.n	800b9f4 <__kernel_rem_pio2+0x258>
 800b9e8:	1e7b      	subs	r3, r7, #1
 800b9ea:	aa0c      	add	r2, sp, #48	; 0x30
 800b9ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b9f0:	15c3      	asrs	r3, r0, #23
 800b9f2:	e79b      	b.n	800b92c <__kernel_rem_pio2+0x190>
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	4b32      	ldr	r3, [pc, #200]	; (800bac0 <__kernel_rem_pio2+0x324>)
 800b9f8:	f7f4 fff4 	bl	80009e4 <__aeabi_dcmpge>
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	d13f      	bne.n	800ba80 <__kernel_rem_pio2+0x2e4>
 800ba00:	9002      	str	r0, [sp, #8]
 800ba02:	2200      	movs	r2, #0
 800ba04:	2300      	movs	r3, #0
 800ba06:	4640      	mov	r0, r8
 800ba08:	4649      	mov	r1, r9
 800ba0a:	f7f4 ffcd 	bl	80009a8 <__aeabi_dcmpeq>
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	f000 80b5 	beq.w	800bb7e <__kernel_rem_pio2+0x3e2>
 800ba14:	1e7c      	subs	r4, r7, #1
 800ba16:	4623      	mov	r3, r4
 800ba18:	2200      	movs	r2, #0
 800ba1a:	9904      	ldr	r1, [sp, #16]
 800ba1c:	428b      	cmp	r3, r1
 800ba1e:	da64      	bge.n	800baea <__kernel_rem_pio2+0x34e>
 800ba20:	2a00      	cmp	r2, #0
 800ba22:	d078      	beq.n	800bb16 <__kernel_rem_pio2+0x37a>
 800ba24:	ab0c      	add	r3, sp, #48	; 0x30
 800ba26:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ba2a:	f1aa 0a18 	sub.w	sl, sl, #24
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	f000 80a3 	beq.w	800bb7a <__kernel_rem_pio2+0x3de>
 800ba34:	4652      	mov	r2, sl
 800ba36:	2000      	movs	r0, #0
 800ba38:	491e      	ldr	r1, [pc, #120]	; (800bab4 <__kernel_rem_pio2+0x318>)
 800ba3a:	f000 fbc5 	bl	800c1c8 <scalbn>
 800ba3e:	46a2      	mov	sl, r4
 800ba40:	4606      	mov	r6, r0
 800ba42:	460f      	mov	r7, r1
 800ba44:	f04f 0800 	mov.w	r8, #0
 800ba48:	00e3      	lsls	r3, r4, #3
 800ba4a:	9306      	str	r3, [sp, #24]
 800ba4c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800bab8 <__kernel_rem_pio2+0x31c>
 800ba50:	ab70      	add	r3, sp, #448	; 0x1c0
 800ba52:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800ba56:	f1ba 0f00 	cmp.w	sl, #0
 800ba5a:	f280 80c6 	bge.w	800bbea <__kernel_rem_pio2+0x44e>
 800ba5e:	4627      	mov	r7, r4
 800ba60:	f04f 0800 	mov.w	r8, #0
 800ba64:	2f00      	cmp	r7, #0
 800ba66:	f2c0 80f3 	blt.w	800bc50 <__kernel_rem_pio2+0x4b4>
 800ba6a:	4b16      	ldr	r3, [pc, #88]	; (800bac4 <__kernel_rem_pio2+0x328>)
 800ba6c:	f04f 0a00 	mov.w	sl, #0
 800ba70:	461d      	mov	r5, r3
 800ba72:	ab70      	add	r3, sp, #448	; 0x1c0
 800ba74:	f04f 0b00 	mov.w	fp, #0
 800ba78:	2600      	movs	r6, #0
 800ba7a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800ba7e:	e0d9      	b.n	800bc34 <__kernel_rem_pio2+0x498>
 800ba80:	2302      	movs	r3, #2
 800ba82:	9302      	str	r3, [sp, #8]
 800ba84:	e756      	b.n	800b934 <__kernel_rem_pio2+0x198>
 800ba86:	f8db 3000 	ldr.w	r3, [fp]
 800ba8a:	b954      	cbnz	r4, 800baa2 <__kernel_rem_pio2+0x306>
 800ba8c:	b123      	cbz	r3, 800ba98 <__kernel_rem_pio2+0x2fc>
 800ba8e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ba92:	f8cb 3000 	str.w	r3, [fp]
 800ba96:	2301      	movs	r3, #1
 800ba98:	461c      	mov	r4, r3
 800ba9a:	3201      	adds	r2, #1
 800ba9c:	f10b 0b04 	add.w	fp, fp, #4
 800baa0:	e74f      	b.n	800b942 <__kernel_rem_pio2+0x1a6>
 800baa2:	1acb      	subs	r3, r1, r3
 800baa4:	f8cb 3000 	str.w	r3, [fp]
 800baa8:	4623      	mov	r3, r4
 800baaa:	e7f5      	b.n	800ba98 <__kernel_rem_pio2+0x2fc>
 800baac:	0800c968 	.word	0x0800c968
 800bab0:	40200000 	.word	0x40200000
 800bab4:	3ff00000 	.word	0x3ff00000
 800bab8:	3e700000 	.word	0x3e700000
 800babc:	41700000 	.word	0x41700000
 800bac0:	3fe00000 	.word	0x3fe00000
 800bac4:	0800c928 	.word	0x0800c928
 800bac8:	1e7a      	subs	r2, r7, #1
 800baca:	ab0c      	add	r3, sp, #48	; 0x30
 800bacc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bad0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bad4:	a90c      	add	r1, sp, #48	; 0x30
 800bad6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bada:	e740      	b.n	800b95e <__kernel_rem_pio2+0x1c2>
 800badc:	1e7a      	subs	r2, r7, #1
 800bade:	ab0c      	add	r3, sp, #48	; 0x30
 800bae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bae8:	e7f4      	b.n	800bad4 <__kernel_rem_pio2+0x338>
 800baea:	a90c      	add	r1, sp, #48	; 0x30
 800baec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800baf0:	3b01      	subs	r3, #1
 800baf2:	430a      	orrs	r2, r1
 800baf4:	e791      	b.n	800ba1a <__kernel_rem_pio2+0x27e>
 800baf6:	3401      	adds	r4, #1
 800baf8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bafc:	2a00      	cmp	r2, #0
 800bafe:	d0fa      	beq.n	800baf6 <__kernel_rem_pio2+0x35a>
 800bb00:	9b08      	ldr	r3, [sp, #32]
 800bb02:	1c7e      	adds	r6, r7, #1
 800bb04:	18fd      	adds	r5, r7, r3
 800bb06:	ab20      	add	r3, sp, #128	; 0x80
 800bb08:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bb0c:	443c      	add	r4, r7
 800bb0e:	42b4      	cmp	r4, r6
 800bb10:	da04      	bge.n	800bb1c <__kernel_rem_pio2+0x380>
 800bb12:	4627      	mov	r7, r4
 800bb14:	e6c0      	b.n	800b898 <__kernel_rem_pio2+0xfc>
 800bb16:	2401      	movs	r4, #1
 800bb18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb1a:	e7ed      	b.n	800baf8 <__kernel_rem_pio2+0x35c>
 800bb1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb1e:	462f      	mov	r7, r5
 800bb20:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bb24:	f7f4 fc6e 	bl	8000404 <__aeabi_i2d>
 800bb28:	f04f 0b00 	mov.w	fp, #0
 800bb2c:	f04f 0800 	mov.w	r8, #0
 800bb30:	f04f 0900 	mov.w	r9, #0
 800bb34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb36:	e8e7 0102 	strd	r0, r1, [r7], #8
 800bb3a:	3b08      	subs	r3, #8
 800bb3c:	9302      	str	r3, [sp, #8]
 800bb3e:	9b06      	ldr	r3, [sp, #24]
 800bb40:	459b      	cmp	fp, r3
 800bb42:	dd07      	ble.n	800bb54 <__kernel_rem_pio2+0x3b8>
 800bb44:	ab70      	add	r3, sp, #448	; 0x1c0
 800bb46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bb4a:	463d      	mov	r5, r7
 800bb4c:	e9c3 8900 	strd	r8, r9, [r3]
 800bb50:	3601      	adds	r6, #1
 800bb52:	e7dc      	b.n	800bb0e <__kernel_rem_pio2+0x372>
 800bb54:	9902      	ldr	r1, [sp, #8]
 800bb56:	f10b 0b01 	add.w	fp, fp, #1
 800bb5a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800bb5e:	9102      	str	r1, [sp, #8]
 800bb60:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800bb64:	f7f4 fcb8 	bl	80004d8 <__aeabi_dmul>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	4640      	mov	r0, r8
 800bb6e:	4649      	mov	r1, r9
 800bb70:	f7f4 fafc 	bl	800016c <__adddf3>
 800bb74:	4680      	mov	r8, r0
 800bb76:	4689      	mov	r9, r1
 800bb78:	e7e1      	b.n	800bb3e <__kernel_rem_pio2+0x3a2>
 800bb7a:	3c01      	subs	r4, #1
 800bb7c:	e752      	b.n	800ba24 <__kernel_rem_pio2+0x288>
 800bb7e:	f1ca 0200 	rsb	r2, sl, #0
 800bb82:	4640      	mov	r0, r8
 800bb84:	4649      	mov	r1, r9
 800bb86:	f000 fb1f 	bl	800c1c8 <scalbn>
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	4ba5      	ldr	r3, [pc, #660]	; (800be24 <__kernel_rem_pio2+0x688>)
 800bb8e:	4604      	mov	r4, r0
 800bb90:	460d      	mov	r5, r1
 800bb92:	f7f4 ff27 	bl	80009e4 <__aeabi_dcmpge>
 800bb96:	b1f8      	cbz	r0, 800bbd8 <__kernel_rem_pio2+0x43c>
 800bb98:	2200      	movs	r2, #0
 800bb9a:	4ba3      	ldr	r3, [pc, #652]	; (800be28 <__kernel_rem_pio2+0x68c>)
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	4629      	mov	r1, r5
 800bba0:	f7f4 fc9a 	bl	80004d8 <__aeabi_dmul>
 800bba4:	f7f4 ff48 	bl	8000a38 <__aeabi_d2iz>
 800bba8:	4606      	mov	r6, r0
 800bbaa:	f7f4 fc2b 	bl	8000404 <__aeabi_i2d>
 800bbae:	2200      	movs	r2, #0
 800bbb0:	4b9c      	ldr	r3, [pc, #624]	; (800be24 <__kernel_rem_pio2+0x688>)
 800bbb2:	f7f4 fc91 	bl	80004d8 <__aeabi_dmul>
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	4602      	mov	r2, r0
 800bbba:	4629      	mov	r1, r5
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f7f4 fad3 	bl	8000168 <__aeabi_dsub>
 800bbc2:	f7f4 ff39 	bl	8000a38 <__aeabi_d2iz>
 800bbc6:	1c7c      	adds	r4, r7, #1
 800bbc8:	ab0c      	add	r3, sp, #48	; 0x30
 800bbca:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800bbce:	f10a 0a18 	add.w	sl, sl, #24
 800bbd2:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800bbd6:	e72d      	b.n	800ba34 <__kernel_rem_pio2+0x298>
 800bbd8:	4620      	mov	r0, r4
 800bbda:	4629      	mov	r1, r5
 800bbdc:	f7f4 ff2c 	bl	8000a38 <__aeabi_d2iz>
 800bbe0:	ab0c      	add	r3, sp, #48	; 0x30
 800bbe2:	463c      	mov	r4, r7
 800bbe4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800bbe8:	e724      	b.n	800ba34 <__kernel_rem_pio2+0x298>
 800bbea:	ab0c      	add	r3, sp, #48	; 0x30
 800bbec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800bbf0:	f7f4 fc08 	bl	8000404 <__aeabi_i2d>
 800bbf4:	4632      	mov	r2, r6
 800bbf6:	463b      	mov	r3, r7
 800bbf8:	f7f4 fc6e 	bl	80004d8 <__aeabi_dmul>
 800bbfc:	4642      	mov	r2, r8
 800bbfe:	e86b 0102 	strd	r0, r1, [fp], #-8
 800bc02:	464b      	mov	r3, r9
 800bc04:	4630      	mov	r0, r6
 800bc06:	4639      	mov	r1, r7
 800bc08:	f7f4 fc66 	bl	80004d8 <__aeabi_dmul>
 800bc0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc10:	4606      	mov	r6, r0
 800bc12:	460f      	mov	r7, r1
 800bc14:	e71f      	b.n	800ba56 <__kernel_rem_pio2+0x2ba>
 800bc16:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800bc1a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800bc1e:	f7f4 fc5b 	bl	80004d8 <__aeabi_dmul>
 800bc22:	4602      	mov	r2, r0
 800bc24:	460b      	mov	r3, r1
 800bc26:	4650      	mov	r0, sl
 800bc28:	4659      	mov	r1, fp
 800bc2a:	f7f4 fa9f 	bl	800016c <__adddf3>
 800bc2e:	4682      	mov	sl, r0
 800bc30:	468b      	mov	fp, r1
 800bc32:	3601      	adds	r6, #1
 800bc34:	9b04      	ldr	r3, [sp, #16]
 800bc36:	429e      	cmp	r6, r3
 800bc38:	dc01      	bgt.n	800bc3e <__kernel_rem_pio2+0x4a2>
 800bc3a:	45b0      	cmp	r8, r6
 800bc3c:	daeb      	bge.n	800bc16 <__kernel_rem_pio2+0x47a>
 800bc3e:	ab48      	add	r3, sp, #288	; 0x120
 800bc40:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bc44:	e9c3 ab00 	strd	sl, fp, [r3]
 800bc48:	3f01      	subs	r7, #1
 800bc4a:	f108 0801 	add.w	r8, r8, #1
 800bc4e:	e709      	b.n	800ba64 <__kernel_rem_pio2+0x2c8>
 800bc50:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	dc09      	bgt.n	800bc6a <__kernel_rem_pio2+0x4ce>
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	dc34      	bgt.n	800bcc4 <__kernel_rem_pio2+0x528>
 800bc5a:	d05e      	beq.n	800bd1a <__kernel_rem_pio2+0x57e>
 800bc5c:	9b07      	ldr	r3, [sp, #28]
 800bc5e:	f003 0007 	and.w	r0, r3, #7
 800bc62:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800bc66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc6a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800bc6c:	2b03      	cmp	r3, #3
 800bc6e:	d1f5      	bne.n	800bc5c <__kernel_rem_pio2+0x4c0>
 800bc70:	9a06      	ldr	r2, [sp, #24]
 800bc72:	ab48      	add	r3, sp, #288	; 0x120
 800bc74:	441a      	add	r2, r3
 800bc76:	4615      	mov	r5, r2
 800bc78:	4692      	mov	sl, r2
 800bc7a:	46a3      	mov	fp, r4
 800bc7c:	f1bb 0f00 	cmp.w	fp, #0
 800bc80:	dc7a      	bgt.n	800bd78 <__kernel_rem_pio2+0x5dc>
 800bc82:	46aa      	mov	sl, r5
 800bc84:	46a3      	mov	fp, r4
 800bc86:	f1bb 0f01 	cmp.w	fp, #1
 800bc8a:	f300 8094 	bgt.w	800bdb6 <__kernel_rem_pio2+0x61a>
 800bc8e:	2700      	movs	r7, #0
 800bc90:	463e      	mov	r6, r7
 800bc92:	2c01      	cmp	r4, #1
 800bc94:	f300 80ae 	bgt.w	800bdf4 <__kernel_rem_pio2+0x658>
 800bc98:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800bc9c:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800bca0:	9b02      	ldr	r3, [sp, #8]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f040 80b0 	bne.w	800be08 <__kernel_rem_pio2+0x66c>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	462a      	mov	r2, r5
 800bcac:	9801      	ldr	r0, [sp, #4]
 800bcae:	e9c0 2300 	strd	r2, r3, [r0]
 800bcb2:	4622      	mov	r2, r4
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bcba:	463a      	mov	r2, r7
 800bcbc:	4633      	mov	r3, r6
 800bcbe:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bcc2:	e7cb      	b.n	800bc5c <__kernel_rem_pio2+0x4c0>
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	9a06      	ldr	r2, [sp, #24]
 800bcc8:	ab48      	add	r3, sp, #288	; 0x120
 800bcca:	441a      	add	r2, r3
 800bccc:	4615      	mov	r5, r2
 800bcce:	46a0      	mov	r8, r4
 800bcd0:	4601      	mov	r1, r0
 800bcd2:	f1b8 0f00 	cmp.w	r8, #0
 800bcd6:	da3c      	bge.n	800bd52 <__kernel_rem_pio2+0x5b6>
 800bcd8:	9b02      	ldr	r3, [sp, #8]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d040      	beq.n	800bd60 <__kernel_rem_pio2+0x5c4>
 800bcde:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800bce2:	4602      	mov	r2, r0
 800bce4:	462b      	mov	r3, r5
 800bce6:	9d01      	ldr	r5, [sp, #4]
 800bce8:	2601      	movs	r6, #1
 800bcea:	e9c5 2300 	strd	r2, r3, [r5]
 800bcee:	460b      	mov	r3, r1
 800bcf0:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800bcf4:	f7f4 fa38 	bl	8000168 <__aeabi_dsub>
 800bcf8:	4684      	mov	ip, r0
 800bcfa:	460f      	mov	r7, r1
 800bcfc:	ad48      	add	r5, sp, #288	; 0x120
 800bcfe:	42b4      	cmp	r4, r6
 800bd00:	f105 0508 	add.w	r5, r5, #8
 800bd04:	da2e      	bge.n	800bd64 <__kernel_rem_pio2+0x5c8>
 800bd06:	9b02      	ldr	r3, [sp, #8]
 800bd08:	b10b      	cbz	r3, 800bd0e <__kernel_rem_pio2+0x572>
 800bd0a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800bd0e:	4662      	mov	r2, ip
 800bd10:	463b      	mov	r3, r7
 800bd12:	9901      	ldr	r1, [sp, #4]
 800bd14:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800bd18:	e7a0      	b.n	800bc5c <__kernel_rem_pio2+0x4c0>
 800bd1a:	9a06      	ldr	r2, [sp, #24]
 800bd1c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800bd1e:	ab48      	add	r3, sp, #288	; 0x120
 800bd20:	441a      	add	r2, r3
 800bd22:	4615      	mov	r5, r2
 800bd24:	4637      	mov	r7, r6
 800bd26:	2c00      	cmp	r4, #0
 800bd28:	da09      	bge.n	800bd3e <__kernel_rem_pio2+0x5a2>
 800bd2a:	9b02      	ldr	r3, [sp, #8]
 800bd2c:	b10b      	cbz	r3, 800bd32 <__kernel_rem_pio2+0x596>
 800bd2e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800bd32:	4632      	mov	r2, r6
 800bd34:	463b      	mov	r3, r7
 800bd36:	9901      	ldr	r1, [sp, #4]
 800bd38:	e9c1 2300 	strd	r2, r3, [r1]
 800bd3c:	e78e      	b.n	800bc5c <__kernel_rem_pio2+0x4c0>
 800bd3e:	4630      	mov	r0, r6
 800bd40:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bd44:	4639      	mov	r1, r7
 800bd46:	f7f4 fa11 	bl	800016c <__adddf3>
 800bd4a:	3c01      	subs	r4, #1
 800bd4c:	4606      	mov	r6, r0
 800bd4e:	460f      	mov	r7, r1
 800bd50:	e7e9      	b.n	800bd26 <__kernel_rem_pio2+0x58a>
 800bd52:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bd56:	f7f4 fa09 	bl	800016c <__adddf3>
 800bd5a:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd5e:	e7b8      	b.n	800bcd2 <__kernel_rem_pio2+0x536>
 800bd60:	460d      	mov	r5, r1
 800bd62:	e7be      	b.n	800bce2 <__kernel_rem_pio2+0x546>
 800bd64:	4660      	mov	r0, ip
 800bd66:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd6a:	4639      	mov	r1, r7
 800bd6c:	f7f4 f9fe 	bl	800016c <__adddf3>
 800bd70:	3601      	adds	r6, #1
 800bd72:	4684      	mov	ip, r0
 800bd74:	460f      	mov	r7, r1
 800bd76:	e7c2      	b.n	800bcfe <__kernel_rem_pio2+0x562>
 800bd78:	e9da 6700 	ldrd	r6, r7, [sl]
 800bd7c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800bd80:	4632      	mov	r2, r6
 800bd82:	463b      	mov	r3, r7
 800bd84:	4640      	mov	r0, r8
 800bd86:	4649      	mov	r1, r9
 800bd88:	f7f4 f9f0 	bl	800016c <__adddf3>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	460b      	mov	r3, r1
 800bd90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd94:	4640      	mov	r0, r8
 800bd96:	4649      	mov	r1, r9
 800bd98:	f7f4 f9e6 	bl	8000168 <__aeabi_dsub>
 800bd9c:	4632      	mov	r2, r6
 800bd9e:	463b      	mov	r3, r7
 800bda0:	f7f4 f9e4 	bl	800016c <__adddf3>
 800bda4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bda8:	e86a 0102 	strd	r0, r1, [sl], #-8
 800bdac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bdb0:	e9ca 2300 	strd	r2, r3, [sl]
 800bdb4:	e762      	b.n	800bc7c <__kernel_rem_pio2+0x4e0>
 800bdb6:	e9da 8900 	ldrd	r8, r9, [sl]
 800bdba:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800bdbe:	4642      	mov	r2, r8
 800bdc0:	464b      	mov	r3, r9
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	4639      	mov	r1, r7
 800bdc6:	f7f4 f9d1 	bl	800016c <__adddf3>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	460b      	mov	r3, r1
 800bdce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	4639      	mov	r1, r7
 800bdd6:	f7f4 f9c7 	bl	8000168 <__aeabi_dsub>
 800bdda:	4642      	mov	r2, r8
 800bddc:	464b      	mov	r3, r9
 800bdde:	f7f4 f9c5 	bl	800016c <__adddf3>
 800bde2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bde6:	e86a 0102 	strd	r0, r1, [sl], #-8
 800bdea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bdee:	e9ca 2300 	strd	r2, r3, [sl]
 800bdf2:	e748      	b.n	800bc86 <__kernel_rem_pio2+0x4ea>
 800bdf4:	4638      	mov	r0, r7
 800bdf6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bdfa:	4631      	mov	r1, r6
 800bdfc:	f7f4 f9b6 	bl	800016c <__adddf3>
 800be00:	3c01      	subs	r4, #1
 800be02:	4607      	mov	r7, r0
 800be04:	460e      	mov	r6, r1
 800be06:	e744      	b.n	800bc92 <__kernel_rem_pio2+0x4f6>
 800be08:	9b01      	ldr	r3, [sp, #4]
 800be0a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800be0e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800be12:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800be16:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800be1a:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800be1e:	601d      	str	r5, [r3, #0]
 800be20:	615e      	str	r6, [r3, #20]
 800be22:	e71b      	b.n	800bc5c <__kernel_rem_pio2+0x4c0>
 800be24:	41700000 	.word	0x41700000
 800be28:	3e700000 	.word	0x3e700000
 800be2c:	00000000 	.word	0x00000000

0800be30 <__kernel_sin>:
 800be30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be34:	b086      	sub	sp, #24
 800be36:	e9cd 2300 	strd	r2, r3, [sp]
 800be3a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be3e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800be42:	4682      	mov	sl, r0
 800be44:	460c      	mov	r4, r1
 800be46:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800be48:	da03      	bge.n	800be52 <__kernel_sin+0x22>
 800be4a:	f7f4 fdf5 	bl	8000a38 <__aeabi_d2iz>
 800be4e:	2800      	cmp	r0, #0
 800be50:	d050      	beq.n	800bef4 <__kernel_sin+0xc4>
 800be52:	4652      	mov	r2, sl
 800be54:	4623      	mov	r3, r4
 800be56:	4650      	mov	r0, sl
 800be58:	4621      	mov	r1, r4
 800be5a:	f7f4 fb3d 	bl	80004d8 <__aeabi_dmul>
 800be5e:	4606      	mov	r6, r0
 800be60:	460f      	mov	r7, r1
 800be62:	4602      	mov	r2, r0
 800be64:	460b      	mov	r3, r1
 800be66:	4650      	mov	r0, sl
 800be68:	4621      	mov	r1, r4
 800be6a:	f7f4 fb35 	bl	80004d8 <__aeabi_dmul>
 800be6e:	a33e      	add	r3, pc, #248	; (adr r3, 800bf68 <__kernel_sin+0x138>)
 800be70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be74:	4680      	mov	r8, r0
 800be76:	4689      	mov	r9, r1
 800be78:	4630      	mov	r0, r6
 800be7a:	4639      	mov	r1, r7
 800be7c:	f7f4 fb2c 	bl	80004d8 <__aeabi_dmul>
 800be80:	a33b      	add	r3, pc, #236	; (adr r3, 800bf70 <__kernel_sin+0x140>)
 800be82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be86:	f7f4 f96f 	bl	8000168 <__aeabi_dsub>
 800be8a:	4632      	mov	r2, r6
 800be8c:	463b      	mov	r3, r7
 800be8e:	f7f4 fb23 	bl	80004d8 <__aeabi_dmul>
 800be92:	a339      	add	r3, pc, #228	; (adr r3, 800bf78 <__kernel_sin+0x148>)
 800be94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be98:	f7f4 f968 	bl	800016c <__adddf3>
 800be9c:	4632      	mov	r2, r6
 800be9e:	463b      	mov	r3, r7
 800bea0:	f7f4 fb1a 	bl	80004d8 <__aeabi_dmul>
 800bea4:	a336      	add	r3, pc, #216	; (adr r3, 800bf80 <__kernel_sin+0x150>)
 800bea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beaa:	f7f4 f95d 	bl	8000168 <__aeabi_dsub>
 800beae:	4632      	mov	r2, r6
 800beb0:	463b      	mov	r3, r7
 800beb2:	f7f4 fb11 	bl	80004d8 <__aeabi_dmul>
 800beb6:	a334      	add	r3, pc, #208	; (adr r3, 800bf88 <__kernel_sin+0x158>)
 800beb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebc:	f7f4 f956 	bl	800016c <__adddf3>
 800bec0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bec4:	b9dd      	cbnz	r5, 800befe <__kernel_sin+0xce>
 800bec6:	4602      	mov	r2, r0
 800bec8:	460b      	mov	r3, r1
 800beca:	4630      	mov	r0, r6
 800becc:	4639      	mov	r1, r7
 800bece:	f7f4 fb03 	bl	80004d8 <__aeabi_dmul>
 800bed2:	a32f      	add	r3, pc, #188	; (adr r3, 800bf90 <__kernel_sin+0x160>)
 800bed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed8:	f7f4 f946 	bl	8000168 <__aeabi_dsub>
 800bedc:	4642      	mov	r2, r8
 800bede:	464b      	mov	r3, r9
 800bee0:	f7f4 fafa 	bl	80004d8 <__aeabi_dmul>
 800bee4:	4602      	mov	r2, r0
 800bee6:	460b      	mov	r3, r1
 800bee8:	4650      	mov	r0, sl
 800beea:	4621      	mov	r1, r4
 800beec:	f7f4 f93e 	bl	800016c <__adddf3>
 800bef0:	4682      	mov	sl, r0
 800bef2:	460c      	mov	r4, r1
 800bef4:	4650      	mov	r0, sl
 800bef6:	4621      	mov	r1, r4
 800bef8:	b006      	add	sp, #24
 800befa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800befe:	2200      	movs	r2, #0
 800bf00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf04:	4b24      	ldr	r3, [pc, #144]	; (800bf98 <__kernel_sin+0x168>)
 800bf06:	f7f4 fae7 	bl	80004d8 <__aeabi_dmul>
 800bf0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf12:	4640      	mov	r0, r8
 800bf14:	4649      	mov	r1, r9
 800bf16:	f7f4 fadf 	bl	80004d8 <__aeabi_dmul>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf22:	f7f4 f921 	bl	8000168 <__aeabi_dsub>
 800bf26:	4632      	mov	r2, r6
 800bf28:	463b      	mov	r3, r7
 800bf2a:	f7f4 fad5 	bl	80004d8 <__aeabi_dmul>
 800bf2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf32:	f7f4 f919 	bl	8000168 <__aeabi_dsub>
 800bf36:	a316      	add	r3, pc, #88	; (adr r3, 800bf90 <__kernel_sin+0x160>)
 800bf38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3c:	4606      	mov	r6, r0
 800bf3e:	460f      	mov	r7, r1
 800bf40:	4640      	mov	r0, r8
 800bf42:	4649      	mov	r1, r9
 800bf44:	f7f4 fac8 	bl	80004d8 <__aeabi_dmul>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	4639      	mov	r1, r7
 800bf50:	f7f4 f90c 	bl	800016c <__adddf3>
 800bf54:	4602      	mov	r2, r0
 800bf56:	460b      	mov	r3, r1
 800bf58:	4650      	mov	r0, sl
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	f7f4 f904 	bl	8000168 <__aeabi_dsub>
 800bf60:	e7c6      	b.n	800bef0 <__kernel_sin+0xc0>
 800bf62:	bf00      	nop
 800bf64:	f3af 8000 	nop.w
 800bf68:	5acfd57c 	.word	0x5acfd57c
 800bf6c:	3de5d93a 	.word	0x3de5d93a
 800bf70:	8a2b9ceb 	.word	0x8a2b9ceb
 800bf74:	3e5ae5e6 	.word	0x3e5ae5e6
 800bf78:	57b1fe7d 	.word	0x57b1fe7d
 800bf7c:	3ec71de3 	.word	0x3ec71de3
 800bf80:	19c161d5 	.word	0x19c161d5
 800bf84:	3f2a01a0 	.word	0x3f2a01a0
 800bf88:	1110f8a6 	.word	0x1110f8a6
 800bf8c:	3f811111 	.word	0x3f811111
 800bf90:	55555549 	.word	0x55555549
 800bf94:	3fc55555 	.word	0x3fc55555
 800bf98:	3fe00000 	.word	0x3fe00000

0800bf9c <fabs>:
 800bf9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bfa0:	4770      	bx	lr

0800bfa2 <finite>:
 800bfa2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800bfa6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bfaa:	0fc0      	lsrs	r0, r0, #31
 800bfac:	4770      	bx	lr
	...

0800bfb0 <floor>:
 800bfb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfb4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800bfb8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800bfbc:	2e13      	cmp	r6, #19
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	4607      	mov	r7, r0
 800bfc4:	460c      	mov	r4, r1
 800bfc6:	4605      	mov	r5, r0
 800bfc8:	dc34      	bgt.n	800c034 <floor+0x84>
 800bfca:	2e00      	cmp	r6, #0
 800bfcc:	da15      	bge.n	800bffa <floor+0x4a>
 800bfce:	a334      	add	r3, pc, #208	; (adr r3, 800c0a0 <floor+0xf0>)
 800bfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd4:	f7f4 f8ca 	bl	800016c <__adddf3>
 800bfd8:	2200      	movs	r2, #0
 800bfda:	2300      	movs	r3, #0
 800bfdc:	f7f4 fd0c 	bl	80009f8 <__aeabi_dcmpgt>
 800bfe0:	b140      	cbz	r0, 800bff4 <floor+0x44>
 800bfe2:	2c00      	cmp	r4, #0
 800bfe4:	da59      	bge.n	800c09a <floor+0xea>
 800bfe6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bfea:	ea57 0503 	orrs.w	r5, r7, r3
 800bfee:	d001      	beq.n	800bff4 <floor+0x44>
 800bff0:	2500      	movs	r5, #0
 800bff2:	4c2d      	ldr	r4, [pc, #180]	; (800c0a8 <floor+0xf8>)
 800bff4:	4623      	mov	r3, r4
 800bff6:	462f      	mov	r7, r5
 800bff8:	e025      	b.n	800c046 <floor+0x96>
 800bffa:	4a2c      	ldr	r2, [pc, #176]	; (800c0ac <floor+0xfc>)
 800bffc:	fa42 f806 	asr.w	r8, r2, r6
 800c000:	ea01 0208 	and.w	r2, r1, r8
 800c004:	4302      	orrs	r2, r0
 800c006:	d01e      	beq.n	800c046 <floor+0x96>
 800c008:	a325      	add	r3, pc, #148	; (adr r3, 800c0a0 <floor+0xf0>)
 800c00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00e:	f7f4 f8ad 	bl	800016c <__adddf3>
 800c012:	2200      	movs	r2, #0
 800c014:	2300      	movs	r3, #0
 800c016:	f7f4 fcef 	bl	80009f8 <__aeabi_dcmpgt>
 800c01a:	2800      	cmp	r0, #0
 800c01c:	d0ea      	beq.n	800bff4 <floor+0x44>
 800c01e:	2c00      	cmp	r4, #0
 800c020:	bfbe      	ittt	lt
 800c022:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c026:	fa43 f606 	asrlt.w	r6, r3, r6
 800c02a:	19a4      	addlt	r4, r4, r6
 800c02c:	2500      	movs	r5, #0
 800c02e:	ea24 0408 	bic.w	r4, r4, r8
 800c032:	e7df      	b.n	800bff4 <floor+0x44>
 800c034:	2e33      	cmp	r6, #51	; 0x33
 800c036:	dd0a      	ble.n	800c04e <floor+0x9e>
 800c038:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c03c:	d103      	bne.n	800c046 <floor+0x96>
 800c03e:	f7f4 f895 	bl	800016c <__adddf3>
 800c042:	4607      	mov	r7, r0
 800c044:	460b      	mov	r3, r1
 800c046:	4638      	mov	r0, r7
 800c048:	4619      	mov	r1, r3
 800c04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c04e:	f04f 32ff 	mov.w	r2, #4294967295
 800c052:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c056:	fa22 f808 	lsr.w	r8, r2, r8
 800c05a:	ea18 0f00 	tst.w	r8, r0
 800c05e:	d0f2      	beq.n	800c046 <floor+0x96>
 800c060:	a30f      	add	r3, pc, #60	; (adr r3, 800c0a0 <floor+0xf0>)
 800c062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c066:	f7f4 f881 	bl	800016c <__adddf3>
 800c06a:	2200      	movs	r2, #0
 800c06c:	2300      	movs	r3, #0
 800c06e:	f7f4 fcc3 	bl	80009f8 <__aeabi_dcmpgt>
 800c072:	2800      	cmp	r0, #0
 800c074:	d0be      	beq.n	800bff4 <floor+0x44>
 800c076:	2c00      	cmp	r4, #0
 800c078:	da02      	bge.n	800c080 <floor+0xd0>
 800c07a:	2e14      	cmp	r6, #20
 800c07c:	d103      	bne.n	800c086 <floor+0xd6>
 800c07e:	3401      	adds	r4, #1
 800c080:	ea25 0508 	bic.w	r5, r5, r8
 800c084:	e7b6      	b.n	800bff4 <floor+0x44>
 800c086:	2301      	movs	r3, #1
 800c088:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c08c:	fa03 f606 	lsl.w	r6, r3, r6
 800c090:	4435      	add	r5, r6
 800c092:	42bd      	cmp	r5, r7
 800c094:	bf38      	it	cc
 800c096:	18e4      	addcc	r4, r4, r3
 800c098:	e7f2      	b.n	800c080 <floor+0xd0>
 800c09a:	2500      	movs	r5, #0
 800c09c:	462c      	mov	r4, r5
 800c09e:	e7a9      	b.n	800bff4 <floor+0x44>
 800c0a0:	8800759c 	.word	0x8800759c
 800c0a4:	7e37e43c 	.word	0x7e37e43c
 800c0a8:	bff00000 	.word	0xbff00000
 800c0ac:	000fffff 	.word	0x000fffff

0800c0b0 <rint>:
 800c0b0:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800c0b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0b6:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800c0ba:	2f13      	cmp	r7, #19
 800c0bc:	4602      	mov	r2, r0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	460c      	mov	r4, r1
 800c0c2:	4605      	mov	r5, r0
 800c0c4:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800c0c8:	dc59      	bgt.n	800c17e <rint+0xce>
 800c0ca:	2f00      	cmp	r7, #0
 800c0cc:	da2a      	bge.n	800c124 <rint+0x74>
 800c0ce:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c0d2:	4301      	orrs	r1, r0
 800c0d4:	d022      	beq.n	800c11c <rint+0x6c>
 800c0d6:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800c0da:	4301      	orrs	r1, r0
 800c0dc:	424d      	negs	r5, r1
 800c0de:	430d      	orrs	r5, r1
 800c0e0:	4936      	ldr	r1, [pc, #216]	; (800c1bc <rint+0x10c>)
 800c0e2:	0c5c      	lsrs	r4, r3, #17
 800c0e4:	0b2d      	lsrs	r5, r5, #12
 800c0e6:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800c0ea:	0464      	lsls	r4, r4, #17
 800c0ec:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c0f0:	ea45 0304 	orr.w	r3, r5, r4
 800c0f4:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	4629      	mov	r1, r5
 800c0fc:	f7f4 f836 	bl	800016c <__adddf3>
 800c100:	e9cd 0100 	strd	r0, r1, [sp]
 800c104:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c108:	462b      	mov	r3, r5
 800c10a:	4622      	mov	r2, r4
 800c10c:	f7f4 f82c 	bl	8000168 <__aeabi_dsub>
 800c110:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c114:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800c118:	4602      	mov	r2, r0
 800c11a:	460b      	mov	r3, r1
 800c11c:	4610      	mov	r0, r2
 800c11e:	4619      	mov	r1, r3
 800c120:	b003      	add	sp, #12
 800c122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c124:	4926      	ldr	r1, [pc, #152]	; (800c1c0 <rint+0x110>)
 800c126:	4139      	asrs	r1, r7
 800c128:	ea03 0001 	and.w	r0, r3, r1
 800c12c:	4310      	orrs	r0, r2
 800c12e:	d0f5      	beq.n	800c11c <rint+0x6c>
 800c130:	084b      	lsrs	r3, r1, #1
 800c132:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800c136:	ea52 0501 	orrs.w	r5, r2, r1
 800c13a:	d00c      	beq.n	800c156 <rint+0xa6>
 800c13c:	ea24 0303 	bic.w	r3, r4, r3
 800c140:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800c144:	2f13      	cmp	r7, #19
 800c146:	bf0c      	ite	eq
 800c148:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800c14c:	2500      	movne	r5, #0
 800c14e:	fa44 f707 	asr.w	r7, r4, r7
 800c152:	ea43 0407 	orr.w	r4, r3, r7
 800c156:	4919      	ldr	r1, [pc, #100]	; (800c1bc <rint+0x10c>)
 800c158:	4623      	mov	r3, r4
 800c15a:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800c15e:	462a      	mov	r2, r5
 800c160:	e9d6 4500 	ldrd	r4, r5, [r6]
 800c164:	4620      	mov	r0, r4
 800c166:	4629      	mov	r1, r5
 800c168:	f7f4 f800 	bl	800016c <__adddf3>
 800c16c:	e9cd 0100 	strd	r0, r1, [sp]
 800c170:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c174:	4622      	mov	r2, r4
 800c176:	462b      	mov	r3, r5
 800c178:	f7f3 fff6 	bl	8000168 <__aeabi_dsub>
 800c17c:	e7cc      	b.n	800c118 <rint+0x68>
 800c17e:	2f33      	cmp	r7, #51	; 0x33
 800c180:	dd05      	ble.n	800c18e <rint+0xde>
 800c182:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800c186:	d1c9      	bne.n	800c11c <rint+0x6c>
 800c188:	f7f3 fff0 	bl	800016c <__adddf3>
 800c18c:	e7c4      	b.n	800c118 <rint+0x68>
 800c18e:	f04f 31ff 	mov.w	r1, #4294967295
 800c192:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800c196:	fa21 f10c 	lsr.w	r1, r1, ip
 800c19a:	4208      	tst	r0, r1
 800c19c:	d0be      	beq.n	800c11c <rint+0x6c>
 800c19e:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800c1a2:	bf18      	it	ne
 800c1a4:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800c1a8:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800c1ac:	bf1e      	ittt	ne
 800c1ae:	ea20 0303 	bicne.w	r3, r0, r3
 800c1b2:	fa45 fc0c 	asrne.w	ip, r5, ip
 800c1b6:	ea43 050c 	orrne.w	r5, r3, ip
 800c1ba:	e7cc      	b.n	800c156 <rint+0xa6>
 800c1bc:	0800c978 	.word	0x0800c978
 800c1c0:	000fffff 	.word	0x000fffff
 800c1c4:	00000000 	.word	0x00000000

0800c1c8 <scalbn>:
 800c1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ca:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	460d      	mov	r5, r1
 800c1d2:	4617      	mov	r7, r2
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	b996      	cbnz	r6, 800c1fe <scalbn+0x36>
 800c1d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c1dc:	4303      	orrs	r3, r0
 800c1de:	d039      	beq.n	800c254 <scalbn+0x8c>
 800c1e0:	4b35      	ldr	r3, [pc, #212]	; (800c2b8 <scalbn+0xf0>)
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f7f4 f978 	bl	80004d8 <__aeabi_dmul>
 800c1e8:	4b34      	ldr	r3, [pc, #208]	; (800c2bc <scalbn+0xf4>)
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	429f      	cmp	r7, r3
 800c1ee:	460d      	mov	r5, r1
 800c1f0:	da0f      	bge.n	800c212 <scalbn+0x4a>
 800c1f2:	a32d      	add	r3, pc, #180	; (adr r3, 800c2a8 <scalbn+0xe0>)
 800c1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f8:	f7f4 f96e 	bl	80004d8 <__aeabi_dmul>
 800c1fc:	e006      	b.n	800c20c <scalbn+0x44>
 800c1fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c202:	4296      	cmp	r6, r2
 800c204:	d10a      	bne.n	800c21c <scalbn+0x54>
 800c206:	4602      	mov	r2, r0
 800c208:	f7f3 ffb0 	bl	800016c <__adddf3>
 800c20c:	4604      	mov	r4, r0
 800c20e:	460d      	mov	r5, r1
 800c210:	e020      	b.n	800c254 <scalbn+0x8c>
 800c212:	460b      	mov	r3, r1
 800c214:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c218:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800c21c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800c220:	19b9      	adds	r1, r7, r6
 800c222:	4291      	cmp	r1, r2
 800c224:	dd0e      	ble.n	800c244 <scalbn+0x7c>
 800c226:	a322      	add	r3, pc, #136	; (adr r3, 800c2b0 <scalbn+0xe8>)
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c230:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c234:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c238:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c23c:	4820      	ldr	r0, [pc, #128]	; (800c2c0 <scalbn+0xf8>)
 800c23e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c242:	e7d9      	b.n	800c1f8 <scalbn+0x30>
 800c244:	2900      	cmp	r1, #0
 800c246:	dd08      	ble.n	800c25a <scalbn+0x92>
 800c248:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c24c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c250:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c254:	4620      	mov	r0, r4
 800c256:	4629      	mov	r1, r5
 800c258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c25a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800c25e:	da16      	bge.n	800c28e <scalbn+0xc6>
 800c260:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c264:	429f      	cmp	r7, r3
 800c266:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800c26a:	dd08      	ble.n	800c27e <scalbn+0xb6>
 800c26c:	4c15      	ldr	r4, [pc, #84]	; (800c2c4 <scalbn+0xfc>)
 800c26e:	4814      	ldr	r0, [pc, #80]	; (800c2c0 <scalbn+0xf8>)
 800c270:	f363 74df 	bfi	r4, r3, #31, #1
 800c274:	a30e      	add	r3, pc, #56	; (adr r3, 800c2b0 <scalbn+0xe8>)
 800c276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27a:	4621      	mov	r1, r4
 800c27c:	e7bc      	b.n	800c1f8 <scalbn+0x30>
 800c27e:	4c12      	ldr	r4, [pc, #72]	; (800c2c8 <scalbn+0x100>)
 800c280:	4812      	ldr	r0, [pc, #72]	; (800c2cc <scalbn+0x104>)
 800c282:	f363 74df 	bfi	r4, r3, #31, #1
 800c286:	a308      	add	r3, pc, #32	; (adr r3, 800c2a8 <scalbn+0xe0>)
 800c288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28c:	e7f5      	b.n	800c27a <scalbn+0xb2>
 800c28e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c292:	3136      	adds	r1, #54	; 0x36
 800c294:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c298:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c29c:	4620      	mov	r0, r4
 800c29e:	4629      	mov	r1, r5
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	4b0b      	ldr	r3, [pc, #44]	; (800c2d0 <scalbn+0x108>)
 800c2a4:	e7a8      	b.n	800c1f8 <scalbn+0x30>
 800c2a6:	bf00      	nop
 800c2a8:	c2f8f359 	.word	0xc2f8f359
 800c2ac:	01a56e1f 	.word	0x01a56e1f
 800c2b0:	8800759c 	.word	0x8800759c
 800c2b4:	7e37e43c 	.word	0x7e37e43c
 800c2b8:	43500000 	.word	0x43500000
 800c2bc:	ffff3cb0 	.word	0xffff3cb0
 800c2c0:	8800759c 	.word	0x8800759c
 800c2c4:	7e37e43c 	.word	0x7e37e43c
 800c2c8:	01a56e1f 	.word	0x01a56e1f
 800c2cc:	c2f8f359 	.word	0xc2f8f359
 800c2d0:	3c900000 	.word	0x3c900000

0800c2d4 <_init>:
 800c2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d6:	bf00      	nop
 800c2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2da:	bc08      	pop	{r3}
 800c2dc:	469e      	mov	lr, r3
 800c2de:	4770      	bx	lr

0800c2e0 <_fini>:
 800c2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e2:	bf00      	nop
 800c2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2e6:	bc08      	pop	{r3}
 800c2e8:	469e      	mov	lr, r3
 800c2ea:	4770      	bx	lr
