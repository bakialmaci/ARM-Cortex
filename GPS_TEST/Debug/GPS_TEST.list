
GPS_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  080073b8  080073b8  000173b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078a4  080078a4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080078a4  080078a4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078a4  080078a4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078a4  080078a4  000178a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078a8  080078a8  000178a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080078ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001e0  08007a8c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08007a8c  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009484  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e2a  00000000  00000000  0002968d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0002b4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000698  00000000  00000000  0002bc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018436  00000000  00000000  0002c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000919c  00000000  00000000  00044716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e65  00000000  00000000  0004d8b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1717  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031e0  00000000  00000000  000d176c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080073a0 	.word	0x080073a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080073a0 	.word	0x080073a0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	460c      	mov	r4, r1
 8000b6c:	4605      	mov	r5, r0
 8000b6e:	4621      	mov	r1, r4
 8000b70:	4628      	mov	r0, r5
 8000b72:	2200      	movs	r2, #0
 8000b74:	2300      	movs	r3, #0
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <GpsToDecimalDegrees>:
void GPS_Init(void);
char *strtok_fr (char *s, char delim, char **save_ptr);
char *strtok_f (char *s, char delim);

/* Main Code */
float GpsToDecimalDegrees(char* nmeaPos, char quadrant){
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	70fb      	strb	r3, [r7, #3]
	float v= 0;
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
	if(strlen(nmeaPos)>5){
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fab0 	bl	8000150 <strlen>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b05      	cmp	r3, #5
 8000bf4:	d944      	bls.n	8000c80 <GpsToDecimalDegrees+0xa8>
		char integerPart[3+1];
		int digitCount= (nmeaPos[4]=='.' ? 2 : 3);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b2e      	cmp	r3, #46	; 0x2e
 8000bfe:	d101      	bne.n	8000c04 <GpsToDecimalDegrees+0x2c>
 8000c00:	2302      	movs	r3, #2
 8000c02:	e000      	b.n	8000c06 <GpsToDecimalDegrees+0x2e>
 8000c04:	2303      	movs	r3, #3
 8000c06:	613b      	str	r3, [r7, #16]
		memcpy(integerPart, nmeaPos, digitCount);
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f001 ff89 	bl	8002b28 <memcpy>
		integerPart[digitCount]= 0;
 8000c16:	f107 020c 	add.w	r2, r7, #12
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
		nmeaPos+= digitCount;
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	607b      	str	r3, [r7, #4]
		v= atoi(integerPart) + atof(nmeaPos)/60.;
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 ff4b 	bl	8002aca <atoi>
 8000c34:	4603      	mov	r3, r0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fbe4 	bl	8000404 <__aeabi_i2d>
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	460d      	mov	r5, r1
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f001 ff3f 	bl	8002ac4 <atof>
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <GpsToDecimalDegrees+0xb4>)
 8000c4c:	f7ff fd6e 	bl	800072c <__aeabi_ddiv>
 8000c50:	4602      	mov	r2, r0
 8000c52:	460b      	mov	r3, r1
 8000c54:	4620      	mov	r0, r4
 8000c56:	4629      	mov	r1, r5
 8000c58:	f7ff fa88 	bl	800016c <__adddf3>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4610      	mov	r0, r2
 8000c62:	4619      	mov	r1, r3
 8000c64:	f7ff ff30 	bl	8000ac8 <__aeabi_d2f>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	617b      	str	r3, [r7, #20]
		if(quadrant=='W' || quadrant=='S')
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	2b57      	cmp	r3, #87	; 0x57
 8000c70:	d002      	beq.n	8000c78 <GpsToDecimalDegrees+0xa0>
 8000c72:	78fb      	ldrb	r3, [r7, #3]
 8000c74:	2b53      	cmp	r3, #83	; 0x53
 8000c76:	d103      	bne.n	8000c80 <GpsToDecimalDegrees+0xa8>
		  v= -v;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8000c7e:	617b      	str	r3, [r7, #20]
	}
	return v;
 8000c80:	697b      	ldr	r3, [r7, #20]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bdb0      	pop	{r4, r5, r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	404e0000 	.word	0x404e0000

08000c90 <GPS_Init>:

void GPS_Init(void){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	GPS.rxIndex=0;
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <GPS_Init+0x1c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);	
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4904      	ldr	r1, [pc, #16]	; (8000cb0 <GPS_Init+0x20>)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <GPS_Init+0x24>)
 8000ca2:	f001 fc02 	bl	80024aa <HAL_UART_Receive_IT>
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000210 	.word	0x20000210
 8000cb0:	20000312 	.word	0x20000312
 8000cb4:	20000398 	.word	0x20000398

08000cb8 <GPS_CallBack>:

void GPS_CallBack(void){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 8000cbc:	f000 fc7c 	bl	80015b8 <HAL_GetTick>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <GPS_CallBack+0x4c>)
 8000cc4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	if(GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <GPS_CallBack+0x4c>)
 8000cca:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000cce:	2bfd      	cmp	r3, #253	; 0xfd
 8000cd0:	d810      	bhi.n	8000cf4 <GPS_CallBack+0x3c>
	{
		GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <GPS_CallBack+0x4c>)
 8000cd4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <GPS_CallBack+0x4c>)
 8000cdc:	f893 1102 	ldrb.w	r1, [r3, #258]	; 0x102
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <GPS_CallBack+0x4c>)
 8000ce2:	5499      	strb	r1, [r3, r2]
		GPS.rxIndex++;
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <GPS_CallBack+0x4c>)
 8000ce6:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000cea:	3301      	adds	r3, #1
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <GPS_CallBack+0x4c>)
 8000cf0:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	}
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4904      	ldr	r1, [pc, #16]	; (8000d08 <GPS_CallBack+0x50>)
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <GPS_CallBack+0x54>)
 8000cfa:	f001 fbd6 	bl	80024aa <HAL_UART_Receive_IT>
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000210 	.word	0x20000210
 8000d08:	20000312 	.word	0x20000312
 8000d0c:	20000398 	.word	0x20000398

08000d10 <strtok_fr>:

char *strtok_fr (char *s, char delim, char **save_ptr){
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	72fb      	strb	r3, [r7, #11]
    char *tail;
    char c;
    if (s == NULL)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <strtok_fr+0x1a>
        s = *save_ptr;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60fb      	str	r3, [r7, #12]
    tail = s;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	617b      	str	r3, [r7, #20]
    if ((c = *tail) == '\0') {
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	74fb      	strb	r3, [r7, #19]
 8000d34:	7cfb      	ldrb	r3, [r7, #19]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d102      	bne.n	8000d40 <strtok_fr+0x30>
        s = NULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	e012      	b.n	8000d66 <strtok_fr+0x56>
    }
    else {
        do {
            if (c == delim) {
 8000d40:	7cfa      	ldrb	r2, [r7, #19]
 8000d42:	7afb      	ldrb	r3, [r7, #11]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d105      	bne.n	8000d54 <strtok_fr+0x44>
                *tail++ = '\0';
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	617a      	str	r2, [r7, #20]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
                break;
 8000d52:	e008      	b.n	8000d66 <strtok_fr+0x56>
           }
        }while ((c = *++tail) != '\0');
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	3301      	adds	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	74fb      	strb	r3, [r7, #19]
 8000d60:	7cfb      	ldrb	r3, [r7, #19]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1ec      	bne.n	8000d40 <strtok_fr+0x30>
    }
    *save_ptr = tail;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	601a      	str	r2, [r3, #0]
    return s;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	371c      	adds	r7, #28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <strtok_f>:

char *strtok_f (char *s, char delim)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	70fb      	strb	r3, [r7, #3]
    static char *save_ptr;
    return strtok_fr (s, delim, &save_ptr);
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <strtok_f+0x24>)
 8000d88:	4619      	mov	r1, r3
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffc0 	bl	8000d10 <strtok_fr>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200001fc 	.word	0x200001fc

08000da0 <GPS_Process>:

void GPS_Process(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	//$GPGGA,031956,2218.2035,N,11410.7595,E,1,04,3,9,005.9,M,-001.3,M,,*51
	//$GPRMC,081836,A,3751.65,S,14507.36,E,000.0,360.0,130998,011.3,E*62
	if( (HAL_GetTick()-GPS.LastTime>50) && (GPS.rxIndex>0)){
 8000da4:	f000 fc08 	bl	80015b8 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	4b73      	ldr	r3, [pc, #460]	; (8000f78 <GPS_Process+0x1d8>)
 8000dac:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b32      	cmp	r3, #50	; 0x32
 8000db4:	f240 80d5 	bls.w	8000f62 <GPS_Process+0x1c2>
 8000db8:	4b6f      	ldr	r3, [pc, #444]	; (8000f78 <GPS_Process+0x1d8>)
 8000dba:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 80cf 	beq.w	8000f62 <GPS_Process+0x1c2>

		str_gpgga = strstr((char*)GPS.rxBuffer,"$GPGGA,");
 8000dc4:	496d      	ldr	r1, [pc, #436]	; (8000f7c <GPS_Process+0x1dc>)
 8000dc6:	486c      	ldr	r0, [pc, #432]	; (8000f78 <GPS_Process+0x1d8>)
 8000dc8:	f002 fd5a 	bl	8003880 <strstr>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4a6c      	ldr	r2, [pc, #432]	; (8000f80 <GPS_Process+0x1e0>)
 8000dd0:	6013      	str	r3, [r2, #0]
		str_gprmc = strstr((char*)GPS.rxBuffer,"$GPRMC,");
 8000dd2:	496c      	ldr	r1, [pc, #432]	; (8000f84 <GPS_Process+0x1e4>)
 8000dd4:	4868      	ldr	r0, [pc, #416]	; (8000f78 <GPS_Process+0x1d8>)
 8000dd6:	f002 fd53 	bl	8003880 <strstr>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a6a      	ldr	r2, [pc, #424]	; (8000f88 <GPS_Process+0x1e8>)
 8000dde:	6013      	str	r3, [r2, #0]

		if(str_gpgga != NULL && str_gprmc != NULL){
 8000de0:	4b67      	ldr	r3, [pc, #412]	; (8000f80 <GPS_Process+0x1e0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 80b2 	beq.w	8000f4e <GPS_Process+0x1ae>
 8000dea:	4b67      	ldr	r3, [pc, #412]	; (8000f88 <GPS_Process+0x1e8>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 80ad 	beq.w	8000f4e <GPS_Process+0x1ae>
			/* GPGGA Parse Section */
		    GPS.GPGGA.Message_ID = strtok_f(str_gpgga,',');
 8000df4:	4b62      	ldr	r3, [pc, #392]	; (8000f80 <GPS_Process+0x1e0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	212c      	movs	r1, #44	; 0x2c
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ffbc 	bl	8000d78 <strtok_f>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4a5d      	ldr	r2, [pc, #372]	; (8000f78 <GPS_Process+0x1d8>)
 8000e04:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
		    GPS.GPGGA.Time = strtok_f(NULL,',');
 8000e08:	212c      	movs	r1, #44	; 0x2c
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff ffb4 	bl	8000d78 <strtok_f>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4a59      	ldr	r2, [pc, #356]	; (8000f78 <GPS_Process+0x1d8>)
 8000e14:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
		    GPS.GPGGA.Raw_Latitude = strtok_f(NULL,',');
 8000e18:	212c      	movs	r1, #44	; 0x2c
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff ffac 	bl	8000d78 <strtok_f>
 8000e20:	4603      	mov	r3, r0
 8000e22:	4a55      	ldr	r2, [pc, #340]	; (8000f78 <GPS_Process+0x1d8>)
 8000e24:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		    GPS.GPGGA.N_S = strtok_f(NULL,',');
 8000e28:	212c      	movs	r1, #44	; 0x2c
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff ffa4 	bl	8000d78 <strtok_f>
 8000e30:	4603      	mov	r3, r0
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b50      	ldr	r3, [pc, #320]	; (8000f78 <GPS_Process+0x1d8>)
 8000e36:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		    GPS.GPGGA.Raw_Longitude = strtok_f(NULL,',');
 8000e3a:	212c      	movs	r1, #44	; 0x2c
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff ff9b 	bl	8000d78 <strtok_f>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4a4c      	ldr	r2, [pc, #304]	; (8000f78 <GPS_Process+0x1d8>)
 8000e46:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
		    GPS.GPGGA.E_W = strtok_f(NULL,',');
 8000e4a:	212c      	movs	r1, #44	; 0x2c
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f7ff ff93 	bl	8000d78 <strtok_f>
 8000e52:	4603      	mov	r3, r0
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4b48      	ldr	r3, [pc, #288]	; (8000f78 <GPS_Process+0x1d8>)
 8000e58:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120

		    for(i = 3; i > 0; i--)
 8000e5c:	4b4b      	ldr	r3, [pc, #300]	; (8000f8c <GPS_Process+0x1ec>)
 8000e5e:	2203      	movs	r2, #3
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	e00c      	b.n	8000e7e <GPS_Process+0xde>
		    	GPS.GPGGA.tmp_misc = strtok_f(NULL,',');
 8000e64:	212c      	movs	r1, #44	; 0x2c
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff ff86 	bl	8000d78 <strtok_f>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a42      	ldr	r2, [pc, #264]	; (8000f78 <GPS_Process+0x1d8>)
 8000e70:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
		    for(i = 3; i > 0; i--)
 8000e74:	4b45      	ldr	r3, [pc, #276]	; (8000f8c <GPS_Process+0x1ec>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	4a44      	ldr	r2, [pc, #272]	; (8000f8c <GPS_Process+0x1ec>)
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	4b43      	ldr	r3, [pc, #268]	; (8000f8c <GPS_Process+0x1ec>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	dcee      	bgt.n	8000e64 <GPS_Process+0xc4>

		    GPS.GPGGA.Altitude = atof(strtok_f(NULL,','));
 8000e86:	212c      	movs	r1, #44	; 0x2c
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff ff75 	bl	8000d78 <strtok_f>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f001 fe17 	bl	8002ac4 <atof>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f7ff fe13 	bl	8000ac8 <__aeabi_d2f>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4a34      	ldr	r2, [pc, #208]	; (8000f78 <GPS_Process+0x1d8>)
 8000ea6:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
		    GPS.GPGGA.Latitude = GpsToDecimalDegrees(GPS.GPGGA.Raw_Latitude, GPS.GPGGA.N_S);
 8000eaa:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <GPS_Process+0x1d8>)
 8000eac:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000eb0:	4a31      	ldr	r2, [pc, #196]	; (8000f78 <GPS_Process+0x1d8>)
 8000eb2:	f892 2118 	ldrb.w	r2, [r2, #280]	; 0x118
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fe8d 	bl	8000bd8 <GpsToDecimalDegrees>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4a2d      	ldr	r2, [pc, #180]	; (8000f78 <GPS_Process+0x1d8>)
 8000ec2:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
		    GPS.GPGGA.Longitude = GpsToDecimalDegrees(GPS.GPGGA.Raw_Longitude, GPS.GPGGA.E_W);
 8000ec6:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <GPS_Process+0x1d8>)
 8000ec8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8000ecc:	4a2a      	ldr	r2, [pc, #168]	; (8000f78 <GPS_Process+0x1d8>)
 8000ece:	f892 2120 	ldrb.w	r2, [r2, #288]	; 0x120
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fe7f 	bl	8000bd8 <GpsToDecimalDegrees>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4a26      	ldr	r2, [pc, #152]	; (8000f78 <GPS_Process+0x1d8>)
 8000ede:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

		    /* GPRMC Parse Section */
		    GPS.GPRMC.Message_ID = strtok_f(str_gprmc,',');
 8000ee2:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <GPS_Process+0x1e8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	212c      	movs	r1, #44	; 0x2c
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff45 	bl	8000d78 <strtok_f>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <GPS_Process+0x1d8>)
 8000ef2:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
		    for(i = 6; i > 0; i--)
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <GPS_Process+0x1ec>)
 8000ef8:	2206      	movs	r2, #6
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	e00c      	b.n	8000f18 <GPS_Process+0x178>
		    	GPS.GPRMC.tmp_misc = strtok_f(NULL,',');
 8000efe:	212c      	movs	r1, #44	; 0x2c
 8000f00:	2000      	movs	r0, #0
 8000f02:	f7ff ff39 	bl	8000d78 <strtok_f>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <GPS_Process+0x1d8>)
 8000f0a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
		    for(i = 6; i > 0; i--)
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <GPS_Process+0x1ec>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <GPS_Process+0x1ec>)
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <GPS_Process+0x1ec>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	dcee      	bgt.n	8000efe <GPS_Process+0x15e>

		    GPS.GPRMC.Speed_ms = atof(strtok_f(NULL,',')) * 0.514; //knots to m/s conversion.
 8000f20:	212c      	movs	r1, #44	; 0x2c
 8000f22:	2000      	movs	r0, #0
 8000f24:	f7ff ff28 	bl	8000d78 <strtok_f>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fdca 	bl	8002ac4 <atof>
 8000f30:	a30f      	add	r3, pc, #60	; (adr r3, 8000f70 <GPS_Process+0x1d0>)
 8000f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f36:	f7ff facf 	bl	80004d8 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	f7ff fdc1 	bl	8000ac8 <__aeabi_d2f>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <GPS_Process+0x1d8>)
 8000f4a:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
		}		
		memset(GPS.rxBuffer,0,sizeof(GPS.rxBuffer));
 8000f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f52:	2100      	movs	r1, #0
 8000f54:	4808      	ldr	r0, [pc, #32]	; (8000f78 <GPS_Process+0x1d8>)
 8000f56:	f001 fdf5 	bl	8002b44 <memset>
		GPS.rxIndex=0;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <GPS_Process+0x1d8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	}
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 8000f62:	2201      	movs	r2, #1
 8000f64:	490a      	ldr	r1, [pc, #40]	; (8000f90 <GPS_Process+0x1f0>)
 8000f66:	480b      	ldr	r0, [pc, #44]	; (8000f94 <GPS_Process+0x1f4>)
 8000f68:	f001 fa9f 	bl	80024aa <HAL_UART_Receive_IT>
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20c49ba6 	.word	0x20c49ba6
 8000f74:	3fe072b0 	.word	0x3fe072b0
 8000f78:	20000210 	.word	0x20000210
 8000f7c:	080073b8 	.word	0x080073b8
 8000f80:	20000354 	.word	0x20000354
 8000f84:	080073c0 	.word	0x080073c0
 8000f88:	2000020c 	.word	0x2000020c
 8000f8c:	20000350 	.word	0x20000350
 8000f90:	20000312 	.word	0x20000312
 8000f94:	20000398 	.word	0x20000398

08000f98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_GPIO_Init+0x40>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <MX_GPIO_Init+0x40>)
 8000fa4:	f043 0320 	orr.w	r3, r3, #32
 8000fa8:	6193      	str	r3, [r2, #24]
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_GPIO_Init+0x40>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f003 0320 	and.w	r3, r3, #32
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_GPIO_Init+0x40>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <MX_GPIO_Init+0x40>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	6193      	str	r3, [r2, #24]
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <MX_GPIO_Init+0x40>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	40021000 	.word	0x40021000

08000fdc <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPS_CallBack();
 8000fe4:	f7ff fe68 	bl	8000cb8 <GPS_CallBack>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff4:	f000 fa88 	bl	8001508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff8:	f000 f80b 	bl	8001012 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffc:	f7ff ffcc 	bl	8000f98 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001000:	f000 f97c 	bl	80012fc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001004:	f000 f9a4 	bl	8001350 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 8001008:	f7ff fe42 	bl	8000c90 <GPS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GPS_Process();
 800100c:	f7ff fec8 	bl	8000da0 <GPS_Process>
 8001010:	e7fc      	b.n	800100c <main+0x1c>

08001012 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b090      	sub	sp, #64	; 0x40
 8001016:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001018:	f107 0318 	add.w	r3, r7, #24
 800101c:	2228      	movs	r2, #40	; 0x28
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fd8f 	bl	8002b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001034:	2301      	movs	r3, #1
 8001036:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800103c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001042:	2301      	movs	r3, #1
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001046:	2302      	movs	r3, #2
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800104a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800104e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001050:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001054:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001056:	f107 0318 	add.w	r3, r7, #24
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fdbe 	bl	8001bdc <HAL_RCC_OscConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001066:	f000 f819 	bl	800109c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106a:	230f      	movs	r3, #15
 800106c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106e:	2302      	movs	r3, #2
 8001070:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800107a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2102      	movs	r1, #2
 8001084:	4618      	mov	r0, r3
 8001086:	f001 f829 	bl	80020dc <HAL_RCC_ClockConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001090:	f000 f804 	bl	800109c <Error_Handler>
  }
}
 8001094:	bf00      	nop
 8001096:	3740      	adds	r7, #64	; 0x40
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <Error_Handler+0x8>
	...

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_MspInit+0x5c>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <HAL_MspInit+0x5c>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6193      	str	r3, [r2, #24]
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_MspInit+0x5c>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_MspInit+0x5c>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <HAL_MspInit+0x5c>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d0:	61d3      	str	r3, [r2, #28]
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_MspInit+0x5c>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_MspInit+0x60>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_MspInit+0x60>)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	40021000 	.word	0x40021000
 8001108:	40010000 	.word	0x40010000

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <NMI_Handler+0x4>

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr

08001136 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr

0800114e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001152:	f000 fa1f 	bl	8001594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <USART2_IRQHandler+0x10>)
 8001162:	f001 f9f7 	bl	8002554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000398 	.word	0x20000398

08001170 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
	return 1;
 8001174:	2301      	movs	r3, #1
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <_kill>:

int _kill(int pid, int sig)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001188:	f001 fca4 	bl	8002ad4 <__errno>
 800118c:	4603      	mov	r3, r0
 800118e:	2216      	movs	r2, #22
 8001190:	601a      	str	r2, [r3, #0]
	return -1;
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <_exit>:

void _exit (int status)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011a6:	f04f 31ff 	mov.w	r1, #4294967295
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffe7 	bl	800117e <_kill>
	while (1) {}		/* Make sure we hang here */
 80011b0:	e7fe      	b.n	80011b0 <_exit+0x12>

080011b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	e00a      	b.n	80011da <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011c4:	f3af 8000 	nop.w
 80011c8:	4601      	mov	r1, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1c5a      	adds	r2, r3, #1
 80011ce:	60ba      	str	r2, [r7, #8]
 80011d0:	b2ca      	uxtb	r2, r1
 80011d2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	3301      	adds	r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	429a      	cmp	r2, r3
 80011e0:	dbf0      	blt.n	80011c4 <_read+0x12>
	}

return len;
 80011e2:	687b      	ldr	r3, [r7, #4]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	e009      	b.n	8001212 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1c5a      	adds	r2, r3, #1
 8001202:	60ba      	str	r2, [r7, #8]
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3301      	adds	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	429a      	cmp	r2, r3
 8001218:	dbf1      	blt.n	80011fe <_write+0x12>
	}
	return len;
 800121a:	687b      	ldr	r3, [r7, #4]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <_close>:

int _close(int file)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	return -1;
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr

0800123a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800124a:	605a      	str	r2, [r3, #4]
	return 0;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <_isatty>:

int _isatty(int file)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	return 1;
 8001260:	2301      	movs	r3, #1
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
	return 0;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800128c:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <_sbrk+0x5c>)
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <_sbrk+0x60>)
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <_sbrk+0x64>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <_sbrk+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d207      	bcs.n	80012c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b4:	f001 fc0e 	bl	8002ad4 <__errno>
 80012b8:	4603      	mov	r3, r0
 80012ba:	220c      	movs	r2, #12
 80012bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e009      	b.n	80012d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <_sbrk+0x64>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <_sbrk+0x64>)
 80012d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012d6:	68fb      	ldr	r3, [r7, #12]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20005000 	.word	0x20005000
 80012e4:	00000400 	.word	0x00000400
 80012e8:	20000200 	.word	0x20000200
 80012ec:	200003f0 	.word	0x200003f0

080012f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <MX_USART1_UART_Init+0x50>)
 8001304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001334:	f001 f86c 	bl	8002410 <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800133e:	f7ff fead 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000358 	.word	0x20000358
 800134c:	40013800 	.word	0x40013800

08001350 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <MX_USART2_UART_Init+0x50>)
 8001358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_USART2_UART_Init+0x4c>)
 800135c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_USART2_UART_Init+0x4c>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001376:	220c      	movs	r2, #12
 8001378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_USART2_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001388:	f001 f842 	bl	8002410 <HAL_UART_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001392:	f7ff fe83 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000398 	.word	0x20000398
 80013a0:	40004400 	.word	0x40004400

080013a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0318 	add.w	r3, r7, #24
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a3b      	ldr	r2, [pc, #236]	; (80014ac <HAL_UART_MspInit+0x108>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d132      	bne.n	800142a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013c4:	4b3a      	ldr	r3, [pc, #232]	; (80014b0 <HAL_UART_MspInit+0x10c>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a39      	ldr	r2, [pc, #228]	; (80014b0 <HAL_UART_MspInit+0x10c>)
 80013ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <HAL_UART_MspInit+0x10c>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	4b34      	ldr	r3, [pc, #208]	; (80014b0 <HAL_UART_MspInit+0x10c>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a33      	ldr	r2, [pc, #204]	; (80014b0 <HAL_UART_MspInit+0x10c>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <HAL_UART_MspInit+0x10c>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	f107 0318 	add.w	r3, r7, #24
 8001406:	4619      	mov	r1, r3
 8001408:	482a      	ldr	r0, [pc, #168]	; (80014b4 <HAL_UART_MspInit+0x110>)
 800140a:	f000 fa63 	bl	80018d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800140e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0318 	add.w	r3, r7, #24
 8001420:	4619      	mov	r1, r3
 8001422:	4824      	ldr	r0, [pc, #144]	; (80014b4 <HAL_UART_MspInit+0x110>)
 8001424:	f000 fa56 	bl	80018d4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001428:	e03c      	b.n	80014a4 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a22      	ldr	r2, [pc, #136]	; (80014b8 <HAL_UART_MspInit+0x114>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d137      	bne.n	80014a4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <HAL_UART_MspInit+0x10c>)
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	4a1d      	ldr	r2, [pc, #116]	; (80014b0 <HAL_UART_MspInit+0x10c>)
 800143a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143e:	61d3      	str	r3, [r2, #28]
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_UART_MspInit+0x10c>)
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_UART_MspInit+0x10c>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a17      	ldr	r2, [pc, #92]	; (80014b0 <HAL_UART_MspInit+0x10c>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_UART_MspInit+0x10c>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001464:	2304      	movs	r3, #4
 8001466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 0318 	add.w	r3, r7, #24
 8001474:	4619      	mov	r1, r3
 8001476:	480f      	ldr	r0, [pc, #60]	; (80014b4 <HAL_UART_MspInit+0x110>)
 8001478:	f000 fa2c 	bl	80018d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800147c:	2308      	movs	r3, #8
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	f107 0318 	add.w	r3, r7, #24
 800148c:	4619      	mov	r1, r3
 800148e:	4809      	ldr	r0, [pc, #36]	; (80014b4 <HAL_UART_MspInit+0x110>)
 8001490:	f000 fa20 	bl	80018d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	2026      	movs	r0, #38	; 0x26
 800149a:	f000 f96e 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800149e:	2026      	movs	r0, #38	; 0x26
 80014a0:	f000 f987 	bl	80017b2 <HAL_NVIC_EnableIRQ>
}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40013800 	.word	0x40013800
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010800 	.word	0x40010800
 80014b8:	40004400 	.word	0x40004400

080014bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80014bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80014be:	e003      	b.n	80014c8 <LoopCopyDataInit>

080014c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80014c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80014c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80014c6:	3104      	adds	r1, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80014c8:	480a      	ldr	r0, [pc, #40]	; (80014f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80014cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80014ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80014d0:	d3f6      	bcc.n	80014c0 <CopyDataInit>
  ldr r2, =_sbss
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80014d4:	e002      	b.n	80014dc <LoopFillZerobss>

080014d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014d8:	f842 3b04 	str.w	r3, [r2], #4

080014dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80014de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014e0:	d3f9      	bcc.n	80014d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014e2:	f7ff ff05 	bl	80012f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014e6:	f001 fafb 	bl	8002ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ea:	f7ff fd81 	bl	8000ff0 <main>
  bx lr
 80014ee:	4770      	bx	lr
  ldr r3, =_sidata
 80014f0:	080078ac 	.word	0x080078ac
  ldr r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014f8:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80014fc:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001500:	200003ec 	.word	0x200003ec

08001504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC1_2_IRQHandler>
	...

08001508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <HAL_Init+0x28>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_Init+0x28>)
 8001512:	f043 0310 	orr.w	r3, r3, #16
 8001516:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001518:	2003      	movs	r0, #3
 800151a:	f000 f923 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151e:	2000      	movs	r0, #0
 8001520:	f000 f808 	bl	8001534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001524:	f7ff fdc0 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40022000 	.word	0x40022000

08001534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_InitTick+0x54>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_InitTick+0x58>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154a:	fbb3 f3f1 	udiv	r3, r3, r1
 800154e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f000 f93b 	bl	80017ce <HAL_SYSTICK_Config>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e00e      	b.n	8001580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b0f      	cmp	r3, #15
 8001566:	d80a      	bhi.n	800157e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001568:	2200      	movs	r2, #0
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f000 f903 	bl	800177a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001574:	4a06      	ldr	r2, [pc, #24]	; (8001590 <HAL_InitTick+0x5c>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	e000      	b.n	8001580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000000 	.word	0x20000000
 800158c:	20000008 	.word	0x20000008
 8001590:	20000004 	.word	0x20000004

08001594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_IncTick+0x1c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_IncTick+0x20>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <HAL_IncTick+0x20>)
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	20000008 	.word	0x20000008
 80015b4:	200003d8 	.word	0x200003d8

080015b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return uwTick;
 80015bc:	4b02      	ldr	r3, [pc, #8]	; (80015c8 <HAL_GetTick+0x10>)
 80015be:	681b      	ldr	r3, [r3, #0]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	200003d8 	.word	0x200003d8

080015cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db0b      	blt.n	800165a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	f003 021f 	and.w	r2, r3, #31
 8001648:	4906      	ldr	r1, [pc, #24]	; (8001664 <__NVIC_EnableIRQ+0x34>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	2001      	movs	r0, #1
 8001652:	fa00 f202 	lsl.w	r2, r0, r2
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001730:	d301      	bcc.n	8001736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001732:	2301      	movs	r3, #1
 8001734:	e00f      	b.n	8001756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <SysTick_Config+0x40>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173e:	210f      	movs	r1, #15
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f7ff ff90 	bl	8001668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <SysTick_Config+0x40>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <SysTick_Config+0x40>)
 8001750:	2207      	movs	r2, #7
 8001752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff2d 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800178c:	f7ff ff42 	bl	8001614 <__NVIC_GetPriorityGrouping>
 8001790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	6978      	ldr	r0, [r7, #20]
 8001798:	f7ff ff90 	bl	80016bc <NVIC_EncodePriority>
 800179c:	4602      	mov	r2, r0
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff5f 	bl	8001668 <__NVIC_SetPriority>
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff35 	bl	8001630 <__NVIC_EnableIRQ>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ffa2 	bl	8001720 <SysTick_Config>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d005      	beq.n	800180a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2204      	movs	r2, #4
 8001802:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	e051      	b.n	80018ae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 020e 	bic.w	r2, r2, #14
 8001818:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0201 	bic.w	r2, r2, #1
 8001828:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <HAL_DMA_Abort_IT+0xd0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d029      	beq.n	8001888 <HAL_DMA_Abort_IT+0xa0>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a20      	ldr	r2, [pc, #128]	; (80018bc <HAL_DMA_Abort_IT+0xd4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d022      	beq.n	8001884 <HAL_DMA_Abort_IT+0x9c>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1f      	ldr	r2, [pc, #124]	; (80018c0 <HAL_DMA_Abort_IT+0xd8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d01a      	beq.n	800187e <HAL_DMA_Abort_IT+0x96>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a1d      	ldr	r2, [pc, #116]	; (80018c4 <HAL_DMA_Abort_IT+0xdc>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d012      	beq.n	8001878 <HAL_DMA_Abort_IT+0x90>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <HAL_DMA_Abort_IT+0xe0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d00a      	beq.n	8001872 <HAL_DMA_Abort_IT+0x8a>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a1a      	ldr	r2, [pc, #104]	; (80018cc <HAL_DMA_Abort_IT+0xe4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d102      	bne.n	800186c <HAL_DMA_Abort_IT+0x84>
 8001866:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800186a:	e00e      	b.n	800188a <HAL_DMA_Abort_IT+0xa2>
 800186c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001870:	e00b      	b.n	800188a <HAL_DMA_Abort_IT+0xa2>
 8001872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001876:	e008      	b.n	800188a <HAL_DMA_Abort_IT+0xa2>
 8001878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187c:	e005      	b.n	800188a <HAL_DMA_Abort_IT+0xa2>
 800187e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001882:	e002      	b.n	800188a <HAL_DMA_Abort_IT+0xa2>
 8001884:	2310      	movs	r3, #16
 8001886:	e000      	b.n	800188a <HAL_DMA_Abort_IT+0xa2>
 8001888:	2301      	movs	r3, #1
 800188a:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <HAL_DMA_Abort_IT+0xe8>)
 800188c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	4798      	blx	r3
    } 
  }
  return status;
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40020008 	.word	0x40020008
 80018bc:	4002001c 	.word	0x4002001c
 80018c0:	40020030 	.word	0x40020030
 80018c4:	40020044 	.word	0x40020044
 80018c8:	40020058 	.word	0x40020058
 80018cc:	4002006c 	.word	0x4002006c
 80018d0:	40020000 	.word	0x40020000

080018d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b08b      	sub	sp, #44	; 0x2c
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e6:	e169      	b.n	8001bbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018e8:	2201      	movs	r2, #1
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	429a      	cmp	r2, r3
 8001902:	f040 8158 	bne.w	8001bb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4a9a      	ldr	r2, [pc, #616]	; (8001b74 <HAL_GPIO_Init+0x2a0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d05e      	beq.n	80019ce <HAL_GPIO_Init+0xfa>
 8001910:	4a98      	ldr	r2, [pc, #608]	; (8001b74 <HAL_GPIO_Init+0x2a0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d875      	bhi.n	8001a02 <HAL_GPIO_Init+0x12e>
 8001916:	4a98      	ldr	r2, [pc, #608]	; (8001b78 <HAL_GPIO_Init+0x2a4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d058      	beq.n	80019ce <HAL_GPIO_Init+0xfa>
 800191c:	4a96      	ldr	r2, [pc, #600]	; (8001b78 <HAL_GPIO_Init+0x2a4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d86f      	bhi.n	8001a02 <HAL_GPIO_Init+0x12e>
 8001922:	4a96      	ldr	r2, [pc, #600]	; (8001b7c <HAL_GPIO_Init+0x2a8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d052      	beq.n	80019ce <HAL_GPIO_Init+0xfa>
 8001928:	4a94      	ldr	r2, [pc, #592]	; (8001b7c <HAL_GPIO_Init+0x2a8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d869      	bhi.n	8001a02 <HAL_GPIO_Init+0x12e>
 800192e:	4a94      	ldr	r2, [pc, #592]	; (8001b80 <HAL_GPIO_Init+0x2ac>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d04c      	beq.n	80019ce <HAL_GPIO_Init+0xfa>
 8001934:	4a92      	ldr	r2, [pc, #584]	; (8001b80 <HAL_GPIO_Init+0x2ac>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d863      	bhi.n	8001a02 <HAL_GPIO_Init+0x12e>
 800193a:	4a92      	ldr	r2, [pc, #584]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d046      	beq.n	80019ce <HAL_GPIO_Init+0xfa>
 8001940:	4a90      	ldr	r2, [pc, #576]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d85d      	bhi.n	8001a02 <HAL_GPIO_Init+0x12e>
 8001946:	2b12      	cmp	r3, #18
 8001948:	d82a      	bhi.n	80019a0 <HAL_GPIO_Init+0xcc>
 800194a:	2b12      	cmp	r3, #18
 800194c:	d859      	bhi.n	8001a02 <HAL_GPIO_Init+0x12e>
 800194e:	a201      	add	r2, pc, #4	; (adr r2, 8001954 <HAL_GPIO_Init+0x80>)
 8001950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001954:	080019cf 	.word	0x080019cf
 8001958:	080019a9 	.word	0x080019a9
 800195c:	080019bb 	.word	0x080019bb
 8001960:	080019fd 	.word	0x080019fd
 8001964:	08001a03 	.word	0x08001a03
 8001968:	08001a03 	.word	0x08001a03
 800196c:	08001a03 	.word	0x08001a03
 8001970:	08001a03 	.word	0x08001a03
 8001974:	08001a03 	.word	0x08001a03
 8001978:	08001a03 	.word	0x08001a03
 800197c:	08001a03 	.word	0x08001a03
 8001980:	08001a03 	.word	0x08001a03
 8001984:	08001a03 	.word	0x08001a03
 8001988:	08001a03 	.word	0x08001a03
 800198c:	08001a03 	.word	0x08001a03
 8001990:	08001a03 	.word	0x08001a03
 8001994:	08001a03 	.word	0x08001a03
 8001998:	080019b1 	.word	0x080019b1
 800199c:	080019c5 	.word	0x080019c5
 80019a0:	4a79      	ldr	r2, [pc, #484]	; (8001b88 <HAL_GPIO_Init+0x2b4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d013      	beq.n	80019ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019a6:	e02c      	b.n	8001a02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	623b      	str	r3, [r7, #32]
          break;
 80019ae:	e029      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	3304      	adds	r3, #4
 80019b6:	623b      	str	r3, [r7, #32]
          break;
 80019b8:	e024      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	3308      	adds	r3, #8
 80019c0:	623b      	str	r3, [r7, #32]
          break;
 80019c2:	e01f      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	330c      	adds	r3, #12
 80019ca:	623b      	str	r3, [r7, #32]
          break;
 80019cc:	e01a      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d102      	bne.n	80019dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019d6:	2304      	movs	r3, #4
 80019d8:	623b      	str	r3, [r7, #32]
          break;
 80019da:	e013      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d105      	bne.n	80019f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e4:	2308      	movs	r3, #8
 80019e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	611a      	str	r2, [r3, #16]
          break;
 80019ee:	e009      	b.n	8001a04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f0:	2308      	movs	r3, #8
 80019f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	615a      	str	r2, [r3, #20]
          break;
 80019fa:	e003      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
          break;
 8001a00:	e000      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          break;
 8001a02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2bff      	cmp	r3, #255	; 0xff
 8001a08:	d801      	bhi.n	8001a0e <HAL_GPIO_Init+0x13a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	e001      	b.n	8001a12 <HAL_GPIO_Init+0x13e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3304      	adds	r3, #4
 8001a12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2bff      	cmp	r3, #255	; 0xff
 8001a18:	d802      	bhi.n	8001a20 <HAL_GPIO_Init+0x14c>
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	e002      	b.n	8001a26 <HAL_GPIO_Init+0x152>
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	3b08      	subs	r3, #8
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	210f      	movs	r1, #15
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	fa01 f303 	lsl.w	r3, r1, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	401a      	ands	r2, r3
 8001a38:	6a39      	ldr	r1, [r7, #32]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	431a      	orrs	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 80b1 	beq.w	8001bb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a54:	4b4d      	ldr	r3, [pc, #308]	; (8001b8c <HAL_GPIO_Init+0x2b8>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a4c      	ldr	r2, [pc, #304]	; (8001b8c <HAL_GPIO_Init+0x2b8>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b4a      	ldr	r3, [pc, #296]	; (8001b8c <HAL_GPIO_Init+0x2b8>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a6c:	4a48      	ldr	r2, [pc, #288]	; (8001b90 <HAL_GPIO_Init+0x2bc>)
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	089b      	lsrs	r3, r3, #2
 8001a72:	3302      	adds	r3, #2
 8001a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	220f      	movs	r2, #15
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a40      	ldr	r2, [pc, #256]	; (8001b94 <HAL_GPIO_Init+0x2c0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d013      	beq.n	8001ac0 <HAL_GPIO_Init+0x1ec>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a3f      	ldr	r2, [pc, #252]	; (8001b98 <HAL_GPIO_Init+0x2c4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d00d      	beq.n	8001abc <HAL_GPIO_Init+0x1e8>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a3e      	ldr	r2, [pc, #248]	; (8001b9c <HAL_GPIO_Init+0x2c8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d007      	beq.n	8001ab8 <HAL_GPIO_Init+0x1e4>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a3d      	ldr	r2, [pc, #244]	; (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d101      	bne.n	8001ab4 <HAL_GPIO_Init+0x1e0>
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e006      	b.n	8001ac2 <HAL_GPIO_Init+0x1ee>
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	e004      	b.n	8001ac2 <HAL_GPIO_Init+0x1ee>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e002      	b.n	8001ac2 <HAL_GPIO_Init+0x1ee>
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <HAL_GPIO_Init+0x1ee>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac4:	f002 0203 	and.w	r2, r2, #3
 8001ac8:	0092      	lsls	r2, r2, #2
 8001aca:	4093      	lsls	r3, r2
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ad2:	492f      	ldr	r1, [pc, #188]	; (8001b90 <HAL_GPIO_Init+0x2bc>)
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	3302      	adds	r3, #2
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d006      	beq.n	8001afa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001aec:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	492c      	ldr	r1, [pc, #176]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	600b      	str	r3, [r1, #0]
 8001af8:	e006      	b.n	8001b08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001afa:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	4928      	ldr	r1, [pc, #160]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d006      	beq.n	8001b22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b14:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	4922      	ldr	r1, [pc, #136]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
 8001b20:	e006      	b.n	8001b30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b22:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	491e      	ldr	r1, [pc, #120]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	4918      	ldr	r1, [pc, #96]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	608b      	str	r3, [r1, #8]
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	4914      	ldr	r1, [pc, #80]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d021      	beq.n	8001ba8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	490e      	ldr	r1, [pc, #56]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60cb      	str	r3, [r1, #12]
 8001b70:	e021      	b.n	8001bb6 <HAL_GPIO_Init+0x2e2>
 8001b72:	bf00      	nop
 8001b74:	10320000 	.word	0x10320000
 8001b78:	10310000 	.word	0x10310000
 8001b7c:	10220000 	.word	0x10220000
 8001b80:	10210000 	.word	0x10210000
 8001b84:	10120000 	.word	0x10120000
 8001b88:	10110000 	.word	0x10110000
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40010000 	.word	0x40010000
 8001b94:	40010800 	.word	0x40010800
 8001b98:	40010c00 	.word	0x40010c00
 8001b9c:	40011000 	.word	0x40011000
 8001ba0:	40011400 	.word	0x40011400
 8001ba4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_GPIO_Init+0x304>)
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	4909      	ldr	r1, [pc, #36]	; (8001bd8 <HAL_GPIO_Init+0x304>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	3301      	adds	r3, #1
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f47f ae8e 	bne.w	80018e8 <HAL_GPIO_Init+0x14>
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	372c      	adds	r7, #44	; 0x2c
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	40010400 	.word	0x40010400

08001bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e26c      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 8087 	beq.w	8001d0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bfc:	4b92      	ldr	r3, [pc, #584]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d00c      	beq.n	8001c22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c08:	4b8f      	ldr	r3, [pc, #572]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d112      	bne.n	8001c3a <HAL_RCC_OscConfig+0x5e>
 8001c14:	4b8c      	ldr	r3, [pc, #560]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c20:	d10b      	bne.n	8001c3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c22:	4b89      	ldr	r3, [pc, #548]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d06c      	beq.n	8001d08 <HAL_RCC_OscConfig+0x12c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d168      	bne.n	8001d08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e246      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_OscConfig+0x76>
 8001c44:	4b80      	ldr	r3, [pc, #512]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a7f      	ldr	r2, [pc, #508]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	e02e      	b.n	8001cb0 <HAL_RCC_OscConfig+0xd4>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x98>
 8001c5a:	4b7b      	ldr	r3, [pc, #492]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a7a      	ldr	r2, [pc, #488]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b78      	ldr	r3, [pc, #480]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a77      	ldr	r2, [pc, #476]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e01d      	b.n	8001cb0 <HAL_RCC_OscConfig+0xd4>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0xbc>
 8001c7e:	4b72      	ldr	r3, [pc, #456]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a71      	ldr	r2, [pc, #452]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b6f      	ldr	r3, [pc, #444]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a6e      	ldr	r2, [pc, #440]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCC_OscConfig+0xd4>
 8001c98:	4b6b      	ldr	r3, [pc, #428]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a6a      	ldr	r2, [pc, #424]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b68      	ldr	r3, [pc, #416]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a67      	ldr	r2, [pc, #412]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d013      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fc7e 	bl	80015b8 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff fc7a 	bl	80015b8 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	; 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e1fa      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	4b5d      	ldr	r3, [pc, #372]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xe4>
 8001cde:	e014      	b.n	8001d0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fc6a 	bl	80015b8 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fc66 	bl	80015b8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e1e6      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfa:	4b53      	ldr	r3, [pc, #332]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x10c>
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d063      	beq.n	8001dde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d16:	4b4c      	ldr	r3, [pc, #304]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d22:	4b49      	ldr	r3, [pc, #292]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d11c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x18c>
 8001d2e:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d116      	bne.n	8001d68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3a:	4b43      	ldr	r3, [pc, #268]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <HAL_RCC_OscConfig+0x176>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e1ba      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d52:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4939      	ldr	r1, [pc, #228]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	e03a      	b.n	8001dde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d70:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7ff fc1f 	bl	80015b8 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fc1b 	bl	80015b8 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e19b      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d90:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4927      	ldr	r1, [pc, #156]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]
 8001db0:	e015      	b.n	8001dde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db2:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fbfe 	bl	80015b8 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fbfa 	bl	80015b8 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e17a      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d03a      	beq.n	8001e60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d019      	beq.n	8001e26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df8:	f7ff fbde 	bl	80015b8 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e00:	f7ff fbda 	bl	80015b8 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e15a      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f000 fad8 	bl	80023d4 <RCC_Delay>
 8001e24:	e01c      	b.n	8001e60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2c:	f7ff fbc4 	bl	80015b8 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e32:	e00f      	b.n	8001e54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e34:	f7ff fbc0 	bl	80015b8 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d908      	bls.n	8001e54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e140      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	42420000 	.word	0x42420000
 8001e50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e54:	4b9e      	ldr	r3, [pc, #632]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1e9      	bne.n	8001e34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80a6 	beq.w	8001fba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e72:	4b97      	ldr	r3, [pc, #604]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10d      	bne.n	8001e9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	4b94      	ldr	r3, [pc, #592]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	4a93      	ldr	r2, [pc, #588]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e88:	61d3      	str	r3, [r2, #28]
 8001e8a:	4b91      	ldr	r3, [pc, #580]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e96:	2301      	movs	r3, #1
 8001e98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9a:	4b8e      	ldr	r3, [pc, #568]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d118      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea6:	4b8b      	ldr	r3, [pc, #556]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a8a      	ldr	r2, [pc, #552]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fb81 	bl	80015b8 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eba:	f7ff fb7d 	bl	80015b8 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b64      	cmp	r3, #100	; 0x64
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e0fd      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ecc:	4b81      	ldr	r3, [pc, #516]	; (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x312>
 8001ee0:	4b7b      	ldr	r3, [pc, #492]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4a7a      	ldr	r2, [pc, #488]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6213      	str	r3, [r2, #32]
 8001eec:	e02d      	b.n	8001f4a <HAL_RCC_OscConfig+0x36e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x334>
 8001ef6:	4b76      	ldr	r3, [pc, #472]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a75      	ldr	r2, [pc, #468]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	6213      	str	r3, [r2, #32]
 8001f02:	4b73      	ldr	r3, [pc, #460]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a72      	ldr	r2, [pc, #456]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	f023 0304 	bic.w	r3, r3, #4
 8001f0c:	6213      	str	r3, [r2, #32]
 8001f0e:	e01c      	b.n	8001f4a <HAL_RCC_OscConfig+0x36e>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b05      	cmp	r3, #5
 8001f16:	d10c      	bne.n	8001f32 <HAL_RCC_OscConfig+0x356>
 8001f18:	4b6d      	ldr	r3, [pc, #436]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4a6c      	ldr	r2, [pc, #432]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	f043 0304 	orr.w	r3, r3, #4
 8001f22:	6213      	str	r3, [r2, #32]
 8001f24:	4b6a      	ldr	r3, [pc, #424]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a69      	ldr	r2, [pc, #420]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	e00b      	b.n	8001f4a <HAL_RCC_OscConfig+0x36e>
 8001f32:	4b67      	ldr	r3, [pc, #412]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	4a66      	ldr	r2, [pc, #408]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	6213      	str	r3, [r2, #32]
 8001f3e:	4b64      	ldr	r3, [pc, #400]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4a63      	ldr	r2, [pc, #396]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	f023 0304 	bic.w	r3, r3, #4
 8001f48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d015      	beq.n	8001f7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f52:	f7ff fb31 	bl	80015b8 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f58:	e00a      	b.n	8001f70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5a:	f7ff fb2d 	bl	80015b8 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e0ab      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f70:	4b57      	ldr	r3, [pc, #348]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0ee      	beq.n	8001f5a <HAL_RCC_OscConfig+0x37e>
 8001f7c:	e014      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff fb1b 	bl	80015b8 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7ff fb17 	bl	80015b8 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e095      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9c:	4b4c      	ldr	r3, [pc, #304]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1ee      	bne.n	8001f86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d105      	bne.n	8001fba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fae:	4b48      	ldr	r3, [pc, #288]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	4a47      	ldr	r2, [pc, #284]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8081 	beq.w	80020c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fc4:	4b42      	ldr	r3, [pc, #264]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 030c 	and.w	r3, r3, #12
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d061      	beq.n	8002094 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d146      	bne.n	8002066 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd8:	4b3f      	ldr	r3, [pc, #252]	; (80020d8 <HAL_RCC_OscConfig+0x4fc>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7ff faeb 	bl	80015b8 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7ff fae7 	bl	80015b8 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e067      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff8:	4b35      	ldr	r3, [pc, #212]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f0      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200c:	d108      	bne.n	8002020 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800200e:	4b30      	ldr	r3, [pc, #192]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	492d      	ldr	r1, [pc, #180]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002020:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a19      	ldr	r1, [r3, #32]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	430b      	orrs	r3, r1
 8002032:	4927      	ldr	r1, [pc, #156]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <HAL_RCC_OscConfig+0x4fc>)
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7ff fabb 	bl	80015b8 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002046:	f7ff fab7 	bl	80015b8 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e037      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002058:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x46a>
 8002064:	e02f      	b.n	80020c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002066:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <HAL_RCC_OscConfig+0x4fc>)
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff faa4 	bl	80015b8 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002074:	f7ff faa0 	bl	80015b8 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e020      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x498>
 8002092:	e018      	b.n	80020c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e013      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_RCC_OscConfig+0x4f4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	429a      	cmp	r2, r3
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40007000 	.word	0x40007000
 80020d8:	42420060 	.word	0x42420060

080020dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0d0      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f0:	4b6a      	ldr	r3, [pc, #424]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d910      	bls.n	8002120 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b67      	ldr	r3, [pc, #412]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 0207 	bic.w	r2, r3, #7
 8002106:	4965      	ldr	r1, [pc, #404]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	4b63      	ldr	r3, [pc, #396]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0b8      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002138:	4b59      	ldr	r3, [pc, #356]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4a58      	ldr	r2, [pc, #352]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002142:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002150:	4b53      	ldr	r3, [pc, #332]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4a52      	ldr	r2, [pc, #328]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800215a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800215c:	4b50      	ldr	r3, [pc, #320]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	494d      	ldr	r1, [pc, #308]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d040      	beq.n	80021fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d115      	bne.n	80021ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e07f      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d107      	bne.n	80021aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219a:	4b41      	ldr	r3, [pc, #260]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d109      	bne.n	80021ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e073      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021aa:	4b3d      	ldr	r3, [pc, #244]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e06b      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ba:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f023 0203 	bic.w	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4936      	ldr	r1, [pc, #216]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021cc:	f7ff f9f4 	bl	80015b8 <HAL_GetTick>
 80021d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d4:	f7ff f9f0 	bl	80015b8 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e053      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ea:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 020c 	and.w	r2, r3, #12
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d1eb      	bne.n	80021d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021fc:	4b27      	ldr	r3, [pc, #156]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d210      	bcs.n	800222c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b24      	ldr	r3, [pc, #144]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 0207 	bic.w	r2, r3, #7
 8002212:	4922      	ldr	r1, [pc, #136]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e032      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4916      	ldr	r1, [pc, #88]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	490e      	ldr	r1, [pc, #56]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	4313      	orrs	r3, r2
 8002268:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800226a:	f000 f821 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 800226e:	4602      	mov	r2, r0
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	490a      	ldr	r1, [pc, #40]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800227c:	5ccb      	ldrb	r3, [r1, r3]
 800227e:	fa22 f303 	lsr.w	r3, r2, r3
 8002282:	4a09      	ldr	r2, [pc, #36]	; (80022a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <HAL_RCC_ClockConfig+0x1d0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f952 	bl	8001534 <HAL_InitTick>

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40022000 	.word	0x40022000
 80022a0:	40021000 	.word	0x40021000
 80022a4:	080073d8 	.word	0x080073d8
 80022a8:	20000000 	.word	0x20000000
 80022ac:	20000004 	.word	0x20000004

080022b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b0:	b490      	push	{r4, r7}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022b6:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022b8:	1d3c      	adds	r4, r7, #4
 80022ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022c0:	f240 2301 	movw	r3, #513	; 0x201
 80022c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022da:	4b22      	ldr	r3, [pc, #136]	; (8002364 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d002      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x40>
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d003      	beq.n	80022f6 <HAL_RCC_GetSysClockFreq+0x46>
 80022ee:	e02d      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022f0:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f2:	623b      	str	r3, [r7, #32]
      break;
 80022f4:	e02d      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	0c9b      	lsrs	r3, r3, #18
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002302:	4413      	add	r3, r2
 8002304:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002308:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d013      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	0c5b      	lsrs	r3, r3, #17
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002322:	4413      	add	r3, r2
 8002324:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002328:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	4a0e      	ldr	r2, [pc, #56]	; (8002368 <HAL_RCC_GetSysClockFreq+0xb8>)
 800232e:	fb02 f203 	mul.w	r2, r2, r3
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	fbb2 f3f3 	udiv	r3, r2, r3
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
 800233a:	e004      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	4a0b      	ldr	r2, [pc, #44]	; (800236c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002340:	fb02 f303 	mul.w	r3, r2, r3
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	623b      	str	r3, [r7, #32]
      break;
 800234a:	e002      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_RCC_GetSysClockFreq+0xb8>)
 800234e:	623b      	str	r3, [r7, #32]
      break;
 8002350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002352:	6a3b      	ldr	r3, [r7, #32]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3728      	adds	r7, #40	; 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bc90      	pop	{r4, r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	080073c8 	.word	0x080073c8
 8002364:	40021000 	.word	0x40021000
 8002368:	007a1200 	.word	0x007a1200
 800236c:	003d0900 	.word	0x003d0900

08002370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002374:	4b02      	ldr	r3, [pc, #8]	; (8002380 <HAL_RCC_GetHCLKFreq+0x10>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	20000000 	.word	0x20000000

08002384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002388:	f7ff fff2 	bl	8002370 <HAL_RCC_GetHCLKFreq>
 800238c:	4602      	mov	r2, r0
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	0a1b      	lsrs	r3, r3, #8
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	4903      	ldr	r1, [pc, #12]	; (80023a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800239a:	5ccb      	ldrb	r3, [r1, r3]
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40021000 	.word	0x40021000
 80023a8:	080073e8 	.word	0x080073e8

080023ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023b0:	f7ff ffde 	bl	8002370 <HAL_RCC_GetHCLKFreq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	0adb      	lsrs	r3, r3, #11
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	4903      	ldr	r1, [pc, #12]	; (80023d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c2:	5ccb      	ldrb	r3, [r1, r3]
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40021000 	.word	0x40021000
 80023d0:	080073e8 	.word	0x080073e8

080023d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023dc:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <RCC_Delay+0x34>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a0a      	ldr	r2, [pc, #40]	; (800240c <RCC_Delay+0x38>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	0a5b      	lsrs	r3, r3, #9
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023f0:	bf00      	nop
  }
  while (Delay --);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1e5a      	subs	r2, r3, #1
 80023f6:	60fa      	str	r2, [r7, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f9      	bne.n	80023f0 <RCC_Delay+0x1c>
}
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	20000000 	.word	0x20000000
 800240c:	10624dd3 	.word	0x10624dd3

08002410 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e03f      	b.n	80024a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d106      	bne.n	800243c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7fe ffb4 	bl	80013a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2224      	movs	r2, #36	; 0x24
 8002440:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002452:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 faa7 	bl	80029a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002468:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002478:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002488:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	4613      	mov	r3, r2
 80024b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b20      	cmp	r3, #32
 80024c2:	d140      	bne.n	8002546 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <HAL_UART_Receive_IT+0x26>
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e039      	b.n	8002548 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_UART_Receive_IT+0x38>
 80024de:	2302      	movs	r3, #2
 80024e0:	e032      	b.n	8002548 <HAL_UART_Receive_IT+0x9e>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	88fa      	ldrh	r2, [r7, #6]
 80024f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	88fa      	ldrh	r2, [r7, #6]
 80024fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2222      	movs	r2, #34	; 0x22
 8002506:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002520:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695a      	ldr	r2, [r3, #20]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0220 	orr.w	r2, r2, #32
 8002540:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002546:	2302      	movs	r3, #2
  }
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
	...

08002554 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002574:	2300      	movs	r3, #0
 8002576:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10d      	bne.n	80025a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_UART_IRQHandler+0x52>
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f982 	bl	80028a8 <UART_Receive_IT>
      return;
 80025a4:	e0d0      	b.n	8002748 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 80b0 	beq.w	800270e <HAL_UART_IRQHandler+0x1ba>
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d105      	bne.n	80025c4 <HAL_UART_IRQHandler+0x70>
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80a5 	beq.w	800270e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_UART_IRQHandler+0x90>
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025dc:	f043 0201 	orr.w	r2, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_UART_IRQHandler+0xb0>
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fc:	f043 0202 	orr.w	r2, r3, #2
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00a      	beq.n	8002624 <HAL_UART_IRQHandler+0xd0>
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261c:	f043 0204 	orr.w	r2, r3, #4
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00f      	beq.n	800264e <HAL_UART_IRQHandler+0xfa>
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b00      	cmp	r3, #0
 8002636:	d104      	bne.n	8002642 <HAL_UART_IRQHandler+0xee>
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002646:	f043 0208 	orr.w	r2, r3, #8
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002652:	2b00      	cmp	r3, #0
 8002654:	d077      	beq.n	8002746 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <HAL_UART_IRQHandler+0x11c>
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f91c 	bl	80028a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	bf14      	ite	ne
 800267e:	2301      	movne	r3, #1
 8002680:	2300      	moveq	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <HAL_UART_IRQHandler+0x144>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d031      	beq.n	80026fc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f86d 	bl	8002778 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d023      	beq.n	80026f4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c8:	4a21      	ldr	r2, [pc, #132]	; (8002750 <HAL_UART_IRQHandler+0x1fc>)
 80026ca:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff f889 	bl	80017e8 <HAL_DMA_Abort_IT>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d016      	beq.n	800270a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026e6:	4610      	mov	r0, r2
 80026e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ea:	e00e      	b.n	800270a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f83a 	bl	8002766 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f2:	e00a      	b.n	800270a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f836 	bl	8002766 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026fa:	e006      	b.n	800270a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f832 	bl	8002766 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002708:	e01d      	b.n	8002746 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800270a:	bf00      	nop
    return;
 800270c:	e01b      	b.n	8002746 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_UART_IRQHandler+0x1d6>
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f859 	bl	80027da <UART_Transmit_IT>
    return;
 8002728:	e00e      	b.n	8002748 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002730:	2b00      	cmp	r3, #0
 8002732:	d009      	beq.n	8002748 <HAL_UART_IRQHandler+0x1f4>
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	d004      	beq.n	8002748 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f89a 	bl	8002878 <UART_EndTransmit_IT>
    return;
 8002744:	e000      	b.n	8002748 <HAL_UART_IRQHandler+0x1f4>
    return;
 8002746:	bf00      	nop
  }
}
 8002748:	3720      	adds	r7, #32
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	080027b3 	.word	0x080027b3

08002754 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800278e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f7ff ffca 	bl	8002766 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027da:	b480      	push	{r7}
 80027dc:	b085      	sub	sp, #20
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b21      	cmp	r3, #33	; 0x21
 80027ec:	d13e      	bne.n	800286c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f6:	d114      	bne.n	8002822 <UART_Transmit_IT+0x48>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d110      	bne.n	8002822 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002814:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	1c9a      	adds	r2, r3, #2
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	621a      	str	r2, [r3, #32]
 8002820:	e008      	b.n	8002834 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	1c59      	adds	r1, r3, #1
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6211      	str	r1, [r2, #32]
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29b      	uxth	r3, r3
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	4619      	mov	r1, r3
 8002842:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10f      	bne.n	8002868 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002856:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002866:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e000      	b.n	800286e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800286c:	2302      	movs	r3, #2
  }
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800288e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff5b 	bl	8002754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b22      	cmp	r3, #34	; 0x22
 80028ba:	d170      	bne.n	800299e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c4:	d117      	bne.n	80028f6 <UART_Receive_IT+0x4e>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d113      	bne.n	80028f6 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	1c9a      	adds	r2, r3, #2
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	; 0x28
 80028f4:	e026      	b.n	8002944 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002908:	d007      	beq.n	800291a <UART_Receive_IT+0x72>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <UART_Receive_IT+0x80>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	e008      	b.n	800293a <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002934:	b2da      	uxtb	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29b      	uxth	r3, r3
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	4619      	mov	r1, r3
 8002952:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002954:	2b00      	cmp	r3, #0
 8002956:	d120      	bne.n	800299a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0220 	bic.w	r2, r2, #32
 8002966:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002976:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0201 	bic.w	r2, r2, #1
 8002986:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7fe fb23 	bl	8000fdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	e002      	b.n	80029a0 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	e000      	b.n	80029a0 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800299e:	2302      	movs	r3, #2
  }
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029e2:	f023 030c 	bic.w	r3, r3, #12
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	430b      	orrs	r3, r1
 80029ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a2c      	ldr	r2, [pc, #176]	; (8002abc <UART_SetConfig+0x114>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d103      	bne.n	8002a18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a10:	f7ff fccc 	bl	80023ac <HAL_RCC_GetPCLK2Freq>
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	e002      	b.n	8002a1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a18:	f7ff fcb4 	bl	8002384 <HAL_RCC_GetPCLK1Freq>
 8002a1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	009a      	lsls	r2, r3, #2
 8002a28:	441a      	add	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a34:	4a22      	ldr	r2, [pc, #136]	; (8002ac0 <UART_SetConfig+0x118>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	0119      	lsls	r1, r3, #4
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	009a      	lsls	r2, r3, #2
 8002a48:	441a      	add	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a54:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <UART_SetConfig+0x118>)
 8002a56:	fba3 0302 	umull	r0, r3, r3, r2
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	2064      	movs	r0, #100	; 0x64
 8002a5e:	fb00 f303 	mul.w	r3, r0, r3
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	3332      	adds	r3, #50	; 0x32
 8002a68:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <UART_SetConfig+0x118>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a74:	4419      	add	r1, r3
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009a      	lsls	r2, r3, #2
 8002a80:	441a      	add	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <UART_SetConfig+0x118>)
 8002a8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	2064      	movs	r0, #100	; 0x64
 8002a96:	fb00 f303 	mul.w	r3, r0, r3
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	3332      	adds	r3, #50	; 0x32
 8002aa0:	4a07      	ldr	r2, [pc, #28]	; (8002ac0 <UART_SetConfig+0x118>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	f003 020f 	and.w	r2, r3, #15
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	440a      	add	r2, r1
 8002ab2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40013800 	.word	0x40013800
 8002ac0:	51eb851f 	.word	0x51eb851f

08002ac4 <atof>:
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	f001 bd0d 	b.w	80044e4 <strtod>

08002aca <atoi>:
 8002aca:	220a      	movs	r2, #10
 8002acc:	2100      	movs	r1, #0
 8002ace:	f001 bd9d 	b.w	800460c <strtol>
	...

08002ad4 <__errno>:
 8002ad4:	4b01      	ldr	r3, [pc, #4]	; (8002adc <__errno+0x8>)
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	2000000c 	.word	0x2000000c

08002ae0 <__libc_init_array>:
 8002ae0:	b570      	push	{r4, r5, r6, lr}
 8002ae2:	2600      	movs	r6, #0
 8002ae4:	4d0c      	ldr	r5, [pc, #48]	; (8002b18 <__libc_init_array+0x38>)
 8002ae6:	4c0d      	ldr	r4, [pc, #52]	; (8002b1c <__libc_init_array+0x3c>)
 8002ae8:	1b64      	subs	r4, r4, r5
 8002aea:	10a4      	asrs	r4, r4, #2
 8002aec:	42a6      	cmp	r6, r4
 8002aee:	d109      	bne.n	8002b04 <__libc_init_array+0x24>
 8002af0:	f004 fc56 	bl	80073a0 <_init>
 8002af4:	2600      	movs	r6, #0
 8002af6:	4d0a      	ldr	r5, [pc, #40]	; (8002b20 <__libc_init_array+0x40>)
 8002af8:	4c0a      	ldr	r4, [pc, #40]	; (8002b24 <__libc_init_array+0x44>)
 8002afa:	1b64      	subs	r4, r4, r5
 8002afc:	10a4      	asrs	r4, r4, #2
 8002afe:	42a6      	cmp	r6, r4
 8002b00:	d105      	bne.n	8002b0e <__libc_init_array+0x2e>
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
 8002b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b08:	4798      	blx	r3
 8002b0a:	3601      	adds	r6, #1
 8002b0c:	e7ee      	b.n	8002aec <__libc_init_array+0xc>
 8002b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b12:	4798      	blx	r3
 8002b14:	3601      	adds	r6, #1
 8002b16:	e7f2      	b.n	8002afe <__libc_init_array+0x1e>
 8002b18:	080078a4 	.word	0x080078a4
 8002b1c:	080078a4 	.word	0x080078a4
 8002b20:	080078a4 	.word	0x080078a4
 8002b24:	080078a8 	.word	0x080078a8

08002b28 <memcpy>:
 8002b28:	440a      	add	r2, r1
 8002b2a:	4291      	cmp	r1, r2
 8002b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b30:	d100      	bne.n	8002b34 <memcpy+0xc>
 8002b32:	4770      	bx	lr
 8002b34:	b510      	push	{r4, lr}
 8002b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b3a:	4291      	cmp	r1, r2
 8002b3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b40:	d1f9      	bne.n	8002b36 <memcpy+0xe>
 8002b42:	bd10      	pop	{r4, pc}

08002b44 <memset>:
 8002b44:	4603      	mov	r3, r0
 8002b46:	4402      	add	r2, r0
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d100      	bne.n	8002b4e <memset+0xa>
 8002b4c:	4770      	bx	lr
 8002b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b52:	e7f9      	b.n	8002b48 <memset+0x4>

08002b54 <__cvt>:
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b5a:	461f      	mov	r7, r3
 8002b5c:	bfbb      	ittet	lt
 8002b5e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002b62:	461f      	movlt	r7, r3
 8002b64:	2300      	movge	r3, #0
 8002b66:	232d      	movlt	r3, #45	; 0x2d
 8002b68:	b088      	sub	sp, #32
 8002b6a:	4614      	mov	r4, r2
 8002b6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002b6e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002b70:	7013      	strb	r3, [r2, #0]
 8002b72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002b74:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002b78:	f023 0820 	bic.w	r8, r3, #32
 8002b7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002b80:	d005      	beq.n	8002b8e <__cvt+0x3a>
 8002b82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002b86:	d100      	bne.n	8002b8a <__cvt+0x36>
 8002b88:	3501      	adds	r5, #1
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e000      	b.n	8002b90 <__cvt+0x3c>
 8002b8e:	2303      	movs	r3, #3
 8002b90:	aa07      	add	r2, sp, #28
 8002b92:	9204      	str	r2, [sp, #16]
 8002b94:	aa06      	add	r2, sp, #24
 8002b96:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002b9a:	e9cd 3500 	strd	r3, r5, [sp]
 8002b9e:	4622      	mov	r2, r4
 8002ba0:	463b      	mov	r3, r7
 8002ba2:	f001 fdcd 	bl	8004740 <_dtoa_r>
 8002ba6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002baa:	4606      	mov	r6, r0
 8002bac:	d102      	bne.n	8002bb4 <__cvt+0x60>
 8002bae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002bb0:	07db      	lsls	r3, r3, #31
 8002bb2:	d522      	bpl.n	8002bfa <__cvt+0xa6>
 8002bb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002bb8:	eb06 0905 	add.w	r9, r6, r5
 8002bbc:	d110      	bne.n	8002be0 <__cvt+0x8c>
 8002bbe:	7833      	ldrb	r3, [r6, #0]
 8002bc0:	2b30      	cmp	r3, #48	; 0x30
 8002bc2:	d10a      	bne.n	8002bda <__cvt+0x86>
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	4620      	mov	r0, r4
 8002bca:	4639      	mov	r1, r7
 8002bcc:	f7fd feec 	bl	80009a8 <__aeabi_dcmpeq>
 8002bd0:	b918      	cbnz	r0, 8002bda <__cvt+0x86>
 8002bd2:	f1c5 0501 	rsb	r5, r5, #1
 8002bd6:	f8ca 5000 	str.w	r5, [sl]
 8002bda:	f8da 3000 	ldr.w	r3, [sl]
 8002bde:	4499      	add	r9, r3
 8002be0:	2200      	movs	r2, #0
 8002be2:	2300      	movs	r3, #0
 8002be4:	4620      	mov	r0, r4
 8002be6:	4639      	mov	r1, r7
 8002be8:	f7fd fede 	bl	80009a8 <__aeabi_dcmpeq>
 8002bec:	b108      	cbz	r0, 8002bf2 <__cvt+0x9e>
 8002bee:	f8cd 901c 	str.w	r9, [sp, #28]
 8002bf2:	2230      	movs	r2, #48	; 0x30
 8002bf4:	9b07      	ldr	r3, [sp, #28]
 8002bf6:	454b      	cmp	r3, r9
 8002bf8:	d307      	bcc.n	8002c0a <__cvt+0xb6>
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	9b07      	ldr	r3, [sp, #28]
 8002bfe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002c00:	1b9b      	subs	r3, r3, r6
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	b008      	add	sp, #32
 8002c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c0a:	1c59      	adds	r1, r3, #1
 8002c0c:	9107      	str	r1, [sp, #28]
 8002c0e:	701a      	strb	r2, [r3, #0]
 8002c10:	e7f0      	b.n	8002bf4 <__cvt+0xa0>

08002c12 <__exponent>:
 8002c12:	4603      	mov	r3, r0
 8002c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c16:	2900      	cmp	r1, #0
 8002c18:	f803 2b02 	strb.w	r2, [r3], #2
 8002c1c:	bfb6      	itet	lt
 8002c1e:	222d      	movlt	r2, #45	; 0x2d
 8002c20:	222b      	movge	r2, #43	; 0x2b
 8002c22:	4249      	neglt	r1, r1
 8002c24:	2909      	cmp	r1, #9
 8002c26:	7042      	strb	r2, [r0, #1]
 8002c28:	dd2b      	ble.n	8002c82 <__exponent+0x70>
 8002c2a:	f10d 0407 	add.w	r4, sp, #7
 8002c2e:	46a4      	mov	ip, r4
 8002c30:	270a      	movs	r7, #10
 8002c32:	fb91 f6f7 	sdiv	r6, r1, r7
 8002c36:	460a      	mov	r2, r1
 8002c38:	46a6      	mov	lr, r4
 8002c3a:	fb07 1516 	mls	r5, r7, r6, r1
 8002c3e:	2a63      	cmp	r2, #99	; 0x63
 8002c40:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002c44:	4631      	mov	r1, r6
 8002c46:	f104 34ff 	add.w	r4, r4, #4294967295
 8002c4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002c4e:	dcf0      	bgt.n	8002c32 <__exponent+0x20>
 8002c50:	3130      	adds	r1, #48	; 0x30
 8002c52:	f1ae 0502 	sub.w	r5, lr, #2
 8002c56:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	1c44      	adds	r4, r0, #1
 8002c5e:	4561      	cmp	r1, ip
 8002c60:	d30a      	bcc.n	8002c78 <__exponent+0x66>
 8002c62:	f10d 0209 	add.w	r2, sp, #9
 8002c66:	eba2 020e 	sub.w	r2, r2, lr
 8002c6a:	4565      	cmp	r5, ip
 8002c6c:	bf88      	it	hi
 8002c6e:	2200      	movhi	r2, #0
 8002c70:	4413      	add	r3, r2
 8002c72:	1a18      	subs	r0, r3, r0
 8002c74:	b003      	add	sp, #12
 8002c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c7c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002c80:	e7ed      	b.n	8002c5e <__exponent+0x4c>
 8002c82:	2330      	movs	r3, #48	; 0x30
 8002c84:	3130      	adds	r1, #48	; 0x30
 8002c86:	7083      	strb	r3, [r0, #2]
 8002c88:	70c1      	strb	r1, [r0, #3]
 8002c8a:	1d03      	adds	r3, r0, #4
 8002c8c:	e7f1      	b.n	8002c72 <__exponent+0x60>
	...

08002c90 <_printf_float>:
 8002c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c94:	b091      	sub	sp, #68	; 0x44
 8002c96:	460c      	mov	r4, r1
 8002c98:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002c9c:	4616      	mov	r6, r2
 8002c9e:	461f      	mov	r7, r3
 8002ca0:	4605      	mov	r5, r0
 8002ca2:	f002 fea1 	bl	80059e8 <_localeconv_r>
 8002ca6:	6803      	ldr	r3, [r0, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	9309      	str	r3, [sp, #36]	; 0x24
 8002cac:	f7fd fa50 	bl	8000150 <strlen>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	930e      	str	r3, [sp, #56]	; 0x38
 8002cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8002cb8:	900a      	str	r0, [sp, #40]	; 0x28
 8002cba:	3307      	adds	r3, #7
 8002cbc:	f023 0307 	bic.w	r3, r3, #7
 8002cc0:	f103 0208 	add.w	r2, r3, #8
 8002cc4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002cc8:	f8d4 b000 	ldr.w	fp, [r4]
 8002ccc:	f8c8 2000 	str.w	r2, [r8]
 8002cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002cd8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002cdc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002ce0:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce6:	4640      	mov	r0, r8
 8002ce8:	4b9c      	ldr	r3, [pc, #624]	; (8002f5c <_printf_float+0x2cc>)
 8002cea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002cec:	f7fd fe8e 	bl	8000a0c <__aeabi_dcmpun>
 8002cf0:	bb70      	cbnz	r0, 8002d50 <_printf_float+0xc0>
 8002cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf6:	4640      	mov	r0, r8
 8002cf8:	4b98      	ldr	r3, [pc, #608]	; (8002f5c <_printf_float+0x2cc>)
 8002cfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002cfc:	f7fd fe68 	bl	80009d0 <__aeabi_dcmple>
 8002d00:	bb30      	cbnz	r0, 8002d50 <_printf_float+0xc0>
 8002d02:	2200      	movs	r2, #0
 8002d04:	2300      	movs	r3, #0
 8002d06:	4640      	mov	r0, r8
 8002d08:	4651      	mov	r1, sl
 8002d0a:	f7fd fe57 	bl	80009bc <__aeabi_dcmplt>
 8002d0e:	b110      	cbz	r0, 8002d16 <_printf_float+0x86>
 8002d10:	232d      	movs	r3, #45	; 0x2d
 8002d12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d16:	4b92      	ldr	r3, [pc, #584]	; (8002f60 <_printf_float+0x2d0>)
 8002d18:	4892      	ldr	r0, [pc, #584]	; (8002f64 <_printf_float+0x2d4>)
 8002d1a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002d1e:	bf94      	ite	ls
 8002d20:	4698      	movls	r8, r3
 8002d22:	4680      	movhi	r8, r0
 8002d24:	2303      	movs	r3, #3
 8002d26:	f04f 0a00 	mov.w	sl, #0
 8002d2a:	6123      	str	r3, [r4, #16]
 8002d2c:	f02b 0304 	bic.w	r3, fp, #4
 8002d30:	6023      	str	r3, [r4, #0]
 8002d32:	4633      	mov	r3, r6
 8002d34:	4621      	mov	r1, r4
 8002d36:	4628      	mov	r0, r5
 8002d38:	9700      	str	r7, [sp, #0]
 8002d3a:	aa0f      	add	r2, sp, #60	; 0x3c
 8002d3c:	f000 f9d4 	bl	80030e8 <_printf_common>
 8002d40:	3001      	adds	r0, #1
 8002d42:	f040 8090 	bne.w	8002e66 <_printf_float+0x1d6>
 8002d46:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4a:	b011      	add	sp, #68	; 0x44
 8002d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d50:	4642      	mov	r2, r8
 8002d52:	4653      	mov	r3, sl
 8002d54:	4640      	mov	r0, r8
 8002d56:	4651      	mov	r1, sl
 8002d58:	f7fd fe58 	bl	8000a0c <__aeabi_dcmpun>
 8002d5c:	b148      	cbz	r0, 8002d72 <_printf_float+0xe2>
 8002d5e:	f1ba 0f00 	cmp.w	sl, #0
 8002d62:	bfb8      	it	lt
 8002d64:	232d      	movlt	r3, #45	; 0x2d
 8002d66:	4880      	ldr	r0, [pc, #512]	; (8002f68 <_printf_float+0x2d8>)
 8002d68:	bfb8      	it	lt
 8002d6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002d6e:	4b7f      	ldr	r3, [pc, #508]	; (8002f6c <_printf_float+0x2dc>)
 8002d70:	e7d3      	b.n	8002d1a <_printf_float+0x8a>
 8002d72:	6863      	ldr	r3, [r4, #4]
 8002d74:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	d142      	bne.n	8002e02 <_printf_float+0x172>
 8002d7c:	2306      	movs	r3, #6
 8002d7e:	6063      	str	r3, [r4, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	9206      	str	r2, [sp, #24]
 8002d84:	aa0e      	add	r2, sp, #56	; 0x38
 8002d86:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002d8a:	aa0d      	add	r2, sp, #52	; 0x34
 8002d8c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002d90:	9203      	str	r2, [sp, #12]
 8002d92:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002d96:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002d9a:	6023      	str	r3, [r4, #0]
 8002d9c:	6863      	ldr	r3, [r4, #4]
 8002d9e:	4642      	mov	r2, r8
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	4628      	mov	r0, r5
 8002da4:	4653      	mov	r3, sl
 8002da6:	910b      	str	r1, [sp, #44]	; 0x2c
 8002da8:	f7ff fed4 	bl	8002b54 <__cvt>
 8002dac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002dae:	4680      	mov	r8, r0
 8002db0:	2947      	cmp	r1, #71	; 0x47
 8002db2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002db4:	d108      	bne.n	8002dc8 <_printf_float+0x138>
 8002db6:	1cc8      	adds	r0, r1, #3
 8002db8:	db02      	blt.n	8002dc0 <_printf_float+0x130>
 8002dba:	6863      	ldr	r3, [r4, #4]
 8002dbc:	4299      	cmp	r1, r3
 8002dbe:	dd40      	ble.n	8002e42 <_printf_float+0x1b2>
 8002dc0:	f1a9 0902 	sub.w	r9, r9, #2
 8002dc4:	fa5f f989 	uxtb.w	r9, r9
 8002dc8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002dcc:	d81f      	bhi.n	8002e0e <_printf_float+0x17e>
 8002dce:	464a      	mov	r2, r9
 8002dd0:	3901      	subs	r1, #1
 8002dd2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002dd6:	910d      	str	r1, [sp, #52]	; 0x34
 8002dd8:	f7ff ff1b 	bl	8002c12 <__exponent>
 8002ddc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002dde:	4682      	mov	sl, r0
 8002de0:	1813      	adds	r3, r2, r0
 8002de2:	2a01      	cmp	r2, #1
 8002de4:	6123      	str	r3, [r4, #16]
 8002de6:	dc02      	bgt.n	8002dee <_printf_float+0x15e>
 8002de8:	6822      	ldr	r2, [r4, #0]
 8002dea:	07d2      	lsls	r2, r2, #31
 8002dec:	d501      	bpl.n	8002df2 <_printf_float+0x162>
 8002dee:	3301      	adds	r3, #1
 8002df0:	6123      	str	r3, [r4, #16]
 8002df2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d09b      	beq.n	8002d32 <_printf_float+0xa2>
 8002dfa:	232d      	movs	r3, #45	; 0x2d
 8002dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e00:	e797      	b.n	8002d32 <_printf_float+0xa2>
 8002e02:	2947      	cmp	r1, #71	; 0x47
 8002e04:	d1bc      	bne.n	8002d80 <_printf_float+0xf0>
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1ba      	bne.n	8002d80 <_printf_float+0xf0>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e7b7      	b.n	8002d7e <_printf_float+0xee>
 8002e0e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002e12:	d118      	bne.n	8002e46 <_printf_float+0x1b6>
 8002e14:	2900      	cmp	r1, #0
 8002e16:	6863      	ldr	r3, [r4, #4]
 8002e18:	dd0b      	ble.n	8002e32 <_printf_float+0x1a2>
 8002e1a:	6121      	str	r1, [r4, #16]
 8002e1c:	b913      	cbnz	r3, 8002e24 <_printf_float+0x194>
 8002e1e:	6822      	ldr	r2, [r4, #0]
 8002e20:	07d0      	lsls	r0, r2, #31
 8002e22:	d502      	bpl.n	8002e2a <_printf_float+0x19a>
 8002e24:	3301      	adds	r3, #1
 8002e26:	440b      	add	r3, r1
 8002e28:	6123      	str	r3, [r4, #16]
 8002e2a:	f04f 0a00 	mov.w	sl, #0
 8002e2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8002e30:	e7df      	b.n	8002df2 <_printf_float+0x162>
 8002e32:	b913      	cbnz	r3, 8002e3a <_printf_float+0x1aa>
 8002e34:	6822      	ldr	r2, [r4, #0]
 8002e36:	07d2      	lsls	r2, r2, #31
 8002e38:	d501      	bpl.n	8002e3e <_printf_float+0x1ae>
 8002e3a:	3302      	adds	r3, #2
 8002e3c:	e7f4      	b.n	8002e28 <_printf_float+0x198>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e7f2      	b.n	8002e28 <_printf_float+0x198>
 8002e42:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e48:	4299      	cmp	r1, r3
 8002e4a:	db05      	blt.n	8002e58 <_printf_float+0x1c8>
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	6121      	str	r1, [r4, #16]
 8002e50:	07d8      	lsls	r0, r3, #31
 8002e52:	d5ea      	bpl.n	8002e2a <_printf_float+0x19a>
 8002e54:	1c4b      	adds	r3, r1, #1
 8002e56:	e7e7      	b.n	8002e28 <_printf_float+0x198>
 8002e58:	2900      	cmp	r1, #0
 8002e5a:	bfcc      	ite	gt
 8002e5c:	2201      	movgt	r2, #1
 8002e5e:	f1c1 0202 	rsble	r2, r1, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	e7e0      	b.n	8002e28 <_printf_float+0x198>
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	055a      	lsls	r2, r3, #21
 8002e6a:	d407      	bmi.n	8002e7c <_printf_float+0x1ec>
 8002e6c:	6923      	ldr	r3, [r4, #16]
 8002e6e:	4642      	mov	r2, r8
 8002e70:	4631      	mov	r1, r6
 8002e72:	4628      	mov	r0, r5
 8002e74:	47b8      	blx	r7
 8002e76:	3001      	adds	r0, #1
 8002e78:	d12b      	bne.n	8002ed2 <_printf_float+0x242>
 8002e7a:	e764      	b.n	8002d46 <_printf_float+0xb6>
 8002e7c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002e80:	f240 80dd 	bls.w	800303e <_printf_float+0x3ae>
 8002e84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f7fd fd8c 	bl	80009a8 <__aeabi_dcmpeq>
 8002e90:	2800      	cmp	r0, #0
 8002e92:	d033      	beq.n	8002efc <_printf_float+0x26c>
 8002e94:	2301      	movs	r3, #1
 8002e96:	4631      	mov	r1, r6
 8002e98:	4628      	mov	r0, r5
 8002e9a:	4a35      	ldr	r2, [pc, #212]	; (8002f70 <_printf_float+0x2e0>)
 8002e9c:	47b8      	blx	r7
 8002e9e:	3001      	adds	r0, #1
 8002ea0:	f43f af51 	beq.w	8002d46 <_printf_float+0xb6>
 8002ea4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	db02      	blt.n	8002eb2 <_printf_float+0x222>
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	07d8      	lsls	r0, r3, #31
 8002eb0:	d50f      	bpl.n	8002ed2 <_printf_float+0x242>
 8002eb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002eb6:	4631      	mov	r1, r6
 8002eb8:	4628      	mov	r0, r5
 8002eba:	47b8      	blx	r7
 8002ebc:	3001      	adds	r0, #1
 8002ebe:	f43f af42 	beq.w	8002d46 <_printf_float+0xb6>
 8002ec2:	f04f 0800 	mov.w	r8, #0
 8002ec6:	f104 091a 	add.w	r9, r4, #26
 8002eca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	4543      	cmp	r3, r8
 8002ed0:	dc09      	bgt.n	8002ee6 <_printf_float+0x256>
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	079b      	lsls	r3, r3, #30
 8002ed6:	f100 8102 	bmi.w	80030de <_printf_float+0x44e>
 8002eda:	68e0      	ldr	r0, [r4, #12]
 8002edc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002ede:	4298      	cmp	r0, r3
 8002ee0:	bfb8      	it	lt
 8002ee2:	4618      	movlt	r0, r3
 8002ee4:	e731      	b.n	8002d4a <_printf_float+0xba>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	464a      	mov	r2, r9
 8002eea:	4631      	mov	r1, r6
 8002eec:	4628      	mov	r0, r5
 8002eee:	47b8      	blx	r7
 8002ef0:	3001      	adds	r0, #1
 8002ef2:	f43f af28 	beq.w	8002d46 <_printf_float+0xb6>
 8002ef6:	f108 0801 	add.w	r8, r8, #1
 8002efa:	e7e6      	b.n	8002eca <_printf_float+0x23a>
 8002efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	dc38      	bgt.n	8002f74 <_printf_float+0x2e4>
 8002f02:	2301      	movs	r3, #1
 8002f04:	4631      	mov	r1, r6
 8002f06:	4628      	mov	r0, r5
 8002f08:	4a19      	ldr	r2, [pc, #100]	; (8002f70 <_printf_float+0x2e0>)
 8002f0a:	47b8      	blx	r7
 8002f0c:	3001      	adds	r0, #1
 8002f0e:	f43f af1a 	beq.w	8002d46 <_printf_float+0xb6>
 8002f12:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f16:	4313      	orrs	r3, r2
 8002f18:	d102      	bne.n	8002f20 <_printf_float+0x290>
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	07d9      	lsls	r1, r3, #31
 8002f1e:	d5d8      	bpl.n	8002ed2 <_printf_float+0x242>
 8002f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f24:	4631      	mov	r1, r6
 8002f26:	4628      	mov	r0, r5
 8002f28:	47b8      	blx	r7
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	f43f af0b 	beq.w	8002d46 <_printf_float+0xb6>
 8002f30:	f04f 0900 	mov.w	r9, #0
 8002f34:	f104 0a1a 	add.w	sl, r4, #26
 8002f38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f3a:	425b      	negs	r3, r3
 8002f3c:	454b      	cmp	r3, r9
 8002f3e:	dc01      	bgt.n	8002f44 <_printf_float+0x2b4>
 8002f40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f42:	e794      	b.n	8002e6e <_printf_float+0x1de>
 8002f44:	2301      	movs	r3, #1
 8002f46:	4652      	mov	r2, sl
 8002f48:	4631      	mov	r1, r6
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	47b8      	blx	r7
 8002f4e:	3001      	adds	r0, #1
 8002f50:	f43f aef9 	beq.w	8002d46 <_printf_float+0xb6>
 8002f54:	f109 0901 	add.w	r9, r9, #1
 8002f58:	e7ee      	b.n	8002f38 <_printf_float+0x2a8>
 8002f5a:	bf00      	nop
 8002f5c:	7fefffff 	.word	0x7fefffff
 8002f60:	080073f4 	.word	0x080073f4
 8002f64:	080073f8 	.word	0x080073f8
 8002f68:	08007400 	.word	0x08007400
 8002f6c:	080073fc 	.word	0x080073fc
 8002f70:	08007404 	.word	0x08007404
 8002f74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	bfa8      	it	ge
 8002f7c:	461a      	movge	r2, r3
 8002f7e:	2a00      	cmp	r2, #0
 8002f80:	4691      	mov	r9, r2
 8002f82:	dc37      	bgt.n	8002ff4 <_printf_float+0x364>
 8002f84:	f04f 0b00 	mov.w	fp, #0
 8002f88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f8c:	f104 021a 	add.w	r2, r4, #26
 8002f90:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002f94:	ebaa 0309 	sub.w	r3, sl, r9
 8002f98:	455b      	cmp	r3, fp
 8002f9a:	dc33      	bgt.n	8003004 <_printf_float+0x374>
 8002f9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	db3b      	blt.n	800301c <_printf_float+0x38c>
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	07da      	lsls	r2, r3, #31
 8002fa8:	d438      	bmi.n	800301c <_printf_float+0x38c>
 8002faa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fac:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002fae:	eba2 030a 	sub.w	r3, r2, sl
 8002fb2:	eba2 0901 	sub.w	r9, r2, r1
 8002fb6:	4599      	cmp	r9, r3
 8002fb8:	bfa8      	it	ge
 8002fba:	4699      	movge	r9, r3
 8002fbc:	f1b9 0f00 	cmp.w	r9, #0
 8002fc0:	dc34      	bgt.n	800302c <_printf_float+0x39c>
 8002fc2:	f04f 0800 	mov.w	r8, #0
 8002fc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002fca:	f104 0a1a 	add.w	sl, r4, #26
 8002fce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	eba3 0309 	sub.w	r3, r3, r9
 8002fd8:	4543      	cmp	r3, r8
 8002fda:	f77f af7a 	ble.w	8002ed2 <_printf_float+0x242>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	4652      	mov	r2, sl
 8002fe2:	4631      	mov	r1, r6
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	47b8      	blx	r7
 8002fe8:	3001      	adds	r0, #1
 8002fea:	f43f aeac 	beq.w	8002d46 <_printf_float+0xb6>
 8002fee:	f108 0801 	add.w	r8, r8, #1
 8002ff2:	e7ec      	b.n	8002fce <_printf_float+0x33e>
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	4631      	mov	r1, r6
 8002ff8:	4642      	mov	r2, r8
 8002ffa:	4628      	mov	r0, r5
 8002ffc:	47b8      	blx	r7
 8002ffe:	3001      	adds	r0, #1
 8003000:	d1c0      	bne.n	8002f84 <_printf_float+0x2f4>
 8003002:	e6a0      	b.n	8002d46 <_printf_float+0xb6>
 8003004:	2301      	movs	r3, #1
 8003006:	4631      	mov	r1, r6
 8003008:	4628      	mov	r0, r5
 800300a:	920b      	str	r2, [sp, #44]	; 0x2c
 800300c:	47b8      	blx	r7
 800300e:	3001      	adds	r0, #1
 8003010:	f43f ae99 	beq.w	8002d46 <_printf_float+0xb6>
 8003014:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003016:	f10b 0b01 	add.w	fp, fp, #1
 800301a:	e7b9      	b.n	8002f90 <_printf_float+0x300>
 800301c:	4631      	mov	r1, r6
 800301e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003022:	4628      	mov	r0, r5
 8003024:	47b8      	blx	r7
 8003026:	3001      	adds	r0, #1
 8003028:	d1bf      	bne.n	8002faa <_printf_float+0x31a>
 800302a:	e68c      	b.n	8002d46 <_printf_float+0xb6>
 800302c:	464b      	mov	r3, r9
 800302e:	4631      	mov	r1, r6
 8003030:	4628      	mov	r0, r5
 8003032:	eb08 020a 	add.w	r2, r8, sl
 8003036:	47b8      	blx	r7
 8003038:	3001      	adds	r0, #1
 800303a:	d1c2      	bne.n	8002fc2 <_printf_float+0x332>
 800303c:	e683      	b.n	8002d46 <_printf_float+0xb6>
 800303e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003040:	2a01      	cmp	r2, #1
 8003042:	dc01      	bgt.n	8003048 <_printf_float+0x3b8>
 8003044:	07db      	lsls	r3, r3, #31
 8003046:	d537      	bpl.n	80030b8 <_printf_float+0x428>
 8003048:	2301      	movs	r3, #1
 800304a:	4642      	mov	r2, r8
 800304c:	4631      	mov	r1, r6
 800304e:	4628      	mov	r0, r5
 8003050:	47b8      	blx	r7
 8003052:	3001      	adds	r0, #1
 8003054:	f43f ae77 	beq.w	8002d46 <_printf_float+0xb6>
 8003058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800305c:	4631      	mov	r1, r6
 800305e:	4628      	mov	r0, r5
 8003060:	47b8      	blx	r7
 8003062:	3001      	adds	r0, #1
 8003064:	f43f ae6f 	beq.w	8002d46 <_printf_float+0xb6>
 8003068:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800306c:	2200      	movs	r2, #0
 800306e:	2300      	movs	r3, #0
 8003070:	f7fd fc9a 	bl	80009a8 <__aeabi_dcmpeq>
 8003074:	b9d8      	cbnz	r0, 80030ae <_printf_float+0x41e>
 8003076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003078:	f108 0201 	add.w	r2, r8, #1
 800307c:	3b01      	subs	r3, #1
 800307e:	4631      	mov	r1, r6
 8003080:	4628      	mov	r0, r5
 8003082:	47b8      	blx	r7
 8003084:	3001      	adds	r0, #1
 8003086:	d10e      	bne.n	80030a6 <_printf_float+0x416>
 8003088:	e65d      	b.n	8002d46 <_printf_float+0xb6>
 800308a:	2301      	movs	r3, #1
 800308c:	464a      	mov	r2, r9
 800308e:	4631      	mov	r1, r6
 8003090:	4628      	mov	r0, r5
 8003092:	47b8      	blx	r7
 8003094:	3001      	adds	r0, #1
 8003096:	f43f ae56 	beq.w	8002d46 <_printf_float+0xb6>
 800309a:	f108 0801 	add.w	r8, r8, #1
 800309e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030a0:	3b01      	subs	r3, #1
 80030a2:	4543      	cmp	r3, r8
 80030a4:	dcf1      	bgt.n	800308a <_printf_float+0x3fa>
 80030a6:	4653      	mov	r3, sl
 80030a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80030ac:	e6e0      	b.n	8002e70 <_printf_float+0x1e0>
 80030ae:	f04f 0800 	mov.w	r8, #0
 80030b2:	f104 091a 	add.w	r9, r4, #26
 80030b6:	e7f2      	b.n	800309e <_printf_float+0x40e>
 80030b8:	2301      	movs	r3, #1
 80030ba:	4642      	mov	r2, r8
 80030bc:	e7df      	b.n	800307e <_printf_float+0x3ee>
 80030be:	2301      	movs	r3, #1
 80030c0:	464a      	mov	r2, r9
 80030c2:	4631      	mov	r1, r6
 80030c4:	4628      	mov	r0, r5
 80030c6:	47b8      	blx	r7
 80030c8:	3001      	adds	r0, #1
 80030ca:	f43f ae3c 	beq.w	8002d46 <_printf_float+0xb6>
 80030ce:	f108 0801 	add.w	r8, r8, #1
 80030d2:	68e3      	ldr	r3, [r4, #12]
 80030d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80030d6:	1a5b      	subs	r3, r3, r1
 80030d8:	4543      	cmp	r3, r8
 80030da:	dcf0      	bgt.n	80030be <_printf_float+0x42e>
 80030dc:	e6fd      	b.n	8002eda <_printf_float+0x24a>
 80030de:	f04f 0800 	mov.w	r8, #0
 80030e2:	f104 0919 	add.w	r9, r4, #25
 80030e6:	e7f4      	b.n	80030d2 <_printf_float+0x442>

080030e8 <_printf_common>:
 80030e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030ec:	4616      	mov	r6, r2
 80030ee:	4699      	mov	r9, r3
 80030f0:	688a      	ldr	r2, [r1, #8]
 80030f2:	690b      	ldr	r3, [r1, #16]
 80030f4:	4607      	mov	r7, r0
 80030f6:	4293      	cmp	r3, r2
 80030f8:	bfb8      	it	lt
 80030fa:	4613      	movlt	r3, r2
 80030fc:	6033      	str	r3, [r6, #0]
 80030fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003102:	460c      	mov	r4, r1
 8003104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003108:	b10a      	cbz	r2, 800310e <_printf_common+0x26>
 800310a:	3301      	adds	r3, #1
 800310c:	6033      	str	r3, [r6, #0]
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	0699      	lsls	r1, r3, #26
 8003112:	bf42      	ittt	mi
 8003114:	6833      	ldrmi	r3, [r6, #0]
 8003116:	3302      	addmi	r3, #2
 8003118:	6033      	strmi	r3, [r6, #0]
 800311a:	6825      	ldr	r5, [r4, #0]
 800311c:	f015 0506 	ands.w	r5, r5, #6
 8003120:	d106      	bne.n	8003130 <_printf_common+0x48>
 8003122:	f104 0a19 	add.w	sl, r4, #25
 8003126:	68e3      	ldr	r3, [r4, #12]
 8003128:	6832      	ldr	r2, [r6, #0]
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	42ab      	cmp	r3, r5
 800312e:	dc28      	bgt.n	8003182 <_printf_common+0x9a>
 8003130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003134:	1e13      	subs	r3, r2, #0
 8003136:	6822      	ldr	r2, [r4, #0]
 8003138:	bf18      	it	ne
 800313a:	2301      	movne	r3, #1
 800313c:	0692      	lsls	r2, r2, #26
 800313e:	d42d      	bmi.n	800319c <_printf_common+0xb4>
 8003140:	4649      	mov	r1, r9
 8003142:	4638      	mov	r0, r7
 8003144:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003148:	47c0      	blx	r8
 800314a:	3001      	adds	r0, #1
 800314c:	d020      	beq.n	8003190 <_printf_common+0xa8>
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	68e5      	ldr	r5, [r4, #12]
 8003152:	f003 0306 	and.w	r3, r3, #6
 8003156:	2b04      	cmp	r3, #4
 8003158:	bf18      	it	ne
 800315a:	2500      	movne	r5, #0
 800315c:	6832      	ldr	r2, [r6, #0]
 800315e:	f04f 0600 	mov.w	r6, #0
 8003162:	68a3      	ldr	r3, [r4, #8]
 8003164:	bf08      	it	eq
 8003166:	1aad      	subeq	r5, r5, r2
 8003168:	6922      	ldr	r2, [r4, #16]
 800316a:	bf08      	it	eq
 800316c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003170:	4293      	cmp	r3, r2
 8003172:	bfc4      	itt	gt
 8003174:	1a9b      	subgt	r3, r3, r2
 8003176:	18ed      	addgt	r5, r5, r3
 8003178:	341a      	adds	r4, #26
 800317a:	42b5      	cmp	r5, r6
 800317c:	d11a      	bne.n	80031b4 <_printf_common+0xcc>
 800317e:	2000      	movs	r0, #0
 8003180:	e008      	b.n	8003194 <_printf_common+0xac>
 8003182:	2301      	movs	r3, #1
 8003184:	4652      	mov	r2, sl
 8003186:	4649      	mov	r1, r9
 8003188:	4638      	mov	r0, r7
 800318a:	47c0      	blx	r8
 800318c:	3001      	adds	r0, #1
 800318e:	d103      	bne.n	8003198 <_printf_common+0xb0>
 8003190:	f04f 30ff 	mov.w	r0, #4294967295
 8003194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003198:	3501      	adds	r5, #1
 800319a:	e7c4      	b.n	8003126 <_printf_common+0x3e>
 800319c:	2030      	movs	r0, #48	; 0x30
 800319e:	18e1      	adds	r1, r4, r3
 80031a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031aa:	4422      	add	r2, r4
 80031ac:	3302      	adds	r3, #2
 80031ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031b2:	e7c5      	b.n	8003140 <_printf_common+0x58>
 80031b4:	2301      	movs	r3, #1
 80031b6:	4622      	mov	r2, r4
 80031b8:	4649      	mov	r1, r9
 80031ba:	4638      	mov	r0, r7
 80031bc:	47c0      	blx	r8
 80031be:	3001      	adds	r0, #1
 80031c0:	d0e6      	beq.n	8003190 <_printf_common+0xa8>
 80031c2:	3601      	adds	r6, #1
 80031c4:	e7d9      	b.n	800317a <_printf_common+0x92>
	...

080031c8 <_printf_i>:
 80031c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031cc:	460c      	mov	r4, r1
 80031ce:	7e27      	ldrb	r7, [r4, #24]
 80031d0:	4691      	mov	r9, r2
 80031d2:	2f78      	cmp	r7, #120	; 0x78
 80031d4:	4680      	mov	r8, r0
 80031d6:	469a      	mov	sl, r3
 80031d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80031da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031de:	d807      	bhi.n	80031f0 <_printf_i+0x28>
 80031e0:	2f62      	cmp	r7, #98	; 0x62
 80031e2:	d80a      	bhi.n	80031fa <_printf_i+0x32>
 80031e4:	2f00      	cmp	r7, #0
 80031e6:	f000 80d9 	beq.w	800339c <_printf_i+0x1d4>
 80031ea:	2f58      	cmp	r7, #88	; 0x58
 80031ec:	f000 80a4 	beq.w	8003338 <_printf_i+0x170>
 80031f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80031f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031f8:	e03a      	b.n	8003270 <_printf_i+0xa8>
 80031fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031fe:	2b15      	cmp	r3, #21
 8003200:	d8f6      	bhi.n	80031f0 <_printf_i+0x28>
 8003202:	a001      	add	r0, pc, #4	; (adr r0, 8003208 <_printf_i+0x40>)
 8003204:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003208:	08003261 	.word	0x08003261
 800320c:	08003275 	.word	0x08003275
 8003210:	080031f1 	.word	0x080031f1
 8003214:	080031f1 	.word	0x080031f1
 8003218:	080031f1 	.word	0x080031f1
 800321c:	080031f1 	.word	0x080031f1
 8003220:	08003275 	.word	0x08003275
 8003224:	080031f1 	.word	0x080031f1
 8003228:	080031f1 	.word	0x080031f1
 800322c:	080031f1 	.word	0x080031f1
 8003230:	080031f1 	.word	0x080031f1
 8003234:	08003383 	.word	0x08003383
 8003238:	080032a5 	.word	0x080032a5
 800323c:	08003365 	.word	0x08003365
 8003240:	080031f1 	.word	0x080031f1
 8003244:	080031f1 	.word	0x080031f1
 8003248:	080033a5 	.word	0x080033a5
 800324c:	080031f1 	.word	0x080031f1
 8003250:	080032a5 	.word	0x080032a5
 8003254:	080031f1 	.word	0x080031f1
 8003258:	080031f1 	.word	0x080031f1
 800325c:	0800336d 	.word	0x0800336d
 8003260:	680b      	ldr	r3, [r1, #0]
 8003262:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003266:	1d1a      	adds	r2, r3, #4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	600a      	str	r2, [r1, #0]
 800326c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003270:	2301      	movs	r3, #1
 8003272:	e0a4      	b.n	80033be <_printf_i+0x1f6>
 8003274:	6825      	ldr	r5, [r4, #0]
 8003276:	6808      	ldr	r0, [r1, #0]
 8003278:	062e      	lsls	r6, r5, #24
 800327a:	f100 0304 	add.w	r3, r0, #4
 800327e:	d50a      	bpl.n	8003296 <_printf_i+0xce>
 8003280:	6805      	ldr	r5, [r0, #0]
 8003282:	600b      	str	r3, [r1, #0]
 8003284:	2d00      	cmp	r5, #0
 8003286:	da03      	bge.n	8003290 <_printf_i+0xc8>
 8003288:	232d      	movs	r3, #45	; 0x2d
 800328a:	426d      	negs	r5, r5
 800328c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003290:	230a      	movs	r3, #10
 8003292:	485e      	ldr	r0, [pc, #376]	; (800340c <_printf_i+0x244>)
 8003294:	e019      	b.n	80032ca <_printf_i+0x102>
 8003296:	f015 0f40 	tst.w	r5, #64	; 0x40
 800329a:	6805      	ldr	r5, [r0, #0]
 800329c:	600b      	str	r3, [r1, #0]
 800329e:	bf18      	it	ne
 80032a0:	b22d      	sxthne	r5, r5
 80032a2:	e7ef      	b.n	8003284 <_printf_i+0xbc>
 80032a4:	680b      	ldr	r3, [r1, #0]
 80032a6:	6825      	ldr	r5, [r4, #0]
 80032a8:	1d18      	adds	r0, r3, #4
 80032aa:	6008      	str	r0, [r1, #0]
 80032ac:	0628      	lsls	r0, r5, #24
 80032ae:	d501      	bpl.n	80032b4 <_printf_i+0xec>
 80032b0:	681d      	ldr	r5, [r3, #0]
 80032b2:	e002      	b.n	80032ba <_printf_i+0xf2>
 80032b4:	0669      	lsls	r1, r5, #25
 80032b6:	d5fb      	bpl.n	80032b0 <_printf_i+0xe8>
 80032b8:	881d      	ldrh	r5, [r3, #0]
 80032ba:	2f6f      	cmp	r7, #111	; 0x6f
 80032bc:	bf0c      	ite	eq
 80032be:	2308      	moveq	r3, #8
 80032c0:	230a      	movne	r3, #10
 80032c2:	4852      	ldr	r0, [pc, #328]	; (800340c <_printf_i+0x244>)
 80032c4:	2100      	movs	r1, #0
 80032c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032ca:	6866      	ldr	r6, [r4, #4]
 80032cc:	2e00      	cmp	r6, #0
 80032ce:	bfa8      	it	ge
 80032d0:	6821      	ldrge	r1, [r4, #0]
 80032d2:	60a6      	str	r6, [r4, #8]
 80032d4:	bfa4      	itt	ge
 80032d6:	f021 0104 	bicge.w	r1, r1, #4
 80032da:	6021      	strge	r1, [r4, #0]
 80032dc:	b90d      	cbnz	r5, 80032e2 <_printf_i+0x11a>
 80032de:	2e00      	cmp	r6, #0
 80032e0:	d04d      	beq.n	800337e <_printf_i+0x1b6>
 80032e2:	4616      	mov	r6, r2
 80032e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80032e8:	fb03 5711 	mls	r7, r3, r1, r5
 80032ec:	5dc7      	ldrb	r7, [r0, r7]
 80032ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032f2:	462f      	mov	r7, r5
 80032f4:	42bb      	cmp	r3, r7
 80032f6:	460d      	mov	r5, r1
 80032f8:	d9f4      	bls.n	80032e4 <_printf_i+0x11c>
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d10b      	bne.n	8003316 <_printf_i+0x14e>
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	07df      	lsls	r7, r3, #31
 8003302:	d508      	bpl.n	8003316 <_printf_i+0x14e>
 8003304:	6923      	ldr	r3, [r4, #16]
 8003306:	6861      	ldr	r1, [r4, #4]
 8003308:	4299      	cmp	r1, r3
 800330a:	bfde      	ittt	le
 800330c:	2330      	movle	r3, #48	; 0x30
 800330e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003312:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003316:	1b92      	subs	r2, r2, r6
 8003318:	6122      	str	r2, [r4, #16]
 800331a:	464b      	mov	r3, r9
 800331c:	4621      	mov	r1, r4
 800331e:	4640      	mov	r0, r8
 8003320:	f8cd a000 	str.w	sl, [sp]
 8003324:	aa03      	add	r2, sp, #12
 8003326:	f7ff fedf 	bl	80030e8 <_printf_common>
 800332a:	3001      	adds	r0, #1
 800332c:	d14c      	bne.n	80033c8 <_printf_i+0x200>
 800332e:	f04f 30ff 	mov.w	r0, #4294967295
 8003332:	b004      	add	sp, #16
 8003334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003338:	4834      	ldr	r0, [pc, #208]	; (800340c <_printf_i+0x244>)
 800333a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800333e:	680e      	ldr	r6, [r1, #0]
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	f856 5b04 	ldr.w	r5, [r6], #4
 8003346:	061f      	lsls	r7, r3, #24
 8003348:	600e      	str	r6, [r1, #0]
 800334a:	d514      	bpl.n	8003376 <_printf_i+0x1ae>
 800334c:	07d9      	lsls	r1, r3, #31
 800334e:	bf44      	itt	mi
 8003350:	f043 0320 	orrmi.w	r3, r3, #32
 8003354:	6023      	strmi	r3, [r4, #0]
 8003356:	b91d      	cbnz	r5, 8003360 <_printf_i+0x198>
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	f023 0320 	bic.w	r3, r3, #32
 800335e:	6023      	str	r3, [r4, #0]
 8003360:	2310      	movs	r3, #16
 8003362:	e7af      	b.n	80032c4 <_printf_i+0xfc>
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	f043 0320 	orr.w	r3, r3, #32
 800336a:	6023      	str	r3, [r4, #0]
 800336c:	2378      	movs	r3, #120	; 0x78
 800336e:	4828      	ldr	r0, [pc, #160]	; (8003410 <_printf_i+0x248>)
 8003370:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003374:	e7e3      	b.n	800333e <_printf_i+0x176>
 8003376:	065e      	lsls	r6, r3, #25
 8003378:	bf48      	it	mi
 800337a:	b2ad      	uxthmi	r5, r5
 800337c:	e7e6      	b.n	800334c <_printf_i+0x184>
 800337e:	4616      	mov	r6, r2
 8003380:	e7bb      	b.n	80032fa <_printf_i+0x132>
 8003382:	680b      	ldr	r3, [r1, #0]
 8003384:	6826      	ldr	r6, [r4, #0]
 8003386:	1d1d      	adds	r5, r3, #4
 8003388:	6960      	ldr	r0, [r4, #20]
 800338a:	600d      	str	r5, [r1, #0]
 800338c:	0635      	lsls	r5, r6, #24
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	d501      	bpl.n	8003396 <_printf_i+0x1ce>
 8003392:	6018      	str	r0, [r3, #0]
 8003394:	e002      	b.n	800339c <_printf_i+0x1d4>
 8003396:	0671      	lsls	r1, r6, #25
 8003398:	d5fb      	bpl.n	8003392 <_printf_i+0x1ca>
 800339a:	8018      	strh	r0, [r3, #0]
 800339c:	2300      	movs	r3, #0
 800339e:	4616      	mov	r6, r2
 80033a0:	6123      	str	r3, [r4, #16]
 80033a2:	e7ba      	b.n	800331a <_printf_i+0x152>
 80033a4:	680b      	ldr	r3, [r1, #0]
 80033a6:	1d1a      	adds	r2, r3, #4
 80033a8:	600a      	str	r2, [r1, #0]
 80033aa:	681e      	ldr	r6, [r3, #0]
 80033ac:	2100      	movs	r1, #0
 80033ae:	4630      	mov	r0, r6
 80033b0:	6862      	ldr	r2, [r4, #4]
 80033b2:	f002 fb37 	bl	8005a24 <memchr>
 80033b6:	b108      	cbz	r0, 80033bc <_printf_i+0x1f4>
 80033b8:	1b80      	subs	r0, r0, r6
 80033ba:	6060      	str	r0, [r4, #4]
 80033bc:	6863      	ldr	r3, [r4, #4]
 80033be:	6123      	str	r3, [r4, #16]
 80033c0:	2300      	movs	r3, #0
 80033c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033c6:	e7a8      	b.n	800331a <_printf_i+0x152>
 80033c8:	4632      	mov	r2, r6
 80033ca:	4649      	mov	r1, r9
 80033cc:	4640      	mov	r0, r8
 80033ce:	6923      	ldr	r3, [r4, #16]
 80033d0:	47d0      	blx	sl
 80033d2:	3001      	adds	r0, #1
 80033d4:	d0ab      	beq.n	800332e <_printf_i+0x166>
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	079b      	lsls	r3, r3, #30
 80033da:	d413      	bmi.n	8003404 <_printf_i+0x23c>
 80033dc:	68e0      	ldr	r0, [r4, #12]
 80033de:	9b03      	ldr	r3, [sp, #12]
 80033e0:	4298      	cmp	r0, r3
 80033e2:	bfb8      	it	lt
 80033e4:	4618      	movlt	r0, r3
 80033e6:	e7a4      	b.n	8003332 <_printf_i+0x16a>
 80033e8:	2301      	movs	r3, #1
 80033ea:	4632      	mov	r2, r6
 80033ec:	4649      	mov	r1, r9
 80033ee:	4640      	mov	r0, r8
 80033f0:	47d0      	blx	sl
 80033f2:	3001      	adds	r0, #1
 80033f4:	d09b      	beq.n	800332e <_printf_i+0x166>
 80033f6:	3501      	adds	r5, #1
 80033f8:	68e3      	ldr	r3, [r4, #12]
 80033fa:	9903      	ldr	r1, [sp, #12]
 80033fc:	1a5b      	subs	r3, r3, r1
 80033fe:	42ab      	cmp	r3, r5
 8003400:	dcf2      	bgt.n	80033e8 <_printf_i+0x220>
 8003402:	e7eb      	b.n	80033dc <_printf_i+0x214>
 8003404:	2500      	movs	r5, #0
 8003406:	f104 0619 	add.w	r6, r4, #25
 800340a:	e7f5      	b.n	80033f8 <_printf_i+0x230>
 800340c:	08007406 	.word	0x08007406
 8003410:	08007417 	.word	0x08007417

08003414 <_scanf_float>:
 8003414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003418:	b087      	sub	sp, #28
 800341a:	9303      	str	r3, [sp, #12]
 800341c:	688b      	ldr	r3, [r1, #8]
 800341e:	4617      	mov	r7, r2
 8003420:	1e5a      	subs	r2, r3, #1
 8003422:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003426:	bf85      	ittet	hi
 8003428:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800342c:	195b      	addhi	r3, r3, r5
 800342e:	2300      	movls	r3, #0
 8003430:	9302      	strhi	r3, [sp, #8]
 8003432:	bf88      	it	hi
 8003434:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003438:	468b      	mov	fp, r1
 800343a:	f04f 0500 	mov.w	r5, #0
 800343e:	bf8c      	ite	hi
 8003440:	608b      	strhi	r3, [r1, #8]
 8003442:	9302      	strls	r3, [sp, #8]
 8003444:	680b      	ldr	r3, [r1, #0]
 8003446:	4680      	mov	r8, r0
 8003448:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800344c:	f84b 3b1c 	str.w	r3, [fp], #28
 8003450:	460c      	mov	r4, r1
 8003452:	465e      	mov	r6, fp
 8003454:	46aa      	mov	sl, r5
 8003456:	46a9      	mov	r9, r5
 8003458:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800345c:	9501      	str	r5, [sp, #4]
 800345e:	68a2      	ldr	r2, [r4, #8]
 8003460:	b152      	cbz	r2, 8003478 <_scanf_float+0x64>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b4e      	cmp	r3, #78	; 0x4e
 8003468:	d864      	bhi.n	8003534 <_scanf_float+0x120>
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d83c      	bhi.n	80034e8 <_scanf_float+0xd4>
 800346e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003472:	b2c8      	uxtb	r0, r1
 8003474:	280e      	cmp	r0, #14
 8003476:	d93a      	bls.n	80034ee <_scanf_float+0xda>
 8003478:	f1b9 0f00 	cmp.w	r9, #0
 800347c:	d003      	beq.n	8003486 <_scanf_float+0x72>
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003484:	6023      	str	r3, [r4, #0]
 8003486:	f10a 3aff 	add.w	sl, sl, #4294967295
 800348a:	f1ba 0f01 	cmp.w	sl, #1
 800348e:	f200 8113 	bhi.w	80036b8 <_scanf_float+0x2a4>
 8003492:	455e      	cmp	r6, fp
 8003494:	f200 8105 	bhi.w	80036a2 <_scanf_float+0x28e>
 8003498:	2501      	movs	r5, #1
 800349a:	4628      	mov	r0, r5
 800349c:	b007      	add	sp, #28
 800349e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80034a6:	2a0d      	cmp	r2, #13
 80034a8:	d8e6      	bhi.n	8003478 <_scanf_float+0x64>
 80034aa:	a101      	add	r1, pc, #4	; (adr r1, 80034b0 <_scanf_float+0x9c>)
 80034ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80034b0:	080035ef 	.word	0x080035ef
 80034b4:	08003479 	.word	0x08003479
 80034b8:	08003479 	.word	0x08003479
 80034bc:	08003479 	.word	0x08003479
 80034c0:	0800364f 	.word	0x0800364f
 80034c4:	08003627 	.word	0x08003627
 80034c8:	08003479 	.word	0x08003479
 80034cc:	08003479 	.word	0x08003479
 80034d0:	080035fd 	.word	0x080035fd
 80034d4:	08003479 	.word	0x08003479
 80034d8:	08003479 	.word	0x08003479
 80034dc:	08003479 	.word	0x08003479
 80034e0:	08003479 	.word	0x08003479
 80034e4:	080035b5 	.word	0x080035b5
 80034e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80034ec:	e7db      	b.n	80034a6 <_scanf_float+0x92>
 80034ee:	290e      	cmp	r1, #14
 80034f0:	d8c2      	bhi.n	8003478 <_scanf_float+0x64>
 80034f2:	a001      	add	r0, pc, #4	; (adr r0, 80034f8 <_scanf_float+0xe4>)
 80034f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80034f8:	080035a7 	.word	0x080035a7
 80034fc:	08003479 	.word	0x08003479
 8003500:	080035a7 	.word	0x080035a7
 8003504:	0800363b 	.word	0x0800363b
 8003508:	08003479 	.word	0x08003479
 800350c:	08003555 	.word	0x08003555
 8003510:	08003591 	.word	0x08003591
 8003514:	08003591 	.word	0x08003591
 8003518:	08003591 	.word	0x08003591
 800351c:	08003591 	.word	0x08003591
 8003520:	08003591 	.word	0x08003591
 8003524:	08003591 	.word	0x08003591
 8003528:	08003591 	.word	0x08003591
 800352c:	08003591 	.word	0x08003591
 8003530:	08003591 	.word	0x08003591
 8003534:	2b6e      	cmp	r3, #110	; 0x6e
 8003536:	d809      	bhi.n	800354c <_scanf_float+0x138>
 8003538:	2b60      	cmp	r3, #96	; 0x60
 800353a:	d8b2      	bhi.n	80034a2 <_scanf_float+0x8e>
 800353c:	2b54      	cmp	r3, #84	; 0x54
 800353e:	d077      	beq.n	8003630 <_scanf_float+0x21c>
 8003540:	2b59      	cmp	r3, #89	; 0x59
 8003542:	d199      	bne.n	8003478 <_scanf_float+0x64>
 8003544:	2d07      	cmp	r5, #7
 8003546:	d197      	bne.n	8003478 <_scanf_float+0x64>
 8003548:	2508      	movs	r5, #8
 800354a:	e029      	b.n	80035a0 <_scanf_float+0x18c>
 800354c:	2b74      	cmp	r3, #116	; 0x74
 800354e:	d06f      	beq.n	8003630 <_scanf_float+0x21c>
 8003550:	2b79      	cmp	r3, #121	; 0x79
 8003552:	e7f6      	b.n	8003542 <_scanf_float+0x12e>
 8003554:	6821      	ldr	r1, [r4, #0]
 8003556:	05c8      	lsls	r0, r1, #23
 8003558:	d51a      	bpl.n	8003590 <_scanf_float+0x17c>
 800355a:	9b02      	ldr	r3, [sp, #8]
 800355c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003560:	6021      	str	r1, [r4, #0]
 8003562:	f109 0901 	add.w	r9, r9, #1
 8003566:	b11b      	cbz	r3, 8003570 <_scanf_float+0x15c>
 8003568:	3b01      	subs	r3, #1
 800356a:	3201      	adds	r2, #1
 800356c:	9302      	str	r3, [sp, #8]
 800356e:	60a2      	str	r2, [r4, #8]
 8003570:	68a3      	ldr	r3, [r4, #8]
 8003572:	3b01      	subs	r3, #1
 8003574:	60a3      	str	r3, [r4, #8]
 8003576:	6923      	ldr	r3, [r4, #16]
 8003578:	3301      	adds	r3, #1
 800357a:	6123      	str	r3, [r4, #16]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3b01      	subs	r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	f340 8084 	ble.w	8003690 <_scanf_float+0x27c>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	3301      	adds	r3, #1
 800358c:	603b      	str	r3, [r7, #0]
 800358e:	e766      	b.n	800345e <_scanf_float+0x4a>
 8003590:	eb1a 0f05 	cmn.w	sl, r5
 8003594:	f47f af70 	bne.w	8003478 <_scanf_float+0x64>
 8003598:	6822      	ldr	r2, [r4, #0]
 800359a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800359e:	6022      	str	r2, [r4, #0]
 80035a0:	f806 3b01 	strb.w	r3, [r6], #1
 80035a4:	e7e4      	b.n	8003570 <_scanf_float+0x15c>
 80035a6:	6822      	ldr	r2, [r4, #0]
 80035a8:	0610      	lsls	r0, r2, #24
 80035aa:	f57f af65 	bpl.w	8003478 <_scanf_float+0x64>
 80035ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035b2:	e7f4      	b.n	800359e <_scanf_float+0x18a>
 80035b4:	f1ba 0f00 	cmp.w	sl, #0
 80035b8:	d10e      	bne.n	80035d8 <_scanf_float+0x1c4>
 80035ba:	f1b9 0f00 	cmp.w	r9, #0
 80035be:	d10e      	bne.n	80035de <_scanf_float+0x1ca>
 80035c0:	6822      	ldr	r2, [r4, #0]
 80035c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80035c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80035ca:	d108      	bne.n	80035de <_scanf_float+0x1ca>
 80035cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80035d0:	f04f 0a01 	mov.w	sl, #1
 80035d4:	6022      	str	r2, [r4, #0]
 80035d6:	e7e3      	b.n	80035a0 <_scanf_float+0x18c>
 80035d8:	f1ba 0f02 	cmp.w	sl, #2
 80035dc:	d055      	beq.n	800368a <_scanf_float+0x276>
 80035de:	2d01      	cmp	r5, #1
 80035e0:	d002      	beq.n	80035e8 <_scanf_float+0x1d4>
 80035e2:	2d04      	cmp	r5, #4
 80035e4:	f47f af48 	bne.w	8003478 <_scanf_float+0x64>
 80035e8:	3501      	adds	r5, #1
 80035ea:	b2ed      	uxtb	r5, r5
 80035ec:	e7d8      	b.n	80035a0 <_scanf_float+0x18c>
 80035ee:	f1ba 0f01 	cmp.w	sl, #1
 80035f2:	f47f af41 	bne.w	8003478 <_scanf_float+0x64>
 80035f6:	f04f 0a02 	mov.w	sl, #2
 80035fa:	e7d1      	b.n	80035a0 <_scanf_float+0x18c>
 80035fc:	b97d      	cbnz	r5, 800361e <_scanf_float+0x20a>
 80035fe:	f1b9 0f00 	cmp.w	r9, #0
 8003602:	f47f af3c 	bne.w	800347e <_scanf_float+0x6a>
 8003606:	6822      	ldr	r2, [r4, #0]
 8003608:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800360c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003610:	f47f af39 	bne.w	8003486 <_scanf_float+0x72>
 8003614:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003618:	2501      	movs	r5, #1
 800361a:	6022      	str	r2, [r4, #0]
 800361c:	e7c0      	b.n	80035a0 <_scanf_float+0x18c>
 800361e:	2d03      	cmp	r5, #3
 8003620:	d0e2      	beq.n	80035e8 <_scanf_float+0x1d4>
 8003622:	2d05      	cmp	r5, #5
 8003624:	e7de      	b.n	80035e4 <_scanf_float+0x1d0>
 8003626:	2d02      	cmp	r5, #2
 8003628:	f47f af26 	bne.w	8003478 <_scanf_float+0x64>
 800362c:	2503      	movs	r5, #3
 800362e:	e7b7      	b.n	80035a0 <_scanf_float+0x18c>
 8003630:	2d06      	cmp	r5, #6
 8003632:	f47f af21 	bne.w	8003478 <_scanf_float+0x64>
 8003636:	2507      	movs	r5, #7
 8003638:	e7b2      	b.n	80035a0 <_scanf_float+0x18c>
 800363a:	6822      	ldr	r2, [r4, #0]
 800363c:	0591      	lsls	r1, r2, #22
 800363e:	f57f af1b 	bpl.w	8003478 <_scanf_float+0x64>
 8003642:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003646:	6022      	str	r2, [r4, #0]
 8003648:	f8cd 9004 	str.w	r9, [sp, #4]
 800364c:	e7a8      	b.n	80035a0 <_scanf_float+0x18c>
 800364e:	6822      	ldr	r2, [r4, #0]
 8003650:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003654:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003658:	d006      	beq.n	8003668 <_scanf_float+0x254>
 800365a:	0550      	lsls	r0, r2, #21
 800365c:	f57f af0c 	bpl.w	8003478 <_scanf_float+0x64>
 8003660:	f1b9 0f00 	cmp.w	r9, #0
 8003664:	f43f af0f 	beq.w	8003486 <_scanf_float+0x72>
 8003668:	0591      	lsls	r1, r2, #22
 800366a:	bf58      	it	pl
 800366c:	9901      	ldrpl	r1, [sp, #4]
 800366e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003672:	bf58      	it	pl
 8003674:	eba9 0101 	subpl.w	r1, r9, r1
 8003678:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800367c:	f04f 0900 	mov.w	r9, #0
 8003680:	bf58      	it	pl
 8003682:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003686:	6022      	str	r2, [r4, #0]
 8003688:	e78a      	b.n	80035a0 <_scanf_float+0x18c>
 800368a:	f04f 0a03 	mov.w	sl, #3
 800368e:	e787      	b.n	80035a0 <_scanf_float+0x18c>
 8003690:	4639      	mov	r1, r7
 8003692:	4640      	mov	r0, r8
 8003694:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003698:	4798      	blx	r3
 800369a:	2800      	cmp	r0, #0
 800369c:	f43f aedf 	beq.w	800345e <_scanf_float+0x4a>
 80036a0:	e6ea      	b.n	8003478 <_scanf_float+0x64>
 80036a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036a6:	463a      	mov	r2, r7
 80036a8:	4640      	mov	r0, r8
 80036aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80036ae:	4798      	blx	r3
 80036b0:	6923      	ldr	r3, [r4, #16]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	6123      	str	r3, [r4, #16]
 80036b6:	e6ec      	b.n	8003492 <_scanf_float+0x7e>
 80036b8:	1e6b      	subs	r3, r5, #1
 80036ba:	2b06      	cmp	r3, #6
 80036bc:	d825      	bhi.n	800370a <_scanf_float+0x2f6>
 80036be:	2d02      	cmp	r5, #2
 80036c0:	d836      	bhi.n	8003730 <_scanf_float+0x31c>
 80036c2:	455e      	cmp	r6, fp
 80036c4:	f67f aee8 	bls.w	8003498 <_scanf_float+0x84>
 80036c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036cc:	463a      	mov	r2, r7
 80036ce:	4640      	mov	r0, r8
 80036d0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80036d4:	4798      	blx	r3
 80036d6:	6923      	ldr	r3, [r4, #16]
 80036d8:	3b01      	subs	r3, #1
 80036da:	6123      	str	r3, [r4, #16]
 80036dc:	e7f1      	b.n	80036c2 <_scanf_float+0x2ae>
 80036de:	9802      	ldr	r0, [sp, #8]
 80036e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80036e8:	463a      	mov	r2, r7
 80036ea:	9002      	str	r0, [sp, #8]
 80036ec:	4640      	mov	r0, r8
 80036ee:	4798      	blx	r3
 80036f0:	6923      	ldr	r3, [r4, #16]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	6123      	str	r3, [r4, #16]
 80036f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80036fa:	fa5f fa8a 	uxtb.w	sl, sl
 80036fe:	f1ba 0f02 	cmp.w	sl, #2
 8003702:	d1ec      	bne.n	80036de <_scanf_float+0x2ca>
 8003704:	3d03      	subs	r5, #3
 8003706:	b2ed      	uxtb	r5, r5
 8003708:	1b76      	subs	r6, r6, r5
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	05da      	lsls	r2, r3, #23
 800370e:	d52f      	bpl.n	8003770 <_scanf_float+0x35c>
 8003710:	055b      	lsls	r3, r3, #21
 8003712:	d510      	bpl.n	8003736 <_scanf_float+0x322>
 8003714:	455e      	cmp	r6, fp
 8003716:	f67f aebf 	bls.w	8003498 <_scanf_float+0x84>
 800371a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800371e:	463a      	mov	r2, r7
 8003720:	4640      	mov	r0, r8
 8003722:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003726:	4798      	blx	r3
 8003728:	6923      	ldr	r3, [r4, #16]
 800372a:	3b01      	subs	r3, #1
 800372c:	6123      	str	r3, [r4, #16]
 800372e:	e7f1      	b.n	8003714 <_scanf_float+0x300>
 8003730:	46aa      	mov	sl, r5
 8003732:	9602      	str	r6, [sp, #8]
 8003734:	e7df      	b.n	80036f6 <_scanf_float+0x2e2>
 8003736:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800373a:	6923      	ldr	r3, [r4, #16]
 800373c:	2965      	cmp	r1, #101	; 0x65
 800373e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003742:	f106 35ff 	add.w	r5, r6, #4294967295
 8003746:	6123      	str	r3, [r4, #16]
 8003748:	d00c      	beq.n	8003764 <_scanf_float+0x350>
 800374a:	2945      	cmp	r1, #69	; 0x45
 800374c:	d00a      	beq.n	8003764 <_scanf_float+0x350>
 800374e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003752:	463a      	mov	r2, r7
 8003754:	4640      	mov	r0, r8
 8003756:	4798      	blx	r3
 8003758:	6923      	ldr	r3, [r4, #16]
 800375a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800375e:	3b01      	subs	r3, #1
 8003760:	1eb5      	subs	r5, r6, #2
 8003762:	6123      	str	r3, [r4, #16]
 8003764:	463a      	mov	r2, r7
 8003766:	4640      	mov	r0, r8
 8003768:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800376c:	4798      	blx	r3
 800376e:	462e      	mov	r6, r5
 8003770:	6825      	ldr	r5, [r4, #0]
 8003772:	f015 0510 	ands.w	r5, r5, #16
 8003776:	d159      	bne.n	800382c <_scanf_float+0x418>
 8003778:	7035      	strb	r5, [r6, #0]
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003784:	d11c      	bne.n	80037c0 <_scanf_float+0x3ac>
 8003786:	9b01      	ldr	r3, [sp, #4]
 8003788:	454b      	cmp	r3, r9
 800378a:	eba3 0209 	sub.w	r2, r3, r9
 800378e:	d124      	bne.n	80037da <_scanf_float+0x3c6>
 8003790:	2200      	movs	r2, #0
 8003792:	4659      	mov	r1, fp
 8003794:	4640      	mov	r0, r8
 8003796:	f000 fe9f 	bl	80044d8 <_strtod_r>
 800379a:	f8d4 c000 	ldr.w	ip, [r4]
 800379e:	9b03      	ldr	r3, [sp, #12]
 80037a0:	f01c 0f02 	tst.w	ip, #2
 80037a4:	4606      	mov	r6, r0
 80037a6:	460f      	mov	r7, r1
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	d021      	beq.n	80037f0 <_scanf_float+0x3dc>
 80037ac:	9903      	ldr	r1, [sp, #12]
 80037ae:	1d1a      	adds	r2, r3, #4
 80037b0:	600a      	str	r2, [r1, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	e9c3 6700 	strd	r6, r7, [r3]
 80037b8:	68e3      	ldr	r3, [r4, #12]
 80037ba:	3301      	adds	r3, #1
 80037bc:	60e3      	str	r3, [r4, #12]
 80037be:	e66c      	b.n	800349a <_scanf_float+0x86>
 80037c0:	9b04      	ldr	r3, [sp, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0e4      	beq.n	8003790 <_scanf_float+0x37c>
 80037c6:	9905      	ldr	r1, [sp, #20]
 80037c8:	230a      	movs	r3, #10
 80037ca:	462a      	mov	r2, r5
 80037cc:	4640      	mov	r0, r8
 80037ce:	3101      	adds	r1, #1
 80037d0:	f000 ff1a 	bl	8004608 <_strtol_r>
 80037d4:	9b04      	ldr	r3, [sp, #16]
 80037d6:	9e05      	ldr	r6, [sp, #20]
 80037d8:	1ac2      	subs	r2, r0, r3
 80037da:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80037de:	429e      	cmp	r6, r3
 80037e0:	bf28      	it	cs
 80037e2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80037e6:	4630      	mov	r0, r6
 80037e8:	4911      	ldr	r1, [pc, #68]	; (8003830 <_scanf_float+0x41c>)
 80037ea:	f000 f829 	bl	8003840 <siprintf>
 80037ee:	e7cf      	b.n	8003790 <_scanf_float+0x37c>
 80037f0:	f01c 0f04 	tst.w	ip, #4
 80037f4:	f103 0e04 	add.w	lr, r3, #4
 80037f8:	d003      	beq.n	8003802 <_scanf_float+0x3ee>
 80037fa:	9903      	ldr	r1, [sp, #12]
 80037fc:	f8c1 e000 	str.w	lr, [r1]
 8003800:	e7d7      	b.n	80037b2 <_scanf_float+0x39e>
 8003802:	9a03      	ldr	r2, [sp, #12]
 8003804:	f8c2 e000 	str.w	lr, [r2]
 8003808:	f8d3 8000 	ldr.w	r8, [r3]
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	f7fd f8fc 	bl	8000a0c <__aeabi_dcmpun>
 8003814:	b128      	cbz	r0, 8003822 <_scanf_float+0x40e>
 8003816:	4807      	ldr	r0, [pc, #28]	; (8003834 <_scanf_float+0x420>)
 8003818:	f000 f80e 	bl	8003838 <nanf>
 800381c:	f8c8 0000 	str.w	r0, [r8]
 8003820:	e7ca      	b.n	80037b8 <_scanf_float+0x3a4>
 8003822:	4630      	mov	r0, r6
 8003824:	4639      	mov	r1, r7
 8003826:	f7fd f94f 	bl	8000ac8 <__aeabi_d2f>
 800382a:	e7f7      	b.n	800381c <_scanf_float+0x408>
 800382c:	2500      	movs	r5, #0
 800382e:	e634      	b.n	800349a <_scanf_float+0x86>
 8003830:	08007428 	.word	0x08007428
 8003834:	08007840 	.word	0x08007840

08003838 <nanf>:
 8003838:	4800      	ldr	r0, [pc, #0]	; (800383c <nanf+0x4>)
 800383a:	4770      	bx	lr
 800383c:	7fc00000 	.word	0x7fc00000

08003840 <siprintf>:
 8003840:	b40e      	push	{r1, r2, r3}
 8003842:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003846:	b500      	push	{lr}
 8003848:	b09c      	sub	sp, #112	; 0x70
 800384a:	ab1d      	add	r3, sp, #116	; 0x74
 800384c:	9002      	str	r0, [sp, #8]
 800384e:	9006      	str	r0, [sp, #24]
 8003850:	9107      	str	r1, [sp, #28]
 8003852:	9104      	str	r1, [sp, #16]
 8003854:	4808      	ldr	r0, [pc, #32]	; (8003878 <siprintf+0x38>)
 8003856:	4909      	ldr	r1, [pc, #36]	; (800387c <siprintf+0x3c>)
 8003858:	f853 2b04 	ldr.w	r2, [r3], #4
 800385c:	9105      	str	r1, [sp, #20]
 800385e:	6800      	ldr	r0, [r0, #0]
 8003860:	a902      	add	r1, sp, #8
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	f002 feb4 	bl	80065d0 <_svfiprintf_r>
 8003868:	2200      	movs	r2, #0
 800386a:	9b02      	ldr	r3, [sp, #8]
 800386c:	701a      	strb	r2, [r3, #0]
 800386e:	b01c      	add	sp, #112	; 0x70
 8003870:	f85d eb04 	ldr.w	lr, [sp], #4
 8003874:	b003      	add	sp, #12
 8003876:	4770      	bx	lr
 8003878:	2000000c 	.word	0x2000000c
 800387c:	ffff0208 	.word	0xffff0208

08003880 <strstr>:
 8003880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003882:	780c      	ldrb	r4, [r1, #0]
 8003884:	b164      	cbz	r4, 80038a0 <strstr+0x20>
 8003886:	4603      	mov	r3, r0
 8003888:	781a      	ldrb	r2, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	1c5e      	adds	r6, r3, #1
 800388e:	b90a      	cbnz	r2, 8003894 <strstr+0x14>
 8003890:	4610      	mov	r0, r2
 8003892:	e005      	b.n	80038a0 <strstr+0x20>
 8003894:	4294      	cmp	r4, r2
 8003896:	d108      	bne.n	80038aa <strstr+0x2a>
 8003898:	460d      	mov	r5, r1
 800389a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800389e:	b902      	cbnz	r2, 80038a2 <strstr+0x22>
 80038a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80038a6:	4297      	cmp	r7, r2
 80038a8:	d0f7      	beq.n	800389a <strstr+0x1a>
 80038aa:	4633      	mov	r3, r6
 80038ac:	e7ec      	b.n	8003888 <strstr+0x8>

080038ae <sulp>:
 80038ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038b2:	460f      	mov	r7, r1
 80038b4:	4690      	mov	r8, r2
 80038b6:	f002 fc33 	bl	8006120 <__ulp>
 80038ba:	4604      	mov	r4, r0
 80038bc:	460d      	mov	r5, r1
 80038be:	f1b8 0f00 	cmp.w	r8, #0
 80038c2:	d011      	beq.n	80038e8 <sulp+0x3a>
 80038c4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80038c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	dd0b      	ble.n	80038e8 <sulp+0x3a>
 80038d0:	2400      	movs	r4, #0
 80038d2:	051b      	lsls	r3, r3, #20
 80038d4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80038d8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80038dc:	4622      	mov	r2, r4
 80038de:	462b      	mov	r3, r5
 80038e0:	f7fc fdfa 	bl	80004d8 <__aeabi_dmul>
 80038e4:	4604      	mov	r4, r0
 80038e6:	460d      	mov	r5, r1
 80038e8:	4620      	mov	r0, r4
 80038ea:	4629      	mov	r1, r5
 80038ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080038f0 <_strtod_l>:
 80038f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f4:	469b      	mov	fp, r3
 80038f6:	2300      	movs	r3, #0
 80038f8:	b0a1      	sub	sp, #132	; 0x84
 80038fa:	931c      	str	r3, [sp, #112]	; 0x70
 80038fc:	4ba1      	ldr	r3, [pc, #644]	; (8003b84 <_strtod_l+0x294>)
 80038fe:	4682      	mov	sl, r0
 8003900:	681f      	ldr	r7, [r3, #0]
 8003902:	460e      	mov	r6, r1
 8003904:	4638      	mov	r0, r7
 8003906:	9217      	str	r2, [sp, #92]	; 0x5c
 8003908:	f7fc fc22 	bl	8000150 <strlen>
 800390c:	f04f 0800 	mov.w	r8, #0
 8003910:	4604      	mov	r4, r0
 8003912:	f04f 0900 	mov.w	r9, #0
 8003916:	961b      	str	r6, [sp, #108]	; 0x6c
 8003918:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800391a:	781a      	ldrb	r2, [r3, #0]
 800391c:	2a2b      	cmp	r2, #43	; 0x2b
 800391e:	d04c      	beq.n	80039ba <_strtod_l+0xca>
 8003920:	d83a      	bhi.n	8003998 <_strtod_l+0xa8>
 8003922:	2a0d      	cmp	r2, #13
 8003924:	d833      	bhi.n	800398e <_strtod_l+0x9e>
 8003926:	2a08      	cmp	r2, #8
 8003928:	d833      	bhi.n	8003992 <_strtod_l+0xa2>
 800392a:	2a00      	cmp	r2, #0
 800392c:	d03d      	beq.n	80039aa <_strtod_l+0xba>
 800392e:	2300      	movs	r3, #0
 8003930:	930c      	str	r3, [sp, #48]	; 0x30
 8003932:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003934:	782b      	ldrb	r3, [r5, #0]
 8003936:	2b30      	cmp	r3, #48	; 0x30
 8003938:	f040 80af 	bne.w	8003a9a <_strtod_l+0x1aa>
 800393c:	786b      	ldrb	r3, [r5, #1]
 800393e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003942:	2b58      	cmp	r3, #88	; 0x58
 8003944:	d16c      	bne.n	8003a20 <_strtod_l+0x130>
 8003946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003948:	4650      	mov	r0, sl
 800394a:	9301      	str	r3, [sp, #4]
 800394c:	ab1c      	add	r3, sp, #112	; 0x70
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	4a8d      	ldr	r2, [pc, #564]	; (8003b88 <_strtod_l+0x298>)
 8003952:	f8cd b008 	str.w	fp, [sp, #8]
 8003956:	ab1d      	add	r3, sp, #116	; 0x74
 8003958:	a91b      	add	r1, sp, #108	; 0x6c
 800395a:	f001 fd47 	bl	80053ec <__gethex>
 800395e:	f010 0607 	ands.w	r6, r0, #7
 8003962:	4604      	mov	r4, r0
 8003964:	d005      	beq.n	8003972 <_strtod_l+0x82>
 8003966:	2e06      	cmp	r6, #6
 8003968:	d129      	bne.n	80039be <_strtod_l+0xce>
 800396a:	2300      	movs	r3, #0
 800396c:	3501      	adds	r5, #1
 800396e:	951b      	str	r5, [sp, #108]	; 0x6c
 8003970:	930c      	str	r3, [sp, #48]	; 0x30
 8003972:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003974:	2b00      	cmp	r3, #0
 8003976:	f040 8596 	bne.w	80044a6 <_strtod_l+0xbb6>
 800397a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800397c:	b1d3      	cbz	r3, 80039b4 <_strtod_l+0xc4>
 800397e:	4642      	mov	r2, r8
 8003980:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	b021      	add	sp, #132	; 0x84
 800398a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800398e:	2a20      	cmp	r2, #32
 8003990:	d1cd      	bne.n	800392e <_strtod_l+0x3e>
 8003992:	3301      	adds	r3, #1
 8003994:	931b      	str	r3, [sp, #108]	; 0x6c
 8003996:	e7bf      	b.n	8003918 <_strtod_l+0x28>
 8003998:	2a2d      	cmp	r2, #45	; 0x2d
 800399a:	d1c8      	bne.n	800392e <_strtod_l+0x3e>
 800399c:	2201      	movs	r2, #1
 800399e:	920c      	str	r2, [sp, #48]	; 0x30
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	921b      	str	r2, [sp, #108]	; 0x6c
 80039a4:	785b      	ldrb	r3, [r3, #1]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1c3      	bne.n	8003932 <_strtod_l+0x42>
 80039aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80039ac:	961b      	str	r6, [sp, #108]	; 0x6c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f040 8577 	bne.w	80044a2 <_strtod_l+0xbb2>
 80039b4:	4642      	mov	r2, r8
 80039b6:	464b      	mov	r3, r9
 80039b8:	e7e4      	b.n	8003984 <_strtod_l+0x94>
 80039ba:	2200      	movs	r2, #0
 80039bc:	e7ef      	b.n	800399e <_strtod_l+0xae>
 80039be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80039c0:	b13a      	cbz	r2, 80039d2 <_strtod_l+0xe2>
 80039c2:	2135      	movs	r1, #53	; 0x35
 80039c4:	a81e      	add	r0, sp, #120	; 0x78
 80039c6:	f002 fcaf 	bl	8006328 <__copybits>
 80039ca:	4650      	mov	r0, sl
 80039cc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80039ce:	f002 f877 	bl	8005ac0 <_Bfree>
 80039d2:	3e01      	subs	r6, #1
 80039d4:	2e05      	cmp	r6, #5
 80039d6:	d807      	bhi.n	80039e8 <_strtod_l+0xf8>
 80039d8:	e8df f006 	tbb	[pc, r6]
 80039dc:	1d180b0e 	.word	0x1d180b0e
 80039e0:	030e      	.short	0x030e
 80039e2:	f04f 0900 	mov.w	r9, #0
 80039e6:	46c8      	mov	r8, r9
 80039e8:	0721      	lsls	r1, r4, #28
 80039ea:	d5c2      	bpl.n	8003972 <_strtod_l+0x82>
 80039ec:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80039f0:	e7bf      	b.n	8003972 <_strtod_l+0x82>
 80039f2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80039f6:	e7f7      	b.n	80039e8 <_strtod_l+0xf8>
 80039f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80039fa:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80039fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003a02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a06:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003a0a:	e7ed      	b.n	80039e8 <_strtod_l+0xf8>
 8003a0c:	f04f 0800 	mov.w	r8, #0
 8003a10:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003b8c <_strtod_l+0x29c>
 8003a14:	e7e8      	b.n	80039e8 <_strtod_l+0xf8>
 8003a16:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003a1a:	f04f 38ff 	mov.w	r8, #4294967295
 8003a1e:	e7e3      	b.n	80039e8 <_strtod_l+0xf8>
 8003a20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	921b      	str	r2, [sp, #108]	; 0x6c
 8003a26:	785b      	ldrb	r3, [r3, #1]
 8003a28:	2b30      	cmp	r3, #48	; 0x30
 8003a2a:	d0f9      	beq.n	8003a20 <_strtod_l+0x130>
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0a0      	beq.n	8003972 <_strtod_l+0x82>
 8003a30:	2301      	movs	r3, #1
 8003a32:	9307      	str	r3, [sp, #28]
 8003a34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a36:	220a      	movs	r2, #10
 8003a38:	9308      	str	r3, [sp, #32]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	469b      	mov	fp, r3
 8003a3e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003a42:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003a44:	7805      	ldrb	r5, [r0, #0]
 8003a46:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003a4a:	b2d9      	uxtb	r1, r3
 8003a4c:	2909      	cmp	r1, #9
 8003a4e:	d926      	bls.n	8003a9e <_strtod_l+0x1ae>
 8003a50:	4622      	mov	r2, r4
 8003a52:	4639      	mov	r1, r7
 8003a54:	f002 fed2 	bl	80067fc <strncmp>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	d032      	beq.n	8003ac2 <_strtod_l+0x1d2>
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	462b      	mov	r3, r5
 8003a60:	465c      	mov	r4, fp
 8003a62:	4602      	mov	r2, r0
 8003a64:	9004      	str	r0, [sp, #16]
 8003a66:	2b65      	cmp	r3, #101	; 0x65
 8003a68:	d001      	beq.n	8003a6e <_strtod_l+0x17e>
 8003a6a:	2b45      	cmp	r3, #69	; 0x45
 8003a6c:	d113      	bne.n	8003a96 <_strtod_l+0x1a6>
 8003a6e:	b91c      	cbnz	r4, 8003a78 <_strtod_l+0x188>
 8003a70:	9b07      	ldr	r3, [sp, #28]
 8003a72:	4303      	orrs	r3, r0
 8003a74:	d099      	beq.n	80039aa <_strtod_l+0xba>
 8003a76:	2400      	movs	r4, #0
 8003a78:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8003a7a:	1c73      	adds	r3, r6, #1
 8003a7c:	931b      	str	r3, [sp, #108]	; 0x6c
 8003a7e:	7873      	ldrb	r3, [r6, #1]
 8003a80:	2b2b      	cmp	r3, #43	; 0x2b
 8003a82:	d078      	beq.n	8003b76 <_strtod_l+0x286>
 8003a84:	2b2d      	cmp	r3, #45	; 0x2d
 8003a86:	d07b      	beq.n	8003b80 <_strtod_l+0x290>
 8003a88:	2700      	movs	r7, #0
 8003a8a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003a8e:	2909      	cmp	r1, #9
 8003a90:	f240 8082 	bls.w	8003b98 <_strtod_l+0x2a8>
 8003a94:	961b      	str	r6, [sp, #108]	; 0x6c
 8003a96:	2500      	movs	r5, #0
 8003a98:	e09e      	b.n	8003bd8 <_strtod_l+0x2e8>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e7c9      	b.n	8003a32 <_strtod_l+0x142>
 8003a9e:	f1bb 0f08 	cmp.w	fp, #8
 8003aa2:	bfd5      	itete	le
 8003aa4:	9906      	ldrle	r1, [sp, #24]
 8003aa6:	9905      	ldrgt	r1, [sp, #20]
 8003aa8:	fb02 3301 	mlale	r3, r2, r1, r3
 8003aac:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003ab0:	f100 0001 	add.w	r0, r0, #1
 8003ab4:	bfd4      	ite	le
 8003ab6:	9306      	strle	r3, [sp, #24]
 8003ab8:	9305      	strgt	r3, [sp, #20]
 8003aba:	f10b 0b01 	add.w	fp, fp, #1
 8003abe:	901b      	str	r0, [sp, #108]	; 0x6c
 8003ac0:	e7bf      	b.n	8003a42 <_strtod_l+0x152>
 8003ac2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ac4:	191a      	adds	r2, r3, r4
 8003ac6:	921b      	str	r2, [sp, #108]	; 0x6c
 8003ac8:	5d1b      	ldrb	r3, [r3, r4]
 8003aca:	f1bb 0f00 	cmp.w	fp, #0
 8003ace:	d036      	beq.n	8003b3e <_strtod_l+0x24e>
 8003ad0:	465c      	mov	r4, fp
 8003ad2:	9004      	str	r0, [sp, #16]
 8003ad4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003ad8:	2a09      	cmp	r2, #9
 8003ada:	d912      	bls.n	8003b02 <_strtod_l+0x212>
 8003adc:	2201      	movs	r2, #1
 8003ade:	e7c2      	b.n	8003a66 <_strtod_l+0x176>
 8003ae0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	921b      	str	r2, [sp, #108]	; 0x6c
 8003ae8:	785b      	ldrb	r3, [r3, #1]
 8003aea:	2b30      	cmp	r3, #48	; 0x30
 8003aec:	d0f8      	beq.n	8003ae0 <_strtod_l+0x1f0>
 8003aee:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003af2:	2a08      	cmp	r2, #8
 8003af4:	f200 84dc 	bhi.w	80044b0 <_strtod_l+0xbc0>
 8003af8:	9004      	str	r0, [sp, #16]
 8003afa:	2000      	movs	r0, #0
 8003afc:	4604      	mov	r4, r0
 8003afe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003b00:	9208      	str	r2, [sp, #32]
 8003b02:	3b30      	subs	r3, #48	; 0x30
 8003b04:	f100 0201 	add.w	r2, r0, #1
 8003b08:	d013      	beq.n	8003b32 <_strtod_l+0x242>
 8003b0a:	9904      	ldr	r1, [sp, #16]
 8003b0c:	1905      	adds	r5, r0, r4
 8003b0e:	4411      	add	r1, r2
 8003b10:	9104      	str	r1, [sp, #16]
 8003b12:	4622      	mov	r2, r4
 8003b14:	210a      	movs	r1, #10
 8003b16:	42aa      	cmp	r2, r5
 8003b18:	d113      	bne.n	8003b42 <_strtod_l+0x252>
 8003b1a:	1822      	adds	r2, r4, r0
 8003b1c:	2a08      	cmp	r2, #8
 8003b1e:	f104 0401 	add.w	r4, r4, #1
 8003b22:	4404      	add	r4, r0
 8003b24:	dc1b      	bgt.n	8003b5e <_strtod_l+0x26e>
 8003b26:	220a      	movs	r2, #10
 8003b28:	9906      	ldr	r1, [sp, #24]
 8003b2a:	fb02 3301 	mla	r3, r2, r1, r3
 8003b2e:	9306      	str	r3, [sp, #24]
 8003b30:	2200      	movs	r2, #0
 8003b32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b34:	4610      	mov	r0, r2
 8003b36:	1c59      	adds	r1, r3, #1
 8003b38:	911b      	str	r1, [sp, #108]	; 0x6c
 8003b3a:	785b      	ldrb	r3, [r3, #1]
 8003b3c:	e7ca      	b.n	8003ad4 <_strtod_l+0x1e4>
 8003b3e:	4658      	mov	r0, fp
 8003b40:	e7d3      	b.n	8003aea <_strtod_l+0x1fa>
 8003b42:	2a08      	cmp	r2, #8
 8003b44:	dc04      	bgt.n	8003b50 <_strtod_l+0x260>
 8003b46:	9f06      	ldr	r7, [sp, #24]
 8003b48:	434f      	muls	r7, r1
 8003b4a:	9706      	str	r7, [sp, #24]
 8003b4c:	3201      	adds	r2, #1
 8003b4e:	e7e2      	b.n	8003b16 <_strtod_l+0x226>
 8003b50:	1c57      	adds	r7, r2, #1
 8003b52:	2f10      	cmp	r7, #16
 8003b54:	bfde      	ittt	le
 8003b56:	9f05      	ldrle	r7, [sp, #20]
 8003b58:	434f      	mulle	r7, r1
 8003b5a:	9705      	strle	r7, [sp, #20]
 8003b5c:	e7f6      	b.n	8003b4c <_strtod_l+0x25c>
 8003b5e:	2c10      	cmp	r4, #16
 8003b60:	bfdf      	itttt	le
 8003b62:	220a      	movle	r2, #10
 8003b64:	9905      	ldrle	r1, [sp, #20]
 8003b66:	fb02 3301 	mlale	r3, r2, r1, r3
 8003b6a:	9305      	strle	r3, [sp, #20]
 8003b6c:	e7e0      	b.n	8003b30 <_strtod_l+0x240>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	2201      	movs	r2, #1
 8003b72:	9304      	str	r3, [sp, #16]
 8003b74:	e77c      	b.n	8003a70 <_strtod_l+0x180>
 8003b76:	2700      	movs	r7, #0
 8003b78:	1cb3      	adds	r3, r6, #2
 8003b7a:	931b      	str	r3, [sp, #108]	; 0x6c
 8003b7c:	78b3      	ldrb	r3, [r6, #2]
 8003b7e:	e784      	b.n	8003a8a <_strtod_l+0x19a>
 8003b80:	2701      	movs	r7, #1
 8003b82:	e7f9      	b.n	8003b78 <_strtod_l+0x288>
 8003b84:	08007680 	.word	0x08007680
 8003b88:	08007430 	.word	0x08007430
 8003b8c:	7ff00000 	.word	0x7ff00000
 8003b90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b92:	1c59      	adds	r1, r3, #1
 8003b94:	911b      	str	r1, [sp, #108]	; 0x6c
 8003b96:	785b      	ldrb	r3, [r3, #1]
 8003b98:	2b30      	cmp	r3, #48	; 0x30
 8003b9a:	d0f9      	beq.n	8003b90 <_strtod_l+0x2a0>
 8003b9c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8003ba0:	2908      	cmp	r1, #8
 8003ba2:	f63f af78 	bhi.w	8003a96 <_strtod_l+0x1a6>
 8003ba6:	f04f 0e0a 	mov.w	lr, #10
 8003baa:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8003bae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8003bb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bb4:	1c59      	adds	r1, r3, #1
 8003bb6:	911b      	str	r1, [sp, #108]	; 0x6c
 8003bb8:	785b      	ldrb	r3, [r3, #1]
 8003bba:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8003bbe:	2d09      	cmp	r5, #9
 8003bc0:	d935      	bls.n	8003c2e <_strtod_l+0x33e>
 8003bc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003bc4:	1b49      	subs	r1, r1, r5
 8003bc6:	2908      	cmp	r1, #8
 8003bc8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8003bcc:	dc02      	bgt.n	8003bd4 <_strtod_l+0x2e4>
 8003bce:	4565      	cmp	r5, ip
 8003bd0:	bfa8      	it	ge
 8003bd2:	4665      	movge	r5, ip
 8003bd4:	b107      	cbz	r7, 8003bd8 <_strtod_l+0x2e8>
 8003bd6:	426d      	negs	r5, r5
 8003bd8:	2c00      	cmp	r4, #0
 8003bda:	d14c      	bne.n	8003c76 <_strtod_l+0x386>
 8003bdc:	9907      	ldr	r1, [sp, #28]
 8003bde:	4301      	orrs	r1, r0
 8003be0:	f47f aec7 	bne.w	8003972 <_strtod_l+0x82>
 8003be4:	2a00      	cmp	r2, #0
 8003be6:	f47f aee0 	bne.w	80039aa <_strtod_l+0xba>
 8003bea:	2b69      	cmp	r3, #105	; 0x69
 8003bec:	d026      	beq.n	8003c3c <_strtod_l+0x34c>
 8003bee:	dc23      	bgt.n	8003c38 <_strtod_l+0x348>
 8003bf0:	2b49      	cmp	r3, #73	; 0x49
 8003bf2:	d023      	beq.n	8003c3c <_strtod_l+0x34c>
 8003bf4:	2b4e      	cmp	r3, #78	; 0x4e
 8003bf6:	f47f aed8 	bne.w	80039aa <_strtod_l+0xba>
 8003bfa:	499c      	ldr	r1, [pc, #624]	; (8003e6c <_strtod_l+0x57c>)
 8003bfc:	a81b      	add	r0, sp, #108	; 0x6c
 8003bfe:	f001 fe43 	bl	8005888 <__match>
 8003c02:	2800      	cmp	r0, #0
 8003c04:	f43f aed1 	beq.w	80039aa <_strtod_l+0xba>
 8003c08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b28      	cmp	r3, #40	; 0x28
 8003c0e:	d12c      	bne.n	8003c6a <_strtod_l+0x37a>
 8003c10:	4997      	ldr	r1, [pc, #604]	; (8003e70 <_strtod_l+0x580>)
 8003c12:	aa1e      	add	r2, sp, #120	; 0x78
 8003c14:	a81b      	add	r0, sp, #108	; 0x6c
 8003c16:	f001 fe4b 	bl	80058b0 <__hexnan>
 8003c1a:	2805      	cmp	r0, #5
 8003c1c:	d125      	bne.n	8003c6a <_strtod_l+0x37a>
 8003c1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003c20:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8003c24:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003c28:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003c2c:	e6a1      	b.n	8003972 <_strtod_l+0x82>
 8003c2e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8003c32:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003c36:	e7bc      	b.n	8003bb2 <_strtod_l+0x2c2>
 8003c38:	2b6e      	cmp	r3, #110	; 0x6e
 8003c3a:	e7dc      	b.n	8003bf6 <_strtod_l+0x306>
 8003c3c:	498d      	ldr	r1, [pc, #564]	; (8003e74 <_strtod_l+0x584>)
 8003c3e:	a81b      	add	r0, sp, #108	; 0x6c
 8003c40:	f001 fe22 	bl	8005888 <__match>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	f43f aeb0 	beq.w	80039aa <_strtod_l+0xba>
 8003c4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c4c:	498a      	ldr	r1, [pc, #552]	; (8003e78 <_strtod_l+0x588>)
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	a81b      	add	r0, sp, #108	; 0x6c
 8003c52:	931b      	str	r3, [sp, #108]	; 0x6c
 8003c54:	f001 fe18 	bl	8005888 <__match>
 8003c58:	b910      	cbnz	r0, 8003c60 <_strtod_l+0x370>
 8003c5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	931b      	str	r3, [sp, #108]	; 0x6c
 8003c60:	f04f 0800 	mov.w	r8, #0
 8003c64:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8003e88 <_strtod_l+0x598>
 8003c68:	e683      	b.n	8003972 <_strtod_l+0x82>
 8003c6a:	4884      	ldr	r0, [pc, #528]	; (8003e7c <_strtod_l+0x58c>)
 8003c6c:	f002 fdb0 	bl	80067d0 <nan>
 8003c70:	4680      	mov	r8, r0
 8003c72:	4689      	mov	r9, r1
 8003c74:	e67d      	b.n	8003972 <_strtod_l+0x82>
 8003c76:	9b04      	ldr	r3, [sp, #16]
 8003c78:	f1bb 0f00 	cmp.w	fp, #0
 8003c7c:	bf08      	it	eq
 8003c7e:	46a3      	moveq	fp, r4
 8003c80:	1aeb      	subs	r3, r5, r3
 8003c82:	2c10      	cmp	r4, #16
 8003c84:	9806      	ldr	r0, [sp, #24]
 8003c86:	4626      	mov	r6, r4
 8003c88:	9307      	str	r3, [sp, #28]
 8003c8a:	bfa8      	it	ge
 8003c8c:	2610      	movge	r6, #16
 8003c8e:	f7fc fba9 	bl	80003e4 <__aeabi_ui2d>
 8003c92:	2c09      	cmp	r4, #9
 8003c94:	4680      	mov	r8, r0
 8003c96:	4689      	mov	r9, r1
 8003c98:	dd13      	ble.n	8003cc2 <_strtod_l+0x3d2>
 8003c9a:	4b79      	ldr	r3, [pc, #484]	; (8003e80 <_strtod_l+0x590>)
 8003c9c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003ca0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003ca4:	f7fc fc18 	bl	80004d8 <__aeabi_dmul>
 8003ca8:	4680      	mov	r8, r0
 8003caa:	9805      	ldr	r0, [sp, #20]
 8003cac:	4689      	mov	r9, r1
 8003cae:	f7fc fb99 	bl	80003e4 <__aeabi_ui2d>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4640      	mov	r0, r8
 8003cb8:	4649      	mov	r1, r9
 8003cba:	f7fc fa57 	bl	800016c <__adddf3>
 8003cbe:	4680      	mov	r8, r0
 8003cc0:	4689      	mov	r9, r1
 8003cc2:	2c0f      	cmp	r4, #15
 8003cc4:	dc36      	bgt.n	8003d34 <_strtod_l+0x444>
 8003cc6:	9b07      	ldr	r3, [sp, #28]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f43f ae52 	beq.w	8003972 <_strtod_l+0x82>
 8003cce:	dd22      	ble.n	8003d16 <_strtod_l+0x426>
 8003cd0:	2b16      	cmp	r3, #22
 8003cd2:	dc09      	bgt.n	8003ce8 <_strtod_l+0x3f8>
 8003cd4:	4c6a      	ldr	r4, [pc, #424]	; (8003e80 <_strtod_l+0x590>)
 8003cd6:	4642      	mov	r2, r8
 8003cd8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8003cdc:	464b      	mov	r3, r9
 8003cde:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003ce2:	f7fc fbf9 	bl	80004d8 <__aeabi_dmul>
 8003ce6:	e7c3      	b.n	8003c70 <_strtod_l+0x380>
 8003ce8:	9a07      	ldr	r2, [sp, #28]
 8003cea:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	db20      	blt.n	8003d34 <_strtod_l+0x444>
 8003cf2:	4d63      	ldr	r5, [pc, #396]	; (8003e80 <_strtod_l+0x590>)
 8003cf4:	f1c4 040f 	rsb	r4, r4, #15
 8003cf8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d02:	464b      	mov	r3, r9
 8003d04:	f7fc fbe8 	bl	80004d8 <__aeabi_dmul>
 8003d08:	9b07      	ldr	r3, [sp, #28]
 8003d0a:	1b1c      	subs	r4, r3, r4
 8003d0c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003d10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003d14:	e7e5      	b.n	8003ce2 <_strtod_l+0x3f2>
 8003d16:	9b07      	ldr	r3, [sp, #28]
 8003d18:	3316      	adds	r3, #22
 8003d1a:	db0b      	blt.n	8003d34 <_strtod_l+0x444>
 8003d1c:	9b04      	ldr	r3, [sp, #16]
 8003d1e:	4a58      	ldr	r2, [pc, #352]	; (8003e80 <_strtod_l+0x590>)
 8003d20:	1b5d      	subs	r5, r3, r5
 8003d22:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8003d26:	4640      	mov	r0, r8
 8003d28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003d2c:	4649      	mov	r1, r9
 8003d2e:	f7fc fcfd 	bl	800072c <__aeabi_ddiv>
 8003d32:	e79d      	b.n	8003c70 <_strtod_l+0x380>
 8003d34:	9b07      	ldr	r3, [sp, #28]
 8003d36:	1ba6      	subs	r6, r4, r6
 8003d38:	441e      	add	r6, r3
 8003d3a:	2e00      	cmp	r6, #0
 8003d3c:	dd71      	ble.n	8003e22 <_strtod_l+0x532>
 8003d3e:	f016 030f 	ands.w	r3, r6, #15
 8003d42:	d00a      	beq.n	8003d5a <_strtod_l+0x46a>
 8003d44:	494e      	ldr	r1, [pc, #312]	; (8003e80 <_strtod_l+0x590>)
 8003d46:	4642      	mov	r2, r8
 8003d48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d50:	464b      	mov	r3, r9
 8003d52:	f7fc fbc1 	bl	80004d8 <__aeabi_dmul>
 8003d56:	4680      	mov	r8, r0
 8003d58:	4689      	mov	r9, r1
 8003d5a:	f036 060f 	bics.w	r6, r6, #15
 8003d5e:	d050      	beq.n	8003e02 <_strtod_l+0x512>
 8003d60:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8003d64:	dd27      	ble.n	8003db6 <_strtod_l+0x4c6>
 8003d66:	f04f 0b00 	mov.w	fp, #0
 8003d6a:	f8cd b010 	str.w	fp, [sp, #16]
 8003d6e:	f8cd b020 	str.w	fp, [sp, #32]
 8003d72:	f8cd b018 	str.w	fp, [sp, #24]
 8003d76:	2322      	movs	r3, #34	; 0x22
 8003d78:	f04f 0800 	mov.w	r8, #0
 8003d7c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8003e88 <_strtod_l+0x598>
 8003d80:	f8ca 3000 	str.w	r3, [sl]
 8003d84:	9b08      	ldr	r3, [sp, #32]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f43f adf3 	beq.w	8003972 <_strtod_l+0x82>
 8003d8c:	4650      	mov	r0, sl
 8003d8e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003d90:	f001 fe96 	bl	8005ac0 <_Bfree>
 8003d94:	4650      	mov	r0, sl
 8003d96:	9906      	ldr	r1, [sp, #24]
 8003d98:	f001 fe92 	bl	8005ac0 <_Bfree>
 8003d9c:	4650      	mov	r0, sl
 8003d9e:	9904      	ldr	r1, [sp, #16]
 8003da0:	f001 fe8e 	bl	8005ac0 <_Bfree>
 8003da4:	4650      	mov	r0, sl
 8003da6:	9908      	ldr	r1, [sp, #32]
 8003da8:	f001 fe8a 	bl	8005ac0 <_Bfree>
 8003dac:	4659      	mov	r1, fp
 8003dae:	4650      	mov	r0, sl
 8003db0:	f001 fe86 	bl	8005ac0 <_Bfree>
 8003db4:	e5dd      	b.n	8003972 <_strtod_l+0x82>
 8003db6:	2300      	movs	r3, #0
 8003db8:	4640      	mov	r0, r8
 8003dba:	4649      	mov	r1, r9
 8003dbc:	461f      	mov	r7, r3
 8003dbe:	1136      	asrs	r6, r6, #4
 8003dc0:	2e01      	cmp	r6, #1
 8003dc2:	dc21      	bgt.n	8003e08 <_strtod_l+0x518>
 8003dc4:	b10b      	cbz	r3, 8003dca <_strtod_l+0x4da>
 8003dc6:	4680      	mov	r8, r0
 8003dc8:	4689      	mov	r9, r1
 8003dca:	4b2e      	ldr	r3, [pc, #184]	; (8003e84 <_strtod_l+0x594>)
 8003dcc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8003dd0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003dd4:	4642      	mov	r2, r8
 8003dd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003dda:	464b      	mov	r3, r9
 8003ddc:	f7fc fb7c 	bl	80004d8 <__aeabi_dmul>
 8003de0:	4b29      	ldr	r3, [pc, #164]	; (8003e88 <_strtod_l+0x598>)
 8003de2:	460a      	mov	r2, r1
 8003de4:	400b      	ands	r3, r1
 8003de6:	4929      	ldr	r1, [pc, #164]	; (8003e8c <_strtod_l+0x59c>)
 8003de8:	4680      	mov	r8, r0
 8003dea:	428b      	cmp	r3, r1
 8003dec:	d8bb      	bhi.n	8003d66 <_strtod_l+0x476>
 8003dee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003df2:	428b      	cmp	r3, r1
 8003df4:	bf86      	itte	hi
 8003df6:	f04f 38ff 	movhi.w	r8, #4294967295
 8003dfa:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8003e90 <_strtod_l+0x5a0>
 8003dfe:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8003e02:	2300      	movs	r3, #0
 8003e04:	9305      	str	r3, [sp, #20]
 8003e06:	e07e      	b.n	8003f06 <_strtod_l+0x616>
 8003e08:	07f2      	lsls	r2, r6, #31
 8003e0a:	d507      	bpl.n	8003e1c <_strtod_l+0x52c>
 8003e0c:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <_strtod_l+0x594>)
 8003e0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	f7fc fb5f 	bl	80004d8 <__aeabi_dmul>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	3701      	adds	r7, #1
 8003e1e:	1076      	asrs	r6, r6, #1
 8003e20:	e7ce      	b.n	8003dc0 <_strtod_l+0x4d0>
 8003e22:	d0ee      	beq.n	8003e02 <_strtod_l+0x512>
 8003e24:	4276      	negs	r6, r6
 8003e26:	f016 020f 	ands.w	r2, r6, #15
 8003e2a:	d00a      	beq.n	8003e42 <_strtod_l+0x552>
 8003e2c:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <_strtod_l+0x590>)
 8003e2e:	4640      	mov	r0, r8
 8003e30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e34:	4649      	mov	r1, r9
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	f7fc fc77 	bl	800072c <__aeabi_ddiv>
 8003e3e:	4680      	mov	r8, r0
 8003e40:	4689      	mov	r9, r1
 8003e42:	1136      	asrs	r6, r6, #4
 8003e44:	d0dd      	beq.n	8003e02 <_strtod_l+0x512>
 8003e46:	2e1f      	cmp	r6, #31
 8003e48:	dd24      	ble.n	8003e94 <_strtod_l+0x5a4>
 8003e4a:	f04f 0b00 	mov.w	fp, #0
 8003e4e:	f8cd b010 	str.w	fp, [sp, #16]
 8003e52:	f8cd b020 	str.w	fp, [sp, #32]
 8003e56:	f8cd b018 	str.w	fp, [sp, #24]
 8003e5a:	2322      	movs	r3, #34	; 0x22
 8003e5c:	f04f 0800 	mov.w	r8, #0
 8003e60:	f04f 0900 	mov.w	r9, #0
 8003e64:	f8ca 3000 	str.w	r3, [sl]
 8003e68:	e78c      	b.n	8003d84 <_strtod_l+0x494>
 8003e6a:	bf00      	nop
 8003e6c:	08007401 	.word	0x08007401
 8003e70:	08007444 	.word	0x08007444
 8003e74:	080073f9 	.word	0x080073f9
 8003e78:	08007584 	.word	0x08007584
 8003e7c:	08007840 	.word	0x08007840
 8003e80:	08007720 	.word	0x08007720
 8003e84:	080076f8 	.word	0x080076f8
 8003e88:	7ff00000 	.word	0x7ff00000
 8003e8c:	7ca00000 	.word	0x7ca00000
 8003e90:	7fefffff 	.word	0x7fefffff
 8003e94:	f016 0310 	ands.w	r3, r6, #16
 8003e98:	bf18      	it	ne
 8003e9a:	236a      	movne	r3, #106	; 0x6a
 8003e9c:	4640      	mov	r0, r8
 8003e9e:	9305      	str	r3, [sp, #20]
 8003ea0:	4649      	mov	r1, r9
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	4fb2      	ldr	r7, [pc, #712]	; (8004170 <_strtod_l+0x880>)
 8003ea6:	07f2      	lsls	r2, r6, #31
 8003ea8:	d504      	bpl.n	8003eb4 <_strtod_l+0x5c4>
 8003eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eae:	f7fc fb13 	bl	80004d8 <__aeabi_dmul>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	1076      	asrs	r6, r6, #1
 8003eb6:	f107 0708 	add.w	r7, r7, #8
 8003eba:	d1f4      	bne.n	8003ea6 <_strtod_l+0x5b6>
 8003ebc:	b10b      	cbz	r3, 8003ec2 <_strtod_l+0x5d2>
 8003ebe:	4680      	mov	r8, r0
 8003ec0:	4689      	mov	r9, r1
 8003ec2:	9b05      	ldr	r3, [sp, #20]
 8003ec4:	b1bb      	cbz	r3, 8003ef6 <_strtod_l+0x606>
 8003ec6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8003eca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	4649      	mov	r1, r9
 8003ed2:	dd10      	ble.n	8003ef6 <_strtod_l+0x606>
 8003ed4:	2b1f      	cmp	r3, #31
 8003ed6:	f340 812b 	ble.w	8004130 <_strtod_l+0x840>
 8003eda:	2b34      	cmp	r3, #52	; 0x34
 8003edc:	bfd8      	it	le
 8003ede:	f04f 32ff 	movle.w	r2, #4294967295
 8003ee2:	f04f 0800 	mov.w	r8, #0
 8003ee6:	bfcf      	iteee	gt
 8003ee8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8003eec:	3b20      	suble	r3, #32
 8003eee:	fa02 f303 	lslle.w	r3, r2, r3
 8003ef2:	ea03 0901 	andle.w	r9, r3, r1
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2300      	movs	r3, #0
 8003efa:	4640      	mov	r0, r8
 8003efc:	4649      	mov	r1, r9
 8003efe:	f7fc fd53 	bl	80009a8 <__aeabi_dcmpeq>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d1a1      	bne.n	8003e4a <_strtod_l+0x55a>
 8003f06:	9b06      	ldr	r3, [sp, #24]
 8003f08:	465a      	mov	r2, fp
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	4650      	mov	r0, sl
 8003f0e:	4623      	mov	r3, r4
 8003f10:	9908      	ldr	r1, [sp, #32]
 8003f12:	f001 fe41 	bl	8005b98 <__s2b>
 8003f16:	9008      	str	r0, [sp, #32]
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	f43f af24 	beq.w	8003d66 <_strtod_l+0x476>
 8003f1e:	9b04      	ldr	r3, [sp, #16]
 8003f20:	f04f 0b00 	mov.w	fp, #0
 8003f24:	1b5d      	subs	r5, r3, r5
 8003f26:	9b07      	ldr	r3, [sp, #28]
 8003f28:	f8cd b010 	str.w	fp, [sp, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bfb4      	ite	lt
 8003f30:	462b      	movlt	r3, r5
 8003f32:	2300      	movge	r3, #0
 8003f34:	930e      	str	r3, [sp, #56]	; 0x38
 8003f36:	9b07      	ldr	r3, [sp, #28]
 8003f38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003f3c:	9316      	str	r3, [sp, #88]	; 0x58
 8003f3e:	9b08      	ldr	r3, [sp, #32]
 8003f40:	4650      	mov	r0, sl
 8003f42:	6859      	ldr	r1, [r3, #4]
 8003f44:	f001 fd7c 	bl	8005a40 <_Balloc>
 8003f48:	9006      	str	r0, [sp, #24]
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	f43f af13 	beq.w	8003d76 <_strtod_l+0x486>
 8003f50:	9b08      	ldr	r3, [sp, #32]
 8003f52:	300c      	adds	r0, #12
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	f103 010c 	add.w	r1, r3, #12
 8003f5a:	3202      	adds	r2, #2
 8003f5c:	0092      	lsls	r2, r2, #2
 8003f5e:	f7fe fde3 	bl	8002b28 <memcpy>
 8003f62:	ab1e      	add	r3, sp, #120	; 0x78
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	ab1d      	add	r3, sp, #116	; 0x74
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	4642      	mov	r2, r8
 8003f6c:	464b      	mov	r3, r9
 8003f6e:	4650      	mov	r0, sl
 8003f70:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8003f74:	f002 f94e 	bl	8006214 <__d2b>
 8003f78:	901c      	str	r0, [sp, #112]	; 0x70
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	f43f aefb 	beq.w	8003d76 <_strtod_l+0x486>
 8003f80:	2101      	movs	r1, #1
 8003f82:	4650      	mov	r0, sl
 8003f84:	f001 fea0 	bl	8005cc8 <__i2b>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	9004      	str	r0, [sp, #16]
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	f43f aef2 	beq.w	8003d76 <_strtod_l+0x486>
 8003f92:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8003f94:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003f96:	2d00      	cmp	r5, #0
 8003f98:	bfab      	itete	ge
 8003f9a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8003f9c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8003f9e:	18ee      	addge	r6, r5, r3
 8003fa0:	1b5c      	sublt	r4, r3, r5
 8003fa2:	9b05      	ldr	r3, [sp, #20]
 8003fa4:	bfa8      	it	ge
 8003fa6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8003fa8:	eba5 0503 	sub.w	r5, r5, r3
 8003fac:	4415      	add	r5, r2
 8003fae:	4b71      	ldr	r3, [pc, #452]	; (8004174 <_strtod_l+0x884>)
 8003fb0:	f105 35ff 	add.w	r5, r5, #4294967295
 8003fb4:	bfb8      	it	lt
 8003fb6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8003fb8:	429d      	cmp	r5, r3
 8003fba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003fbe:	f280 80c9 	bge.w	8004154 <_strtod_l+0x864>
 8003fc2:	1b5b      	subs	r3, r3, r5
 8003fc4:	2b1f      	cmp	r3, #31
 8003fc6:	f04f 0701 	mov.w	r7, #1
 8003fca:	eba2 0203 	sub.w	r2, r2, r3
 8003fce:	f300 80b6 	bgt.w	800413e <_strtod_l+0x84e>
 8003fd2:	2500      	movs	r5, #0
 8003fd4:	fa07 f303 	lsl.w	r3, r7, r3
 8003fd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8003fda:	18b7      	adds	r7, r6, r2
 8003fdc:	9b05      	ldr	r3, [sp, #20]
 8003fde:	42be      	cmp	r6, r7
 8003fe0:	4414      	add	r4, r2
 8003fe2:	441c      	add	r4, r3
 8003fe4:	4633      	mov	r3, r6
 8003fe6:	bfa8      	it	ge
 8003fe8:	463b      	movge	r3, r7
 8003fea:	42a3      	cmp	r3, r4
 8003fec:	bfa8      	it	ge
 8003fee:	4623      	movge	r3, r4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bfc2      	ittt	gt
 8003ff4:	1aff      	subgt	r7, r7, r3
 8003ff6:	1ae4      	subgt	r4, r4, r3
 8003ff8:	1af6      	subgt	r6, r6, r3
 8003ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	dd17      	ble.n	8004030 <_strtod_l+0x740>
 8004000:	461a      	mov	r2, r3
 8004002:	4650      	mov	r0, sl
 8004004:	9904      	ldr	r1, [sp, #16]
 8004006:	f001 ff19 	bl	8005e3c <__pow5mult>
 800400a:	9004      	str	r0, [sp, #16]
 800400c:	2800      	cmp	r0, #0
 800400e:	f43f aeb2 	beq.w	8003d76 <_strtod_l+0x486>
 8004012:	4601      	mov	r1, r0
 8004014:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004016:	4650      	mov	r0, sl
 8004018:	f001 fe6c 	bl	8005cf4 <__multiply>
 800401c:	9009      	str	r0, [sp, #36]	; 0x24
 800401e:	2800      	cmp	r0, #0
 8004020:	f43f aea9 	beq.w	8003d76 <_strtod_l+0x486>
 8004024:	4650      	mov	r0, sl
 8004026:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004028:	f001 fd4a 	bl	8005ac0 <_Bfree>
 800402c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800402e:	931c      	str	r3, [sp, #112]	; 0x70
 8004030:	2f00      	cmp	r7, #0
 8004032:	f300 8093 	bgt.w	800415c <_strtod_l+0x86c>
 8004036:	9b07      	ldr	r3, [sp, #28]
 8004038:	2b00      	cmp	r3, #0
 800403a:	dd08      	ble.n	800404e <_strtod_l+0x75e>
 800403c:	4650      	mov	r0, sl
 800403e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004040:	9906      	ldr	r1, [sp, #24]
 8004042:	f001 fefb 	bl	8005e3c <__pow5mult>
 8004046:	9006      	str	r0, [sp, #24]
 8004048:	2800      	cmp	r0, #0
 800404a:	f43f ae94 	beq.w	8003d76 <_strtod_l+0x486>
 800404e:	2c00      	cmp	r4, #0
 8004050:	dd08      	ble.n	8004064 <_strtod_l+0x774>
 8004052:	4622      	mov	r2, r4
 8004054:	4650      	mov	r0, sl
 8004056:	9906      	ldr	r1, [sp, #24]
 8004058:	f001 ff4a 	bl	8005ef0 <__lshift>
 800405c:	9006      	str	r0, [sp, #24]
 800405e:	2800      	cmp	r0, #0
 8004060:	f43f ae89 	beq.w	8003d76 <_strtod_l+0x486>
 8004064:	2e00      	cmp	r6, #0
 8004066:	dd08      	ble.n	800407a <_strtod_l+0x78a>
 8004068:	4632      	mov	r2, r6
 800406a:	4650      	mov	r0, sl
 800406c:	9904      	ldr	r1, [sp, #16]
 800406e:	f001 ff3f 	bl	8005ef0 <__lshift>
 8004072:	9004      	str	r0, [sp, #16]
 8004074:	2800      	cmp	r0, #0
 8004076:	f43f ae7e 	beq.w	8003d76 <_strtod_l+0x486>
 800407a:	4650      	mov	r0, sl
 800407c:	9a06      	ldr	r2, [sp, #24]
 800407e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004080:	f001 ffbe 	bl	8006000 <__mdiff>
 8004084:	4683      	mov	fp, r0
 8004086:	2800      	cmp	r0, #0
 8004088:	f43f ae75 	beq.w	8003d76 <_strtod_l+0x486>
 800408c:	2400      	movs	r4, #0
 800408e:	68c3      	ldr	r3, [r0, #12]
 8004090:	9904      	ldr	r1, [sp, #16]
 8004092:	60c4      	str	r4, [r0, #12]
 8004094:	930d      	str	r3, [sp, #52]	; 0x34
 8004096:	f001 ff97 	bl	8005fc8 <__mcmp>
 800409a:	42a0      	cmp	r0, r4
 800409c:	da70      	bge.n	8004180 <_strtod_l+0x890>
 800409e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040a0:	ea53 0308 	orrs.w	r3, r3, r8
 80040a4:	f040 8096 	bne.w	80041d4 <_strtod_l+0x8e4>
 80040a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f040 8091 	bne.w	80041d4 <_strtod_l+0x8e4>
 80040b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80040b6:	0d1b      	lsrs	r3, r3, #20
 80040b8:	051b      	lsls	r3, r3, #20
 80040ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80040be:	f240 8089 	bls.w	80041d4 <_strtod_l+0x8e4>
 80040c2:	f8db 3014 	ldr.w	r3, [fp, #20]
 80040c6:	b923      	cbnz	r3, 80040d2 <_strtod_l+0x7e2>
 80040c8:	f8db 3010 	ldr.w	r3, [fp, #16]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	f340 8081 	ble.w	80041d4 <_strtod_l+0x8e4>
 80040d2:	4659      	mov	r1, fp
 80040d4:	2201      	movs	r2, #1
 80040d6:	4650      	mov	r0, sl
 80040d8:	f001 ff0a 	bl	8005ef0 <__lshift>
 80040dc:	9904      	ldr	r1, [sp, #16]
 80040de:	4683      	mov	fp, r0
 80040e0:	f001 ff72 	bl	8005fc8 <__mcmp>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	dd75      	ble.n	80041d4 <_strtod_l+0x8e4>
 80040e8:	9905      	ldr	r1, [sp, #20]
 80040ea:	464b      	mov	r3, r9
 80040ec:	4a22      	ldr	r2, [pc, #136]	; (8004178 <_strtod_l+0x888>)
 80040ee:	2900      	cmp	r1, #0
 80040f0:	f000 8091 	beq.w	8004216 <_strtod_l+0x926>
 80040f4:	ea02 0109 	and.w	r1, r2, r9
 80040f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80040fc:	f300 808b 	bgt.w	8004216 <_strtod_l+0x926>
 8004100:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004104:	f77f aea9 	ble.w	8003e5a <_strtod_l+0x56a>
 8004108:	2300      	movs	r3, #0
 800410a:	4a1c      	ldr	r2, [pc, #112]	; (800417c <_strtod_l+0x88c>)
 800410c:	4640      	mov	r0, r8
 800410e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004112:	4649      	mov	r1, r9
 8004114:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004118:	f7fc f9de 	bl	80004d8 <__aeabi_dmul>
 800411c:	460b      	mov	r3, r1
 800411e:	4303      	orrs	r3, r0
 8004120:	bf08      	it	eq
 8004122:	2322      	moveq	r3, #34	; 0x22
 8004124:	4680      	mov	r8, r0
 8004126:	4689      	mov	r9, r1
 8004128:	bf08      	it	eq
 800412a:	f8ca 3000 	streq.w	r3, [sl]
 800412e:	e62d      	b.n	8003d8c <_strtod_l+0x49c>
 8004130:	f04f 32ff 	mov.w	r2, #4294967295
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	ea03 0808 	and.w	r8, r3, r8
 800413c:	e6db      	b.n	8003ef6 <_strtod_l+0x606>
 800413e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004142:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004146:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800414a:	35e2      	adds	r5, #226	; 0xe2
 800414c:	fa07 f505 	lsl.w	r5, r7, r5
 8004150:	970f      	str	r7, [sp, #60]	; 0x3c
 8004152:	e742      	b.n	8003fda <_strtod_l+0x6ea>
 8004154:	2301      	movs	r3, #1
 8004156:	2500      	movs	r5, #0
 8004158:	930f      	str	r3, [sp, #60]	; 0x3c
 800415a:	e73e      	b.n	8003fda <_strtod_l+0x6ea>
 800415c:	463a      	mov	r2, r7
 800415e:	4650      	mov	r0, sl
 8004160:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004162:	f001 fec5 	bl	8005ef0 <__lshift>
 8004166:	901c      	str	r0, [sp, #112]	; 0x70
 8004168:	2800      	cmp	r0, #0
 800416a:	f47f af64 	bne.w	8004036 <_strtod_l+0x746>
 800416e:	e602      	b.n	8003d76 <_strtod_l+0x486>
 8004170:	08007458 	.word	0x08007458
 8004174:	fffffc02 	.word	0xfffffc02
 8004178:	7ff00000 	.word	0x7ff00000
 800417c:	39500000 	.word	0x39500000
 8004180:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004184:	d166      	bne.n	8004254 <_strtod_l+0x964>
 8004186:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004188:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800418c:	b35a      	cbz	r2, 80041e6 <_strtod_l+0x8f6>
 800418e:	4a9c      	ldr	r2, [pc, #624]	; (8004400 <_strtod_l+0xb10>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d12c      	bne.n	80041ee <_strtod_l+0x8fe>
 8004194:	9b05      	ldr	r3, [sp, #20]
 8004196:	4640      	mov	r0, r8
 8004198:	b303      	cbz	r3, 80041dc <_strtod_l+0x8ec>
 800419a:	464b      	mov	r3, r9
 800419c:	4a99      	ldr	r2, [pc, #612]	; (8004404 <_strtod_l+0xb14>)
 800419e:	f04f 31ff 	mov.w	r1, #4294967295
 80041a2:	401a      	ands	r2, r3
 80041a4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80041a8:	d81b      	bhi.n	80041e2 <_strtod_l+0x8f2>
 80041aa:	0d12      	lsrs	r2, r2, #20
 80041ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80041b0:	fa01 f303 	lsl.w	r3, r1, r3
 80041b4:	4298      	cmp	r0, r3
 80041b6:	d11a      	bne.n	80041ee <_strtod_l+0x8fe>
 80041b8:	4b93      	ldr	r3, [pc, #588]	; (8004408 <_strtod_l+0xb18>)
 80041ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041bc:	429a      	cmp	r2, r3
 80041be:	d102      	bne.n	80041c6 <_strtod_l+0x8d6>
 80041c0:	3001      	adds	r0, #1
 80041c2:	f43f add8 	beq.w	8003d76 <_strtod_l+0x486>
 80041c6:	f04f 0800 	mov.w	r8, #0
 80041ca:	4b8e      	ldr	r3, [pc, #568]	; (8004404 <_strtod_l+0xb14>)
 80041cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041ce:	401a      	ands	r2, r3
 80041d0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80041d4:	9b05      	ldr	r3, [sp, #20]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d196      	bne.n	8004108 <_strtod_l+0x818>
 80041da:	e5d7      	b.n	8003d8c <_strtod_l+0x49c>
 80041dc:	f04f 33ff 	mov.w	r3, #4294967295
 80041e0:	e7e8      	b.n	80041b4 <_strtod_l+0x8c4>
 80041e2:	460b      	mov	r3, r1
 80041e4:	e7e6      	b.n	80041b4 <_strtod_l+0x8c4>
 80041e6:	ea53 0308 	orrs.w	r3, r3, r8
 80041ea:	f43f af7d 	beq.w	80040e8 <_strtod_l+0x7f8>
 80041ee:	b1e5      	cbz	r5, 800422a <_strtod_l+0x93a>
 80041f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041f2:	421d      	tst	r5, r3
 80041f4:	d0ee      	beq.n	80041d4 <_strtod_l+0x8e4>
 80041f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041f8:	4640      	mov	r0, r8
 80041fa:	4649      	mov	r1, r9
 80041fc:	9a05      	ldr	r2, [sp, #20]
 80041fe:	b1c3      	cbz	r3, 8004232 <_strtod_l+0x942>
 8004200:	f7ff fb55 	bl	80038ae <sulp>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800420c:	f7fb ffae 	bl	800016c <__adddf3>
 8004210:	4680      	mov	r8, r0
 8004212:	4689      	mov	r9, r1
 8004214:	e7de      	b.n	80041d4 <_strtod_l+0x8e4>
 8004216:	4013      	ands	r3, r2
 8004218:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800421c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004220:	f04f 38ff 	mov.w	r8, #4294967295
 8004224:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004228:	e7d4      	b.n	80041d4 <_strtod_l+0x8e4>
 800422a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800422c:	ea13 0f08 	tst.w	r3, r8
 8004230:	e7e0      	b.n	80041f4 <_strtod_l+0x904>
 8004232:	f7ff fb3c 	bl	80038ae <sulp>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800423e:	f7fb ff93 	bl	8000168 <__aeabi_dsub>
 8004242:	2200      	movs	r2, #0
 8004244:	2300      	movs	r3, #0
 8004246:	4680      	mov	r8, r0
 8004248:	4689      	mov	r9, r1
 800424a:	f7fc fbad 	bl	80009a8 <__aeabi_dcmpeq>
 800424e:	2800      	cmp	r0, #0
 8004250:	d0c0      	beq.n	80041d4 <_strtod_l+0x8e4>
 8004252:	e602      	b.n	8003e5a <_strtod_l+0x56a>
 8004254:	4658      	mov	r0, fp
 8004256:	9904      	ldr	r1, [sp, #16]
 8004258:	f002 f838 	bl	80062cc <__ratio>
 800425c:	2200      	movs	r2, #0
 800425e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004262:	4606      	mov	r6, r0
 8004264:	460f      	mov	r7, r1
 8004266:	f7fc fbb3 	bl	80009d0 <__aeabi_dcmple>
 800426a:	2800      	cmp	r0, #0
 800426c:	d075      	beq.n	800435a <_strtod_l+0xa6a>
 800426e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004270:	2b00      	cmp	r3, #0
 8004272:	d047      	beq.n	8004304 <_strtod_l+0xa14>
 8004274:	2600      	movs	r6, #0
 8004276:	4f65      	ldr	r7, [pc, #404]	; (800440c <_strtod_l+0xb1c>)
 8004278:	4d64      	ldr	r5, [pc, #400]	; (800440c <_strtod_l+0xb1c>)
 800427a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800427c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004280:	0d1b      	lsrs	r3, r3, #20
 8004282:	051b      	lsls	r3, r3, #20
 8004284:	930f      	str	r3, [sp, #60]	; 0x3c
 8004286:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004288:	4b61      	ldr	r3, [pc, #388]	; (8004410 <_strtod_l+0xb20>)
 800428a:	429a      	cmp	r2, r3
 800428c:	f040 80c8 	bne.w	8004420 <_strtod_l+0xb30>
 8004290:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004294:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800429a:	4640      	mov	r0, r8
 800429c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80042a0:	4649      	mov	r1, r9
 80042a2:	f001 ff3d 	bl	8006120 <__ulp>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4630      	mov	r0, r6
 80042ac:	4639      	mov	r1, r7
 80042ae:	f7fc f913 	bl	80004d8 <__aeabi_dmul>
 80042b2:	4642      	mov	r2, r8
 80042b4:	464b      	mov	r3, r9
 80042b6:	f7fb ff59 	bl	800016c <__adddf3>
 80042ba:	460b      	mov	r3, r1
 80042bc:	4951      	ldr	r1, [pc, #324]	; (8004404 <_strtod_l+0xb14>)
 80042be:	4a55      	ldr	r2, [pc, #340]	; (8004414 <_strtod_l+0xb24>)
 80042c0:	4019      	ands	r1, r3
 80042c2:	4291      	cmp	r1, r2
 80042c4:	4680      	mov	r8, r0
 80042c6:	d95e      	bls.n	8004386 <_strtod_l+0xa96>
 80042c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042ca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d103      	bne.n	80042da <_strtod_l+0x9ea>
 80042d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042d4:	3301      	adds	r3, #1
 80042d6:	f43f ad4e 	beq.w	8003d76 <_strtod_l+0x486>
 80042da:	f04f 38ff 	mov.w	r8, #4294967295
 80042de:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004408 <_strtod_l+0xb18>
 80042e2:	4650      	mov	r0, sl
 80042e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80042e6:	f001 fbeb 	bl	8005ac0 <_Bfree>
 80042ea:	4650      	mov	r0, sl
 80042ec:	9906      	ldr	r1, [sp, #24]
 80042ee:	f001 fbe7 	bl	8005ac0 <_Bfree>
 80042f2:	4650      	mov	r0, sl
 80042f4:	9904      	ldr	r1, [sp, #16]
 80042f6:	f001 fbe3 	bl	8005ac0 <_Bfree>
 80042fa:	4659      	mov	r1, fp
 80042fc:	4650      	mov	r0, sl
 80042fe:	f001 fbdf 	bl	8005ac0 <_Bfree>
 8004302:	e61c      	b.n	8003f3e <_strtod_l+0x64e>
 8004304:	f1b8 0f00 	cmp.w	r8, #0
 8004308:	d119      	bne.n	800433e <_strtod_l+0xa4e>
 800430a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800430c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004310:	b9e3      	cbnz	r3, 800434c <_strtod_l+0xa5c>
 8004312:	2200      	movs	r2, #0
 8004314:	4630      	mov	r0, r6
 8004316:	4639      	mov	r1, r7
 8004318:	4b3c      	ldr	r3, [pc, #240]	; (800440c <_strtod_l+0xb1c>)
 800431a:	f7fc fb4f 	bl	80009bc <__aeabi_dcmplt>
 800431e:	b9c8      	cbnz	r0, 8004354 <_strtod_l+0xa64>
 8004320:	2200      	movs	r2, #0
 8004322:	4630      	mov	r0, r6
 8004324:	4639      	mov	r1, r7
 8004326:	4b3c      	ldr	r3, [pc, #240]	; (8004418 <_strtod_l+0xb28>)
 8004328:	f7fc f8d6 	bl	80004d8 <__aeabi_dmul>
 800432c:	4604      	mov	r4, r0
 800432e:	460d      	mov	r5, r1
 8004330:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004334:	9418      	str	r4, [sp, #96]	; 0x60
 8004336:	9319      	str	r3, [sp, #100]	; 0x64
 8004338:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800433c:	e79d      	b.n	800427a <_strtod_l+0x98a>
 800433e:	f1b8 0f01 	cmp.w	r8, #1
 8004342:	d103      	bne.n	800434c <_strtod_l+0xa5c>
 8004344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004346:	2b00      	cmp	r3, #0
 8004348:	f43f ad87 	beq.w	8003e5a <_strtod_l+0x56a>
 800434c:	2600      	movs	r6, #0
 800434e:	2400      	movs	r4, #0
 8004350:	4f32      	ldr	r7, [pc, #200]	; (800441c <_strtod_l+0xb2c>)
 8004352:	e791      	b.n	8004278 <_strtod_l+0x988>
 8004354:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004356:	4d30      	ldr	r5, [pc, #192]	; (8004418 <_strtod_l+0xb28>)
 8004358:	e7ea      	b.n	8004330 <_strtod_l+0xa40>
 800435a:	4b2f      	ldr	r3, [pc, #188]	; (8004418 <_strtod_l+0xb28>)
 800435c:	2200      	movs	r2, #0
 800435e:	4630      	mov	r0, r6
 8004360:	4639      	mov	r1, r7
 8004362:	f7fc f8b9 	bl	80004d8 <__aeabi_dmul>
 8004366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004368:	4604      	mov	r4, r0
 800436a:	460d      	mov	r5, r1
 800436c:	b933      	cbnz	r3, 800437c <_strtod_l+0xa8c>
 800436e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004372:	9010      	str	r0, [sp, #64]	; 0x40
 8004374:	9311      	str	r3, [sp, #68]	; 0x44
 8004376:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800437a:	e77e      	b.n	800427a <_strtod_l+0x98a>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004384:	e7f7      	b.n	8004376 <_strtod_l+0xa86>
 8004386:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800438a:	9b05      	ldr	r3, [sp, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1a8      	bne.n	80042e2 <_strtod_l+0x9f2>
 8004390:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004394:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004396:	0d1b      	lsrs	r3, r3, #20
 8004398:	051b      	lsls	r3, r3, #20
 800439a:	429a      	cmp	r2, r3
 800439c:	d1a1      	bne.n	80042e2 <_strtod_l+0x9f2>
 800439e:	4620      	mov	r0, r4
 80043a0:	4629      	mov	r1, r5
 80043a2:	f7fc fbe1 	bl	8000b68 <__aeabi_d2lz>
 80043a6:	f7fc f869 	bl	800047c <__aeabi_l2d>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	4620      	mov	r0, r4
 80043b0:	4629      	mov	r1, r5
 80043b2:	f7fb fed9 	bl	8000168 <__aeabi_dsub>
 80043b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80043b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80043bc:	ea43 0308 	orr.w	r3, r3, r8
 80043c0:	4313      	orrs	r3, r2
 80043c2:	4604      	mov	r4, r0
 80043c4:	460d      	mov	r5, r1
 80043c6:	d066      	beq.n	8004496 <_strtod_l+0xba6>
 80043c8:	a309      	add	r3, pc, #36	; (adr r3, 80043f0 <_strtod_l+0xb00>)
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	f7fc faf5 	bl	80009bc <__aeabi_dcmplt>
 80043d2:	2800      	cmp	r0, #0
 80043d4:	f47f acda 	bne.w	8003d8c <_strtod_l+0x49c>
 80043d8:	a307      	add	r3, pc, #28	; (adr r3, 80043f8 <_strtod_l+0xb08>)
 80043da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043de:	4620      	mov	r0, r4
 80043e0:	4629      	mov	r1, r5
 80043e2:	f7fc fb09 	bl	80009f8 <__aeabi_dcmpgt>
 80043e6:	2800      	cmp	r0, #0
 80043e8:	f43f af7b 	beq.w	80042e2 <_strtod_l+0x9f2>
 80043ec:	e4ce      	b.n	8003d8c <_strtod_l+0x49c>
 80043ee:	bf00      	nop
 80043f0:	94a03595 	.word	0x94a03595
 80043f4:	3fdfffff 	.word	0x3fdfffff
 80043f8:	35afe535 	.word	0x35afe535
 80043fc:	3fe00000 	.word	0x3fe00000
 8004400:	000fffff 	.word	0x000fffff
 8004404:	7ff00000 	.word	0x7ff00000
 8004408:	7fefffff 	.word	0x7fefffff
 800440c:	3ff00000 	.word	0x3ff00000
 8004410:	7fe00000 	.word	0x7fe00000
 8004414:	7c9fffff 	.word	0x7c9fffff
 8004418:	3fe00000 	.word	0x3fe00000
 800441c:	bff00000 	.word	0xbff00000
 8004420:	9b05      	ldr	r3, [sp, #20]
 8004422:	b313      	cbz	r3, 800446a <_strtod_l+0xb7a>
 8004424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004426:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800442a:	d81e      	bhi.n	800446a <_strtod_l+0xb7a>
 800442c:	a326      	add	r3, pc, #152	; (adr r3, 80044c8 <_strtod_l+0xbd8>)
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	4620      	mov	r0, r4
 8004434:	4629      	mov	r1, r5
 8004436:	f7fc facb 	bl	80009d0 <__aeabi_dcmple>
 800443a:	b190      	cbz	r0, 8004462 <_strtod_l+0xb72>
 800443c:	4629      	mov	r1, r5
 800443e:	4620      	mov	r0, r4
 8004440:	f7fc fb22 	bl	8000a88 <__aeabi_d2uiz>
 8004444:	2801      	cmp	r0, #1
 8004446:	bf38      	it	cc
 8004448:	2001      	movcc	r0, #1
 800444a:	f7fb ffcb 	bl	80003e4 <__aeabi_ui2d>
 800444e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004450:	4604      	mov	r4, r0
 8004452:	460d      	mov	r5, r1
 8004454:	b9d3      	cbnz	r3, 800448c <_strtod_l+0xb9c>
 8004456:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800445a:	9012      	str	r0, [sp, #72]	; 0x48
 800445c:	9313      	str	r3, [sp, #76]	; 0x4c
 800445e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004462:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004464:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004468:	1a9f      	subs	r7, r3, r2
 800446a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800446e:	f001 fe57 	bl	8006120 <__ulp>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4630      	mov	r0, r6
 8004478:	4639      	mov	r1, r7
 800447a:	f7fc f82d 	bl	80004d8 <__aeabi_dmul>
 800447e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004482:	f7fb fe73 	bl	800016c <__adddf3>
 8004486:	4680      	mov	r8, r0
 8004488:	4689      	mov	r9, r1
 800448a:	e77e      	b.n	800438a <_strtod_l+0xa9a>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004494:	e7e3      	b.n	800445e <_strtod_l+0xb6e>
 8004496:	a30e      	add	r3, pc, #56	; (adr r3, 80044d0 <_strtod_l+0xbe0>)
 8004498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449c:	f7fc fa8e 	bl	80009bc <__aeabi_dcmplt>
 80044a0:	e7a1      	b.n	80043e6 <_strtod_l+0xaf6>
 80044a2:	2300      	movs	r3, #0
 80044a4:	930c      	str	r3, [sp, #48]	; 0x30
 80044a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	f7ff ba65 	b.w	800397a <_strtod_l+0x8a>
 80044b0:	2b65      	cmp	r3, #101	; 0x65
 80044b2:	f43f ab5c 	beq.w	8003b6e <_strtod_l+0x27e>
 80044b6:	2b45      	cmp	r3, #69	; 0x45
 80044b8:	f43f ab59 	beq.w	8003b6e <_strtod_l+0x27e>
 80044bc:	2201      	movs	r2, #1
 80044be:	f7ff bb8d 	b.w	8003bdc <_strtod_l+0x2ec>
 80044c2:	bf00      	nop
 80044c4:	f3af 8000 	nop.w
 80044c8:	ffc00000 	.word	0xffc00000
 80044cc:	41dfffff 	.word	0x41dfffff
 80044d0:	94a03595 	.word	0x94a03595
 80044d4:	3fcfffff 	.word	0x3fcfffff

080044d8 <_strtod_r>:
 80044d8:	4b01      	ldr	r3, [pc, #4]	; (80044e0 <_strtod_r+0x8>)
 80044da:	f7ff ba09 	b.w	80038f0 <_strtod_l>
 80044de:	bf00      	nop
 80044e0:	20000074 	.word	0x20000074

080044e4 <strtod>:
 80044e4:	460a      	mov	r2, r1
 80044e6:	4601      	mov	r1, r0
 80044e8:	4802      	ldr	r0, [pc, #8]	; (80044f4 <strtod+0x10>)
 80044ea:	4b03      	ldr	r3, [pc, #12]	; (80044f8 <strtod+0x14>)
 80044ec:	6800      	ldr	r0, [r0, #0]
 80044ee:	f7ff b9ff 	b.w	80038f0 <_strtod_l>
 80044f2:	bf00      	nop
 80044f4:	2000000c 	.word	0x2000000c
 80044f8:	20000074 	.word	0x20000074

080044fc <_strtol_l.isra.0>:
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004502:	4686      	mov	lr, r0
 8004504:	d001      	beq.n	800450a <_strtol_l.isra.0+0xe>
 8004506:	2b24      	cmp	r3, #36	; 0x24
 8004508:	d906      	bls.n	8004518 <_strtol_l.isra.0+0x1c>
 800450a:	f7fe fae3 	bl	8002ad4 <__errno>
 800450e:	2316      	movs	r3, #22
 8004510:	6003      	str	r3, [r0, #0]
 8004512:	2000      	movs	r0, #0
 8004514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004518:	468c      	mov	ip, r1
 800451a:	4e3a      	ldr	r6, [pc, #232]	; (8004604 <_strtol_l.isra.0+0x108>)
 800451c:	4660      	mov	r0, ip
 800451e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004522:	5da5      	ldrb	r5, [r4, r6]
 8004524:	f015 0508 	ands.w	r5, r5, #8
 8004528:	d1f8      	bne.n	800451c <_strtol_l.isra.0+0x20>
 800452a:	2c2d      	cmp	r4, #45	; 0x2d
 800452c:	d133      	bne.n	8004596 <_strtol_l.isra.0+0x9a>
 800452e:	f04f 0801 	mov.w	r8, #1
 8004532:	f89c 4000 	ldrb.w	r4, [ip]
 8004536:	f100 0c02 	add.w	ip, r0, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d05d      	beq.n	80045fa <_strtol_l.isra.0+0xfe>
 800453e:	2b10      	cmp	r3, #16
 8004540:	d10c      	bne.n	800455c <_strtol_l.isra.0+0x60>
 8004542:	2c30      	cmp	r4, #48	; 0x30
 8004544:	d10a      	bne.n	800455c <_strtol_l.isra.0+0x60>
 8004546:	f89c 0000 	ldrb.w	r0, [ip]
 800454a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800454e:	2858      	cmp	r0, #88	; 0x58
 8004550:	d14e      	bne.n	80045f0 <_strtol_l.isra.0+0xf4>
 8004552:	2310      	movs	r3, #16
 8004554:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004558:	f10c 0c02 	add.w	ip, ip, #2
 800455c:	2500      	movs	r5, #0
 800455e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8004562:	3f01      	subs	r7, #1
 8004564:	fbb7 f9f3 	udiv	r9, r7, r3
 8004568:	4628      	mov	r0, r5
 800456a:	fb03 7a19 	mls	sl, r3, r9, r7
 800456e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004572:	2e09      	cmp	r6, #9
 8004574:	d818      	bhi.n	80045a8 <_strtol_l.isra.0+0xac>
 8004576:	4634      	mov	r4, r6
 8004578:	42a3      	cmp	r3, r4
 800457a:	dd24      	ble.n	80045c6 <_strtol_l.isra.0+0xca>
 800457c:	2d00      	cmp	r5, #0
 800457e:	db1f      	blt.n	80045c0 <_strtol_l.isra.0+0xc4>
 8004580:	4581      	cmp	r9, r0
 8004582:	d31d      	bcc.n	80045c0 <_strtol_l.isra.0+0xc4>
 8004584:	d101      	bne.n	800458a <_strtol_l.isra.0+0x8e>
 8004586:	45a2      	cmp	sl, r4
 8004588:	db1a      	blt.n	80045c0 <_strtol_l.isra.0+0xc4>
 800458a:	2501      	movs	r5, #1
 800458c:	fb00 4003 	mla	r0, r0, r3, r4
 8004590:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004594:	e7eb      	b.n	800456e <_strtol_l.isra.0+0x72>
 8004596:	2c2b      	cmp	r4, #43	; 0x2b
 8004598:	bf08      	it	eq
 800459a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800459e:	46a8      	mov	r8, r5
 80045a0:	bf08      	it	eq
 80045a2:	f100 0c02 	addeq.w	ip, r0, #2
 80045a6:	e7c8      	b.n	800453a <_strtol_l.isra.0+0x3e>
 80045a8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80045ac:	2e19      	cmp	r6, #25
 80045ae:	d801      	bhi.n	80045b4 <_strtol_l.isra.0+0xb8>
 80045b0:	3c37      	subs	r4, #55	; 0x37
 80045b2:	e7e1      	b.n	8004578 <_strtol_l.isra.0+0x7c>
 80045b4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80045b8:	2e19      	cmp	r6, #25
 80045ba:	d804      	bhi.n	80045c6 <_strtol_l.isra.0+0xca>
 80045bc:	3c57      	subs	r4, #87	; 0x57
 80045be:	e7db      	b.n	8004578 <_strtol_l.isra.0+0x7c>
 80045c0:	f04f 35ff 	mov.w	r5, #4294967295
 80045c4:	e7e4      	b.n	8004590 <_strtol_l.isra.0+0x94>
 80045c6:	2d00      	cmp	r5, #0
 80045c8:	da08      	bge.n	80045dc <_strtol_l.isra.0+0xe0>
 80045ca:	2322      	movs	r3, #34	; 0x22
 80045cc:	4638      	mov	r0, r7
 80045ce:	f8ce 3000 	str.w	r3, [lr]
 80045d2:	2a00      	cmp	r2, #0
 80045d4:	d09e      	beq.n	8004514 <_strtol_l.isra.0+0x18>
 80045d6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80045da:	e007      	b.n	80045ec <_strtol_l.isra.0+0xf0>
 80045dc:	f1b8 0f00 	cmp.w	r8, #0
 80045e0:	d000      	beq.n	80045e4 <_strtol_l.isra.0+0xe8>
 80045e2:	4240      	negs	r0, r0
 80045e4:	2a00      	cmp	r2, #0
 80045e6:	d095      	beq.n	8004514 <_strtol_l.isra.0+0x18>
 80045e8:	2d00      	cmp	r5, #0
 80045ea:	d1f4      	bne.n	80045d6 <_strtol_l.isra.0+0xda>
 80045ec:	6011      	str	r1, [r2, #0]
 80045ee:	e791      	b.n	8004514 <_strtol_l.isra.0+0x18>
 80045f0:	2430      	movs	r4, #48	; 0x30
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1b2      	bne.n	800455c <_strtol_l.isra.0+0x60>
 80045f6:	2308      	movs	r3, #8
 80045f8:	e7b0      	b.n	800455c <_strtol_l.isra.0+0x60>
 80045fa:	2c30      	cmp	r4, #48	; 0x30
 80045fc:	d0a3      	beq.n	8004546 <_strtol_l.isra.0+0x4a>
 80045fe:	230a      	movs	r3, #10
 8004600:	e7ac      	b.n	800455c <_strtol_l.isra.0+0x60>
 8004602:	bf00      	nop
 8004604:	08007481 	.word	0x08007481

08004608 <_strtol_r>:
 8004608:	f7ff bf78 	b.w	80044fc <_strtol_l.isra.0>

0800460c <strtol>:
 800460c:	4613      	mov	r3, r2
 800460e:	460a      	mov	r2, r1
 8004610:	4601      	mov	r1, r0
 8004612:	4802      	ldr	r0, [pc, #8]	; (800461c <strtol+0x10>)
 8004614:	6800      	ldr	r0, [r0, #0]
 8004616:	f7ff bf71 	b.w	80044fc <_strtol_l.isra.0>
 800461a:	bf00      	nop
 800461c:	2000000c 	.word	0x2000000c

08004620 <quorem>:
 8004620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004624:	6903      	ldr	r3, [r0, #16]
 8004626:	690c      	ldr	r4, [r1, #16]
 8004628:	4607      	mov	r7, r0
 800462a:	42a3      	cmp	r3, r4
 800462c:	f2c0 8083 	blt.w	8004736 <quorem+0x116>
 8004630:	3c01      	subs	r4, #1
 8004632:	f100 0514 	add.w	r5, r0, #20
 8004636:	f101 0814 	add.w	r8, r1, #20
 800463a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004644:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004648:	3301      	adds	r3, #1
 800464a:	429a      	cmp	r2, r3
 800464c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004650:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004654:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004658:	d332      	bcc.n	80046c0 <quorem+0xa0>
 800465a:	f04f 0e00 	mov.w	lr, #0
 800465e:	4640      	mov	r0, r8
 8004660:	46ac      	mov	ip, r5
 8004662:	46f2      	mov	sl, lr
 8004664:	f850 2b04 	ldr.w	r2, [r0], #4
 8004668:	b293      	uxth	r3, r2
 800466a:	fb06 e303 	mla	r3, r6, r3, lr
 800466e:	0c12      	lsrs	r2, r2, #16
 8004670:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004674:	fb06 e202 	mla	r2, r6, r2, lr
 8004678:	b29b      	uxth	r3, r3
 800467a:	ebaa 0303 	sub.w	r3, sl, r3
 800467e:	f8dc a000 	ldr.w	sl, [ip]
 8004682:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004686:	fa1f fa8a 	uxth.w	sl, sl
 800468a:	4453      	add	r3, sl
 800468c:	fa1f fa82 	uxth.w	sl, r2
 8004690:	f8dc 2000 	ldr.w	r2, [ip]
 8004694:	4581      	cmp	r9, r0
 8004696:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800469a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800469e:	b29b      	uxth	r3, r3
 80046a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046a4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80046a8:	f84c 3b04 	str.w	r3, [ip], #4
 80046ac:	d2da      	bcs.n	8004664 <quorem+0x44>
 80046ae:	f855 300b 	ldr.w	r3, [r5, fp]
 80046b2:	b92b      	cbnz	r3, 80046c0 <quorem+0xa0>
 80046b4:	9b01      	ldr	r3, [sp, #4]
 80046b6:	3b04      	subs	r3, #4
 80046b8:	429d      	cmp	r5, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	d32f      	bcc.n	800471e <quorem+0xfe>
 80046be:	613c      	str	r4, [r7, #16]
 80046c0:	4638      	mov	r0, r7
 80046c2:	f001 fc81 	bl	8005fc8 <__mcmp>
 80046c6:	2800      	cmp	r0, #0
 80046c8:	db25      	blt.n	8004716 <quorem+0xf6>
 80046ca:	4628      	mov	r0, r5
 80046cc:	f04f 0c00 	mov.w	ip, #0
 80046d0:	3601      	adds	r6, #1
 80046d2:	f858 1b04 	ldr.w	r1, [r8], #4
 80046d6:	f8d0 e000 	ldr.w	lr, [r0]
 80046da:	b28b      	uxth	r3, r1
 80046dc:	ebac 0303 	sub.w	r3, ip, r3
 80046e0:	fa1f f28e 	uxth.w	r2, lr
 80046e4:	4413      	add	r3, r2
 80046e6:	0c0a      	lsrs	r2, r1, #16
 80046e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80046ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046f6:	45c1      	cmp	r9, r8
 80046f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80046fc:	f840 3b04 	str.w	r3, [r0], #4
 8004700:	d2e7      	bcs.n	80046d2 <quorem+0xb2>
 8004702:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800470a:	b922      	cbnz	r2, 8004716 <quorem+0xf6>
 800470c:	3b04      	subs	r3, #4
 800470e:	429d      	cmp	r5, r3
 8004710:	461a      	mov	r2, r3
 8004712:	d30a      	bcc.n	800472a <quorem+0x10a>
 8004714:	613c      	str	r4, [r7, #16]
 8004716:	4630      	mov	r0, r6
 8004718:	b003      	add	sp, #12
 800471a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800471e:	6812      	ldr	r2, [r2, #0]
 8004720:	3b04      	subs	r3, #4
 8004722:	2a00      	cmp	r2, #0
 8004724:	d1cb      	bne.n	80046be <quorem+0x9e>
 8004726:	3c01      	subs	r4, #1
 8004728:	e7c6      	b.n	80046b8 <quorem+0x98>
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	3b04      	subs	r3, #4
 800472e:	2a00      	cmp	r2, #0
 8004730:	d1f0      	bne.n	8004714 <quorem+0xf4>
 8004732:	3c01      	subs	r4, #1
 8004734:	e7eb      	b.n	800470e <quorem+0xee>
 8004736:	2000      	movs	r0, #0
 8004738:	e7ee      	b.n	8004718 <quorem+0xf8>
 800473a:	0000      	movs	r0, r0
 800473c:	0000      	movs	r0, r0
	...

08004740 <_dtoa_r>:
 8004740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004744:	4616      	mov	r6, r2
 8004746:	461f      	mov	r7, r3
 8004748:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800474a:	b099      	sub	sp, #100	; 0x64
 800474c:	4605      	mov	r5, r0
 800474e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004752:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004756:	b974      	cbnz	r4, 8004776 <_dtoa_r+0x36>
 8004758:	2010      	movs	r0, #16
 800475a:	f001 f949 	bl	80059f0 <malloc>
 800475e:	4602      	mov	r2, r0
 8004760:	6268      	str	r0, [r5, #36]	; 0x24
 8004762:	b920      	cbnz	r0, 800476e <_dtoa_r+0x2e>
 8004764:	21ea      	movs	r1, #234	; 0xea
 8004766:	4bae      	ldr	r3, [pc, #696]	; (8004a20 <_dtoa_r+0x2e0>)
 8004768:	48ae      	ldr	r0, [pc, #696]	; (8004a24 <_dtoa_r+0x2e4>)
 800476a:	f002 f867 	bl	800683c <__assert_func>
 800476e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004772:	6004      	str	r4, [r0, #0]
 8004774:	60c4      	str	r4, [r0, #12]
 8004776:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004778:	6819      	ldr	r1, [r3, #0]
 800477a:	b151      	cbz	r1, 8004792 <_dtoa_r+0x52>
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	2301      	movs	r3, #1
 8004780:	4093      	lsls	r3, r2
 8004782:	604a      	str	r2, [r1, #4]
 8004784:	608b      	str	r3, [r1, #8]
 8004786:	4628      	mov	r0, r5
 8004788:	f001 f99a 	bl	8005ac0 <_Bfree>
 800478c:	2200      	movs	r2, #0
 800478e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	1e3b      	subs	r3, r7, #0
 8004794:	bfaf      	iteee	ge
 8004796:	2300      	movge	r3, #0
 8004798:	2201      	movlt	r2, #1
 800479a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800479e:	9305      	strlt	r3, [sp, #20]
 80047a0:	bfa8      	it	ge
 80047a2:	f8c8 3000 	strge.w	r3, [r8]
 80047a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80047aa:	4b9f      	ldr	r3, [pc, #636]	; (8004a28 <_dtoa_r+0x2e8>)
 80047ac:	bfb8      	it	lt
 80047ae:	f8c8 2000 	strlt.w	r2, [r8]
 80047b2:	ea33 0309 	bics.w	r3, r3, r9
 80047b6:	d119      	bne.n	80047ec <_dtoa_r+0xac>
 80047b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80047bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80047c4:	4333      	orrs	r3, r6
 80047c6:	f000 8580 	beq.w	80052ca <_dtoa_r+0xb8a>
 80047ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80047cc:	b953      	cbnz	r3, 80047e4 <_dtoa_r+0xa4>
 80047ce:	4b97      	ldr	r3, [pc, #604]	; (8004a2c <_dtoa_r+0x2ec>)
 80047d0:	e022      	b.n	8004818 <_dtoa_r+0xd8>
 80047d2:	4b97      	ldr	r3, [pc, #604]	; (8004a30 <_dtoa_r+0x2f0>)
 80047d4:	9308      	str	r3, [sp, #32]
 80047d6:	3308      	adds	r3, #8
 80047d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	9808      	ldr	r0, [sp, #32]
 80047de:	b019      	add	sp, #100	; 0x64
 80047e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e4:	4b91      	ldr	r3, [pc, #580]	; (8004a2c <_dtoa_r+0x2ec>)
 80047e6:	9308      	str	r3, [sp, #32]
 80047e8:	3303      	adds	r3, #3
 80047ea:	e7f5      	b.n	80047d8 <_dtoa_r+0x98>
 80047ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80047f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80047f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80047f8:	2200      	movs	r2, #0
 80047fa:	2300      	movs	r3, #0
 80047fc:	f7fc f8d4 	bl	80009a8 <__aeabi_dcmpeq>
 8004800:	4680      	mov	r8, r0
 8004802:	b158      	cbz	r0, 800481c <_dtoa_r+0xdc>
 8004804:	2301      	movs	r3, #1
 8004806:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 8559 	beq.w	80052c4 <_dtoa_r+0xb84>
 8004812:	4888      	ldr	r0, [pc, #544]	; (8004a34 <_dtoa_r+0x2f4>)
 8004814:	6018      	str	r0, [r3, #0]
 8004816:	1e43      	subs	r3, r0, #1
 8004818:	9308      	str	r3, [sp, #32]
 800481a:	e7df      	b.n	80047dc <_dtoa_r+0x9c>
 800481c:	ab16      	add	r3, sp, #88	; 0x58
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	ab17      	add	r3, sp, #92	; 0x5c
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	4628      	mov	r0, r5
 8004826:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800482a:	f001 fcf3 	bl	8006214 <__d2b>
 800482e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004832:	4682      	mov	sl, r0
 8004834:	2c00      	cmp	r4, #0
 8004836:	d07e      	beq.n	8004936 <_dtoa_r+0x1f6>
 8004838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800483c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800483e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004842:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004846:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800484a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800484e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004852:	2200      	movs	r2, #0
 8004854:	4b78      	ldr	r3, [pc, #480]	; (8004a38 <_dtoa_r+0x2f8>)
 8004856:	f7fb fc87 	bl	8000168 <__aeabi_dsub>
 800485a:	a36b      	add	r3, pc, #428	; (adr r3, 8004a08 <_dtoa_r+0x2c8>)
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	f7fb fe3a 	bl	80004d8 <__aeabi_dmul>
 8004864:	a36a      	add	r3, pc, #424	; (adr r3, 8004a10 <_dtoa_r+0x2d0>)
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	f7fb fc7f 	bl	800016c <__adddf3>
 800486e:	4606      	mov	r6, r0
 8004870:	4620      	mov	r0, r4
 8004872:	460f      	mov	r7, r1
 8004874:	f7fb fdc6 	bl	8000404 <__aeabi_i2d>
 8004878:	a367      	add	r3, pc, #412	; (adr r3, 8004a18 <_dtoa_r+0x2d8>)
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	f7fb fe2b 	bl	80004d8 <__aeabi_dmul>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4630      	mov	r0, r6
 8004888:	4639      	mov	r1, r7
 800488a:	f7fb fc6f 	bl	800016c <__adddf3>
 800488e:	4606      	mov	r6, r0
 8004890:	460f      	mov	r7, r1
 8004892:	f7fc f8d1 	bl	8000a38 <__aeabi_d2iz>
 8004896:	2200      	movs	r2, #0
 8004898:	4681      	mov	r9, r0
 800489a:	2300      	movs	r3, #0
 800489c:	4630      	mov	r0, r6
 800489e:	4639      	mov	r1, r7
 80048a0:	f7fc f88c 	bl	80009bc <__aeabi_dcmplt>
 80048a4:	b148      	cbz	r0, 80048ba <_dtoa_r+0x17a>
 80048a6:	4648      	mov	r0, r9
 80048a8:	f7fb fdac 	bl	8000404 <__aeabi_i2d>
 80048ac:	4632      	mov	r2, r6
 80048ae:	463b      	mov	r3, r7
 80048b0:	f7fc f87a 	bl	80009a8 <__aeabi_dcmpeq>
 80048b4:	b908      	cbnz	r0, 80048ba <_dtoa_r+0x17a>
 80048b6:	f109 39ff 	add.w	r9, r9, #4294967295
 80048ba:	f1b9 0f16 	cmp.w	r9, #22
 80048be:	d857      	bhi.n	8004970 <_dtoa_r+0x230>
 80048c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048c4:	4b5d      	ldr	r3, [pc, #372]	; (8004a3c <_dtoa_r+0x2fc>)
 80048c6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80048ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ce:	f7fc f875 	bl	80009bc <__aeabi_dcmplt>
 80048d2:	2800      	cmp	r0, #0
 80048d4:	d04e      	beq.n	8004974 <_dtoa_r+0x234>
 80048d6:	2300      	movs	r3, #0
 80048d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80048dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80048de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80048e0:	1b1c      	subs	r4, r3, r4
 80048e2:	1e63      	subs	r3, r4, #1
 80048e4:	9309      	str	r3, [sp, #36]	; 0x24
 80048e6:	bf49      	itett	mi
 80048e8:	f1c4 0301 	rsbmi	r3, r4, #1
 80048ec:	2300      	movpl	r3, #0
 80048ee:	9306      	strmi	r3, [sp, #24]
 80048f0:	2300      	movmi	r3, #0
 80048f2:	bf54      	ite	pl
 80048f4:	9306      	strpl	r3, [sp, #24]
 80048f6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80048f8:	f1b9 0f00 	cmp.w	r9, #0
 80048fc:	db3c      	blt.n	8004978 <_dtoa_r+0x238>
 80048fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004900:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004904:	444b      	add	r3, r9
 8004906:	9309      	str	r3, [sp, #36]	; 0x24
 8004908:	2300      	movs	r3, #0
 800490a:	930a      	str	r3, [sp, #40]	; 0x28
 800490c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800490e:	2b09      	cmp	r3, #9
 8004910:	d86c      	bhi.n	80049ec <_dtoa_r+0x2ac>
 8004912:	2b05      	cmp	r3, #5
 8004914:	bfc4      	itt	gt
 8004916:	3b04      	subgt	r3, #4
 8004918:	9322      	strgt	r3, [sp, #136]	; 0x88
 800491a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800491c:	bfc8      	it	gt
 800491e:	2400      	movgt	r4, #0
 8004920:	f1a3 0302 	sub.w	r3, r3, #2
 8004924:	bfd8      	it	le
 8004926:	2401      	movle	r4, #1
 8004928:	2b03      	cmp	r3, #3
 800492a:	f200 808b 	bhi.w	8004a44 <_dtoa_r+0x304>
 800492e:	e8df f003 	tbb	[pc, r3]
 8004932:	4f2d      	.short	0x4f2d
 8004934:	5b4d      	.short	0x5b4d
 8004936:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800493a:	441c      	add	r4, r3
 800493c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004940:	2b20      	cmp	r3, #32
 8004942:	bfc3      	ittte	gt
 8004944:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004948:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800494c:	fa09 f303 	lslgt.w	r3, r9, r3
 8004950:	f1c3 0320 	rsble	r3, r3, #32
 8004954:	bfc6      	itte	gt
 8004956:	fa26 f000 	lsrgt.w	r0, r6, r0
 800495a:	4318      	orrgt	r0, r3
 800495c:	fa06 f003 	lslle.w	r0, r6, r3
 8004960:	f7fb fd40 	bl	80003e4 <__aeabi_ui2d>
 8004964:	2301      	movs	r3, #1
 8004966:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800496a:	3c01      	subs	r4, #1
 800496c:	9313      	str	r3, [sp, #76]	; 0x4c
 800496e:	e770      	b.n	8004852 <_dtoa_r+0x112>
 8004970:	2301      	movs	r3, #1
 8004972:	e7b3      	b.n	80048dc <_dtoa_r+0x19c>
 8004974:	900f      	str	r0, [sp, #60]	; 0x3c
 8004976:	e7b2      	b.n	80048de <_dtoa_r+0x19e>
 8004978:	9b06      	ldr	r3, [sp, #24]
 800497a:	eba3 0309 	sub.w	r3, r3, r9
 800497e:	9306      	str	r3, [sp, #24]
 8004980:	f1c9 0300 	rsb	r3, r9, #0
 8004984:	930a      	str	r3, [sp, #40]	; 0x28
 8004986:	2300      	movs	r3, #0
 8004988:	930e      	str	r3, [sp, #56]	; 0x38
 800498a:	e7bf      	b.n	800490c <_dtoa_r+0x1cc>
 800498c:	2300      	movs	r3, #0
 800498e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004990:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004992:	2b00      	cmp	r3, #0
 8004994:	dc59      	bgt.n	8004a4a <_dtoa_r+0x30a>
 8004996:	f04f 0b01 	mov.w	fp, #1
 800499a:	465b      	mov	r3, fp
 800499c:	f8cd b008 	str.w	fp, [sp, #8]
 80049a0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80049a4:	2200      	movs	r2, #0
 80049a6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80049a8:	6042      	str	r2, [r0, #4]
 80049aa:	2204      	movs	r2, #4
 80049ac:	f102 0614 	add.w	r6, r2, #20
 80049b0:	429e      	cmp	r6, r3
 80049b2:	6841      	ldr	r1, [r0, #4]
 80049b4:	d94f      	bls.n	8004a56 <_dtoa_r+0x316>
 80049b6:	4628      	mov	r0, r5
 80049b8:	f001 f842 	bl	8005a40 <_Balloc>
 80049bc:	9008      	str	r0, [sp, #32]
 80049be:	2800      	cmp	r0, #0
 80049c0:	d14d      	bne.n	8004a5e <_dtoa_r+0x31e>
 80049c2:	4602      	mov	r2, r0
 80049c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80049c8:	4b1d      	ldr	r3, [pc, #116]	; (8004a40 <_dtoa_r+0x300>)
 80049ca:	e6cd      	b.n	8004768 <_dtoa_r+0x28>
 80049cc:	2301      	movs	r3, #1
 80049ce:	e7de      	b.n	800498e <_dtoa_r+0x24e>
 80049d0:	2300      	movs	r3, #0
 80049d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80049d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80049d6:	eb09 0b03 	add.w	fp, r9, r3
 80049da:	f10b 0301 	add.w	r3, fp, #1
 80049de:	2b01      	cmp	r3, #1
 80049e0:	9302      	str	r3, [sp, #8]
 80049e2:	bfb8      	it	lt
 80049e4:	2301      	movlt	r3, #1
 80049e6:	e7dd      	b.n	80049a4 <_dtoa_r+0x264>
 80049e8:	2301      	movs	r3, #1
 80049ea:	e7f2      	b.n	80049d2 <_dtoa_r+0x292>
 80049ec:	2401      	movs	r4, #1
 80049ee:	2300      	movs	r3, #0
 80049f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80049f2:	9322      	str	r3, [sp, #136]	; 0x88
 80049f4:	f04f 3bff 	mov.w	fp, #4294967295
 80049f8:	2200      	movs	r2, #0
 80049fa:	2312      	movs	r3, #18
 80049fc:	f8cd b008 	str.w	fp, [sp, #8]
 8004a00:	9223      	str	r2, [sp, #140]	; 0x8c
 8004a02:	e7cf      	b.n	80049a4 <_dtoa_r+0x264>
 8004a04:	f3af 8000 	nop.w
 8004a08:	636f4361 	.word	0x636f4361
 8004a0c:	3fd287a7 	.word	0x3fd287a7
 8004a10:	8b60c8b3 	.word	0x8b60c8b3
 8004a14:	3fc68a28 	.word	0x3fc68a28
 8004a18:	509f79fb 	.word	0x509f79fb
 8004a1c:	3fd34413 	.word	0x3fd34413
 8004a20:	0800758e 	.word	0x0800758e
 8004a24:	080075a5 	.word	0x080075a5
 8004a28:	7ff00000 	.word	0x7ff00000
 8004a2c:	0800758a 	.word	0x0800758a
 8004a30:	08007581 	.word	0x08007581
 8004a34:	08007405 	.word	0x08007405
 8004a38:	3ff80000 	.word	0x3ff80000
 8004a3c:	08007720 	.word	0x08007720
 8004a40:	08007604 	.word	0x08007604
 8004a44:	2301      	movs	r3, #1
 8004a46:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a48:	e7d4      	b.n	80049f4 <_dtoa_r+0x2b4>
 8004a4a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004a4e:	465b      	mov	r3, fp
 8004a50:	f8cd b008 	str.w	fp, [sp, #8]
 8004a54:	e7a6      	b.n	80049a4 <_dtoa_r+0x264>
 8004a56:	3101      	adds	r1, #1
 8004a58:	6041      	str	r1, [r0, #4]
 8004a5a:	0052      	lsls	r2, r2, #1
 8004a5c:	e7a6      	b.n	80049ac <_dtoa_r+0x26c>
 8004a5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a60:	9a08      	ldr	r2, [sp, #32]
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	9b02      	ldr	r3, [sp, #8]
 8004a66:	2b0e      	cmp	r3, #14
 8004a68:	f200 80a8 	bhi.w	8004bbc <_dtoa_r+0x47c>
 8004a6c:	2c00      	cmp	r4, #0
 8004a6e:	f000 80a5 	beq.w	8004bbc <_dtoa_r+0x47c>
 8004a72:	f1b9 0f00 	cmp.w	r9, #0
 8004a76:	dd34      	ble.n	8004ae2 <_dtoa_r+0x3a2>
 8004a78:	4a9a      	ldr	r2, [pc, #616]	; (8004ce4 <_dtoa_r+0x5a4>)
 8004a7a:	f009 030f 	and.w	r3, r9, #15
 8004a7e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004a82:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004a86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004a8e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004a92:	d016      	beq.n	8004ac2 <_dtoa_r+0x382>
 8004a94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a98:	4b93      	ldr	r3, [pc, #588]	; (8004ce8 <_dtoa_r+0x5a8>)
 8004a9a:	2703      	movs	r7, #3
 8004a9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004aa0:	f7fb fe44 	bl	800072c <__aeabi_ddiv>
 8004aa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004aa8:	f004 040f 	and.w	r4, r4, #15
 8004aac:	4e8e      	ldr	r6, [pc, #568]	; (8004ce8 <_dtoa_r+0x5a8>)
 8004aae:	b954      	cbnz	r4, 8004ac6 <_dtoa_r+0x386>
 8004ab0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ab8:	f7fb fe38 	bl	800072c <__aeabi_ddiv>
 8004abc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ac0:	e029      	b.n	8004b16 <_dtoa_r+0x3d6>
 8004ac2:	2702      	movs	r7, #2
 8004ac4:	e7f2      	b.n	8004aac <_dtoa_r+0x36c>
 8004ac6:	07e1      	lsls	r1, r4, #31
 8004ac8:	d508      	bpl.n	8004adc <_dtoa_r+0x39c>
 8004aca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ace:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ad2:	f7fb fd01 	bl	80004d8 <__aeabi_dmul>
 8004ad6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ada:	3701      	adds	r7, #1
 8004adc:	1064      	asrs	r4, r4, #1
 8004ade:	3608      	adds	r6, #8
 8004ae0:	e7e5      	b.n	8004aae <_dtoa_r+0x36e>
 8004ae2:	f000 80a5 	beq.w	8004c30 <_dtoa_r+0x4f0>
 8004ae6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004aea:	f1c9 0400 	rsb	r4, r9, #0
 8004aee:	4b7d      	ldr	r3, [pc, #500]	; (8004ce4 <_dtoa_r+0x5a4>)
 8004af0:	f004 020f 	and.w	r2, r4, #15
 8004af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afc:	f7fb fcec 	bl	80004d8 <__aeabi_dmul>
 8004b00:	2702      	movs	r7, #2
 8004b02:	2300      	movs	r3, #0
 8004b04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b08:	4e77      	ldr	r6, [pc, #476]	; (8004ce8 <_dtoa_r+0x5a8>)
 8004b0a:	1124      	asrs	r4, r4, #4
 8004b0c:	2c00      	cmp	r4, #0
 8004b0e:	f040 8084 	bne.w	8004c1a <_dtoa_r+0x4da>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1d2      	bne.n	8004abc <_dtoa_r+0x37c>
 8004b16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 808b 	beq.w	8004c34 <_dtoa_r+0x4f4>
 8004b1e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004b22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004b26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	4b6f      	ldr	r3, [pc, #444]	; (8004cec <_dtoa_r+0x5ac>)
 8004b2e:	f7fb ff45 	bl	80009bc <__aeabi_dcmplt>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d07e      	beq.n	8004c34 <_dtoa_r+0x4f4>
 8004b36:	9b02      	ldr	r3, [sp, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d07b      	beq.n	8004c34 <_dtoa_r+0x4f4>
 8004b3c:	f1bb 0f00 	cmp.w	fp, #0
 8004b40:	dd38      	ble.n	8004bb4 <_dtoa_r+0x474>
 8004b42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b46:	2200      	movs	r2, #0
 8004b48:	4b69      	ldr	r3, [pc, #420]	; (8004cf0 <_dtoa_r+0x5b0>)
 8004b4a:	f7fb fcc5 	bl	80004d8 <__aeabi_dmul>
 8004b4e:	465c      	mov	r4, fp
 8004b50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b54:	f109 38ff 	add.w	r8, r9, #4294967295
 8004b58:	3701      	adds	r7, #1
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	f7fb fc52 	bl	8000404 <__aeabi_i2d>
 8004b60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b64:	f7fb fcb8 	bl	80004d8 <__aeabi_dmul>
 8004b68:	2200      	movs	r2, #0
 8004b6a:	4b62      	ldr	r3, [pc, #392]	; (8004cf4 <_dtoa_r+0x5b4>)
 8004b6c:	f7fb fafe 	bl	800016c <__adddf3>
 8004b70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004b74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b78:	9611      	str	r6, [sp, #68]	; 0x44
 8004b7a:	2c00      	cmp	r4, #0
 8004b7c:	d15d      	bne.n	8004c3a <_dtoa_r+0x4fa>
 8004b7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b82:	2200      	movs	r2, #0
 8004b84:	4b5c      	ldr	r3, [pc, #368]	; (8004cf8 <_dtoa_r+0x5b8>)
 8004b86:	f7fb faef 	bl	8000168 <__aeabi_dsub>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b92:	4633      	mov	r3, r6
 8004b94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004b96:	f7fb ff2f 	bl	80009f8 <__aeabi_dcmpgt>
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	f040 829e 	bne.w	80050dc <_dtoa_r+0x99c>
 8004ba0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ba4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ba6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004baa:	f7fb ff07 	bl	80009bc <__aeabi_dcmplt>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	f040 8292 	bne.w	80050d8 <_dtoa_r+0x998>
 8004bb4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004bb8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004bbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f2c0 8153 	blt.w	8004e6a <_dtoa_r+0x72a>
 8004bc4:	f1b9 0f0e 	cmp.w	r9, #14
 8004bc8:	f300 814f 	bgt.w	8004e6a <_dtoa_r+0x72a>
 8004bcc:	4b45      	ldr	r3, [pc, #276]	; (8004ce4 <_dtoa_r+0x5a4>)
 8004bce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004bd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004bd6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004bda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f280 80db 	bge.w	8004d98 <_dtoa_r+0x658>
 8004be2:	9b02      	ldr	r3, [sp, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f300 80d7 	bgt.w	8004d98 <_dtoa_r+0x658>
 8004bea:	f040 8274 	bne.w	80050d6 <_dtoa_r+0x996>
 8004bee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	4b40      	ldr	r3, [pc, #256]	; (8004cf8 <_dtoa_r+0x5b8>)
 8004bf6:	f7fb fc6f 	bl	80004d8 <__aeabi_dmul>
 8004bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bfe:	f7fb fef1 	bl	80009e4 <__aeabi_dcmpge>
 8004c02:	9c02      	ldr	r4, [sp, #8]
 8004c04:	4626      	mov	r6, r4
 8004c06:	2800      	cmp	r0, #0
 8004c08:	f040 824a 	bne.w	80050a0 <_dtoa_r+0x960>
 8004c0c:	2331      	movs	r3, #49	; 0x31
 8004c0e:	9f08      	ldr	r7, [sp, #32]
 8004c10:	f109 0901 	add.w	r9, r9, #1
 8004c14:	f807 3b01 	strb.w	r3, [r7], #1
 8004c18:	e246      	b.n	80050a8 <_dtoa_r+0x968>
 8004c1a:	07e2      	lsls	r2, r4, #31
 8004c1c:	d505      	bpl.n	8004c2a <_dtoa_r+0x4ea>
 8004c1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004c22:	f7fb fc59 	bl	80004d8 <__aeabi_dmul>
 8004c26:	2301      	movs	r3, #1
 8004c28:	3701      	adds	r7, #1
 8004c2a:	1064      	asrs	r4, r4, #1
 8004c2c:	3608      	adds	r6, #8
 8004c2e:	e76d      	b.n	8004b0c <_dtoa_r+0x3cc>
 8004c30:	2702      	movs	r7, #2
 8004c32:	e770      	b.n	8004b16 <_dtoa_r+0x3d6>
 8004c34:	46c8      	mov	r8, r9
 8004c36:	9c02      	ldr	r4, [sp, #8]
 8004c38:	e78f      	b.n	8004b5a <_dtoa_r+0x41a>
 8004c3a:	9908      	ldr	r1, [sp, #32]
 8004c3c:	4b29      	ldr	r3, [pc, #164]	; (8004ce4 <_dtoa_r+0x5a4>)
 8004c3e:	4421      	add	r1, r4
 8004c40:	9112      	str	r1, [sp, #72]	; 0x48
 8004c42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c48:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004c4c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c50:	2900      	cmp	r1, #0
 8004c52:	d055      	beq.n	8004d00 <_dtoa_r+0x5c0>
 8004c54:	2000      	movs	r0, #0
 8004c56:	4929      	ldr	r1, [pc, #164]	; (8004cfc <_dtoa_r+0x5bc>)
 8004c58:	f7fb fd68 	bl	800072c <__aeabi_ddiv>
 8004c5c:	463b      	mov	r3, r7
 8004c5e:	4632      	mov	r2, r6
 8004c60:	f7fb fa82 	bl	8000168 <__aeabi_dsub>
 8004c64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c68:	9f08      	ldr	r7, [sp, #32]
 8004c6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c6e:	f7fb fee3 	bl	8000a38 <__aeabi_d2iz>
 8004c72:	4604      	mov	r4, r0
 8004c74:	f7fb fbc6 	bl	8000404 <__aeabi_i2d>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c80:	f7fb fa72 	bl	8000168 <__aeabi_dsub>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	3430      	adds	r4, #48	; 0x30
 8004c8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004c92:	f807 4b01 	strb.w	r4, [r7], #1
 8004c96:	f7fb fe91 	bl	80009bc <__aeabi_dcmplt>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	d174      	bne.n	8004d88 <_dtoa_r+0x648>
 8004c9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	4911      	ldr	r1, [pc, #68]	; (8004cec <_dtoa_r+0x5ac>)
 8004ca6:	f7fb fa5f 	bl	8000168 <__aeabi_dsub>
 8004caa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004cae:	f7fb fe85 	bl	80009bc <__aeabi_dcmplt>
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	f040 80b6 	bne.w	8004e24 <_dtoa_r+0x6e4>
 8004cb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004cba:	429f      	cmp	r7, r3
 8004cbc:	f43f af7a 	beq.w	8004bb4 <_dtoa_r+0x474>
 8004cc0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <_dtoa_r+0x5b0>)
 8004cc8:	f7fb fc06 	bl	80004d8 <__aeabi_dmul>
 8004ccc:	2200      	movs	r2, #0
 8004cce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004cd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cd6:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <_dtoa_r+0x5b0>)
 8004cd8:	f7fb fbfe 	bl	80004d8 <__aeabi_dmul>
 8004cdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ce0:	e7c3      	b.n	8004c6a <_dtoa_r+0x52a>
 8004ce2:	bf00      	nop
 8004ce4:	08007720 	.word	0x08007720
 8004ce8:	080076f8 	.word	0x080076f8
 8004cec:	3ff00000 	.word	0x3ff00000
 8004cf0:	40240000 	.word	0x40240000
 8004cf4:	401c0000 	.word	0x401c0000
 8004cf8:	40140000 	.word	0x40140000
 8004cfc:	3fe00000 	.word	0x3fe00000
 8004d00:	4630      	mov	r0, r6
 8004d02:	4639      	mov	r1, r7
 8004d04:	f7fb fbe8 	bl	80004d8 <__aeabi_dmul>
 8004d08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d0e:	9c08      	ldr	r4, [sp, #32]
 8004d10:	9314      	str	r3, [sp, #80]	; 0x50
 8004d12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d16:	f7fb fe8f 	bl	8000a38 <__aeabi_d2iz>
 8004d1a:	9015      	str	r0, [sp, #84]	; 0x54
 8004d1c:	f7fb fb72 	bl	8000404 <__aeabi_i2d>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d28:	f7fb fa1e 	bl	8000168 <__aeabi_dsub>
 8004d2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d2e:	4606      	mov	r6, r0
 8004d30:	3330      	adds	r3, #48	; 0x30
 8004d32:	f804 3b01 	strb.w	r3, [r4], #1
 8004d36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d38:	460f      	mov	r7, r1
 8004d3a:	429c      	cmp	r4, r3
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	d124      	bne.n	8004d8c <_dtoa_r+0x64c>
 8004d42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d46:	4bb3      	ldr	r3, [pc, #716]	; (8005014 <_dtoa_r+0x8d4>)
 8004d48:	f7fb fa10 	bl	800016c <__adddf3>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4630      	mov	r0, r6
 8004d52:	4639      	mov	r1, r7
 8004d54:	f7fb fe50 	bl	80009f8 <__aeabi_dcmpgt>
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d162      	bne.n	8004e22 <_dtoa_r+0x6e2>
 8004d5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d60:	2000      	movs	r0, #0
 8004d62:	49ac      	ldr	r1, [pc, #688]	; (8005014 <_dtoa_r+0x8d4>)
 8004d64:	f7fb fa00 	bl	8000168 <__aeabi_dsub>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	4639      	mov	r1, r7
 8004d70:	f7fb fe24 	bl	80009bc <__aeabi_dcmplt>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	f43f af1d 	beq.w	8004bb4 <_dtoa_r+0x474>
 8004d7a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004d7c:	1e7b      	subs	r3, r7, #1
 8004d7e:	9314      	str	r3, [sp, #80]	; 0x50
 8004d80:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004d84:	2b30      	cmp	r3, #48	; 0x30
 8004d86:	d0f8      	beq.n	8004d7a <_dtoa_r+0x63a>
 8004d88:	46c1      	mov	r9, r8
 8004d8a:	e03a      	b.n	8004e02 <_dtoa_r+0x6c2>
 8004d8c:	4ba2      	ldr	r3, [pc, #648]	; (8005018 <_dtoa_r+0x8d8>)
 8004d8e:	f7fb fba3 	bl	80004d8 <__aeabi_dmul>
 8004d92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d96:	e7bc      	b.n	8004d12 <_dtoa_r+0x5d2>
 8004d98:	9f08      	ldr	r7, [sp, #32]
 8004d9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004da2:	f7fb fcc3 	bl	800072c <__aeabi_ddiv>
 8004da6:	f7fb fe47 	bl	8000a38 <__aeabi_d2iz>
 8004daa:	4604      	mov	r4, r0
 8004dac:	f7fb fb2a 	bl	8000404 <__aeabi_i2d>
 8004db0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004db4:	f7fb fb90 	bl	80004d8 <__aeabi_dmul>
 8004db8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dc4:	f7fb f9d0 	bl	8000168 <__aeabi_dsub>
 8004dc8:	f807 6b01 	strb.w	r6, [r7], #1
 8004dcc:	9e08      	ldr	r6, [sp, #32]
 8004dce:	9b02      	ldr	r3, [sp, #8]
 8004dd0:	1bbe      	subs	r6, r7, r6
 8004dd2:	42b3      	cmp	r3, r6
 8004dd4:	d13a      	bne.n	8004e4c <_dtoa_r+0x70c>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	f7fb f9c7 	bl	800016c <__adddf3>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004de6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004dea:	f7fb fe05 	bl	80009f8 <__aeabi_dcmpgt>
 8004dee:	bb58      	cbnz	r0, 8004e48 <_dtoa_r+0x708>
 8004df0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004df4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004df8:	f7fb fdd6 	bl	80009a8 <__aeabi_dcmpeq>
 8004dfc:	b108      	cbz	r0, 8004e02 <_dtoa_r+0x6c2>
 8004dfe:	07e1      	lsls	r1, r4, #31
 8004e00:	d422      	bmi.n	8004e48 <_dtoa_r+0x708>
 8004e02:	4628      	mov	r0, r5
 8004e04:	4651      	mov	r1, sl
 8004e06:	f000 fe5b 	bl	8005ac0 <_Bfree>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	703b      	strb	r3, [r7, #0]
 8004e0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004e10:	f109 0001 	add.w	r0, r9, #1
 8004e14:	6018      	str	r0, [r3, #0]
 8004e16:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f43f acdf 	beq.w	80047dc <_dtoa_r+0x9c>
 8004e1e:	601f      	str	r7, [r3, #0]
 8004e20:	e4dc      	b.n	80047dc <_dtoa_r+0x9c>
 8004e22:	4627      	mov	r7, r4
 8004e24:	463b      	mov	r3, r7
 8004e26:	461f      	mov	r7, r3
 8004e28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e2c:	2a39      	cmp	r2, #57	; 0x39
 8004e2e:	d107      	bne.n	8004e40 <_dtoa_r+0x700>
 8004e30:	9a08      	ldr	r2, [sp, #32]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d1f7      	bne.n	8004e26 <_dtoa_r+0x6e6>
 8004e36:	2230      	movs	r2, #48	; 0x30
 8004e38:	9908      	ldr	r1, [sp, #32]
 8004e3a:	f108 0801 	add.w	r8, r8, #1
 8004e3e:	700a      	strb	r2, [r1, #0]
 8004e40:	781a      	ldrb	r2, [r3, #0]
 8004e42:	3201      	adds	r2, #1
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	e79f      	b.n	8004d88 <_dtoa_r+0x648>
 8004e48:	46c8      	mov	r8, r9
 8004e4a:	e7eb      	b.n	8004e24 <_dtoa_r+0x6e4>
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	4b72      	ldr	r3, [pc, #456]	; (8005018 <_dtoa_r+0x8d8>)
 8004e50:	f7fb fb42 	bl	80004d8 <__aeabi_dmul>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f7fb fda2 	bl	80009a8 <__aeabi_dcmpeq>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	d098      	beq.n	8004d9a <_dtoa_r+0x65a>
 8004e68:	e7cb      	b.n	8004e02 <_dtoa_r+0x6c2>
 8004e6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e6c:	2a00      	cmp	r2, #0
 8004e6e:	f000 80cd 	beq.w	800500c <_dtoa_r+0x8cc>
 8004e72:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004e74:	2a01      	cmp	r2, #1
 8004e76:	f300 80af 	bgt.w	8004fd8 <_dtoa_r+0x898>
 8004e7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004e7c:	2a00      	cmp	r2, #0
 8004e7e:	f000 80a7 	beq.w	8004fd0 <_dtoa_r+0x890>
 8004e82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004e86:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004e88:	9f06      	ldr	r7, [sp, #24]
 8004e8a:	9a06      	ldr	r2, [sp, #24]
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	441a      	add	r2, r3
 8004e90:	9206      	str	r2, [sp, #24]
 8004e92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e94:	4628      	mov	r0, r5
 8004e96:	441a      	add	r2, r3
 8004e98:	9209      	str	r2, [sp, #36]	; 0x24
 8004e9a:	f000 ff15 	bl	8005cc8 <__i2b>
 8004e9e:	4606      	mov	r6, r0
 8004ea0:	2f00      	cmp	r7, #0
 8004ea2:	dd0c      	ble.n	8004ebe <_dtoa_r+0x77e>
 8004ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	dd09      	ble.n	8004ebe <_dtoa_r+0x77e>
 8004eaa:	42bb      	cmp	r3, r7
 8004eac:	bfa8      	it	ge
 8004eae:	463b      	movge	r3, r7
 8004eb0:	9a06      	ldr	r2, [sp, #24]
 8004eb2:	1aff      	subs	r7, r7, r3
 8004eb4:	1ad2      	subs	r2, r2, r3
 8004eb6:	9206      	str	r2, [sp, #24]
 8004eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ec0:	b1f3      	cbz	r3, 8004f00 <_dtoa_r+0x7c0>
 8004ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80a9 	beq.w	800501c <_dtoa_r+0x8dc>
 8004eca:	2c00      	cmp	r4, #0
 8004ecc:	dd10      	ble.n	8004ef0 <_dtoa_r+0x7b0>
 8004ece:	4631      	mov	r1, r6
 8004ed0:	4622      	mov	r2, r4
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	f000 ffb2 	bl	8005e3c <__pow5mult>
 8004ed8:	4652      	mov	r2, sl
 8004eda:	4601      	mov	r1, r0
 8004edc:	4606      	mov	r6, r0
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f000 ff08 	bl	8005cf4 <__multiply>
 8004ee4:	4680      	mov	r8, r0
 8004ee6:	4651      	mov	r1, sl
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f000 fde9 	bl	8005ac0 <_Bfree>
 8004eee:	46c2      	mov	sl, r8
 8004ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ef2:	1b1a      	subs	r2, r3, r4
 8004ef4:	d004      	beq.n	8004f00 <_dtoa_r+0x7c0>
 8004ef6:	4651      	mov	r1, sl
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f000 ff9f 	bl	8005e3c <__pow5mult>
 8004efe:	4682      	mov	sl, r0
 8004f00:	2101      	movs	r1, #1
 8004f02:	4628      	mov	r0, r5
 8004f04:	f000 fee0 	bl	8005cc8 <__i2b>
 8004f08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f0a:	4604      	mov	r4, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f340 8087 	ble.w	8005020 <_dtoa_r+0x8e0>
 8004f12:	461a      	mov	r2, r3
 8004f14:	4601      	mov	r1, r0
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 ff90 	bl	8005e3c <__pow5mult>
 8004f1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f1e:	4604      	mov	r4, r0
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	f340 8080 	ble.w	8005026 <_dtoa_r+0x8e6>
 8004f26:	f04f 0800 	mov.w	r8, #0
 8004f2a:	6923      	ldr	r3, [r4, #16]
 8004f2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f30:	6918      	ldr	r0, [r3, #16]
 8004f32:	f000 fe7b 	bl	8005c2c <__hi0bits>
 8004f36:	f1c0 0020 	rsb	r0, r0, #32
 8004f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f3c:	4418      	add	r0, r3
 8004f3e:	f010 001f 	ands.w	r0, r0, #31
 8004f42:	f000 8092 	beq.w	800506a <_dtoa_r+0x92a>
 8004f46:	f1c0 0320 	rsb	r3, r0, #32
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	f340 808a 	ble.w	8005064 <_dtoa_r+0x924>
 8004f50:	f1c0 001c 	rsb	r0, r0, #28
 8004f54:	9b06      	ldr	r3, [sp, #24]
 8004f56:	4407      	add	r7, r0
 8004f58:	4403      	add	r3, r0
 8004f5a:	9306      	str	r3, [sp, #24]
 8004f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f5e:	4403      	add	r3, r0
 8004f60:	9309      	str	r3, [sp, #36]	; 0x24
 8004f62:	9b06      	ldr	r3, [sp, #24]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	dd05      	ble.n	8004f74 <_dtoa_r+0x834>
 8004f68:	4651      	mov	r1, sl
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	f000 ffbf 	bl	8005ef0 <__lshift>
 8004f72:	4682      	mov	sl, r0
 8004f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	dd05      	ble.n	8004f86 <_dtoa_r+0x846>
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	4628      	mov	r0, r5
 8004f80:	f000 ffb6 	bl	8005ef0 <__lshift>
 8004f84:	4604      	mov	r4, r0
 8004f86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d070      	beq.n	800506e <_dtoa_r+0x92e>
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	4650      	mov	r0, sl
 8004f90:	f001 f81a 	bl	8005fc8 <__mcmp>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	da6a      	bge.n	800506e <_dtoa_r+0x92e>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	4651      	mov	r1, sl
 8004f9c:	220a      	movs	r2, #10
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f000 fdb0 	bl	8005b04 <__multadd>
 8004fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fa6:	4682      	mov	sl, r0
 8004fa8:	f109 39ff 	add.w	r9, r9, #4294967295
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 8193 	beq.w	80052d8 <_dtoa_r+0xb98>
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	220a      	movs	r2, #10
 8004fb8:	4628      	mov	r0, r5
 8004fba:	f000 fda3 	bl	8005b04 <__multadd>
 8004fbe:	f1bb 0f00 	cmp.w	fp, #0
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	f300 8093 	bgt.w	80050ee <_dtoa_r+0x9ae>
 8004fc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	dc57      	bgt.n	800507e <_dtoa_r+0x93e>
 8004fce:	e08e      	b.n	80050ee <_dtoa_r+0x9ae>
 8004fd0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004fd2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004fd6:	e756      	b.n	8004e86 <_dtoa_r+0x746>
 8004fd8:	9b02      	ldr	r3, [sp, #8]
 8004fda:	1e5c      	subs	r4, r3, #1
 8004fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fde:	42a3      	cmp	r3, r4
 8004fe0:	bfb7      	itett	lt
 8004fe2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004fe4:	1b1c      	subge	r4, r3, r4
 8004fe6:	1ae2      	sublt	r2, r4, r3
 8004fe8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004fea:	bfbe      	ittt	lt
 8004fec:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004fee:	189b      	addlt	r3, r3, r2
 8004ff0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004ff2:	9b02      	ldr	r3, [sp, #8]
 8004ff4:	bfb8      	it	lt
 8004ff6:	2400      	movlt	r4, #0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	bfbb      	ittet	lt
 8004ffc:	9b06      	ldrlt	r3, [sp, #24]
 8004ffe:	9a02      	ldrlt	r2, [sp, #8]
 8005000:	9f06      	ldrge	r7, [sp, #24]
 8005002:	1a9f      	sublt	r7, r3, r2
 8005004:	bfac      	ite	ge
 8005006:	9b02      	ldrge	r3, [sp, #8]
 8005008:	2300      	movlt	r3, #0
 800500a:	e73e      	b.n	8004e8a <_dtoa_r+0x74a>
 800500c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800500e:	9f06      	ldr	r7, [sp, #24]
 8005010:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005012:	e745      	b.n	8004ea0 <_dtoa_r+0x760>
 8005014:	3fe00000 	.word	0x3fe00000
 8005018:	40240000 	.word	0x40240000
 800501c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800501e:	e76a      	b.n	8004ef6 <_dtoa_r+0x7b6>
 8005020:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005022:	2b01      	cmp	r3, #1
 8005024:	dc19      	bgt.n	800505a <_dtoa_r+0x91a>
 8005026:	9b04      	ldr	r3, [sp, #16]
 8005028:	b9bb      	cbnz	r3, 800505a <_dtoa_r+0x91a>
 800502a:	9b05      	ldr	r3, [sp, #20]
 800502c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005030:	b99b      	cbnz	r3, 800505a <_dtoa_r+0x91a>
 8005032:	9b05      	ldr	r3, [sp, #20]
 8005034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005038:	0d1b      	lsrs	r3, r3, #20
 800503a:	051b      	lsls	r3, r3, #20
 800503c:	b183      	cbz	r3, 8005060 <_dtoa_r+0x920>
 800503e:	f04f 0801 	mov.w	r8, #1
 8005042:	9b06      	ldr	r3, [sp, #24]
 8005044:	3301      	adds	r3, #1
 8005046:	9306      	str	r3, [sp, #24]
 8005048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800504a:	3301      	adds	r3, #1
 800504c:	9309      	str	r3, [sp, #36]	; 0x24
 800504e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005050:	2b00      	cmp	r3, #0
 8005052:	f47f af6a 	bne.w	8004f2a <_dtoa_r+0x7ea>
 8005056:	2001      	movs	r0, #1
 8005058:	e76f      	b.n	8004f3a <_dtoa_r+0x7fa>
 800505a:	f04f 0800 	mov.w	r8, #0
 800505e:	e7f6      	b.n	800504e <_dtoa_r+0x90e>
 8005060:	4698      	mov	r8, r3
 8005062:	e7f4      	b.n	800504e <_dtoa_r+0x90e>
 8005064:	f43f af7d 	beq.w	8004f62 <_dtoa_r+0x822>
 8005068:	4618      	mov	r0, r3
 800506a:	301c      	adds	r0, #28
 800506c:	e772      	b.n	8004f54 <_dtoa_r+0x814>
 800506e:	9b02      	ldr	r3, [sp, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	dc36      	bgt.n	80050e2 <_dtoa_r+0x9a2>
 8005074:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005076:	2b02      	cmp	r3, #2
 8005078:	dd33      	ble.n	80050e2 <_dtoa_r+0x9a2>
 800507a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800507e:	f1bb 0f00 	cmp.w	fp, #0
 8005082:	d10d      	bne.n	80050a0 <_dtoa_r+0x960>
 8005084:	4621      	mov	r1, r4
 8005086:	465b      	mov	r3, fp
 8005088:	2205      	movs	r2, #5
 800508a:	4628      	mov	r0, r5
 800508c:	f000 fd3a 	bl	8005b04 <__multadd>
 8005090:	4601      	mov	r1, r0
 8005092:	4604      	mov	r4, r0
 8005094:	4650      	mov	r0, sl
 8005096:	f000 ff97 	bl	8005fc8 <__mcmp>
 800509a:	2800      	cmp	r0, #0
 800509c:	f73f adb6 	bgt.w	8004c0c <_dtoa_r+0x4cc>
 80050a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050a2:	9f08      	ldr	r7, [sp, #32]
 80050a4:	ea6f 0903 	mvn.w	r9, r3
 80050a8:	f04f 0800 	mov.w	r8, #0
 80050ac:	4621      	mov	r1, r4
 80050ae:	4628      	mov	r0, r5
 80050b0:	f000 fd06 	bl	8005ac0 <_Bfree>
 80050b4:	2e00      	cmp	r6, #0
 80050b6:	f43f aea4 	beq.w	8004e02 <_dtoa_r+0x6c2>
 80050ba:	f1b8 0f00 	cmp.w	r8, #0
 80050be:	d005      	beq.n	80050cc <_dtoa_r+0x98c>
 80050c0:	45b0      	cmp	r8, r6
 80050c2:	d003      	beq.n	80050cc <_dtoa_r+0x98c>
 80050c4:	4641      	mov	r1, r8
 80050c6:	4628      	mov	r0, r5
 80050c8:	f000 fcfa 	bl	8005ac0 <_Bfree>
 80050cc:	4631      	mov	r1, r6
 80050ce:	4628      	mov	r0, r5
 80050d0:	f000 fcf6 	bl	8005ac0 <_Bfree>
 80050d4:	e695      	b.n	8004e02 <_dtoa_r+0x6c2>
 80050d6:	2400      	movs	r4, #0
 80050d8:	4626      	mov	r6, r4
 80050da:	e7e1      	b.n	80050a0 <_dtoa_r+0x960>
 80050dc:	46c1      	mov	r9, r8
 80050de:	4626      	mov	r6, r4
 80050e0:	e594      	b.n	8004c0c <_dtoa_r+0x4cc>
 80050e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050e4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 80fc 	beq.w	80052e6 <_dtoa_r+0xba6>
 80050ee:	2f00      	cmp	r7, #0
 80050f0:	dd05      	ble.n	80050fe <_dtoa_r+0x9be>
 80050f2:	4631      	mov	r1, r6
 80050f4:	463a      	mov	r2, r7
 80050f6:	4628      	mov	r0, r5
 80050f8:	f000 fefa 	bl	8005ef0 <__lshift>
 80050fc:	4606      	mov	r6, r0
 80050fe:	f1b8 0f00 	cmp.w	r8, #0
 8005102:	d05c      	beq.n	80051be <_dtoa_r+0xa7e>
 8005104:	4628      	mov	r0, r5
 8005106:	6871      	ldr	r1, [r6, #4]
 8005108:	f000 fc9a 	bl	8005a40 <_Balloc>
 800510c:	4607      	mov	r7, r0
 800510e:	b928      	cbnz	r0, 800511c <_dtoa_r+0x9dc>
 8005110:	4602      	mov	r2, r0
 8005112:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005116:	4b7e      	ldr	r3, [pc, #504]	; (8005310 <_dtoa_r+0xbd0>)
 8005118:	f7ff bb26 	b.w	8004768 <_dtoa_r+0x28>
 800511c:	6932      	ldr	r2, [r6, #16]
 800511e:	f106 010c 	add.w	r1, r6, #12
 8005122:	3202      	adds	r2, #2
 8005124:	0092      	lsls	r2, r2, #2
 8005126:	300c      	adds	r0, #12
 8005128:	f7fd fcfe 	bl	8002b28 <memcpy>
 800512c:	2201      	movs	r2, #1
 800512e:	4639      	mov	r1, r7
 8005130:	4628      	mov	r0, r5
 8005132:	f000 fedd 	bl	8005ef0 <__lshift>
 8005136:	46b0      	mov	r8, r6
 8005138:	4606      	mov	r6, r0
 800513a:	9b08      	ldr	r3, [sp, #32]
 800513c:	3301      	adds	r3, #1
 800513e:	9302      	str	r3, [sp, #8]
 8005140:	9b08      	ldr	r3, [sp, #32]
 8005142:	445b      	add	r3, fp
 8005144:	930a      	str	r3, [sp, #40]	; 0x28
 8005146:	9b04      	ldr	r3, [sp, #16]
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	9309      	str	r3, [sp, #36]	; 0x24
 800514e:	9b02      	ldr	r3, [sp, #8]
 8005150:	4621      	mov	r1, r4
 8005152:	4650      	mov	r0, sl
 8005154:	f103 3bff 	add.w	fp, r3, #4294967295
 8005158:	f7ff fa62 	bl	8004620 <quorem>
 800515c:	4603      	mov	r3, r0
 800515e:	4641      	mov	r1, r8
 8005160:	3330      	adds	r3, #48	; 0x30
 8005162:	9004      	str	r0, [sp, #16]
 8005164:	4650      	mov	r0, sl
 8005166:	930b      	str	r3, [sp, #44]	; 0x2c
 8005168:	f000 ff2e 	bl	8005fc8 <__mcmp>
 800516c:	4632      	mov	r2, r6
 800516e:	9006      	str	r0, [sp, #24]
 8005170:	4621      	mov	r1, r4
 8005172:	4628      	mov	r0, r5
 8005174:	f000 ff44 	bl	8006000 <__mdiff>
 8005178:	68c2      	ldr	r2, [r0, #12]
 800517a:	4607      	mov	r7, r0
 800517c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800517e:	bb02      	cbnz	r2, 80051c2 <_dtoa_r+0xa82>
 8005180:	4601      	mov	r1, r0
 8005182:	4650      	mov	r0, sl
 8005184:	f000 ff20 	bl	8005fc8 <__mcmp>
 8005188:	4602      	mov	r2, r0
 800518a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800518c:	4639      	mov	r1, r7
 800518e:	4628      	mov	r0, r5
 8005190:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005194:	f000 fc94 	bl	8005ac0 <_Bfree>
 8005198:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800519a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800519c:	9f02      	ldr	r7, [sp, #8]
 800519e:	ea43 0102 	orr.w	r1, r3, r2
 80051a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a4:	430b      	orrs	r3, r1
 80051a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051a8:	d10d      	bne.n	80051c6 <_dtoa_r+0xa86>
 80051aa:	2b39      	cmp	r3, #57	; 0x39
 80051ac:	d027      	beq.n	80051fe <_dtoa_r+0xabe>
 80051ae:	9a06      	ldr	r2, [sp, #24]
 80051b0:	2a00      	cmp	r2, #0
 80051b2:	dd01      	ble.n	80051b8 <_dtoa_r+0xa78>
 80051b4:	9b04      	ldr	r3, [sp, #16]
 80051b6:	3331      	adds	r3, #49	; 0x31
 80051b8:	f88b 3000 	strb.w	r3, [fp]
 80051bc:	e776      	b.n	80050ac <_dtoa_r+0x96c>
 80051be:	4630      	mov	r0, r6
 80051c0:	e7b9      	b.n	8005136 <_dtoa_r+0x9f6>
 80051c2:	2201      	movs	r2, #1
 80051c4:	e7e2      	b.n	800518c <_dtoa_r+0xa4c>
 80051c6:	9906      	ldr	r1, [sp, #24]
 80051c8:	2900      	cmp	r1, #0
 80051ca:	db04      	blt.n	80051d6 <_dtoa_r+0xa96>
 80051cc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80051ce:	4301      	orrs	r1, r0
 80051d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051d2:	4301      	orrs	r1, r0
 80051d4:	d120      	bne.n	8005218 <_dtoa_r+0xad8>
 80051d6:	2a00      	cmp	r2, #0
 80051d8:	ddee      	ble.n	80051b8 <_dtoa_r+0xa78>
 80051da:	4651      	mov	r1, sl
 80051dc:	2201      	movs	r2, #1
 80051de:	4628      	mov	r0, r5
 80051e0:	9302      	str	r3, [sp, #8]
 80051e2:	f000 fe85 	bl	8005ef0 <__lshift>
 80051e6:	4621      	mov	r1, r4
 80051e8:	4682      	mov	sl, r0
 80051ea:	f000 feed 	bl	8005fc8 <__mcmp>
 80051ee:	2800      	cmp	r0, #0
 80051f0:	9b02      	ldr	r3, [sp, #8]
 80051f2:	dc02      	bgt.n	80051fa <_dtoa_r+0xaba>
 80051f4:	d1e0      	bne.n	80051b8 <_dtoa_r+0xa78>
 80051f6:	07da      	lsls	r2, r3, #31
 80051f8:	d5de      	bpl.n	80051b8 <_dtoa_r+0xa78>
 80051fa:	2b39      	cmp	r3, #57	; 0x39
 80051fc:	d1da      	bne.n	80051b4 <_dtoa_r+0xa74>
 80051fe:	2339      	movs	r3, #57	; 0x39
 8005200:	f88b 3000 	strb.w	r3, [fp]
 8005204:	463b      	mov	r3, r7
 8005206:	461f      	mov	r7, r3
 8005208:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800520c:	3b01      	subs	r3, #1
 800520e:	2a39      	cmp	r2, #57	; 0x39
 8005210:	d050      	beq.n	80052b4 <_dtoa_r+0xb74>
 8005212:	3201      	adds	r2, #1
 8005214:	701a      	strb	r2, [r3, #0]
 8005216:	e749      	b.n	80050ac <_dtoa_r+0x96c>
 8005218:	2a00      	cmp	r2, #0
 800521a:	dd03      	ble.n	8005224 <_dtoa_r+0xae4>
 800521c:	2b39      	cmp	r3, #57	; 0x39
 800521e:	d0ee      	beq.n	80051fe <_dtoa_r+0xabe>
 8005220:	3301      	adds	r3, #1
 8005222:	e7c9      	b.n	80051b8 <_dtoa_r+0xa78>
 8005224:	9a02      	ldr	r2, [sp, #8]
 8005226:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005228:	f802 3c01 	strb.w	r3, [r2, #-1]
 800522c:	428a      	cmp	r2, r1
 800522e:	d02a      	beq.n	8005286 <_dtoa_r+0xb46>
 8005230:	4651      	mov	r1, sl
 8005232:	2300      	movs	r3, #0
 8005234:	220a      	movs	r2, #10
 8005236:	4628      	mov	r0, r5
 8005238:	f000 fc64 	bl	8005b04 <__multadd>
 800523c:	45b0      	cmp	r8, r6
 800523e:	4682      	mov	sl, r0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	f04f 020a 	mov.w	r2, #10
 8005248:	4641      	mov	r1, r8
 800524a:	4628      	mov	r0, r5
 800524c:	d107      	bne.n	800525e <_dtoa_r+0xb1e>
 800524e:	f000 fc59 	bl	8005b04 <__multadd>
 8005252:	4680      	mov	r8, r0
 8005254:	4606      	mov	r6, r0
 8005256:	9b02      	ldr	r3, [sp, #8]
 8005258:	3301      	adds	r3, #1
 800525a:	9302      	str	r3, [sp, #8]
 800525c:	e777      	b.n	800514e <_dtoa_r+0xa0e>
 800525e:	f000 fc51 	bl	8005b04 <__multadd>
 8005262:	4631      	mov	r1, r6
 8005264:	4680      	mov	r8, r0
 8005266:	2300      	movs	r3, #0
 8005268:	220a      	movs	r2, #10
 800526a:	4628      	mov	r0, r5
 800526c:	f000 fc4a 	bl	8005b04 <__multadd>
 8005270:	4606      	mov	r6, r0
 8005272:	e7f0      	b.n	8005256 <_dtoa_r+0xb16>
 8005274:	f1bb 0f00 	cmp.w	fp, #0
 8005278:	bfcc      	ite	gt
 800527a:	465f      	movgt	r7, fp
 800527c:	2701      	movle	r7, #1
 800527e:	f04f 0800 	mov.w	r8, #0
 8005282:	9a08      	ldr	r2, [sp, #32]
 8005284:	4417      	add	r7, r2
 8005286:	4651      	mov	r1, sl
 8005288:	2201      	movs	r2, #1
 800528a:	4628      	mov	r0, r5
 800528c:	9302      	str	r3, [sp, #8]
 800528e:	f000 fe2f 	bl	8005ef0 <__lshift>
 8005292:	4621      	mov	r1, r4
 8005294:	4682      	mov	sl, r0
 8005296:	f000 fe97 	bl	8005fc8 <__mcmp>
 800529a:	2800      	cmp	r0, #0
 800529c:	dcb2      	bgt.n	8005204 <_dtoa_r+0xac4>
 800529e:	d102      	bne.n	80052a6 <_dtoa_r+0xb66>
 80052a0:	9b02      	ldr	r3, [sp, #8]
 80052a2:	07db      	lsls	r3, r3, #31
 80052a4:	d4ae      	bmi.n	8005204 <_dtoa_r+0xac4>
 80052a6:	463b      	mov	r3, r7
 80052a8:	461f      	mov	r7, r3
 80052aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052ae:	2a30      	cmp	r2, #48	; 0x30
 80052b0:	d0fa      	beq.n	80052a8 <_dtoa_r+0xb68>
 80052b2:	e6fb      	b.n	80050ac <_dtoa_r+0x96c>
 80052b4:	9a08      	ldr	r2, [sp, #32]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d1a5      	bne.n	8005206 <_dtoa_r+0xac6>
 80052ba:	2331      	movs	r3, #49	; 0x31
 80052bc:	f109 0901 	add.w	r9, r9, #1
 80052c0:	7013      	strb	r3, [r2, #0]
 80052c2:	e6f3      	b.n	80050ac <_dtoa_r+0x96c>
 80052c4:	4b13      	ldr	r3, [pc, #76]	; (8005314 <_dtoa_r+0xbd4>)
 80052c6:	f7ff baa7 	b.w	8004818 <_dtoa_r+0xd8>
 80052ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f47f aa80 	bne.w	80047d2 <_dtoa_r+0x92>
 80052d2:	4b11      	ldr	r3, [pc, #68]	; (8005318 <_dtoa_r+0xbd8>)
 80052d4:	f7ff baa0 	b.w	8004818 <_dtoa_r+0xd8>
 80052d8:	f1bb 0f00 	cmp.w	fp, #0
 80052dc:	dc03      	bgt.n	80052e6 <_dtoa_r+0xba6>
 80052de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	f73f aecc 	bgt.w	800507e <_dtoa_r+0x93e>
 80052e6:	9f08      	ldr	r7, [sp, #32]
 80052e8:	4621      	mov	r1, r4
 80052ea:	4650      	mov	r0, sl
 80052ec:	f7ff f998 	bl	8004620 <quorem>
 80052f0:	9a08      	ldr	r2, [sp, #32]
 80052f2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80052f6:	f807 3b01 	strb.w	r3, [r7], #1
 80052fa:	1aba      	subs	r2, r7, r2
 80052fc:	4593      	cmp	fp, r2
 80052fe:	ddb9      	ble.n	8005274 <_dtoa_r+0xb34>
 8005300:	4651      	mov	r1, sl
 8005302:	2300      	movs	r3, #0
 8005304:	220a      	movs	r2, #10
 8005306:	4628      	mov	r0, r5
 8005308:	f000 fbfc 	bl	8005b04 <__multadd>
 800530c:	4682      	mov	sl, r0
 800530e:	e7eb      	b.n	80052e8 <_dtoa_r+0xba8>
 8005310:	08007604 	.word	0x08007604
 8005314:	08007404 	.word	0x08007404
 8005318:	08007581 	.word	0x08007581

0800531c <rshift>:
 800531c:	6903      	ldr	r3, [r0, #16]
 800531e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005322:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005326:	f100 0414 	add.w	r4, r0, #20
 800532a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800532e:	dd46      	ble.n	80053be <rshift+0xa2>
 8005330:	f011 011f 	ands.w	r1, r1, #31
 8005334:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005338:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800533c:	d10c      	bne.n	8005358 <rshift+0x3c>
 800533e:	4629      	mov	r1, r5
 8005340:	f100 0710 	add.w	r7, r0, #16
 8005344:	42b1      	cmp	r1, r6
 8005346:	d335      	bcc.n	80053b4 <rshift+0x98>
 8005348:	1a9b      	subs	r3, r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	1eea      	subs	r2, r5, #3
 800534e:	4296      	cmp	r6, r2
 8005350:	bf38      	it	cc
 8005352:	2300      	movcc	r3, #0
 8005354:	4423      	add	r3, r4
 8005356:	e015      	b.n	8005384 <rshift+0x68>
 8005358:	46a1      	mov	r9, r4
 800535a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800535e:	f1c1 0820 	rsb	r8, r1, #32
 8005362:	40cf      	lsrs	r7, r1
 8005364:	f105 0e04 	add.w	lr, r5, #4
 8005368:	4576      	cmp	r6, lr
 800536a:	46f4      	mov	ip, lr
 800536c:	d816      	bhi.n	800539c <rshift+0x80>
 800536e:	1a9b      	subs	r3, r3, r2
 8005370:	009a      	lsls	r2, r3, #2
 8005372:	3a04      	subs	r2, #4
 8005374:	3501      	adds	r5, #1
 8005376:	42ae      	cmp	r6, r5
 8005378:	bf38      	it	cc
 800537a:	2200      	movcc	r2, #0
 800537c:	18a3      	adds	r3, r4, r2
 800537e:	50a7      	str	r7, [r4, r2]
 8005380:	b107      	cbz	r7, 8005384 <rshift+0x68>
 8005382:	3304      	adds	r3, #4
 8005384:	42a3      	cmp	r3, r4
 8005386:	eba3 0204 	sub.w	r2, r3, r4
 800538a:	bf08      	it	eq
 800538c:	2300      	moveq	r3, #0
 800538e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005392:	6102      	str	r2, [r0, #16]
 8005394:	bf08      	it	eq
 8005396:	6143      	streq	r3, [r0, #20]
 8005398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800539c:	f8dc c000 	ldr.w	ip, [ip]
 80053a0:	fa0c fc08 	lsl.w	ip, ip, r8
 80053a4:	ea4c 0707 	orr.w	r7, ip, r7
 80053a8:	f849 7b04 	str.w	r7, [r9], #4
 80053ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 80053b0:	40cf      	lsrs	r7, r1
 80053b2:	e7d9      	b.n	8005368 <rshift+0x4c>
 80053b4:	f851 cb04 	ldr.w	ip, [r1], #4
 80053b8:	f847 cf04 	str.w	ip, [r7, #4]!
 80053bc:	e7c2      	b.n	8005344 <rshift+0x28>
 80053be:	4623      	mov	r3, r4
 80053c0:	e7e0      	b.n	8005384 <rshift+0x68>

080053c2 <__hexdig_fun>:
 80053c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80053c6:	2b09      	cmp	r3, #9
 80053c8:	d802      	bhi.n	80053d0 <__hexdig_fun+0xe>
 80053ca:	3820      	subs	r0, #32
 80053cc:	b2c0      	uxtb	r0, r0
 80053ce:	4770      	bx	lr
 80053d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80053d4:	2b05      	cmp	r3, #5
 80053d6:	d801      	bhi.n	80053dc <__hexdig_fun+0x1a>
 80053d8:	3847      	subs	r0, #71	; 0x47
 80053da:	e7f7      	b.n	80053cc <__hexdig_fun+0xa>
 80053dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80053e0:	2b05      	cmp	r3, #5
 80053e2:	d801      	bhi.n	80053e8 <__hexdig_fun+0x26>
 80053e4:	3827      	subs	r0, #39	; 0x27
 80053e6:	e7f1      	b.n	80053cc <__hexdig_fun+0xa>
 80053e8:	2000      	movs	r0, #0
 80053ea:	4770      	bx	lr

080053ec <__gethex>:
 80053ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f0:	b08b      	sub	sp, #44	; 0x2c
 80053f2:	9306      	str	r3, [sp, #24]
 80053f4:	4bb9      	ldr	r3, [pc, #740]	; (80056dc <__gethex+0x2f0>)
 80053f6:	9002      	str	r0, [sp, #8]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	468b      	mov	fp, r1
 80053fc:	4618      	mov	r0, r3
 80053fe:	4690      	mov	r8, r2
 8005400:	9303      	str	r3, [sp, #12]
 8005402:	f7fa fea5 	bl	8000150 <strlen>
 8005406:	4682      	mov	sl, r0
 8005408:	9b03      	ldr	r3, [sp, #12]
 800540a:	f8db 2000 	ldr.w	r2, [fp]
 800540e:	4403      	add	r3, r0
 8005410:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005414:	9307      	str	r3, [sp, #28]
 8005416:	1c93      	adds	r3, r2, #2
 8005418:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800541c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005420:	32fe      	adds	r2, #254	; 0xfe
 8005422:	18d1      	adds	r1, r2, r3
 8005424:	461f      	mov	r7, r3
 8005426:	f813 0b01 	ldrb.w	r0, [r3], #1
 800542a:	9101      	str	r1, [sp, #4]
 800542c:	2830      	cmp	r0, #48	; 0x30
 800542e:	d0f8      	beq.n	8005422 <__gethex+0x36>
 8005430:	f7ff ffc7 	bl	80053c2 <__hexdig_fun>
 8005434:	4604      	mov	r4, r0
 8005436:	2800      	cmp	r0, #0
 8005438:	d13a      	bne.n	80054b0 <__gethex+0xc4>
 800543a:	4652      	mov	r2, sl
 800543c:	4638      	mov	r0, r7
 800543e:	9903      	ldr	r1, [sp, #12]
 8005440:	f001 f9dc 	bl	80067fc <strncmp>
 8005444:	4605      	mov	r5, r0
 8005446:	2800      	cmp	r0, #0
 8005448:	d166      	bne.n	8005518 <__gethex+0x12c>
 800544a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800544e:	eb07 060a 	add.w	r6, r7, sl
 8005452:	f7ff ffb6 	bl	80053c2 <__hexdig_fun>
 8005456:	2800      	cmp	r0, #0
 8005458:	d060      	beq.n	800551c <__gethex+0x130>
 800545a:	4633      	mov	r3, r6
 800545c:	7818      	ldrb	r0, [r3, #0]
 800545e:	461f      	mov	r7, r3
 8005460:	2830      	cmp	r0, #48	; 0x30
 8005462:	f103 0301 	add.w	r3, r3, #1
 8005466:	d0f9      	beq.n	800545c <__gethex+0x70>
 8005468:	f7ff ffab 	bl	80053c2 <__hexdig_fun>
 800546c:	2301      	movs	r3, #1
 800546e:	fab0 f480 	clz	r4, r0
 8005472:	4635      	mov	r5, r6
 8005474:	0964      	lsrs	r4, r4, #5
 8005476:	9301      	str	r3, [sp, #4]
 8005478:	463a      	mov	r2, r7
 800547a:	4616      	mov	r6, r2
 800547c:	7830      	ldrb	r0, [r6, #0]
 800547e:	3201      	adds	r2, #1
 8005480:	f7ff ff9f 	bl	80053c2 <__hexdig_fun>
 8005484:	2800      	cmp	r0, #0
 8005486:	d1f8      	bne.n	800547a <__gethex+0x8e>
 8005488:	4652      	mov	r2, sl
 800548a:	4630      	mov	r0, r6
 800548c:	9903      	ldr	r1, [sp, #12]
 800548e:	f001 f9b5 	bl	80067fc <strncmp>
 8005492:	b980      	cbnz	r0, 80054b6 <__gethex+0xca>
 8005494:	b94d      	cbnz	r5, 80054aa <__gethex+0xbe>
 8005496:	eb06 050a 	add.w	r5, r6, sl
 800549a:	462a      	mov	r2, r5
 800549c:	4616      	mov	r6, r2
 800549e:	7830      	ldrb	r0, [r6, #0]
 80054a0:	3201      	adds	r2, #1
 80054a2:	f7ff ff8e 	bl	80053c2 <__hexdig_fun>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d1f8      	bne.n	800549c <__gethex+0xb0>
 80054aa:	1bad      	subs	r5, r5, r6
 80054ac:	00ad      	lsls	r5, r5, #2
 80054ae:	e004      	b.n	80054ba <__gethex+0xce>
 80054b0:	2400      	movs	r4, #0
 80054b2:	4625      	mov	r5, r4
 80054b4:	e7e0      	b.n	8005478 <__gethex+0x8c>
 80054b6:	2d00      	cmp	r5, #0
 80054b8:	d1f7      	bne.n	80054aa <__gethex+0xbe>
 80054ba:	7833      	ldrb	r3, [r6, #0]
 80054bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80054c0:	2b50      	cmp	r3, #80	; 0x50
 80054c2:	d139      	bne.n	8005538 <__gethex+0x14c>
 80054c4:	7873      	ldrb	r3, [r6, #1]
 80054c6:	2b2b      	cmp	r3, #43	; 0x2b
 80054c8:	d02a      	beq.n	8005520 <__gethex+0x134>
 80054ca:	2b2d      	cmp	r3, #45	; 0x2d
 80054cc:	d02c      	beq.n	8005528 <__gethex+0x13c>
 80054ce:	f04f 0900 	mov.w	r9, #0
 80054d2:	1c71      	adds	r1, r6, #1
 80054d4:	7808      	ldrb	r0, [r1, #0]
 80054d6:	f7ff ff74 	bl	80053c2 <__hexdig_fun>
 80054da:	1e43      	subs	r3, r0, #1
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b18      	cmp	r3, #24
 80054e0:	d82a      	bhi.n	8005538 <__gethex+0x14c>
 80054e2:	f1a0 0210 	sub.w	r2, r0, #16
 80054e6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80054ea:	f7ff ff6a 	bl	80053c2 <__hexdig_fun>
 80054ee:	1e43      	subs	r3, r0, #1
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b18      	cmp	r3, #24
 80054f4:	d91b      	bls.n	800552e <__gethex+0x142>
 80054f6:	f1b9 0f00 	cmp.w	r9, #0
 80054fa:	d000      	beq.n	80054fe <__gethex+0x112>
 80054fc:	4252      	negs	r2, r2
 80054fe:	4415      	add	r5, r2
 8005500:	f8cb 1000 	str.w	r1, [fp]
 8005504:	b1d4      	cbz	r4, 800553c <__gethex+0x150>
 8005506:	9b01      	ldr	r3, [sp, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	bf14      	ite	ne
 800550c:	2700      	movne	r7, #0
 800550e:	2706      	moveq	r7, #6
 8005510:	4638      	mov	r0, r7
 8005512:	b00b      	add	sp, #44	; 0x2c
 8005514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005518:	463e      	mov	r6, r7
 800551a:	4625      	mov	r5, r4
 800551c:	2401      	movs	r4, #1
 800551e:	e7cc      	b.n	80054ba <__gethex+0xce>
 8005520:	f04f 0900 	mov.w	r9, #0
 8005524:	1cb1      	adds	r1, r6, #2
 8005526:	e7d5      	b.n	80054d4 <__gethex+0xe8>
 8005528:	f04f 0901 	mov.w	r9, #1
 800552c:	e7fa      	b.n	8005524 <__gethex+0x138>
 800552e:	230a      	movs	r3, #10
 8005530:	fb03 0202 	mla	r2, r3, r2, r0
 8005534:	3a10      	subs	r2, #16
 8005536:	e7d6      	b.n	80054e6 <__gethex+0xfa>
 8005538:	4631      	mov	r1, r6
 800553a:	e7e1      	b.n	8005500 <__gethex+0x114>
 800553c:	4621      	mov	r1, r4
 800553e:	1bf3      	subs	r3, r6, r7
 8005540:	3b01      	subs	r3, #1
 8005542:	2b07      	cmp	r3, #7
 8005544:	dc0a      	bgt.n	800555c <__gethex+0x170>
 8005546:	9802      	ldr	r0, [sp, #8]
 8005548:	f000 fa7a 	bl	8005a40 <_Balloc>
 800554c:	4604      	mov	r4, r0
 800554e:	b940      	cbnz	r0, 8005562 <__gethex+0x176>
 8005550:	4602      	mov	r2, r0
 8005552:	21de      	movs	r1, #222	; 0xde
 8005554:	4b62      	ldr	r3, [pc, #392]	; (80056e0 <__gethex+0x2f4>)
 8005556:	4863      	ldr	r0, [pc, #396]	; (80056e4 <__gethex+0x2f8>)
 8005558:	f001 f970 	bl	800683c <__assert_func>
 800555c:	3101      	adds	r1, #1
 800555e:	105b      	asrs	r3, r3, #1
 8005560:	e7ef      	b.n	8005542 <__gethex+0x156>
 8005562:	f04f 0b00 	mov.w	fp, #0
 8005566:	f100 0914 	add.w	r9, r0, #20
 800556a:	f1ca 0301 	rsb	r3, sl, #1
 800556e:	f8cd 9010 	str.w	r9, [sp, #16]
 8005572:	f8cd b004 	str.w	fp, [sp, #4]
 8005576:	9308      	str	r3, [sp, #32]
 8005578:	42b7      	cmp	r7, r6
 800557a:	d33f      	bcc.n	80055fc <__gethex+0x210>
 800557c:	9f04      	ldr	r7, [sp, #16]
 800557e:	9b01      	ldr	r3, [sp, #4]
 8005580:	f847 3b04 	str.w	r3, [r7], #4
 8005584:	eba7 0709 	sub.w	r7, r7, r9
 8005588:	10bf      	asrs	r7, r7, #2
 800558a:	6127      	str	r7, [r4, #16]
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fb4d 	bl	8005c2c <__hi0bits>
 8005592:	017f      	lsls	r7, r7, #5
 8005594:	f8d8 6000 	ldr.w	r6, [r8]
 8005598:	1a3f      	subs	r7, r7, r0
 800559a:	42b7      	cmp	r7, r6
 800559c:	dd62      	ble.n	8005664 <__gethex+0x278>
 800559e:	1bbf      	subs	r7, r7, r6
 80055a0:	4639      	mov	r1, r7
 80055a2:	4620      	mov	r0, r4
 80055a4:	f000 fee3 	bl	800636e <__any_on>
 80055a8:	4682      	mov	sl, r0
 80055aa:	b1a8      	cbz	r0, 80055d8 <__gethex+0x1ec>
 80055ac:	f04f 0a01 	mov.w	sl, #1
 80055b0:	1e7b      	subs	r3, r7, #1
 80055b2:	1159      	asrs	r1, r3, #5
 80055b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80055b8:	f003 021f 	and.w	r2, r3, #31
 80055bc:	fa0a f202 	lsl.w	r2, sl, r2
 80055c0:	420a      	tst	r2, r1
 80055c2:	d009      	beq.n	80055d8 <__gethex+0x1ec>
 80055c4:	4553      	cmp	r3, sl
 80055c6:	dd05      	ble.n	80055d4 <__gethex+0x1e8>
 80055c8:	4620      	mov	r0, r4
 80055ca:	1eb9      	subs	r1, r7, #2
 80055cc:	f000 fecf 	bl	800636e <__any_on>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d144      	bne.n	800565e <__gethex+0x272>
 80055d4:	f04f 0a02 	mov.w	sl, #2
 80055d8:	4639      	mov	r1, r7
 80055da:	4620      	mov	r0, r4
 80055dc:	f7ff fe9e 	bl	800531c <rshift>
 80055e0:	443d      	add	r5, r7
 80055e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80055e6:	42ab      	cmp	r3, r5
 80055e8:	da4a      	bge.n	8005680 <__gethex+0x294>
 80055ea:	4621      	mov	r1, r4
 80055ec:	9802      	ldr	r0, [sp, #8]
 80055ee:	f000 fa67 	bl	8005ac0 <_Bfree>
 80055f2:	2300      	movs	r3, #0
 80055f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80055f6:	27a3      	movs	r7, #163	; 0xa3
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	e789      	b.n	8005510 <__gethex+0x124>
 80055fc:	1e73      	subs	r3, r6, #1
 80055fe:	9a07      	ldr	r2, [sp, #28]
 8005600:	9305      	str	r3, [sp, #20]
 8005602:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005606:	4293      	cmp	r3, r2
 8005608:	d019      	beq.n	800563e <__gethex+0x252>
 800560a:	f1bb 0f20 	cmp.w	fp, #32
 800560e:	d107      	bne.n	8005620 <__gethex+0x234>
 8005610:	9b04      	ldr	r3, [sp, #16]
 8005612:	9a01      	ldr	r2, [sp, #4]
 8005614:	f843 2b04 	str.w	r2, [r3], #4
 8005618:	9304      	str	r3, [sp, #16]
 800561a:	2300      	movs	r3, #0
 800561c:	469b      	mov	fp, r3
 800561e:	9301      	str	r3, [sp, #4]
 8005620:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005624:	f7ff fecd 	bl	80053c2 <__hexdig_fun>
 8005628:	9b01      	ldr	r3, [sp, #4]
 800562a:	f000 000f 	and.w	r0, r0, #15
 800562e:	fa00 f00b 	lsl.w	r0, r0, fp
 8005632:	4303      	orrs	r3, r0
 8005634:	9301      	str	r3, [sp, #4]
 8005636:	f10b 0b04 	add.w	fp, fp, #4
 800563a:	9b05      	ldr	r3, [sp, #20]
 800563c:	e00d      	b.n	800565a <__gethex+0x26e>
 800563e:	9b05      	ldr	r3, [sp, #20]
 8005640:	9a08      	ldr	r2, [sp, #32]
 8005642:	4413      	add	r3, r2
 8005644:	42bb      	cmp	r3, r7
 8005646:	d3e0      	bcc.n	800560a <__gethex+0x21e>
 8005648:	4618      	mov	r0, r3
 800564a:	4652      	mov	r2, sl
 800564c:	9903      	ldr	r1, [sp, #12]
 800564e:	9309      	str	r3, [sp, #36]	; 0x24
 8005650:	f001 f8d4 	bl	80067fc <strncmp>
 8005654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005656:	2800      	cmp	r0, #0
 8005658:	d1d7      	bne.n	800560a <__gethex+0x21e>
 800565a:	461e      	mov	r6, r3
 800565c:	e78c      	b.n	8005578 <__gethex+0x18c>
 800565e:	f04f 0a03 	mov.w	sl, #3
 8005662:	e7b9      	b.n	80055d8 <__gethex+0x1ec>
 8005664:	da09      	bge.n	800567a <__gethex+0x28e>
 8005666:	1bf7      	subs	r7, r6, r7
 8005668:	4621      	mov	r1, r4
 800566a:	463a      	mov	r2, r7
 800566c:	9802      	ldr	r0, [sp, #8]
 800566e:	f000 fc3f 	bl	8005ef0 <__lshift>
 8005672:	4604      	mov	r4, r0
 8005674:	1bed      	subs	r5, r5, r7
 8005676:	f100 0914 	add.w	r9, r0, #20
 800567a:	f04f 0a00 	mov.w	sl, #0
 800567e:	e7b0      	b.n	80055e2 <__gethex+0x1f6>
 8005680:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005684:	42a8      	cmp	r0, r5
 8005686:	dd71      	ble.n	800576c <__gethex+0x380>
 8005688:	1b45      	subs	r5, r0, r5
 800568a:	42ae      	cmp	r6, r5
 800568c:	dc34      	bgt.n	80056f8 <__gethex+0x30c>
 800568e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d028      	beq.n	80056e8 <__gethex+0x2fc>
 8005696:	2b03      	cmp	r3, #3
 8005698:	d02a      	beq.n	80056f0 <__gethex+0x304>
 800569a:	2b01      	cmp	r3, #1
 800569c:	d115      	bne.n	80056ca <__gethex+0x2de>
 800569e:	42ae      	cmp	r6, r5
 80056a0:	d113      	bne.n	80056ca <__gethex+0x2de>
 80056a2:	2e01      	cmp	r6, #1
 80056a4:	d10b      	bne.n	80056be <__gethex+0x2d2>
 80056a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80056aa:	9a06      	ldr	r2, [sp, #24]
 80056ac:	2762      	movs	r7, #98	; 0x62
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	2301      	movs	r3, #1
 80056b2:	6123      	str	r3, [r4, #16]
 80056b4:	f8c9 3000 	str.w	r3, [r9]
 80056b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056ba:	601c      	str	r4, [r3, #0]
 80056bc:	e728      	b.n	8005510 <__gethex+0x124>
 80056be:	4620      	mov	r0, r4
 80056c0:	1e71      	subs	r1, r6, #1
 80056c2:	f000 fe54 	bl	800636e <__any_on>
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d1ed      	bne.n	80056a6 <__gethex+0x2ba>
 80056ca:	4621      	mov	r1, r4
 80056cc:	9802      	ldr	r0, [sp, #8]
 80056ce:	f000 f9f7 	bl	8005ac0 <_Bfree>
 80056d2:	2300      	movs	r3, #0
 80056d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80056d6:	2750      	movs	r7, #80	; 0x50
 80056d8:	6013      	str	r3, [r2, #0]
 80056da:	e719      	b.n	8005510 <__gethex+0x124>
 80056dc:	08007680 	.word	0x08007680
 80056e0:	08007604 	.word	0x08007604
 80056e4:	08007615 	.word	0x08007615
 80056e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1ed      	bne.n	80056ca <__gethex+0x2de>
 80056ee:	e7da      	b.n	80056a6 <__gethex+0x2ba>
 80056f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1d7      	bne.n	80056a6 <__gethex+0x2ba>
 80056f6:	e7e8      	b.n	80056ca <__gethex+0x2de>
 80056f8:	1e6f      	subs	r7, r5, #1
 80056fa:	f1ba 0f00 	cmp.w	sl, #0
 80056fe:	d132      	bne.n	8005766 <__gethex+0x37a>
 8005700:	b127      	cbz	r7, 800570c <__gethex+0x320>
 8005702:	4639      	mov	r1, r7
 8005704:	4620      	mov	r0, r4
 8005706:	f000 fe32 	bl	800636e <__any_on>
 800570a:	4682      	mov	sl, r0
 800570c:	2101      	movs	r1, #1
 800570e:	117b      	asrs	r3, r7, #5
 8005710:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005714:	f007 071f 	and.w	r7, r7, #31
 8005718:	fa01 f707 	lsl.w	r7, r1, r7
 800571c:	421f      	tst	r7, r3
 800571e:	f04f 0702 	mov.w	r7, #2
 8005722:	4629      	mov	r1, r5
 8005724:	4620      	mov	r0, r4
 8005726:	bf18      	it	ne
 8005728:	f04a 0a02 	orrne.w	sl, sl, #2
 800572c:	1b76      	subs	r6, r6, r5
 800572e:	f7ff fdf5 	bl	800531c <rshift>
 8005732:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005736:	f1ba 0f00 	cmp.w	sl, #0
 800573a:	d048      	beq.n	80057ce <__gethex+0x3e2>
 800573c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d015      	beq.n	8005770 <__gethex+0x384>
 8005744:	2b03      	cmp	r3, #3
 8005746:	d017      	beq.n	8005778 <__gethex+0x38c>
 8005748:	2b01      	cmp	r3, #1
 800574a:	d109      	bne.n	8005760 <__gethex+0x374>
 800574c:	f01a 0f02 	tst.w	sl, #2
 8005750:	d006      	beq.n	8005760 <__gethex+0x374>
 8005752:	f8d9 0000 	ldr.w	r0, [r9]
 8005756:	ea4a 0a00 	orr.w	sl, sl, r0
 800575a:	f01a 0f01 	tst.w	sl, #1
 800575e:	d10e      	bne.n	800577e <__gethex+0x392>
 8005760:	f047 0710 	orr.w	r7, r7, #16
 8005764:	e033      	b.n	80057ce <__gethex+0x3e2>
 8005766:	f04f 0a01 	mov.w	sl, #1
 800576a:	e7cf      	b.n	800570c <__gethex+0x320>
 800576c:	2701      	movs	r7, #1
 800576e:	e7e2      	b.n	8005736 <__gethex+0x34a>
 8005770:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005772:	f1c3 0301 	rsb	r3, r3, #1
 8005776:	9315      	str	r3, [sp, #84]	; 0x54
 8005778:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0f0      	beq.n	8005760 <__gethex+0x374>
 800577e:	f04f 0c00 	mov.w	ip, #0
 8005782:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005786:	f104 0314 	add.w	r3, r4, #20
 800578a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800578e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005792:	4618      	mov	r0, r3
 8005794:	f853 2b04 	ldr.w	r2, [r3], #4
 8005798:	f1b2 3fff 	cmp.w	r2, #4294967295
 800579c:	d01c      	beq.n	80057d8 <__gethex+0x3ec>
 800579e:	3201      	adds	r2, #1
 80057a0:	6002      	str	r2, [r0, #0]
 80057a2:	2f02      	cmp	r7, #2
 80057a4:	f104 0314 	add.w	r3, r4, #20
 80057a8:	d13d      	bne.n	8005826 <__gethex+0x43a>
 80057aa:	f8d8 2000 	ldr.w	r2, [r8]
 80057ae:	3a01      	subs	r2, #1
 80057b0:	42b2      	cmp	r2, r6
 80057b2:	d10a      	bne.n	80057ca <__gethex+0x3de>
 80057b4:	2201      	movs	r2, #1
 80057b6:	1171      	asrs	r1, r6, #5
 80057b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80057bc:	f006 061f 	and.w	r6, r6, #31
 80057c0:	fa02 f606 	lsl.w	r6, r2, r6
 80057c4:	421e      	tst	r6, r3
 80057c6:	bf18      	it	ne
 80057c8:	4617      	movne	r7, r2
 80057ca:	f047 0720 	orr.w	r7, r7, #32
 80057ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80057d0:	601c      	str	r4, [r3, #0]
 80057d2:	9b06      	ldr	r3, [sp, #24]
 80057d4:	601d      	str	r5, [r3, #0]
 80057d6:	e69b      	b.n	8005510 <__gethex+0x124>
 80057d8:	4299      	cmp	r1, r3
 80057da:	f843 cc04 	str.w	ip, [r3, #-4]
 80057de:	d8d8      	bhi.n	8005792 <__gethex+0x3a6>
 80057e0:	68a3      	ldr	r3, [r4, #8]
 80057e2:	459b      	cmp	fp, r3
 80057e4:	db17      	blt.n	8005816 <__gethex+0x42a>
 80057e6:	6861      	ldr	r1, [r4, #4]
 80057e8:	9802      	ldr	r0, [sp, #8]
 80057ea:	3101      	adds	r1, #1
 80057ec:	f000 f928 	bl	8005a40 <_Balloc>
 80057f0:	4681      	mov	r9, r0
 80057f2:	b918      	cbnz	r0, 80057fc <__gethex+0x410>
 80057f4:	4602      	mov	r2, r0
 80057f6:	2184      	movs	r1, #132	; 0x84
 80057f8:	4b19      	ldr	r3, [pc, #100]	; (8005860 <__gethex+0x474>)
 80057fa:	e6ac      	b.n	8005556 <__gethex+0x16a>
 80057fc:	6922      	ldr	r2, [r4, #16]
 80057fe:	f104 010c 	add.w	r1, r4, #12
 8005802:	3202      	adds	r2, #2
 8005804:	0092      	lsls	r2, r2, #2
 8005806:	300c      	adds	r0, #12
 8005808:	f7fd f98e 	bl	8002b28 <memcpy>
 800580c:	4621      	mov	r1, r4
 800580e:	9802      	ldr	r0, [sp, #8]
 8005810:	f000 f956 	bl	8005ac0 <_Bfree>
 8005814:	464c      	mov	r4, r9
 8005816:	6923      	ldr	r3, [r4, #16]
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	6122      	str	r2, [r4, #16]
 800581c:	2201      	movs	r2, #1
 800581e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005822:	615a      	str	r2, [r3, #20]
 8005824:	e7bd      	b.n	80057a2 <__gethex+0x3b6>
 8005826:	6922      	ldr	r2, [r4, #16]
 8005828:	455a      	cmp	r2, fp
 800582a:	dd0b      	ble.n	8005844 <__gethex+0x458>
 800582c:	2101      	movs	r1, #1
 800582e:	4620      	mov	r0, r4
 8005830:	f7ff fd74 	bl	800531c <rshift>
 8005834:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005838:	3501      	adds	r5, #1
 800583a:	42ab      	cmp	r3, r5
 800583c:	f6ff aed5 	blt.w	80055ea <__gethex+0x1fe>
 8005840:	2701      	movs	r7, #1
 8005842:	e7c2      	b.n	80057ca <__gethex+0x3de>
 8005844:	f016 061f 	ands.w	r6, r6, #31
 8005848:	d0fa      	beq.n	8005840 <__gethex+0x454>
 800584a:	449a      	add	sl, r3
 800584c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005850:	f000 f9ec 	bl	8005c2c <__hi0bits>
 8005854:	f1c6 0620 	rsb	r6, r6, #32
 8005858:	42b0      	cmp	r0, r6
 800585a:	dbe7      	blt.n	800582c <__gethex+0x440>
 800585c:	e7f0      	b.n	8005840 <__gethex+0x454>
 800585e:	bf00      	nop
 8005860:	08007604 	.word	0x08007604

08005864 <L_shift>:
 8005864:	f1c2 0208 	rsb	r2, r2, #8
 8005868:	0092      	lsls	r2, r2, #2
 800586a:	b570      	push	{r4, r5, r6, lr}
 800586c:	f1c2 0620 	rsb	r6, r2, #32
 8005870:	6843      	ldr	r3, [r0, #4]
 8005872:	6804      	ldr	r4, [r0, #0]
 8005874:	fa03 f506 	lsl.w	r5, r3, r6
 8005878:	432c      	orrs	r4, r5
 800587a:	40d3      	lsrs	r3, r2
 800587c:	6004      	str	r4, [r0, #0]
 800587e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005882:	4288      	cmp	r0, r1
 8005884:	d3f4      	bcc.n	8005870 <L_shift+0xc>
 8005886:	bd70      	pop	{r4, r5, r6, pc}

08005888 <__match>:
 8005888:	b530      	push	{r4, r5, lr}
 800588a:	6803      	ldr	r3, [r0, #0]
 800588c:	3301      	adds	r3, #1
 800588e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005892:	b914      	cbnz	r4, 800589a <__match+0x12>
 8005894:	6003      	str	r3, [r0, #0]
 8005896:	2001      	movs	r0, #1
 8005898:	bd30      	pop	{r4, r5, pc}
 800589a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800589e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80058a2:	2d19      	cmp	r5, #25
 80058a4:	bf98      	it	ls
 80058a6:	3220      	addls	r2, #32
 80058a8:	42a2      	cmp	r2, r4
 80058aa:	d0f0      	beq.n	800588e <__match+0x6>
 80058ac:	2000      	movs	r0, #0
 80058ae:	e7f3      	b.n	8005898 <__match+0x10>

080058b0 <__hexnan>:
 80058b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b4:	2500      	movs	r5, #0
 80058b6:	680b      	ldr	r3, [r1, #0]
 80058b8:	4682      	mov	sl, r0
 80058ba:	115e      	asrs	r6, r3, #5
 80058bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80058c0:	f013 031f 	ands.w	r3, r3, #31
 80058c4:	bf18      	it	ne
 80058c6:	3604      	addne	r6, #4
 80058c8:	1f37      	subs	r7, r6, #4
 80058ca:	4690      	mov	r8, r2
 80058cc:	46b9      	mov	r9, r7
 80058ce:	463c      	mov	r4, r7
 80058d0:	46ab      	mov	fp, r5
 80058d2:	b087      	sub	sp, #28
 80058d4:	6801      	ldr	r1, [r0, #0]
 80058d6:	9301      	str	r3, [sp, #4]
 80058d8:	f846 5c04 	str.w	r5, [r6, #-4]
 80058dc:	9502      	str	r5, [sp, #8]
 80058de:	784a      	ldrb	r2, [r1, #1]
 80058e0:	1c4b      	adds	r3, r1, #1
 80058e2:	9303      	str	r3, [sp, #12]
 80058e4:	b342      	cbz	r2, 8005938 <__hexnan+0x88>
 80058e6:	4610      	mov	r0, r2
 80058e8:	9105      	str	r1, [sp, #20]
 80058ea:	9204      	str	r2, [sp, #16]
 80058ec:	f7ff fd69 	bl	80053c2 <__hexdig_fun>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d14f      	bne.n	8005994 <__hexnan+0xe4>
 80058f4:	9a04      	ldr	r2, [sp, #16]
 80058f6:	9905      	ldr	r1, [sp, #20]
 80058f8:	2a20      	cmp	r2, #32
 80058fa:	d818      	bhi.n	800592e <__hexnan+0x7e>
 80058fc:	9b02      	ldr	r3, [sp, #8]
 80058fe:	459b      	cmp	fp, r3
 8005900:	dd13      	ble.n	800592a <__hexnan+0x7a>
 8005902:	454c      	cmp	r4, r9
 8005904:	d206      	bcs.n	8005914 <__hexnan+0x64>
 8005906:	2d07      	cmp	r5, #7
 8005908:	dc04      	bgt.n	8005914 <__hexnan+0x64>
 800590a:	462a      	mov	r2, r5
 800590c:	4649      	mov	r1, r9
 800590e:	4620      	mov	r0, r4
 8005910:	f7ff ffa8 	bl	8005864 <L_shift>
 8005914:	4544      	cmp	r4, r8
 8005916:	d950      	bls.n	80059ba <__hexnan+0x10a>
 8005918:	2300      	movs	r3, #0
 800591a:	f1a4 0904 	sub.w	r9, r4, #4
 800591e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005922:	461d      	mov	r5, r3
 8005924:	464c      	mov	r4, r9
 8005926:	f8cd b008 	str.w	fp, [sp, #8]
 800592a:	9903      	ldr	r1, [sp, #12]
 800592c:	e7d7      	b.n	80058de <__hexnan+0x2e>
 800592e:	2a29      	cmp	r2, #41	; 0x29
 8005930:	d156      	bne.n	80059e0 <__hexnan+0x130>
 8005932:	3102      	adds	r1, #2
 8005934:	f8ca 1000 	str.w	r1, [sl]
 8005938:	f1bb 0f00 	cmp.w	fp, #0
 800593c:	d050      	beq.n	80059e0 <__hexnan+0x130>
 800593e:	454c      	cmp	r4, r9
 8005940:	d206      	bcs.n	8005950 <__hexnan+0xa0>
 8005942:	2d07      	cmp	r5, #7
 8005944:	dc04      	bgt.n	8005950 <__hexnan+0xa0>
 8005946:	462a      	mov	r2, r5
 8005948:	4649      	mov	r1, r9
 800594a:	4620      	mov	r0, r4
 800594c:	f7ff ff8a 	bl	8005864 <L_shift>
 8005950:	4544      	cmp	r4, r8
 8005952:	d934      	bls.n	80059be <__hexnan+0x10e>
 8005954:	4623      	mov	r3, r4
 8005956:	f1a8 0204 	sub.w	r2, r8, #4
 800595a:	f853 1b04 	ldr.w	r1, [r3], #4
 800595e:	429f      	cmp	r7, r3
 8005960:	f842 1f04 	str.w	r1, [r2, #4]!
 8005964:	d2f9      	bcs.n	800595a <__hexnan+0xaa>
 8005966:	1b3b      	subs	r3, r7, r4
 8005968:	f023 0303 	bic.w	r3, r3, #3
 800596c:	3304      	adds	r3, #4
 800596e:	3401      	adds	r4, #1
 8005970:	3e03      	subs	r6, #3
 8005972:	42b4      	cmp	r4, r6
 8005974:	bf88      	it	hi
 8005976:	2304      	movhi	r3, #4
 8005978:	2200      	movs	r2, #0
 800597a:	4443      	add	r3, r8
 800597c:	f843 2b04 	str.w	r2, [r3], #4
 8005980:	429f      	cmp	r7, r3
 8005982:	d2fb      	bcs.n	800597c <__hexnan+0xcc>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	b91b      	cbnz	r3, 8005990 <__hexnan+0xe0>
 8005988:	4547      	cmp	r7, r8
 800598a:	d127      	bne.n	80059dc <__hexnan+0x12c>
 800598c:	2301      	movs	r3, #1
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	2005      	movs	r0, #5
 8005992:	e026      	b.n	80059e2 <__hexnan+0x132>
 8005994:	3501      	adds	r5, #1
 8005996:	2d08      	cmp	r5, #8
 8005998:	f10b 0b01 	add.w	fp, fp, #1
 800599c:	dd06      	ble.n	80059ac <__hexnan+0xfc>
 800599e:	4544      	cmp	r4, r8
 80059a0:	d9c3      	bls.n	800592a <__hexnan+0x7a>
 80059a2:	2300      	movs	r3, #0
 80059a4:	2501      	movs	r5, #1
 80059a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80059aa:	3c04      	subs	r4, #4
 80059ac:	6822      	ldr	r2, [r4, #0]
 80059ae:	f000 000f 	and.w	r0, r0, #15
 80059b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80059b6:	6022      	str	r2, [r4, #0]
 80059b8:	e7b7      	b.n	800592a <__hexnan+0x7a>
 80059ba:	2508      	movs	r5, #8
 80059bc:	e7b5      	b.n	800592a <__hexnan+0x7a>
 80059be:	9b01      	ldr	r3, [sp, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0df      	beq.n	8005984 <__hexnan+0xd4>
 80059c4:	f04f 32ff 	mov.w	r2, #4294967295
 80059c8:	f1c3 0320 	rsb	r3, r3, #32
 80059cc:	fa22 f303 	lsr.w	r3, r2, r3
 80059d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80059d4:	401a      	ands	r2, r3
 80059d6:	f846 2c04 	str.w	r2, [r6, #-4]
 80059da:	e7d3      	b.n	8005984 <__hexnan+0xd4>
 80059dc:	3f04      	subs	r7, #4
 80059de:	e7d1      	b.n	8005984 <__hexnan+0xd4>
 80059e0:	2004      	movs	r0, #4
 80059e2:	b007      	add	sp, #28
 80059e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059e8 <_localeconv_r>:
 80059e8:	4800      	ldr	r0, [pc, #0]	; (80059ec <_localeconv_r+0x4>)
 80059ea:	4770      	bx	lr
 80059ec:	20000164 	.word	0x20000164

080059f0 <malloc>:
 80059f0:	4b02      	ldr	r3, [pc, #8]	; (80059fc <malloc+0xc>)
 80059f2:	4601      	mov	r1, r0
 80059f4:	6818      	ldr	r0, [r3, #0]
 80059f6:	f000 bd35 	b.w	8006464 <_malloc_r>
 80059fa:	bf00      	nop
 80059fc:	2000000c 	.word	0x2000000c

08005a00 <__ascii_mbtowc>:
 8005a00:	b082      	sub	sp, #8
 8005a02:	b901      	cbnz	r1, 8005a06 <__ascii_mbtowc+0x6>
 8005a04:	a901      	add	r1, sp, #4
 8005a06:	b142      	cbz	r2, 8005a1a <__ascii_mbtowc+0x1a>
 8005a08:	b14b      	cbz	r3, 8005a1e <__ascii_mbtowc+0x1e>
 8005a0a:	7813      	ldrb	r3, [r2, #0]
 8005a0c:	600b      	str	r3, [r1, #0]
 8005a0e:	7812      	ldrb	r2, [r2, #0]
 8005a10:	1e10      	subs	r0, r2, #0
 8005a12:	bf18      	it	ne
 8005a14:	2001      	movne	r0, #1
 8005a16:	b002      	add	sp, #8
 8005a18:	4770      	bx	lr
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	e7fb      	b.n	8005a16 <__ascii_mbtowc+0x16>
 8005a1e:	f06f 0001 	mvn.w	r0, #1
 8005a22:	e7f8      	b.n	8005a16 <__ascii_mbtowc+0x16>

08005a24 <memchr>:
 8005a24:	4603      	mov	r3, r0
 8005a26:	b510      	push	{r4, lr}
 8005a28:	b2c9      	uxtb	r1, r1
 8005a2a:	4402      	add	r2, r0
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	d101      	bne.n	8005a36 <memchr+0x12>
 8005a32:	2000      	movs	r0, #0
 8005a34:	e003      	b.n	8005a3e <memchr+0x1a>
 8005a36:	7804      	ldrb	r4, [r0, #0]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	428c      	cmp	r4, r1
 8005a3c:	d1f6      	bne.n	8005a2c <memchr+0x8>
 8005a3e:	bd10      	pop	{r4, pc}

08005a40 <_Balloc>:
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a44:	4604      	mov	r4, r0
 8005a46:	460d      	mov	r5, r1
 8005a48:	b976      	cbnz	r6, 8005a68 <_Balloc+0x28>
 8005a4a:	2010      	movs	r0, #16
 8005a4c:	f7ff ffd0 	bl	80059f0 <malloc>
 8005a50:	4602      	mov	r2, r0
 8005a52:	6260      	str	r0, [r4, #36]	; 0x24
 8005a54:	b920      	cbnz	r0, 8005a60 <_Balloc+0x20>
 8005a56:	2166      	movs	r1, #102	; 0x66
 8005a58:	4b17      	ldr	r3, [pc, #92]	; (8005ab8 <_Balloc+0x78>)
 8005a5a:	4818      	ldr	r0, [pc, #96]	; (8005abc <_Balloc+0x7c>)
 8005a5c:	f000 feee 	bl	800683c <__assert_func>
 8005a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a64:	6006      	str	r6, [r0, #0]
 8005a66:	60c6      	str	r6, [r0, #12]
 8005a68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a6a:	68f3      	ldr	r3, [r6, #12]
 8005a6c:	b183      	cbz	r3, 8005a90 <_Balloc+0x50>
 8005a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a76:	b9b8      	cbnz	r0, 8005aa8 <_Balloc+0x68>
 8005a78:	2101      	movs	r1, #1
 8005a7a:	fa01 f605 	lsl.w	r6, r1, r5
 8005a7e:	1d72      	adds	r2, r6, #5
 8005a80:	4620      	mov	r0, r4
 8005a82:	0092      	lsls	r2, r2, #2
 8005a84:	f000 fc94 	bl	80063b0 <_calloc_r>
 8005a88:	b160      	cbz	r0, 8005aa4 <_Balloc+0x64>
 8005a8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a8e:	e00e      	b.n	8005aae <_Balloc+0x6e>
 8005a90:	2221      	movs	r2, #33	; 0x21
 8005a92:	2104      	movs	r1, #4
 8005a94:	4620      	mov	r0, r4
 8005a96:	f000 fc8b 	bl	80063b0 <_calloc_r>
 8005a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a9c:	60f0      	str	r0, [r6, #12]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e4      	bne.n	8005a6e <_Balloc+0x2e>
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	bd70      	pop	{r4, r5, r6, pc}
 8005aa8:	6802      	ldr	r2, [r0, #0]
 8005aaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ab4:	e7f7      	b.n	8005aa6 <_Balloc+0x66>
 8005ab6:	bf00      	nop
 8005ab8:	0800758e 	.word	0x0800758e
 8005abc:	08007694 	.word	0x08007694

08005ac0 <_Bfree>:
 8005ac0:	b570      	push	{r4, r5, r6, lr}
 8005ac2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ac4:	4605      	mov	r5, r0
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	b976      	cbnz	r6, 8005ae8 <_Bfree+0x28>
 8005aca:	2010      	movs	r0, #16
 8005acc:	f7ff ff90 	bl	80059f0 <malloc>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	6268      	str	r0, [r5, #36]	; 0x24
 8005ad4:	b920      	cbnz	r0, 8005ae0 <_Bfree+0x20>
 8005ad6:	218a      	movs	r1, #138	; 0x8a
 8005ad8:	4b08      	ldr	r3, [pc, #32]	; (8005afc <_Bfree+0x3c>)
 8005ada:	4809      	ldr	r0, [pc, #36]	; (8005b00 <_Bfree+0x40>)
 8005adc:	f000 feae 	bl	800683c <__assert_func>
 8005ae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ae4:	6006      	str	r6, [r0, #0]
 8005ae6:	60c6      	str	r6, [r0, #12]
 8005ae8:	b13c      	cbz	r4, 8005afa <_Bfree+0x3a>
 8005aea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005aec:	6862      	ldr	r2, [r4, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005af4:	6021      	str	r1, [r4, #0]
 8005af6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005afa:	bd70      	pop	{r4, r5, r6, pc}
 8005afc:	0800758e 	.word	0x0800758e
 8005b00:	08007694 	.word	0x08007694

08005b04 <__multadd>:
 8005b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b08:	4698      	mov	r8, r3
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	690e      	ldr	r6, [r1, #16]
 8005b10:	4607      	mov	r7, r0
 8005b12:	f101 0014 	add.w	r0, r1, #20
 8005b16:	6805      	ldr	r5, [r0, #0]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	b2a9      	uxth	r1, r5
 8005b1c:	fb02 8101 	mla	r1, r2, r1, r8
 8005b20:	0c2d      	lsrs	r5, r5, #16
 8005b22:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005b26:	fb02 c505 	mla	r5, r2, r5, ip
 8005b2a:	b289      	uxth	r1, r1
 8005b2c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005b30:	429e      	cmp	r6, r3
 8005b32:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005b36:	f840 1b04 	str.w	r1, [r0], #4
 8005b3a:	dcec      	bgt.n	8005b16 <__multadd+0x12>
 8005b3c:	f1b8 0f00 	cmp.w	r8, #0
 8005b40:	d022      	beq.n	8005b88 <__multadd+0x84>
 8005b42:	68a3      	ldr	r3, [r4, #8]
 8005b44:	42b3      	cmp	r3, r6
 8005b46:	dc19      	bgt.n	8005b7c <__multadd+0x78>
 8005b48:	6861      	ldr	r1, [r4, #4]
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	3101      	adds	r1, #1
 8005b4e:	f7ff ff77 	bl	8005a40 <_Balloc>
 8005b52:	4605      	mov	r5, r0
 8005b54:	b928      	cbnz	r0, 8005b62 <__multadd+0x5e>
 8005b56:	4602      	mov	r2, r0
 8005b58:	21b5      	movs	r1, #181	; 0xb5
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	; (8005b90 <__multadd+0x8c>)
 8005b5c:	480d      	ldr	r0, [pc, #52]	; (8005b94 <__multadd+0x90>)
 8005b5e:	f000 fe6d 	bl	800683c <__assert_func>
 8005b62:	6922      	ldr	r2, [r4, #16]
 8005b64:	f104 010c 	add.w	r1, r4, #12
 8005b68:	3202      	adds	r2, #2
 8005b6a:	0092      	lsls	r2, r2, #2
 8005b6c:	300c      	adds	r0, #12
 8005b6e:	f7fc ffdb 	bl	8002b28 <memcpy>
 8005b72:	4621      	mov	r1, r4
 8005b74:	4638      	mov	r0, r7
 8005b76:	f7ff ffa3 	bl	8005ac0 <_Bfree>
 8005b7a:	462c      	mov	r4, r5
 8005b7c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005b80:	3601      	adds	r6, #1
 8005b82:	f8c3 8014 	str.w	r8, [r3, #20]
 8005b86:	6126      	str	r6, [r4, #16]
 8005b88:	4620      	mov	r0, r4
 8005b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b8e:	bf00      	nop
 8005b90:	08007604 	.word	0x08007604
 8005b94:	08007694 	.word	0x08007694

08005b98 <__s2b>:
 8005b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b9c:	4615      	mov	r5, r2
 8005b9e:	2209      	movs	r2, #9
 8005ba0:	461f      	mov	r7, r3
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005baa:	4606      	mov	r6, r0
 8005bac:	2201      	movs	r2, #1
 8005bae:	2100      	movs	r1, #0
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	db09      	blt.n	8005bc8 <__s2b+0x30>
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f7ff ff43 	bl	8005a40 <_Balloc>
 8005bba:	b940      	cbnz	r0, 8005bce <__s2b+0x36>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	21ce      	movs	r1, #206	; 0xce
 8005bc0:	4b18      	ldr	r3, [pc, #96]	; (8005c24 <__s2b+0x8c>)
 8005bc2:	4819      	ldr	r0, [pc, #100]	; (8005c28 <__s2b+0x90>)
 8005bc4:	f000 fe3a 	bl	800683c <__assert_func>
 8005bc8:	0052      	lsls	r2, r2, #1
 8005bca:	3101      	adds	r1, #1
 8005bcc:	e7f0      	b.n	8005bb0 <__s2b+0x18>
 8005bce:	9b08      	ldr	r3, [sp, #32]
 8005bd0:	2d09      	cmp	r5, #9
 8005bd2:	6143      	str	r3, [r0, #20]
 8005bd4:	f04f 0301 	mov.w	r3, #1
 8005bd8:	6103      	str	r3, [r0, #16]
 8005bda:	dd16      	ble.n	8005c0a <__s2b+0x72>
 8005bdc:	f104 0909 	add.w	r9, r4, #9
 8005be0:	46c8      	mov	r8, r9
 8005be2:	442c      	add	r4, r5
 8005be4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005be8:	4601      	mov	r1, r0
 8005bea:	220a      	movs	r2, #10
 8005bec:	4630      	mov	r0, r6
 8005bee:	3b30      	subs	r3, #48	; 0x30
 8005bf0:	f7ff ff88 	bl	8005b04 <__multadd>
 8005bf4:	45a0      	cmp	r8, r4
 8005bf6:	d1f5      	bne.n	8005be4 <__s2b+0x4c>
 8005bf8:	f1a5 0408 	sub.w	r4, r5, #8
 8005bfc:	444c      	add	r4, r9
 8005bfe:	1b2d      	subs	r5, r5, r4
 8005c00:	1963      	adds	r3, r4, r5
 8005c02:	42bb      	cmp	r3, r7
 8005c04:	db04      	blt.n	8005c10 <__s2b+0x78>
 8005c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c0a:	2509      	movs	r5, #9
 8005c0c:	340a      	adds	r4, #10
 8005c0e:	e7f6      	b.n	8005bfe <__s2b+0x66>
 8005c10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005c14:	4601      	mov	r1, r0
 8005c16:	220a      	movs	r2, #10
 8005c18:	4630      	mov	r0, r6
 8005c1a:	3b30      	subs	r3, #48	; 0x30
 8005c1c:	f7ff ff72 	bl	8005b04 <__multadd>
 8005c20:	e7ee      	b.n	8005c00 <__s2b+0x68>
 8005c22:	bf00      	nop
 8005c24:	08007604 	.word	0x08007604
 8005c28:	08007694 	.word	0x08007694

08005c2c <__hi0bits>:
 8005c2c:	0c02      	lsrs	r2, r0, #16
 8005c2e:	0412      	lsls	r2, r2, #16
 8005c30:	4603      	mov	r3, r0
 8005c32:	b9ca      	cbnz	r2, 8005c68 <__hi0bits+0x3c>
 8005c34:	0403      	lsls	r3, r0, #16
 8005c36:	2010      	movs	r0, #16
 8005c38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005c3c:	bf04      	itt	eq
 8005c3e:	021b      	lsleq	r3, r3, #8
 8005c40:	3008      	addeq	r0, #8
 8005c42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005c46:	bf04      	itt	eq
 8005c48:	011b      	lsleq	r3, r3, #4
 8005c4a:	3004      	addeq	r0, #4
 8005c4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005c50:	bf04      	itt	eq
 8005c52:	009b      	lsleq	r3, r3, #2
 8005c54:	3002      	addeq	r0, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	db05      	blt.n	8005c66 <__hi0bits+0x3a>
 8005c5a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005c5e:	f100 0001 	add.w	r0, r0, #1
 8005c62:	bf08      	it	eq
 8005c64:	2020      	moveq	r0, #32
 8005c66:	4770      	bx	lr
 8005c68:	2000      	movs	r0, #0
 8005c6a:	e7e5      	b.n	8005c38 <__hi0bits+0xc>

08005c6c <__lo0bits>:
 8005c6c:	6803      	ldr	r3, [r0, #0]
 8005c6e:	4602      	mov	r2, r0
 8005c70:	f013 0007 	ands.w	r0, r3, #7
 8005c74:	d00b      	beq.n	8005c8e <__lo0bits+0x22>
 8005c76:	07d9      	lsls	r1, r3, #31
 8005c78:	d422      	bmi.n	8005cc0 <__lo0bits+0x54>
 8005c7a:	0798      	lsls	r0, r3, #30
 8005c7c:	bf49      	itett	mi
 8005c7e:	085b      	lsrmi	r3, r3, #1
 8005c80:	089b      	lsrpl	r3, r3, #2
 8005c82:	2001      	movmi	r0, #1
 8005c84:	6013      	strmi	r3, [r2, #0]
 8005c86:	bf5c      	itt	pl
 8005c88:	2002      	movpl	r0, #2
 8005c8a:	6013      	strpl	r3, [r2, #0]
 8005c8c:	4770      	bx	lr
 8005c8e:	b299      	uxth	r1, r3
 8005c90:	b909      	cbnz	r1, 8005c96 <__lo0bits+0x2a>
 8005c92:	2010      	movs	r0, #16
 8005c94:	0c1b      	lsrs	r3, r3, #16
 8005c96:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005c9a:	bf04      	itt	eq
 8005c9c:	0a1b      	lsreq	r3, r3, #8
 8005c9e:	3008      	addeq	r0, #8
 8005ca0:	0719      	lsls	r1, r3, #28
 8005ca2:	bf04      	itt	eq
 8005ca4:	091b      	lsreq	r3, r3, #4
 8005ca6:	3004      	addeq	r0, #4
 8005ca8:	0799      	lsls	r1, r3, #30
 8005caa:	bf04      	itt	eq
 8005cac:	089b      	lsreq	r3, r3, #2
 8005cae:	3002      	addeq	r0, #2
 8005cb0:	07d9      	lsls	r1, r3, #31
 8005cb2:	d403      	bmi.n	8005cbc <__lo0bits+0x50>
 8005cb4:	085b      	lsrs	r3, r3, #1
 8005cb6:	f100 0001 	add.w	r0, r0, #1
 8005cba:	d003      	beq.n	8005cc4 <__lo0bits+0x58>
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	4770      	bx	lr
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	4770      	bx	lr
 8005cc4:	2020      	movs	r0, #32
 8005cc6:	4770      	bx	lr

08005cc8 <__i2b>:
 8005cc8:	b510      	push	{r4, lr}
 8005cca:	460c      	mov	r4, r1
 8005ccc:	2101      	movs	r1, #1
 8005cce:	f7ff feb7 	bl	8005a40 <_Balloc>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	b928      	cbnz	r0, 8005ce2 <__i2b+0x1a>
 8005cd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005cda:	4b04      	ldr	r3, [pc, #16]	; (8005cec <__i2b+0x24>)
 8005cdc:	4804      	ldr	r0, [pc, #16]	; (8005cf0 <__i2b+0x28>)
 8005cde:	f000 fdad 	bl	800683c <__assert_func>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	6144      	str	r4, [r0, #20]
 8005ce6:	6103      	str	r3, [r0, #16]
 8005ce8:	bd10      	pop	{r4, pc}
 8005cea:	bf00      	nop
 8005cec:	08007604 	.word	0x08007604
 8005cf0:	08007694 	.word	0x08007694

08005cf4 <__multiply>:
 8005cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf8:	4614      	mov	r4, r2
 8005cfa:	690a      	ldr	r2, [r1, #16]
 8005cfc:	6923      	ldr	r3, [r4, #16]
 8005cfe:	460d      	mov	r5, r1
 8005d00:	429a      	cmp	r2, r3
 8005d02:	bfbe      	ittt	lt
 8005d04:	460b      	movlt	r3, r1
 8005d06:	4625      	movlt	r5, r4
 8005d08:	461c      	movlt	r4, r3
 8005d0a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005d0e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005d12:	68ab      	ldr	r3, [r5, #8]
 8005d14:	6869      	ldr	r1, [r5, #4]
 8005d16:	eb0a 0709 	add.w	r7, sl, r9
 8005d1a:	42bb      	cmp	r3, r7
 8005d1c:	b085      	sub	sp, #20
 8005d1e:	bfb8      	it	lt
 8005d20:	3101      	addlt	r1, #1
 8005d22:	f7ff fe8d 	bl	8005a40 <_Balloc>
 8005d26:	b930      	cbnz	r0, 8005d36 <__multiply+0x42>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	f240 115d 	movw	r1, #349	; 0x15d
 8005d2e:	4b41      	ldr	r3, [pc, #260]	; (8005e34 <__multiply+0x140>)
 8005d30:	4841      	ldr	r0, [pc, #260]	; (8005e38 <__multiply+0x144>)
 8005d32:	f000 fd83 	bl	800683c <__assert_func>
 8005d36:	f100 0614 	add.w	r6, r0, #20
 8005d3a:	4633      	mov	r3, r6
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005d42:	4543      	cmp	r3, r8
 8005d44:	d31e      	bcc.n	8005d84 <__multiply+0x90>
 8005d46:	f105 0c14 	add.w	ip, r5, #20
 8005d4a:	f104 0314 	add.w	r3, r4, #20
 8005d4e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005d52:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005d56:	9202      	str	r2, [sp, #8]
 8005d58:	ebac 0205 	sub.w	r2, ip, r5
 8005d5c:	3a15      	subs	r2, #21
 8005d5e:	f022 0203 	bic.w	r2, r2, #3
 8005d62:	3204      	adds	r2, #4
 8005d64:	f105 0115 	add.w	r1, r5, #21
 8005d68:	458c      	cmp	ip, r1
 8005d6a:	bf38      	it	cc
 8005d6c:	2204      	movcc	r2, #4
 8005d6e:	9201      	str	r2, [sp, #4]
 8005d70:	9a02      	ldr	r2, [sp, #8]
 8005d72:	9303      	str	r3, [sp, #12]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d808      	bhi.n	8005d8a <__multiply+0x96>
 8005d78:	2f00      	cmp	r7, #0
 8005d7a:	dc55      	bgt.n	8005e28 <__multiply+0x134>
 8005d7c:	6107      	str	r7, [r0, #16]
 8005d7e:	b005      	add	sp, #20
 8005d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d84:	f843 2b04 	str.w	r2, [r3], #4
 8005d88:	e7db      	b.n	8005d42 <__multiply+0x4e>
 8005d8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d8e:	f1ba 0f00 	cmp.w	sl, #0
 8005d92:	d020      	beq.n	8005dd6 <__multiply+0xe2>
 8005d94:	46b1      	mov	r9, r6
 8005d96:	2200      	movs	r2, #0
 8005d98:	f105 0e14 	add.w	lr, r5, #20
 8005d9c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005da0:	f8d9 b000 	ldr.w	fp, [r9]
 8005da4:	b2a1      	uxth	r1, r4
 8005da6:	fa1f fb8b 	uxth.w	fp, fp
 8005daa:	fb0a b101 	mla	r1, sl, r1, fp
 8005dae:	4411      	add	r1, r2
 8005db0:	f8d9 2000 	ldr.w	r2, [r9]
 8005db4:	0c24      	lsrs	r4, r4, #16
 8005db6:	0c12      	lsrs	r2, r2, #16
 8005db8:	fb0a 2404 	mla	r4, sl, r4, r2
 8005dbc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005dc0:	b289      	uxth	r1, r1
 8005dc2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005dc6:	45f4      	cmp	ip, lr
 8005dc8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005dcc:	f849 1b04 	str.w	r1, [r9], #4
 8005dd0:	d8e4      	bhi.n	8005d9c <__multiply+0xa8>
 8005dd2:	9901      	ldr	r1, [sp, #4]
 8005dd4:	5072      	str	r2, [r6, r1]
 8005dd6:	9a03      	ldr	r2, [sp, #12]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005dde:	f1b9 0f00 	cmp.w	r9, #0
 8005de2:	d01f      	beq.n	8005e24 <__multiply+0x130>
 8005de4:	46b6      	mov	lr, r6
 8005de6:	f04f 0a00 	mov.w	sl, #0
 8005dea:	6834      	ldr	r4, [r6, #0]
 8005dec:	f105 0114 	add.w	r1, r5, #20
 8005df0:	880a      	ldrh	r2, [r1, #0]
 8005df2:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005df6:	b2a4      	uxth	r4, r4
 8005df8:	fb09 b202 	mla	r2, r9, r2, fp
 8005dfc:	4492      	add	sl, r2
 8005dfe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005e02:	f84e 4b04 	str.w	r4, [lr], #4
 8005e06:	f851 4b04 	ldr.w	r4, [r1], #4
 8005e0a:	f8be 2000 	ldrh.w	r2, [lr]
 8005e0e:	0c24      	lsrs	r4, r4, #16
 8005e10:	fb09 2404 	mla	r4, r9, r4, r2
 8005e14:	458c      	cmp	ip, r1
 8005e16:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005e1a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005e1e:	d8e7      	bhi.n	8005df0 <__multiply+0xfc>
 8005e20:	9a01      	ldr	r2, [sp, #4]
 8005e22:	50b4      	str	r4, [r6, r2]
 8005e24:	3604      	adds	r6, #4
 8005e26:	e7a3      	b.n	8005d70 <__multiply+0x7c>
 8005e28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1a5      	bne.n	8005d7c <__multiply+0x88>
 8005e30:	3f01      	subs	r7, #1
 8005e32:	e7a1      	b.n	8005d78 <__multiply+0x84>
 8005e34:	08007604 	.word	0x08007604
 8005e38:	08007694 	.word	0x08007694

08005e3c <__pow5mult>:
 8005e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e40:	4615      	mov	r5, r2
 8005e42:	f012 0203 	ands.w	r2, r2, #3
 8005e46:	4606      	mov	r6, r0
 8005e48:	460f      	mov	r7, r1
 8005e4a:	d007      	beq.n	8005e5c <__pow5mult+0x20>
 8005e4c:	4c25      	ldr	r4, [pc, #148]	; (8005ee4 <__pow5mult+0xa8>)
 8005e4e:	3a01      	subs	r2, #1
 8005e50:	2300      	movs	r3, #0
 8005e52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e56:	f7ff fe55 	bl	8005b04 <__multadd>
 8005e5a:	4607      	mov	r7, r0
 8005e5c:	10ad      	asrs	r5, r5, #2
 8005e5e:	d03d      	beq.n	8005edc <__pow5mult+0xa0>
 8005e60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e62:	b97c      	cbnz	r4, 8005e84 <__pow5mult+0x48>
 8005e64:	2010      	movs	r0, #16
 8005e66:	f7ff fdc3 	bl	80059f0 <malloc>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	6270      	str	r0, [r6, #36]	; 0x24
 8005e6e:	b928      	cbnz	r0, 8005e7c <__pow5mult+0x40>
 8005e70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005e74:	4b1c      	ldr	r3, [pc, #112]	; (8005ee8 <__pow5mult+0xac>)
 8005e76:	481d      	ldr	r0, [pc, #116]	; (8005eec <__pow5mult+0xb0>)
 8005e78:	f000 fce0 	bl	800683c <__assert_func>
 8005e7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e80:	6004      	str	r4, [r0, #0]
 8005e82:	60c4      	str	r4, [r0, #12]
 8005e84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e8c:	b94c      	cbnz	r4, 8005ea2 <__pow5mult+0x66>
 8005e8e:	f240 2171 	movw	r1, #625	; 0x271
 8005e92:	4630      	mov	r0, r6
 8005e94:	f7ff ff18 	bl	8005cc8 <__i2b>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ea0:	6003      	str	r3, [r0, #0]
 8005ea2:	f04f 0900 	mov.w	r9, #0
 8005ea6:	07eb      	lsls	r3, r5, #31
 8005ea8:	d50a      	bpl.n	8005ec0 <__pow5mult+0x84>
 8005eaa:	4639      	mov	r1, r7
 8005eac:	4622      	mov	r2, r4
 8005eae:	4630      	mov	r0, r6
 8005eb0:	f7ff ff20 	bl	8005cf4 <__multiply>
 8005eb4:	4680      	mov	r8, r0
 8005eb6:	4639      	mov	r1, r7
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f7ff fe01 	bl	8005ac0 <_Bfree>
 8005ebe:	4647      	mov	r7, r8
 8005ec0:	106d      	asrs	r5, r5, #1
 8005ec2:	d00b      	beq.n	8005edc <__pow5mult+0xa0>
 8005ec4:	6820      	ldr	r0, [r4, #0]
 8005ec6:	b938      	cbnz	r0, 8005ed8 <__pow5mult+0x9c>
 8005ec8:	4622      	mov	r2, r4
 8005eca:	4621      	mov	r1, r4
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f7ff ff11 	bl	8005cf4 <__multiply>
 8005ed2:	6020      	str	r0, [r4, #0]
 8005ed4:	f8c0 9000 	str.w	r9, [r0]
 8005ed8:	4604      	mov	r4, r0
 8005eda:	e7e4      	b.n	8005ea6 <__pow5mult+0x6a>
 8005edc:	4638      	mov	r0, r7
 8005ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ee2:	bf00      	nop
 8005ee4:	080077e8 	.word	0x080077e8
 8005ee8:	0800758e 	.word	0x0800758e
 8005eec:	08007694 	.word	0x08007694

08005ef0 <__lshift>:
 8005ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	4607      	mov	r7, r0
 8005ef8:	4691      	mov	r9, r2
 8005efa:	6923      	ldr	r3, [r4, #16]
 8005efc:	6849      	ldr	r1, [r1, #4]
 8005efe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f02:	68a3      	ldr	r3, [r4, #8]
 8005f04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f08:	f108 0601 	add.w	r6, r8, #1
 8005f0c:	42b3      	cmp	r3, r6
 8005f0e:	db0b      	blt.n	8005f28 <__lshift+0x38>
 8005f10:	4638      	mov	r0, r7
 8005f12:	f7ff fd95 	bl	8005a40 <_Balloc>
 8005f16:	4605      	mov	r5, r0
 8005f18:	b948      	cbnz	r0, 8005f2e <__lshift+0x3e>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005f20:	4b27      	ldr	r3, [pc, #156]	; (8005fc0 <__lshift+0xd0>)
 8005f22:	4828      	ldr	r0, [pc, #160]	; (8005fc4 <__lshift+0xd4>)
 8005f24:	f000 fc8a 	bl	800683c <__assert_func>
 8005f28:	3101      	adds	r1, #1
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	e7ee      	b.n	8005f0c <__lshift+0x1c>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f100 0114 	add.w	r1, r0, #20
 8005f34:	f100 0210 	add.w	r2, r0, #16
 8005f38:	4618      	mov	r0, r3
 8005f3a:	4553      	cmp	r3, sl
 8005f3c:	db33      	blt.n	8005fa6 <__lshift+0xb6>
 8005f3e:	6920      	ldr	r0, [r4, #16]
 8005f40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f44:	f104 0314 	add.w	r3, r4, #20
 8005f48:	f019 091f 	ands.w	r9, r9, #31
 8005f4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f54:	d02b      	beq.n	8005fae <__lshift+0xbe>
 8005f56:	468a      	mov	sl, r1
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f1c9 0e20 	rsb	lr, r9, #32
 8005f5e:	6818      	ldr	r0, [r3, #0]
 8005f60:	fa00 f009 	lsl.w	r0, r0, r9
 8005f64:	4302      	orrs	r2, r0
 8005f66:	f84a 2b04 	str.w	r2, [sl], #4
 8005f6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f6e:	459c      	cmp	ip, r3
 8005f70:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f74:	d8f3      	bhi.n	8005f5e <__lshift+0x6e>
 8005f76:	ebac 0304 	sub.w	r3, ip, r4
 8005f7a:	3b15      	subs	r3, #21
 8005f7c:	f023 0303 	bic.w	r3, r3, #3
 8005f80:	3304      	adds	r3, #4
 8005f82:	f104 0015 	add.w	r0, r4, #21
 8005f86:	4584      	cmp	ip, r0
 8005f88:	bf38      	it	cc
 8005f8a:	2304      	movcc	r3, #4
 8005f8c:	50ca      	str	r2, [r1, r3]
 8005f8e:	b10a      	cbz	r2, 8005f94 <__lshift+0xa4>
 8005f90:	f108 0602 	add.w	r6, r8, #2
 8005f94:	3e01      	subs	r6, #1
 8005f96:	4638      	mov	r0, r7
 8005f98:	4621      	mov	r1, r4
 8005f9a:	612e      	str	r6, [r5, #16]
 8005f9c:	f7ff fd90 	bl	8005ac0 <_Bfree>
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005faa:	3301      	adds	r3, #1
 8005fac:	e7c5      	b.n	8005f3a <__lshift+0x4a>
 8005fae:	3904      	subs	r1, #4
 8005fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fb4:	459c      	cmp	ip, r3
 8005fb6:	f841 2f04 	str.w	r2, [r1, #4]!
 8005fba:	d8f9      	bhi.n	8005fb0 <__lshift+0xc0>
 8005fbc:	e7ea      	b.n	8005f94 <__lshift+0xa4>
 8005fbe:	bf00      	nop
 8005fc0:	08007604 	.word	0x08007604
 8005fc4:	08007694 	.word	0x08007694

08005fc8 <__mcmp>:
 8005fc8:	4603      	mov	r3, r0
 8005fca:	690a      	ldr	r2, [r1, #16]
 8005fcc:	6900      	ldr	r0, [r0, #16]
 8005fce:	b530      	push	{r4, r5, lr}
 8005fd0:	1a80      	subs	r0, r0, r2
 8005fd2:	d10d      	bne.n	8005ff0 <__mcmp+0x28>
 8005fd4:	3314      	adds	r3, #20
 8005fd6:	3114      	adds	r1, #20
 8005fd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005fdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005fe0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005fe4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005fe8:	4295      	cmp	r5, r2
 8005fea:	d002      	beq.n	8005ff2 <__mcmp+0x2a>
 8005fec:	d304      	bcc.n	8005ff8 <__mcmp+0x30>
 8005fee:	2001      	movs	r0, #1
 8005ff0:	bd30      	pop	{r4, r5, pc}
 8005ff2:	42a3      	cmp	r3, r4
 8005ff4:	d3f4      	bcc.n	8005fe0 <__mcmp+0x18>
 8005ff6:	e7fb      	b.n	8005ff0 <__mcmp+0x28>
 8005ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffc:	e7f8      	b.n	8005ff0 <__mcmp+0x28>
	...

08006000 <__mdiff>:
 8006000:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006004:	460c      	mov	r4, r1
 8006006:	4606      	mov	r6, r0
 8006008:	4611      	mov	r1, r2
 800600a:	4620      	mov	r0, r4
 800600c:	4692      	mov	sl, r2
 800600e:	f7ff ffdb 	bl	8005fc8 <__mcmp>
 8006012:	1e05      	subs	r5, r0, #0
 8006014:	d111      	bne.n	800603a <__mdiff+0x3a>
 8006016:	4629      	mov	r1, r5
 8006018:	4630      	mov	r0, r6
 800601a:	f7ff fd11 	bl	8005a40 <_Balloc>
 800601e:	4602      	mov	r2, r0
 8006020:	b928      	cbnz	r0, 800602e <__mdiff+0x2e>
 8006022:	f240 2132 	movw	r1, #562	; 0x232
 8006026:	4b3c      	ldr	r3, [pc, #240]	; (8006118 <__mdiff+0x118>)
 8006028:	483c      	ldr	r0, [pc, #240]	; (800611c <__mdiff+0x11c>)
 800602a:	f000 fc07 	bl	800683c <__assert_func>
 800602e:	2301      	movs	r3, #1
 8006030:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006034:	4610      	mov	r0, r2
 8006036:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800603a:	bfa4      	itt	ge
 800603c:	4653      	movge	r3, sl
 800603e:	46a2      	movge	sl, r4
 8006040:	4630      	mov	r0, r6
 8006042:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006046:	bfa6      	itte	ge
 8006048:	461c      	movge	r4, r3
 800604a:	2500      	movge	r5, #0
 800604c:	2501      	movlt	r5, #1
 800604e:	f7ff fcf7 	bl	8005a40 <_Balloc>
 8006052:	4602      	mov	r2, r0
 8006054:	b918      	cbnz	r0, 800605e <__mdiff+0x5e>
 8006056:	f44f 7110 	mov.w	r1, #576	; 0x240
 800605a:	4b2f      	ldr	r3, [pc, #188]	; (8006118 <__mdiff+0x118>)
 800605c:	e7e4      	b.n	8006028 <__mdiff+0x28>
 800605e:	f100 0814 	add.w	r8, r0, #20
 8006062:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006066:	60c5      	str	r5, [r0, #12]
 8006068:	f04f 0c00 	mov.w	ip, #0
 800606c:	f10a 0514 	add.w	r5, sl, #20
 8006070:	f10a 0010 	add.w	r0, sl, #16
 8006074:	46c2      	mov	sl, r8
 8006076:	6926      	ldr	r6, [r4, #16]
 8006078:	f104 0914 	add.w	r9, r4, #20
 800607c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006080:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006084:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006088:	f859 3b04 	ldr.w	r3, [r9], #4
 800608c:	fa1f f18b 	uxth.w	r1, fp
 8006090:	4461      	add	r1, ip
 8006092:	fa1f fc83 	uxth.w	ip, r3
 8006096:	0c1b      	lsrs	r3, r3, #16
 8006098:	eba1 010c 	sub.w	r1, r1, ip
 800609c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80060a0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80060a4:	b289      	uxth	r1, r1
 80060a6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80060aa:	454e      	cmp	r6, r9
 80060ac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80060b0:	f84a 3b04 	str.w	r3, [sl], #4
 80060b4:	d8e6      	bhi.n	8006084 <__mdiff+0x84>
 80060b6:	1b33      	subs	r3, r6, r4
 80060b8:	3b15      	subs	r3, #21
 80060ba:	f023 0303 	bic.w	r3, r3, #3
 80060be:	3415      	adds	r4, #21
 80060c0:	3304      	adds	r3, #4
 80060c2:	42a6      	cmp	r6, r4
 80060c4:	bf38      	it	cc
 80060c6:	2304      	movcc	r3, #4
 80060c8:	441d      	add	r5, r3
 80060ca:	4443      	add	r3, r8
 80060cc:	461e      	mov	r6, r3
 80060ce:	462c      	mov	r4, r5
 80060d0:	4574      	cmp	r4, lr
 80060d2:	d30e      	bcc.n	80060f2 <__mdiff+0xf2>
 80060d4:	f10e 0103 	add.w	r1, lr, #3
 80060d8:	1b49      	subs	r1, r1, r5
 80060da:	f021 0103 	bic.w	r1, r1, #3
 80060de:	3d03      	subs	r5, #3
 80060e0:	45ae      	cmp	lr, r5
 80060e2:	bf38      	it	cc
 80060e4:	2100      	movcc	r1, #0
 80060e6:	4419      	add	r1, r3
 80060e8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80060ec:	b18b      	cbz	r3, 8006112 <__mdiff+0x112>
 80060ee:	6117      	str	r7, [r2, #16]
 80060f0:	e7a0      	b.n	8006034 <__mdiff+0x34>
 80060f2:	f854 8b04 	ldr.w	r8, [r4], #4
 80060f6:	fa1f f188 	uxth.w	r1, r8
 80060fa:	4461      	add	r1, ip
 80060fc:	1408      	asrs	r0, r1, #16
 80060fe:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006102:	b289      	uxth	r1, r1
 8006104:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006108:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800610c:	f846 1b04 	str.w	r1, [r6], #4
 8006110:	e7de      	b.n	80060d0 <__mdiff+0xd0>
 8006112:	3f01      	subs	r7, #1
 8006114:	e7e8      	b.n	80060e8 <__mdiff+0xe8>
 8006116:	bf00      	nop
 8006118:	08007604 	.word	0x08007604
 800611c:	08007694 	.word	0x08007694

08006120 <__ulp>:
 8006120:	4b11      	ldr	r3, [pc, #68]	; (8006168 <__ulp+0x48>)
 8006122:	400b      	ands	r3, r1
 8006124:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006128:	2b00      	cmp	r3, #0
 800612a:	dd02      	ble.n	8006132 <__ulp+0x12>
 800612c:	2000      	movs	r0, #0
 800612e:	4619      	mov	r1, r3
 8006130:	4770      	bx	lr
 8006132:	425b      	negs	r3, r3
 8006134:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006138:	f04f 0000 	mov.w	r0, #0
 800613c:	f04f 0100 	mov.w	r1, #0
 8006140:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006144:	da04      	bge.n	8006150 <__ulp+0x30>
 8006146:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800614a:	fa43 f102 	asr.w	r1, r3, r2
 800614e:	4770      	bx	lr
 8006150:	f1a2 0314 	sub.w	r3, r2, #20
 8006154:	2b1e      	cmp	r3, #30
 8006156:	bfd6      	itet	le
 8006158:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800615c:	2301      	movgt	r3, #1
 800615e:	fa22 f303 	lsrle.w	r3, r2, r3
 8006162:	4618      	mov	r0, r3
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	7ff00000 	.word	0x7ff00000

0800616c <__b2d>:
 800616c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006170:	6907      	ldr	r7, [r0, #16]
 8006172:	f100 0914 	add.w	r9, r0, #20
 8006176:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800617a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800617e:	f1a7 0804 	sub.w	r8, r7, #4
 8006182:	4630      	mov	r0, r6
 8006184:	f7ff fd52 	bl	8005c2c <__hi0bits>
 8006188:	f1c0 0320 	rsb	r3, r0, #32
 800618c:	280a      	cmp	r0, #10
 800618e:	600b      	str	r3, [r1, #0]
 8006190:	491f      	ldr	r1, [pc, #124]	; (8006210 <__b2d+0xa4>)
 8006192:	dc17      	bgt.n	80061c4 <__b2d+0x58>
 8006194:	45c1      	cmp	r9, r8
 8006196:	bf28      	it	cs
 8006198:	2200      	movcs	r2, #0
 800619a:	f1c0 0c0b 	rsb	ip, r0, #11
 800619e:	fa26 f30c 	lsr.w	r3, r6, ip
 80061a2:	bf38      	it	cc
 80061a4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80061a8:	ea43 0501 	orr.w	r5, r3, r1
 80061ac:	f100 0315 	add.w	r3, r0, #21
 80061b0:	fa06 f303 	lsl.w	r3, r6, r3
 80061b4:	fa22 f20c 	lsr.w	r2, r2, ip
 80061b8:	ea43 0402 	orr.w	r4, r3, r2
 80061bc:	4620      	mov	r0, r4
 80061be:	4629      	mov	r1, r5
 80061c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061c4:	45c1      	cmp	r9, r8
 80061c6:	bf2e      	itee	cs
 80061c8:	2200      	movcs	r2, #0
 80061ca:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80061ce:	f1a7 0808 	subcc.w	r8, r7, #8
 80061d2:	f1b0 030b 	subs.w	r3, r0, #11
 80061d6:	d016      	beq.n	8006206 <__b2d+0x9a>
 80061d8:	f1c3 0720 	rsb	r7, r3, #32
 80061dc:	fa22 f107 	lsr.w	r1, r2, r7
 80061e0:	45c8      	cmp	r8, r9
 80061e2:	fa06 f603 	lsl.w	r6, r6, r3
 80061e6:	ea46 0601 	orr.w	r6, r6, r1
 80061ea:	bf94      	ite	ls
 80061ec:	2100      	movls	r1, #0
 80061ee:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80061f2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80061f6:	fa02 f003 	lsl.w	r0, r2, r3
 80061fa:	40f9      	lsrs	r1, r7
 80061fc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006200:	ea40 0401 	orr.w	r4, r0, r1
 8006204:	e7da      	b.n	80061bc <__b2d+0x50>
 8006206:	4614      	mov	r4, r2
 8006208:	ea46 0501 	orr.w	r5, r6, r1
 800620c:	e7d6      	b.n	80061bc <__b2d+0x50>
 800620e:	bf00      	nop
 8006210:	3ff00000 	.word	0x3ff00000

08006214 <__d2b>:
 8006214:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006218:	2101      	movs	r1, #1
 800621a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800621e:	4690      	mov	r8, r2
 8006220:	461d      	mov	r5, r3
 8006222:	f7ff fc0d 	bl	8005a40 <_Balloc>
 8006226:	4604      	mov	r4, r0
 8006228:	b930      	cbnz	r0, 8006238 <__d2b+0x24>
 800622a:	4602      	mov	r2, r0
 800622c:	f240 310a 	movw	r1, #778	; 0x30a
 8006230:	4b24      	ldr	r3, [pc, #144]	; (80062c4 <__d2b+0xb0>)
 8006232:	4825      	ldr	r0, [pc, #148]	; (80062c8 <__d2b+0xb4>)
 8006234:	f000 fb02 	bl	800683c <__assert_func>
 8006238:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800623c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006240:	bb2d      	cbnz	r5, 800628e <__d2b+0x7a>
 8006242:	9301      	str	r3, [sp, #4]
 8006244:	f1b8 0300 	subs.w	r3, r8, #0
 8006248:	d026      	beq.n	8006298 <__d2b+0x84>
 800624a:	4668      	mov	r0, sp
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	f7ff fd0d 	bl	8005c6c <__lo0bits>
 8006252:	9900      	ldr	r1, [sp, #0]
 8006254:	b1f0      	cbz	r0, 8006294 <__d2b+0x80>
 8006256:	9a01      	ldr	r2, [sp, #4]
 8006258:	f1c0 0320 	rsb	r3, r0, #32
 800625c:	fa02 f303 	lsl.w	r3, r2, r3
 8006260:	430b      	orrs	r3, r1
 8006262:	40c2      	lsrs	r2, r0
 8006264:	6163      	str	r3, [r4, #20]
 8006266:	9201      	str	r2, [sp, #4]
 8006268:	9b01      	ldr	r3, [sp, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	bf14      	ite	ne
 800626e:	2102      	movne	r1, #2
 8006270:	2101      	moveq	r1, #1
 8006272:	61a3      	str	r3, [r4, #24]
 8006274:	6121      	str	r1, [r4, #16]
 8006276:	b1c5      	cbz	r5, 80062aa <__d2b+0x96>
 8006278:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800627c:	4405      	add	r5, r0
 800627e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006282:	603d      	str	r5, [r7, #0]
 8006284:	6030      	str	r0, [r6, #0]
 8006286:	4620      	mov	r0, r4
 8006288:	b002      	add	sp, #8
 800628a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800628e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006292:	e7d6      	b.n	8006242 <__d2b+0x2e>
 8006294:	6161      	str	r1, [r4, #20]
 8006296:	e7e7      	b.n	8006268 <__d2b+0x54>
 8006298:	a801      	add	r0, sp, #4
 800629a:	f7ff fce7 	bl	8005c6c <__lo0bits>
 800629e:	2101      	movs	r1, #1
 80062a0:	9b01      	ldr	r3, [sp, #4]
 80062a2:	6121      	str	r1, [r4, #16]
 80062a4:	6163      	str	r3, [r4, #20]
 80062a6:	3020      	adds	r0, #32
 80062a8:	e7e5      	b.n	8006276 <__d2b+0x62>
 80062aa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80062ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80062b2:	6038      	str	r0, [r7, #0]
 80062b4:	6918      	ldr	r0, [r3, #16]
 80062b6:	f7ff fcb9 	bl	8005c2c <__hi0bits>
 80062ba:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80062be:	6031      	str	r1, [r6, #0]
 80062c0:	e7e1      	b.n	8006286 <__d2b+0x72>
 80062c2:	bf00      	nop
 80062c4:	08007604 	.word	0x08007604
 80062c8:	08007694 	.word	0x08007694

080062cc <__ratio>:
 80062cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d0:	4688      	mov	r8, r1
 80062d2:	4669      	mov	r1, sp
 80062d4:	4681      	mov	r9, r0
 80062d6:	f7ff ff49 	bl	800616c <__b2d>
 80062da:	460f      	mov	r7, r1
 80062dc:	4604      	mov	r4, r0
 80062de:	460d      	mov	r5, r1
 80062e0:	4640      	mov	r0, r8
 80062e2:	a901      	add	r1, sp, #4
 80062e4:	f7ff ff42 	bl	800616c <__b2d>
 80062e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80062ec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80062f0:	468b      	mov	fp, r1
 80062f2:	eba3 0c02 	sub.w	ip, r3, r2
 80062f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80062fa:	1a9b      	subs	r3, r3, r2
 80062fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006300:	2b00      	cmp	r3, #0
 8006302:	bfd5      	itete	le
 8006304:	460a      	movle	r2, r1
 8006306:	462a      	movgt	r2, r5
 8006308:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800630c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006310:	bfd8      	it	le
 8006312:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006316:	465b      	mov	r3, fp
 8006318:	4602      	mov	r2, r0
 800631a:	4639      	mov	r1, r7
 800631c:	4620      	mov	r0, r4
 800631e:	f7fa fa05 	bl	800072c <__aeabi_ddiv>
 8006322:	b003      	add	sp, #12
 8006324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006328 <__copybits>:
 8006328:	3901      	subs	r1, #1
 800632a:	b570      	push	{r4, r5, r6, lr}
 800632c:	1149      	asrs	r1, r1, #5
 800632e:	6914      	ldr	r4, [r2, #16]
 8006330:	3101      	adds	r1, #1
 8006332:	f102 0314 	add.w	r3, r2, #20
 8006336:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800633a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800633e:	1f05      	subs	r5, r0, #4
 8006340:	42a3      	cmp	r3, r4
 8006342:	d30c      	bcc.n	800635e <__copybits+0x36>
 8006344:	1aa3      	subs	r3, r4, r2
 8006346:	3b11      	subs	r3, #17
 8006348:	f023 0303 	bic.w	r3, r3, #3
 800634c:	3211      	adds	r2, #17
 800634e:	42a2      	cmp	r2, r4
 8006350:	bf88      	it	hi
 8006352:	2300      	movhi	r3, #0
 8006354:	4418      	add	r0, r3
 8006356:	2300      	movs	r3, #0
 8006358:	4288      	cmp	r0, r1
 800635a:	d305      	bcc.n	8006368 <__copybits+0x40>
 800635c:	bd70      	pop	{r4, r5, r6, pc}
 800635e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006362:	f845 6f04 	str.w	r6, [r5, #4]!
 8006366:	e7eb      	b.n	8006340 <__copybits+0x18>
 8006368:	f840 3b04 	str.w	r3, [r0], #4
 800636c:	e7f4      	b.n	8006358 <__copybits+0x30>

0800636e <__any_on>:
 800636e:	f100 0214 	add.w	r2, r0, #20
 8006372:	6900      	ldr	r0, [r0, #16]
 8006374:	114b      	asrs	r3, r1, #5
 8006376:	4298      	cmp	r0, r3
 8006378:	b510      	push	{r4, lr}
 800637a:	db11      	blt.n	80063a0 <__any_on+0x32>
 800637c:	dd0a      	ble.n	8006394 <__any_on+0x26>
 800637e:	f011 011f 	ands.w	r1, r1, #31
 8006382:	d007      	beq.n	8006394 <__any_on+0x26>
 8006384:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006388:	fa24 f001 	lsr.w	r0, r4, r1
 800638c:	fa00 f101 	lsl.w	r1, r0, r1
 8006390:	428c      	cmp	r4, r1
 8006392:	d10b      	bne.n	80063ac <__any_on+0x3e>
 8006394:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006398:	4293      	cmp	r3, r2
 800639a:	d803      	bhi.n	80063a4 <__any_on+0x36>
 800639c:	2000      	movs	r0, #0
 800639e:	bd10      	pop	{r4, pc}
 80063a0:	4603      	mov	r3, r0
 80063a2:	e7f7      	b.n	8006394 <__any_on+0x26>
 80063a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80063a8:	2900      	cmp	r1, #0
 80063aa:	d0f5      	beq.n	8006398 <__any_on+0x2a>
 80063ac:	2001      	movs	r0, #1
 80063ae:	e7f6      	b.n	800639e <__any_on+0x30>

080063b0 <_calloc_r>:
 80063b0:	b538      	push	{r3, r4, r5, lr}
 80063b2:	fb02 f501 	mul.w	r5, r2, r1
 80063b6:	4629      	mov	r1, r5
 80063b8:	f000 f854 	bl	8006464 <_malloc_r>
 80063bc:	4604      	mov	r4, r0
 80063be:	b118      	cbz	r0, 80063c8 <_calloc_r+0x18>
 80063c0:	462a      	mov	r2, r5
 80063c2:	2100      	movs	r1, #0
 80063c4:	f7fc fbbe 	bl	8002b44 <memset>
 80063c8:	4620      	mov	r0, r4
 80063ca:	bd38      	pop	{r3, r4, r5, pc}

080063cc <_free_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	4605      	mov	r5, r0
 80063d0:	2900      	cmp	r1, #0
 80063d2:	d043      	beq.n	800645c <_free_r+0x90>
 80063d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063d8:	1f0c      	subs	r4, r1, #4
 80063da:	2b00      	cmp	r3, #0
 80063dc:	bfb8      	it	lt
 80063de:	18e4      	addlt	r4, r4, r3
 80063e0:	f000 fa76 	bl	80068d0 <__malloc_lock>
 80063e4:	4a1e      	ldr	r2, [pc, #120]	; (8006460 <_free_r+0x94>)
 80063e6:	6813      	ldr	r3, [r2, #0]
 80063e8:	4610      	mov	r0, r2
 80063ea:	b933      	cbnz	r3, 80063fa <_free_r+0x2e>
 80063ec:	6063      	str	r3, [r4, #4]
 80063ee:	6014      	str	r4, [r2, #0]
 80063f0:	4628      	mov	r0, r5
 80063f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063f6:	f000 ba71 	b.w	80068dc <__malloc_unlock>
 80063fa:	42a3      	cmp	r3, r4
 80063fc:	d90a      	bls.n	8006414 <_free_r+0x48>
 80063fe:	6821      	ldr	r1, [r4, #0]
 8006400:	1862      	adds	r2, r4, r1
 8006402:	4293      	cmp	r3, r2
 8006404:	bf01      	itttt	eq
 8006406:	681a      	ldreq	r2, [r3, #0]
 8006408:	685b      	ldreq	r3, [r3, #4]
 800640a:	1852      	addeq	r2, r2, r1
 800640c:	6022      	streq	r2, [r4, #0]
 800640e:	6063      	str	r3, [r4, #4]
 8006410:	6004      	str	r4, [r0, #0]
 8006412:	e7ed      	b.n	80063f0 <_free_r+0x24>
 8006414:	461a      	mov	r2, r3
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	b10b      	cbz	r3, 800641e <_free_r+0x52>
 800641a:	42a3      	cmp	r3, r4
 800641c:	d9fa      	bls.n	8006414 <_free_r+0x48>
 800641e:	6811      	ldr	r1, [r2, #0]
 8006420:	1850      	adds	r0, r2, r1
 8006422:	42a0      	cmp	r0, r4
 8006424:	d10b      	bne.n	800643e <_free_r+0x72>
 8006426:	6820      	ldr	r0, [r4, #0]
 8006428:	4401      	add	r1, r0
 800642a:	1850      	adds	r0, r2, r1
 800642c:	4283      	cmp	r3, r0
 800642e:	6011      	str	r1, [r2, #0]
 8006430:	d1de      	bne.n	80063f0 <_free_r+0x24>
 8006432:	6818      	ldr	r0, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	4401      	add	r1, r0
 8006438:	6011      	str	r1, [r2, #0]
 800643a:	6053      	str	r3, [r2, #4]
 800643c:	e7d8      	b.n	80063f0 <_free_r+0x24>
 800643e:	d902      	bls.n	8006446 <_free_r+0x7a>
 8006440:	230c      	movs	r3, #12
 8006442:	602b      	str	r3, [r5, #0]
 8006444:	e7d4      	b.n	80063f0 <_free_r+0x24>
 8006446:	6820      	ldr	r0, [r4, #0]
 8006448:	1821      	adds	r1, r4, r0
 800644a:	428b      	cmp	r3, r1
 800644c:	bf01      	itttt	eq
 800644e:	6819      	ldreq	r1, [r3, #0]
 8006450:	685b      	ldreq	r3, [r3, #4]
 8006452:	1809      	addeq	r1, r1, r0
 8006454:	6021      	streq	r1, [r4, #0]
 8006456:	6063      	str	r3, [r4, #4]
 8006458:	6054      	str	r4, [r2, #4]
 800645a:	e7c9      	b.n	80063f0 <_free_r+0x24>
 800645c:	bd38      	pop	{r3, r4, r5, pc}
 800645e:	bf00      	nop
 8006460:	20000204 	.word	0x20000204

08006464 <_malloc_r>:
 8006464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006466:	1ccd      	adds	r5, r1, #3
 8006468:	f025 0503 	bic.w	r5, r5, #3
 800646c:	3508      	adds	r5, #8
 800646e:	2d0c      	cmp	r5, #12
 8006470:	bf38      	it	cc
 8006472:	250c      	movcc	r5, #12
 8006474:	2d00      	cmp	r5, #0
 8006476:	4606      	mov	r6, r0
 8006478:	db01      	blt.n	800647e <_malloc_r+0x1a>
 800647a:	42a9      	cmp	r1, r5
 800647c:	d903      	bls.n	8006486 <_malloc_r+0x22>
 800647e:	230c      	movs	r3, #12
 8006480:	6033      	str	r3, [r6, #0]
 8006482:	2000      	movs	r0, #0
 8006484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006486:	f000 fa23 	bl	80068d0 <__malloc_lock>
 800648a:	4921      	ldr	r1, [pc, #132]	; (8006510 <_malloc_r+0xac>)
 800648c:	680a      	ldr	r2, [r1, #0]
 800648e:	4614      	mov	r4, r2
 8006490:	b99c      	cbnz	r4, 80064ba <_malloc_r+0x56>
 8006492:	4f20      	ldr	r7, [pc, #128]	; (8006514 <_malloc_r+0xb0>)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	b923      	cbnz	r3, 80064a2 <_malloc_r+0x3e>
 8006498:	4621      	mov	r1, r4
 800649a:	4630      	mov	r0, r6
 800649c:	f000 f99e 	bl	80067dc <_sbrk_r>
 80064a0:	6038      	str	r0, [r7, #0]
 80064a2:	4629      	mov	r1, r5
 80064a4:	4630      	mov	r0, r6
 80064a6:	f000 f999 	bl	80067dc <_sbrk_r>
 80064aa:	1c43      	adds	r3, r0, #1
 80064ac:	d123      	bne.n	80064f6 <_malloc_r+0x92>
 80064ae:	230c      	movs	r3, #12
 80064b0:	4630      	mov	r0, r6
 80064b2:	6033      	str	r3, [r6, #0]
 80064b4:	f000 fa12 	bl	80068dc <__malloc_unlock>
 80064b8:	e7e3      	b.n	8006482 <_malloc_r+0x1e>
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	1b5b      	subs	r3, r3, r5
 80064be:	d417      	bmi.n	80064f0 <_malloc_r+0x8c>
 80064c0:	2b0b      	cmp	r3, #11
 80064c2:	d903      	bls.n	80064cc <_malloc_r+0x68>
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	441c      	add	r4, r3
 80064c8:	6025      	str	r5, [r4, #0]
 80064ca:	e004      	b.n	80064d6 <_malloc_r+0x72>
 80064cc:	6863      	ldr	r3, [r4, #4]
 80064ce:	42a2      	cmp	r2, r4
 80064d0:	bf0c      	ite	eq
 80064d2:	600b      	streq	r3, [r1, #0]
 80064d4:	6053      	strne	r3, [r2, #4]
 80064d6:	4630      	mov	r0, r6
 80064d8:	f000 fa00 	bl	80068dc <__malloc_unlock>
 80064dc:	f104 000b 	add.w	r0, r4, #11
 80064e0:	1d23      	adds	r3, r4, #4
 80064e2:	f020 0007 	bic.w	r0, r0, #7
 80064e6:	1ac2      	subs	r2, r0, r3
 80064e8:	d0cc      	beq.n	8006484 <_malloc_r+0x20>
 80064ea:	1a1b      	subs	r3, r3, r0
 80064ec:	50a3      	str	r3, [r4, r2]
 80064ee:	e7c9      	b.n	8006484 <_malloc_r+0x20>
 80064f0:	4622      	mov	r2, r4
 80064f2:	6864      	ldr	r4, [r4, #4]
 80064f4:	e7cc      	b.n	8006490 <_malloc_r+0x2c>
 80064f6:	1cc4      	adds	r4, r0, #3
 80064f8:	f024 0403 	bic.w	r4, r4, #3
 80064fc:	42a0      	cmp	r0, r4
 80064fe:	d0e3      	beq.n	80064c8 <_malloc_r+0x64>
 8006500:	1a21      	subs	r1, r4, r0
 8006502:	4630      	mov	r0, r6
 8006504:	f000 f96a 	bl	80067dc <_sbrk_r>
 8006508:	3001      	adds	r0, #1
 800650a:	d1dd      	bne.n	80064c8 <_malloc_r+0x64>
 800650c:	e7cf      	b.n	80064ae <_malloc_r+0x4a>
 800650e:	bf00      	nop
 8006510:	20000204 	.word	0x20000204
 8006514:	20000208 	.word	0x20000208

08006518 <__ssputs_r>:
 8006518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800651c:	688e      	ldr	r6, [r1, #8]
 800651e:	4682      	mov	sl, r0
 8006520:	429e      	cmp	r6, r3
 8006522:	460c      	mov	r4, r1
 8006524:	4690      	mov	r8, r2
 8006526:	461f      	mov	r7, r3
 8006528:	d838      	bhi.n	800659c <__ssputs_r+0x84>
 800652a:	898a      	ldrh	r2, [r1, #12]
 800652c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006530:	d032      	beq.n	8006598 <__ssputs_r+0x80>
 8006532:	6825      	ldr	r5, [r4, #0]
 8006534:	6909      	ldr	r1, [r1, #16]
 8006536:	3301      	adds	r3, #1
 8006538:	eba5 0901 	sub.w	r9, r5, r1
 800653c:	6965      	ldr	r5, [r4, #20]
 800653e:	444b      	add	r3, r9
 8006540:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006544:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006548:	106d      	asrs	r5, r5, #1
 800654a:	429d      	cmp	r5, r3
 800654c:	bf38      	it	cc
 800654e:	461d      	movcc	r5, r3
 8006550:	0553      	lsls	r3, r2, #21
 8006552:	d531      	bpl.n	80065b8 <__ssputs_r+0xa0>
 8006554:	4629      	mov	r1, r5
 8006556:	f7ff ff85 	bl	8006464 <_malloc_r>
 800655a:	4606      	mov	r6, r0
 800655c:	b950      	cbnz	r0, 8006574 <__ssputs_r+0x5c>
 800655e:	230c      	movs	r3, #12
 8006560:	f04f 30ff 	mov.w	r0, #4294967295
 8006564:	f8ca 3000 	str.w	r3, [sl]
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800656e:	81a3      	strh	r3, [r4, #12]
 8006570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006574:	464a      	mov	r2, r9
 8006576:	6921      	ldr	r1, [r4, #16]
 8006578:	f7fc fad6 	bl	8002b28 <memcpy>
 800657c:	89a3      	ldrh	r3, [r4, #12]
 800657e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006586:	81a3      	strh	r3, [r4, #12]
 8006588:	6126      	str	r6, [r4, #16]
 800658a:	444e      	add	r6, r9
 800658c:	6026      	str	r6, [r4, #0]
 800658e:	463e      	mov	r6, r7
 8006590:	6165      	str	r5, [r4, #20]
 8006592:	eba5 0509 	sub.w	r5, r5, r9
 8006596:	60a5      	str	r5, [r4, #8]
 8006598:	42be      	cmp	r6, r7
 800659a:	d900      	bls.n	800659e <__ssputs_r+0x86>
 800659c:	463e      	mov	r6, r7
 800659e:	4632      	mov	r2, r6
 80065a0:	4641      	mov	r1, r8
 80065a2:	6820      	ldr	r0, [r4, #0]
 80065a4:	f000 f97a 	bl	800689c <memmove>
 80065a8:	68a3      	ldr	r3, [r4, #8]
 80065aa:	6822      	ldr	r2, [r4, #0]
 80065ac:	1b9b      	subs	r3, r3, r6
 80065ae:	4432      	add	r2, r6
 80065b0:	2000      	movs	r0, #0
 80065b2:	60a3      	str	r3, [r4, #8]
 80065b4:	6022      	str	r2, [r4, #0]
 80065b6:	e7db      	b.n	8006570 <__ssputs_r+0x58>
 80065b8:	462a      	mov	r2, r5
 80065ba:	f000 f995 	bl	80068e8 <_realloc_r>
 80065be:	4606      	mov	r6, r0
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d1e1      	bne.n	8006588 <__ssputs_r+0x70>
 80065c4:	4650      	mov	r0, sl
 80065c6:	6921      	ldr	r1, [r4, #16]
 80065c8:	f7ff ff00 	bl	80063cc <_free_r>
 80065cc:	e7c7      	b.n	800655e <__ssputs_r+0x46>
	...

080065d0 <_svfiprintf_r>:
 80065d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d4:	4698      	mov	r8, r3
 80065d6:	898b      	ldrh	r3, [r1, #12]
 80065d8:	4607      	mov	r7, r0
 80065da:	061b      	lsls	r3, r3, #24
 80065dc:	460d      	mov	r5, r1
 80065de:	4614      	mov	r4, r2
 80065e0:	b09d      	sub	sp, #116	; 0x74
 80065e2:	d50e      	bpl.n	8006602 <_svfiprintf_r+0x32>
 80065e4:	690b      	ldr	r3, [r1, #16]
 80065e6:	b963      	cbnz	r3, 8006602 <_svfiprintf_r+0x32>
 80065e8:	2140      	movs	r1, #64	; 0x40
 80065ea:	f7ff ff3b 	bl	8006464 <_malloc_r>
 80065ee:	6028      	str	r0, [r5, #0]
 80065f0:	6128      	str	r0, [r5, #16]
 80065f2:	b920      	cbnz	r0, 80065fe <_svfiprintf_r+0x2e>
 80065f4:	230c      	movs	r3, #12
 80065f6:	603b      	str	r3, [r7, #0]
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295
 80065fc:	e0d1      	b.n	80067a2 <_svfiprintf_r+0x1d2>
 80065fe:	2340      	movs	r3, #64	; 0x40
 8006600:	616b      	str	r3, [r5, #20]
 8006602:	2300      	movs	r3, #0
 8006604:	9309      	str	r3, [sp, #36]	; 0x24
 8006606:	2320      	movs	r3, #32
 8006608:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800660c:	2330      	movs	r3, #48	; 0x30
 800660e:	f04f 0901 	mov.w	r9, #1
 8006612:	f8cd 800c 	str.w	r8, [sp, #12]
 8006616:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80067bc <_svfiprintf_r+0x1ec>
 800661a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800661e:	4623      	mov	r3, r4
 8006620:	469a      	mov	sl, r3
 8006622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006626:	b10a      	cbz	r2, 800662c <_svfiprintf_r+0x5c>
 8006628:	2a25      	cmp	r2, #37	; 0x25
 800662a:	d1f9      	bne.n	8006620 <_svfiprintf_r+0x50>
 800662c:	ebba 0b04 	subs.w	fp, sl, r4
 8006630:	d00b      	beq.n	800664a <_svfiprintf_r+0x7a>
 8006632:	465b      	mov	r3, fp
 8006634:	4622      	mov	r2, r4
 8006636:	4629      	mov	r1, r5
 8006638:	4638      	mov	r0, r7
 800663a:	f7ff ff6d 	bl	8006518 <__ssputs_r>
 800663e:	3001      	adds	r0, #1
 8006640:	f000 80aa 	beq.w	8006798 <_svfiprintf_r+0x1c8>
 8006644:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006646:	445a      	add	r2, fp
 8006648:	9209      	str	r2, [sp, #36]	; 0x24
 800664a:	f89a 3000 	ldrb.w	r3, [sl]
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 80a2 	beq.w	8006798 <_svfiprintf_r+0x1c8>
 8006654:	2300      	movs	r3, #0
 8006656:	f04f 32ff 	mov.w	r2, #4294967295
 800665a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800665e:	f10a 0a01 	add.w	sl, sl, #1
 8006662:	9304      	str	r3, [sp, #16]
 8006664:	9307      	str	r3, [sp, #28]
 8006666:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800666a:	931a      	str	r3, [sp, #104]	; 0x68
 800666c:	4654      	mov	r4, sl
 800666e:	2205      	movs	r2, #5
 8006670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006674:	4851      	ldr	r0, [pc, #324]	; (80067bc <_svfiprintf_r+0x1ec>)
 8006676:	f7ff f9d5 	bl	8005a24 <memchr>
 800667a:	9a04      	ldr	r2, [sp, #16]
 800667c:	b9d8      	cbnz	r0, 80066b6 <_svfiprintf_r+0xe6>
 800667e:	06d0      	lsls	r0, r2, #27
 8006680:	bf44      	itt	mi
 8006682:	2320      	movmi	r3, #32
 8006684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006688:	0711      	lsls	r1, r2, #28
 800668a:	bf44      	itt	mi
 800668c:	232b      	movmi	r3, #43	; 0x2b
 800668e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006692:	f89a 3000 	ldrb.w	r3, [sl]
 8006696:	2b2a      	cmp	r3, #42	; 0x2a
 8006698:	d015      	beq.n	80066c6 <_svfiprintf_r+0xf6>
 800669a:	4654      	mov	r4, sl
 800669c:	2000      	movs	r0, #0
 800669e:	f04f 0c0a 	mov.w	ip, #10
 80066a2:	9a07      	ldr	r2, [sp, #28]
 80066a4:	4621      	mov	r1, r4
 80066a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066aa:	3b30      	subs	r3, #48	; 0x30
 80066ac:	2b09      	cmp	r3, #9
 80066ae:	d94e      	bls.n	800674e <_svfiprintf_r+0x17e>
 80066b0:	b1b0      	cbz	r0, 80066e0 <_svfiprintf_r+0x110>
 80066b2:	9207      	str	r2, [sp, #28]
 80066b4:	e014      	b.n	80066e0 <_svfiprintf_r+0x110>
 80066b6:	eba0 0308 	sub.w	r3, r0, r8
 80066ba:	fa09 f303 	lsl.w	r3, r9, r3
 80066be:	4313      	orrs	r3, r2
 80066c0:	46a2      	mov	sl, r4
 80066c2:	9304      	str	r3, [sp, #16]
 80066c4:	e7d2      	b.n	800666c <_svfiprintf_r+0x9c>
 80066c6:	9b03      	ldr	r3, [sp, #12]
 80066c8:	1d19      	adds	r1, r3, #4
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	9103      	str	r1, [sp, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	bfbb      	ittet	lt
 80066d2:	425b      	neglt	r3, r3
 80066d4:	f042 0202 	orrlt.w	r2, r2, #2
 80066d8:	9307      	strge	r3, [sp, #28]
 80066da:	9307      	strlt	r3, [sp, #28]
 80066dc:	bfb8      	it	lt
 80066de:	9204      	strlt	r2, [sp, #16]
 80066e0:	7823      	ldrb	r3, [r4, #0]
 80066e2:	2b2e      	cmp	r3, #46	; 0x2e
 80066e4:	d10c      	bne.n	8006700 <_svfiprintf_r+0x130>
 80066e6:	7863      	ldrb	r3, [r4, #1]
 80066e8:	2b2a      	cmp	r3, #42	; 0x2a
 80066ea:	d135      	bne.n	8006758 <_svfiprintf_r+0x188>
 80066ec:	9b03      	ldr	r3, [sp, #12]
 80066ee:	3402      	adds	r4, #2
 80066f0:	1d1a      	adds	r2, r3, #4
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	9203      	str	r2, [sp, #12]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	bfb8      	it	lt
 80066fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80066fe:	9305      	str	r3, [sp, #20]
 8006700:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067cc <_svfiprintf_r+0x1fc>
 8006704:	2203      	movs	r2, #3
 8006706:	4650      	mov	r0, sl
 8006708:	7821      	ldrb	r1, [r4, #0]
 800670a:	f7ff f98b 	bl	8005a24 <memchr>
 800670e:	b140      	cbz	r0, 8006722 <_svfiprintf_r+0x152>
 8006710:	2340      	movs	r3, #64	; 0x40
 8006712:	eba0 000a 	sub.w	r0, r0, sl
 8006716:	fa03 f000 	lsl.w	r0, r3, r0
 800671a:	9b04      	ldr	r3, [sp, #16]
 800671c:	3401      	adds	r4, #1
 800671e:	4303      	orrs	r3, r0
 8006720:	9304      	str	r3, [sp, #16]
 8006722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006726:	2206      	movs	r2, #6
 8006728:	4825      	ldr	r0, [pc, #148]	; (80067c0 <_svfiprintf_r+0x1f0>)
 800672a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800672e:	f7ff f979 	bl	8005a24 <memchr>
 8006732:	2800      	cmp	r0, #0
 8006734:	d038      	beq.n	80067a8 <_svfiprintf_r+0x1d8>
 8006736:	4b23      	ldr	r3, [pc, #140]	; (80067c4 <_svfiprintf_r+0x1f4>)
 8006738:	bb1b      	cbnz	r3, 8006782 <_svfiprintf_r+0x1b2>
 800673a:	9b03      	ldr	r3, [sp, #12]
 800673c:	3307      	adds	r3, #7
 800673e:	f023 0307 	bic.w	r3, r3, #7
 8006742:	3308      	adds	r3, #8
 8006744:	9303      	str	r3, [sp, #12]
 8006746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006748:	4433      	add	r3, r6
 800674a:	9309      	str	r3, [sp, #36]	; 0x24
 800674c:	e767      	b.n	800661e <_svfiprintf_r+0x4e>
 800674e:	460c      	mov	r4, r1
 8006750:	2001      	movs	r0, #1
 8006752:	fb0c 3202 	mla	r2, ip, r2, r3
 8006756:	e7a5      	b.n	80066a4 <_svfiprintf_r+0xd4>
 8006758:	2300      	movs	r3, #0
 800675a:	f04f 0c0a 	mov.w	ip, #10
 800675e:	4619      	mov	r1, r3
 8006760:	3401      	adds	r4, #1
 8006762:	9305      	str	r3, [sp, #20]
 8006764:	4620      	mov	r0, r4
 8006766:	f810 2b01 	ldrb.w	r2, [r0], #1
 800676a:	3a30      	subs	r2, #48	; 0x30
 800676c:	2a09      	cmp	r2, #9
 800676e:	d903      	bls.n	8006778 <_svfiprintf_r+0x1a8>
 8006770:	2b00      	cmp	r3, #0
 8006772:	d0c5      	beq.n	8006700 <_svfiprintf_r+0x130>
 8006774:	9105      	str	r1, [sp, #20]
 8006776:	e7c3      	b.n	8006700 <_svfiprintf_r+0x130>
 8006778:	4604      	mov	r4, r0
 800677a:	2301      	movs	r3, #1
 800677c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006780:	e7f0      	b.n	8006764 <_svfiprintf_r+0x194>
 8006782:	ab03      	add	r3, sp, #12
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	462a      	mov	r2, r5
 8006788:	4638      	mov	r0, r7
 800678a:	4b0f      	ldr	r3, [pc, #60]	; (80067c8 <_svfiprintf_r+0x1f8>)
 800678c:	a904      	add	r1, sp, #16
 800678e:	f7fc fa7f 	bl	8002c90 <_printf_float>
 8006792:	1c42      	adds	r2, r0, #1
 8006794:	4606      	mov	r6, r0
 8006796:	d1d6      	bne.n	8006746 <_svfiprintf_r+0x176>
 8006798:	89ab      	ldrh	r3, [r5, #12]
 800679a:	065b      	lsls	r3, r3, #25
 800679c:	f53f af2c 	bmi.w	80065f8 <_svfiprintf_r+0x28>
 80067a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067a2:	b01d      	add	sp, #116	; 0x74
 80067a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a8:	ab03      	add	r3, sp, #12
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	462a      	mov	r2, r5
 80067ae:	4638      	mov	r0, r7
 80067b0:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <_svfiprintf_r+0x1f8>)
 80067b2:	a904      	add	r1, sp, #16
 80067b4:	f7fc fd08 	bl	80031c8 <_printf_i>
 80067b8:	e7eb      	b.n	8006792 <_svfiprintf_r+0x1c2>
 80067ba:	bf00      	nop
 80067bc:	080077f4 	.word	0x080077f4
 80067c0:	080077fe 	.word	0x080077fe
 80067c4:	08002c91 	.word	0x08002c91
 80067c8:	08006519 	.word	0x08006519
 80067cc:	080077fa 	.word	0x080077fa

080067d0 <nan>:
 80067d0:	2000      	movs	r0, #0
 80067d2:	4901      	ldr	r1, [pc, #4]	; (80067d8 <nan+0x8>)
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	7ff80000 	.word	0x7ff80000

080067dc <_sbrk_r>:
 80067dc:	b538      	push	{r3, r4, r5, lr}
 80067de:	2300      	movs	r3, #0
 80067e0:	4d05      	ldr	r5, [pc, #20]	; (80067f8 <_sbrk_r+0x1c>)
 80067e2:	4604      	mov	r4, r0
 80067e4:	4608      	mov	r0, r1
 80067e6:	602b      	str	r3, [r5, #0]
 80067e8:	f7fa fd4c 	bl	8001284 <_sbrk>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d102      	bne.n	80067f6 <_sbrk_r+0x1a>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	b103      	cbz	r3, 80067f6 <_sbrk_r+0x1a>
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	200003dc 	.word	0x200003dc

080067fc <strncmp>:
 80067fc:	b510      	push	{r4, lr}
 80067fe:	b16a      	cbz	r2, 800681c <strncmp+0x20>
 8006800:	3901      	subs	r1, #1
 8006802:	1884      	adds	r4, r0, r2
 8006804:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006808:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800680c:	4293      	cmp	r3, r2
 800680e:	d103      	bne.n	8006818 <strncmp+0x1c>
 8006810:	42a0      	cmp	r0, r4
 8006812:	d001      	beq.n	8006818 <strncmp+0x1c>
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1f5      	bne.n	8006804 <strncmp+0x8>
 8006818:	1a98      	subs	r0, r3, r2
 800681a:	bd10      	pop	{r4, pc}
 800681c:	4610      	mov	r0, r2
 800681e:	e7fc      	b.n	800681a <strncmp+0x1e>

08006820 <__ascii_wctomb>:
 8006820:	4603      	mov	r3, r0
 8006822:	4608      	mov	r0, r1
 8006824:	b141      	cbz	r1, 8006838 <__ascii_wctomb+0x18>
 8006826:	2aff      	cmp	r2, #255	; 0xff
 8006828:	d904      	bls.n	8006834 <__ascii_wctomb+0x14>
 800682a:	228a      	movs	r2, #138	; 0x8a
 800682c:	f04f 30ff 	mov.w	r0, #4294967295
 8006830:	601a      	str	r2, [r3, #0]
 8006832:	4770      	bx	lr
 8006834:	2001      	movs	r0, #1
 8006836:	700a      	strb	r2, [r1, #0]
 8006838:	4770      	bx	lr
	...

0800683c <__assert_func>:
 800683c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800683e:	4614      	mov	r4, r2
 8006840:	461a      	mov	r2, r3
 8006842:	4b09      	ldr	r3, [pc, #36]	; (8006868 <__assert_func+0x2c>)
 8006844:	4605      	mov	r5, r0
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68d8      	ldr	r0, [r3, #12]
 800684a:	b14c      	cbz	r4, 8006860 <__assert_func+0x24>
 800684c:	4b07      	ldr	r3, [pc, #28]	; (800686c <__assert_func+0x30>)
 800684e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006852:	9100      	str	r1, [sp, #0]
 8006854:	462b      	mov	r3, r5
 8006856:	4906      	ldr	r1, [pc, #24]	; (8006870 <__assert_func+0x34>)
 8006858:	f000 f80e 	bl	8006878 <fiprintf>
 800685c:	f000 fa82 	bl	8006d64 <abort>
 8006860:	4b04      	ldr	r3, [pc, #16]	; (8006874 <__assert_func+0x38>)
 8006862:	461c      	mov	r4, r3
 8006864:	e7f3      	b.n	800684e <__assert_func+0x12>
 8006866:	bf00      	nop
 8006868:	2000000c 	.word	0x2000000c
 800686c:	08007805 	.word	0x08007805
 8006870:	08007812 	.word	0x08007812
 8006874:	08007840 	.word	0x08007840

08006878 <fiprintf>:
 8006878:	b40e      	push	{r1, r2, r3}
 800687a:	b503      	push	{r0, r1, lr}
 800687c:	4601      	mov	r1, r0
 800687e:	ab03      	add	r3, sp, #12
 8006880:	4805      	ldr	r0, [pc, #20]	; (8006898 <fiprintf+0x20>)
 8006882:	f853 2b04 	ldr.w	r2, [r3], #4
 8006886:	6800      	ldr	r0, [r0, #0]
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	f000 f87b 	bl	8006984 <_vfiprintf_r>
 800688e:	b002      	add	sp, #8
 8006890:	f85d eb04 	ldr.w	lr, [sp], #4
 8006894:	b003      	add	sp, #12
 8006896:	4770      	bx	lr
 8006898:	2000000c 	.word	0x2000000c

0800689c <memmove>:
 800689c:	4288      	cmp	r0, r1
 800689e:	b510      	push	{r4, lr}
 80068a0:	eb01 0402 	add.w	r4, r1, r2
 80068a4:	d902      	bls.n	80068ac <memmove+0x10>
 80068a6:	4284      	cmp	r4, r0
 80068a8:	4623      	mov	r3, r4
 80068aa:	d807      	bhi.n	80068bc <memmove+0x20>
 80068ac:	1e43      	subs	r3, r0, #1
 80068ae:	42a1      	cmp	r1, r4
 80068b0:	d008      	beq.n	80068c4 <memmove+0x28>
 80068b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068ba:	e7f8      	b.n	80068ae <memmove+0x12>
 80068bc:	4601      	mov	r1, r0
 80068be:	4402      	add	r2, r0
 80068c0:	428a      	cmp	r2, r1
 80068c2:	d100      	bne.n	80068c6 <memmove+0x2a>
 80068c4:	bd10      	pop	{r4, pc}
 80068c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068ce:	e7f7      	b.n	80068c0 <memmove+0x24>

080068d0 <__malloc_lock>:
 80068d0:	4801      	ldr	r0, [pc, #4]	; (80068d8 <__malloc_lock+0x8>)
 80068d2:	f000 bc07 	b.w	80070e4 <__retarget_lock_acquire_recursive>
 80068d6:	bf00      	nop
 80068d8:	200003e4 	.word	0x200003e4

080068dc <__malloc_unlock>:
 80068dc:	4801      	ldr	r0, [pc, #4]	; (80068e4 <__malloc_unlock+0x8>)
 80068de:	f000 bc02 	b.w	80070e6 <__retarget_lock_release_recursive>
 80068e2:	bf00      	nop
 80068e4:	200003e4 	.word	0x200003e4

080068e8 <_realloc_r>:
 80068e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ea:	4607      	mov	r7, r0
 80068ec:	4614      	mov	r4, r2
 80068ee:	460e      	mov	r6, r1
 80068f0:	b921      	cbnz	r1, 80068fc <_realloc_r+0x14>
 80068f2:	4611      	mov	r1, r2
 80068f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80068f8:	f7ff bdb4 	b.w	8006464 <_malloc_r>
 80068fc:	b922      	cbnz	r2, 8006908 <_realloc_r+0x20>
 80068fe:	f7ff fd65 	bl	80063cc <_free_r>
 8006902:	4625      	mov	r5, r4
 8006904:	4628      	mov	r0, r5
 8006906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006908:	f000 fc52 	bl	80071b0 <_malloc_usable_size_r>
 800690c:	42a0      	cmp	r0, r4
 800690e:	d20f      	bcs.n	8006930 <_realloc_r+0x48>
 8006910:	4621      	mov	r1, r4
 8006912:	4638      	mov	r0, r7
 8006914:	f7ff fda6 	bl	8006464 <_malloc_r>
 8006918:	4605      	mov	r5, r0
 800691a:	2800      	cmp	r0, #0
 800691c:	d0f2      	beq.n	8006904 <_realloc_r+0x1c>
 800691e:	4631      	mov	r1, r6
 8006920:	4622      	mov	r2, r4
 8006922:	f7fc f901 	bl	8002b28 <memcpy>
 8006926:	4631      	mov	r1, r6
 8006928:	4638      	mov	r0, r7
 800692a:	f7ff fd4f 	bl	80063cc <_free_r>
 800692e:	e7e9      	b.n	8006904 <_realloc_r+0x1c>
 8006930:	4635      	mov	r5, r6
 8006932:	e7e7      	b.n	8006904 <_realloc_r+0x1c>

08006934 <__sfputc_r>:
 8006934:	6893      	ldr	r3, [r2, #8]
 8006936:	b410      	push	{r4}
 8006938:	3b01      	subs	r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	6093      	str	r3, [r2, #8]
 800693e:	da07      	bge.n	8006950 <__sfputc_r+0x1c>
 8006940:	6994      	ldr	r4, [r2, #24]
 8006942:	42a3      	cmp	r3, r4
 8006944:	db01      	blt.n	800694a <__sfputc_r+0x16>
 8006946:	290a      	cmp	r1, #10
 8006948:	d102      	bne.n	8006950 <__sfputc_r+0x1c>
 800694a:	bc10      	pop	{r4}
 800694c:	f000 b94a 	b.w	8006be4 <__swbuf_r>
 8006950:	6813      	ldr	r3, [r2, #0]
 8006952:	1c58      	adds	r0, r3, #1
 8006954:	6010      	str	r0, [r2, #0]
 8006956:	7019      	strb	r1, [r3, #0]
 8006958:	4608      	mov	r0, r1
 800695a:	bc10      	pop	{r4}
 800695c:	4770      	bx	lr

0800695e <__sfputs_r>:
 800695e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006960:	4606      	mov	r6, r0
 8006962:	460f      	mov	r7, r1
 8006964:	4614      	mov	r4, r2
 8006966:	18d5      	adds	r5, r2, r3
 8006968:	42ac      	cmp	r4, r5
 800696a:	d101      	bne.n	8006970 <__sfputs_r+0x12>
 800696c:	2000      	movs	r0, #0
 800696e:	e007      	b.n	8006980 <__sfputs_r+0x22>
 8006970:	463a      	mov	r2, r7
 8006972:	4630      	mov	r0, r6
 8006974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006978:	f7ff ffdc 	bl	8006934 <__sfputc_r>
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	d1f3      	bne.n	8006968 <__sfputs_r+0xa>
 8006980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006984 <_vfiprintf_r>:
 8006984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006988:	460d      	mov	r5, r1
 800698a:	4614      	mov	r4, r2
 800698c:	4698      	mov	r8, r3
 800698e:	4606      	mov	r6, r0
 8006990:	b09d      	sub	sp, #116	; 0x74
 8006992:	b118      	cbz	r0, 800699c <_vfiprintf_r+0x18>
 8006994:	6983      	ldr	r3, [r0, #24]
 8006996:	b90b      	cbnz	r3, 800699c <_vfiprintf_r+0x18>
 8006998:	f000 fb06 	bl	8006fa8 <__sinit>
 800699c:	4b89      	ldr	r3, [pc, #548]	; (8006bc4 <_vfiprintf_r+0x240>)
 800699e:	429d      	cmp	r5, r3
 80069a0:	d11b      	bne.n	80069da <_vfiprintf_r+0x56>
 80069a2:	6875      	ldr	r5, [r6, #4]
 80069a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069a6:	07d9      	lsls	r1, r3, #31
 80069a8:	d405      	bmi.n	80069b6 <_vfiprintf_r+0x32>
 80069aa:	89ab      	ldrh	r3, [r5, #12]
 80069ac:	059a      	lsls	r2, r3, #22
 80069ae:	d402      	bmi.n	80069b6 <_vfiprintf_r+0x32>
 80069b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069b2:	f000 fb97 	bl	80070e4 <__retarget_lock_acquire_recursive>
 80069b6:	89ab      	ldrh	r3, [r5, #12]
 80069b8:	071b      	lsls	r3, r3, #28
 80069ba:	d501      	bpl.n	80069c0 <_vfiprintf_r+0x3c>
 80069bc:	692b      	ldr	r3, [r5, #16]
 80069be:	b9eb      	cbnz	r3, 80069fc <_vfiprintf_r+0x78>
 80069c0:	4629      	mov	r1, r5
 80069c2:	4630      	mov	r0, r6
 80069c4:	f000 f960 	bl	8006c88 <__swsetup_r>
 80069c8:	b1c0      	cbz	r0, 80069fc <_vfiprintf_r+0x78>
 80069ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069cc:	07dc      	lsls	r4, r3, #31
 80069ce:	d50e      	bpl.n	80069ee <_vfiprintf_r+0x6a>
 80069d0:	f04f 30ff 	mov.w	r0, #4294967295
 80069d4:	b01d      	add	sp, #116	; 0x74
 80069d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069da:	4b7b      	ldr	r3, [pc, #492]	; (8006bc8 <_vfiprintf_r+0x244>)
 80069dc:	429d      	cmp	r5, r3
 80069de:	d101      	bne.n	80069e4 <_vfiprintf_r+0x60>
 80069e0:	68b5      	ldr	r5, [r6, #8]
 80069e2:	e7df      	b.n	80069a4 <_vfiprintf_r+0x20>
 80069e4:	4b79      	ldr	r3, [pc, #484]	; (8006bcc <_vfiprintf_r+0x248>)
 80069e6:	429d      	cmp	r5, r3
 80069e8:	bf08      	it	eq
 80069ea:	68f5      	ldreq	r5, [r6, #12]
 80069ec:	e7da      	b.n	80069a4 <_vfiprintf_r+0x20>
 80069ee:	89ab      	ldrh	r3, [r5, #12]
 80069f0:	0598      	lsls	r0, r3, #22
 80069f2:	d4ed      	bmi.n	80069d0 <_vfiprintf_r+0x4c>
 80069f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069f6:	f000 fb76 	bl	80070e6 <__retarget_lock_release_recursive>
 80069fa:	e7e9      	b.n	80069d0 <_vfiprintf_r+0x4c>
 80069fc:	2300      	movs	r3, #0
 80069fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006a00:	2320      	movs	r3, #32
 8006a02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a06:	2330      	movs	r3, #48	; 0x30
 8006a08:	f04f 0901 	mov.w	r9, #1
 8006a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a10:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006bd0 <_vfiprintf_r+0x24c>
 8006a14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a18:	4623      	mov	r3, r4
 8006a1a:	469a      	mov	sl, r3
 8006a1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a20:	b10a      	cbz	r2, 8006a26 <_vfiprintf_r+0xa2>
 8006a22:	2a25      	cmp	r2, #37	; 0x25
 8006a24:	d1f9      	bne.n	8006a1a <_vfiprintf_r+0x96>
 8006a26:	ebba 0b04 	subs.w	fp, sl, r4
 8006a2a:	d00b      	beq.n	8006a44 <_vfiprintf_r+0xc0>
 8006a2c:	465b      	mov	r3, fp
 8006a2e:	4622      	mov	r2, r4
 8006a30:	4629      	mov	r1, r5
 8006a32:	4630      	mov	r0, r6
 8006a34:	f7ff ff93 	bl	800695e <__sfputs_r>
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f000 80aa 	beq.w	8006b92 <_vfiprintf_r+0x20e>
 8006a3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a40:	445a      	add	r2, fp
 8006a42:	9209      	str	r2, [sp, #36]	; 0x24
 8006a44:	f89a 3000 	ldrb.w	r3, [sl]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 80a2 	beq.w	8006b92 <_vfiprintf_r+0x20e>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f04f 32ff 	mov.w	r2, #4294967295
 8006a54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a58:	f10a 0a01 	add.w	sl, sl, #1
 8006a5c:	9304      	str	r3, [sp, #16]
 8006a5e:	9307      	str	r3, [sp, #28]
 8006a60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a64:	931a      	str	r3, [sp, #104]	; 0x68
 8006a66:	4654      	mov	r4, sl
 8006a68:	2205      	movs	r2, #5
 8006a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a6e:	4858      	ldr	r0, [pc, #352]	; (8006bd0 <_vfiprintf_r+0x24c>)
 8006a70:	f7fe ffd8 	bl	8005a24 <memchr>
 8006a74:	9a04      	ldr	r2, [sp, #16]
 8006a76:	b9d8      	cbnz	r0, 8006ab0 <_vfiprintf_r+0x12c>
 8006a78:	06d1      	lsls	r1, r2, #27
 8006a7a:	bf44      	itt	mi
 8006a7c:	2320      	movmi	r3, #32
 8006a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a82:	0713      	lsls	r3, r2, #28
 8006a84:	bf44      	itt	mi
 8006a86:	232b      	movmi	r3, #43	; 0x2b
 8006a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a90:	2b2a      	cmp	r3, #42	; 0x2a
 8006a92:	d015      	beq.n	8006ac0 <_vfiprintf_r+0x13c>
 8006a94:	4654      	mov	r4, sl
 8006a96:	2000      	movs	r0, #0
 8006a98:	f04f 0c0a 	mov.w	ip, #10
 8006a9c:	9a07      	ldr	r2, [sp, #28]
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aa4:	3b30      	subs	r3, #48	; 0x30
 8006aa6:	2b09      	cmp	r3, #9
 8006aa8:	d94e      	bls.n	8006b48 <_vfiprintf_r+0x1c4>
 8006aaa:	b1b0      	cbz	r0, 8006ada <_vfiprintf_r+0x156>
 8006aac:	9207      	str	r2, [sp, #28]
 8006aae:	e014      	b.n	8006ada <_vfiprintf_r+0x156>
 8006ab0:	eba0 0308 	sub.w	r3, r0, r8
 8006ab4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	46a2      	mov	sl, r4
 8006abc:	9304      	str	r3, [sp, #16]
 8006abe:	e7d2      	b.n	8006a66 <_vfiprintf_r+0xe2>
 8006ac0:	9b03      	ldr	r3, [sp, #12]
 8006ac2:	1d19      	adds	r1, r3, #4
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	9103      	str	r1, [sp, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	bfbb      	ittet	lt
 8006acc:	425b      	neglt	r3, r3
 8006ace:	f042 0202 	orrlt.w	r2, r2, #2
 8006ad2:	9307      	strge	r3, [sp, #28]
 8006ad4:	9307      	strlt	r3, [sp, #28]
 8006ad6:	bfb8      	it	lt
 8006ad8:	9204      	strlt	r2, [sp, #16]
 8006ada:	7823      	ldrb	r3, [r4, #0]
 8006adc:	2b2e      	cmp	r3, #46	; 0x2e
 8006ade:	d10c      	bne.n	8006afa <_vfiprintf_r+0x176>
 8006ae0:	7863      	ldrb	r3, [r4, #1]
 8006ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ae4:	d135      	bne.n	8006b52 <_vfiprintf_r+0x1ce>
 8006ae6:	9b03      	ldr	r3, [sp, #12]
 8006ae8:	3402      	adds	r4, #2
 8006aea:	1d1a      	adds	r2, r3, #4
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	9203      	str	r2, [sp, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	bfb8      	it	lt
 8006af4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006af8:	9305      	str	r3, [sp, #20]
 8006afa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006be0 <_vfiprintf_r+0x25c>
 8006afe:	2203      	movs	r2, #3
 8006b00:	4650      	mov	r0, sl
 8006b02:	7821      	ldrb	r1, [r4, #0]
 8006b04:	f7fe ff8e 	bl	8005a24 <memchr>
 8006b08:	b140      	cbz	r0, 8006b1c <_vfiprintf_r+0x198>
 8006b0a:	2340      	movs	r3, #64	; 0x40
 8006b0c:	eba0 000a 	sub.w	r0, r0, sl
 8006b10:	fa03 f000 	lsl.w	r0, r3, r0
 8006b14:	9b04      	ldr	r3, [sp, #16]
 8006b16:	3401      	adds	r4, #1
 8006b18:	4303      	orrs	r3, r0
 8006b1a:	9304      	str	r3, [sp, #16]
 8006b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b20:	2206      	movs	r2, #6
 8006b22:	482c      	ldr	r0, [pc, #176]	; (8006bd4 <_vfiprintf_r+0x250>)
 8006b24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b28:	f7fe ff7c 	bl	8005a24 <memchr>
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d03f      	beq.n	8006bb0 <_vfiprintf_r+0x22c>
 8006b30:	4b29      	ldr	r3, [pc, #164]	; (8006bd8 <_vfiprintf_r+0x254>)
 8006b32:	bb1b      	cbnz	r3, 8006b7c <_vfiprintf_r+0x1f8>
 8006b34:	9b03      	ldr	r3, [sp, #12]
 8006b36:	3307      	adds	r3, #7
 8006b38:	f023 0307 	bic.w	r3, r3, #7
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	9303      	str	r3, [sp, #12]
 8006b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b42:	443b      	add	r3, r7
 8006b44:	9309      	str	r3, [sp, #36]	; 0x24
 8006b46:	e767      	b.n	8006a18 <_vfiprintf_r+0x94>
 8006b48:	460c      	mov	r4, r1
 8006b4a:	2001      	movs	r0, #1
 8006b4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b50:	e7a5      	b.n	8006a9e <_vfiprintf_r+0x11a>
 8006b52:	2300      	movs	r3, #0
 8006b54:	f04f 0c0a 	mov.w	ip, #10
 8006b58:	4619      	mov	r1, r3
 8006b5a:	3401      	adds	r4, #1
 8006b5c:	9305      	str	r3, [sp, #20]
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b64:	3a30      	subs	r2, #48	; 0x30
 8006b66:	2a09      	cmp	r2, #9
 8006b68:	d903      	bls.n	8006b72 <_vfiprintf_r+0x1ee>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0c5      	beq.n	8006afa <_vfiprintf_r+0x176>
 8006b6e:	9105      	str	r1, [sp, #20]
 8006b70:	e7c3      	b.n	8006afa <_vfiprintf_r+0x176>
 8006b72:	4604      	mov	r4, r0
 8006b74:	2301      	movs	r3, #1
 8006b76:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b7a:	e7f0      	b.n	8006b5e <_vfiprintf_r+0x1da>
 8006b7c:	ab03      	add	r3, sp, #12
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	462a      	mov	r2, r5
 8006b82:	4630      	mov	r0, r6
 8006b84:	4b15      	ldr	r3, [pc, #84]	; (8006bdc <_vfiprintf_r+0x258>)
 8006b86:	a904      	add	r1, sp, #16
 8006b88:	f7fc f882 	bl	8002c90 <_printf_float>
 8006b8c:	4607      	mov	r7, r0
 8006b8e:	1c78      	adds	r0, r7, #1
 8006b90:	d1d6      	bne.n	8006b40 <_vfiprintf_r+0x1bc>
 8006b92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b94:	07d9      	lsls	r1, r3, #31
 8006b96:	d405      	bmi.n	8006ba4 <_vfiprintf_r+0x220>
 8006b98:	89ab      	ldrh	r3, [r5, #12]
 8006b9a:	059a      	lsls	r2, r3, #22
 8006b9c:	d402      	bmi.n	8006ba4 <_vfiprintf_r+0x220>
 8006b9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ba0:	f000 faa1 	bl	80070e6 <__retarget_lock_release_recursive>
 8006ba4:	89ab      	ldrh	r3, [r5, #12]
 8006ba6:	065b      	lsls	r3, r3, #25
 8006ba8:	f53f af12 	bmi.w	80069d0 <_vfiprintf_r+0x4c>
 8006bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bae:	e711      	b.n	80069d4 <_vfiprintf_r+0x50>
 8006bb0:	ab03      	add	r3, sp, #12
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	462a      	mov	r2, r5
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	4b08      	ldr	r3, [pc, #32]	; (8006bdc <_vfiprintf_r+0x258>)
 8006bba:	a904      	add	r1, sp, #16
 8006bbc:	f7fc fb04 	bl	80031c8 <_printf_i>
 8006bc0:	e7e4      	b.n	8006b8c <_vfiprintf_r+0x208>
 8006bc2:	bf00      	nop
 8006bc4:	08007864 	.word	0x08007864
 8006bc8:	08007884 	.word	0x08007884
 8006bcc:	08007844 	.word	0x08007844
 8006bd0:	080077f4 	.word	0x080077f4
 8006bd4:	080077fe 	.word	0x080077fe
 8006bd8:	08002c91 	.word	0x08002c91
 8006bdc:	0800695f 	.word	0x0800695f
 8006be0:	080077fa 	.word	0x080077fa

08006be4 <__swbuf_r>:
 8006be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be6:	460e      	mov	r6, r1
 8006be8:	4614      	mov	r4, r2
 8006bea:	4605      	mov	r5, r0
 8006bec:	b118      	cbz	r0, 8006bf6 <__swbuf_r+0x12>
 8006bee:	6983      	ldr	r3, [r0, #24]
 8006bf0:	b90b      	cbnz	r3, 8006bf6 <__swbuf_r+0x12>
 8006bf2:	f000 f9d9 	bl	8006fa8 <__sinit>
 8006bf6:	4b21      	ldr	r3, [pc, #132]	; (8006c7c <__swbuf_r+0x98>)
 8006bf8:	429c      	cmp	r4, r3
 8006bfa:	d12b      	bne.n	8006c54 <__swbuf_r+0x70>
 8006bfc:	686c      	ldr	r4, [r5, #4]
 8006bfe:	69a3      	ldr	r3, [r4, #24]
 8006c00:	60a3      	str	r3, [r4, #8]
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	071a      	lsls	r2, r3, #28
 8006c06:	d52f      	bpl.n	8006c68 <__swbuf_r+0x84>
 8006c08:	6923      	ldr	r3, [r4, #16]
 8006c0a:	b36b      	cbz	r3, 8006c68 <__swbuf_r+0x84>
 8006c0c:	6923      	ldr	r3, [r4, #16]
 8006c0e:	6820      	ldr	r0, [r4, #0]
 8006c10:	b2f6      	uxtb	r6, r6
 8006c12:	1ac0      	subs	r0, r0, r3
 8006c14:	6963      	ldr	r3, [r4, #20]
 8006c16:	4637      	mov	r7, r6
 8006c18:	4283      	cmp	r3, r0
 8006c1a:	dc04      	bgt.n	8006c26 <__swbuf_r+0x42>
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f000 f92e 	bl	8006e80 <_fflush_r>
 8006c24:	bb30      	cbnz	r0, 8006c74 <__swbuf_r+0x90>
 8006c26:	68a3      	ldr	r3, [r4, #8]
 8006c28:	3001      	adds	r0, #1
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	60a3      	str	r3, [r4, #8]
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	6022      	str	r2, [r4, #0]
 8006c34:	701e      	strb	r6, [r3, #0]
 8006c36:	6963      	ldr	r3, [r4, #20]
 8006c38:	4283      	cmp	r3, r0
 8006c3a:	d004      	beq.n	8006c46 <__swbuf_r+0x62>
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	07db      	lsls	r3, r3, #31
 8006c40:	d506      	bpl.n	8006c50 <__swbuf_r+0x6c>
 8006c42:	2e0a      	cmp	r6, #10
 8006c44:	d104      	bne.n	8006c50 <__swbuf_r+0x6c>
 8006c46:	4621      	mov	r1, r4
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f000 f919 	bl	8006e80 <_fflush_r>
 8006c4e:	b988      	cbnz	r0, 8006c74 <__swbuf_r+0x90>
 8006c50:	4638      	mov	r0, r7
 8006c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c54:	4b0a      	ldr	r3, [pc, #40]	; (8006c80 <__swbuf_r+0x9c>)
 8006c56:	429c      	cmp	r4, r3
 8006c58:	d101      	bne.n	8006c5e <__swbuf_r+0x7a>
 8006c5a:	68ac      	ldr	r4, [r5, #8]
 8006c5c:	e7cf      	b.n	8006bfe <__swbuf_r+0x1a>
 8006c5e:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <__swbuf_r+0xa0>)
 8006c60:	429c      	cmp	r4, r3
 8006c62:	bf08      	it	eq
 8006c64:	68ec      	ldreq	r4, [r5, #12]
 8006c66:	e7ca      	b.n	8006bfe <__swbuf_r+0x1a>
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	f000 f80c 	bl	8006c88 <__swsetup_r>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d0cb      	beq.n	8006c0c <__swbuf_r+0x28>
 8006c74:	f04f 37ff 	mov.w	r7, #4294967295
 8006c78:	e7ea      	b.n	8006c50 <__swbuf_r+0x6c>
 8006c7a:	bf00      	nop
 8006c7c:	08007864 	.word	0x08007864
 8006c80:	08007884 	.word	0x08007884
 8006c84:	08007844 	.word	0x08007844

08006c88 <__swsetup_r>:
 8006c88:	4b32      	ldr	r3, [pc, #200]	; (8006d54 <__swsetup_r+0xcc>)
 8006c8a:	b570      	push	{r4, r5, r6, lr}
 8006c8c:	681d      	ldr	r5, [r3, #0]
 8006c8e:	4606      	mov	r6, r0
 8006c90:	460c      	mov	r4, r1
 8006c92:	b125      	cbz	r5, 8006c9e <__swsetup_r+0x16>
 8006c94:	69ab      	ldr	r3, [r5, #24]
 8006c96:	b913      	cbnz	r3, 8006c9e <__swsetup_r+0x16>
 8006c98:	4628      	mov	r0, r5
 8006c9a:	f000 f985 	bl	8006fa8 <__sinit>
 8006c9e:	4b2e      	ldr	r3, [pc, #184]	; (8006d58 <__swsetup_r+0xd0>)
 8006ca0:	429c      	cmp	r4, r3
 8006ca2:	d10f      	bne.n	8006cc4 <__swsetup_r+0x3c>
 8006ca4:	686c      	ldr	r4, [r5, #4]
 8006ca6:	89a3      	ldrh	r3, [r4, #12]
 8006ca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cac:	0719      	lsls	r1, r3, #28
 8006cae:	d42c      	bmi.n	8006d0a <__swsetup_r+0x82>
 8006cb0:	06dd      	lsls	r5, r3, #27
 8006cb2:	d411      	bmi.n	8006cd8 <__swsetup_r+0x50>
 8006cb4:	2309      	movs	r3, #9
 8006cb6:	6033      	str	r3, [r6, #0]
 8006cb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc0:	81a3      	strh	r3, [r4, #12]
 8006cc2:	e03e      	b.n	8006d42 <__swsetup_r+0xba>
 8006cc4:	4b25      	ldr	r3, [pc, #148]	; (8006d5c <__swsetup_r+0xd4>)
 8006cc6:	429c      	cmp	r4, r3
 8006cc8:	d101      	bne.n	8006cce <__swsetup_r+0x46>
 8006cca:	68ac      	ldr	r4, [r5, #8]
 8006ccc:	e7eb      	b.n	8006ca6 <__swsetup_r+0x1e>
 8006cce:	4b24      	ldr	r3, [pc, #144]	; (8006d60 <__swsetup_r+0xd8>)
 8006cd0:	429c      	cmp	r4, r3
 8006cd2:	bf08      	it	eq
 8006cd4:	68ec      	ldreq	r4, [r5, #12]
 8006cd6:	e7e6      	b.n	8006ca6 <__swsetup_r+0x1e>
 8006cd8:	0758      	lsls	r0, r3, #29
 8006cda:	d512      	bpl.n	8006d02 <__swsetup_r+0x7a>
 8006cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cde:	b141      	cbz	r1, 8006cf2 <__swsetup_r+0x6a>
 8006ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ce4:	4299      	cmp	r1, r3
 8006ce6:	d002      	beq.n	8006cee <__swsetup_r+0x66>
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f7ff fb6f 	bl	80063cc <_free_r>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	6363      	str	r3, [r4, #52]	; 0x34
 8006cf2:	89a3      	ldrh	r3, [r4, #12]
 8006cf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cf8:	81a3      	strh	r3, [r4, #12]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	6063      	str	r3, [r4, #4]
 8006cfe:	6923      	ldr	r3, [r4, #16]
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	f043 0308 	orr.w	r3, r3, #8
 8006d08:	81a3      	strh	r3, [r4, #12]
 8006d0a:	6923      	ldr	r3, [r4, #16]
 8006d0c:	b94b      	cbnz	r3, 8006d22 <__swsetup_r+0x9a>
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d18:	d003      	beq.n	8006d22 <__swsetup_r+0x9a>
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	f000 fa07 	bl	8007130 <__smakebuf_r>
 8006d22:	89a0      	ldrh	r0, [r4, #12]
 8006d24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d28:	f010 0301 	ands.w	r3, r0, #1
 8006d2c:	d00a      	beq.n	8006d44 <__swsetup_r+0xbc>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60a3      	str	r3, [r4, #8]
 8006d32:	6963      	ldr	r3, [r4, #20]
 8006d34:	425b      	negs	r3, r3
 8006d36:	61a3      	str	r3, [r4, #24]
 8006d38:	6923      	ldr	r3, [r4, #16]
 8006d3a:	b943      	cbnz	r3, 8006d4e <__swsetup_r+0xc6>
 8006d3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d40:	d1ba      	bne.n	8006cb8 <__swsetup_r+0x30>
 8006d42:	bd70      	pop	{r4, r5, r6, pc}
 8006d44:	0781      	lsls	r1, r0, #30
 8006d46:	bf58      	it	pl
 8006d48:	6963      	ldrpl	r3, [r4, #20]
 8006d4a:	60a3      	str	r3, [r4, #8]
 8006d4c:	e7f4      	b.n	8006d38 <__swsetup_r+0xb0>
 8006d4e:	2000      	movs	r0, #0
 8006d50:	e7f7      	b.n	8006d42 <__swsetup_r+0xba>
 8006d52:	bf00      	nop
 8006d54:	2000000c 	.word	0x2000000c
 8006d58:	08007864 	.word	0x08007864
 8006d5c:	08007884 	.word	0x08007884
 8006d60:	08007844 	.word	0x08007844

08006d64 <abort>:
 8006d64:	2006      	movs	r0, #6
 8006d66:	b508      	push	{r3, lr}
 8006d68:	f000 fa52 	bl	8007210 <raise>
 8006d6c:	2001      	movs	r0, #1
 8006d6e:	f7fa fa16 	bl	800119e <_exit>
	...

08006d74 <__sflush_r>:
 8006d74:	898a      	ldrh	r2, [r1, #12]
 8006d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	0710      	lsls	r0, r2, #28
 8006d7e:	460c      	mov	r4, r1
 8006d80:	d458      	bmi.n	8006e34 <__sflush_r+0xc0>
 8006d82:	684b      	ldr	r3, [r1, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	dc05      	bgt.n	8006d94 <__sflush_r+0x20>
 8006d88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	dc02      	bgt.n	8006d94 <__sflush_r+0x20>
 8006d8e:	2000      	movs	r0, #0
 8006d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d96:	2e00      	cmp	r6, #0
 8006d98:	d0f9      	beq.n	8006d8e <__sflush_r+0x1a>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006da0:	682f      	ldr	r7, [r5, #0]
 8006da2:	602b      	str	r3, [r5, #0]
 8006da4:	d032      	beq.n	8006e0c <__sflush_r+0x98>
 8006da6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	075a      	lsls	r2, r3, #29
 8006dac:	d505      	bpl.n	8006dba <__sflush_r+0x46>
 8006dae:	6863      	ldr	r3, [r4, #4]
 8006db0:	1ac0      	subs	r0, r0, r3
 8006db2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006db4:	b10b      	cbz	r3, 8006dba <__sflush_r+0x46>
 8006db6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006db8:	1ac0      	subs	r0, r0, r3
 8006dba:	2300      	movs	r3, #0
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	6a21      	ldr	r1, [r4, #32]
 8006dc4:	47b0      	blx	r6
 8006dc6:	1c43      	adds	r3, r0, #1
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	d106      	bne.n	8006dda <__sflush_r+0x66>
 8006dcc:	6829      	ldr	r1, [r5, #0]
 8006dce:	291d      	cmp	r1, #29
 8006dd0:	d82c      	bhi.n	8006e2c <__sflush_r+0xb8>
 8006dd2:	4a2a      	ldr	r2, [pc, #168]	; (8006e7c <__sflush_r+0x108>)
 8006dd4:	40ca      	lsrs	r2, r1
 8006dd6:	07d6      	lsls	r6, r2, #31
 8006dd8:	d528      	bpl.n	8006e2c <__sflush_r+0xb8>
 8006dda:	2200      	movs	r2, #0
 8006ddc:	6062      	str	r2, [r4, #4]
 8006dde:	6922      	ldr	r2, [r4, #16]
 8006de0:	04d9      	lsls	r1, r3, #19
 8006de2:	6022      	str	r2, [r4, #0]
 8006de4:	d504      	bpl.n	8006df0 <__sflush_r+0x7c>
 8006de6:	1c42      	adds	r2, r0, #1
 8006de8:	d101      	bne.n	8006dee <__sflush_r+0x7a>
 8006dea:	682b      	ldr	r3, [r5, #0]
 8006dec:	b903      	cbnz	r3, 8006df0 <__sflush_r+0x7c>
 8006dee:	6560      	str	r0, [r4, #84]	; 0x54
 8006df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006df2:	602f      	str	r7, [r5, #0]
 8006df4:	2900      	cmp	r1, #0
 8006df6:	d0ca      	beq.n	8006d8e <__sflush_r+0x1a>
 8006df8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dfc:	4299      	cmp	r1, r3
 8006dfe:	d002      	beq.n	8006e06 <__sflush_r+0x92>
 8006e00:	4628      	mov	r0, r5
 8006e02:	f7ff fae3 	bl	80063cc <_free_r>
 8006e06:	2000      	movs	r0, #0
 8006e08:	6360      	str	r0, [r4, #52]	; 0x34
 8006e0a:	e7c1      	b.n	8006d90 <__sflush_r+0x1c>
 8006e0c:	6a21      	ldr	r1, [r4, #32]
 8006e0e:	2301      	movs	r3, #1
 8006e10:	4628      	mov	r0, r5
 8006e12:	47b0      	blx	r6
 8006e14:	1c41      	adds	r1, r0, #1
 8006e16:	d1c7      	bne.n	8006da8 <__sflush_r+0x34>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d0c4      	beq.n	8006da8 <__sflush_r+0x34>
 8006e1e:	2b1d      	cmp	r3, #29
 8006e20:	d001      	beq.n	8006e26 <__sflush_r+0xb2>
 8006e22:	2b16      	cmp	r3, #22
 8006e24:	d101      	bne.n	8006e2a <__sflush_r+0xb6>
 8006e26:	602f      	str	r7, [r5, #0]
 8006e28:	e7b1      	b.n	8006d8e <__sflush_r+0x1a>
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e30:	81a3      	strh	r3, [r4, #12]
 8006e32:	e7ad      	b.n	8006d90 <__sflush_r+0x1c>
 8006e34:	690f      	ldr	r7, [r1, #16]
 8006e36:	2f00      	cmp	r7, #0
 8006e38:	d0a9      	beq.n	8006d8e <__sflush_r+0x1a>
 8006e3a:	0793      	lsls	r3, r2, #30
 8006e3c:	bf18      	it	ne
 8006e3e:	2300      	movne	r3, #0
 8006e40:	680e      	ldr	r6, [r1, #0]
 8006e42:	bf08      	it	eq
 8006e44:	694b      	ldreq	r3, [r1, #20]
 8006e46:	eba6 0807 	sub.w	r8, r6, r7
 8006e4a:	600f      	str	r7, [r1, #0]
 8006e4c:	608b      	str	r3, [r1, #8]
 8006e4e:	f1b8 0f00 	cmp.w	r8, #0
 8006e52:	dd9c      	ble.n	8006d8e <__sflush_r+0x1a>
 8006e54:	4643      	mov	r3, r8
 8006e56:	463a      	mov	r2, r7
 8006e58:	4628      	mov	r0, r5
 8006e5a:	6a21      	ldr	r1, [r4, #32]
 8006e5c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e5e:	47b0      	blx	r6
 8006e60:	2800      	cmp	r0, #0
 8006e62:	dc06      	bgt.n	8006e72 <__sflush_r+0xfe>
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e6e:	81a3      	strh	r3, [r4, #12]
 8006e70:	e78e      	b.n	8006d90 <__sflush_r+0x1c>
 8006e72:	4407      	add	r7, r0
 8006e74:	eba8 0800 	sub.w	r8, r8, r0
 8006e78:	e7e9      	b.n	8006e4e <__sflush_r+0xda>
 8006e7a:	bf00      	nop
 8006e7c:	20400001 	.word	0x20400001

08006e80 <_fflush_r>:
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	690b      	ldr	r3, [r1, #16]
 8006e84:	4605      	mov	r5, r0
 8006e86:	460c      	mov	r4, r1
 8006e88:	b913      	cbnz	r3, 8006e90 <_fflush_r+0x10>
 8006e8a:	2500      	movs	r5, #0
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}
 8006e90:	b118      	cbz	r0, 8006e9a <_fflush_r+0x1a>
 8006e92:	6983      	ldr	r3, [r0, #24]
 8006e94:	b90b      	cbnz	r3, 8006e9a <_fflush_r+0x1a>
 8006e96:	f000 f887 	bl	8006fa8 <__sinit>
 8006e9a:	4b14      	ldr	r3, [pc, #80]	; (8006eec <_fflush_r+0x6c>)
 8006e9c:	429c      	cmp	r4, r3
 8006e9e:	d11b      	bne.n	8006ed8 <_fflush_r+0x58>
 8006ea0:	686c      	ldr	r4, [r5, #4]
 8006ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0ef      	beq.n	8006e8a <_fflush_r+0xa>
 8006eaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006eac:	07d0      	lsls	r0, r2, #31
 8006eae:	d404      	bmi.n	8006eba <_fflush_r+0x3a>
 8006eb0:	0599      	lsls	r1, r3, #22
 8006eb2:	d402      	bmi.n	8006eba <_fflush_r+0x3a>
 8006eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eb6:	f000 f915 	bl	80070e4 <__retarget_lock_acquire_recursive>
 8006eba:	4628      	mov	r0, r5
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	f7ff ff59 	bl	8006d74 <__sflush_r>
 8006ec2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	07da      	lsls	r2, r3, #31
 8006ec8:	d4e0      	bmi.n	8006e8c <_fflush_r+0xc>
 8006eca:	89a3      	ldrh	r3, [r4, #12]
 8006ecc:	059b      	lsls	r3, r3, #22
 8006ece:	d4dd      	bmi.n	8006e8c <_fflush_r+0xc>
 8006ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ed2:	f000 f908 	bl	80070e6 <__retarget_lock_release_recursive>
 8006ed6:	e7d9      	b.n	8006e8c <_fflush_r+0xc>
 8006ed8:	4b05      	ldr	r3, [pc, #20]	; (8006ef0 <_fflush_r+0x70>)
 8006eda:	429c      	cmp	r4, r3
 8006edc:	d101      	bne.n	8006ee2 <_fflush_r+0x62>
 8006ede:	68ac      	ldr	r4, [r5, #8]
 8006ee0:	e7df      	b.n	8006ea2 <_fflush_r+0x22>
 8006ee2:	4b04      	ldr	r3, [pc, #16]	; (8006ef4 <_fflush_r+0x74>)
 8006ee4:	429c      	cmp	r4, r3
 8006ee6:	bf08      	it	eq
 8006ee8:	68ec      	ldreq	r4, [r5, #12]
 8006eea:	e7da      	b.n	8006ea2 <_fflush_r+0x22>
 8006eec:	08007864 	.word	0x08007864
 8006ef0:	08007884 	.word	0x08007884
 8006ef4:	08007844 	.word	0x08007844

08006ef8 <std>:
 8006ef8:	2300      	movs	r3, #0
 8006efa:	b510      	push	{r4, lr}
 8006efc:	4604      	mov	r4, r0
 8006efe:	e9c0 3300 	strd	r3, r3, [r0]
 8006f02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f06:	6083      	str	r3, [r0, #8]
 8006f08:	8181      	strh	r1, [r0, #12]
 8006f0a:	6643      	str	r3, [r0, #100]	; 0x64
 8006f0c:	81c2      	strh	r2, [r0, #14]
 8006f0e:	6183      	str	r3, [r0, #24]
 8006f10:	4619      	mov	r1, r3
 8006f12:	2208      	movs	r2, #8
 8006f14:	305c      	adds	r0, #92	; 0x5c
 8006f16:	f7fb fe15 	bl	8002b44 <memset>
 8006f1a:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <std+0x38>)
 8006f1c:	6224      	str	r4, [r4, #32]
 8006f1e:	6263      	str	r3, [r4, #36]	; 0x24
 8006f20:	4b04      	ldr	r3, [pc, #16]	; (8006f34 <std+0x3c>)
 8006f22:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f24:	4b04      	ldr	r3, [pc, #16]	; (8006f38 <std+0x40>)
 8006f26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f28:	4b04      	ldr	r3, [pc, #16]	; (8006f3c <std+0x44>)
 8006f2a:	6323      	str	r3, [r4, #48]	; 0x30
 8006f2c:	bd10      	pop	{r4, pc}
 8006f2e:	bf00      	nop
 8006f30:	08007249 	.word	0x08007249
 8006f34:	0800726b 	.word	0x0800726b
 8006f38:	080072a3 	.word	0x080072a3
 8006f3c:	080072c7 	.word	0x080072c7

08006f40 <_cleanup_r>:
 8006f40:	4901      	ldr	r1, [pc, #4]	; (8006f48 <_cleanup_r+0x8>)
 8006f42:	f000 b8af 	b.w	80070a4 <_fwalk_reent>
 8006f46:	bf00      	nop
 8006f48:	08006e81 	.word	0x08006e81

08006f4c <__sfmoreglue>:
 8006f4c:	b570      	push	{r4, r5, r6, lr}
 8006f4e:	2568      	movs	r5, #104	; 0x68
 8006f50:	1e4a      	subs	r2, r1, #1
 8006f52:	4355      	muls	r5, r2
 8006f54:	460e      	mov	r6, r1
 8006f56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f5a:	f7ff fa83 	bl	8006464 <_malloc_r>
 8006f5e:	4604      	mov	r4, r0
 8006f60:	b140      	cbz	r0, 8006f74 <__sfmoreglue+0x28>
 8006f62:	2100      	movs	r1, #0
 8006f64:	e9c0 1600 	strd	r1, r6, [r0]
 8006f68:	300c      	adds	r0, #12
 8006f6a:	60a0      	str	r0, [r4, #8]
 8006f6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f70:	f7fb fde8 	bl	8002b44 <memset>
 8006f74:	4620      	mov	r0, r4
 8006f76:	bd70      	pop	{r4, r5, r6, pc}

08006f78 <__sfp_lock_acquire>:
 8006f78:	4801      	ldr	r0, [pc, #4]	; (8006f80 <__sfp_lock_acquire+0x8>)
 8006f7a:	f000 b8b3 	b.w	80070e4 <__retarget_lock_acquire_recursive>
 8006f7e:	bf00      	nop
 8006f80:	200003e8 	.word	0x200003e8

08006f84 <__sfp_lock_release>:
 8006f84:	4801      	ldr	r0, [pc, #4]	; (8006f8c <__sfp_lock_release+0x8>)
 8006f86:	f000 b8ae 	b.w	80070e6 <__retarget_lock_release_recursive>
 8006f8a:	bf00      	nop
 8006f8c:	200003e8 	.word	0x200003e8

08006f90 <__sinit_lock_acquire>:
 8006f90:	4801      	ldr	r0, [pc, #4]	; (8006f98 <__sinit_lock_acquire+0x8>)
 8006f92:	f000 b8a7 	b.w	80070e4 <__retarget_lock_acquire_recursive>
 8006f96:	bf00      	nop
 8006f98:	200003e3 	.word	0x200003e3

08006f9c <__sinit_lock_release>:
 8006f9c:	4801      	ldr	r0, [pc, #4]	; (8006fa4 <__sinit_lock_release+0x8>)
 8006f9e:	f000 b8a2 	b.w	80070e6 <__retarget_lock_release_recursive>
 8006fa2:	bf00      	nop
 8006fa4:	200003e3 	.word	0x200003e3

08006fa8 <__sinit>:
 8006fa8:	b510      	push	{r4, lr}
 8006faa:	4604      	mov	r4, r0
 8006fac:	f7ff fff0 	bl	8006f90 <__sinit_lock_acquire>
 8006fb0:	69a3      	ldr	r3, [r4, #24]
 8006fb2:	b11b      	cbz	r3, 8006fbc <__sinit+0x14>
 8006fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fb8:	f7ff bff0 	b.w	8006f9c <__sinit_lock_release>
 8006fbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006fc0:	6523      	str	r3, [r4, #80]	; 0x50
 8006fc2:	4b13      	ldr	r3, [pc, #76]	; (8007010 <__sinit+0x68>)
 8006fc4:	4a13      	ldr	r2, [pc, #76]	; (8007014 <__sinit+0x6c>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006fca:	42a3      	cmp	r3, r4
 8006fcc:	bf08      	it	eq
 8006fce:	2301      	moveq	r3, #1
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	bf08      	it	eq
 8006fd4:	61a3      	streq	r3, [r4, #24]
 8006fd6:	f000 f81f 	bl	8007018 <__sfp>
 8006fda:	6060      	str	r0, [r4, #4]
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f000 f81b 	bl	8007018 <__sfp>
 8006fe2:	60a0      	str	r0, [r4, #8]
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f000 f817 	bl	8007018 <__sfp>
 8006fea:	2200      	movs	r2, #0
 8006fec:	2104      	movs	r1, #4
 8006fee:	60e0      	str	r0, [r4, #12]
 8006ff0:	6860      	ldr	r0, [r4, #4]
 8006ff2:	f7ff ff81 	bl	8006ef8 <std>
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	2109      	movs	r1, #9
 8006ffa:	68a0      	ldr	r0, [r4, #8]
 8006ffc:	f7ff ff7c 	bl	8006ef8 <std>
 8007000:	2202      	movs	r2, #2
 8007002:	2112      	movs	r1, #18
 8007004:	68e0      	ldr	r0, [r4, #12]
 8007006:	f7ff ff77 	bl	8006ef8 <std>
 800700a:	2301      	movs	r3, #1
 800700c:	61a3      	str	r3, [r4, #24]
 800700e:	e7d1      	b.n	8006fb4 <__sinit+0xc>
 8007010:	080073f0 	.word	0x080073f0
 8007014:	08006f41 	.word	0x08006f41

08007018 <__sfp>:
 8007018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701a:	4607      	mov	r7, r0
 800701c:	f7ff ffac 	bl	8006f78 <__sfp_lock_acquire>
 8007020:	4b1e      	ldr	r3, [pc, #120]	; (800709c <__sfp+0x84>)
 8007022:	681e      	ldr	r6, [r3, #0]
 8007024:	69b3      	ldr	r3, [r6, #24]
 8007026:	b913      	cbnz	r3, 800702e <__sfp+0x16>
 8007028:	4630      	mov	r0, r6
 800702a:	f7ff ffbd 	bl	8006fa8 <__sinit>
 800702e:	3648      	adds	r6, #72	; 0x48
 8007030:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007034:	3b01      	subs	r3, #1
 8007036:	d503      	bpl.n	8007040 <__sfp+0x28>
 8007038:	6833      	ldr	r3, [r6, #0]
 800703a:	b30b      	cbz	r3, 8007080 <__sfp+0x68>
 800703c:	6836      	ldr	r6, [r6, #0]
 800703e:	e7f7      	b.n	8007030 <__sfp+0x18>
 8007040:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007044:	b9d5      	cbnz	r5, 800707c <__sfp+0x64>
 8007046:	4b16      	ldr	r3, [pc, #88]	; (80070a0 <__sfp+0x88>)
 8007048:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800704c:	60e3      	str	r3, [r4, #12]
 800704e:	6665      	str	r5, [r4, #100]	; 0x64
 8007050:	f000 f847 	bl	80070e2 <__retarget_lock_init_recursive>
 8007054:	f7ff ff96 	bl	8006f84 <__sfp_lock_release>
 8007058:	2208      	movs	r2, #8
 800705a:	4629      	mov	r1, r5
 800705c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007060:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007064:	6025      	str	r5, [r4, #0]
 8007066:	61a5      	str	r5, [r4, #24]
 8007068:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800706c:	f7fb fd6a 	bl	8002b44 <memset>
 8007070:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007074:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007078:	4620      	mov	r0, r4
 800707a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800707c:	3468      	adds	r4, #104	; 0x68
 800707e:	e7d9      	b.n	8007034 <__sfp+0x1c>
 8007080:	2104      	movs	r1, #4
 8007082:	4638      	mov	r0, r7
 8007084:	f7ff ff62 	bl	8006f4c <__sfmoreglue>
 8007088:	4604      	mov	r4, r0
 800708a:	6030      	str	r0, [r6, #0]
 800708c:	2800      	cmp	r0, #0
 800708e:	d1d5      	bne.n	800703c <__sfp+0x24>
 8007090:	f7ff ff78 	bl	8006f84 <__sfp_lock_release>
 8007094:	230c      	movs	r3, #12
 8007096:	603b      	str	r3, [r7, #0]
 8007098:	e7ee      	b.n	8007078 <__sfp+0x60>
 800709a:	bf00      	nop
 800709c:	080073f0 	.word	0x080073f0
 80070a0:	ffff0001 	.word	0xffff0001

080070a4 <_fwalk_reent>:
 80070a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070a8:	4606      	mov	r6, r0
 80070aa:	4688      	mov	r8, r1
 80070ac:	2700      	movs	r7, #0
 80070ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070b6:	f1b9 0901 	subs.w	r9, r9, #1
 80070ba:	d505      	bpl.n	80070c8 <_fwalk_reent+0x24>
 80070bc:	6824      	ldr	r4, [r4, #0]
 80070be:	2c00      	cmp	r4, #0
 80070c0:	d1f7      	bne.n	80070b2 <_fwalk_reent+0xe>
 80070c2:	4638      	mov	r0, r7
 80070c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070c8:	89ab      	ldrh	r3, [r5, #12]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d907      	bls.n	80070de <_fwalk_reent+0x3a>
 80070ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070d2:	3301      	adds	r3, #1
 80070d4:	d003      	beq.n	80070de <_fwalk_reent+0x3a>
 80070d6:	4629      	mov	r1, r5
 80070d8:	4630      	mov	r0, r6
 80070da:	47c0      	blx	r8
 80070dc:	4307      	orrs	r7, r0
 80070de:	3568      	adds	r5, #104	; 0x68
 80070e0:	e7e9      	b.n	80070b6 <_fwalk_reent+0x12>

080070e2 <__retarget_lock_init_recursive>:
 80070e2:	4770      	bx	lr

080070e4 <__retarget_lock_acquire_recursive>:
 80070e4:	4770      	bx	lr

080070e6 <__retarget_lock_release_recursive>:
 80070e6:	4770      	bx	lr

080070e8 <__swhatbuf_r>:
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	460e      	mov	r6, r1
 80070ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f0:	4614      	mov	r4, r2
 80070f2:	2900      	cmp	r1, #0
 80070f4:	461d      	mov	r5, r3
 80070f6:	b096      	sub	sp, #88	; 0x58
 80070f8:	da07      	bge.n	800710a <__swhatbuf_r+0x22>
 80070fa:	2300      	movs	r3, #0
 80070fc:	602b      	str	r3, [r5, #0]
 80070fe:	89b3      	ldrh	r3, [r6, #12]
 8007100:	061a      	lsls	r2, r3, #24
 8007102:	d410      	bmi.n	8007126 <__swhatbuf_r+0x3e>
 8007104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007108:	e00e      	b.n	8007128 <__swhatbuf_r+0x40>
 800710a:	466a      	mov	r2, sp
 800710c:	f000 f902 	bl	8007314 <_fstat_r>
 8007110:	2800      	cmp	r0, #0
 8007112:	dbf2      	blt.n	80070fa <__swhatbuf_r+0x12>
 8007114:	9a01      	ldr	r2, [sp, #4]
 8007116:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800711a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800711e:	425a      	negs	r2, r3
 8007120:	415a      	adcs	r2, r3
 8007122:	602a      	str	r2, [r5, #0]
 8007124:	e7ee      	b.n	8007104 <__swhatbuf_r+0x1c>
 8007126:	2340      	movs	r3, #64	; 0x40
 8007128:	2000      	movs	r0, #0
 800712a:	6023      	str	r3, [r4, #0]
 800712c:	b016      	add	sp, #88	; 0x58
 800712e:	bd70      	pop	{r4, r5, r6, pc}

08007130 <__smakebuf_r>:
 8007130:	898b      	ldrh	r3, [r1, #12]
 8007132:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007134:	079d      	lsls	r5, r3, #30
 8007136:	4606      	mov	r6, r0
 8007138:	460c      	mov	r4, r1
 800713a:	d507      	bpl.n	800714c <__smakebuf_r+0x1c>
 800713c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	6123      	str	r3, [r4, #16]
 8007144:	2301      	movs	r3, #1
 8007146:	6163      	str	r3, [r4, #20]
 8007148:	b002      	add	sp, #8
 800714a:	bd70      	pop	{r4, r5, r6, pc}
 800714c:	466a      	mov	r2, sp
 800714e:	ab01      	add	r3, sp, #4
 8007150:	f7ff ffca 	bl	80070e8 <__swhatbuf_r>
 8007154:	9900      	ldr	r1, [sp, #0]
 8007156:	4605      	mov	r5, r0
 8007158:	4630      	mov	r0, r6
 800715a:	f7ff f983 	bl	8006464 <_malloc_r>
 800715e:	b948      	cbnz	r0, 8007174 <__smakebuf_r+0x44>
 8007160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007164:	059a      	lsls	r2, r3, #22
 8007166:	d4ef      	bmi.n	8007148 <__smakebuf_r+0x18>
 8007168:	f023 0303 	bic.w	r3, r3, #3
 800716c:	f043 0302 	orr.w	r3, r3, #2
 8007170:	81a3      	strh	r3, [r4, #12]
 8007172:	e7e3      	b.n	800713c <__smakebuf_r+0xc>
 8007174:	4b0d      	ldr	r3, [pc, #52]	; (80071ac <__smakebuf_r+0x7c>)
 8007176:	62b3      	str	r3, [r6, #40]	; 0x28
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	6020      	str	r0, [r4, #0]
 800717c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007180:	81a3      	strh	r3, [r4, #12]
 8007182:	9b00      	ldr	r3, [sp, #0]
 8007184:	6120      	str	r0, [r4, #16]
 8007186:	6163      	str	r3, [r4, #20]
 8007188:	9b01      	ldr	r3, [sp, #4]
 800718a:	b15b      	cbz	r3, 80071a4 <__smakebuf_r+0x74>
 800718c:	4630      	mov	r0, r6
 800718e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007192:	f000 f8d1 	bl	8007338 <_isatty_r>
 8007196:	b128      	cbz	r0, 80071a4 <__smakebuf_r+0x74>
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	f023 0303 	bic.w	r3, r3, #3
 800719e:	f043 0301 	orr.w	r3, r3, #1
 80071a2:	81a3      	strh	r3, [r4, #12]
 80071a4:	89a0      	ldrh	r0, [r4, #12]
 80071a6:	4305      	orrs	r5, r0
 80071a8:	81a5      	strh	r5, [r4, #12]
 80071aa:	e7cd      	b.n	8007148 <__smakebuf_r+0x18>
 80071ac:	08006f41 	.word	0x08006f41

080071b0 <_malloc_usable_size_r>:
 80071b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071b4:	1f18      	subs	r0, r3, #4
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	bfbc      	itt	lt
 80071ba:	580b      	ldrlt	r3, [r1, r0]
 80071bc:	18c0      	addlt	r0, r0, r3
 80071be:	4770      	bx	lr

080071c0 <_raise_r>:
 80071c0:	291f      	cmp	r1, #31
 80071c2:	b538      	push	{r3, r4, r5, lr}
 80071c4:	4604      	mov	r4, r0
 80071c6:	460d      	mov	r5, r1
 80071c8:	d904      	bls.n	80071d4 <_raise_r+0x14>
 80071ca:	2316      	movs	r3, #22
 80071cc:	6003      	str	r3, [r0, #0]
 80071ce:	f04f 30ff 	mov.w	r0, #4294967295
 80071d2:	bd38      	pop	{r3, r4, r5, pc}
 80071d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80071d6:	b112      	cbz	r2, 80071de <_raise_r+0x1e>
 80071d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071dc:	b94b      	cbnz	r3, 80071f2 <_raise_r+0x32>
 80071de:	4620      	mov	r0, r4
 80071e0:	f000 f830 	bl	8007244 <_getpid_r>
 80071e4:	462a      	mov	r2, r5
 80071e6:	4601      	mov	r1, r0
 80071e8:	4620      	mov	r0, r4
 80071ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071ee:	f000 b817 	b.w	8007220 <_kill_r>
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d00a      	beq.n	800720c <_raise_r+0x4c>
 80071f6:	1c59      	adds	r1, r3, #1
 80071f8:	d103      	bne.n	8007202 <_raise_r+0x42>
 80071fa:	2316      	movs	r3, #22
 80071fc:	6003      	str	r3, [r0, #0]
 80071fe:	2001      	movs	r0, #1
 8007200:	e7e7      	b.n	80071d2 <_raise_r+0x12>
 8007202:	2400      	movs	r4, #0
 8007204:	4628      	mov	r0, r5
 8007206:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800720a:	4798      	blx	r3
 800720c:	2000      	movs	r0, #0
 800720e:	e7e0      	b.n	80071d2 <_raise_r+0x12>

08007210 <raise>:
 8007210:	4b02      	ldr	r3, [pc, #8]	; (800721c <raise+0xc>)
 8007212:	4601      	mov	r1, r0
 8007214:	6818      	ldr	r0, [r3, #0]
 8007216:	f7ff bfd3 	b.w	80071c0 <_raise_r>
 800721a:	bf00      	nop
 800721c:	2000000c 	.word	0x2000000c

08007220 <_kill_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	2300      	movs	r3, #0
 8007224:	4d06      	ldr	r5, [pc, #24]	; (8007240 <_kill_r+0x20>)
 8007226:	4604      	mov	r4, r0
 8007228:	4608      	mov	r0, r1
 800722a:	4611      	mov	r1, r2
 800722c:	602b      	str	r3, [r5, #0]
 800722e:	f7f9 ffa6 	bl	800117e <_kill>
 8007232:	1c43      	adds	r3, r0, #1
 8007234:	d102      	bne.n	800723c <_kill_r+0x1c>
 8007236:	682b      	ldr	r3, [r5, #0]
 8007238:	b103      	cbz	r3, 800723c <_kill_r+0x1c>
 800723a:	6023      	str	r3, [r4, #0]
 800723c:	bd38      	pop	{r3, r4, r5, pc}
 800723e:	bf00      	nop
 8007240:	200003dc 	.word	0x200003dc

08007244 <_getpid_r>:
 8007244:	f7f9 bf94 	b.w	8001170 <_getpid>

08007248 <__sread>:
 8007248:	b510      	push	{r4, lr}
 800724a:	460c      	mov	r4, r1
 800724c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007250:	f000 f894 	bl	800737c <_read_r>
 8007254:	2800      	cmp	r0, #0
 8007256:	bfab      	itete	ge
 8007258:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800725a:	89a3      	ldrhlt	r3, [r4, #12]
 800725c:	181b      	addge	r3, r3, r0
 800725e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007262:	bfac      	ite	ge
 8007264:	6563      	strge	r3, [r4, #84]	; 0x54
 8007266:	81a3      	strhlt	r3, [r4, #12]
 8007268:	bd10      	pop	{r4, pc}

0800726a <__swrite>:
 800726a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800726e:	461f      	mov	r7, r3
 8007270:	898b      	ldrh	r3, [r1, #12]
 8007272:	4605      	mov	r5, r0
 8007274:	05db      	lsls	r3, r3, #23
 8007276:	460c      	mov	r4, r1
 8007278:	4616      	mov	r6, r2
 800727a:	d505      	bpl.n	8007288 <__swrite+0x1e>
 800727c:	2302      	movs	r3, #2
 800727e:	2200      	movs	r2, #0
 8007280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007284:	f000 f868 	bl	8007358 <_lseek_r>
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	4632      	mov	r2, r6
 800728c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007290:	81a3      	strh	r3, [r4, #12]
 8007292:	4628      	mov	r0, r5
 8007294:	463b      	mov	r3, r7
 8007296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800729a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800729e:	f000 b817 	b.w	80072d0 <_write_r>

080072a2 <__sseek>:
 80072a2:	b510      	push	{r4, lr}
 80072a4:	460c      	mov	r4, r1
 80072a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072aa:	f000 f855 	bl	8007358 <_lseek_r>
 80072ae:	1c43      	adds	r3, r0, #1
 80072b0:	89a3      	ldrh	r3, [r4, #12]
 80072b2:	bf15      	itete	ne
 80072b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80072b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072be:	81a3      	strheq	r3, [r4, #12]
 80072c0:	bf18      	it	ne
 80072c2:	81a3      	strhne	r3, [r4, #12]
 80072c4:	bd10      	pop	{r4, pc}

080072c6 <__sclose>:
 80072c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ca:	f000 b813 	b.w	80072f4 <_close_r>
	...

080072d0 <_write_r>:
 80072d0:	b538      	push	{r3, r4, r5, lr}
 80072d2:	4604      	mov	r4, r0
 80072d4:	4608      	mov	r0, r1
 80072d6:	4611      	mov	r1, r2
 80072d8:	2200      	movs	r2, #0
 80072da:	4d05      	ldr	r5, [pc, #20]	; (80072f0 <_write_r+0x20>)
 80072dc:	602a      	str	r2, [r5, #0]
 80072de:	461a      	mov	r2, r3
 80072e0:	f7f9 ff84 	bl	80011ec <_write>
 80072e4:	1c43      	adds	r3, r0, #1
 80072e6:	d102      	bne.n	80072ee <_write_r+0x1e>
 80072e8:	682b      	ldr	r3, [r5, #0]
 80072ea:	b103      	cbz	r3, 80072ee <_write_r+0x1e>
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	bd38      	pop	{r3, r4, r5, pc}
 80072f0:	200003dc 	.word	0x200003dc

080072f4 <_close_r>:
 80072f4:	b538      	push	{r3, r4, r5, lr}
 80072f6:	2300      	movs	r3, #0
 80072f8:	4d05      	ldr	r5, [pc, #20]	; (8007310 <_close_r+0x1c>)
 80072fa:	4604      	mov	r4, r0
 80072fc:	4608      	mov	r0, r1
 80072fe:	602b      	str	r3, [r5, #0]
 8007300:	f7f9 ff90 	bl	8001224 <_close>
 8007304:	1c43      	adds	r3, r0, #1
 8007306:	d102      	bne.n	800730e <_close_r+0x1a>
 8007308:	682b      	ldr	r3, [r5, #0]
 800730a:	b103      	cbz	r3, 800730e <_close_r+0x1a>
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	bd38      	pop	{r3, r4, r5, pc}
 8007310:	200003dc 	.word	0x200003dc

08007314 <_fstat_r>:
 8007314:	b538      	push	{r3, r4, r5, lr}
 8007316:	2300      	movs	r3, #0
 8007318:	4d06      	ldr	r5, [pc, #24]	; (8007334 <_fstat_r+0x20>)
 800731a:	4604      	mov	r4, r0
 800731c:	4608      	mov	r0, r1
 800731e:	4611      	mov	r1, r2
 8007320:	602b      	str	r3, [r5, #0]
 8007322:	f7f9 ff8a 	bl	800123a <_fstat>
 8007326:	1c43      	adds	r3, r0, #1
 8007328:	d102      	bne.n	8007330 <_fstat_r+0x1c>
 800732a:	682b      	ldr	r3, [r5, #0]
 800732c:	b103      	cbz	r3, 8007330 <_fstat_r+0x1c>
 800732e:	6023      	str	r3, [r4, #0]
 8007330:	bd38      	pop	{r3, r4, r5, pc}
 8007332:	bf00      	nop
 8007334:	200003dc 	.word	0x200003dc

08007338 <_isatty_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	2300      	movs	r3, #0
 800733c:	4d05      	ldr	r5, [pc, #20]	; (8007354 <_isatty_r+0x1c>)
 800733e:	4604      	mov	r4, r0
 8007340:	4608      	mov	r0, r1
 8007342:	602b      	str	r3, [r5, #0]
 8007344:	f7f9 ff88 	bl	8001258 <_isatty>
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	d102      	bne.n	8007352 <_isatty_r+0x1a>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	b103      	cbz	r3, 8007352 <_isatty_r+0x1a>
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	bd38      	pop	{r3, r4, r5, pc}
 8007354:	200003dc 	.word	0x200003dc

08007358 <_lseek_r>:
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	4604      	mov	r4, r0
 800735c:	4608      	mov	r0, r1
 800735e:	4611      	mov	r1, r2
 8007360:	2200      	movs	r2, #0
 8007362:	4d05      	ldr	r5, [pc, #20]	; (8007378 <_lseek_r+0x20>)
 8007364:	602a      	str	r2, [r5, #0]
 8007366:	461a      	mov	r2, r3
 8007368:	f7f9 ff80 	bl	800126c <_lseek>
 800736c:	1c43      	adds	r3, r0, #1
 800736e:	d102      	bne.n	8007376 <_lseek_r+0x1e>
 8007370:	682b      	ldr	r3, [r5, #0]
 8007372:	b103      	cbz	r3, 8007376 <_lseek_r+0x1e>
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	bd38      	pop	{r3, r4, r5, pc}
 8007378:	200003dc 	.word	0x200003dc

0800737c <_read_r>:
 800737c:	b538      	push	{r3, r4, r5, lr}
 800737e:	4604      	mov	r4, r0
 8007380:	4608      	mov	r0, r1
 8007382:	4611      	mov	r1, r2
 8007384:	2200      	movs	r2, #0
 8007386:	4d05      	ldr	r5, [pc, #20]	; (800739c <_read_r+0x20>)
 8007388:	602a      	str	r2, [r5, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	f7f9 ff11 	bl	80011b2 <_read>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_read_r+0x1e>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	b103      	cbz	r3, 800739a <_read_r+0x1e>
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	200003dc 	.word	0x200003dc

080073a0 <_init>:
 80073a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a2:	bf00      	nop
 80073a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073a6:	bc08      	pop	{r3}
 80073a8:	469e      	mov	lr, r3
 80073aa:	4770      	bx	lr

080073ac <_fini>:
 80073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ae:	bf00      	nop
 80073b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b2:	bc08      	pop	{r3}
 80073b4:	469e      	mov	lr, r3
 80073b6:	4770      	bx	lr
