
Avionic_Test_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  0800c300  0800c300  0001c300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c998  0800c998  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c998  0800c998  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c998  0800c998  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c998  0800c998  0001c998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c99c  0800c99c  0001c99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c9a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  200001e4  0800cb84  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  0800cb84  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d271  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237d  00000000  00000000  0002d47e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002f800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  000302b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b35  00000000  00000000  00030c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d74a  00000000  00000000  000497b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008674d  00000000  00000000  00056eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd64c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043c4  00000000  00000000  000dd6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c2e4 	.word	0x0800c2e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800c2e4 	.word	0x0800c2e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	460c      	mov	r4, r1
 8001114:	4605      	mov	r5, r0
 8001116:	4621      	mov	r1, r4
 8001118:	4628      	mov	r0, r5
 800111a:	2200      	movs	r2, #0
 800111c:	2300      	movs	r3, #0
 800111e:	f7ff fc4d 	bl	80009bc <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff f9c3 	bl	80004d8 <__aeabi_dmul>
 8001152:	f7ff fc99 	bl	8000a88 <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff f944 	bl	80003e4 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff f9ba 	bl	80004d8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7fe fffc 	bl	8000168 <__aeabi_dsub>
 8001170:	f7ff fc8a 	bl	8000a88 <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <GpsToDecimalDegrees>:
void GPS_Init(void);
char *strtok_fr (char *s, char delim, char **save_ptr);
char *strtok_f (char *s, char delim);

/* Main Code */
float GpsToDecimalDegrees(char* nmeaPos, char quadrant){
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	70fb      	strb	r3, [r7, #3]
	float v= 0;
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
	if(strlen(nmeaPos)>5){
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7fe ffdc 	bl	8000150 <strlen>
 8001198:	4603      	mov	r3, r0
 800119a:	2b05      	cmp	r3, #5
 800119c:	d944      	bls.n	8001228 <GpsToDecimalDegrees+0xa8>
		char integerPart[3+1];
		int digitCount= (nmeaPos[4]=='.' ? 2 : 3);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3304      	adds	r3, #4
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b2e      	cmp	r3, #46	; 0x2e
 80011a6:	d101      	bne.n	80011ac <GpsToDecimalDegrees+0x2c>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e000      	b.n	80011ae <GpsToDecimalDegrees+0x2e>
 80011ac:	2303      	movs	r3, #3
 80011ae:	613b      	str	r3, [r7, #16]
		memcpy(integerPart, nmeaPos, digitCount);
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f005 fc4d 	bl	8006a58 <memcpy>
		integerPart[digitCount]= 0;
 80011be:	f107 020c 	add.w	r2, r7, #12
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4413      	add	r3, r2
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
		nmeaPos+= digitCount;
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	4413      	add	r3, r2
 80011d0:	607b      	str	r3, [r7, #4]
		v= atoi(integerPart) + atof(nmeaPos)/60.;
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	4618      	mov	r0, r3
 80011d8:	f005 fc0f 	bl	80069fa <atoi>
 80011dc:	4603      	mov	r3, r0
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f910 	bl	8000404 <__aeabi_i2d>
 80011e4:	4604      	mov	r4, r0
 80011e6:	460d      	mov	r5, r1
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f005 fc03 	bl	80069f4 <atof>
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <GpsToDecimalDegrees+0xb4>)
 80011f4:	f7ff fa9a 	bl	800072c <__aeabi_ddiv>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4620      	mov	r0, r4
 80011fe:	4629      	mov	r1, r5
 8001200:	f7fe ffb4 	bl	800016c <__adddf3>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fc5c 	bl	8000ac8 <__aeabi_d2f>
 8001210:	4603      	mov	r3, r0
 8001212:	617b      	str	r3, [r7, #20]
		if(quadrant=='W' || quadrant=='S')
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	2b57      	cmp	r3, #87	; 0x57
 8001218:	d002      	beq.n	8001220 <GpsToDecimalDegrees+0xa0>
 800121a:	78fb      	ldrb	r3, [r7, #3]
 800121c:	2b53      	cmp	r3, #83	; 0x53
 800121e:	d103      	bne.n	8001228 <GpsToDecimalDegrees+0xa8>
		  v= -v;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001226:	617b      	str	r3, [r7, #20]
	}
	return v;
 8001228:	697b      	ldr	r3, [r7, #20]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bdb0      	pop	{r4, r5, r7, pc}
 8001232:	bf00      	nop
 8001234:	404e0000 	.word	0x404e0000

08001238 <GPS_Init>:

void GPS_Init(void){
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	GPS.rxIndex=0;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <GPS_Init+0x1c>)
 800123e:	2200      	movs	r2, #0
 8001240:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);	
 8001244:	2201      	movs	r2, #1
 8001246:	4904      	ldr	r1, [pc, #16]	; (8001258 <GPS_Init+0x20>)
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <GPS_Init+0x24>)
 800124a:	f005 f8c6 	bl	80063da <HAL_UART_Receive_IT>
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000027c 	.word	0x2000027c
 8001258:	2000037e 	.word	0x2000037e
 800125c:	20000488 	.word	0x20000488

08001260 <GPS_CallBack>:

void GPS_CallBack(void){
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 8001264:	f001 fbe0 	bl	8002a28 <HAL_GetTick>
 8001268:	4603      	mov	r3, r0
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <GPS_CallBack+0x4c>)
 800126c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	if(GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <GPS_CallBack+0x4c>)
 8001272:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8001276:	2bfd      	cmp	r3, #253	; 0xfd
 8001278:	d810      	bhi.n	800129c <GPS_CallBack+0x3c>
	{
		GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <GPS_CallBack+0x4c>)
 800127c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8001280:	461a      	mov	r2, r3
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <GPS_CallBack+0x4c>)
 8001284:	f893 1102 	ldrb.w	r1, [r3, #258]	; 0x102
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <GPS_CallBack+0x4c>)
 800128a:	5499      	strb	r1, [r3, r2]
		GPS.rxIndex++;
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <GPS_CallBack+0x4c>)
 800128e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8001292:	3301      	adds	r3, #1
 8001294:	b29a      	uxth	r2, r3
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <GPS_CallBack+0x4c>)
 8001298:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	}
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 800129c:	2201      	movs	r2, #1
 800129e:	4904      	ldr	r1, [pc, #16]	; (80012b0 <GPS_CallBack+0x50>)
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <GPS_CallBack+0x54>)
 80012a2:	f005 f89a 	bl	80063da <HAL_UART_Receive_IT>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000027c 	.word	0x2000027c
 80012b0:	2000037e 	.word	0x2000037e
 80012b4:	20000488 	.word	0x20000488

080012b8 <strtok_fr>:

char *strtok_fr (char *s, char delim, char **save_ptr){
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	460b      	mov	r3, r1
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	72fb      	strb	r3, [r7, #11]
    char *tail;
    char c;
    if (s == NULL)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <strtok_fr+0x1a>
        s = *save_ptr;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	60fb      	str	r3, [r7, #12]
    tail = s;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	617b      	str	r3, [r7, #20]
    if ((c = *tail) == '\0') {
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	74fb      	strb	r3, [r7, #19]
 80012dc:	7cfb      	ldrb	r3, [r7, #19]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d102      	bne.n	80012e8 <strtok_fr+0x30>
        s = NULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	e012      	b.n	800130e <strtok_fr+0x56>
    }
    else {
        do {
            if (c == delim) {
 80012e8:	7cfa      	ldrb	r2, [r7, #19]
 80012ea:	7afb      	ldrb	r3, [r7, #11]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d105      	bne.n	80012fc <strtok_fr+0x44>
                *tail++ = '\0';
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	617a      	str	r2, [r7, #20]
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
                break;
 80012fa:	e008      	b.n	800130e <strtok_fr+0x56>
           }
        }while ((c = *++tail) != '\0');
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3301      	adds	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	74fb      	strb	r3, [r7, #19]
 8001308:	7cfb      	ldrb	r3, [r7, #19]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1ec      	bne.n	80012e8 <strtok_fr+0x30>
    }
    *save_ptr = tail;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	601a      	str	r2, [r3, #0]
    return s;
 8001314:	68fb      	ldr	r3, [r7, #12]
}
 8001316:	4618      	mov	r0, r3
 8001318:	371c      	adds	r7, #28
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <strtok_f>:

char *strtok_f (char *s, char delim)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
    static char *save_ptr;
    return strtok_fr (s, delim, &save_ptr);
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	4a05      	ldr	r2, [pc, #20]	; (8001344 <strtok_f+0x24>)
 8001330:	4619      	mov	r1, r3
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffc0 	bl	80012b8 <strtok_fr>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000200 	.word	0x20000200

08001348 <GPS_Process>:

void GPS_Process(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	//$GPGGA,031956,2218.2035,N,11410.7595,E,1,04,3,9,005.9,M,-001.3,M,,*51
	//$GPRMC,081836,A,3751.65,S,14507.36,E,000.0,360.0,130998,011.3,E*62
	if( (HAL_GetTick()-GPS.LastTime>50) && (GPS.rxIndex>0)){
 800134c:	f001 fb6c 	bl	8002a28 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	4b73      	ldr	r3, [pc, #460]	; (8001520 <GPS_Process+0x1d8>)
 8001354:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b32      	cmp	r3, #50	; 0x32
 800135c:	f240 80d5 	bls.w	800150a <GPS_Process+0x1c2>
 8001360:	4b6f      	ldr	r3, [pc, #444]	; (8001520 <GPS_Process+0x1d8>)
 8001362:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 80cf 	beq.w	800150a <GPS_Process+0x1c2>

		str_gpgga = strstr((char*)GPS.rxBuffer,"$GPGGA,");
 800136c:	496d      	ldr	r1, [pc, #436]	; (8001524 <GPS_Process+0x1dc>)
 800136e:	486c      	ldr	r0, [pc, #432]	; (8001520 <GPS_Process+0x1d8>)
 8001370:	f005 fdbe 	bl	8006ef0 <strstr>
 8001374:	4603      	mov	r3, r0
 8001376:	4a6c      	ldr	r2, [pc, #432]	; (8001528 <GPS_Process+0x1e0>)
 8001378:	6013      	str	r3, [r2, #0]
		str_gprmc = strstr((char*)GPS.rxBuffer,"$GPRMC,");
 800137a:	496c      	ldr	r1, [pc, #432]	; (800152c <GPS_Process+0x1e4>)
 800137c:	4868      	ldr	r0, [pc, #416]	; (8001520 <GPS_Process+0x1d8>)
 800137e:	f005 fdb7 	bl	8006ef0 <strstr>
 8001382:	4603      	mov	r3, r0
 8001384:	4a6a      	ldr	r2, [pc, #424]	; (8001530 <GPS_Process+0x1e8>)
 8001386:	6013      	str	r3, [r2, #0]

		if(str_gpgga != NULL && str_gprmc != NULL){
 8001388:	4b67      	ldr	r3, [pc, #412]	; (8001528 <GPS_Process+0x1e0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80b2 	beq.w	80014f6 <GPS_Process+0x1ae>
 8001392:	4b67      	ldr	r3, [pc, #412]	; (8001530 <GPS_Process+0x1e8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 80ad 	beq.w	80014f6 <GPS_Process+0x1ae>
			/* GPGGA Parse Section */
		    GPS.GPGGA.Message_ID = strtok_f(str_gpgga,',');
 800139c:	4b62      	ldr	r3, [pc, #392]	; (8001528 <GPS_Process+0x1e0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	212c      	movs	r1, #44	; 0x2c
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ffbc 	bl	8001320 <strtok_f>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a5d      	ldr	r2, [pc, #372]	; (8001520 <GPS_Process+0x1d8>)
 80013ac:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
		    GPS.GPGGA.Time = strtok_f(NULL,',');
 80013b0:	212c      	movs	r1, #44	; 0x2c
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff ffb4 	bl	8001320 <strtok_f>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a59      	ldr	r2, [pc, #356]	; (8001520 <GPS_Process+0x1d8>)
 80013bc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
		    GPS.GPGGA.Raw_Latitude = strtok_f(NULL,',');
 80013c0:	212c      	movs	r1, #44	; 0x2c
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff ffac 	bl	8001320 <strtok_f>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a55      	ldr	r2, [pc, #340]	; (8001520 <GPS_Process+0x1d8>)
 80013cc:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		    GPS.GPGGA.N_S = strtok_f(NULL,',');
 80013d0:	212c      	movs	r1, #44	; 0x2c
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff ffa4 	bl	8001320 <strtok_f>
 80013d8:	4603      	mov	r3, r0
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b50      	ldr	r3, [pc, #320]	; (8001520 <GPS_Process+0x1d8>)
 80013de:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		    GPS.GPGGA.Raw_Longitude = strtok_f(NULL,',');
 80013e2:	212c      	movs	r1, #44	; 0x2c
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff ff9b 	bl	8001320 <strtok_f>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a4c      	ldr	r2, [pc, #304]	; (8001520 <GPS_Process+0x1d8>)
 80013ee:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
		    GPS.GPGGA.E_W = strtok_f(NULL,',');
 80013f2:	212c      	movs	r1, #44	; 0x2c
 80013f4:	2000      	movs	r0, #0
 80013f6:	f7ff ff93 	bl	8001320 <strtok_f>
 80013fa:	4603      	mov	r3, r0
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4b48      	ldr	r3, [pc, #288]	; (8001520 <GPS_Process+0x1d8>)
 8001400:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120

		    for(i = 3; i > 0; i--)
 8001404:	4b4b      	ldr	r3, [pc, #300]	; (8001534 <GPS_Process+0x1ec>)
 8001406:	2203      	movs	r2, #3
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e00c      	b.n	8001426 <GPS_Process+0xde>
		    	GPS.GPGGA.tmp_misc = strtok_f(NULL,',');
 800140c:	212c      	movs	r1, #44	; 0x2c
 800140e:	2000      	movs	r0, #0
 8001410:	f7ff ff86 	bl	8001320 <strtok_f>
 8001414:	4603      	mov	r3, r0
 8001416:	4a42      	ldr	r2, [pc, #264]	; (8001520 <GPS_Process+0x1d8>)
 8001418:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
		    for(i = 3; i > 0; i--)
 800141c:	4b45      	ldr	r3, [pc, #276]	; (8001534 <GPS_Process+0x1ec>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3b01      	subs	r3, #1
 8001422:	4a44      	ldr	r2, [pc, #272]	; (8001534 <GPS_Process+0x1ec>)
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b43      	ldr	r3, [pc, #268]	; (8001534 <GPS_Process+0x1ec>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	dcee      	bgt.n	800140c <GPS_Process+0xc4>

		    GPS.GPGGA.Altitude = atof(strtok_f(NULL,','));
 800142e:	212c      	movs	r1, #44	; 0x2c
 8001430:	2000      	movs	r0, #0
 8001432:	f7ff ff75 	bl	8001320 <strtok_f>
 8001436:	4603      	mov	r3, r0
 8001438:	4618      	mov	r0, r3
 800143a:	f005 fadb 	bl	80069f4 <atof>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	f7ff fb3f 	bl	8000ac8 <__aeabi_d2f>
 800144a:	4603      	mov	r3, r0
 800144c:	4a34      	ldr	r2, [pc, #208]	; (8001520 <GPS_Process+0x1d8>)
 800144e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
		    GPS.GPGGA.Latitude = GpsToDecimalDegrees(GPS.GPGGA.Raw_Latitude, GPS.GPGGA.N_S);
 8001452:	4b33      	ldr	r3, [pc, #204]	; (8001520 <GPS_Process+0x1d8>)
 8001454:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001458:	4a31      	ldr	r2, [pc, #196]	; (8001520 <GPS_Process+0x1d8>)
 800145a:	f892 2118 	ldrb.w	r2, [r2, #280]	; 0x118
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fe8d 	bl	8001180 <GpsToDecimalDegrees>
 8001466:	4603      	mov	r3, r0
 8001468:	4a2d      	ldr	r2, [pc, #180]	; (8001520 <GPS_Process+0x1d8>)
 800146a:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
		    GPS.GPGGA.Longitude = GpsToDecimalDegrees(GPS.GPGGA.Raw_Longitude, GPS.GPGGA.E_W);
 800146e:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <GPS_Process+0x1d8>)
 8001470:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001474:	4a2a      	ldr	r2, [pc, #168]	; (8001520 <GPS_Process+0x1d8>)
 8001476:	f892 2120 	ldrb.w	r2, [r2, #288]	; 0x120
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fe7f 	bl	8001180 <GpsToDecimalDegrees>
 8001482:	4603      	mov	r3, r0
 8001484:	4a26      	ldr	r2, [pc, #152]	; (8001520 <GPS_Process+0x1d8>)
 8001486:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

		    /* GPRMC Parse Section */
		    GPS.GPRMC.Message_ID = strtok_f(str_gprmc,',');
 800148a:	4b29      	ldr	r3, [pc, #164]	; (8001530 <GPS_Process+0x1e8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	212c      	movs	r1, #44	; 0x2c
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff45 	bl	8001320 <strtok_f>
 8001496:	4603      	mov	r3, r0
 8001498:	4a21      	ldr	r2, [pc, #132]	; (8001520 <GPS_Process+0x1d8>)
 800149a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
		    for(i = 6; i > 0; i--)
 800149e:	4b25      	ldr	r3, [pc, #148]	; (8001534 <GPS_Process+0x1ec>)
 80014a0:	2206      	movs	r2, #6
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	e00c      	b.n	80014c0 <GPS_Process+0x178>
		    	GPS.GPRMC.tmp_misc = strtok_f(NULL,',');
 80014a6:	212c      	movs	r1, #44	; 0x2c
 80014a8:	2000      	movs	r0, #0
 80014aa:	f7ff ff39 	bl	8001320 <strtok_f>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a1b      	ldr	r2, [pc, #108]	; (8001520 <GPS_Process+0x1d8>)
 80014b2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
		    for(i = 6; i > 0; i--)
 80014b6:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <GPS_Process+0x1ec>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	4a1d      	ldr	r2, [pc, #116]	; (8001534 <GPS_Process+0x1ec>)
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <GPS_Process+0x1ec>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	dcee      	bgt.n	80014a6 <GPS_Process+0x15e>

		    GPS.GPRMC.Speed_ms = atof(strtok_f(NULL,',')) * 0.514; //knots to m/s conversion.
 80014c8:	212c      	movs	r1, #44	; 0x2c
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff ff28 	bl	8001320 <strtok_f>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f005 fa8e 	bl	80069f4 <atof>
 80014d8:	a30f      	add	r3, pc, #60	; (adr r3, 8001518 <GPS_Process+0x1d0>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7fe fffb 	bl	80004d8 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff faed 	bl	8000ac8 <__aeabi_d2f>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <GPS_Process+0x1d8>)
 80014f2:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
		}		
		memset(GPS.rxBuffer,0,sizeof(GPS.rxBuffer));
 80014f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014fa:	2100      	movs	r1, #0
 80014fc:	4808      	ldr	r0, [pc, #32]	; (8001520 <GPS_Process+0x1d8>)
 80014fe:	f005 fab9 	bl	8006a74 <memset>
		GPS.rxIndex=0;
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <GPS_Process+0x1d8>)
 8001504:	2200      	movs	r2, #0
 8001506:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	}
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 800150a:	2201      	movs	r2, #1
 800150c:	490a      	ldr	r1, [pc, #40]	; (8001538 <GPS_Process+0x1f0>)
 800150e:	480b      	ldr	r0, [pc, #44]	; (800153c <GPS_Process+0x1f4>)
 8001510:	f004 ff63 	bl	80063da <HAL_UART_Receive_IT>
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20c49ba6 	.word	0x20c49ba6
 800151c:	3fe072b0 	.word	0x3fe072b0
 8001520:	2000027c 	.word	0x2000027c
 8001524:	0800c300 	.word	0x0800c300
 8001528:	200003c0 	.word	0x200003c0
 800152c:	0800c308 	.word	0x0800c308
 8001530:	20000278 	.word	0x20000278
 8001534:	200003bc 	.word	0x200003bc
 8001538:	2000037e 	.word	0x2000037e
 800153c:	20000488 	.word	0x20000488

08001540 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <MX_GPIO_Init+0xa8>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a23      	ldr	r2, [pc, #140]	; (80015e8 <MX_GPIO_Init+0xa8>)
 800155a:	f043 0310 	orr.w	r3, r3, #16
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <MX_GPIO_Init+0xa8>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <MX_GPIO_Init+0xa8>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a1d      	ldr	r2, [pc, #116]	; (80015e8 <MX_GPIO_Init+0xa8>)
 8001572:	f043 0320 	orr.w	r3, r3, #32
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <MX_GPIO_Init+0xa8>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0320 	and.w	r3, r3, #32
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_GPIO_Init+0xa8>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <MX_GPIO_Init+0xa8>)
 800158a:	f043 0308 	orr.w	r3, r3, #8
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <MX_GPIO_Init+0xa8>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_GPIO_Init+0xa8>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <MX_GPIO_Init+0xa8>)
 80015a2:	f043 0304 	orr.w	r3, r3, #4
 80015a6:	6193      	str	r3, [r2, #24]
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_GPIO_Init+0xa8>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ba:	480c      	ldr	r0, [pc, #48]	; (80015ec <MX_GPIO_Init+0xac>)
 80015bc:	f001 fd76 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2302      	movs	r3, #2
 80015d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	4619      	mov	r1, r3
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <MX_GPIO_Init+0xac>)
 80015da:	f001 fbe3 	bl	8002da4 <HAL_GPIO_Init>

}
 80015de:	bf00      	nop
 80015e0:	3720      	adds	r7, #32
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40011000 	.word	0x40011000

080015f0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_I2C1_Init+0x50>)
 80015f6:	4a13      	ldr	r2, [pc, #76]	; (8001644 <MX_I2C1_Init+0x54>)
 80015f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_I2C1_Init+0x50>)
 80015fc:	4a12      	ldr	r2, [pc, #72]	; (8001648 <MX_I2C1_Init+0x58>)
 80015fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_I2C1_Init+0x50>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_I2C1_Init+0x50>)
 8001608:	2200      	movs	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_I2C1_Init+0x50>)
 800160e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <MX_I2C1_Init+0x50>)
 8001616:	2200      	movs	r2, #0
 8001618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_I2C1_Init+0x50>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <MX_I2C1_Init+0x50>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_I2C1_Init+0x50>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <MX_I2C1_Init+0x50>)
 800162e:	f001 fd55 	bl	80030dc <HAL_I2C_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001638:	f000 ffb6 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200003c4 	.word	0x200003c4
 8001644:	40005400 	.word	0x40005400
 8001648:	000186a0 	.word	0x000186a0

0800164c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <MX_I2C2_Init+0x50>)
 8001652:	4a13      	ldr	r2, [pc, #76]	; (80016a0 <MX_I2C2_Init+0x54>)
 8001654:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_I2C2_Init+0x50>)
 8001658:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <MX_I2C2_Init+0x58>)
 800165a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <MX_I2C2_Init+0x50>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_I2C2_Init+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_I2C2_Init+0x50>)
 800166a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800166e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001670:	4b0a      	ldr	r3, [pc, #40]	; (800169c <MX_I2C2_Init+0x50>)
 8001672:	2200      	movs	r2, #0
 8001674:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_I2C2_Init+0x50>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <MX_I2C2_Init+0x50>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_I2C2_Init+0x50>)
 8001684:	2200      	movs	r2, #0
 8001686:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001688:	4804      	ldr	r0, [pc, #16]	; (800169c <MX_I2C2_Init+0x50>)
 800168a:	f001 fd27 	bl	80030dc <HAL_I2C_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001694:	f000 ff88 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000418 	.word	0x20000418
 80016a0:	40005800 	.word	0x40005800
 80016a4:	000186a0 	.word	0x000186a0

080016a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0318 	add.w	r3, r7, #24
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a33      	ldr	r2, [pc, #204]	; (8001790 <HAL_I2C_MspInit+0xe8>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d12c      	bne.n	8001722 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c8:	4b32      	ldr	r3, [pc, #200]	; (8001794 <HAL_I2C_MspInit+0xec>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a31      	ldr	r2, [pc, #196]	; (8001794 <HAL_I2C_MspInit+0xec>)
 80016ce:	f043 0308 	orr.w	r3, r3, #8
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <HAL_I2C_MspInit+0xec>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016e0:	23c0      	movs	r3, #192	; 0xc0
 80016e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e4:	2312      	movs	r3, #18
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 0318 	add.w	r3, r7, #24
 80016f0:	4619      	mov	r1, r3
 80016f2:	4829      	ldr	r0, [pc, #164]	; (8001798 <HAL_I2C_MspInit+0xf0>)
 80016f4:	f001 fb56 	bl	8002da4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016f8:	4b26      	ldr	r3, [pc, #152]	; (8001794 <HAL_I2C_MspInit+0xec>)
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	4a25      	ldr	r2, [pc, #148]	; (8001794 <HAL_I2C_MspInit+0xec>)
 80016fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001702:	61d3      	str	r3, [r2, #28]
 8001704:	4b23      	ldr	r3, [pc, #140]	; (8001794 <HAL_I2C_MspInit+0xec>)
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	693b      	ldr	r3, [r7, #16]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	201f      	movs	r0, #31
 8001716:	f001 fa8c 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800171a:	201f      	movs	r0, #31
 800171c:	f001 faa5 	bl	8002c6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001720:	e031      	b.n	8001786 <HAL_I2C_MspInit+0xde>
  else if(i2cHandle->Instance==I2C2)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1d      	ldr	r2, [pc, #116]	; (800179c <HAL_I2C_MspInit+0xf4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d12c      	bne.n	8001786 <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_I2C_MspInit+0xec>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a18      	ldr	r2, [pc, #96]	; (8001794 <HAL_I2C_MspInit+0xec>)
 8001732:	f043 0308 	orr.w	r3, r3, #8
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_I2C_MspInit+0xec>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001744:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800174a:	2312      	movs	r3, #18
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001752:	f107 0318 	add.w	r3, r7, #24
 8001756:	4619      	mov	r1, r3
 8001758:	480f      	ldr	r0, [pc, #60]	; (8001798 <HAL_I2C_MspInit+0xf0>)
 800175a:	f001 fb23 	bl	8002da4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_I2C_MspInit+0xec>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a0c      	ldr	r2, [pc, #48]	; (8001794 <HAL_I2C_MspInit+0xec>)
 8001764:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_I2C_MspInit+0xec>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	2021      	movs	r0, #33	; 0x21
 800177c:	f001 fa59 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001780:	2021      	movs	r0, #33	; 0x21
 8001782:	f001 fa72 	bl	8002c6a <HAL_NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40005400 	.word	0x40005400
 8001794:	40021000 	.word	0x40021000
 8001798:	40010c00 	.word	0x40010c00
 800179c:	40005800 	.word	0x40005800

080017a0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPS_CallBack();
 80017a8:	f7ff fd5a 	bl	8001260 <GPS_CallBack>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	0000      	movs	r0, r0
	...

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017be:	f001 f8db 	bl	8002978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c2:	f000 f9f7 	bl	8001bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c6:	f7ff febb 	bl	8001540 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017ca:	f7ff ff11 	bl	80015f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80017ce:	f7ff ff3d 	bl	800164c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80017d2:	f001 f82d 	bl	8002830 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 80017d6:	f7ff fd2f 	bl	8001238 <GPS_Init>
  InitBMP();
 80017da:	f000 fa31 	bl	8001c40 <InitBMP>
  MPU6050_Init();
 80017de:	f000 fe15 	bl	800240c <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	GPS_Process();
 80017e2:	f7ff fdb1 	bl	8001348 <GPS_Process>


	Temperature = BMP180_GetTemp();
 80017e6:	f000 fafb 	bl	8001de0 <BMP180_GetTemp>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4abe      	ldr	r2, [pc, #760]	; (8001ae8 <main+0x330>)
 80017ee:	6013      	str	r3, [r2, #0]
	Pressure = BMP180_GetPress(0);
 80017f0:	2000      	movs	r0, #0
 80017f2:	f000 fbef 	bl	8001fd4 <BMP180_GetPress>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4abc      	ldr	r2, [pc, #752]	; (8001aec <main+0x334>)
 80017fa:	6013      	str	r3, [r2, #0]
	Altitude = BMP180_GetAlt(0);
 80017fc:	2000      	movs	r0, #0
 80017fe:	f000 fdbf 	bl	8002380 <BMP180_GetAlt>
 8001802:	4603      	mov	r3, r0
 8001804:	4aba      	ldr	r2, [pc, #744]	; (8001af0 <main+0x338>)
 8001806:	6013      	str	r3, [r2, #0]


	MPU6050_Read_Accel();
 8001808:	f000 fe48 	bl	800249c <MPU6050_Read_Accel>
	MPU6050_Read_Gyro();
 800180c:	f000 fe88 	bl	8002520 <MPU6050_Read_Gyro>

	degrees_pitch += Gy * 0.0000610687;
 8001810:	4bb8      	ldr	r3, [pc, #736]	; (8001af4 <main+0x33c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe07 	bl	8000428 <__aeabi_f2d>
 800181a:	4604      	mov	r4, r0
 800181c:	460d      	mov	r5, r1
 800181e:	4bb6      	ldr	r3, [pc, #728]	; (8001af8 <main+0x340>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fe00 	bl	8000428 <__aeabi_f2d>
 8001828:	a3a3      	add	r3, pc, #652	; (adr r3, 8001ab8 <main+0x300>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7fe fe53 	bl	80004d8 <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4620      	mov	r0, r4
 8001838:	4629      	mov	r1, r5
 800183a:	f7fe fc97 	bl	800016c <__adddf3>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff f93f 	bl	8000ac8 <__aeabi_d2f>
 800184a:	4603      	mov	r3, r0
 800184c:	4aa9      	ldr	r2, [pc, #676]	; (8001af4 <main+0x33c>)
 800184e:	6013      	str	r3, [r2, #0]
	degrees_roll  += Gx * 0.0000610687;
 8001850:	4baa      	ldr	r3, [pc, #680]	; (8001afc <main+0x344>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fde7 	bl	8000428 <__aeabi_f2d>
 800185a:	4604      	mov	r4, r0
 800185c:	460d      	mov	r5, r1
 800185e:	4ba8      	ldr	r3, [pc, #672]	; (8001b00 <main+0x348>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fde0 	bl	8000428 <__aeabi_f2d>
 8001868:	a393      	add	r3, pc, #588	; (adr r3, 8001ab8 <main+0x300>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe fe33 	bl	80004d8 <__aeabi_dmul>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4620      	mov	r0, r4
 8001878:	4629      	mov	r1, r5
 800187a:	f7fe fc77 	bl	800016c <__adddf3>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	f7ff f91f 	bl	8000ac8 <__aeabi_d2f>
 800188a:	4603      	mov	r3, r0
 800188c:	4a9b      	ldr	r2, [pc, #620]	; (8001afc <main+0x344>)
 800188e:	6013      	str	r3, [r2, #0]

	degrees_pitch += degrees_roll * sin(Gz * 0.000001066);
 8001890:	4b98      	ldr	r3, [pc, #608]	; (8001af4 <main+0x33c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fdc7 	bl	8000428 <__aeabi_f2d>
 800189a:	4604      	mov	r4, r0
 800189c:	460d      	mov	r5, r1
 800189e:	4b97      	ldr	r3, [pc, #604]	; (8001afc <main+0x344>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fdc0 	bl	8000428 <__aeabi_f2d>
 80018a8:	4680      	mov	r8, r0
 80018aa:	4689      	mov	r9, r1
 80018ac:	4b95      	ldr	r3, [pc, #596]	; (8001b04 <main+0x34c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fdb9 	bl	8000428 <__aeabi_f2d>
 80018b6:	a382      	add	r3, pc, #520	; (adr r3, 8001ac0 <main+0x308>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f7fe fe0c 	bl	80004d8 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f008 fbb6 	bl	800a038 <sin>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4640      	mov	r0, r8
 80018d2:	4649      	mov	r1, r9
 80018d4:	f7fe fe00 	bl	80004d8 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fc44 	bl	800016c <__adddf3>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f7ff f8ec 	bl	8000ac8 <__aeabi_d2f>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a80      	ldr	r2, [pc, #512]	; (8001af4 <main+0x33c>)
 80018f4:	6013      	str	r3, [r2, #0]
	degrees_roll  -= degrees_pitch * sin(Gz * 0.000001066);
 80018f6:	4b81      	ldr	r3, [pc, #516]	; (8001afc <main+0x344>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fd94 	bl	8000428 <__aeabi_f2d>
 8001900:	4604      	mov	r4, r0
 8001902:	460d      	mov	r5, r1
 8001904:	4b7b      	ldr	r3, [pc, #492]	; (8001af4 <main+0x33c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fd8d 	bl	8000428 <__aeabi_f2d>
 800190e:	4680      	mov	r8, r0
 8001910:	4689      	mov	r9, r1
 8001912:	4b7c      	ldr	r3, [pc, #496]	; (8001b04 <main+0x34c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fd86 	bl	8000428 <__aeabi_f2d>
 800191c:	a368      	add	r3, pc, #416	; (adr r3, 8001ac0 <main+0x308>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	f7fe fdd9 	bl	80004d8 <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f008 fb83 	bl	800a038 <sin>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4640      	mov	r0, r8
 8001938:	4649      	mov	r1, r9
 800193a:	f7fe fdcd 	bl	80004d8 <__aeabi_dmul>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4620      	mov	r0, r4
 8001944:	4629      	mov	r1, r5
 8001946:	f7fe fc0f 	bl	8000168 <__aeabi_dsub>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f7ff f8b9 	bl	8000ac8 <__aeabi_d2f>
 8001956:	4603      	mov	r3, r0
 8001958:	4a68      	ldr	r2, [pc, #416]	; (8001afc <main+0x344>)
 800195a:	6013      	str	r3, [r2, #0]

	acc_vector = sqrt((Ax * Ax) + (Ay * Ay) + (Az * Az));
 800195c:	4b6a      	ldr	r3, [pc, #424]	; (8001b08 <main+0x350>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a69      	ldr	r2, [pc, #420]	; (8001b08 <main+0x350>)
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	4611      	mov	r1, r2
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fa0c 	bl	8000d84 <__aeabi_fmul>
 800196c:	4603      	mov	r3, r0
 800196e:	461c      	mov	r4, r3
 8001970:	4b66      	ldr	r3, [pc, #408]	; (8001b0c <main+0x354>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a65      	ldr	r2, [pc, #404]	; (8001b0c <main+0x354>)
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fa02 	bl	8000d84 <__aeabi_fmul>
 8001980:	4603      	mov	r3, r0
 8001982:	4619      	mov	r1, r3
 8001984:	4620      	mov	r0, r4
 8001986:	f7ff f8f5 	bl	8000b74 <__addsf3>
 800198a:	4603      	mov	r3, r0
 800198c:	461c      	mov	r4, r3
 800198e:	4b60      	ldr	r3, [pc, #384]	; (8001b10 <main+0x358>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a5f      	ldr	r2, [pc, #380]	; (8001b10 <main+0x358>)
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff f9f3 	bl	8000d84 <__aeabi_fmul>
 800199e:	4603      	mov	r3, r0
 80019a0:	4619      	mov	r1, r3
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff f8e6 	bl	8000b74 <__addsf3>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fd3c 	bl	8000428 <__aeabi_f2d>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	f008 fc5e 	bl	800a278 <sqrt>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f880 	bl	8000ac8 <__aeabi_d2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a52      	ldr	r2, [pc, #328]	; (8001b14 <main+0x35c>)
 80019cc:	6013      	str	r3, [r2, #0]
	degrees_pitch_acc = asin((float) Ay/acc_vector) * 57.2957795;
 80019ce:	4b4f      	ldr	r3, [pc, #316]	; (8001b0c <main+0x354>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a50      	ldr	r2, [pc, #320]	; (8001b14 <main+0x35c>)
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fa87 	bl	8000eec <__aeabi_fdiv>
 80019de:	4603      	mov	r3, r0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fd21 	bl	8000428 <__aeabi_f2d>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f008 fb69 	bl	800a0c4 <asin>
 80019f2:	a335      	add	r3, pc, #212	; (adr r3, 8001ac8 <main+0x310>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	f7fe fd6e 	bl	80004d8 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7ff f860 	bl	8000ac8 <__aeabi_d2f>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4a43      	ldr	r2, [pc, #268]	; (8001b18 <main+0x360>)
 8001a0c:	6013      	str	r3, [r2, #0]
	degrees_roll_acc  = asin((float) Ax/acc_vector) * -57.2957795;
 8001a0e:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <main+0x350>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a40      	ldr	r2, [pc, #256]	; (8001b14 <main+0x35c>)
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fa67 	bl	8000eec <__aeabi_fdiv>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fd01 	bl	8000428 <__aeabi_f2d>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f008 fb49 	bl	800a0c4 <asin>
 8001a32:	a327      	add	r3, pc, #156	; (adr r3, 8001ad0 <main+0x318>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f7fe fd4e 	bl	80004d8 <__aeabi_dmul>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	f7ff f840 	bl	8000ac8 <__aeabi_d2f>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4a34      	ldr	r2, [pc, #208]	; (8001b1c <main+0x364>)
 8001a4c:	6013      	str	r3, [r2, #0]

	degrees_pitch = degrees_pitch * 0.97 + degrees_pitch_acc * 0.03;
 8001a4e:	4b29      	ldr	r3, [pc, #164]	; (8001af4 <main+0x33c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fce8 	bl	8000428 <__aeabi_f2d>
 8001a58:	a31f      	add	r3, pc, #124	; (adr r3, 8001ad8 <main+0x320>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe fd3b 	bl	80004d8 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4614      	mov	r4, r2
 8001a68:	461d      	mov	r5, r3
 8001a6a:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <main+0x360>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fcda 	bl	8000428 <__aeabi_f2d>
 8001a74:	a31a      	add	r3, pc, #104	; (adr r3, 8001ae0 <main+0x328>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f7fe fd2d 	bl	80004d8 <__aeabi_dmul>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4620      	mov	r0, r4
 8001a84:	4629      	mov	r1, r5
 8001a86:	f7fe fb71 	bl	800016c <__adddf3>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	f7ff f819 	bl	8000ac8 <__aeabi_d2f>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4a16      	ldr	r2, [pc, #88]	; (8001af4 <main+0x33c>)
 8001a9a:	6013      	str	r3, [r2, #0]
	degrees_roll  = degrees_roll * 0.97 + degrees_roll_acc * 0.03;
 8001a9c:	4b17      	ldr	r3, [pc, #92]	; (8001afc <main+0x344>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fcc1 	bl	8000428 <__aeabi_f2d>
 8001aa6:	a30c      	add	r3, pc, #48	; (adr r3, 8001ad8 <main+0x320>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe fd14 	bl	80004d8 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	e034      	b.n	8001b20 <main+0x368>
 8001ab6:	bf00      	nop
 8001ab8:	46f9000a 	.word	0x46f9000a
 8001abc:	3f100240 	.word	0x3f100240
 8001ac0:	652c6e62 	.word	0x652c6e62
 8001ac4:	3eb1e26f 	.word	0x3eb1e26f
 8001ac8:	1a47a9e3 	.word	0x1a47a9e3
 8001acc:	404ca5dc 	.word	0x404ca5dc
 8001ad0:	1a47a9e3 	.word	0x1a47a9e3
 8001ad4:	c04ca5dc 	.word	0xc04ca5dc
 8001ad8:	70a3d70a 	.word	0x70a3d70a
 8001adc:	3fef0a3d 	.word	0x3fef0a3d
 8001ae0:	eb851eb8 	.word	0xeb851eb8
 8001ae4:	3f9eb851 	.word	0x3f9eb851
 8001ae8:	2000024c 	.word	0x2000024c
 8001aec:	20000250 	.word	0x20000250
 8001af0:	20000254 	.word	0x20000254
 8001af4:	20000264 	.word	0x20000264
 8001af8:	20000478 	.word	0x20000478
 8001afc:	20000268 	.word	0x20000268
 8001b00:	2000046c 	.word	0x2000046c
 8001b04:	20000484 	.word	0x20000484
 8001b08:	2000047c 	.word	0x2000047c
 8001b0c:	20000474 	.word	0x20000474
 8001b10:	20000480 	.word	0x20000480
 8001b14:	20000260 	.word	0x20000260
 8001b18:	20000258 	.word	0x20000258
 8001b1c:	2000025c 	.word	0x2000025c
 8001b20:	4614      	mov	r4, r2
 8001b22:	461d      	mov	r5, r3
 8001b24:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <main+0x3e8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fc7d 	bl	8000428 <__aeabi_f2d>
 8001b2e:	a31a      	add	r3, pc, #104	; (adr r3, 8001b98 <main+0x3e0>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	f7fe fcd0 	bl	80004d8 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4629      	mov	r1, r5
 8001b40:	f7fe fb14 	bl	800016c <__adddf3>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f7fe ffbc 	bl	8000ac8 <__aeabi_d2f>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <main+0x3ec>)
 8001b54:	6013      	str	r3, [r2, #0]

	if(degrees_pitch > 20.0 || degrees_roll > 20.0){
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <main+0x3f0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4914      	ldr	r1, [pc, #80]	; (8001bac <main+0x3f4>)
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff facd 	bl	80010fc <__aeabi_fcmpgt>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d108      	bne.n	8001b7a <main+0x3c2>
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <main+0x3ec>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	490f      	ldr	r1, [pc, #60]	; (8001bac <main+0x3f4>)
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fac4 	bl	80010fc <__aeabi_fcmpgt>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d006      	beq.n	8001b88 <main+0x3d0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b80:	480b      	ldr	r0, [pc, #44]	; (8001bb0 <main+0x3f8>)
 8001b82:	f001 fa93 	bl	80030ac <HAL_GPIO_WritePin>
 8001b86:	e005      	b.n	8001b94 <main+0x3dc>
	}else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b8e:	4808      	ldr	r0, [pc, #32]	; (8001bb0 <main+0x3f8>)
 8001b90:	f001 fa8c 	bl	80030ac <HAL_GPIO_WritePin>
	GPS_Process();
 8001b94:	e625      	b.n	80017e2 <main+0x2a>
 8001b96:	bf00      	nop
 8001b98:	eb851eb8 	.word	0xeb851eb8
 8001b9c:	3f9eb851 	.word	0x3f9eb851
 8001ba0:	2000025c 	.word	0x2000025c
 8001ba4:	20000268 	.word	0x20000268
 8001ba8:	20000264 	.word	0x20000264
 8001bac:	41a00000 	.word	0x41a00000
 8001bb0:	40011000 	.word	0x40011000

08001bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b090      	sub	sp, #64	; 0x40
 8001bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bba:	f107 0318 	add.w	r3, r7, #24
 8001bbe:	2228      	movs	r2, #40	; 0x28
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f004 ff56 	bl	8006a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be4:	2301      	movs	r3, #1
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be8:	2302      	movs	r3, #2
 8001bea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bf2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf8:	f107 0318 	add.w	r3, r7, #24
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f003 ff85 	bl	8005b0c <HAL_RCC_OscConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001c08:	f000 fcce 	bl	80025a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c0c:	230f      	movs	r3, #15
 8001c0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c10:	2302      	movs	r3, #2
 8001c12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2102      	movs	r1, #2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f004 f9f0 	bl	800600c <HAL_RCC_ClockConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001c32:	f000 fcb9 	bl	80025a8 <Error_Handler>
  }
}
 8001c36:	bf00      	nop
 8001c38:	3740      	adds	r7, #64	; 0x40
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <InitBMP>:

/* USER CODE BEGIN 4 */
void InitBMP(void){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8001c46:	2300      	movs	r3, #0
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8001c58:	23aa      	movs	r3, #170	; 0xaa
 8001c5a:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8001c5c:	8afa      	ldrh	r2, [r7, #22]
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c62:	9302      	str	r3, [sp, #8]
 8001c64:	2316      	movs	r3, #22
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	463b      	mov	r3, r7
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	21ee      	movs	r1, #238	; 0xee
 8001c70:	4836      	ldr	r0, [pc, #216]	; (8001d4c <InitBMP+0x10c>)
 8001c72:	f001 fd6f 	bl	8003754 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8001c76:	783b      	ldrb	r3, [r7, #0]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	787b      	ldrb	r3, [r7, #1]
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <InitBMP+0x110>)
 8001c86:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8001c88:	78bb      	ldrb	r3, [r7, #2]
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	4313      	orrs	r3, r2
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <InitBMP+0x114>)
 8001c98:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8001c9a:	793b      	ldrb	r3, [r7, #4]
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	b21a      	sxth	r2, r3
 8001ca0:	797b      	ldrb	r3, [r7, #5]
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <InitBMP+0x118>)
 8001caa:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8001cac:	79bb      	ldrb	r3, [r7, #6]
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	b21a      	sxth	r2, r3
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <InitBMP+0x11c>)
 8001cbe:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8001cc0:	7a3b      	ldrb	r3, [r7, #8]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	b21a      	sxth	r2, r3
 8001cc6:	7a7b      	ldrb	r3, [r7, #9]
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <InitBMP+0x120>)
 8001cd2:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8001cd4:	7abb      	ldrb	r3, [r7, #10]
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	b21a      	sxth	r2, r3
 8001cda:	7afb      	ldrb	r3, [r7, #11]
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	b21b      	sxth	r3, r3
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <InitBMP+0x124>)
 8001ce6:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8001ce8:	7b3b      	ldrb	r3, [r7, #12]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	b21a      	sxth	r2, r3
 8001cee:	7b7b      	ldrb	r3, [r7, #13]
 8001cf0:	b21b      	sxth	r3, r3
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	b21a      	sxth	r2, r3
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <InitBMP+0x128>)
 8001cf8:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8001cfa:	7bbb      	ldrb	r3, [r7, #14]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	b21a      	sxth	r2, r3
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	b21b      	sxth	r3, r3
 8001d04:	4313      	orrs	r3, r2
 8001d06:	b21a      	sxth	r2, r3
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <InitBMP+0x12c>)
 8001d0a:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8001d0c:	7c3b      	ldrb	r3, [r7, #16]
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	b21a      	sxth	r2, r3
 8001d12:	7c7b      	ldrb	r3, [r7, #17]
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4313      	orrs	r3, r2
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <InitBMP+0x130>)
 8001d1c:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8001d1e:	7cbb      	ldrb	r3, [r7, #18]
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	b21a      	sxth	r2, r3
 8001d24:	7cfb      	ldrb	r3, [r7, #19]
 8001d26:	b21b      	sxth	r3, r3
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <InitBMP+0x134>)
 8001d2e:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001d30:	7d3b      	ldrb	r3, [r7, #20]
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	b21a      	sxth	r2, r3
 8001d36:	7d7b      	ldrb	r3, [r7, #21]
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	b21a      	sxth	r2, r3
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <InitBMP+0x138>)
 8001d40:	801a      	strh	r2, [r3, #0]
}
 8001d42:	bf00      	nop
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200003c4 	.word	0x200003c4
 8001d50:	20000204 	.word	0x20000204
 8001d54:	20000206 	.word	0x20000206
 8001d58:	20000208 	.word	0x20000208
 8001d5c:	2000020a 	.word	0x2000020a
 8001d60:	2000020c 	.word	0x2000020c
 8001d64:	2000020e 	.word	0x2000020e
 8001d68:	20000210 	.word	0x20000210
 8001d6c:	20000212 	.word	0x20000212
 8001d70:	20000214 	.word	0x20000214
 8001d74:	20000216 	.word	0x20000216
 8001d78:	20000218 	.word	0x20000218

08001d7c <Get_UTemp>:

uint16_t Get_UTemp (void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 8001d82:	232e      	movs	r3, #46	; 0x2e
 8001d84:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 8001d86:	2300      	movs	r3, #0
 8001d88:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8e:	9302      	str	r3, [sp, #8]
 8001d90:	2301      	movs	r3, #1
 8001d92:	9301      	str	r3, [sp, #4]
 8001d94:	1dfb      	adds	r3, r7, #7
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	22f4      	movs	r2, #244	; 0xf4
 8001d9c:	21ee      	movs	r1, #238	; 0xee
 8001d9e:	480f      	ldr	r0, [pc, #60]	; (8001ddc <Get_UTemp+0x60>)
 8001da0:	f001 fbde 	bl	8003560 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 8001da4:	2005      	movs	r0, #5
 8001da6:	f000 fe49 	bl	8002a3c <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 8001daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	2302      	movs	r3, #2
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2301      	movs	r3, #1
 8001dba:	22f6      	movs	r2, #246	; 0xf6
 8001dbc:	21ee      	movs	r1, #238	; 0xee
 8001dbe:	4807      	ldr	r0, [pc, #28]	; (8001ddc <Get_UTemp+0x60>)
 8001dc0:	f001 fcc8 	bl	8003754 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001dc4:	793b      	ldrb	r3, [r7, #4]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	797b      	ldrb	r3, [r7, #5]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	b29b      	uxth	r3, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	200003c4 	.word	0x200003c4

08001de0 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 8001de4:	f7ff ffca 	bl	8001d7c <Get_UTemp>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b3d      	ldr	r3, [pc, #244]	; (8001ee4 <BMP180_GetTemp+0x104>)
 8001dee:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001df0:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <BMP180_GetTemp+0x104>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a3c      	ldr	r2, [pc, #240]	; (8001ee8 <BMP180_GetTemp+0x108>)
 8001df6:	8812      	ldrh	r2, [r2, #0]
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fb02 	bl	8000404 <__aeabi_i2d>
 8001e00:	4604      	mov	r4, r0
 8001e02:	460d      	mov	r5, r1
 8001e04:	4b39      	ldr	r3, [pc, #228]	; (8001eec <BMP180_GetTemp+0x10c>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fafb 	bl	8000404 <__aeabi_i2d>
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <BMP180_GetTemp+0x110>)
 8001e14:	f7fe fc8a 	bl	800072c <__aeabi_ddiv>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	4629      	mov	r1, r5
 8001e20:	f7fe fb5a 	bl	80004d8 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f7fe fe04 	bl	8000a38 <__aeabi_d2iz>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4a30      	ldr	r2, [pc, #192]	; (8001ef4 <BMP180_GetTemp+0x114>)
 8001e34:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001e36:	4b30      	ldr	r3, [pc, #192]	; (8001ef8 <BMP180_GetTemp+0x118>)
 8001e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fae1 	bl	8000404 <__aeabi_i2d>
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <BMP180_GetTemp+0x11c>)
 8001e48:	f7fe fb46 	bl	80004d8 <__aeabi_dmul>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4614      	mov	r4, r2
 8001e52:	461d      	mov	r5, r3
 8001e54:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <BMP180_GetTemp+0x120>)
 8001e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <BMP180_GetTemp+0x114>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4413      	add	r3, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe face 	bl	8000404 <__aeabi_i2d>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	4629      	mov	r1, r5
 8001e70:	f7fe fc5c 	bl	800072c <__aeabi_ddiv>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f7fe fddc 	bl	8000a38 <__aeabi_d2iz>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4a20      	ldr	r2, [pc, #128]	; (8001f04 <BMP180_GetTemp+0x124>)
 8001e84:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <BMP180_GetTemp+0x114>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <BMP180_GetTemp+0x124>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a1d      	ldr	r2, [pc, #116]	; (8001f08 <BMP180_GetTemp+0x128>)
 8001e92:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8001e94:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <BMP180_GetTemp+0x128>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	3308      	adds	r3, #8
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fab2 	bl	8000404 <__aeabi_i2d>
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <BMP180_GetTemp+0x12c>)
 8001ea6:	f7fe fc41 	bl	800072c <__aeabi_ddiv>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f7fe fdc1 	bl	8000a38 <__aeabi_d2iz>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4a15      	ldr	r2, [pc, #84]	; (8001f10 <BMP180_GetTemp+0x130>)
 8001eba:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <BMP180_GetTemp+0x130>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fa9f 	bl	8000404 <__aeabi_i2d>
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <BMP180_GetTemp+0x134>)
 8001ecc:	f7fe fc2e 	bl	800072c <__aeabi_ddiv>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f7fe fdf6 	bl	8000ac8 <__aeabi_d2f>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	2000021c 	.word	0x2000021c
 8001ee8:	2000020e 	.word	0x2000020e
 8001eec:	2000020c 	.word	0x2000020c
 8001ef0:	40e00000 	.word	0x40e00000
 8001ef4:	20000224 	.word	0x20000224
 8001ef8:	20000216 	.word	0x20000216
 8001efc:	40a00000 	.word	0x40a00000
 8001f00:	20000218 	.word	0x20000218
 8001f04:	20000228 	.word	0x20000228
 8001f08:	20000234 	.word	0x20000234
 8001f0c:	40300000 	.word	0x40300000
 8001f10:	20000248 	.word	0x20000248
 8001f14:	40240000 	.word	0x40240000

08001f18 <Get_UPress>:

uint32_t Get_UPress (int oss)   // over sampling settings 0,1,2,3
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af04      	add	r7, sp, #16
 8001f1e:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	019b      	lsls	r3, r3, #6
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	3334      	adds	r3, #52	; 0x34
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 8001f2e:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <Get_UPress+0xb4>)
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	81bb      	strh	r3, [r7, #12]
 8001f34:	2300      	movs	r3, #0
 8001f36:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001f38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3c:	9302      	str	r3, [sp, #8]
 8001f3e:	2301      	movs	r3, #1
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	f107 030f 	add.w	r3, r7, #15
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	2301      	movs	r3, #1
 8001f4a:	22f4      	movs	r2, #244	; 0xf4
 8001f4c:	21ee      	movs	r1, #238	; 0xee
 8001f4e:	4820      	ldr	r0, [pc, #128]	; (8001fd0 <Get_UPress+0xb8>)
 8001f50:	f001 fb06 	bl	8003560 <HAL_I2C_Mem_Write>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d81a      	bhi.n	8001f90 <Get_UPress+0x78>
 8001f5a:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <Get_UPress+0x48>)
 8001f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f60:	08001f71 	.word	0x08001f71
 8001f64:	08001f79 	.word	0x08001f79
 8001f68:	08001f81 	.word	0x08001f81
 8001f6c:	08001f89 	.word	0x08001f89
	switch (oss)
	{
		case (0):
			HAL_Delay (5);
 8001f70:	2005      	movs	r0, #5
 8001f72:	f000 fd63 	bl	8002a3c <HAL_Delay>
			break;
 8001f76:	e00b      	b.n	8001f90 <Get_UPress+0x78>
		case (1):
			HAL_Delay (8);
 8001f78:	2008      	movs	r0, #8
 8001f7a:	f000 fd5f 	bl	8002a3c <HAL_Delay>
			break;
 8001f7e:	e007      	b.n	8001f90 <Get_UPress+0x78>
		case (2):
			HAL_Delay (14);
 8001f80:	200e      	movs	r0, #14
 8001f82:	f000 fd5b 	bl	8002a3c <HAL_Delay>
			break;
 8001f86:	e003      	b.n	8001f90 <Get_UPress+0x78>
		case (3):
			HAL_Delay (26);
 8001f88:	201a      	movs	r0, #26
 8001f8a:	f000 fd57 	bl	8002a3c <HAL_Delay>
			break;
 8001f8e:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8001f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f94:	9302      	str	r3, [sp, #8]
 8001f96:	2303      	movs	r3, #3
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	22f6      	movs	r2, #246	; 0xf6
 8001fa4:	21ee      	movs	r1, #238	; 0xee
 8001fa6:	480a      	ldr	r0, [pc, #40]	; (8001fd0 <Get_UPress+0xb8>)
 8001fa8:	f001 fbd4 	bl	8003754 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8001fac:	7b3b      	ldrb	r3, [r7, #12]
 8001fae:	041a      	lsls	r2, r3, #16
 8001fb0:	7b7b      	ldrb	r3, [r7, #13]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	4413      	add	r3, r2
 8001fb6:	7bba      	ldrb	r2, [r7, #14]
 8001fb8:	441a      	add	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f1c3 0308 	rsb	r3, r3, #8
 8001fc0:	fa42 f303 	asr.w	r3, r2, r3
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	0800c310 	.word	0x0800c310
 8001fd0:	200003c4 	.word	0x200003c4

08001fd4 <BMP180_GetPress>:

float BMP180_GetPress (int oss)
{
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ff9b 	bl	8001f18 <Get_UPress>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b7f      	ldr	r3, [pc, #508]	; (80021e4 <BMP180_GetPress+0x210>)
 8001fe8:	601a      	str	r2, [r3, #0]

	B6 = B5 - 4000;
 8001fea:	4b7f      	ldr	r3, [pc, #508]	; (80021e8 <BMP180_GetPress+0x214>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001ff2:	4a7e      	ldr	r2, [pc, #504]	; (80021ec <BMP180_GetPress+0x218>)
 8001ff4:	6013      	str	r3, [r2, #0]

	X1 = (B2*(B6*B6/pow(2,12)))/pow(2,11);
 8001ff6:	4b7e      	ldr	r3, [pc, #504]	; (80021f0 <BMP180_GetPress+0x21c>)
 8001ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fa01 	bl	8000404 <__aeabi_i2d>
 8002002:	4604      	mov	r4, r0
 8002004:	460d      	mov	r5, r1
 8002006:	4b79      	ldr	r3, [pc, #484]	; (80021ec <BMP180_GetPress+0x218>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a78      	ldr	r2, [pc, #480]	; (80021ec <BMP180_GetPress+0x218>)
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe f9f6 	bl	8000404 <__aeabi_i2d>
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	4b75      	ldr	r3, [pc, #468]	; (80021f4 <BMP180_GetPress+0x220>)
 800201e:	f7fe fb85 	bl	800072c <__aeabi_ddiv>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4620      	mov	r0, r4
 8002028:	4629      	mov	r1, r5
 800202a:	f7fe fa55 	bl	80004d8 <__aeabi_dmul>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	4b6f      	ldr	r3, [pc, #444]	; (80021f8 <BMP180_GetPress+0x224>)
 800203c:	f7fe fb76 	bl	800072c <__aeabi_ddiv>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	f7fe fcf6 	bl	8000a38 <__aeabi_d2iz>
 800204c:	4603      	mov	r3, r0
 800204e:	4a6b      	ldr	r2, [pc, #428]	; (80021fc <BMP180_GetPress+0x228>)
 8002050:	6013      	str	r3, [r2, #0]
	X2 = AC2 * B6 / pow(2,11);
 8002052:	4b6b      	ldr	r3, [pc, #428]	; (8002200 <BMP180_GetPress+0x22c>)
 8002054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002058:	461a      	mov	r2, r3
 800205a:	4b64      	ldr	r3, [pc, #400]	; (80021ec <BMP180_GetPress+0x218>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	fb03 f302 	mul.w	r3, r3, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe f9ce 	bl	8000404 <__aeabi_i2d>
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	4b62      	ldr	r3, [pc, #392]	; (80021f8 <BMP180_GetPress+0x224>)
 800206e:	f7fe fb5d 	bl	800072c <__aeabi_ddiv>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	f7fe fcdd 	bl	8000a38 <__aeabi_d2iz>
 800207e:	4603      	mov	r3, r0
 8002080:	4a60      	ldr	r2, [pc, #384]	; (8002204 <BMP180_GetPress+0x230>)
 8002082:	6013      	str	r3, [r2, #0]
	X3 = X1 + X2;
 8002084:	4b5d      	ldr	r3, [pc, #372]	; (80021fc <BMP180_GetPress+0x228>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b5e      	ldr	r3, [pc, #376]	; (8002204 <BMP180_GetPress+0x230>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4413      	add	r3, r2
 800208e:	4a5e      	ldr	r2, [pc, #376]	; (8002208 <BMP180_GetPress+0x234>)
 8002090:	6013      	str	r3, [r2, #0]

	B3 = (((AC1*4+X3) << oss) + 2) / 4;
 8002092:	4b5e      	ldr	r3, [pc, #376]	; (800220c <BMP180_GetPress+0x238>)
 8002094:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002098:	009a      	lsls	r2, r3, #2
 800209a:	4b5b      	ldr	r3, [pc, #364]	; (8002208 <BMP180_GetPress+0x234>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	441a      	add	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	3302      	adds	r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	da00      	bge.n	80020ae <BMP180_GetPress+0xda>
 80020ac:	3303      	adds	r3, #3
 80020ae:	109b      	asrs	r3, r3, #2
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b57      	ldr	r3, [pc, #348]	; (8002210 <BMP180_GetPress+0x23c>)
 80020b4:	601a      	str	r2, [r3, #0]

	X1 = AC3 * B6 / pow(2,13);
 80020b6:	4b57      	ldr	r3, [pc, #348]	; (8002214 <BMP180_GetPress+0x240>)
 80020b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020bc:	461a      	mov	r2, r3
 80020be:	4b4b      	ldr	r3, [pc, #300]	; (80021ec <BMP180_GetPress+0x218>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	fb03 f302 	mul.w	r3, r3, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe f99c 	bl	8000404 <__aeabi_i2d>
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	4b51      	ldr	r3, [pc, #324]	; (8002218 <BMP180_GetPress+0x244>)
 80020d2:	f7fe fb2b 	bl	800072c <__aeabi_ddiv>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4610      	mov	r0, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	f7fe fcab 	bl	8000a38 <__aeabi_d2iz>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4a45      	ldr	r2, [pc, #276]	; (80021fc <BMP180_GetPress+0x228>)
 80020e6:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6 * B6 / pow(2,12))) / pow(2,16);
 80020e8:	4b4c      	ldr	r3, [pc, #304]	; (800221c <BMP180_GetPress+0x248>)
 80020ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe f988 	bl	8000404 <__aeabi_i2d>
 80020f4:	4604      	mov	r4, r0
 80020f6:	460d      	mov	r5, r1
 80020f8:	4b3c      	ldr	r3, [pc, #240]	; (80021ec <BMP180_GetPress+0x218>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a3b      	ldr	r2, [pc, #236]	; (80021ec <BMP180_GetPress+0x218>)
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	fb02 f303 	mul.w	r3, r2, r3
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe f97d 	bl	8000404 <__aeabi_i2d>
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <BMP180_GetPress+0x220>)
 8002110:	f7fe fb0c 	bl	800072c <__aeabi_ddiv>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4620      	mov	r0, r4
 800211a:	4629      	mov	r1, r5
 800211c:	f7fe f9dc 	bl	80004d8 <__aeabi_dmul>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	4b3c      	ldr	r3, [pc, #240]	; (8002220 <BMP180_GetPress+0x24c>)
 800212e:	f7fe fafd 	bl	800072c <__aeabi_ddiv>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4610      	mov	r0, r2
 8002138:	4619      	mov	r1, r3
 800213a:	f7fe fc7d 	bl	8000a38 <__aeabi_d2iz>
 800213e:	4603      	mov	r3, r0
 8002140:	4a30      	ldr	r2, [pc, #192]	; (8002204 <BMP180_GetPress+0x230>)
 8002142:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2) / pow(2,2);
 8002144:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <BMP180_GetPress+0x228>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b2e      	ldr	r3, [pc, #184]	; (8002204 <BMP180_GetPress+0x230>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4413      	add	r3, r2
 800214e:	3302      	adds	r3, #2
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe f957 	bl	8000404 <__aeabi_i2d>
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	4b32      	ldr	r3, [pc, #200]	; (8002224 <BMP180_GetPress+0x250>)
 800215c:	f7fe fae6 	bl	800072c <__aeabi_ddiv>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f7fe fc66 	bl	8000a38 <__aeabi_d2iz>
 800216c:	4603      	mov	r3, r0
 800216e:	4a26      	ldr	r2, [pc, #152]	; (8002208 <BMP180_GetPress+0x234>)
 8002170:	6013      	str	r3, [r2, #0]

	B4 = AC4 * (unsigned long)(X3 + 32768) / pow(2,15);
 8002172:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <BMP180_GetPress+0x254>)
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <BMP180_GetPress+0x234>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002180:	fb03 f302 	mul.w	r3, r3, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe f92d 	bl	80003e4 <__aeabi_ui2d>
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	4b27      	ldr	r3, [pc, #156]	; (800222c <BMP180_GetPress+0x258>)
 8002190:	f7fe facc 	bl	800072c <__aeabi_ddiv>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
 800219c:	f7fe fc74 	bl	8000a88 <__aeabi_d2uiz>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4a23      	ldr	r2, [pc, #140]	; (8002230 <BMP180_GetPress+0x25c>)
 80021a4:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP - B3)* (50000 >> oss);
 80021a6:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <BMP180_GetPress+0x210>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <BMP180_GetPress+0x23c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	fa41 f202 	asr.w	r2, r1, r2
 80021bc:	fb02 f303 	mul.w	r3, r2, r3
 80021c0:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <BMP180_GetPress+0x260>)
 80021c2:	6013      	str	r3, [r2, #0]

	if(B7 < 0x80000000)
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <BMP180_GetPress+0x260>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db37      	blt.n	800223c <BMP180_GetPress+0x268>
		Press = (B7 * 2) / B4;
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <BMP180_GetPress+0x260>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	005a      	lsls	r2, r3, #1
 80021d2:	4b17      	ldr	r3, [pc, #92]	; (8002230 <BMP180_GetPress+0x25c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	4b16      	ldr	r3, [pc, #88]	; (8002238 <BMP180_GetPress+0x264>)
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e036      	b.n	8002250 <BMP180_GetPress+0x27c>
 80021e2:	bf00      	nop
 80021e4:	20000220 	.word	0x20000220
 80021e8:	20000234 	.word	0x20000234
 80021ec:	2000023c 	.word	0x2000023c
 80021f0:	20000212 	.word	0x20000212
 80021f4:	40b00000 	.word	0x40b00000
 80021f8:	40a00000 	.word	0x40a00000
 80021fc:	20000224 	.word	0x20000224
 8002200:	20000206 	.word	0x20000206
 8002204:	20000228 	.word	0x20000228
 8002208:	2000022c 	.word	0x2000022c
 800220c:	20000204 	.word	0x20000204
 8002210:	20000230 	.word	0x20000230
 8002214:	20000208 	.word	0x20000208
 8002218:	40c00000 	.word	0x40c00000
 800221c:	20000210 	.word	0x20000210
 8002220:	40f00000 	.word	0x40f00000
 8002224:	40100000 	.word	0x40100000
 8002228:	2000020a 	.word	0x2000020a
 800222c:	40e00000 	.word	0x40e00000
 8002230:	20000238 	.word	0x20000238
 8002234:	20000240 	.word	0x20000240
 8002238:	20000244 	.word	0x20000244
	else
		Press = (B7 / B4) * 2;
 800223c:	4b46      	ldr	r3, [pc, #280]	; (8002358 <BMP180_GetPress+0x384>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b46      	ldr	r3, [pc, #280]	; (800235c <BMP180_GetPress+0x388>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	fbb2 f3f3 	udiv	r3, r2, r3
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	461a      	mov	r2, r3
 800224c:	4b44      	ldr	r3, [pc, #272]	; (8002360 <BMP180_GetPress+0x38c>)
 800224e:	601a      	str	r2, [r3, #0]

	X1 = (Press / pow(2,8)) * (Press / pow(2,8));
 8002250:	4b43      	ldr	r3, [pc, #268]	; (8002360 <BMP180_GetPress+0x38c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe f8d5 	bl	8000404 <__aeabi_i2d>
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	4b41      	ldr	r3, [pc, #260]	; (8002364 <BMP180_GetPress+0x390>)
 8002260:	f7fe fa64 	bl	800072c <__aeabi_ddiv>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4614      	mov	r4, r2
 800226a:	461d      	mov	r5, r3
 800226c:	4b3c      	ldr	r3, [pc, #240]	; (8002360 <BMP180_GetPress+0x38c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f8c7 	bl	8000404 <__aeabi_i2d>
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	4b3a      	ldr	r3, [pc, #232]	; (8002364 <BMP180_GetPress+0x390>)
 800227c:	f7fe fa56 	bl	800072c <__aeabi_ddiv>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4620      	mov	r0, r4
 8002286:	4629      	mov	r1, r5
 8002288:	f7fe f926 	bl	80004d8 <__aeabi_dmul>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	f7fe fbd0 	bl	8000a38 <__aeabi_d2iz>
 8002298:	4603      	mov	r3, r0
 800229a:	4a33      	ldr	r2, [pc, #204]	; (8002368 <BMP180_GetPress+0x394>)
 800229c:	6013      	str	r3, [r2, #0]
	X1 = (X1 * 3038) / pow (2,16);
 800229e:	4b32      	ldr	r3, [pc, #200]	; (8002368 <BMP180_GetPress+0x394>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f640 32de 	movw	r2, #3038	; 0xbde
 80022a6:	fb02 f303 	mul.w	r3, r2, r3
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe f8aa 	bl	8000404 <__aeabi_i2d>
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	4b2d      	ldr	r3, [pc, #180]	; (800236c <BMP180_GetPress+0x398>)
 80022b6:	f7fe fa39 	bl	800072c <__aeabi_ddiv>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4610      	mov	r0, r2
 80022c0:	4619      	mov	r1, r3
 80022c2:	f7fe fbb9 	bl	8000a38 <__aeabi_d2iz>
 80022c6:	4603      	mov	r3, r0
 80022c8:	4a27      	ldr	r2, [pc, #156]	; (8002368 <BMP180_GetPress+0x394>)
 80022ca:	6013      	str	r3, [r2, #0]
	X2 = (-7357 * Press) / pow(2,16);
 80022cc:	4b24      	ldr	r3, [pc, #144]	; (8002360 <BMP180_GetPress+0x38c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a27      	ldr	r2, [pc, #156]	; (8002370 <BMP180_GetPress+0x39c>)
 80022d2:	fb02 f303 	mul.w	r3, r2, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe f894 	bl	8000404 <__aeabi_i2d>
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	4b22      	ldr	r3, [pc, #136]	; (800236c <BMP180_GetPress+0x398>)
 80022e2:	f7fe fa23 	bl	800072c <__aeabi_ddiv>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4610      	mov	r0, r2
 80022ec:	4619      	mov	r1, r3
 80022ee:	f7fe fba3 	bl	8000a38 <__aeabi_d2iz>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4a1f      	ldr	r2, [pc, #124]	; (8002374 <BMP180_GetPress+0x3a0>)
 80022f6:	6013      	str	r3, [r2, #0]

	Press = Press + (X1 + X2 + 3791) / pow(2,4);
 80022f8:	4b19      	ldr	r3, [pc, #100]	; (8002360 <BMP180_GetPress+0x38c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe f881 	bl	8000404 <__aeabi_i2d>
 8002302:	4604      	mov	r4, r0
 8002304:	460d      	mov	r5, r1
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <BMP180_GetPress+0x394>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <BMP180_GetPress+0x3a0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4413      	add	r3, r2
 8002310:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe f875 	bl	8000404 <__aeabi_i2d>
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <BMP180_GetPress+0x3a4>)
 8002320:	f7fe fa04 	bl	800072c <__aeabi_ddiv>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4620      	mov	r0, r4
 800232a:	4629      	mov	r1, r5
 800232c:	f7fd ff1e 	bl	800016c <__adddf3>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	f7fe fb7e 	bl	8000a38 <__aeabi_d2iz>
 800233c:	4603      	mov	r3, r0
 800233e:	4a08      	ldr	r2, [pc, #32]	; (8002360 <BMP180_GetPress+0x38c>)
 8002340:	6013      	str	r3, [r2, #0]

	return Press;
 8002342:	4b07      	ldr	r3, [pc, #28]	; (8002360 <BMP180_GetPress+0x38c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe fcc8 	bl	8000cdc <__aeabi_i2f>
 800234c:	4603      	mov	r3, r0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bdb0      	pop	{r4, r5, r7, pc}
 8002356:	bf00      	nop
 8002358:	20000240 	.word	0x20000240
 800235c:	20000238 	.word	0x20000238
 8002360:	20000244 	.word	0x20000244
 8002364:	40700000 	.word	0x40700000
 8002368:	20000224 	.word	0x20000224
 800236c:	40f00000 	.word	0x40f00000
 8002370:	ffffe343 	.word	0xffffe343
 8002374:	20000228 	.word	0x20000228
 8002378:	40300000 	.word	0x40300000
 800237c:	00000000 	.word	0x00000000

08002380 <BMP180_GetAlt>:



float BMP180_GetAlt (int oss)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff fe23 	bl	8001fd4 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 800238e:	4b1c      	ldr	r3, [pc, #112]	; (8002400 <BMP180_GetAlt+0x80>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fca2 	bl	8000cdc <__aeabi_i2f>
 8002398:	4603      	mov	r3, r0
 800239a:	491a      	ldr	r1, [pc, #104]	; (8002404 <BMP180_GetAlt+0x84>)
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe fda5 	bl	8000eec <__aeabi_fdiv>
 80023a2:	4603      	mov	r3, r0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f83f 	bl	8000428 <__aeabi_f2d>
 80023aa:	a311      	add	r3, pc, #68	; (adr r3, 80023f0 <BMP180_GetAlt+0x70>)
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	f007 feb6 	bl	800a120 <pow>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	f04f 0000 	mov.w	r0, #0
 80023bc:	4912      	ldr	r1, [pc, #72]	; (8002408 <BMP180_GetAlt+0x88>)
 80023be:	f7fd fed3 	bl	8000168 <__aeabi_dsub>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4610      	mov	r0, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	a30b      	add	r3, pc, #44	; (adr r3, 80023f8 <BMP180_GetAlt+0x78>)
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	f7fe f882 	bl	80004d8 <__aeabi_dmul>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	f7fe fb74 	bl	8000ac8 <__aeabi_d2f>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	f3af 8000 	nop.w
 80023f0:	ccd745e4 	.word	0xccd745e4
 80023f4:	3fc85b95 	.word	0x3fc85b95
 80023f8:	00000000 	.word	0x00000000
 80023fc:	40e5a540 	.word	0x40e5a540
 8002400:	20000244 	.word	0x20000244
 8002404:	47c5e680 	.word	0x47c5e680
 8002408:	3ff00000 	.word	0x3ff00000

0800240c <MPU6050_Init>:


void MPU6050_Init (void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af02      	add	r7, sp, #8
	  uint8_t PWR_MGMT_1[2] = {0x6B, 0x00};
 8002412:	236b      	movs	r3, #107	; 0x6b
 8002414:	81bb      	strh	r3, [r7, #12]
	  while (HAL_I2C_Master_Transmit(&hi2c2, MPU6050_ADDR, PWR_MGMT_1, 2, 10) != HAL_OK);
 8002416:	bf00      	nop
 8002418:	f107 020c 	add.w	r2, r7, #12
 800241c:	230a      	movs	r3, #10
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2302      	movs	r3, #2
 8002422:	21d0      	movs	r1, #208	; 0xd0
 8002424:	481c      	ldr	r0, [pc, #112]	; (8002498 <MPU6050_Init+0x8c>)
 8002426:	f000 ff9d 	bl	8003364 <HAL_I2C_Master_Transmit>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f3      	bne.n	8002418 <MPU6050_Init+0xc>

	  uint8_t GYR_CONFIG[2] = {0x1B, 0x08};
 8002430:	f640 031b 	movw	r3, #2075	; 0x81b
 8002434:	813b      	strh	r3, [r7, #8]
	  while(HAL_I2C_Master_Transmit(&hi2c2, MPU6050_ADDR, GYR_CONFIG, 2, 10) != HAL_OK);
 8002436:	bf00      	nop
 8002438:	f107 0208 	add.w	r2, r7, #8
 800243c:	230a      	movs	r3, #10
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2302      	movs	r3, #2
 8002442:	21d0      	movs	r1, #208	; 0xd0
 8002444:	4814      	ldr	r0, [pc, #80]	; (8002498 <MPU6050_Init+0x8c>)
 8002446:	f000 ff8d 	bl	8003364 <HAL_I2C_Master_Transmit>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f3      	bne.n	8002438 <MPU6050_Init+0x2c>

	  uint8_t ACC_CONFIG[2] = {0x1C, 0x10};
 8002450:	f241 031c 	movw	r3, #4124	; 0x101c
 8002454:	80bb      	strh	r3, [r7, #4]
	  while(HAL_I2C_Master_Transmit(&hi2c2, MPU6050_ADDR, ACC_CONFIG, 2, 10) != HAL_OK);
 8002456:	bf00      	nop
 8002458:	1d3a      	adds	r2, r7, #4
 800245a:	230a      	movs	r3, #10
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	2302      	movs	r3, #2
 8002460:	21d0      	movs	r1, #208	; 0xd0
 8002462:	480d      	ldr	r0, [pc, #52]	; (8002498 <MPU6050_Init+0x8c>)
 8002464:	f000 ff7e 	bl	8003364 <HAL_I2C_Master_Transmit>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f4      	bne.n	8002458 <MPU6050_Init+0x4c>

	  uint8_t LPF_CONFIG[2] = {0x1A, 0x03};
 800246e:	f240 331a 	movw	r3, #794	; 0x31a
 8002472:	803b      	strh	r3, [r7, #0]
	  while(HAL_I2C_Master_Transmit(&hi2c2, MPU6050_ADDR, LPF_CONFIG, 2, 10) != HAL_OK);
 8002474:	bf00      	nop
 8002476:	463a      	mov	r2, r7
 8002478:	230a      	movs	r3, #10
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2302      	movs	r3, #2
 800247e:	21d0      	movs	r1, #208	; 0xd0
 8002480:	4805      	ldr	r0, [pc, #20]	; (8002498 <MPU6050_Init+0x8c>)
 8002482:	f000 ff6f 	bl	8003364 <HAL_I2C_Master_Transmit>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f4      	bne.n	8002476 <MPU6050_Init+0x6a>

}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000418 	.word	0x20000418

0800249c <MPU6050_Read_Accel>:

void MPU6050_Read_Accel ()
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 100);
 80024a2:	2364      	movs	r3, #100	; 0x64
 80024a4:	9302      	str	r3, [sp, #8]
 80024a6:	2306      	movs	r3, #6
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	463b      	mov	r3, r7
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	2301      	movs	r3, #1
 80024b0:	223b      	movs	r2, #59	; 0x3b
 80024b2:	21d0      	movs	r1, #208	; 0xd0
 80024b4:	4816      	ldr	r0, [pc, #88]	; (8002510 <MPU6050_Read_Accel+0x74>)
 80024b6:	f001 f94d 	bl	8003754 <HAL_I2C_Mem_Read>

	Ax = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80024ba:	783b      	ldrb	r3, [r7, #0]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	b21a      	sxth	r2, r3
 80024c0:	787b      	ldrb	r3, [r7, #1]
 80024c2:	b21b      	sxth	r3, r3
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b21b      	sxth	r3, r3
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fc07 	bl	8000cdc <__aeabi_i2f>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4a10      	ldr	r2, [pc, #64]	; (8002514 <MPU6050_Read_Accel+0x78>)
 80024d2:	6013      	str	r3, [r2, #0]
	Ay = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80024d4:	78bb      	ldrb	r3, [r7, #2]
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	b21a      	sxth	r2, r3
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	b21b      	sxth	r3, r3
 80024de:	4313      	orrs	r3, r2
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fbfa 	bl	8000cdc <__aeabi_i2f>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4a0b      	ldr	r2, [pc, #44]	; (8002518 <MPU6050_Read_Accel+0x7c>)
 80024ec:	6013      	str	r3, [r2, #0]
	Az = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80024ee:	793b      	ldrb	r3, [r7, #4]
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	b21a      	sxth	r2, r3
 80024f4:	797b      	ldrb	r3, [r7, #5]
 80024f6:	b21b      	sxth	r3, r3
 80024f8:	4313      	orrs	r3, r2
 80024fa:	b21b      	sxth	r3, r3
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe fbed 	bl	8000cdc <__aeabi_i2f>
 8002502:	4603      	mov	r3, r0
 8002504:	4a05      	ldr	r2, [pc, #20]	; (800251c <MPU6050_Read_Accel+0x80>)
 8002506:	6013      	str	r3, [r2, #0]
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000418 	.word	0x20000418
 8002514:	2000047c 	.word	0x2000047c
 8002518:	20000474 	.word	0x20000474
 800251c:	20000480 	.word	0x20000480

08002520 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro (void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252a:	9302      	str	r3, [sp, #8]
 800252c:	2306      	movs	r3, #6
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	463b      	mov	r3, r7
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2301      	movs	r3, #1
 8002536:	2243      	movs	r2, #67	; 0x43
 8002538:	21d0      	movs	r1, #208	; 0xd0
 800253a:	4817      	ldr	r0, [pc, #92]	; (8002598 <MPU6050_Read_Gyro+0x78>)
 800253c:	f001 f90a 	bl	8003754 <HAL_I2C_Mem_Read>

	Gx = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8002540:	783b      	ldrb	r3, [r7, #0]
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	b21a      	sxth	r2, r3
 8002546:	787b      	ldrb	r3, [r7, #1]
 8002548:	b21b      	sxth	r3, r3
 800254a:	4313      	orrs	r3, r2
 800254c:	b21b      	sxth	r3, r3
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fbc4 	bl	8000cdc <__aeabi_i2f>
 8002554:	4603      	mov	r3, r0
 8002556:	4a11      	ldr	r2, [pc, #68]	; (800259c <MPU6050_Read_Gyro+0x7c>)
 8002558:	6013      	str	r3, [r2, #0]
	Gy = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800255a:	78bb      	ldrb	r3, [r7, #2]
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	b21a      	sxth	r2, r3
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	b21b      	sxth	r3, r3
 8002564:	4313      	orrs	r3, r2
 8002566:	b21b      	sxth	r3, r3
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe fbb7 	bl	8000cdc <__aeabi_i2f>
 800256e:	4603      	mov	r3, r0
 8002570:	4a0b      	ldr	r2, [pc, #44]	; (80025a0 <MPU6050_Read_Gyro+0x80>)
 8002572:	6013      	str	r3, [r2, #0]
	Gz = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8002574:	793b      	ldrb	r3, [r7, #4]
 8002576:	021b      	lsls	r3, r3, #8
 8002578:	b21a      	sxth	r2, r3
 800257a:	797b      	ldrb	r3, [r7, #5]
 800257c:	b21b      	sxth	r3, r3
 800257e:	4313      	orrs	r3, r2
 8002580:	b21b      	sxth	r3, r3
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fbaa 	bl	8000cdc <__aeabi_i2f>
 8002588:	4603      	mov	r3, r0
 800258a:	4a06      	ldr	r2, [pc, #24]	; (80025a4 <MPU6050_Read_Gyro+0x84>)
 800258c:	6013      	str	r3, [r2, #0]

}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000418 	.word	0x20000418
 800259c:	2000046c 	.word	0x2000046c
 80025a0:	20000478 	.word	0x20000478
 80025a4:	20000484 	.word	0x20000484

080025a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025ac:	b672      	cpsid	i
}
 80025ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025b0:	e7fe      	b.n	80025b0 <Error_Handler+0x8>
	...

080025b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <HAL_MspInit+0x5c>)
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	4a14      	ldr	r2, [pc, #80]	; (8002610 <HAL_MspInit+0x5c>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	6193      	str	r3, [r2, #24]
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_MspInit+0x5c>)
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025d2:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <HAL_MspInit+0x5c>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4a0e      	ldr	r2, [pc, #56]	; (8002610 <HAL_MspInit+0x5c>)
 80025d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025dc:	61d3      	str	r3, [r2, #28]
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <HAL_MspInit+0x5c>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_MspInit+0x60>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <HAL_MspInit+0x60>)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	40021000 	.word	0x40021000
 8002614:	40010000 	.word	0x40010000

08002618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800261c:	e7fe      	b.n	800261c <NMI_Handler+0x4>

0800261e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002622:	e7fe      	b.n	8002622 <HardFault_Handler+0x4>

08002624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <MemManage_Handler+0x4>

0800262a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800262e:	e7fe      	b.n	800262e <BusFault_Handler+0x4>

08002630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002634:	e7fe      	b.n	8002634 <UsageFault_Handler+0x4>

08002636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr

0800264e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800265e:	f000 f9d1 	bl	8002a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800266c:	4802      	ldr	r0, [pc, #8]	; (8002678 <I2C1_EV_IRQHandler+0x10>)
 800266e:	f001 fad9 	bl	8003c24 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	200003c4 	.word	0x200003c4

0800267c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002680:	4802      	ldr	r0, [pc, #8]	; (800268c <I2C2_EV_IRQHandler+0x10>)
 8002682:	f001 facf 	bl	8003c24 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000418 	.word	0x20000418

08002690 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <USART1_IRQHandler+0x10>)
 8002696:	f003 fef5 	bl	8006484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000488 	.word	0x20000488

080026a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
	return 1;
 80026a8:	2301      	movs	r3, #1
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr

080026b2 <_kill>:

int _kill(int pid, int sig)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026bc:	f004 f9a2 	bl	8006a04 <__errno>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2216      	movs	r2, #22
 80026c4:	601a      	str	r2, [r3, #0]
	return -1;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <_exit>:

void _exit (int status)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026da:	f04f 31ff 	mov.w	r1, #4294967295
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ffe7 	bl	80026b2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026e4:	e7fe      	b.n	80026e4 <_exit+0x12>

080026e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	e00a      	b.n	800270e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026f8:	f3af 8000 	nop.w
 80026fc:	4601      	mov	r1, r0
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	60ba      	str	r2, [r7, #8]
 8002704:	b2ca      	uxtb	r2, r1
 8002706:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	3301      	adds	r3, #1
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	429a      	cmp	r2, r3
 8002714:	dbf0      	blt.n	80026f8 <_read+0x12>
	}

return len;
 8002716:	687b      	ldr	r3, [r7, #4]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	e009      	b.n	8002746 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	60ba      	str	r2, [r7, #8]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3301      	adds	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	dbf1      	blt.n	8002732 <_write+0x12>
	}
	return len;
 800274e:	687b      	ldr	r3, [r7, #4]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_close>:

int _close(int file)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	return -1;
 8002760:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800277e:	605a      	str	r2, [r3, #4]
	return 0;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <_isatty>:

int _isatty(int file)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	return 1;
 8002794:	2301      	movs	r3, #1
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
	return 0;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c0:	4a14      	ldr	r2, [pc, #80]	; (8002814 <_sbrk+0x5c>)
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <_sbrk+0x60>)
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027cc:	4b13      	ldr	r3, [pc, #76]	; (800281c <_sbrk+0x64>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d102      	bne.n	80027da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027d4:	4b11      	ldr	r3, [pc, #68]	; (800281c <_sbrk+0x64>)
 80027d6:	4a12      	ldr	r2, [pc, #72]	; (8002820 <_sbrk+0x68>)
 80027d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027da:	4b10      	ldr	r3, [pc, #64]	; (800281c <_sbrk+0x64>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d207      	bcs.n	80027f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027e8:	f004 f90c 	bl	8006a04 <__errno>
 80027ec:	4603      	mov	r3, r0
 80027ee:	220c      	movs	r2, #12
 80027f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027f2:	f04f 33ff 	mov.w	r3, #4294967295
 80027f6:	e009      	b.n	800280c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <_sbrk+0x64>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027fe:	4b07      	ldr	r3, [pc, #28]	; (800281c <_sbrk+0x64>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	4a05      	ldr	r2, [pc, #20]	; (800281c <_sbrk+0x64>)
 8002808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800280a:	68fb      	ldr	r3, [r7, #12]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20005000 	.word	0x20005000
 8002818:	00000400 	.word	0x00000400
 800281c:	2000026c 	.word	0x2000026c
 8002820:	200004e0 	.word	0x200004e0

08002824 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <MX_USART1_UART_Init+0x4c>)
 8002836:	4a12      	ldr	r2, [pc, #72]	; (8002880 <MX_USART1_UART_Init+0x50>)
 8002838:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <MX_USART1_UART_Init+0x4c>)
 800283c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002840:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002842:	4b0e      	ldr	r3, [pc, #56]	; (800287c <MX_USART1_UART_Init+0x4c>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <MX_USART1_UART_Init+0x4c>)
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <MX_USART1_UART_Init+0x4c>)
 8002850:	2200      	movs	r2, #0
 8002852:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <MX_USART1_UART_Init+0x4c>)
 8002856:	220c      	movs	r2, #12
 8002858:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <MX_USART1_UART_Init+0x4c>)
 800285c:	2200      	movs	r2, #0
 800285e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <MX_USART1_UART_Init+0x4c>)
 8002862:	2200      	movs	r2, #0
 8002864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002866:	4805      	ldr	r0, [pc, #20]	; (800287c <MX_USART1_UART_Init+0x4c>)
 8002868:	f003 fd6a 	bl	8006340 <HAL_UART_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002872:	f7ff fe99 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000488 	.word	0x20000488
 8002880:	40013800 	.word	0x40013800

08002884 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a20      	ldr	r2, [pc, #128]	; (8002920 <HAL_UART_MspInit+0x9c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d139      	bne.n	8002918 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028a4:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <HAL_UART_MspInit+0xa0>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	4a1e      	ldr	r2, [pc, #120]	; (8002924 <HAL_UART_MspInit+0xa0>)
 80028aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ae:	6193      	str	r3, [r2, #24]
 80028b0:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <HAL_UART_MspInit+0xa0>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028bc:	4b19      	ldr	r3, [pc, #100]	; (8002924 <HAL_UART_MspInit+0xa0>)
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	4a18      	ldr	r2, [pc, #96]	; (8002924 <HAL_UART_MspInit+0xa0>)
 80028c2:	f043 0304 	orr.w	r3, r3, #4
 80028c6:	6193      	str	r3, [r2, #24]
 80028c8:	4b16      	ldr	r3, [pc, #88]	; (8002924 <HAL_UART_MspInit+0xa0>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028de:	2303      	movs	r3, #3
 80028e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e2:	f107 0310 	add.w	r3, r7, #16
 80028e6:	4619      	mov	r1, r3
 80028e8:	480f      	ldr	r0, [pc, #60]	; (8002928 <HAL_UART_MspInit+0xa4>)
 80028ea:	f000 fa5b 	bl	8002da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fc:	f107 0310 	add.w	r3, r7, #16
 8002900:	4619      	mov	r1, r3
 8002902:	4809      	ldr	r0, [pc, #36]	; (8002928 <HAL_UART_MspInit+0xa4>)
 8002904:	f000 fa4e 	bl	8002da4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002908:	2200      	movs	r2, #0
 800290a:	2100      	movs	r1, #0
 800290c:	2025      	movs	r0, #37	; 0x25
 800290e:	f000 f990 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002912:	2025      	movs	r0, #37	; 0x25
 8002914:	f000 f9a9 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002918:	bf00      	nop
 800291a:	3720      	adds	r7, #32
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40013800 	.word	0x40013800
 8002924:	40021000 	.word	0x40021000
 8002928:	40010800 	.word	0x40010800

0800292c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800292c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800292e:	e003      	b.n	8002938 <LoopCopyDataInit>

08002930 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002932:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002934:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002936:	3104      	adds	r1, #4

08002938 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002938:	480a      	ldr	r0, [pc, #40]	; (8002964 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800293c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800293e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002940:	d3f6      	bcc.n	8002930 <CopyDataInit>
  ldr r2, =_sbss
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002944:	e002      	b.n	800294c <LoopFillZerobss>

08002946 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002948:	f842 3b04 	str.w	r3, [r2], #4

0800294c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800294c:	4b08      	ldr	r3, [pc, #32]	; (8002970 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800294e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002950:	d3f9      	bcc.n	8002946 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002952:	f7ff ff67 	bl	8002824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002956:	f004 f85b 	bl	8006a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800295a:	f7fe ff2d 	bl	80017b8 <main>
  bx lr
 800295e:	4770      	bx	lr
  ldr r3, =_sidata
 8002960:	0800c9a0 	.word	0x0800c9a0
  ldr r0, =_sdata
 8002964:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002968:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 800296c:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8002970:	200004dc 	.word	0x200004dc

08002974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002974:	e7fe      	b.n	8002974 <ADC1_2_IRQHandler>
	...

08002978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_Init+0x28>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <HAL_Init+0x28>)
 8002982:	f043 0310 	orr.w	r3, r3, #16
 8002986:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002988:	2003      	movs	r0, #3
 800298a:	f000 f947 	bl	8002c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800298e:	2000      	movs	r0, #0
 8002990:	f000 f808 	bl	80029a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002994:	f7ff fe0e 	bl	80025b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40022000 	.word	0x40022000

080029a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_InitTick+0x54>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_InitTick+0x58>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	4619      	mov	r1, r3
 80029b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f95f 	bl	8002c86 <HAL_SYSTICK_Config>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e00e      	b.n	80029f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b0f      	cmp	r3, #15
 80029d6:	d80a      	bhi.n	80029ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029d8:	2200      	movs	r2, #0
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	f000 f927 	bl	8002c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e4:	4a06      	ldr	r2, [pc, #24]	; (8002a00 <HAL_InitTick+0x5c>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e000      	b.n	80029f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20000000 	.word	0x20000000
 80029fc:	20000008 	.word	0x20000008
 8002a00:	20000004 	.word	0x20000004

08002a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_IncTick+0x1c>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_IncTick+0x20>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	4a03      	ldr	r2, [pc, #12]	; (8002a24 <HAL_IncTick+0x20>)
 8002a16:	6013      	str	r3, [r2, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	20000008 	.word	0x20000008
 8002a24:	200004c8 	.word	0x200004c8

08002a28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a2c:	4b02      	ldr	r3, [pc, #8]	; (8002a38 <HAL_GetTick+0x10>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr
 8002a38:	200004c8 	.word	0x200004c8

08002a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a44:	f7ff fff0 	bl	8002a28 <HAL_GetTick>
 8002a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a54:	d005      	beq.n	8002a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <HAL_Delay+0x44>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4413      	add	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a62:	bf00      	nop
 8002a64:	f7ff ffe0 	bl	8002a28 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d8f7      	bhi.n	8002a64 <HAL_Delay+0x28>
  {
  }
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000008 	.word	0x20000008

08002a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab6:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	60d3      	str	r3, [r2, #12]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	f003 0307 	and.w	r3, r3, #7
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	db0b      	blt.n	8002b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	4906      	ldr	r1, [pc, #24]	; (8002b1c <__NVIC_EnableIRQ+0x34>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2001      	movs	r0, #1
 8002b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100

08002b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	6039      	str	r1, [r7, #0]
 8002b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	db0a      	blt.n	8002b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	490c      	ldr	r1, [pc, #48]	; (8002b6c <__NVIC_SetPriority+0x4c>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	440b      	add	r3, r1
 8002b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b48:	e00a      	b.n	8002b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4908      	ldr	r1, [pc, #32]	; (8002b70 <__NVIC_SetPriority+0x50>)
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	3b04      	subs	r3, #4
 8002b58:	0112      	lsls	r2, r2, #4
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	761a      	strb	r2, [r3, #24]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000e100 	.word	0xe000e100
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f1c3 0307 	rsb	r3, r3, #7
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	bf28      	it	cs
 8002b92:	2304      	movcs	r3, #4
 8002b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d902      	bls.n	8002ba4 <NVIC_EncodePriority+0x30>
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3b03      	subs	r3, #3
 8002ba2:	e000      	b.n	8002ba6 <NVIC_EncodePriority+0x32>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	43d9      	mvns	r1, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	4313      	orrs	r3, r2
         );
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3724      	adds	r7, #36	; 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be8:	d301      	bcc.n	8002bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00f      	b.n	8002c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bee:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <SysTick_Config+0x40>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf6:	210f      	movs	r1, #15
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f7ff ff90 	bl	8002b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <SysTick_Config+0x40>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c06:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <SysTick_Config+0x40>)
 8002c08:	2207      	movs	r2, #7
 8002c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	e000e010 	.word	0xe000e010

08002c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff2d 	bl	8002a84 <__NVIC_SetPriorityGrouping>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c44:	f7ff ff42 	bl	8002acc <__NVIC_GetPriorityGrouping>
 8002c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	f7ff ff90 	bl	8002b74 <NVIC_EncodePriority>
 8002c54:	4602      	mov	r2, r0
 8002c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff5f 	bl	8002b20 <__NVIC_SetPriority>
}
 8002c62:	bf00      	nop
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff35 	bl	8002ae8 <__NVIC_EnableIRQ>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ffa2 	bl	8002bd8 <SysTick_Config>
 8002c94:	4603      	mov	r3, r0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d005      	beq.n	8002cc2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2204      	movs	r2, #4
 8002cba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
 8002cc0:	e051      	b.n	8002d66 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 020e 	bic.w	r2, r2, #14
 8002cd0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0201 	bic.w	r2, r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <HAL_DMA_Abort_IT+0xd0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d029      	beq.n	8002d40 <HAL_DMA_Abort_IT+0xa0>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a20      	ldr	r2, [pc, #128]	; (8002d74 <HAL_DMA_Abort_IT+0xd4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d022      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x9c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1f      	ldr	r2, [pc, #124]	; (8002d78 <HAL_DMA_Abort_IT+0xd8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d01a      	beq.n	8002d36 <HAL_DMA_Abort_IT+0x96>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a1d      	ldr	r2, [pc, #116]	; (8002d7c <HAL_DMA_Abort_IT+0xdc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d012      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x90>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <HAL_DMA_Abort_IT+0xe0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d00a      	beq.n	8002d2a <HAL_DMA_Abort_IT+0x8a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1a      	ldr	r2, [pc, #104]	; (8002d84 <HAL_DMA_Abort_IT+0xe4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d102      	bne.n	8002d24 <HAL_DMA_Abort_IT+0x84>
 8002d1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d22:	e00e      	b.n	8002d42 <HAL_DMA_Abort_IT+0xa2>
 8002d24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d28:	e00b      	b.n	8002d42 <HAL_DMA_Abort_IT+0xa2>
 8002d2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d2e:	e008      	b.n	8002d42 <HAL_DMA_Abort_IT+0xa2>
 8002d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d34:	e005      	b.n	8002d42 <HAL_DMA_Abort_IT+0xa2>
 8002d36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d3a:	e002      	b.n	8002d42 <HAL_DMA_Abort_IT+0xa2>
 8002d3c:	2310      	movs	r3, #16
 8002d3e:	e000      	b.n	8002d42 <HAL_DMA_Abort_IT+0xa2>
 8002d40:	2301      	movs	r3, #1
 8002d42:	4a11      	ldr	r2, [pc, #68]	; (8002d88 <HAL_DMA_Abort_IT+0xe8>)
 8002d44:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	4798      	blx	r3
    } 
  }
  return status;
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40020008 	.word	0x40020008
 8002d74:	4002001c 	.word	0x4002001c
 8002d78:	40020030 	.word	0x40020030
 8002d7c:	40020044 	.word	0x40020044
 8002d80:	40020058 	.word	0x40020058
 8002d84:	4002006c 	.word	0x4002006c
 8002d88:	40020000 	.word	0x40020000

08002d8c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b08b      	sub	sp, #44	; 0x2c
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dae:	2300      	movs	r3, #0
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002db2:	2300      	movs	r3, #0
 8002db4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db6:	e169      	b.n	800308c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002db8:	2201      	movs	r2, #1
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69fa      	ldr	r2, [r7, #28]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	f040 8158 	bne.w	8003086 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4a9a      	ldr	r2, [pc, #616]	; (8003044 <HAL_GPIO_Init+0x2a0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d05e      	beq.n	8002e9e <HAL_GPIO_Init+0xfa>
 8002de0:	4a98      	ldr	r2, [pc, #608]	; (8003044 <HAL_GPIO_Init+0x2a0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d875      	bhi.n	8002ed2 <HAL_GPIO_Init+0x12e>
 8002de6:	4a98      	ldr	r2, [pc, #608]	; (8003048 <HAL_GPIO_Init+0x2a4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d058      	beq.n	8002e9e <HAL_GPIO_Init+0xfa>
 8002dec:	4a96      	ldr	r2, [pc, #600]	; (8003048 <HAL_GPIO_Init+0x2a4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d86f      	bhi.n	8002ed2 <HAL_GPIO_Init+0x12e>
 8002df2:	4a96      	ldr	r2, [pc, #600]	; (800304c <HAL_GPIO_Init+0x2a8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d052      	beq.n	8002e9e <HAL_GPIO_Init+0xfa>
 8002df8:	4a94      	ldr	r2, [pc, #592]	; (800304c <HAL_GPIO_Init+0x2a8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d869      	bhi.n	8002ed2 <HAL_GPIO_Init+0x12e>
 8002dfe:	4a94      	ldr	r2, [pc, #592]	; (8003050 <HAL_GPIO_Init+0x2ac>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d04c      	beq.n	8002e9e <HAL_GPIO_Init+0xfa>
 8002e04:	4a92      	ldr	r2, [pc, #584]	; (8003050 <HAL_GPIO_Init+0x2ac>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d863      	bhi.n	8002ed2 <HAL_GPIO_Init+0x12e>
 8002e0a:	4a92      	ldr	r2, [pc, #584]	; (8003054 <HAL_GPIO_Init+0x2b0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d046      	beq.n	8002e9e <HAL_GPIO_Init+0xfa>
 8002e10:	4a90      	ldr	r2, [pc, #576]	; (8003054 <HAL_GPIO_Init+0x2b0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d85d      	bhi.n	8002ed2 <HAL_GPIO_Init+0x12e>
 8002e16:	2b12      	cmp	r3, #18
 8002e18:	d82a      	bhi.n	8002e70 <HAL_GPIO_Init+0xcc>
 8002e1a:	2b12      	cmp	r3, #18
 8002e1c:	d859      	bhi.n	8002ed2 <HAL_GPIO_Init+0x12e>
 8002e1e:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <HAL_GPIO_Init+0x80>)
 8002e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e24:	08002e9f 	.word	0x08002e9f
 8002e28:	08002e79 	.word	0x08002e79
 8002e2c:	08002e8b 	.word	0x08002e8b
 8002e30:	08002ecd 	.word	0x08002ecd
 8002e34:	08002ed3 	.word	0x08002ed3
 8002e38:	08002ed3 	.word	0x08002ed3
 8002e3c:	08002ed3 	.word	0x08002ed3
 8002e40:	08002ed3 	.word	0x08002ed3
 8002e44:	08002ed3 	.word	0x08002ed3
 8002e48:	08002ed3 	.word	0x08002ed3
 8002e4c:	08002ed3 	.word	0x08002ed3
 8002e50:	08002ed3 	.word	0x08002ed3
 8002e54:	08002ed3 	.word	0x08002ed3
 8002e58:	08002ed3 	.word	0x08002ed3
 8002e5c:	08002ed3 	.word	0x08002ed3
 8002e60:	08002ed3 	.word	0x08002ed3
 8002e64:	08002ed3 	.word	0x08002ed3
 8002e68:	08002e81 	.word	0x08002e81
 8002e6c:	08002e95 	.word	0x08002e95
 8002e70:	4a79      	ldr	r2, [pc, #484]	; (8003058 <HAL_GPIO_Init+0x2b4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e76:	e02c      	b.n	8002ed2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	623b      	str	r3, [r7, #32]
          break;
 8002e7e:	e029      	b.n	8002ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	3304      	adds	r3, #4
 8002e86:	623b      	str	r3, [r7, #32]
          break;
 8002e88:	e024      	b.n	8002ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	3308      	adds	r3, #8
 8002e90:	623b      	str	r3, [r7, #32]
          break;
 8002e92:	e01f      	b.n	8002ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	330c      	adds	r3, #12
 8002e9a:	623b      	str	r3, [r7, #32]
          break;
 8002e9c:	e01a      	b.n	8002ed4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d102      	bne.n	8002eac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	623b      	str	r3, [r7, #32]
          break;
 8002eaa:	e013      	b.n	8002ed4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d105      	bne.n	8002ec0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002eb4:	2308      	movs	r3, #8
 8002eb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	611a      	str	r2, [r3, #16]
          break;
 8002ebe:	e009      	b.n	8002ed4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	615a      	str	r2, [r3, #20]
          break;
 8002eca:	e003      	b.n	8002ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	623b      	str	r3, [r7, #32]
          break;
 8002ed0:	e000      	b.n	8002ed4 <HAL_GPIO_Init+0x130>
          break;
 8002ed2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2bff      	cmp	r3, #255	; 0xff
 8002ed8:	d801      	bhi.n	8002ede <HAL_GPIO_Init+0x13a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	e001      	b.n	8002ee2 <HAL_GPIO_Init+0x13e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	2bff      	cmp	r3, #255	; 0xff
 8002ee8:	d802      	bhi.n	8002ef0 <HAL_GPIO_Init+0x14c>
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	e002      	b.n	8002ef6 <HAL_GPIO_Init+0x152>
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	3b08      	subs	r3, #8
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	210f      	movs	r1, #15
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	401a      	ands	r2, r3
 8002f08:	6a39      	ldr	r1, [r7, #32]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	431a      	orrs	r2, r3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80b1 	beq.w	8003086 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f24:	4b4d      	ldr	r3, [pc, #308]	; (800305c <HAL_GPIO_Init+0x2b8>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	4a4c      	ldr	r2, [pc, #304]	; (800305c <HAL_GPIO_Init+0x2b8>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6193      	str	r3, [r2, #24]
 8002f30:	4b4a      	ldr	r3, [pc, #296]	; (800305c <HAL_GPIO_Init+0x2b8>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f3c:	4a48      	ldr	r2, [pc, #288]	; (8003060 <HAL_GPIO_Init+0x2bc>)
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	3302      	adds	r3, #2
 8002f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	220f      	movs	r2, #15
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a40      	ldr	r2, [pc, #256]	; (8003064 <HAL_GPIO_Init+0x2c0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d013      	beq.n	8002f90 <HAL_GPIO_Init+0x1ec>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a3f      	ldr	r2, [pc, #252]	; (8003068 <HAL_GPIO_Init+0x2c4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d00d      	beq.n	8002f8c <HAL_GPIO_Init+0x1e8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a3e      	ldr	r2, [pc, #248]	; (800306c <HAL_GPIO_Init+0x2c8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d007      	beq.n	8002f88 <HAL_GPIO_Init+0x1e4>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a3d      	ldr	r2, [pc, #244]	; (8003070 <HAL_GPIO_Init+0x2cc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d101      	bne.n	8002f84 <HAL_GPIO_Init+0x1e0>
 8002f80:	2303      	movs	r3, #3
 8002f82:	e006      	b.n	8002f92 <HAL_GPIO_Init+0x1ee>
 8002f84:	2304      	movs	r3, #4
 8002f86:	e004      	b.n	8002f92 <HAL_GPIO_Init+0x1ee>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e002      	b.n	8002f92 <HAL_GPIO_Init+0x1ee>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <HAL_GPIO_Init+0x1ee>
 8002f90:	2300      	movs	r3, #0
 8002f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f94:	f002 0203 	and.w	r2, r2, #3
 8002f98:	0092      	lsls	r2, r2, #2
 8002f9a:	4093      	lsls	r3, r2
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fa2:	492f      	ldr	r1, [pc, #188]	; (8003060 <HAL_GPIO_Init+0x2bc>)
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	3302      	adds	r3, #2
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d006      	beq.n	8002fca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fbc:	4b2d      	ldr	r3, [pc, #180]	; (8003074 <HAL_GPIO_Init+0x2d0>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	492c      	ldr	r1, [pc, #176]	; (8003074 <HAL_GPIO_Init+0x2d0>)
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	600b      	str	r3, [r1, #0]
 8002fc8:	e006      	b.n	8002fd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fca:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <HAL_GPIO_Init+0x2d0>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	4928      	ldr	r1, [pc, #160]	; (8003074 <HAL_GPIO_Init+0x2d0>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d006      	beq.n	8002ff2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fe4:	4b23      	ldr	r3, [pc, #140]	; (8003074 <HAL_GPIO_Init+0x2d0>)
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	4922      	ldr	r1, [pc, #136]	; (8003074 <HAL_GPIO_Init+0x2d0>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
 8002ff0:	e006      	b.n	8003000 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ff2:	4b20      	ldr	r3, [pc, #128]	; (8003074 <HAL_GPIO_Init+0x2d0>)
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	491e      	ldr	r1, [pc, #120]	; (8003074 <HAL_GPIO_Init+0x2d0>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d006      	beq.n	800301a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800300c:	4b19      	ldr	r3, [pc, #100]	; (8003074 <HAL_GPIO_Init+0x2d0>)
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	4918      	ldr	r1, [pc, #96]	; (8003074 <HAL_GPIO_Init+0x2d0>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	608b      	str	r3, [r1, #8]
 8003018:	e006      	b.n	8003028 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800301a:	4b16      	ldr	r3, [pc, #88]	; (8003074 <HAL_GPIO_Init+0x2d0>)
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	43db      	mvns	r3, r3
 8003022:	4914      	ldr	r1, [pc, #80]	; (8003074 <HAL_GPIO_Init+0x2d0>)
 8003024:	4013      	ands	r3, r2
 8003026:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d021      	beq.n	8003078 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003034:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <HAL_GPIO_Init+0x2d0>)
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	490e      	ldr	r1, [pc, #56]	; (8003074 <HAL_GPIO_Init+0x2d0>)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	60cb      	str	r3, [r1, #12]
 8003040:	e021      	b.n	8003086 <HAL_GPIO_Init+0x2e2>
 8003042:	bf00      	nop
 8003044:	10320000 	.word	0x10320000
 8003048:	10310000 	.word	0x10310000
 800304c:	10220000 	.word	0x10220000
 8003050:	10210000 	.word	0x10210000
 8003054:	10120000 	.word	0x10120000
 8003058:	10110000 	.word	0x10110000
 800305c:	40021000 	.word	0x40021000
 8003060:	40010000 	.word	0x40010000
 8003064:	40010800 	.word	0x40010800
 8003068:	40010c00 	.word	0x40010c00
 800306c:	40011000 	.word	0x40011000
 8003070:	40011400 	.word	0x40011400
 8003074:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_GPIO_Init+0x304>)
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	43db      	mvns	r3, r3
 8003080:	4909      	ldr	r1, [pc, #36]	; (80030a8 <HAL_GPIO_Init+0x304>)
 8003082:	4013      	ands	r3, r2
 8003084:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	3301      	adds	r3, #1
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	fa22 f303 	lsr.w	r3, r2, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	f47f ae8e 	bne.w	8002db8 <HAL_GPIO_Init+0x14>
  }
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	372c      	adds	r7, #44	; 0x2c
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr
 80030a8:	40010400 	.word	0x40010400

080030ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	807b      	strh	r3, [r7, #2]
 80030b8:	4613      	mov	r3, r2
 80030ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030bc:	787b      	ldrb	r3, [r7, #1]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030c2:	887a      	ldrh	r2, [r7, #2]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030c8:	e003      	b.n	80030d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030ca:	887b      	ldrh	r3, [r7, #2]
 80030cc:	041a      	lsls	r2, r3, #16
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	611a      	str	r2, [r3, #16]
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e12b      	b.n	8003346 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fe fad0 	bl	80016a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2224      	movs	r2, #36	; 0x24
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800312e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800313e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003140:	f003 f8b8 	bl	80062b4 <HAL_RCC_GetPCLK1Freq>
 8003144:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4a81      	ldr	r2, [pc, #516]	; (8003350 <HAL_I2C_Init+0x274>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d807      	bhi.n	8003160 <HAL_I2C_Init+0x84>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4a80      	ldr	r2, [pc, #512]	; (8003354 <HAL_I2C_Init+0x278>)
 8003154:	4293      	cmp	r3, r2
 8003156:	bf94      	ite	ls
 8003158:	2301      	movls	r3, #1
 800315a:	2300      	movhi	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e006      	b.n	800316e <HAL_I2C_Init+0x92>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4a7d      	ldr	r2, [pc, #500]	; (8003358 <HAL_I2C_Init+0x27c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	bf94      	ite	ls
 8003168:	2301      	movls	r3, #1
 800316a:	2300      	movhi	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e0e7      	b.n	8003346 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4a78      	ldr	r2, [pc, #480]	; (800335c <HAL_I2C_Init+0x280>)
 800317a:	fba2 2303 	umull	r2, r3, r2, r3
 800317e:	0c9b      	lsrs	r3, r3, #18
 8003180:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4a6a      	ldr	r2, [pc, #424]	; (8003350 <HAL_I2C_Init+0x274>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d802      	bhi.n	80031b0 <HAL_I2C_Init+0xd4>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	3301      	adds	r3, #1
 80031ae:	e009      	b.n	80031c4 <HAL_I2C_Init+0xe8>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031b6:	fb02 f303 	mul.w	r3, r2, r3
 80031ba:	4a69      	ldr	r2, [pc, #420]	; (8003360 <HAL_I2C_Init+0x284>)
 80031bc:	fba2 2303 	umull	r2, r3, r2, r3
 80031c0:	099b      	lsrs	r3, r3, #6
 80031c2:	3301      	adds	r3, #1
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	430b      	orrs	r3, r1
 80031ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	495c      	ldr	r1, [pc, #368]	; (8003350 <HAL_I2C_Init+0x274>)
 80031e0:	428b      	cmp	r3, r1
 80031e2:	d819      	bhi.n	8003218 <HAL_I2C_Init+0x13c>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	1e59      	subs	r1, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80031f2:	1c59      	adds	r1, r3, #1
 80031f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031f8:	400b      	ands	r3, r1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_I2C_Init+0x138>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1e59      	subs	r1, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	fbb1 f3f3 	udiv	r3, r1, r3
 800320c:	3301      	adds	r3, #1
 800320e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003212:	e051      	b.n	80032b8 <HAL_I2C_Init+0x1dc>
 8003214:	2304      	movs	r3, #4
 8003216:	e04f      	b.n	80032b8 <HAL_I2C_Init+0x1dc>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d111      	bne.n	8003244 <HAL_I2C_Init+0x168>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1e58      	subs	r0, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6859      	ldr	r1, [r3, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	440b      	add	r3, r1
 800322e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003232:	3301      	adds	r3, #1
 8003234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	e012      	b.n	800326a <HAL_I2C_Init+0x18e>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1e58      	subs	r0, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	0099      	lsls	r1, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	fbb0 f3f3 	udiv	r3, r0, r3
 800325a:	3301      	adds	r3, #1
 800325c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf0c      	ite	eq
 8003264:	2301      	moveq	r3, #1
 8003266:	2300      	movne	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_I2C_Init+0x196>
 800326e:	2301      	movs	r3, #1
 8003270:	e022      	b.n	80032b8 <HAL_I2C_Init+0x1dc>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10e      	bne.n	8003298 <HAL_I2C_Init+0x1bc>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1e58      	subs	r0, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6859      	ldr	r1, [r3, #4]
 8003282:	460b      	mov	r3, r1
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	440b      	add	r3, r1
 8003288:	fbb0 f3f3 	udiv	r3, r0, r3
 800328c:	3301      	adds	r3, #1
 800328e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003296:	e00f      	b.n	80032b8 <HAL_I2C_Init+0x1dc>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1e58      	subs	r0, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6859      	ldr	r1, [r3, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	0099      	lsls	r1, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ae:	3301      	adds	r3, #1
 80032b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	6809      	ldr	r1, [r1, #0]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69da      	ldr	r2, [r3, #28]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6911      	ldr	r1, [r2, #16]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68d2      	ldr	r2, [r2, #12]
 80032f2:	4311      	orrs	r1, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	430b      	orrs	r3, r1
 80032fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	000186a0 	.word	0x000186a0
 8003354:	001e847f 	.word	0x001e847f
 8003358:	003d08ff 	.word	0x003d08ff
 800335c:	431bde83 	.word	0x431bde83
 8003360:	10624dd3 	.word	0x10624dd3

08003364 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af02      	add	r7, sp, #8
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	461a      	mov	r2, r3
 8003370:	460b      	mov	r3, r1
 8003372:	817b      	strh	r3, [r7, #10]
 8003374:	4613      	mov	r3, r2
 8003376:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003378:	f7ff fb56 	bl	8002a28 <HAL_GetTick>
 800337c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b20      	cmp	r3, #32
 8003388:	f040 80e0 	bne.w	800354c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	2319      	movs	r3, #25
 8003392:	2201      	movs	r2, #1
 8003394:	4970      	ldr	r1, [pc, #448]	; (8003558 <HAL_I2C_Master_Transmit+0x1f4>)
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f002 f990 	bl	80056bc <I2C_WaitOnFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033a2:	2302      	movs	r3, #2
 80033a4:	e0d3      	b.n	800354e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_I2C_Master_Transmit+0x50>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e0cc      	b.n	800354e <HAL_I2C_Master_Transmit+0x1ea>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d007      	beq.n	80033da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0201 	orr.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2221      	movs	r2, #33	; 0x21
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2210      	movs	r2, #16
 80033f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	893a      	ldrh	r2, [r7, #8]
 800340a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4a50      	ldr	r2, [pc, #320]	; (800355c <HAL_I2C_Master_Transmit+0x1f8>)
 800341a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800341c:	8979      	ldrh	r1, [r7, #10]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	6a3a      	ldr	r2, [r7, #32]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f001 fea2 	bl	800516c <I2C_MasterRequestWrite>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e08d      	b.n	800354e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003448:	e066      	b.n	8003518 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	6a39      	ldr	r1, [r7, #32]
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f002 fa0a 	bl	8005868 <I2C_WaitOnTXEFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00d      	beq.n	8003476 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	2b04      	cmp	r3, #4
 8003460:	d107      	bne.n	8003472 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003470:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e06b      	b.n	800354e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	781a      	ldrb	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d11b      	bne.n	80034ec <HAL_I2C_Master_Transmit+0x188>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d017      	beq.n	80034ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	781a      	ldrb	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	6a39      	ldr	r1, [r7, #32]
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f002 f9fa 	bl	80058ea <I2C_WaitOnBTFFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00d      	beq.n	8003518 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	2b04      	cmp	r3, #4
 8003502:	d107      	bne.n	8003514 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003512:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e01a      	b.n	800354e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351c:	2b00      	cmp	r3, #0
 800351e:	d194      	bne.n	800344a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	e000      	b.n	800354e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800354c:	2302      	movs	r3, #2
  }
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	00100002 	.word	0x00100002
 800355c:	ffff0000 	.word	0xffff0000

08003560 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	4608      	mov	r0, r1
 800356a:	4611      	mov	r1, r2
 800356c:	461a      	mov	r2, r3
 800356e:	4603      	mov	r3, r0
 8003570:	817b      	strh	r3, [r7, #10]
 8003572:	460b      	mov	r3, r1
 8003574:	813b      	strh	r3, [r7, #8]
 8003576:	4613      	mov	r3, r2
 8003578:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800357a:	f7ff fa55 	bl	8002a28 <HAL_GetTick>
 800357e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b20      	cmp	r3, #32
 800358a:	f040 80d9 	bne.w	8003740 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	2319      	movs	r3, #25
 8003594:	2201      	movs	r2, #1
 8003596:	496d      	ldr	r1, [pc, #436]	; (800374c <HAL_I2C_Mem_Write+0x1ec>)
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f002 f88f 	bl	80056bc <I2C_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035a4:	2302      	movs	r3, #2
 80035a6:	e0cc      	b.n	8003742 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_I2C_Mem_Write+0x56>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e0c5      	b.n	8003742 <HAL_I2C_Mem_Write+0x1e2>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d007      	beq.n	80035dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2221      	movs	r2, #33	; 0x21
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2240      	movs	r2, #64	; 0x40
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a3a      	ldr	r2, [r7, #32]
 8003606:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800360c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4a4d      	ldr	r2, [pc, #308]	; (8003750 <HAL_I2C_Mem_Write+0x1f0>)
 800361c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800361e:	88f8      	ldrh	r0, [r7, #6]
 8003620:	893a      	ldrh	r2, [r7, #8]
 8003622:	8979      	ldrh	r1, [r7, #10]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	4603      	mov	r3, r0
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f001 fe1e 	bl	8005270 <I2C_RequestMemoryWrite>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d052      	beq.n	80036e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e081      	b.n	8003742 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f002 f910 	bl	8005868 <I2C_WaitOnTXEFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00d      	beq.n	800366a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	2b04      	cmp	r3, #4
 8003654:	d107      	bne.n	8003666 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003664:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e06b      	b.n	8003742 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	781a      	ldrb	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d11b      	bne.n	80036e0 <HAL_I2C_Mem_Write+0x180>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d017      	beq.n	80036e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1aa      	bne.n	800363e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f002 f8fc 	bl	80058ea <I2C_WaitOnBTFFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00d      	beq.n	8003714 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d107      	bne.n	8003710 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800370e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e016      	b.n	8003742 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	e000      	b.n	8003742 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003740:	2302      	movs	r3, #2
  }
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	00100002 	.word	0x00100002
 8003750:	ffff0000 	.word	0xffff0000

08003754 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08c      	sub	sp, #48	; 0x30
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	4608      	mov	r0, r1
 800375e:	4611      	mov	r1, r2
 8003760:	461a      	mov	r2, r3
 8003762:	4603      	mov	r3, r0
 8003764:	817b      	strh	r3, [r7, #10]
 8003766:	460b      	mov	r3, r1
 8003768:	813b      	strh	r3, [r7, #8]
 800376a:	4613      	mov	r3, r2
 800376c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003772:	f7ff f959 	bl	8002a28 <HAL_GetTick>
 8003776:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b20      	cmp	r3, #32
 8003782:	f040 8244 	bne.w	8003c0e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	2319      	movs	r3, #25
 800378c:	2201      	movs	r2, #1
 800378e:	4982      	ldr	r1, [pc, #520]	; (8003998 <HAL_I2C_Mem_Read+0x244>)
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f001 ff93 	bl	80056bc <I2C_WaitOnFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800379c:	2302      	movs	r3, #2
 800379e:	e237      	b.n	8003c10 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_I2C_Mem_Read+0x5a>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e230      	b.n	8003c10 <HAL_I2C_Mem_Read+0x4bc>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d007      	beq.n	80037d4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2222      	movs	r2, #34	; 0x22
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2240      	movs	r2, #64	; 0x40
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003804:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a62      	ldr	r2, [pc, #392]	; (800399c <HAL_I2C_Mem_Read+0x248>)
 8003814:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003816:	88f8      	ldrh	r0, [r7, #6]
 8003818:	893a      	ldrh	r2, [r7, #8]
 800381a:	8979      	ldrh	r1, [r7, #10]
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	4603      	mov	r3, r0
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f001 fdb8 	bl	800539c <I2C_RequestMemoryRead>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e1ec      	b.n	8003c10 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383a:	2b00      	cmp	r3, #0
 800383c:	d113      	bne.n	8003866 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	e1c0      	b.n	8003be8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386a:	2b01      	cmp	r3, #1
 800386c:	d11e      	bne.n	80038ac <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800387e:	b672      	cpsid	i
}
 8003880:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003882:	2300      	movs	r3, #0
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038a8:	b662      	cpsie	i
}
 80038aa:	e035      	b.n	8003918 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d11e      	bne.n	80038f2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038c4:	b672      	cpsid	i
}
 80038c6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038ee:	b662      	cpsie	i
}
 80038f0:	e012      	b.n	8003918 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003900:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003918:	e166      	b.n	8003be8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391e:	2b03      	cmp	r3, #3
 8003920:	f200 811f 	bhi.w	8003b62 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003928:	2b01      	cmp	r3, #1
 800392a:	d123      	bne.n	8003974 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f002 f84d 	bl	80059d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e167      	b.n	8003c10 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003972:	e139      	b.n	8003be8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003978:	2b02      	cmp	r3, #2
 800397a:	d152      	bne.n	8003a22 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003982:	2200      	movs	r2, #0
 8003984:	4906      	ldr	r1, [pc, #24]	; (80039a0 <HAL_I2C_Mem_Read+0x24c>)
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f001 fe98 	bl	80056bc <I2C_WaitOnFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e13c      	b.n	8003c10 <HAL_I2C_Mem_Read+0x4bc>
 8003996:	bf00      	nop
 8003998:	00100002 	.word	0x00100002
 800399c:	ffff0000 	.word	0xffff0000
 80039a0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80039a4:	b672      	cpsid	i
}
 80039a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039ea:	b662      	cpsie	i
}
 80039ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a20:	e0e2      	b.n	8003be8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a28:	2200      	movs	r2, #0
 8003a2a:	497b      	ldr	r1, [pc, #492]	; (8003c18 <HAL_I2C_Mem_Read+0x4c4>)
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f001 fe45 	bl	80056bc <I2C_WaitOnFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0e9      	b.n	8003c10 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a4c:	b672      	cpsid	i
}
 8003a4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a82:	4b66      	ldr	r3, [pc, #408]	; (8003c1c <HAL_I2C_Mem_Read+0x4c8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	08db      	lsrs	r3, r3, #3
 8003a88:	4a65      	ldr	r2, [pc, #404]	; (8003c20 <HAL_I2C_Mem_Read+0x4cc>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	0a1a      	lsrs	r2, r3, #8
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	00da      	lsls	r2, r3, #3
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d118      	bne.n	8003ada <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f043 0220 	orr.w	r2, r3, #32
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003aca:	b662      	cpsie	i
}
 8003acc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e09a      	b.n	8003c10 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d1d9      	bne.n	8003a9c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b2a:	b662      	cpsie	i
}
 8003b2c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b60:	e042      	b.n	8003be8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f001 ff32 	bl	80059d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e04c      	b.n	8003c10 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d118      	bne.n	8003be8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f47f ae94 	bne.w	800391a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e000      	b.n	8003c10 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003c0e:	2302      	movs	r3, #2
  }
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3728      	adds	r7, #40	; 0x28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	00010004 	.word	0x00010004
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	14f8b589 	.word	0x14f8b589

08003c24 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c44:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d003      	beq.n	8003c5c <HAL_I2C_EV_IRQHandler+0x38>
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	2b40      	cmp	r3, #64	; 0x40
 8003c58:	f040 80bd 	bne.w	8003dd6 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10d      	bne.n	8003c92 <HAL_I2C_EV_IRQHandler+0x6e>
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c7c:	d003      	beq.n	8003c86 <HAL_I2C_EV_IRQHandler+0x62>
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c84:	d101      	bne.n	8003c8a <HAL_I2C_EV_IRQHandler+0x66>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <HAL_I2C_EV_IRQHandler+0x68>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	f000 812e 	beq.w	8003eee <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00c      	beq.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x92>
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	0a5b      	lsrs	r3, r3, #9
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d006      	beq.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f001 ff15 	bl	8005ad8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fcb1 	bl	8004616 <I2C_Master_SB>
 8003cb4:	e08e      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	08db      	lsrs	r3, r3, #3
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d009      	beq.n	8003cd6 <HAL_I2C_EV_IRQHandler+0xb2>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	0a5b      	lsrs	r3, r3, #9
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fd26 	bl	8004720 <I2C_Master_ADD10>
 8003cd4:	e07e      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d009      	beq.n	8003cf6 <HAL_I2C_EV_IRQHandler+0xd2>
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	0a5b      	lsrs	r3, r3, #9
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fd3f 	bl	8004772 <I2C_Master_ADDR>
 8003cf4:	e06e      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	089b      	lsrs	r3, r3, #2
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d037      	beq.n	8003d72 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d10:	f000 80ef 	beq.w	8003ef2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	09db      	lsrs	r3, r3, #7
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00f      	beq.n	8003d40 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	0a9b      	lsrs	r3, r3, #10
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d009      	beq.n	8003d40 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	089b      	lsrs	r3, r3, #2
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d103      	bne.n	8003d40 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f93e 	bl	8003fba <I2C_MasterTransmit_TXE>
 8003d3e:	e049      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	089b      	lsrs	r3, r3, #2
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80d2 	beq.w	8003ef2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	0a5b      	lsrs	r3, r3, #9
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 80cb 	beq.w	8003ef2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	2b10      	cmp	r3, #16
 8003d60:	d103      	bne.n	8003d6a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f9c5 	bl	80040f2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d68:	e0c3      	b.n	8003ef2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fa29 	bl	80041c2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d70:	e0bf      	b.n	8003ef2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d80:	f000 80b7 	beq.w	8003ef2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	099b      	lsrs	r3, r3, #6
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00f      	beq.n	8003db0 <HAL_I2C_EV_IRQHandler+0x18c>
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	0a9b      	lsrs	r3, r3, #10
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d009      	beq.n	8003db0 <HAL_I2C_EV_IRQHandler+0x18c>
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d103      	bne.n	8003db0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fa99 	bl	80042e0 <I2C_MasterReceive_RXNE>
 8003dae:	e011      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	089b      	lsrs	r3, r3, #2
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 809a 	beq.w	8003ef2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	0a5b      	lsrs	r3, r3, #9
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 8093 	beq.w	8003ef2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fb38 	bl	8004442 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dd2:	e08e      	b.n	8003ef2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003dd4:	e08d      	b.n	8003ef2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d004      	beq.n	8003de8 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	e007      	b.n	8003df8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	085b      	lsrs	r3, r3, #1
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d012      	beq.n	8003e2a <HAL_I2C_EV_IRQHandler+0x206>
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	0a5b      	lsrs	r3, r3, #9
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00c      	beq.n	8003e2a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e20:	69b9      	ldr	r1, [r7, #24]
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fefc 	bl	8004c20 <I2C_Slave_ADDR>
 8003e28:	e066      	b.n	8003ef8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d009      	beq.n	8003e4a <HAL_I2C_EV_IRQHandler+0x226>
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	0a5b      	lsrs	r3, r3, #9
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 ff30 	bl	8004ca8 <I2C_Slave_STOPF>
 8003e48:	e056      	b.n	8003ef8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e4a:	7bbb      	ldrb	r3, [r7, #14]
 8003e4c:	2b21      	cmp	r3, #33	; 0x21
 8003e4e:	d002      	beq.n	8003e56 <HAL_I2C_EV_IRQHandler+0x232>
 8003e50:	7bbb      	ldrb	r3, [r7, #14]
 8003e52:	2b29      	cmp	r3, #41	; 0x29
 8003e54:	d125      	bne.n	8003ea2 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	09db      	lsrs	r3, r3, #7
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00f      	beq.n	8003e82 <HAL_I2C_EV_IRQHandler+0x25e>
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	0a9b      	lsrs	r3, r3, #10
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <HAL_I2C_EV_IRQHandler+0x25e>
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	089b      	lsrs	r3, r3, #2
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d103      	bne.n	8003e82 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fe14 	bl	8004aa8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e80:	e039      	b.n	8003ef6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	089b      	lsrs	r3, r3, #2
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d033      	beq.n	8003ef6 <HAL_I2C_EV_IRQHandler+0x2d2>
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	0a5b      	lsrs	r3, r3, #9
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d02d      	beq.n	8003ef6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fe41 	bl	8004b22 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ea0:	e029      	b.n	8003ef6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	099b      	lsrs	r3, r3, #6
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00f      	beq.n	8003ece <HAL_I2C_EV_IRQHandler+0x2aa>
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	0a9b      	lsrs	r3, r3, #10
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <HAL_I2C_EV_IRQHandler+0x2aa>
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	089b      	lsrs	r3, r3, #2
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d103      	bne.n	8003ece <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fe4b 	bl	8004b62 <I2C_SlaveReceive_RXNE>
 8003ecc:	e014      	b.n	8003ef8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	089b      	lsrs	r3, r3, #2
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00e      	beq.n	8003ef8 <HAL_I2C_EV_IRQHandler+0x2d4>
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	0a5b      	lsrs	r3, r3, #9
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d008      	beq.n	8003ef8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fe79 	bl	8004bde <I2C_SlaveReceive_BTF>
 8003eec:	e004      	b.n	8003ef8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8003eee:	bf00      	nop
 8003ef0:	e002      	b.n	8003ef8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ef2:	bf00      	nop
 8003ef4:	e000      	b.n	8003ef8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ef6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ef8:	3720      	adds	r7, #32
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr

08003f22 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr

08003f34 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr

08003f46 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	70fb      	strb	r3, [r7, #3]
 8003f52:	4613      	mov	r3, r2
 8003f54:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr

08003f72 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr

08003f84 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr

08003fba <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b084      	sub	sp, #16
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fd0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d150      	bne.n	8004082 <I2C_MasterTransmit_TXE+0xc8>
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	2b21      	cmp	r3, #33	; 0x21
 8003fe4:	d14d      	bne.n	8004082 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d01d      	beq.n	8004028 <I2C_MasterTransmit_TXE+0x6e>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d01a      	beq.n	8004028 <I2C_MasterTransmit_TXE+0x6e>
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ff8:	d016      	beq.n	8004028 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004008:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2211      	movs	r2, #17
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ff6c 	bl	8003efe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004026:	e060      	b.n	80040ea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004036:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004046:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b40      	cmp	r3, #64	; 0x40
 8004060:	d107      	bne.n	8004072 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ff81 	bl	8003f72 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004070:	e03b      	b.n	80040ea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff ff3f 	bl	8003efe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004080:	e033      	b.n	80040ea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	2b21      	cmp	r3, #33	; 0x21
 8004086:	d005      	beq.n	8004094 <I2C_MasterTransmit_TXE+0xda>
 8004088:	7bbb      	ldrb	r3, [r7, #14]
 800408a:	2b40      	cmp	r3, #64	; 0x40
 800408c:	d12d      	bne.n	80040ea <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800408e:	7bfb      	ldrb	r3, [r7, #15]
 8004090:	2b22      	cmp	r3, #34	; 0x22
 8004092:	d12a      	bne.n	80040ea <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d108      	bne.n	80040b0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ac:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80040ae:	e01c      	b.n	80040ea <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b40      	cmp	r3, #64	; 0x40
 80040ba:	d103      	bne.n	80040c4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f880 	bl	80041c2 <I2C_MemoryTransmit_TXE_BTF>
}
 80040c2:	e012      	b.n	80040ea <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	781a      	ldrb	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040e8:	e7ff      	b.n	80040ea <I2C_MasterTransmit_TXE+0x130>
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b21      	cmp	r3, #33	; 0x21
 800410a:	d156      	bne.n	80041ba <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d012      	beq.n	800413c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	781a      	ldrb	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800413a:	e03e      	b.n	80041ba <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b08      	cmp	r3, #8
 8004140:	d01d      	beq.n	800417e <I2C_MasterTransmit_BTF+0x8c>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b20      	cmp	r3, #32
 8004146:	d01a      	beq.n	800417e <I2C_MasterTransmit_BTF+0x8c>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800414e:	d016      	beq.n	800417e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800415e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2211      	movs	r2, #17
 8004164:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff fec1 	bl	8003efe <HAL_I2C_MasterTxCpltCallback>
}
 800417c:	e01d      	b.n	80041ba <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800418c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800419c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff fea2 	bl	8003efe <HAL_I2C_MasterTxCpltCallback>
}
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d11d      	bne.n	8004216 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d10b      	bne.n	80041fa <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f2:	1c9a      	adds	r2, r3, #2
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80041f8:	e06e      	b.n	80042d8 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fe:	b29b      	uxth	r3, r3
 8004200:	121b      	asrs	r3, r3, #8
 8004202:	b2da      	uxtb	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004214:	e060      	b.n	80042d8 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421a:	2b01      	cmp	r3, #1
 800421c:	d10b      	bne.n	8004236 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004222:	b2da      	uxtb	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004234:	e050      	b.n	80042d8 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423a:	2b02      	cmp	r3, #2
 800423c:	d14c      	bne.n	80042d8 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	2b22      	cmp	r3, #34	; 0x22
 8004242:	d108      	bne.n	8004256 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004252:	601a      	str	r2, [r3, #0]
}
 8004254:	e040      	b.n	80042d8 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d015      	beq.n	800428c <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	2b21      	cmp	r3, #33	; 0x21
 8004264:	d112      	bne.n	800428c <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	781a      	ldrb	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800428a:	e025      	b.n	80042d8 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d120      	bne.n	80042d8 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	2b21      	cmp	r3, #33	; 0x21
 800429a:	d11d      	bne.n	80042d8 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042aa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7ff fe4d 	bl	8003f72 <HAL_I2C_MemTxCpltCallback>
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b22      	cmp	r3, #34	; 0x22
 80042f2:	f040 80a2 	bne.w	800443a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b03      	cmp	r3, #3
 8004302:	d921      	bls.n	8004348 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b03      	cmp	r3, #3
 8004332:	f040 8082 	bne.w	800443a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004344:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004346:	e078      	b.n	800443a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	2b02      	cmp	r3, #2
 800434e:	d074      	beq.n	800443a <I2C_MasterReceive_RXNE+0x15a>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d002      	beq.n	800435c <I2C_MasterReceive_RXNE+0x7c>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d16e      	bne.n	800443a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f001 fb05 	bl	800596c <I2C_WaitOnSTOPRequestThroughIT>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d142      	bne.n	80043ee <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004376:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004386:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b40      	cmp	r3, #64	; 0x40
 80043c0:	d10a      	bne.n	80043d8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff fdd7 	bl	8003f84 <HAL_I2C_MemRxCpltCallback>
}
 80043d6:	e030      	b.n	800443a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2212      	movs	r2, #18
 80043e4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff fd92 	bl	8003f10 <HAL_I2C_MasterRxCpltCallback>
}
 80043ec:	e025      	b.n	800443a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043fc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff fdae 	bl	8003f96 <HAL_I2C_ErrorCallback>
}
 800443a:	bf00      	nop
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b04      	cmp	r3, #4
 8004458:	d11b      	bne.n	8004492 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004468:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004490:	e0bd      	b.n	800460e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b03      	cmp	r3, #3
 800449a:	d129      	bne.n	80044f0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044aa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d00a      	beq.n	80044c8 <I2C_MasterReceive_BTF+0x86>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d007      	beq.n	80044c8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691a      	ldr	r2, [r3, #16]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80044ee:	e08e      	b.n	800460e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d176      	bne.n	80045e8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d002      	beq.n	8004506 <I2C_MasterReceive_BTF+0xc4>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b10      	cmp	r3, #16
 8004504:	d108      	bne.n	8004518 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	e019      	b.n	800454c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b04      	cmp	r3, #4
 800451c:	d002      	beq.n	8004524 <I2C_MasterReceive_BTF+0xe2>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b02      	cmp	r3, #2
 8004522:	d108      	bne.n	8004536 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	e00a      	b.n	800454c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b10      	cmp	r3, #16
 800453a:	d007      	beq.n	800454c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800454a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691a      	ldr	r2, [r3, #16]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045a6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b40      	cmp	r3, #64	; 0x40
 80045ba:	d10a      	bne.n	80045d2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff fcda 	bl	8003f84 <HAL_I2C_MemRxCpltCallback>
}
 80045d0:	e01d      	b.n	800460e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2212      	movs	r2, #18
 80045de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff fc95 	bl	8003f10 <HAL_I2C_MasterRxCpltCallback>
}
 80045e6:	e012      	b.n	800460e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691a      	ldr	r2, [r3, #16]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b40      	cmp	r3, #64	; 0x40
 8004628:	d117      	bne.n	800465a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004636:	b2db      	uxtb	r3, r3
 8004638:	461a      	mov	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004642:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004644:	e067      	b.n	8004716 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f043 0301 	orr.w	r3, r3, #1
 8004650:	b2da      	uxtb	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	611a      	str	r2, [r3, #16]
}
 8004658:	e05d      	b.n	8004716 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004662:	d133      	bne.n	80046cc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b21      	cmp	r3, #33	; 0x21
 800466e:	d109      	bne.n	8004684 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004674:	b2db      	uxtb	r3, r3
 8004676:	461a      	mov	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004680:	611a      	str	r2, [r3, #16]
 8004682:	e008      	b.n	8004696 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004688:	b2db      	uxtb	r3, r3
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	b2da      	uxtb	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469a:	2b00      	cmp	r3, #0
 800469c:	d004      	beq.n	80046a8 <I2C_Master_SB+0x92>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d108      	bne.n	80046ba <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d032      	beq.n	8004716 <I2C_Master_SB+0x100>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d02d      	beq.n	8004716 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c8:	605a      	str	r2, [r3, #4]
}
 80046ca:	e024      	b.n	8004716 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10e      	bne.n	80046f2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d8:	b29b      	uxth	r3, r3
 80046da:	11db      	asrs	r3, r3, #7
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f003 0306 	and.w	r3, r3, #6
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f063 030f 	orn	r3, r3, #15
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	611a      	str	r2, [r3, #16]
}
 80046f0:	e011      	b.n	8004716 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d10d      	bne.n	8004716 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fe:	b29b      	uxth	r3, r3
 8004700:	11db      	asrs	r3, r3, #7
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f003 0306 	and.w	r3, r3, #6
 8004708:	b2db      	uxtb	r3, r3
 800470a:	f063 030e 	orn	r3, r3, #14
 800470e:	b2da      	uxtb	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	611a      	str	r2, [r3, #16]
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	b2da      	uxtb	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004738:	2b00      	cmp	r3, #0
 800473a:	d103      	bne.n	8004744 <I2C_Master_ADD10+0x24>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	2b00      	cmp	r3, #0
 8004742:	d011      	beq.n	8004768 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <I2C_Master_ADD10+0x38>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004766:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr

08004772 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004772:	b480      	push	{r7}
 8004774:	b091      	sub	sp, #68	; 0x44
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004780:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b22      	cmp	r3, #34	; 0x22
 800479a:	f040 8174 	bne.w	8004a86 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10f      	bne.n	80047c6 <I2C_Master_ADDR+0x54>
 80047a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80047aa:	2b40      	cmp	r3, #64	; 0x40
 80047ac:	d10b      	bne.n	80047c6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ae:	2300      	movs	r3, #0
 80047b0:	633b      	str	r3, [r7, #48]	; 0x30
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	633b      	str	r3, [r7, #48]	; 0x30
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	633b      	str	r3, [r7, #48]	; 0x30
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	e16b      	b.n	8004a9e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d11d      	bne.n	800480a <I2C_Master_ADDR+0x98>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047d6:	d118      	bne.n	800480a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d8:	2300      	movs	r3, #0
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047fc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	651a      	str	r2, [r3, #80]	; 0x50
 8004808:	e149      	b.n	8004a9e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480e:	b29b      	uxth	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d113      	bne.n	800483c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004814:	2300      	movs	r3, #0
 8004816:	62bb      	str	r3, [r7, #40]	; 0x28
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	e120      	b.n	8004a7e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b01      	cmp	r3, #1
 8004844:	f040 808a 	bne.w	800495c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800484e:	d137      	bne.n	80048c0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800486a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800486e:	d113      	bne.n	8004898 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800487e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004880:	2300      	movs	r3, #0
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	e0f2      	b.n	8004a7e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004898:	2300      	movs	r3, #0
 800489a:	623b      	str	r3, [r7, #32]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	623b      	str	r3, [r7, #32]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	623b      	str	r3, [r7, #32]
 80048ac:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	e0de      	b.n	8004a7e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d02e      	beq.n	8004924 <I2C_Master_ADDR+0x1b2>
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d02b      	beq.n	8004924 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80048cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ce:	2b12      	cmp	r3, #18
 80048d0:	d102      	bne.n	80048d8 <I2C_Master_ADDR+0x166>
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d125      	bne.n	8004924 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80048d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d00e      	beq.n	80048fc <I2C_Master_ADDR+0x18a>
 80048de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d00b      	beq.n	80048fc <I2C_Master_ADDR+0x18a>
 80048e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e6:	2b10      	cmp	r3, #16
 80048e8:	d008      	beq.n	80048fc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	e007      	b.n	800490c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800490a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800490c:	2300      	movs	r3, #0
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	61fb      	str	r3, [r7, #28]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	e0ac      	b.n	8004a7e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004932:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004934:	2300      	movs	r3, #0
 8004936:	61bb      	str	r3, [r7, #24]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	61bb      	str	r3, [r7, #24]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	e090      	b.n	8004a7e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d158      	bne.n	8004a18 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004968:	2b04      	cmp	r3, #4
 800496a:	d021      	beq.n	80049b0 <I2C_Master_ADDR+0x23e>
 800496c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496e:	2b02      	cmp	r3, #2
 8004970:	d01e      	beq.n	80049b0 <I2C_Master_ADDR+0x23e>
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	2b10      	cmp	r3, #16
 8004976:	d01b      	beq.n	80049b0 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004986:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e012      	b.n	80049d6 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049be:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c0:	2300      	movs	r3, #0
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e4:	d14b      	bne.n	8004a7e <I2C_Master_ADDR+0x30c>
 80049e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049ec:	d00b      	beq.n	8004a06 <I2C_Master_ADDR+0x294>
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d008      	beq.n	8004a06 <I2C_Master_ADDR+0x294>
 80049f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d005      	beq.n	8004a06 <I2C_Master_ADDR+0x294>
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d002      	beq.n	8004a06 <I2C_Master_ADDR+0x294>
 8004a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	d13b      	bne.n	8004a7e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a14:	605a      	str	r2, [r3, #4]
 8004a16:	e032      	b.n	8004a7e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a26:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a36:	d117      	bne.n	8004a68 <I2C_Master_ADDR+0x2f6>
 8004a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a3e:	d00b      	beq.n	8004a58 <I2C_Master_ADDR+0x2e6>
 8004a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d008      	beq.n	8004a58 <I2C_Master_ADDR+0x2e6>
 8004a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d005      	beq.n	8004a58 <I2C_Master_ADDR+0x2e6>
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4e:	2b10      	cmp	r3, #16
 8004a50:	d002      	beq.n	8004a58 <I2C_Master_ADDR+0x2e6>
 8004a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d107      	bne.n	8004a68 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a66:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004a84:	e00b      	b.n	8004a9e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a86:	2300      	movs	r3, #0
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	60bb      	str	r3, [r7, #8]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
}
 8004a9c:	e7ff      	b.n	8004a9e <I2C_Master_ADDR+0x32c>
 8004a9e:	bf00      	nop
 8004aa0:	3744      	adds	r7, #68	; 0x44
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr

08004aa8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d02b      	beq.n	8004b1a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	781a      	ldrb	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d114      	bne.n	8004b1a <I2C_SlaveTransmit_TXE+0x72>
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	2b29      	cmp	r3, #41	; 0x29
 8004af4:	d111      	bne.n	8004b1a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b04:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2221      	movs	r2, #33	; 0x21
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2228      	movs	r2, #40	; 0x28
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff fa04 	bl	8003f22 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d011      	beq.n	8004b58 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	781a      	ldrb	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr

08004b62 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b70:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d02c      	beq.n	8004bd6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d114      	bne.n	8004bd6 <I2C_SlaveReceive_RXNE+0x74>
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	2b2a      	cmp	r3, #42	; 0x2a
 8004bb0:	d111      	bne.n	8004bd6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2222      	movs	r2, #34	; 0x22
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2228      	movs	r2, #40	; 0x28
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff f9af 	bl	8003f34 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bd6:	bf00      	nop
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d012      	beq.n	8004c16 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691a      	ldr	r2, [r3, #16]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr

08004c20 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c3a:	2b28      	cmp	r3, #40	; 0x28
 8004c3c:	d127      	bne.n	8004c8e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	089b      	lsrs	r3, r3, #2
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	09db      	lsrs	r3, r3, #7
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d103      	bne.n	8004c72 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	81bb      	strh	r3, [r7, #12]
 8004c70:	e002      	b.n	8004c78 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004c80:	89ba      	ldrh	r2, [r7, #12]
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff f95d 	bl	8003f46 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c8c:	e008      	b.n	8004ca0 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f06f 0202 	mvn.w	r2, #2
 8004c96:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004ca0:	bf00      	nop
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cc6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60bb      	str	r3, [r7, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	60bb      	str	r3, [r7, #8]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d04:	d172      	bne.n	8004dec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	2b22      	cmp	r3, #34	; 0x22
 8004d0a:	d002      	beq.n	8004d12 <I2C_Slave_STOPF+0x6a>
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
 8004d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d10:	d135      	bne.n	8004d7e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	f043 0204 	orr.w	r2, r3, #4
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fe f81e 	bl	8002d8c <HAL_DMA_GetState>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d049      	beq.n	8004dea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	4a69      	ldr	r2, [pc, #420]	; (8004f00 <I2C_Slave_STOPF+0x258>)
 8004d5c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fd ff9c 	bl	8002ca0 <HAL_DMA_Abort_IT>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d03d      	beq.n	8004dea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d78:	4610      	mov	r0, r2
 8004d7a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d7c:	e035      	b.n	8004dea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d005      	beq.n	8004da2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f043 0204 	orr.w	r2, r3, #4
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004db0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fd ffe8 	bl	8002d8c <HAL_DMA_GetState>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d014      	beq.n	8004dec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc6:	4a4e      	ldr	r2, [pc, #312]	; (8004f00 <I2C_Slave_STOPF+0x258>)
 8004dc8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fd ff66 	bl	8002ca0 <HAL_DMA_Abort_IT>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004de4:	4610      	mov	r0, r2
 8004de6:	4798      	blx	r3
 8004de8:	e000      	b.n	8004dec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d03e      	beq.n	8004e74 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d112      	bne.n	8004e2a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e34:	2b40      	cmp	r3, #64	; 0x40
 8004e36:	d112      	bne.n	8004e5e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691a      	ldr	r2, [r3, #16]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	f043 0204 	orr.w	r2, r3, #4
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f843 	bl	8004f08 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004e82:	e039      	b.n	8004ef8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	2b2a      	cmp	r3, #42	; 0x2a
 8004e88:	d109      	bne.n	8004e9e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2228      	movs	r2, #40	; 0x28
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff f84b 	bl	8003f34 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b28      	cmp	r3, #40	; 0x28
 8004ea8:	d111      	bne.n	8004ece <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <I2C_Slave_STOPF+0x25c>)
 8004eae:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff f84a 	bl	8003f60 <HAL_I2C_ListenCpltCallback>
}
 8004ecc:	e014      	b.n	8004ef8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	2b22      	cmp	r3, #34	; 0x22
 8004ed4:	d002      	beq.n	8004edc <I2C_Slave_STOPF+0x234>
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	2b22      	cmp	r3, #34	; 0x22
 8004eda:	d10d      	bne.n	8004ef8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff f81e 	bl	8003f34 <HAL_I2C_SlaveRxCpltCallback>
}
 8004ef8:	bf00      	nop
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	0800556d 	.word	0x0800556d
 8004f04:	ffff0000 	.word	0xffff0000

08004f08 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f16:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f1e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f20:	7bbb      	ldrb	r3, [r7, #14]
 8004f22:	2b10      	cmp	r3, #16
 8004f24:	d002      	beq.n	8004f2c <I2C_ITError+0x24>
 8004f26:	7bbb      	ldrb	r3, [r7, #14]
 8004f28:	2b40      	cmp	r3, #64	; 0x40
 8004f2a:	d10a      	bne.n	8004f42 <I2C_ITError+0x3a>
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	2b22      	cmp	r3, #34	; 0x22
 8004f30:	d107      	bne.n	8004f42 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f40:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f48:	2b28      	cmp	r3, #40	; 0x28
 8004f4a:	d107      	bne.n	8004f5c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2228      	movs	r2, #40	; 0x28
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f5a:	e015      	b.n	8004f88 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f6a:	d00a      	beq.n	8004f82 <I2C_ITError+0x7a>
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	2b60      	cmp	r3, #96	; 0x60
 8004f70:	d007      	beq.n	8004f82 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f96:	d161      	bne.n	800505c <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fa6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d020      	beq.n	8004ff6 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb8:	4a6a      	ldr	r2, [pc, #424]	; (8005164 <I2C_ITError+0x25c>)
 8004fba:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fd fe6d 	bl	8002ca0 <HAL_DMA_Abort_IT>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8089 	beq.w	80050e0 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0201 	bic.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	4798      	blx	r3
 8004ff4:	e074      	b.n	80050e0 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffa:	4a5a      	ldr	r2, [pc, #360]	; (8005164 <I2C_ITError+0x25c>)
 8004ffc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	4618      	mov	r0, r3
 8005004:	f7fd fe4c 	bl	8002ca0 <HAL_DMA_Abort_IT>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d068      	beq.n	80050e0 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005018:	2b40      	cmp	r3, #64	; 0x40
 800501a:	d10b      	bne.n	8005034 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005056:	4610      	mov	r0, r2
 8005058:	4798      	blx	r3
 800505a:	e041      	b.n	80050e0 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b60      	cmp	r3, #96	; 0x60
 8005066:	d125      	bne.n	80050b4 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	d10b      	bne.n	800509c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691a      	ldr	r2, [r3, #16]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0201 	bic.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7fe ff7b 	bl	8003fa8 <HAL_I2C_AbortCpltCallback>
 80050b2:	e015      	b.n	80050e0 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050be:	2b40      	cmp	r3, #64	; 0x40
 80050c0:	d10b      	bne.n	80050da <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fe ff5b 	bl	8003f96 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10e      	bne.n	800510e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d109      	bne.n	800510e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005100:	2b00      	cmp	r3, #0
 8005102:	d104      	bne.n	800510e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800510a:	2b00      	cmp	r3, #0
 800510c:	d007      	beq.n	800511e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800511c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005124:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b04      	cmp	r3, #4
 8005130:	d113      	bne.n	800515a <I2C_ITError+0x252>
 8005132:	7bfb      	ldrb	r3, [r7, #15]
 8005134:	2b28      	cmp	r3, #40	; 0x28
 8005136:	d110      	bne.n	800515a <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a0b      	ldr	r2, [pc, #44]	; (8005168 <I2C_ITError+0x260>)
 800513c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2220      	movs	r2, #32
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7fe ff03 	bl	8003f60 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800515a:	bf00      	nop
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	0800556d 	.word	0x0800556d
 8005168:	ffff0000 	.word	0xffff0000

0800516c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af02      	add	r7, sp, #8
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	607a      	str	r2, [r7, #4]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	460b      	mov	r3, r1
 800517a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b08      	cmp	r3, #8
 8005186:	d006      	beq.n	8005196 <I2C_MasterRequestWrite+0x2a>
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d003      	beq.n	8005196 <I2C_MasterRequestWrite+0x2a>
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005194:	d108      	bne.n	80051a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	e00b      	b.n	80051c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ac:	2b12      	cmp	r3, #18
 80051ae:	d107      	bne.n	80051c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 fa75 	bl	80056bc <I2C_WaitOnFlagUntilTimeout>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00d      	beq.n	80051f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e6:	d103      	bne.n	80051f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e035      	b.n	8005260 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051fc:	d108      	bne.n	8005210 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051fe:	897b      	ldrh	r3, [r7, #10]
 8005200:	b2db      	uxtb	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800520c:	611a      	str	r2, [r3, #16]
 800520e:	e01b      	b.n	8005248 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005210:	897b      	ldrh	r3, [r7, #10]
 8005212:	11db      	asrs	r3, r3, #7
 8005214:	b2db      	uxtb	r3, r3
 8005216:	f003 0306 	and.w	r3, r3, #6
 800521a:	b2db      	uxtb	r3, r3
 800521c:	f063 030f 	orn	r3, r3, #15
 8005220:	b2da      	uxtb	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	490e      	ldr	r1, [pc, #56]	; (8005268 <I2C_MasterRequestWrite+0xfc>)
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 fa9b 	bl	800576a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e010      	b.n	8005260 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800523e:	897b      	ldrh	r3, [r7, #10]
 8005240:	b2da      	uxtb	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	4907      	ldr	r1, [pc, #28]	; (800526c <I2C_MasterRequestWrite+0x100>)
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fa8b 	bl	800576a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e000      	b.n	8005260 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	00010008 	.word	0x00010008
 800526c:	00010002 	.word	0x00010002

08005270 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af02      	add	r7, sp, #8
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	4608      	mov	r0, r1
 800527a:	4611      	mov	r1, r2
 800527c:	461a      	mov	r2, r3
 800527e:	4603      	mov	r3, r0
 8005280:	817b      	strh	r3, [r7, #10]
 8005282:	460b      	mov	r3, r1
 8005284:	813b      	strh	r3, [r7, #8]
 8005286:	4613      	mov	r3, r2
 8005288:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005298:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 fa08 	bl	80056bc <I2C_WaitOnFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00d      	beq.n	80052ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c0:	d103      	bne.n	80052ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e05f      	b.n	800538e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052ce:	897b      	ldrh	r3, [r7, #10]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	461a      	mov	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	6a3a      	ldr	r2, [r7, #32]
 80052e2:	492d      	ldr	r1, [pc, #180]	; (8005398 <I2C_RequestMemoryWrite+0x128>)
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 fa40 	bl	800576a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e04c      	b.n	800538e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052f4:	2300      	movs	r3, #0
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800530a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530c:	6a39      	ldr	r1, [r7, #32]
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 faaa 	bl	8005868 <I2C_WaitOnTXEFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00d      	beq.n	8005336 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	2b04      	cmp	r3, #4
 8005320:	d107      	bne.n	8005332 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005330:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e02b      	b.n	800538e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d105      	bne.n	8005348 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800533c:	893b      	ldrh	r3, [r7, #8]
 800533e:	b2da      	uxtb	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	611a      	str	r2, [r3, #16]
 8005346:	e021      	b.n	800538c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005348:	893b      	ldrh	r3, [r7, #8]
 800534a:	0a1b      	lsrs	r3, r3, #8
 800534c:	b29b      	uxth	r3, r3
 800534e:	b2da      	uxtb	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005358:	6a39      	ldr	r1, [r7, #32]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 fa84 	bl	8005868 <I2C_WaitOnTXEFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00d      	beq.n	8005382 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	2b04      	cmp	r3, #4
 800536c:	d107      	bne.n	800537e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800537c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e005      	b.n	800538e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005382:	893b      	ldrh	r3, [r7, #8]
 8005384:	b2da      	uxtb	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	00010002 	.word	0x00010002

0800539c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	4608      	mov	r0, r1
 80053a6:	4611      	mov	r1, r2
 80053a8:	461a      	mov	r2, r3
 80053aa:	4603      	mov	r3, r0
 80053ac:	817b      	strh	r3, [r7, #10]
 80053ae:	460b      	mov	r3, r1
 80053b0:	813b      	strh	r3, [r7, #8]
 80053b2:	4613      	mov	r3, r2
 80053b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	2200      	movs	r2, #0
 80053de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 f96a 	bl	80056bc <I2C_WaitOnFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00d      	beq.n	800540a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053fc:	d103      	bne.n	8005406 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005404:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e0aa      	b.n	8005560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800540a:	897b      	ldrh	r3, [r7, #10]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005418:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	6a3a      	ldr	r2, [r7, #32]
 800541e:	4952      	ldr	r1, [pc, #328]	; (8005568 <I2C_RequestMemoryRead+0x1cc>)
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f9a2 	bl	800576a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e097      	b.n	8005560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005430:	2300      	movs	r3, #0
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005448:	6a39      	ldr	r1, [r7, #32]
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 fa0c 	bl	8005868 <I2C_WaitOnTXEFlagUntilTimeout>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00d      	beq.n	8005472 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	2b04      	cmp	r3, #4
 800545c:	d107      	bne.n	800546e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800546c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e076      	b.n	8005560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005472:	88fb      	ldrh	r3, [r7, #6]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d105      	bne.n	8005484 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005478:	893b      	ldrh	r3, [r7, #8]
 800547a:	b2da      	uxtb	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	611a      	str	r2, [r3, #16]
 8005482:	e021      	b.n	80054c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005484:	893b      	ldrh	r3, [r7, #8]
 8005486:	0a1b      	lsrs	r3, r3, #8
 8005488:	b29b      	uxth	r3, r3
 800548a:	b2da      	uxtb	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005494:	6a39      	ldr	r1, [r7, #32]
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f9e6 	bl	8005868 <I2C_WaitOnTXEFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00d      	beq.n	80054be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d107      	bne.n	80054ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e050      	b.n	8005560 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054be:	893b      	ldrh	r3, [r7, #8]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ca:	6a39      	ldr	r1, [r7, #32]
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f9cb 	bl	8005868 <I2C_WaitOnTXEFlagUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00d      	beq.n	80054f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d107      	bne.n	80054f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e035      	b.n	8005560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005502:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	2200      	movs	r2, #0
 800550c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 f8d3 	bl	80056bc <I2C_WaitOnFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00d      	beq.n	8005538 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800552a:	d103      	bne.n	8005534 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005532:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e013      	b.n	8005560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005538:	897b      	ldrh	r3, [r7, #10]
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f043 0301 	orr.w	r3, r3, #1
 8005540:	b2da      	uxtb	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	6a3a      	ldr	r2, [r7, #32]
 800554c:	4906      	ldr	r1, [pc, #24]	; (8005568 <I2C_RequestMemoryRead+0x1cc>)
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f90b 	bl	800576a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	00010002 	.word	0x00010002

0800556c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005584:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005586:	4b4b      	ldr	r3, [pc, #300]	; (80056b4 <I2C_DMAAbort+0x148>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	08db      	lsrs	r3, r3, #3
 800558c:	4a4a      	ldr	r2, [pc, #296]	; (80056b8 <I2C_DMAAbort+0x14c>)
 800558e:	fba2 2303 	umull	r2, r3, r2, r3
 8005592:	0a1a      	lsrs	r2, r3, #8
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	00da      	lsls	r2, r3, #3
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f043 0220 	orr.w	r2, r3, #32
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80055b2:	e00a      	b.n	80055ca <I2C_DMAAbort+0x5e>
    }
    count--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c8:	d0ea      	beq.n	80055a0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d6:	2200      	movs	r2, #0
 80055d8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e6:	2200      	movs	r2, #0
 80055e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2200      	movs	r2, #0
 80055fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560c:	2200      	movs	r2, #0
 800560e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	2200      	movs	r2, #0
 800561e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0201 	bic.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b60      	cmp	r3, #96	; 0x60
 800563a:	d10e      	bne.n	800565a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	2200      	movs	r2, #0
 8005650:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005652:	6978      	ldr	r0, [r7, #20]
 8005654:	f7fe fca8 	bl	8003fa8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005658:	e027      	b.n	80056aa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800565a:	7cfb      	ldrb	r3, [r7, #19]
 800565c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005660:	2b28      	cmp	r3, #40	; 0x28
 8005662:	d117      	bne.n	8005694 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005682:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2200      	movs	r2, #0
 8005688:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2228      	movs	r2, #40	; 0x28
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005692:	e007      	b.n	80056a4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80056a4:	6978      	ldr	r0, [r7, #20]
 80056a6:	f7fe fc76 	bl	8003f96 <HAL_I2C_ErrorCallback>
}
 80056aa:	bf00      	nop
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20000000 	.word	0x20000000
 80056b8:	14f8b589 	.word	0x14f8b589

080056bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	603b      	str	r3, [r7, #0]
 80056c8:	4613      	mov	r3, r2
 80056ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056cc:	e025      	b.n	800571a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d4:	d021      	beq.n	800571a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d6:	f7fd f9a7 	bl	8002a28 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d302      	bcc.n	80056ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d116      	bne.n	800571a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f043 0220 	orr.w	r2, r3, #32
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e023      	b.n	8005762 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	0c1b      	lsrs	r3, r3, #16
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b01      	cmp	r3, #1
 8005722:	d10d      	bne.n	8005740 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	43da      	mvns	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4013      	ands	r3, r2
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	bf0c      	ite	eq
 8005736:	2301      	moveq	r3, #1
 8005738:	2300      	movne	r3, #0
 800573a:	b2db      	uxtb	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	e00c      	b.n	800575a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	43da      	mvns	r2, r3
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4013      	ands	r3, r2
 800574c:	b29b      	uxth	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	bf0c      	ite	eq
 8005752:	2301      	moveq	r3, #1
 8005754:	2300      	movne	r3, #0
 8005756:	b2db      	uxtb	r3, r3
 8005758:	461a      	mov	r2, r3
 800575a:	79fb      	ldrb	r3, [r7, #7]
 800575c:	429a      	cmp	r2, r3
 800575e:	d0b6      	beq.n	80056ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b084      	sub	sp, #16
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	607a      	str	r2, [r7, #4]
 8005776:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005778:	e051      	b.n	800581e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005788:	d123      	bne.n	80057d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005798:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f043 0204 	orr.w	r2, r3, #4
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e046      	b.n	8005860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d8:	d021      	beq.n	800581e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057da:	f7fd f925 	bl	8002a28 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d302      	bcc.n	80057f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d116      	bne.n	800581e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	f043 0220 	orr.w	r2, r3, #32
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e020      	b.n	8005860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	0c1b      	lsrs	r3, r3, #16
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b01      	cmp	r3, #1
 8005826:	d10c      	bne.n	8005842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	43da      	mvns	r2, r3
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4013      	ands	r3, r2
 8005834:	b29b      	uxth	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	bf14      	ite	ne
 800583a:	2301      	movne	r3, #1
 800583c:	2300      	moveq	r3, #0
 800583e:	b2db      	uxtb	r3, r3
 8005840:	e00b      	b.n	800585a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	43da      	mvns	r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	4013      	ands	r3, r2
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	bf14      	ite	ne
 8005854:	2301      	movne	r3, #1
 8005856:	2300      	moveq	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d18d      	bne.n	800577a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005874:	e02d      	b.n	80058d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 f900 	bl	8005a7c <I2C_IsAcknowledgeFailed>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e02d      	b.n	80058e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588c:	d021      	beq.n	80058d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800588e:	f7fd f8cb 	bl	8002a28 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	429a      	cmp	r2, r3
 800589c:	d302      	bcc.n	80058a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d116      	bne.n	80058d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	f043 0220 	orr.w	r2, r3, #32
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e007      	b.n	80058e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058dc:	2b80      	cmp	r3, #128	; 0x80
 80058de:	d1ca      	bne.n	8005876 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058f6:	e02d      	b.n	8005954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f8bf 	bl	8005a7c <I2C_IsAcknowledgeFailed>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e02d      	b.n	8005964 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590e:	d021      	beq.n	8005954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005910:	f7fd f88a 	bl	8002a28 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	429a      	cmp	r2, r3
 800591e:	d302      	bcc.n	8005926 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d116      	bne.n	8005954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	f043 0220 	orr.w	r2, r3, #32
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e007      	b.n	8005964 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b04      	cmp	r3, #4
 8005960:	d1ca      	bne.n	80058f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005978:	4b13      	ldr	r3, [pc, #76]	; (80059c8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	08db      	lsrs	r3, r3, #3
 800597e:	4a13      	ldr	r2, [pc, #76]	; (80059cc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005980:	fba2 2303 	umull	r2, r3, r2, r3
 8005984:	0a1a      	lsrs	r2, r3, #8
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3b01      	subs	r3, #1
 8005992:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d107      	bne.n	80059aa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	f043 0220 	orr.w	r2, r3, #32
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e008      	b.n	80059bc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059b8:	d0e9      	beq.n	800598e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	20000000 	.word	0x20000000
 80059cc:	14f8b589 	.word	0x14f8b589

080059d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059dc:	e042      	b.n	8005a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	f003 0310 	and.w	r3, r3, #16
 80059e8:	2b10      	cmp	r3, #16
 80059ea:	d119      	bne.n	8005a20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f06f 0210 	mvn.w	r2, #16
 80059f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e029      	b.n	8005a74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a20:	f7fd f802 	bl	8002a28 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d302      	bcc.n	8005a36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d116      	bne.n	8005a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	f043 0220 	orr.w	r2, r3, #32
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e007      	b.n	8005a74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d1b5      	bne.n	80059de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a92:	d11b      	bne.n	8005acc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	f043 0204 	orr.w	r2, r3, #4
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr

08005ad8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005ae8:	d103      	bne.n	8005af2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005af0:	e007      	b.n	8005b02 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005afa:	d102      	bne.n	8005b02 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2208      	movs	r2, #8
 8005b00:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bc80      	pop	{r7}
 8005b0a:	4770      	bx	lr

08005b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e26c      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 8087 	beq.w	8005c3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b2c:	4b92      	ldr	r3, [pc, #584]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f003 030c 	and.w	r3, r3, #12
 8005b34:	2b04      	cmp	r3, #4
 8005b36:	d00c      	beq.n	8005b52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005b38:	4b8f      	ldr	r3, [pc, #572]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f003 030c 	and.w	r3, r3, #12
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d112      	bne.n	8005b6a <HAL_RCC_OscConfig+0x5e>
 8005b44:	4b8c      	ldr	r3, [pc, #560]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b50:	d10b      	bne.n	8005b6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b52:	4b89      	ldr	r3, [pc, #548]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d06c      	beq.n	8005c38 <HAL_RCC_OscConfig+0x12c>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d168      	bne.n	8005c38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e246      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b72:	d106      	bne.n	8005b82 <HAL_RCC_OscConfig+0x76>
 8005b74:	4b80      	ldr	r3, [pc, #512]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a7f      	ldr	r2, [pc, #508]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	e02e      	b.n	8005be0 <HAL_RCC_OscConfig+0xd4>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10c      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x98>
 8005b8a:	4b7b      	ldr	r3, [pc, #492]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a7a      	ldr	r2, [pc, #488]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	4b78      	ldr	r3, [pc, #480]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a77      	ldr	r2, [pc, #476]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	e01d      	b.n	8005be0 <HAL_RCC_OscConfig+0xd4>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bac:	d10c      	bne.n	8005bc8 <HAL_RCC_OscConfig+0xbc>
 8005bae:	4b72      	ldr	r3, [pc, #456]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a71      	ldr	r2, [pc, #452]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	4b6f      	ldr	r3, [pc, #444]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a6e      	ldr	r2, [pc, #440]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	e00b      	b.n	8005be0 <HAL_RCC_OscConfig+0xd4>
 8005bc8:	4b6b      	ldr	r3, [pc, #428]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a6a      	ldr	r2, [pc, #424]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	4b68      	ldr	r3, [pc, #416]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a67      	ldr	r2, [pc, #412]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d013      	beq.n	8005c10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be8:	f7fc ff1e 	bl	8002a28 <HAL_GetTick>
 8005bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bf0:	f7fc ff1a 	bl	8002a28 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b64      	cmp	r3, #100	; 0x64
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e1fa      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c02:	4b5d      	ldr	r3, [pc, #372]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0f0      	beq.n	8005bf0 <HAL_RCC_OscConfig+0xe4>
 8005c0e:	e014      	b.n	8005c3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c10:	f7fc ff0a 	bl	8002a28 <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c18:	f7fc ff06 	bl	8002a28 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b64      	cmp	r3, #100	; 0x64
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e1e6      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c2a:	4b53      	ldr	r3, [pc, #332]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f0      	bne.n	8005c18 <HAL_RCC_OscConfig+0x10c>
 8005c36:	e000      	b.n	8005c3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d063      	beq.n	8005d0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c46:	4b4c      	ldr	r3, [pc, #304]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f003 030c 	and.w	r3, r3, #12
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00b      	beq.n	8005c6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005c52:	4b49      	ldr	r3, [pc, #292]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f003 030c 	and.w	r3, r3, #12
 8005c5a:	2b08      	cmp	r3, #8
 8005c5c:	d11c      	bne.n	8005c98 <HAL_RCC_OscConfig+0x18c>
 8005c5e:	4b46      	ldr	r3, [pc, #280]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d116      	bne.n	8005c98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c6a:	4b43      	ldr	r3, [pc, #268]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d005      	beq.n	8005c82 <HAL_RCC_OscConfig+0x176>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d001      	beq.n	8005c82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e1ba      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c82:	4b3d      	ldr	r3, [pc, #244]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	4939      	ldr	r1, [pc, #228]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c96:	e03a      	b.n	8005d0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d020      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ca0:	4b36      	ldr	r3, [pc, #216]	; (8005d7c <HAL_RCC_OscConfig+0x270>)
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca6:	f7fc febf 	bl	8002a28 <HAL_GetTick>
 8005caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cac:	e008      	b.n	8005cc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cae:	f7fc febb 	bl	8002a28 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e19b      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cc0:	4b2d      	ldr	r3, [pc, #180]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0f0      	beq.n	8005cae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ccc:	4b2a      	ldr	r3, [pc, #168]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	4927      	ldr	r1, [pc, #156]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	600b      	str	r3, [r1, #0]
 8005ce0:	e015      	b.n	8005d0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ce2:	4b26      	ldr	r3, [pc, #152]	; (8005d7c <HAL_RCC_OscConfig+0x270>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce8:	f7fc fe9e 	bl	8002a28 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cf0:	f7fc fe9a 	bl	8002a28 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e17a      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d02:	4b1d      	ldr	r3, [pc, #116]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1f0      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d03a      	beq.n	8005d90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d019      	beq.n	8005d56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d22:	4b17      	ldr	r3, [pc, #92]	; (8005d80 <HAL_RCC_OscConfig+0x274>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d28:	f7fc fe7e 	bl	8002a28 <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d30:	f7fc fe7a 	bl	8002a28 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e15a      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d42:	4b0d      	ldr	r3, [pc, #52]	; (8005d78 <HAL_RCC_OscConfig+0x26c>)
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0f0      	beq.n	8005d30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005d4e:	2001      	movs	r0, #1
 8005d50:	f000 fad8 	bl	8006304 <RCC_Delay>
 8005d54:	e01c      	b.n	8005d90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d56:	4b0a      	ldr	r3, [pc, #40]	; (8005d80 <HAL_RCC_OscConfig+0x274>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d5c:	f7fc fe64 	bl	8002a28 <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d62:	e00f      	b.n	8005d84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d64:	f7fc fe60 	bl	8002a28 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d908      	bls.n	8005d84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e140      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4ec>
 8005d76:	bf00      	nop
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	42420000 	.word	0x42420000
 8005d80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d84:	4b9e      	ldr	r3, [pc, #632]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e9      	bne.n	8005d64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 80a6 	beq.w	8005eea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005da2:	4b97      	ldr	r3, [pc, #604]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10d      	bne.n	8005dca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dae:	4b94      	ldr	r3, [pc, #592]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	4a93      	ldr	r2, [pc, #588]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db8:	61d3      	str	r3, [r2, #28]
 8005dba:	4b91      	ldr	r3, [pc, #580]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc2:	60bb      	str	r3, [r7, #8]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dca:	4b8e      	ldr	r3, [pc, #568]	; (8006004 <HAL_RCC_OscConfig+0x4f8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d118      	bne.n	8005e08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dd6:	4b8b      	ldr	r3, [pc, #556]	; (8006004 <HAL_RCC_OscConfig+0x4f8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a8a      	ldr	r2, [pc, #552]	; (8006004 <HAL_RCC_OscConfig+0x4f8>)
 8005ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005de2:	f7fc fe21 	bl	8002a28 <HAL_GetTick>
 8005de6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de8:	e008      	b.n	8005dfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dea:	f7fc fe1d 	bl	8002a28 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b64      	cmp	r3, #100	; 0x64
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e0fd      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dfc:	4b81      	ldr	r3, [pc, #516]	; (8006004 <HAL_RCC_OscConfig+0x4f8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0f0      	beq.n	8005dea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d106      	bne.n	8005e1e <HAL_RCC_OscConfig+0x312>
 8005e10:	4b7b      	ldr	r3, [pc, #492]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	4a7a      	ldr	r2, [pc, #488]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005e16:	f043 0301 	orr.w	r3, r3, #1
 8005e1a:	6213      	str	r3, [r2, #32]
 8005e1c:	e02d      	b.n	8005e7a <HAL_RCC_OscConfig+0x36e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10c      	bne.n	8005e40 <HAL_RCC_OscConfig+0x334>
 8005e26:	4b76      	ldr	r3, [pc, #472]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	4a75      	ldr	r2, [pc, #468]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005e2c:	f023 0301 	bic.w	r3, r3, #1
 8005e30:	6213      	str	r3, [r2, #32]
 8005e32:	4b73      	ldr	r3, [pc, #460]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	4a72      	ldr	r2, [pc, #456]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005e38:	f023 0304 	bic.w	r3, r3, #4
 8005e3c:	6213      	str	r3, [r2, #32]
 8005e3e:	e01c      	b.n	8005e7a <HAL_RCC_OscConfig+0x36e>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	2b05      	cmp	r3, #5
 8005e46:	d10c      	bne.n	8005e62 <HAL_RCC_OscConfig+0x356>
 8005e48:	4b6d      	ldr	r3, [pc, #436]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	4a6c      	ldr	r2, [pc, #432]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005e4e:	f043 0304 	orr.w	r3, r3, #4
 8005e52:	6213      	str	r3, [r2, #32]
 8005e54:	4b6a      	ldr	r3, [pc, #424]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	4a69      	ldr	r2, [pc, #420]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005e5a:	f043 0301 	orr.w	r3, r3, #1
 8005e5e:	6213      	str	r3, [r2, #32]
 8005e60:	e00b      	b.n	8005e7a <HAL_RCC_OscConfig+0x36e>
 8005e62:	4b67      	ldr	r3, [pc, #412]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	4a66      	ldr	r2, [pc, #408]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005e68:	f023 0301 	bic.w	r3, r3, #1
 8005e6c:	6213      	str	r3, [r2, #32]
 8005e6e:	4b64      	ldr	r3, [pc, #400]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	4a63      	ldr	r2, [pc, #396]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005e74:	f023 0304 	bic.w	r3, r3, #4
 8005e78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d015      	beq.n	8005eae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e82:	f7fc fdd1 	bl	8002a28 <HAL_GetTick>
 8005e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e88:	e00a      	b.n	8005ea0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e8a:	f7fc fdcd 	bl	8002a28 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e0ab      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ea0:	4b57      	ldr	r3, [pc, #348]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0ee      	beq.n	8005e8a <HAL_RCC_OscConfig+0x37e>
 8005eac:	e014      	b.n	8005ed8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eae:	f7fc fdbb 	bl	8002a28 <HAL_GetTick>
 8005eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eb4:	e00a      	b.n	8005ecc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eb6:	f7fc fdb7 	bl	8002a28 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e095      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ecc:	4b4c      	ldr	r3, [pc, #304]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1ee      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d105      	bne.n	8005eea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ede:	4b48      	ldr	r3, [pc, #288]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	4a47      	ldr	r2, [pc, #284]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ee8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 8081 	beq.w	8005ff6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ef4:	4b42      	ldr	r3, [pc, #264]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f003 030c 	and.w	r3, r3, #12
 8005efc:	2b08      	cmp	r3, #8
 8005efe:	d061      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d146      	bne.n	8005f96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f08:	4b3f      	ldr	r3, [pc, #252]	; (8006008 <HAL_RCC_OscConfig+0x4fc>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f0e:	f7fc fd8b 	bl	8002a28 <HAL_GetTick>
 8005f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f14:	e008      	b.n	8005f28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f16:	f7fc fd87 	bl	8002a28 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e067      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f28:	4b35      	ldr	r3, [pc, #212]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1f0      	bne.n	8005f16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f3c:	d108      	bne.n	8005f50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f3e:	4b30      	ldr	r3, [pc, #192]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	492d      	ldr	r1, [pc, #180]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f50:	4b2b      	ldr	r3, [pc, #172]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a19      	ldr	r1, [r3, #32]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	430b      	orrs	r3, r1
 8005f62:	4927      	ldr	r1, [pc, #156]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f68:	4b27      	ldr	r3, [pc, #156]	; (8006008 <HAL_RCC_OscConfig+0x4fc>)
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f6e:	f7fc fd5b 	bl	8002a28 <HAL_GetTick>
 8005f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f74:	e008      	b.n	8005f88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f76:	f7fc fd57 	bl	8002a28 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d901      	bls.n	8005f88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e037      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f88:	4b1d      	ldr	r3, [pc, #116]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0f0      	beq.n	8005f76 <HAL_RCC_OscConfig+0x46a>
 8005f94:	e02f      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f96:	4b1c      	ldr	r3, [pc, #112]	; (8006008 <HAL_RCC_OscConfig+0x4fc>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f9c:	f7fc fd44 	bl	8002a28 <HAL_GetTick>
 8005fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fa4:	f7fc fd40 	bl	8002a28 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e020      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fb6:	4b12      	ldr	r3, [pc, #72]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1f0      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x498>
 8005fc2:	e018      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e013      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <HAL_RCC_OscConfig+0x4f4>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d106      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d001      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40021000 	.word	0x40021000
 8006004:	40007000 	.word	0x40007000
 8006008:	42420060 	.word	0x42420060

0800600c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e0d0      	b.n	80061c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006020:	4b6a      	ldr	r3, [pc, #424]	; (80061cc <HAL_RCC_ClockConfig+0x1c0>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d910      	bls.n	8006050 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800602e:	4b67      	ldr	r3, [pc, #412]	; (80061cc <HAL_RCC_ClockConfig+0x1c0>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f023 0207 	bic.w	r2, r3, #7
 8006036:	4965      	ldr	r1, [pc, #404]	; (80061cc <HAL_RCC_ClockConfig+0x1c0>)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	4313      	orrs	r3, r2
 800603c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800603e:	4b63      	ldr	r3, [pc, #396]	; (80061cc <HAL_RCC_ClockConfig+0x1c0>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	429a      	cmp	r2, r3
 800604a:	d001      	beq.n	8006050 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e0b8      	b.n	80061c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d020      	beq.n	800609e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006068:	4b59      	ldr	r3, [pc, #356]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	4a58      	ldr	r2, [pc, #352]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 800606e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006072:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0308 	and.w	r3, r3, #8
 800607c:	2b00      	cmp	r3, #0
 800607e:	d005      	beq.n	800608c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006080:	4b53      	ldr	r3, [pc, #332]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	4a52      	ldr	r2, [pc, #328]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 8006086:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800608a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800608c:	4b50      	ldr	r3, [pc, #320]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	494d      	ldr	r1, [pc, #308]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 800609a:	4313      	orrs	r3, r2
 800609c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d040      	beq.n	800612c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d107      	bne.n	80060c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060b2:	4b47      	ldr	r3, [pc, #284]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d115      	bne.n	80060ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e07f      	b.n	80061c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d107      	bne.n	80060da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ca:	4b41      	ldr	r3, [pc, #260]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d109      	bne.n	80060ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e073      	b.n	80061c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060da:	4b3d      	ldr	r3, [pc, #244]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e06b      	b.n	80061c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060ea:	4b39      	ldr	r3, [pc, #228]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f023 0203 	bic.w	r2, r3, #3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	4936      	ldr	r1, [pc, #216]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060fc:	f7fc fc94 	bl	8002a28 <HAL_GetTick>
 8006100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006102:	e00a      	b.n	800611a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006104:	f7fc fc90 	bl	8002a28 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006112:	4293      	cmp	r3, r2
 8006114:	d901      	bls.n	800611a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e053      	b.n	80061c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800611a:	4b2d      	ldr	r3, [pc, #180]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f003 020c 	and.w	r2, r3, #12
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	429a      	cmp	r2, r3
 800612a:	d1eb      	bne.n	8006104 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800612c:	4b27      	ldr	r3, [pc, #156]	; (80061cc <HAL_RCC_ClockConfig+0x1c0>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	429a      	cmp	r2, r3
 8006138:	d210      	bcs.n	800615c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800613a:	4b24      	ldr	r3, [pc, #144]	; (80061cc <HAL_RCC_ClockConfig+0x1c0>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f023 0207 	bic.w	r2, r3, #7
 8006142:	4922      	ldr	r1, [pc, #136]	; (80061cc <HAL_RCC_ClockConfig+0x1c0>)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	4313      	orrs	r3, r2
 8006148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800614a:	4b20      	ldr	r3, [pc, #128]	; (80061cc <HAL_RCC_ClockConfig+0x1c0>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0307 	and.w	r3, r3, #7
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d001      	beq.n	800615c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e032      	b.n	80061c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b00      	cmp	r3, #0
 8006166:	d008      	beq.n	800617a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006168:	4b19      	ldr	r3, [pc, #100]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	4916      	ldr	r1, [pc, #88]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 8006176:	4313      	orrs	r3, r2
 8006178:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0308 	and.w	r3, r3, #8
 8006182:	2b00      	cmp	r3, #0
 8006184:	d009      	beq.n	800619a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006186:	4b12      	ldr	r3, [pc, #72]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	490e      	ldr	r1, [pc, #56]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 8006196:	4313      	orrs	r3, r2
 8006198:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800619a:	f000 f821 	bl	80061e0 <HAL_RCC_GetSysClockFreq>
 800619e:	4602      	mov	r2, r0
 80061a0:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <HAL_RCC_ClockConfig+0x1c4>)
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	091b      	lsrs	r3, r3, #4
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	490a      	ldr	r1, [pc, #40]	; (80061d4 <HAL_RCC_ClockConfig+0x1c8>)
 80061ac:	5ccb      	ldrb	r3, [r1, r3]
 80061ae:	fa22 f303 	lsr.w	r3, r2, r3
 80061b2:	4a09      	ldr	r2, [pc, #36]	; (80061d8 <HAL_RCC_ClockConfig+0x1cc>)
 80061b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80061b6:	4b09      	ldr	r3, [pc, #36]	; (80061dc <HAL_RCC_ClockConfig+0x1d0>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fc fbf2 	bl	80029a4 <HAL_InitTick>

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	40022000 	.word	0x40022000
 80061d0:	40021000 	.word	0x40021000
 80061d4:	0800c324 	.word	0x0800c324
 80061d8:	20000000 	.word	0x20000000
 80061dc:	20000004 	.word	0x20000004

080061e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061e0:	b490      	push	{r4, r7}
 80061e2:	b08a      	sub	sp, #40	; 0x28
 80061e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80061e6:	4b2a      	ldr	r3, [pc, #168]	; (8006290 <HAL_RCC_GetSysClockFreq+0xb0>)
 80061e8:	1d3c      	adds	r4, r7, #4
 80061ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80061ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80061f0:	f240 2301 	movw	r3, #513	; 0x201
 80061f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	61fb      	str	r3, [r7, #28]
 80061fa:	2300      	movs	r3, #0
 80061fc:	61bb      	str	r3, [r7, #24]
 80061fe:	2300      	movs	r3, #0
 8006200:	627b      	str	r3, [r7, #36]	; 0x24
 8006202:	2300      	movs	r3, #0
 8006204:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800620a:	4b22      	ldr	r3, [pc, #136]	; (8006294 <HAL_RCC_GetSysClockFreq+0xb4>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f003 030c 	and.w	r3, r3, #12
 8006216:	2b04      	cmp	r3, #4
 8006218:	d002      	beq.n	8006220 <HAL_RCC_GetSysClockFreq+0x40>
 800621a:	2b08      	cmp	r3, #8
 800621c:	d003      	beq.n	8006226 <HAL_RCC_GetSysClockFreq+0x46>
 800621e:	e02d      	b.n	800627c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006220:	4b1d      	ldr	r3, [pc, #116]	; (8006298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006222:	623b      	str	r3, [r7, #32]
      break;
 8006224:	e02d      	b.n	8006282 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	0c9b      	lsrs	r3, r3, #18
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006232:	4413      	add	r3, r2
 8006234:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006238:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d013      	beq.n	800626c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006244:	4b13      	ldr	r3, [pc, #76]	; (8006294 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	0c5b      	lsrs	r3, r3, #17
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006252:	4413      	add	r3, r2
 8006254:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006258:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	4a0e      	ldr	r2, [pc, #56]	; (8006298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800625e:	fb02 f203 	mul.w	r2, r2, r3
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	fbb2 f3f3 	udiv	r3, r2, r3
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
 800626a:	e004      	b.n	8006276 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	4a0b      	ldr	r2, [pc, #44]	; (800629c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006270:	fb02 f303 	mul.w	r3, r2, r3
 8006274:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	623b      	str	r3, [r7, #32]
      break;
 800627a:	e002      	b.n	8006282 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800627c:	4b06      	ldr	r3, [pc, #24]	; (8006298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800627e:	623b      	str	r3, [r7, #32]
      break;
 8006280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006282:	6a3b      	ldr	r3, [r7, #32]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3728      	adds	r7, #40	; 0x28
 8006288:	46bd      	mov	sp, r7
 800628a:	bc90      	pop	{r4, r7}
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	0800c314 	.word	0x0800c314
 8006294:	40021000 	.word	0x40021000
 8006298:	007a1200 	.word	0x007a1200
 800629c:	003d0900 	.word	0x003d0900

080062a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062a0:	b480      	push	{r7}
 80062a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062a4:	4b02      	ldr	r3, [pc, #8]	; (80062b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80062a6:	681b      	ldr	r3, [r3, #0]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bc80      	pop	{r7}
 80062ae:	4770      	bx	lr
 80062b0:	20000000 	.word	0x20000000

080062b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80062b8:	f7ff fff2 	bl	80062a0 <HAL_RCC_GetHCLKFreq>
 80062bc:	4602      	mov	r2, r0
 80062be:	4b05      	ldr	r3, [pc, #20]	; (80062d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	0a1b      	lsrs	r3, r3, #8
 80062c4:	f003 0307 	and.w	r3, r3, #7
 80062c8:	4903      	ldr	r1, [pc, #12]	; (80062d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062ca:	5ccb      	ldrb	r3, [r1, r3]
 80062cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40021000 	.word	0x40021000
 80062d8:	0800c334 	.word	0x0800c334

080062dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80062e0:	f7ff ffde 	bl	80062a0 <HAL_RCC_GetHCLKFreq>
 80062e4:	4602      	mov	r2, r0
 80062e6:	4b05      	ldr	r3, [pc, #20]	; (80062fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	0adb      	lsrs	r3, r3, #11
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	4903      	ldr	r1, [pc, #12]	; (8006300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062f2:	5ccb      	ldrb	r3, [r1, r3]
 80062f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	40021000 	.word	0x40021000
 8006300:	0800c334 	.word	0x0800c334

08006304 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800630c:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <RCC_Delay+0x34>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a0a      	ldr	r2, [pc, #40]	; (800633c <RCC_Delay+0x38>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	0a5b      	lsrs	r3, r3, #9
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	fb02 f303 	mul.w	r3, r2, r3
 800631e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006320:	bf00      	nop
  }
  while (Delay --);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	1e5a      	subs	r2, r3, #1
 8006326:	60fa      	str	r2, [r7, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1f9      	bne.n	8006320 <RCC_Delay+0x1c>
}
 800632c:	bf00      	nop
 800632e:	bf00      	nop
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr
 8006338:	20000000 	.word	0x20000000
 800633c:	10624dd3 	.word	0x10624dd3

08006340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e03f      	b.n	80063d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d106      	bne.n	800636c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7fc fa8c 	bl	8002884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2224      	movs	r2, #36	; 0x24
 8006370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 faa7 	bl	80068d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	691a      	ldr	r2, [r3, #16]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	695a      	ldr	r2, [r3, #20]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063da:	b480      	push	{r7}
 80063dc:	b085      	sub	sp, #20
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	4613      	mov	r3, r2
 80063e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	d140      	bne.n	8006476 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <HAL_UART_Receive_IT+0x26>
 80063fa:	88fb      	ldrh	r3, [r7, #6]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e039      	b.n	8006478 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800640a:	2b01      	cmp	r3, #1
 800640c:	d101      	bne.n	8006412 <HAL_UART_Receive_IT+0x38>
 800640e:	2302      	movs	r3, #2
 8006410:	e032      	b.n	8006478 <HAL_UART_Receive_IT+0x9e>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	88fa      	ldrh	r2, [r7, #6]
 8006424:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	88fa      	ldrh	r2, [r7, #6]
 800642a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2222      	movs	r2, #34	; 0x22
 8006436:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006450:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	695a      	ldr	r2, [r3, #20]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f042 0201 	orr.w	r2, r2, #1
 8006460:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0220 	orr.w	r2, r2, #32
 8006470:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	e000      	b.n	8006478 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006476:	2302      	movs	r3, #2
  }
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	bc80      	pop	{r7}
 8006480:	4770      	bx	lr
	...

08006484 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	f003 030f 	and.w	r3, r3, #15
 80064b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10d      	bne.n	80064d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	f003 0320 	and.w	r3, r3, #32
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d008      	beq.n	80064d6 <HAL_UART_IRQHandler+0x52>
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f982 	bl	80067d8 <UART_Receive_IT>
      return;
 80064d4:	e0d0      	b.n	8006678 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80b0 	beq.w	800663e <HAL_UART_IRQHandler+0x1ba>
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d105      	bne.n	80064f4 <HAL_UART_IRQHandler+0x70>
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 80a5 	beq.w	800663e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00a      	beq.n	8006514 <HAL_UART_IRQHandler+0x90>
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006504:	2b00      	cmp	r3, #0
 8006506:	d005      	beq.n	8006514 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650c:	f043 0201 	orr.w	r2, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <HAL_UART_IRQHandler+0xb0>
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652c:	f043 0202 	orr.w	r2, r3, #2
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00a      	beq.n	8006554 <HAL_UART_IRQHandler+0xd0>
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654c:	f043 0204 	orr.w	r2, r3, #4
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00f      	beq.n	800657e <HAL_UART_IRQHandler+0xfa>
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	f003 0320 	and.w	r3, r3, #32
 8006564:	2b00      	cmp	r3, #0
 8006566:	d104      	bne.n	8006572 <HAL_UART_IRQHandler+0xee>
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	2b00      	cmp	r3, #0
 8006570:	d005      	beq.n	800657e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	f043 0208 	orr.w	r2, r3, #8
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006582:	2b00      	cmp	r3, #0
 8006584:	d077      	beq.n	8006676 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	d007      	beq.n	80065a0 <HAL_UART_IRQHandler+0x11c>
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f91c 	bl	80067d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	bf14      	ite	ne
 80065ae:	2301      	movne	r3, #1
 80065b0:	2300      	moveq	r3, #0
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d102      	bne.n	80065c8 <HAL_UART_IRQHandler+0x144>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d031      	beq.n	800662c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f86d 	bl	80066a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d023      	beq.n	8006624 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695a      	ldr	r2, [r3, #20]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d013      	beq.n	800661c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f8:	4a21      	ldr	r2, [pc, #132]	; (8006680 <HAL_UART_IRQHandler+0x1fc>)
 80065fa:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006600:	4618      	mov	r0, r3
 8006602:	f7fc fb4d 	bl	8002ca0 <HAL_DMA_Abort_IT>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d016      	beq.n	800663a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006616:	4610      	mov	r0, r2
 8006618:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800661a:	e00e      	b.n	800663a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f83a 	bl	8006696 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006622:	e00a      	b.n	800663a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f836 	bl	8006696 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662a:	e006      	b.n	800663a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f832 	bl	8006696 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006638:	e01d      	b.n	8006676 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800663a:	bf00      	nop
    return;
 800663c:	e01b      	b.n	8006676 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006644:	2b00      	cmp	r3, #0
 8006646:	d008      	beq.n	800665a <HAL_UART_IRQHandler+0x1d6>
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f859 	bl	800670a <UART_Transmit_IT>
    return;
 8006658:	e00e      	b.n	8006678 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	d009      	beq.n	8006678 <HAL_UART_IRQHandler+0x1f4>
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	d004      	beq.n	8006678 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f89a 	bl	80067a8 <UART_EndTransmit_IT>
    return;
 8006674:	e000      	b.n	8006678 <HAL_UART_IRQHandler+0x1f4>
    return;
 8006676:	bf00      	nop
  }
}
 8006678:	3720      	adds	r7, #32
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	080066e3 	.word	0x080066e3

08006684 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	bc80      	pop	{r7}
 8006694:	4770      	bx	lr

08006696 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bc80      	pop	{r7}
 80066a6:	4770      	bx	lr

080066a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695a      	ldr	r2, [r3, #20]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0201 	bic.w	r2, r2, #1
 80066ce:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	bc80      	pop	{r7}
 80066e0:	4770      	bx	lr

080066e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f7ff ffca 	bl	8006696 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006702:	bf00      	nop
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800670a:	b480      	push	{r7}
 800670c:	b085      	sub	sp, #20
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b21      	cmp	r3, #33	; 0x21
 800671c:	d13e      	bne.n	800679c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006726:	d114      	bne.n	8006752 <UART_Transmit_IT+0x48>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d110      	bne.n	8006752 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006744:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	1c9a      	adds	r2, r3, #2
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	621a      	str	r2, [r3, #32]
 8006750:	e008      	b.n	8006764 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	1c59      	adds	r1, r3, #1
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6211      	str	r1, [r2, #32]
 800675c:	781a      	ldrb	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006768:	b29b      	uxth	r3, r3
 800676a:	3b01      	subs	r3, #1
 800676c:	b29b      	uxth	r3, r3
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	4619      	mov	r1, r3
 8006772:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10f      	bne.n	8006798 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006786:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006796:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	e000      	b.n	800679e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800679c:	2302      	movs	r3, #2
  }
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bc80      	pop	{r7}
 80067a6:	4770      	bx	lr

080067a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff ff5b 	bl	8006684 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b22      	cmp	r3, #34	; 0x22
 80067ea:	d170      	bne.n	80068ce <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f4:	d117      	bne.n	8006826 <UART_Receive_IT+0x4e>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d113      	bne.n	8006826 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006806:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	b29b      	uxth	r3, r3
 8006810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006814:	b29a      	uxth	r2, r3
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681e:	1c9a      	adds	r2, r3, #2
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	629a      	str	r2, [r3, #40]	; 0x28
 8006824:	e026      	b.n	8006874 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800682c:	2300      	movs	r3, #0
 800682e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006838:	d007      	beq.n	800684a <UART_Receive_IT+0x72>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10a      	bne.n	8006858 <UART_Receive_IT+0x80>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	b2da      	uxtb	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	701a      	strb	r2, [r3, #0]
 8006856:	e008      	b.n	800686a <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006864:	b2da      	uxtb	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006878:	b29b      	uxth	r3, r3
 800687a:	3b01      	subs	r3, #1
 800687c:	b29b      	uxth	r3, r3
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	4619      	mov	r1, r3
 8006882:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006884:	2b00      	cmp	r3, #0
 8006886:	d120      	bne.n	80068ca <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68da      	ldr	r2, [r3, #12]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0220 	bic.w	r2, r2, #32
 8006896:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695a      	ldr	r2, [r3, #20]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 0201 	bic.w	r2, r2, #1
 80068b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2220      	movs	r2, #32
 80068bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7fa ff6d 	bl	80017a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	e002      	b.n	80068d0 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	e000      	b.n	80068d0 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80068ce:	2302      	movs	r3, #2
  }
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	4313      	orrs	r3, r2
 8006906:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006912:	f023 030c 	bic.w	r3, r3, #12
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6812      	ldr	r2, [r2, #0]
 800691a:	68b9      	ldr	r1, [r7, #8]
 800691c:	430b      	orrs	r3, r1
 800691e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699a      	ldr	r2, [r3, #24]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a2c      	ldr	r2, [pc, #176]	; (80069ec <UART_SetConfig+0x114>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d103      	bne.n	8006948 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006940:	f7ff fccc 	bl	80062dc <HAL_RCC_GetPCLK2Freq>
 8006944:	60f8      	str	r0, [r7, #12]
 8006946:	e002      	b.n	800694e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006948:	f7ff fcb4 	bl	80062b4 <HAL_RCC_GetPCLK1Freq>
 800694c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	009a      	lsls	r2, r3, #2
 8006958:	441a      	add	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	fbb2 f3f3 	udiv	r3, r2, r3
 8006964:	4a22      	ldr	r2, [pc, #136]	; (80069f0 <UART_SetConfig+0x118>)
 8006966:	fba2 2303 	umull	r2, r3, r2, r3
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	0119      	lsls	r1, r3, #4
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4613      	mov	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	009a      	lsls	r2, r3, #2
 8006978:	441a      	add	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	fbb2 f2f3 	udiv	r2, r2, r3
 8006984:	4b1a      	ldr	r3, [pc, #104]	; (80069f0 <UART_SetConfig+0x118>)
 8006986:	fba3 0302 	umull	r0, r3, r3, r2
 800698a:	095b      	lsrs	r3, r3, #5
 800698c:	2064      	movs	r0, #100	; 0x64
 800698e:	fb00 f303 	mul.w	r3, r0, r3
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	011b      	lsls	r3, r3, #4
 8006996:	3332      	adds	r3, #50	; 0x32
 8006998:	4a15      	ldr	r2, [pc, #84]	; (80069f0 <UART_SetConfig+0x118>)
 800699a:	fba2 2303 	umull	r2, r3, r2, r3
 800699e:	095b      	lsrs	r3, r3, #5
 80069a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069a4:	4419      	add	r1, r3
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	009a      	lsls	r2, r3, #2
 80069b0:	441a      	add	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80069bc:	4b0c      	ldr	r3, [pc, #48]	; (80069f0 <UART_SetConfig+0x118>)
 80069be:	fba3 0302 	umull	r0, r3, r3, r2
 80069c2:	095b      	lsrs	r3, r3, #5
 80069c4:	2064      	movs	r0, #100	; 0x64
 80069c6:	fb00 f303 	mul.w	r3, r0, r3
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	3332      	adds	r3, #50	; 0x32
 80069d0:	4a07      	ldr	r2, [pc, #28]	; (80069f0 <UART_SetConfig+0x118>)
 80069d2:	fba2 2303 	umull	r2, r3, r2, r3
 80069d6:	095b      	lsrs	r3, r3, #5
 80069d8:	f003 020f 	and.w	r2, r3, #15
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	440a      	add	r2, r1
 80069e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80069e4:	bf00      	nop
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	40013800 	.word	0x40013800
 80069f0:	51eb851f 	.word	0x51eb851f

080069f4 <atof>:
 80069f4:	2100      	movs	r1, #0
 80069f6:	f001 b8ad 	b.w	8007b54 <strtod>

080069fa <atoi>:
 80069fa:	220a      	movs	r2, #10
 80069fc:	2100      	movs	r1, #0
 80069fe:	f001 b93d 	b.w	8007c7c <strtol>
	...

08006a04 <__errno>:
 8006a04:	4b01      	ldr	r3, [pc, #4]	; (8006a0c <__errno+0x8>)
 8006a06:	6818      	ldr	r0, [r3, #0]
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	2000000c 	.word	0x2000000c

08006a10 <__libc_init_array>:
 8006a10:	b570      	push	{r4, r5, r6, lr}
 8006a12:	2600      	movs	r6, #0
 8006a14:	4d0c      	ldr	r5, [pc, #48]	; (8006a48 <__libc_init_array+0x38>)
 8006a16:	4c0d      	ldr	r4, [pc, #52]	; (8006a4c <__libc_init_array+0x3c>)
 8006a18:	1b64      	subs	r4, r4, r5
 8006a1a:	10a4      	asrs	r4, r4, #2
 8006a1c:	42a6      	cmp	r6, r4
 8006a1e:	d109      	bne.n	8006a34 <__libc_init_array+0x24>
 8006a20:	f005 fc60 	bl	800c2e4 <_init>
 8006a24:	2600      	movs	r6, #0
 8006a26:	4d0a      	ldr	r5, [pc, #40]	; (8006a50 <__libc_init_array+0x40>)
 8006a28:	4c0a      	ldr	r4, [pc, #40]	; (8006a54 <__libc_init_array+0x44>)
 8006a2a:	1b64      	subs	r4, r4, r5
 8006a2c:	10a4      	asrs	r4, r4, #2
 8006a2e:	42a6      	cmp	r6, r4
 8006a30:	d105      	bne.n	8006a3e <__libc_init_array+0x2e>
 8006a32:	bd70      	pop	{r4, r5, r6, pc}
 8006a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a38:	4798      	blx	r3
 8006a3a:	3601      	adds	r6, #1
 8006a3c:	e7ee      	b.n	8006a1c <__libc_init_array+0xc>
 8006a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a42:	4798      	blx	r3
 8006a44:	3601      	adds	r6, #1
 8006a46:	e7f2      	b.n	8006a2e <__libc_init_array+0x1e>
 8006a48:	0800c998 	.word	0x0800c998
 8006a4c:	0800c998 	.word	0x0800c998
 8006a50:	0800c998 	.word	0x0800c998
 8006a54:	0800c99c 	.word	0x0800c99c

08006a58 <memcpy>:
 8006a58:	440a      	add	r2, r1
 8006a5a:	4291      	cmp	r1, r2
 8006a5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a60:	d100      	bne.n	8006a64 <memcpy+0xc>
 8006a62:	4770      	bx	lr
 8006a64:	b510      	push	{r4, lr}
 8006a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a6a:	4291      	cmp	r1, r2
 8006a6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a70:	d1f9      	bne.n	8006a66 <memcpy+0xe>
 8006a72:	bd10      	pop	{r4, pc}

08006a74 <memset>:
 8006a74:	4603      	mov	r3, r0
 8006a76:	4402      	add	r2, r0
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d100      	bne.n	8006a7e <memset+0xa>
 8006a7c:	4770      	bx	lr
 8006a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a82:	e7f9      	b.n	8006a78 <memset+0x4>

08006a84 <_scanf_float>:
 8006a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a88:	b087      	sub	sp, #28
 8006a8a:	9303      	str	r3, [sp, #12]
 8006a8c:	688b      	ldr	r3, [r1, #8]
 8006a8e:	4617      	mov	r7, r2
 8006a90:	1e5a      	subs	r2, r3, #1
 8006a92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006a96:	bf85      	ittet	hi
 8006a98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006a9c:	195b      	addhi	r3, r3, r5
 8006a9e:	2300      	movls	r3, #0
 8006aa0:	9302      	strhi	r3, [sp, #8]
 8006aa2:	bf88      	it	hi
 8006aa4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006aa8:	468b      	mov	fp, r1
 8006aaa:	f04f 0500 	mov.w	r5, #0
 8006aae:	bf8c      	ite	hi
 8006ab0:	608b      	strhi	r3, [r1, #8]
 8006ab2:	9302      	strls	r3, [sp, #8]
 8006ab4:	680b      	ldr	r3, [r1, #0]
 8006ab6:	4680      	mov	r8, r0
 8006ab8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006abc:	f84b 3b1c 	str.w	r3, [fp], #28
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	465e      	mov	r6, fp
 8006ac4:	46aa      	mov	sl, r5
 8006ac6:	46a9      	mov	r9, r5
 8006ac8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006acc:	9501      	str	r5, [sp, #4]
 8006ace:	68a2      	ldr	r2, [r4, #8]
 8006ad0:	b152      	cbz	r2, 8006ae8 <_scanf_float+0x64>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	2b4e      	cmp	r3, #78	; 0x4e
 8006ad8:	d864      	bhi.n	8006ba4 <_scanf_float+0x120>
 8006ada:	2b40      	cmp	r3, #64	; 0x40
 8006adc:	d83c      	bhi.n	8006b58 <_scanf_float+0xd4>
 8006ade:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006ae2:	b2c8      	uxtb	r0, r1
 8006ae4:	280e      	cmp	r0, #14
 8006ae6:	d93a      	bls.n	8006b5e <_scanf_float+0xda>
 8006ae8:	f1b9 0f00 	cmp.w	r9, #0
 8006aec:	d003      	beq.n	8006af6 <_scanf_float+0x72>
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006afa:	f1ba 0f01 	cmp.w	sl, #1
 8006afe:	f200 8113 	bhi.w	8006d28 <_scanf_float+0x2a4>
 8006b02:	455e      	cmp	r6, fp
 8006b04:	f200 8105 	bhi.w	8006d12 <_scanf_float+0x28e>
 8006b08:	2501      	movs	r5, #1
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	b007      	add	sp, #28
 8006b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b12:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b16:	2a0d      	cmp	r2, #13
 8006b18:	d8e6      	bhi.n	8006ae8 <_scanf_float+0x64>
 8006b1a:	a101      	add	r1, pc, #4	; (adr r1, 8006b20 <_scanf_float+0x9c>)
 8006b1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b20:	08006c5f 	.word	0x08006c5f
 8006b24:	08006ae9 	.word	0x08006ae9
 8006b28:	08006ae9 	.word	0x08006ae9
 8006b2c:	08006ae9 	.word	0x08006ae9
 8006b30:	08006cbf 	.word	0x08006cbf
 8006b34:	08006c97 	.word	0x08006c97
 8006b38:	08006ae9 	.word	0x08006ae9
 8006b3c:	08006ae9 	.word	0x08006ae9
 8006b40:	08006c6d 	.word	0x08006c6d
 8006b44:	08006ae9 	.word	0x08006ae9
 8006b48:	08006ae9 	.word	0x08006ae9
 8006b4c:	08006ae9 	.word	0x08006ae9
 8006b50:	08006ae9 	.word	0x08006ae9
 8006b54:	08006c25 	.word	0x08006c25
 8006b58:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006b5c:	e7db      	b.n	8006b16 <_scanf_float+0x92>
 8006b5e:	290e      	cmp	r1, #14
 8006b60:	d8c2      	bhi.n	8006ae8 <_scanf_float+0x64>
 8006b62:	a001      	add	r0, pc, #4	; (adr r0, 8006b68 <_scanf_float+0xe4>)
 8006b64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b68:	08006c17 	.word	0x08006c17
 8006b6c:	08006ae9 	.word	0x08006ae9
 8006b70:	08006c17 	.word	0x08006c17
 8006b74:	08006cab 	.word	0x08006cab
 8006b78:	08006ae9 	.word	0x08006ae9
 8006b7c:	08006bc5 	.word	0x08006bc5
 8006b80:	08006c01 	.word	0x08006c01
 8006b84:	08006c01 	.word	0x08006c01
 8006b88:	08006c01 	.word	0x08006c01
 8006b8c:	08006c01 	.word	0x08006c01
 8006b90:	08006c01 	.word	0x08006c01
 8006b94:	08006c01 	.word	0x08006c01
 8006b98:	08006c01 	.word	0x08006c01
 8006b9c:	08006c01 	.word	0x08006c01
 8006ba0:	08006c01 	.word	0x08006c01
 8006ba4:	2b6e      	cmp	r3, #110	; 0x6e
 8006ba6:	d809      	bhi.n	8006bbc <_scanf_float+0x138>
 8006ba8:	2b60      	cmp	r3, #96	; 0x60
 8006baa:	d8b2      	bhi.n	8006b12 <_scanf_float+0x8e>
 8006bac:	2b54      	cmp	r3, #84	; 0x54
 8006bae:	d077      	beq.n	8006ca0 <_scanf_float+0x21c>
 8006bb0:	2b59      	cmp	r3, #89	; 0x59
 8006bb2:	d199      	bne.n	8006ae8 <_scanf_float+0x64>
 8006bb4:	2d07      	cmp	r5, #7
 8006bb6:	d197      	bne.n	8006ae8 <_scanf_float+0x64>
 8006bb8:	2508      	movs	r5, #8
 8006bba:	e029      	b.n	8006c10 <_scanf_float+0x18c>
 8006bbc:	2b74      	cmp	r3, #116	; 0x74
 8006bbe:	d06f      	beq.n	8006ca0 <_scanf_float+0x21c>
 8006bc0:	2b79      	cmp	r3, #121	; 0x79
 8006bc2:	e7f6      	b.n	8006bb2 <_scanf_float+0x12e>
 8006bc4:	6821      	ldr	r1, [r4, #0]
 8006bc6:	05c8      	lsls	r0, r1, #23
 8006bc8:	d51a      	bpl.n	8006c00 <_scanf_float+0x17c>
 8006bca:	9b02      	ldr	r3, [sp, #8]
 8006bcc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006bd0:	6021      	str	r1, [r4, #0]
 8006bd2:	f109 0901 	add.w	r9, r9, #1
 8006bd6:	b11b      	cbz	r3, 8006be0 <_scanf_float+0x15c>
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	3201      	adds	r2, #1
 8006bdc:	9302      	str	r3, [sp, #8]
 8006bde:	60a2      	str	r2, [r4, #8]
 8006be0:	68a3      	ldr	r3, [r4, #8]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	60a3      	str	r3, [r4, #8]
 8006be6:	6923      	ldr	r3, [r4, #16]
 8006be8:	3301      	adds	r3, #1
 8006bea:	6123      	str	r3, [r4, #16]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	607b      	str	r3, [r7, #4]
 8006bf4:	f340 8084 	ble.w	8006d00 <_scanf_float+0x27c>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	603b      	str	r3, [r7, #0]
 8006bfe:	e766      	b.n	8006ace <_scanf_float+0x4a>
 8006c00:	eb1a 0f05 	cmn.w	sl, r5
 8006c04:	f47f af70 	bne.w	8006ae8 <_scanf_float+0x64>
 8006c08:	6822      	ldr	r2, [r4, #0]
 8006c0a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006c0e:	6022      	str	r2, [r4, #0]
 8006c10:	f806 3b01 	strb.w	r3, [r6], #1
 8006c14:	e7e4      	b.n	8006be0 <_scanf_float+0x15c>
 8006c16:	6822      	ldr	r2, [r4, #0]
 8006c18:	0610      	lsls	r0, r2, #24
 8006c1a:	f57f af65 	bpl.w	8006ae8 <_scanf_float+0x64>
 8006c1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c22:	e7f4      	b.n	8006c0e <_scanf_float+0x18a>
 8006c24:	f1ba 0f00 	cmp.w	sl, #0
 8006c28:	d10e      	bne.n	8006c48 <_scanf_float+0x1c4>
 8006c2a:	f1b9 0f00 	cmp.w	r9, #0
 8006c2e:	d10e      	bne.n	8006c4e <_scanf_float+0x1ca>
 8006c30:	6822      	ldr	r2, [r4, #0]
 8006c32:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c36:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c3a:	d108      	bne.n	8006c4e <_scanf_float+0x1ca>
 8006c3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c40:	f04f 0a01 	mov.w	sl, #1
 8006c44:	6022      	str	r2, [r4, #0]
 8006c46:	e7e3      	b.n	8006c10 <_scanf_float+0x18c>
 8006c48:	f1ba 0f02 	cmp.w	sl, #2
 8006c4c:	d055      	beq.n	8006cfa <_scanf_float+0x276>
 8006c4e:	2d01      	cmp	r5, #1
 8006c50:	d002      	beq.n	8006c58 <_scanf_float+0x1d4>
 8006c52:	2d04      	cmp	r5, #4
 8006c54:	f47f af48 	bne.w	8006ae8 <_scanf_float+0x64>
 8006c58:	3501      	adds	r5, #1
 8006c5a:	b2ed      	uxtb	r5, r5
 8006c5c:	e7d8      	b.n	8006c10 <_scanf_float+0x18c>
 8006c5e:	f1ba 0f01 	cmp.w	sl, #1
 8006c62:	f47f af41 	bne.w	8006ae8 <_scanf_float+0x64>
 8006c66:	f04f 0a02 	mov.w	sl, #2
 8006c6a:	e7d1      	b.n	8006c10 <_scanf_float+0x18c>
 8006c6c:	b97d      	cbnz	r5, 8006c8e <_scanf_float+0x20a>
 8006c6e:	f1b9 0f00 	cmp.w	r9, #0
 8006c72:	f47f af3c 	bne.w	8006aee <_scanf_float+0x6a>
 8006c76:	6822      	ldr	r2, [r4, #0]
 8006c78:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c7c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c80:	f47f af39 	bne.w	8006af6 <_scanf_float+0x72>
 8006c84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c88:	2501      	movs	r5, #1
 8006c8a:	6022      	str	r2, [r4, #0]
 8006c8c:	e7c0      	b.n	8006c10 <_scanf_float+0x18c>
 8006c8e:	2d03      	cmp	r5, #3
 8006c90:	d0e2      	beq.n	8006c58 <_scanf_float+0x1d4>
 8006c92:	2d05      	cmp	r5, #5
 8006c94:	e7de      	b.n	8006c54 <_scanf_float+0x1d0>
 8006c96:	2d02      	cmp	r5, #2
 8006c98:	f47f af26 	bne.w	8006ae8 <_scanf_float+0x64>
 8006c9c:	2503      	movs	r5, #3
 8006c9e:	e7b7      	b.n	8006c10 <_scanf_float+0x18c>
 8006ca0:	2d06      	cmp	r5, #6
 8006ca2:	f47f af21 	bne.w	8006ae8 <_scanf_float+0x64>
 8006ca6:	2507      	movs	r5, #7
 8006ca8:	e7b2      	b.n	8006c10 <_scanf_float+0x18c>
 8006caa:	6822      	ldr	r2, [r4, #0]
 8006cac:	0591      	lsls	r1, r2, #22
 8006cae:	f57f af1b 	bpl.w	8006ae8 <_scanf_float+0x64>
 8006cb2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006cb6:	6022      	str	r2, [r4, #0]
 8006cb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006cbc:	e7a8      	b.n	8006c10 <_scanf_float+0x18c>
 8006cbe:	6822      	ldr	r2, [r4, #0]
 8006cc0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006cc4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006cc8:	d006      	beq.n	8006cd8 <_scanf_float+0x254>
 8006cca:	0550      	lsls	r0, r2, #21
 8006ccc:	f57f af0c 	bpl.w	8006ae8 <_scanf_float+0x64>
 8006cd0:	f1b9 0f00 	cmp.w	r9, #0
 8006cd4:	f43f af0f 	beq.w	8006af6 <_scanf_float+0x72>
 8006cd8:	0591      	lsls	r1, r2, #22
 8006cda:	bf58      	it	pl
 8006cdc:	9901      	ldrpl	r1, [sp, #4]
 8006cde:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ce2:	bf58      	it	pl
 8006ce4:	eba9 0101 	subpl.w	r1, r9, r1
 8006ce8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006cec:	f04f 0900 	mov.w	r9, #0
 8006cf0:	bf58      	it	pl
 8006cf2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006cf6:	6022      	str	r2, [r4, #0]
 8006cf8:	e78a      	b.n	8006c10 <_scanf_float+0x18c>
 8006cfa:	f04f 0a03 	mov.w	sl, #3
 8006cfe:	e787      	b.n	8006c10 <_scanf_float+0x18c>
 8006d00:	4639      	mov	r1, r7
 8006d02:	4640      	mov	r0, r8
 8006d04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006d08:	4798      	blx	r3
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	f43f aedf 	beq.w	8006ace <_scanf_float+0x4a>
 8006d10:	e6ea      	b.n	8006ae8 <_scanf_float+0x64>
 8006d12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d16:	463a      	mov	r2, r7
 8006d18:	4640      	mov	r0, r8
 8006d1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d1e:	4798      	blx	r3
 8006d20:	6923      	ldr	r3, [r4, #16]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	6123      	str	r3, [r4, #16]
 8006d26:	e6ec      	b.n	8006b02 <_scanf_float+0x7e>
 8006d28:	1e6b      	subs	r3, r5, #1
 8006d2a:	2b06      	cmp	r3, #6
 8006d2c:	d825      	bhi.n	8006d7a <_scanf_float+0x2f6>
 8006d2e:	2d02      	cmp	r5, #2
 8006d30:	d836      	bhi.n	8006da0 <_scanf_float+0x31c>
 8006d32:	455e      	cmp	r6, fp
 8006d34:	f67f aee8 	bls.w	8006b08 <_scanf_float+0x84>
 8006d38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d3c:	463a      	mov	r2, r7
 8006d3e:	4640      	mov	r0, r8
 8006d40:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d44:	4798      	blx	r3
 8006d46:	6923      	ldr	r3, [r4, #16]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	6123      	str	r3, [r4, #16]
 8006d4c:	e7f1      	b.n	8006d32 <_scanf_float+0x2ae>
 8006d4e:	9802      	ldr	r0, [sp, #8]
 8006d50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d54:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006d58:	463a      	mov	r2, r7
 8006d5a:	9002      	str	r0, [sp, #8]
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	4798      	blx	r3
 8006d60:	6923      	ldr	r3, [r4, #16]
 8006d62:	3b01      	subs	r3, #1
 8006d64:	6123      	str	r3, [r4, #16]
 8006d66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d6a:	fa5f fa8a 	uxtb.w	sl, sl
 8006d6e:	f1ba 0f02 	cmp.w	sl, #2
 8006d72:	d1ec      	bne.n	8006d4e <_scanf_float+0x2ca>
 8006d74:	3d03      	subs	r5, #3
 8006d76:	b2ed      	uxtb	r5, r5
 8006d78:	1b76      	subs	r6, r6, r5
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	05da      	lsls	r2, r3, #23
 8006d7e:	d52f      	bpl.n	8006de0 <_scanf_float+0x35c>
 8006d80:	055b      	lsls	r3, r3, #21
 8006d82:	d510      	bpl.n	8006da6 <_scanf_float+0x322>
 8006d84:	455e      	cmp	r6, fp
 8006d86:	f67f aebf 	bls.w	8006b08 <_scanf_float+0x84>
 8006d8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d8e:	463a      	mov	r2, r7
 8006d90:	4640      	mov	r0, r8
 8006d92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d96:	4798      	blx	r3
 8006d98:	6923      	ldr	r3, [r4, #16]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	6123      	str	r3, [r4, #16]
 8006d9e:	e7f1      	b.n	8006d84 <_scanf_float+0x300>
 8006da0:	46aa      	mov	sl, r5
 8006da2:	9602      	str	r6, [sp, #8]
 8006da4:	e7df      	b.n	8006d66 <_scanf_float+0x2e2>
 8006da6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006daa:	6923      	ldr	r3, [r4, #16]
 8006dac:	2965      	cmp	r1, #101	; 0x65
 8006dae:	f103 33ff 	add.w	r3, r3, #4294967295
 8006db2:	f106 35ff 	add.w	r5, r6, #4294967295
 8006db6:	6123      	str	r3, [r4, #16]
 8006db8:	d00c      	beq.n	8006dd4 <_scanf_float+0x350>
 8006dba:	2945      	cmp	r1, #69	; 0x45
 8006dbc:	d00a      	beq.n	8006dd4 <_scanf_float+0x350>
 8006dbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dc2:	463a      	mov	r2, r7
 8006dc4:	4640      	mov	r0, r8
 8006dc6:	4798      	blx	r3
 8006dc8:	6923      	ldr	r3, [r4, #16]
 8006dca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	1eb5      	subs	r5, r6, #2
 8006dd2:	6123      	str	r3, [r4, #16]
 8006dd4:	463a      	mov	r2, r7
 8006dd6:	4640      	mov	r0, r8
 8006dd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ddc:	4798      	blx	r3
 8006dde:	462e      	mov	r6, r5
 8006de0:	6825      	ldr	r5, [r4, #0]
 8006de2:	f015 0510 	ands.w	r5, r5, #16
 8006de6:	d159      	bne.n	8006e9c <_scanf_float+0x418>
 8006de8:	7035      	strb	r5, [r6, #0]
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df4:	d11c      	bne.n	8006e30 <_scanf_float+0x3ac>
 8006df6:	9b01      	ldr	r3, [sp, #4]
 8006df8:	454b      	cmp	r3, r9
 8006dfa:	eba3 0209 	sub.w	r2, r3, r9
 8006dfe:	d124      	bne.n	8006e4a <_scanf_float+0x3c6>
 8006e00:	2200      	movs	r2, #0
 8006e02:	4659      	mov	r1, fp
 8006e04:	4640      	mov	r0, r8
 8006e06:	f000 fe9f 	bl	8007b48 <_strtod_r>
 8006e0a:	f8d4 c000 	ldr.w	ip, [r4]
 8006e0e:	9b03      	ldr	r3, [sp, #12]
 8006e10:	f01c 0f02 	tst.w	ip, #2
 8006e14:	4606      	mov	r6, r0
 8006e16:	460f      	mov	r7, r1
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	d021      	beq.n	8006e60 <_scanf_float+0x3dc>
 8006e1c:	9903      	ldr	r1, [sp, #12]
 8006e1e:	1d1a      	adds	r2, r3, #4
 8006e20:	600a      	str	r2, [r1, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	e9c3 6700 	strd	r6, r7, [r3]
 8006e28:	68e3      	ldr	r3, [r4, #12]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	60e3      	str	r3, [r4, #12]
 8006e2e:	e66c      	b.n	8006b0a <_scanf_float+0x86>
 8006e30:	9b04      	ldr	r3, [sp, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0e4      	beq.n	8006e00 <_scanf_float+0x37c>
 8006e36:	9905      	ldr	r1, [sp, #20]
 8006e38:	230a      	movs	r3, #10
 8006e3a:	462a      	mov	r2, r5
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	3101      	adds	r1, #1
 8006e40:	f000 ff1a 	bl	8007c78 <_strtol_r>
 8006e44:	9b04      	ldr	r3, [sp, #16]
 8006e46:	9e05      	ldr	r6, [sp, #20]
 8006e48:	1ac2      	subs	r2, r0, r3
 8006e4a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006e4e:	429e      	cmp	r6, r3
 8006e50:	bf28      	it	cs
 8006e52:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006e56:	4630      	mov	r0, r6
 8006e58:	4911      	ldr	r1, [pc, #68]	; (8006ea0 <_scanf_float+0x41c>)
 8006e5a:	f000 f829 	bl	8006eb0 <siprintf>
 8006e5e:	e7cf      	b.n	8006e00 <_scanf_float+0x37c>
 8006e60:	f01c 0f04 	tst.w	ip, #4
 8006e64:	f103 0e04 	add.w	lr, r3, #4
 8006e68:	d003      	beq.n	8006e72 <_scanf_float+0x3ee>
 8006e6a:	9903      	ldr	r1, [sp, #12]
 8006e6c:	f8c1 e000 	str.w	lr, [r1]
 8006e70:	e7d7      	b.n	8006e22 <_scanf_float+0x39e>
 8006e72:	9a03      	ldr	r2, [sp, #12]
 8006e74:	f8c2 e000 	str.w	lr, [r2]
 8006e78:	f8d3 8000 	ldr.w	r8, [r3]
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	f7f9 fdc4 	bl	8000a0c <__aeabi_dcmpun>
 8006e84:	b128      	cbz	r0, 8006e92 <_scanf_float+0x40e>
 8006e86:	4807      	ldr	r0, [pc, #28]	; (8006ea4 <_scanf_float+0x420>)
 8006e88:	f000 f80e 	bl	8006ea8 <nanf>
 8006e8c:	f8c8 0000 	str.w	r0, [r8]
 8006e90:	e7ca      	b.n	8006e28 <_scanf_float+0x3a4>
 8006e92:	4630      	mov	r0, r6
 8006e94:	4639      	mov	r1, r7
 8006e96:	f7f9 fe17 	bl	8000ac8 <__aeabi_d2f>
 8006e9a:	e7f7      	b.n	8006e8c <_scanf_float+0x408>
 8006e9c:	2500      	movs	r5, #0
 8006e9e:	e634      	b.n	8006b0a <_scanf_float+0x86>
 8006ea0:	0800c340 	.word	0x0800c340
 8006ea4:	0800c71a 	.word	0x0800c71a

08006ea8 <nanf>:
 8006ea8:	4800      	ldr	r0, [pc, #0]	; (8006eac <nanf+0x4>)
 8006eaa:	4770      	bx	lr
 8006eac:	7fc00000 	.word	0x7fc00000

08006eb0 <siprintf>:
 8006eb0:	b40e      	push	{r1, r2, r3}
 8006eb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006eb6:	b500      	push	{lr}
 8006eb8:	b09c      	sub	sp, #112	; 0x70
 8006eba:	ab1d      	add	r3, sp, #116	; 0x74
 8006ebc:	9002      	str	r0, [sp, #8]
 8006ebe:	9006      	str	r0, [sp, #24]
 8006ec0:	9107      	str	r1, [sp, #28]
 8006ec2:	9104      	str	r1, [sp, #16]
 8006ec4:	4808      	ldr	r0, [pc, #32]	; (8006ee8 <siprintf+0x38>)
 8006ec6:	4909      	ldr	r1, [pc, #36]	; (8006eec <siprintf+0x3c>)
 8006ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ecc:	9105      	str	r1, [sp, #20]
 8006ece:	6800      	ldr	r0, [r0, #0]
 8006ed0:	a902      	add	r1, sp, #8
 8006ed2:	9301      	str	r3, [sp, #4]
 8006ed4:	f001 ffd0 	bl	8008e78 <_svfiprintf_r>
 8006ed8:	2200      	movs	r2, #0
 8006eda:	9b02      	ldr	r3, [sp, #8]
 8006edc:	701a      	strb	r2, [r3, #0]
 8006ede:	b01c      	add	sp, #112	; 0x70
 8006ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ee4:	b003      	add	sp, #12
 8006ee6:	4770      	bx	lr
 8006ee8:	2000000c 	.word	0x2000000c
 8006eec:	ffff0208 	.word	0xffff0208

08006ef0 <strstr>:
 8006ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ef2:	780c      	ldrb	r4, [r1, #0]
 8006ef4:	b164      	cbz	r4, 8006f10 <strstr+0x20>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	781a      	ldrb	r2, [r3, #0]
 8006efa:	4618      	mov	r0, r3
 8006efc:	1c5e      	adds	r6, r3, #1
 8006efe:	b90a      	cbnz	r2, 8006f04 <strstr+0x14>
 8006f00:	4610      	mov	r0, r2
 8006f02:	e005      	b.n	8006f10 <strstr+0x20>
 8006f04:	4294      	cmp	r4, r2
 8006f06:	d108      	bne.n	8006f1a <strstr+0x2a>
 8006f08:	460d      	mov	r5, r1
 8006f0a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8006f0e:	b902      	cbnz	r2, 8006f12 <strstr+0x22>
 8006f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f12:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8006f16:	4297      	cmp	r7, r2
 8006f18:	d0f7      	beq.n	8006f0a <strstr+0x1a>
 8006f1a:	4633      	mov	r3, r6
 8006f1c:	e7ec      	b.n	8006ef8 <strstr+0x8>

08006f1e <sulp>:
 8006f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f22:	460f      	mov	r7, r1
 8006f24:	4690      	mov	r8, r2
 8006f26:	f001 fd9b 	bl	8008a60 <__ulp>
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	460d      	mov	r5, r1
 8006f2e:	f1b8 0f00 	cmp.w	r8, #0
 8006f32:	d011      	beq.n	8006f58 <sulp+0x3a>
 8006f34:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006f38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	dd0b      	ble.n	8006f58 <sulp+0x3a>
 8006f40:	2400      	movs	r4, #0
 8006f42:	051b      	lsls	r3, r3, #20
 8006f44:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006f48:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006f4c:	4622      	mov	r2, r4
 8006f4e:	462b      	mov	r3, r5
 8006f50:	f7f9 fac2 	bl	80004d8 <__aeabi_dmul>
 8006f54:	4604      	mov	r4, r0
 8006f56:	460d      	mov	r5, r1
 8006f58:	4620      	mov	r0, r4
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006f60 <_strtod_l>:
 8006f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f64:	469b      	mov	fp, r3
 8006f66:	2300      	movs	r3, #0
 8006f68:	b0a1      	sub	sp, #132	; 0x84
 8006f6a:	931c      	str	r3, [sp, #112]	; 0x70
 8006f6c:	4ba1      	ldr	r3, [pc, #644]	; (80071f4 <_strtod_l+0x294>)
 8006f6e:	4682      	mov	sl, r0
 8006f70:	681f      	ldr	r7, [r3, #0]
 8006f72:	460e      	mov	r6, r1
 8006f74:	4638      	mov	r0, r7
 8006f76:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f78:	f7f9 f8ea 	bl	8000150 <strlen>
 8006f7c:	f04f 0800 	mov.w	r8, #0
 8006f80:	4604      	mov	r4, r0
 8006f82:	f04f 0900 	mov.w	r9, #0
 8006f86:	961b      	str	r6, [sp, #108]	; 0x6c
 8006f88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f8a:	781a      	ldrb	r2, [r3, #0]
 8006f8c:	2a2b      	cmp	r2, #43	; 0x2b
 8006f8e:	d04c      	beq.n	800702a <_strtod_l+0xca>
 8006f90:	d83a      	bhi.n	8007008 <_strtod_l+0xa8>
 8006f92:	2a0d      	cmp	r2, #13
 8006f94:	d833      	bhi.n	8006ffe <_strtod_l+0x9e>
 8006f96:	2a08      	cmp	r2, #8
 8006f98:	d833      	bhi.n	8007002 <_strtod_l+0xa2>
 8006f9a:	2a00      	cmp	r2, #0
 8006f9c:	d03d      	beq.n	800701a <_strtod_l+0xba>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	930c      	str	r3, [sp, #48]	; 0x30
 8006fa2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006fa4:	782b      	ldrb	r3, [r5, #0]
 8006fa6:	2b30      	cmp	r3, #48	; 0x30
 8006fa8:	f040 80af 	bne.w	800710a <_strtod_l+0x1aa>
 8006fac:	786b      	ldrb	r3, [r5, #1]
 8006fae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006fb2:	2b58      	cmp	r3, #88	; 0x58
 8006fb4:	d16c      	bne.n	8007090 <_strtod_l+0x130>
 8006fb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fb8:	4650      	mov	r0, sl
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	ab1c      	add	r3, sp, #112	; 0x70
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	4a8d      	ldr	r2, [pc, #564]	; (80071f8 <_strtod_l+0x298>)
 8006fc2:	f8cd b008 	str.w	fp, [sp, #8]
 8006fc6:	ab1d      	add	r3, sp, #116	; 0x74
 8006fc8:	a91b      	add	r1, sp, #108	; 0x6c
 8006fca:	f000 fec9 	bl	8007d60 <__gethex>
 8006fce:	f010 0607 	ands.w	r6, r0, #7
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	d005      	beq.n	8006fe2 <_strtod_l+0x82>
 8006fd6:	2e06      	cmp	r6, #6
 8006fd8:	d129      	bne.n	800702e <_strtod_l+0xce>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	3501      	adds	r5, #1
 8006fde:	951b      	str	r5, [sp, #108]	; 0x6c
 8006fe0:	930c      	str	r3, [sp, #48]	; 0x30
 8006fe2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f040 8596 	bne.w	8007b16 <_strtod_l+0xbb6>
 8006fea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fec:	b1d3      	cbz	r3, 8007024 <_strtod_l+0xc4>
 8006fee:	4642      	mov	r2, r8
 8006ff0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	b021      	add	sp, #132	; 0x84
 8006ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffe:	2a20      	cmp	r2, #32
 8007000:	d1cd      	bne.n	8006f9e <_strtod_l+0x3e>
 8007002:	3301      	adds	r3, #1
 8007004:	931b      	str	r3, [sp, #108]	; 0x6c
 8007006:	e7bf      	b.n	8006f88 <_strtod_l+0x28>
 8007008:	2a2d      	cmp	r2, #45	; 0x2d
 800700a:	d1c8      	bne.n	8006f9e <_strtod_l+0x3e>
 800700c:	2201      	movs	r2, #1
 800700e:	920c      	str	r2, [sp, #48]	; 0x30
 8007010:	1c5a      	adds	r2, r3, #1
 8007012:	921b      	str	r2, [sp, #108]	; 0x6c
 8007014:	785b      	ldrb	r3, [r3, #1]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1c3      	bne.n	8006fa2 <_strtod_l+0x42>
 800701a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800701c:	961b      	str	r6, [sp, #108]	; 0x6c
 800701e:	2b00      	cmp	r3, #0
 8007020:	f040 8577 	bne.w	8007b12 <_strtod_l+0xbb2>
 8007024:	4642      	mov	r2, r8
 8007026:	464b      	mov	r3, r9
 8007028:	e7e4      	b.n	8006ff4 <_strtod_l+0x94>
 800702a:	2200      	movs	r2, #0
 800702c:	e7ef      	b.n	800700e <_strtod_l+0xae>
 800702e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007030:	b13a      	cbz	r2, 8007042 <_strtod_l+0xe2>
 8007032:	2135      	movs	r1, #53	; 0x35
 8007034:	a81e      	add	r0, sp, #120	; 0x78
 8007036:	f001 fe17 	bl	8008c68 <__copybits>
 800703a:	4650      	mov	r0, sl
 800703c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800703e:	f001 f9df 	bl	8008400 <_Bfree>
 8007042:	3e01      	subs	r6, #1
 8007044:	2e05      	cmp	r6, #5
 8007046:	d807      	bhi.n	8007058 <_strtod_l+0xf8>
 8007048:	e8df f006 	tbb	[pc, r6]
 800704c:	1d180b0e 	.word	0x1d180b0e
 8007050:	030e      	.short	0x030e
 8007052:	f04f 0900 	mov.w	r9, #0
 8007056:	46c8      	mov	r8, r9
 8007058:	0721      	lsls	r1, r4, #28
 800705a:	d5c2      	bpl.n	8006fe2 <_strtod_l+0x82>
 800705c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007060:	e7bf      	b.n	8006fe2 <_strtod_l+0x82>
 8007062:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8007066:	e7f7      	b.n	8007058 <_strtod_l+0xf8>
 8007068:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800706a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800706e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007072:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007076:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800707a:	e7ed      	b.n	8007058 <_strtod_l+0xf8>
 800707c:	f04f 0800 	mov.w	r8, #0
 8007080:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80071fc <_strtod_l+0x29c>
 8007084:	e7e8      	b.n	8007058 <_strtod_l+0xf8>
 8007086:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800708a:	f04f 38ff 	mov.w	r8, #4294967295
 800708e:	e7e3      	b.n	8007058 <_strtod_l+0xf8>
 8007090:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	921b      	str	r2, [sp, #108]	; 0x6c
 8007096:	785b      	ldrb	r3, [r3, #1]
 8007098:	2b30      	cmp	r3, #48	; 0x30
 800709a:	d0f9      	beq.n	8007090 <_strtod_l+0x130>
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0a0      	beq.n	8006fe2 <_strtod_l+0x82>
 80070a0:	2301      	movs	r3, #1
 80070a2:	9307      	str	r3, [sp, #28]
 80070a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070a6:	220a      	movs	r2, #10
 80070a8:	9308      	str	r3, [sp, #32]
 80070aa:	2300      	movs	r3, #0
 80070ac:	469b      	mov	fp, r3
 80070ae:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80070b2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80070b4:	7805      	ldrb	r5, [r0, #0]
 80070b6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80070ba:	b2d9      	uxtb	r1, r3
 80070bc:	2909      	cmp	r1, #9
 80070be:	d926      	bls.n	800710e <_strtod_l+0x1ae>
 80070c0:	4622      	mov	r2, r4
 80070c2:	4639      	mov	r1, r7
 80070c4:	f002 f984 	bl	80093d0 <strncmp>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d032      	beq.n	8007132 <_strtod_l+0x1d2>
 80070cc:	2000      	movs	r0, #0
 80070ce:	462b      	mov	r3, r5
 80070d0:	465c      	mov	r4, fp
 80070d2:	4602      	mov	r2, r0
 80070d4:	9004      	str	r0, [sp, #16]
 80070d6:	2b65      	cmp	r3, #101	; 0x65
 80070d8:	d001      	beq.n	80070de <_strtod_l+0x17e>
 80070da:	2b45      	cmp	r3, #69	; 0x45
 80070dc:	d113      	bne.n	8007106 <_strtod_l+0x1a6>
 80070de:	b91c      	cbnz	r4, 80070e8 <_strtod_l+0x188>
 80070e0:	9b07      	ldr	r3, [sp, #28]
 80070e2:	4303      	orrs	r3, r0
 80070e4:	d099      	beq.n	800701a <_strtod_l+0xba>
 80070e6:	2400      	movs	r4, #0
 80070e8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80070ea:	1c73      	adds	r3, r6, #1
 80070ec:	931b      	str	r3, [sp, #108]	; 0x6c
 80070ee:	7873      	ldrb	r3, [r6, #1]
 80070f0:	2b2b      	cmp	r3, #43	; 0x2b
 80070f2:	d078      	beq.n	80071e6 <_strtod_l+0x286>
 80070f4:	2b2d      	cmp	r3, #45	; 0x2d
 80070f6:	d07b      	beq.n	80071f0 <_strtod_l+0x290>
 80070f8:	2700      	movs	r7, #0
 80070fa:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80070fe:	2909      	cmp	r1, #9
 8007100:	f240 8082 	bls.w	8007208 <_strtod_l+0x2a8>
 8007104:	961b      	str	r6, [sp, #108]	; 0x6c
 8007106:	2500      	movs	r5, #0
 8007108:	e09e      	b.n	8007248 <_strtod_l+0x2e8>
 800710a:	2300      	movs	r3, #0
 800710c:	e7c9      	b.n	80070a2 <_strtod_l+0x142>
 800710e:	f1bb 0f08 	cmp.w	fp, #8
 8007112:	bfd5      	itete	le
 8007114:	9906      	ldrle	r1, [sp, #24]
 8007116:	9905      	ldrgt	r1, [sp, #20]
 8007118:	fb02 3301 	mlale	r3, r2, r1, r3
 800711c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007120:	f100 0001 	add.w	r0, r0, #1
 8007124:	bfd4      	ite	le
 8007126:	9306      	strle	r3, [sp, #24]
 8007128:	9305      	strgt	r3, [sp, #20]
 800712a:	f10b 0b01 	add.w	fp, fp, #1
 800712e:	901b      	str	r0, [sp, #108]	; 0x6c
 8007130:	e7bf      	b.n	80070b2 <_strtod_l+0x152>
 8007132:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007134:	191a      	adds	r2, r3, r4
 8007136:	921b      	str	r2, [sp, #108]	; 0x6c
 8007138:	5d1b      	ldrb	r3, [r3, r4]
 800713a:	f1bb 0f00 	cmp.w	fp, #0
 800713e:	d036      	beq.n	80071ae <_strtod_l+0x24e>
 8007140:	465c      	mov	r4, fp
 8007142:	9004      	str	r0, [sp, #16]
 8007144:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007148:	2a09      	cmp	r2, #9
 800714a:	d912      	bls.n	8007172 <_strtod_l+0x212>
 800714c:	2201      	movs	r2, #1
 800714e:	e7c2      	b.n	80070d6 <_strtod_l+0x176>
 8007150:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007152:	3001      	adds	r0, #1
 8007154:	1c5a      	adds	r2, r3, #1
 8007156:	921b      	str	r2, [sp, #108]	; 0x6c
 8007158:	785b      	ldrb	r3, [r3, #1]
 800715a:	2b30      	cmp	r3, #48	; 0x30
 800715c:	d0f8      	beq.n	8007150 <_strtod_l+0x1f0>
 800715e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007162:	2a08      	cmp	r2, #8
 8007164:	f200 84dc 	bhi.w	8007b20 <_strtod_l+0xbc0>
 8007168:	9004      	str	r0, [sp, #16]
 800716a:	2000      	movs	r0, #0
 800716c:	4604      	mov	r4, r0
 800716e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007170:	9208      	str	r2, [sp, #32]
 8007172:	3b30      	subs	r3, #48	; 0x30
 8007174:	f100 0201 	add.w	r2, r0, #1
 8007178:	d013      	beq.n	80071a2 <_strtod_l+0x242>
 800717a:	9904      	ldr	r1, [sp, #16]
 800717c:	1905      	adds	r5, r0, r4
 800717e:	4411      	add	r1, r2
 8007180:	9104      	str	r1, [sp, #16]
 8007182:	4622      	mov	r2, r4
 8007184:	210a      	movs	r1, #10
 8007186:	42aa      	cmp	r2, r5
 8007188:	d113      	bne.n	80071b2 <_strtod_l+0x252>
 800718a:	1822      	adds	r2, r4, r0
 800718c:	2a08      	cmp	r2, #8
 800718e:	f104 0401 	add.w	r4, r4, #1
 8007192:	4404      	add	r4, r0
 8007194:	dc1b      	bgt.n	80071ce <_strtod_l+0x26e>
 8007196:	220a      	movs	r2, #10
 8007198:	9906      	ldr	r1, [sp, #24]
 800719a:	fb02 3301 	mla	r3, r2, r1, r3
 800719e:	9306      	str	r3, [sp, #24]
 80071a0:	2200      	movs	r2, #0
 80071a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071a4:	4610      	mov	r0, r2
 80071a6:	1c59      	adds	r1, r3, #1
 80071a8:	911b      	str	r1, [sp, #108]	; 0x6c
 80071aa:	785b      	ldrb	r3, [r3, #1]
 80071ac:	e7ca      	b.n	8007144 <_strtod_l+0x1e4>
 80071ae:	4658      	mov	r0, fp
 80071b0:	e7d3      	b.n	800715a <_strtod_l+0x1fa>
 80071b2:	2a08      	cmp	r2, #8
 80071b4:	dc04      	bgt.n	80071c0 <_strtod_l+0x260>
 80071b6:	9f06      	ldr	r7, [sp, #24]
 80071b8:	434f      	muls	r7, r1
 80071ba:	9706      	str	r7, [sp, #24]
 80071bc:	3201      	adds	r2, #1
 80071be:	e7e2      	b.n	8007186 <_strtod_l+0x226>
 80071c0:	1c57      	adds	r7, r2, #1
 80071c2:	2f10      	cmp	r7, #16
 80071c4:	bfde      	ittt	le
 80071c6:	9f05      	ldrle	r7, [sp, #20]
 80071c8:	434f      	mulle	r7, r1
 80071ca:	9705      	strle	r7, [sp, #20]
 80071cc:	e7f6      	b.n	80071bc <_strtod_l+0x25c>
 80071ce:	2c10      	cmp	r4, #16
 80071d0:	bfdf      	itttt	le
 80071d2:	220a      	movle	r2, #10
 80071d4:	9905      	ldrle	r1, [sp, #20]
 80071d6:	fb02 3301 	mlale	r3, r2, r1, r3
 80071da:	9305      	strle	r3, [sp, #20]
 80071dc:	e7e0      	b.n	80071a0 <_strtod_l+0x240>
 80071de:	2300      	movs	r3, #0
 80071e0:	2201      	movs	r2, #1
 80071e2:	9304      	str	r3, [sp, #16]
 80071e4:	e77c      	b.n	80070e0 <_strtod_l+0x180>
 80071e6:	2700      	movs	r7, #0
 80071e8:	1cb3      	adds	r3, r6, #2
 80071ea:	931b      	str	r3, [sp, #108]	; 0x6c
 80071ec:	78b3      	ldrb	r3, [r6, #2]
 80071ee:	e784      	b.n	80070fa <_strtod_l+0x19a>
 80071f0:	2701      	movs	r7, #1
 80071f2:	e7f9      	b.n	80071e8 <_strtod_l+0x288>
 80071f4:	0800c524 	.word	0x0800c524
 80071f8:	0800c354 	.word	0x0800c354
 80071fc:	7ff00000 	.word	0x7ff00000
 8007200:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007202:	1c59      	adds	r1, r3, #1
 8007204:	911b      	str	r1, [sp, #108]	; 0x6c
 8007206:	785b      	ldrb	r3, [r3, #1]
 8007208:	2b30      	cmp	r3, #48	; 0x30
 800720a:	d0f9      	beq.n	8007200 <_strtod_l+0x2a0>
 800720c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007210:	2908      	cmp	r1, #8
 8007212:	f63f af78 	bhi.w	8007106 <_strtod_l+0x1a6>
 8007216:	f04f 0e0a 	mov.w	lr, #10
 800721a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800721e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007220:	9309      	str	r3, [sp, #36]	; 0x24
 8007222:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007224:	1c59      	adds	r1, r3, #1
 8007226:	911b      	str	r1, [sp, #108]	; 0x6c
 8007228:	785b      	ldrb	r3, [r3, #1]
 800722a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800722e:	2d09      	cmp	r5, #9
 8007230:	d935      	bls.n	800729e <_strtod_l+0x33e>
 8007232:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007234:	1b49      	subs	r1, r1, r5
 8007236:	2908      	cmp	r1, #8
 8007238:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800723c:	dc02      	bgt.n	8007244 <_strtod_l+0x2e4>
 800723e:	4565      	cmp	r5, ip
 8007240:	bfa8      	it	ge
 8007242:	4665      	movge	r5, ip
 8007244:	b107      	cbz	r7, 8007248 <_strtod_l+0x2e8>
 8007246:	426d      	negs	r5, r5
 8007248:	2c00      	cmp	r4, #0
 800724a:	d14c      	bne.n	80072e6 <_strtod_l+0x386>
 800724c:	9907      	ldr	r1, [sp, #28]
 800724e:	4301      	orrs	r1, r0
 8007250:	f47f aec7 	bne.w	8006fe2 <_strtod_l+0x82>
 8007254:	2a00      	cmp	r2, #0
 8007256:	f47f aee0 	bne.w	800701a <_strtod_l+0xba>
 800725a:	2b69      	cmp	r3, #105	; 0x69
 800725c:	d026      	beq.n	80072ac <_strtod_l+0x34c>
 800725e:	dc23      	bgt.n	80072a8 <_strtod_l+0x348>
 8007260:	2b49      	cmp	r3, #73	; 0x49
 8007262:	d023      	beq.n	80072ac <_strtod_l+0x34c>
 8007264:	2b4e      	cmp	r3, #78	; 0x4e
 8007266:	f47f aed8 	bne.w	800701a <_strtod_l+0xba>
 800726a:	499c      	ldr	r1, [pc, #624]	; (80074dc <_strtod_l+0x57c>)
 800726c:	a81b      	add	r0, sp, #108	; 0x6c
 800726e:	f000 ffc5 	bl	80081fc <__match>
 8007272:	2800      	cmp	r0, #0
 8007274:	f43f aed1 	beq.w	800701a <_strtod_l+0xba>
 8007278:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2b28      	cmp	r3, #40	; 0x28
 800727e:	d12c      	bne.n	80072da <_strtod_l+0x37a>
 8007280:	4997      	ldr	r1, [pc, #604]	; (80074e0 <_strtod_l+0x580>)
 8007282:	aa1e      	add	r2, sp, #120	; 0x78
 8007284:	a81b      	add	r0, sp, #108	; 0x6c
 8007286:	f000 ffcd 	bl	8008224 <__hexnan>
 800728a:	2805      	cmp	r0, #5
 800728c:	d125      	bne.n	80072da <_strtod_l+0x37a>
 800728e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007290:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8007294:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007298:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800729c:	e6a1      	b.n	8006fe2 <_strtod_l+0x82>
 800729e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80072a2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80072a6:	e7bc      	b.n	8007222 <_strtod_l+0x2c2>
 80072a8:	2b6e      	cmp	r3, #110	; 0x6e
 80072aa:	e7dc      	b.n	8007266 <_strtod_l+0x306>
 80072ac:	498d      	ldr	r1, [pc, #564]	; (80074e4 <_strtod_l+0x584>)
 80072ae:	a81b      	add	r0, sp, #108	; 0x6c
 80072b0:	f000 ffa4 	bl	80081fc <__match>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	f43f aeb0 	beq.w	800701a <_strtod_l+0xba>
 80072ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072bc:	498a      	ldr	r1, [pc, #552]	; (80074e8 <_strtod_l+0x588>)
 80072be:	3b01      	subs	r3, #1
 80072c0:	a81b      	add	r0, sp, #108	; 0x6c
 80072c2:	931b      	str	r3, [sp, #108]	; 0x6c
 80072c4:	f000 ff9a 	bl	80081fc <__match>
 80072c8:	b910      	cbnz	r0, 80072d0 <_strtod_l+0x370>
 80072ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072cc:	3301      	adds	r3, #1
 80072ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80072d0:	f04f 0800 	mov.w	r8, #0
 80072d4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80074f8 <_strtod_l+0x598>
 80072d8:	e683      	b.n	8006fe2 <_strtod_l+0x82>
 80072da:	4884      	ldr	r0, [pc, #528]	; (80074ec <_strtod_l+0x58c>)
 80072dc:	f002 f862 	bl	80093a4 <nan>
 80072e0:	4680      	mov	r8, r0
 80072e2:	4689      	mov	r9, r1
 80072e4:	e67d      	b.n	8006fe2 <_strtod_l+0x82>
 80072e6:	9b04      	ldr	r3, [sp, #16]
 80072e8:	f1bb 0f00 	cmp.w	fp, #0
 80072ec:	bf08      	it	eq
 80072ee:	46a3      	moveq	fp, r4
 80072f0:	1aeb      	subs	r3, r5, r3
 80072f2:	2c10      	cmp	r4, #16
 80072f4:	9806      	ldr	r0, [sp, #24]
 80072f6:	4626      	mov	r6, r4
 80072f8:	9307      	str	r3, [sp, #28]
 80072fa:	bfa8      	it	ge
 80072fc:	2610      	movge	r6, #16
 80072fe:	f7f9 f871 	bl	80003e4 <__aeabi_ui2d>
 8007302:	2c09      	cmp	r4, #9
 8007304:	4680      	mov	r8, r0
 8007306:	4689      	mov	r9, r1
 8007308:	dd13      	ble.n	8007332 <_strtod_l+0x3d2>
 800730a:	4b79      	ldr	r3, [pc, #484]	; (80074f0 <_strtod_l+0x590>)
 800730c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007310:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007314:	f7f9 f8e0 	bl	80004d8 <__aeabi_dmul>
 8007318:	4680      	mov	r8, r0
 800731a:	9805      	ldr	r0, [sp, #20]
 800731c:	4689      	mov	r9, r1
 800731e:	f7f9 f861 	bl	80003e4 <__aeabi_ui2d>
 8007322:	4602      	mov	r2, r0
 8007324:	460b      	mov	r3, r1
 8007326:	4640      	mov	r0, r8
 8007328:	4649      	mov	r1, r9
 800732a:	f7f8 ff1f 	bl	800016c <__adddf3>
 800732e:	4680      	mov	r8, r0
 8007330:	4689      	mov	r9, r1
 8007332:	2c0f      	cmp	r4, #15
 8007334:	dc36      	bgt.n	80073a4 <_strtod_l+0x444>
 8007336:	9b07      	ldr	r3, [sp, #28]
 8007338:	2b00      	cmp	r3, #0
 800733a:	f43f ae52 	beq.w	8006fe2 <_strtod_l+0x82>
 800733e:	dd22      	ble.n	8007386 <_strtod_l+0x426>
 8007340:	2b16      	cmp	r3, #22
 8007342:	dc09      	bgt.n	8007358 <_strtod_l+0x3f8>
 8007344:	4c6a      	ldr	r4, [pc, #424]	; (80074f0 <_strtod_l+0x590>)
 8007346:	4642      	mov	r2, r8
 8007348:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800734c:	464b      	mov	r3, r9
 800734e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007352:	f7f9 f8c1 	bl	80004d8 <__aeabi_dmul>
 8007356:	e7c3      	b.n	80072e0 <_strtod_l+0x380>
 8007358:	9a07      	ldr	r2, [sp, #28]
 800735a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800735e:	4293      	cmp	r3, r2
 8007360:	db20      	blt.n	80073a4 <_strtod_l+0x444>
 8007362:	4d63      	ldr	r5, [pc, #396]	; (80074f0 <_strtod_l+0x590>)
 8007364:	f1c4 040f 	rsb	r4, r4, #15
 8007368:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800736c:	4642      	mov	r2, r8
 800736e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007372:	464b      	mov	r3, r9
 8007374:	f7f9 f8b0 	bl	80004d8 <__aeabi_dmul>
 8007378:	9b07      	ldr	r3, [sp, #28]
 800737a:	1b1c      	subs	r4, r3, r4
 800737c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007380:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007384:	e7e5      	b.n	8007352 <_strtod_l+0x3f2>
 8007386:	9b07      	ldr	r3, [sp, #28]
 8007388:	3316      	adds	r3, #22
 800738a:	db0b      	blt.n	80073a4 <_strtod_l+0x444>
 800738c:	9b04      	ldr	r3, [sp, #16]
 800738e:	4a58      	ldr	r2, [pc, #352]	; (80074f0 <_strtod_l+0x590>)
 8007390:	1b5d      	subs	r5, r3, r5
 8007392:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007396:	4640      	mov	r0, r8
 8007398:	e9d5 2300 	ldrd	r2, r3, [r5]
 800739c:	4649      	mov	r1, r9
 800739e:	f7f9 f9c5 	bl	800072c <__aeabi_ddiv>
 80073a2:	e79d      	b.n	80072e0 <_strtod_l+0x380>
 80073a4:	9b07      	ldr	r3, [sp, #28]
 80073a6:	1ba6      	subs	r6, r4, r6
 80073a8:	441e      	add	r6, r3
 80073aa:	2e00      	cmp	r6, #0
 80073ac:	dd71      	ble.n	8007492 <_strtod_l+0x532>
 80073ae:	f016 030f 	ands.w	r3, r6, #15
 80073b2:	d00a      	beq.n	80073ca <_strtod_l+0x46a>
 80073b4:	494e      	ldr	r1, [pc, #312]	; (80074f0 <_strtod_l+0x590>)
 80073b6:	4642      	mov	r2, r8
 80073b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073c0:	464b      	mov	r3, r9
 80073c2:	f7f9 f889 	bl	80004d8 <__aeabi_dmul>
 80073c6:	4680      	mov	r8, r0
 80073c8:	4689      	mov	r9, r1
 80073ca:	f036 060f 	bics.w	r6, r6, #15
 80073ce:	d050      	beq.n	8007472 <_strtod_l+0x512>
 80073d0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80073d4:	dd27      	ble.n	8007426 <_strtod_l+0x4c6>
 80073d6:	f04f 0b00 	mov.w	fp, #0
 80073da:	f8cd b010 	str.w	fp, [sp, #16]
 80073de:	f8cd b020 	str.w	fp, [sp, #32]
 80073e2:	f8cd b018 	str.w	fp, [sp, #24]
 80073e6:	2322      	movs	r3, #34	; 0x22
 80073e8:	f04f 0800 	mov.w	r8, #0
 80073ec:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80074f8 <_strtod_l+0x598>
 80073f0:	f8ca 3000 	str.w	r3, [sl]
 80073f4:	9b08      	ldr	r3, [sp, #32]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f43f adf3 	beq.w	8006fe2 <_strtod_l+0x82>
 80073fc:	4650      	mov	r0, sl
 80073fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007400:	f000 fffe 	bl	8008400 <_Bfree>
 8007404:	4650      	mov	r0, sl
 8007406:	9906      	ldr	r1, [sp, #24]
 8007408:	f000 fffa 	bl	8008400 <_Bfree>
 800740c:	4650      	mov	r0, sl
 800740e:	9904      	ldr	r1, [sp, #16]
 8007410:	f000 fff6 	bl	8008400 <_Bfree>
 8007414:	4650      	mov	r0, sl
 8007416:	9908      	ldr	r1, [sp, #32]
 8007418:	f000 fff2 	bl	8008400 <_Bfree>
 800741c:	4659      	mov	r1, fp
 800741e:	4650      	mov	r0, sl
 8007420:	f000 ffee 	bl	8008400 <_Bfree>
 8007424:	e5dd      	b.n	8006fe2 <_strtod_l+0x82>
 8007426:	2300      	movs	r3, #0
 8007428:	4640      	mov	r0, r8
 800742a:	4649      	mov	r1, r9
 800742c:	461f      	mov	r7, r3
 800742e:	1136      	asrs	r6, r6, #4
 8007430:	2e01      	cmp	r6, #1
 8007432:	dc21      	bgt.n	8007478 <_strtod_l+0x518>
 8007434:	b10b      	cbz	r3, 800743a <_strtod_l+0x4da>
 8007436:	4680      	mov	r8, r0
 8007438:	4689      	mov	r9, r1
 800743a:	4b2e      	ldr	r3, [pc, #184]	; (80074f4 <_strtod_l+0x594>)
 800743c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007440:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007444:	4642      	mov	r2, r8
 8007446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800744a:	464b      	mov	r3, r9
 800744c:	f7f9 f844 	bl	80004d8 <__aeabi_dmul>
 8007450:	4b29      	ldr	r3, [pc, #164]	; (80074f8 <_strtod_l+0x598>)
 8007452:	460a      	mov	r2, r1
 8007454:	400b      	ands	r3, r1
 8007456:	4929      	ldr	r1, [pc, #164]	; (80074fc <_strtod_l+0x59c>)
 8007458:	4680      	mov	r8, r0
 800745a:	428b      	cmp	r3, r1
 800745c:	d8bb      	bhi.n	80073d6 <_strtod_l+0x476>
 800745e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007462:	428b      	cmp	r3, r1
 8007464:	bf86      	itte	hi
 8007466:	f04f 38ff 	movhi.w	r8, #4294967295
 800746a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007500 <_strtod_l+0x5a0>
 800746e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007472:	2300      	movs	r3, #0
 8007474:	9305      	str	r3, [sp, #20]
 8007476:	e07e      	b.n	8007576 <_strtod_l+0x616>
 8007478:	07f2      	lsls	r2, r6, #31
 800747a:	d507      	bpl.n	800748c <_strtod_l+0x52c>
 800747c:	4b1d      	ldr	r3, [pc, #116]	; (80074f4 <_strtod_l+0x594>)
 800747e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007486:	f7f9 f827 	bl	80004d8 <__aeabi_dmul>
 800748a:	2301      	movs	r3, #1
 800748c:	3701      	adds	r7, #1
 800748e:	1076      	asrs	r6, r6, #1
 8007490:	e7ce      	b.n	8007430 <_strtod_l+0x4d0>
 8007492:	d0ee      	beq.n	8007472 <_strtod_l+0x512>
 8007494:	4276      	negs	r6, r6
 8007496:	f016 020f 	ands.w	r2, r6, #15
 800749a:	d00a      	beq.n	80074b2 <_strtod_l+0x552>
 800749c:	4b14      	ldr	r3, [pc, #80]	; (80074f0 <_strtod_l+0x590>)
 800749e:	4640      	mov	r0, r8
 80074a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074a4:	4649      	mov	r1, r9
 80074a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074aa:	f7f9 f93f 	bl	800072c <__aeabi_ddiv>
 80074ae:	4680      	mov	r8, r0
 80074b0:	4689      	mov	r9, r1
 80074b2:	1136      	asrs	r6, r6, #4
 80074b4:	d0dd      	beq.n	8007472 <_strtod_l+0x512>
 80074b6:	2e1f      	cmp	r6, #31
 80074b8:	dd24      	ble.n	8007504 <_strtod_l+0x5a4>
 80074ba:	f04f 0b00 	mov.w	fp, #0
 80074be:	f8cd b010 	str.w	fp, [sp, #16]
 80074c2:	f8cd b020 	str.w	fp, [sp, #32]
 80074c6:	f8cd b018 	str.w	fp, [sp, #24]
 80074ca:	2322      	movs	r3, #34	; 0x22
 80074cc:	f04f 0800 	mov.w	r8, #0
 80074d0:	f04f 0900 	mov.w	r9, #0
 80074d4:	f8ca 3000 	str.w	r3, [sl]
 80074d8:	e78c      	b.n	80073f4 <_strtod_l+0x494>
 80074da:	bf00      	nop
 80074dc:	0800c34e 	.word	0x0800c34e
 80074e0:	0800c368 	.word	0x0800c368
 80074e4:	0800c345 	.word	0x0800c345
 80074e8:	0800c348 	.word	0x0800c348
 80074ec:	0800c71a 	.word	0x0800c71a
 80074f0:	0800c5d8 	.word	0x0800c5d8
 80074f4:	0800c5b0 	.word	0x0800c5b0
 80074f8:	7ff00000 	.word	0x7ff00000
 80074fc:	7ca00000 	.word	0x7ca00000
 8007500:	7fefffff 	.word	0x7fefffff
 8007504:	f016 0310 	ands.w	r3, r6, #16
 8007508:	bf18      	it	ne
 800750a:	236a      	movne	r3, #106	; 0x6a
 800750c:	4640      	mov	r0, r8
 800750e:	9305      	str	r3, [sp, #20]
 8007510:	4649      	mov	r1, r9
 8007512:	2300      	movs	r3, #0
 8007514:	4fb2      	ldr	r7, [pc, #712]	; (80077e0 <_strtod_l+0x880>)
 8007516:	07f2      	lsls	r2, r6, #31
 8007518:	d504      	bpl.n	8007524 <_strtod_l+0x5c4>
 800751a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800751e:	f7f8 ffdb 	bl	80004d8 <__aeabi_dmul>
 8007522:	2301      	movs	r3, #1
 8007524:	1076      	asrs	r6, r6, #1
 8007526:	f107 0708 	add.w	r7, r7, #8
 800752a:	d1f4      	bne.n	8007516 <_strtod_l+0x5b6>
 800752c:	b10b      	cbz	r3, 8007532 <_strtod_l+0x5d2>
 800752e:	4680      	mov	r8, r0
 8007530:	4689      	mov	r9, r1
 8007532:	9b05      	ldr	r3, [sp, #20]
 8007534:	b1bb      	cbz	r3, 8007566 <_strtod_l+0x606>
 8007536:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800753a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800753e:	2b00      	cmp	r3, #0
 8007540:	4649      	mov	r1, r9
 8007542:	dd10      	ble.n	8007566 <_strtod_l+0x606>
 8007544:	2b1f      	cmp	r3, #31
 8007546:	f340 812b 	ble.w	80077a0 <_strtod_l+0x840>
 800754a:	2b34      	cmp	r3, #52	; 0x34
 800754c:	bfd8      	it	le
 800754e:	f04f 32ff 	movle.w	r2, #4294967295
 8007552:	f04f 0800 	mov.w	r8, #0
 8007556:	bfcf      	iteee	gt
 8007558:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800755c:	3b20      	suble	r3, #32
 800755e:	fa02 f303 	lslle.w	r3, r2, r3
 8007562:	ea03 0901 	andle.w	r9, r3, r1
 8007566:	2200      	movs	r2, #0
 8007568:	2300      	movs	r3, #0
 800756a:	4640      	mov	r0, r8
 800756c:	4649      	mov	r1, r9
 800756e:	f7f9 fa1b 	bl	80009a8 <__aeabi_dcmpeq>
 8007572:	2800      	cmp	r0, #0
 8007574:	d1a1      	bne.n	80074ba <_strtod_l+0x55a>
 8007576:	9b06      	ldr	r3, [sp, #24]
 8007578:	465a      	mov	r2, fp
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	4650      	mov	r0, sl
 800757e:	4623      	mov	r3, r4
 8007580:	9908      	ldr	r1, [sp, #32]
 8007582:	f000 ffa9 	bl	80084d8 <__s2b>
 8007586:	9008      	str	r0, [sp, #32]
 8007588:	2800      	cmp	r0, #0
 800758a:	f43f af24 	beq.w	80073d6 <_strtod_l+0x476>
 800758e:	9b04      	ldr	r3, [sp, #16]
 8007590:	f04f 0b00 	mov.w	fp, #0
 8007594:	1b5d      	subs	r5, r3, r5
 8007596:	9b07      	ldr	r3, [sp, #28]
 8007598:	f8cd b010 	str.w	fp, [sp, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	bfb4      	ite	lt
 80075a0:	462b      	movlt	r3, r5
 80075a2:	2300      	movge	r3, #0
 80075a4:	930e      	str	r3, [sp, #56]	; 0x38
 80075a6:	9b07      	ldr	r3, [sp, #28]
 80075a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80075ac:	9316      	str	r3, [sp, #88]	; 0x58
 80075ae:	9b08      	ldr	r3, [sp, #32]
 80075b0:	4650      	mov	r0, sl
 80075b2:	6859      	ldr	r1, [r3, #4]
 80075b4:	f000 fee4 	bl	8008380 <_Balloc>
 80075b8:	9006      	str	r0, [sp, #24]
 80075ba:	2800      	cmp	r0, #0
 80075bc:	f43f af13 	beq.w	80073e6 <_strtod_l+0x486>
 80075c0:	9b08      	ldr	r3, [sp, #32]
 80075c2:	300c      	adds	r0, #12
 80075c4:	691a      	ldr	r2, [r3, #16]
 80075c6:	f103 010c 	add.w	r1, r3, #12
 80075ca:	3202      	adds	r2, #2
 80075cc:	0092      	lsls	r2, r2, #2
 80075ce:	f7ff fa43 	bl	8006a58 <memcpy>
 80075d2:	ab1e      	add	r3, sp, #120	; 0x78
 80075d4:	9301      	str	r3, [sp, #4]
 80075d6:	ab1d      	add	r3, sp, #116	; 0x74
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	4642      	mov	r2, r8
 80075dc:	464b      	mov	r3, r9
 80075de:	4650      	mov	r0, sl
 80075e0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80075e4:	f001 fab6 	bl	8008b54 <__d2b>
 80075e8:	901c      	str	r0, [sp, #112]	; 0x70
 80075ea:	2800      	cmp	r0, #0
 80075ec:	f43f aefb 	beq.w	80073e6 <_strtod_l+0x486>
 80075f0:	2101      	movs	r1, #1
 80075f2:	4650      	mov	r0, sl
 80075f4:	f001 f808 	bl	8008608 <__i2b>
 80075f8:	4603      	mov	r3, r0
 80075fa:	9004      	str	r0, [sp, #16]
 80075fc:	2800      	cmp	r0, #0
 80075fe:	f43f aef2 	beq.w	80073e6 <_strtod_l+0x486>
 8007602:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007604:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007606:	2d00      	cmp	r5, #0
 8007608:	bfab      	itete	ge
 800760a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800760c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800760e:	18ee      	addge	r6, r5, r3
 8007610:	1b5c      	sublt	r4, r3, r5
 8007612:	9b05      	ldr	r3, [sp, #20]
 8007614:	bfa8      	it	ge
 8007616:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007618:	eba5 0503 	sub.w	r5, r5, r3
 800761c:	4415      	add	r5, r2
 800761e:	4b71      	ldr	r3, [pc, #452]	; (80077e4 <_strtod_l+0x884>)
 8007620:	f105 35ff 	add.w	r5, r5, #4294967295
 8007624:	bfb8      	it	lt
 8007626:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007628:	429d      	cmp	r5, r3
 800762a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800762e:	f280 80c9 	bge.w	80077c4 <_strtod_l+0x864>
 8007632:	1b5b      	subs	r3, r3, r5
 8007634:	2b1f      	cmp	r3, #31
 8007636:	f04f 0701 	mov.w	r7, #1
 800763a:	eba2 0203 	sub.w	r2, r2, r3
 800763e:	f300 80b6 	bgt.w	80077ae <_strtod_l+0x84e>
 8007642:	2500      	movs	r5, #0
 8007644:	fa07 f303 	lsl.w	r3, r7, r3
 8007648:	930f      	str	r3, [sp, #60]	; 0x3c
 800764a:	18b7      	adds	r7, r6, r2
 800764c:	9b05      	ldr	r3, [sp, #20]
 800764e:	42be      	cmp	r6, r7
 8007650:	4414      	add	r4, r2
 8007652:	441c      	add	r4, r3
 8007654:	4633      	mov	r3, r6
 8007656:	bfa8      	it	ge
 8007658:	463b      	movge	r3, r7
 800765a:	42a3      	cmp	r3, r4
 800765c:	bfa8      	it	ge
 800765e:	4623      	movge	r3, r4
 8007660:	2b00      	cmp	r3, #0
 8007662:	bfc2      	ittt	gt
 8007664:	1aff      	subgt	r7, r7, r3
 8007666:	1ae4      	subgt	r4, r4, r3
 8007668:	1af6      	subgt	r6, r6, r3
 800766a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800766c:	2b00      	cmp	r3, #0
 800766e:	dd17      	ble.n	80076a0 <_strtod_l+0x740>
 8007670:	461a      	mov	r2, r3
 8007672:	4650      	mov	r0, sl
 8007674:	9904      	ldr	r1, [sp, #16]
 8007676:	f001 f881 	bl	800877c <__pow5mult>
 800767a:	9004      	str	r0, [sp, #16]
 800767c:	2800      	cmp	r0, #0
 800767e:	f43f aeb2 	beq.w	80073e6 <_strtod_l+0x486>
 8007682:	4601      	mov	r1, r0
 8007684:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007686:	4650      	mov	r0, sl
 8007688:	f000 ffd4 	bl	8008634 <__multiply>
 800768c:	9009      	str	r0, [sp, #36]	; 0x24
 800768e:	2800      	cmp	r0, #0
 8007690:	f43f aea9 	beq.w	80073e6 <_strtod_l+0x486>
 8007694:	4650      	mov	r0, sl
 8007696:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007698:	f000 feb2 	bl	8008400 <_Bfree>
 800769c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769e:	931c      	str	r3, [sp, #112]	; 0x70
 80076a0:	2f00      	cmp	r7, #0
 80076a2:	f300 8093 	bgt.w	80077cc <_strtod_l+0x86c>
 80076a6:	9b07      	ldr	r3, [sp, #28]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	dd08      	ble.n	80076be <_strtod_l+0x75e>
 80076ac:	4650      	mov	r0, sl
 80076ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80076b0:	9906      	ldr	r1, [sp, #24]
 80076b2:	f001 f863 	bl	800877c <__pow5mult>
 80076b6:	9006      	str	r0, [sp, #24]
 80076b8:	2800      	cmp	r0, #0
 80076ba:	f43f ae94 	beq.w	80073e6 <_strtod_l+0x486>
 80076be:	2c00      	cmp	r4, #0
 80076c0:	dd08      	ble.n	80076d4 <_strtod_l+0x774>
 80076c2:	4622      	mov	r2, r4
 80076c4:	4650      	mov	r0, sl
 80076c6:	9906      	ldr	r1, [sp, #24]
 80076c8:	f001 f8b2 	bl	8008830 <__lshift>
 80076cc:	9006      	str	r0, [sp, #24]
 80076ce:	2800      	cmp	r0, #0
 80076d0:	f43f ae89 	beq.w	80073e6 <_strtod_l+0x486>
 80076d4:	2e00      	cmp	r6, #0
 80076d6:	dd08      	ble.n	80076ea <_strtod_l+0x78a>
 80076d8:	4632      	mov	r2, r6
 80076da:	4650      	mov	r0, sl
 80076dc:	9904      	ldr	r1, [sp, #16]
 80076de:	f001 f8a7 	bl	8008830 <__lshift>
 80076e2:	9004      	str	r0, [sp, #16]
 80076e4:	2800      	cmp	r0, #0
 80076e6:	f43f ae7e 	beq.w	80073e6 <_strtod_l+0x486>
 80076ea:	4650      	mov	r0, sl
 80076ec:	9a06      	ldr	r2, [sp, #24]
 80076ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 80076f0:	f001 f926 	bl	8008940 <__mdiff>
 80076f4:	4683      	mov	fp, r0
 80076f6:	2800      	cmp	r0, #0
 80076f8:	f43f ae75 	beq.w	80073e6 <_strtod_l+0x486>
 80076fc:	2400      	movs	r4, #0
 80076fe:	68c3      	ldr	r3, [r0, #12]
 8007700:	9904      	ldr	r1, [sp, #16]
 8007702:	60c4      	str	r4, [r0, #12]
 8007704:	930d      	str	r3, [sp, #52]	; 0x34
 8007706:	f001 f8ff 	bl	8008908 <__mcmp>
 800770a:	42a0      	cmp	r0, r4
 800770c:	da70      	bge.n	80077f0 <_strtod_l+0x890>
 800770e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007710:	ea53 0308 	orrs.w	r3, r3, r8
 8007714:	f040 8096 	bne.w	8007844 <_strtod_l+0x8e4>
 8007718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800771c:	2b00      	cmp	r3, #0
 800771e:	f040 8091 	bne.w	8007844 <_strtod_l+0x8e4>
 8007722:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007726:	0d1b      	lsrs	r3, r3, #20
 8007728:	051b      	lsls	r3, r3, #20
 800772a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800772e:	f240 8089 	bls.w	8007844 <_strtod_l+0x8e4>
 8007732:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007736:	b923      	cbnz	r3, 8007742 <_strtod_l+0x7e2>
 8007738:	f8db 3010 	ldr.w	r3, [fp, #16]
 800773c:	2b01      	cmp	r3, #1
 800773e:	f340 8081 	ble.w	8007844 <_strtod_l+0x8e4>
 8007742:	4659      	mov	r1, fp
 8007744:	2201      	movs	r2, #1
 8007746:	4650      	mov	r0, sl
 8007748:	f001 f872 	bl	8008830 <__lshift>
 800774c:	9904      	ldr	r1, [sp, #16]
 800774e:	4683      	mov	fp, r0
 8007750:	f001 f8da 	bl	8008908 <__mcmp>
 8007754:	2800      	cmp	r0, #0
 8007756:	dd75      	ble.n	8007844 <_strtod_l+0x8e4>
 8007758:	9905      	ldr	r1, [sp, #20]
 800775a:	464b      	mov	r3, r9
 800775c:	4a22      	ldr	r2, [pc, #136]	; (80077e8 <_strtod_l+0x888>)
 800775e:	2900      	cmp	r1, #0
 8007760:	f000 8091 	beq.w	8007886 <_strtod_l+0x926>
 8007764:	ea02 0109 	and.w	r1, r2, r9
 8007768:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800776c:	f300 808b 	bgt.w	8007886 <_strtod_l+0x926>
 8007770:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007774:	f77f aea9 	ble.w	80074ca <_strtod_l+0x56a>
 8007778:	2300      	movs	r3, #0
 800777a:	4a1c      	ldr	r2, [pc, #112]	; (80077ec <_strtod_l+0x88c>)
 800777c:	4640      	mov	r0, r8
 800777e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007782:	4649      	mov	r1, r9
 8007784:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007788:	f7f8 fea6 	bl	80004d8 <__aeabi_dmul>
 800778c:	460b      	mov	r3, r1
 800778e:	4303      	orrs	r3, r0
 8007790:	bf08      	it	eq
 8007792:	2322      	moveq	r3, #34	; 0x22
 8007794:	4680      	mov	r8, r0
 8007796:	4689      	mov	r9, r1
 8007798:	bf08      	it	eq
 800779a:	f8ca 3000 	streq.w	r3, [sl]
 800779e:	e62d      	b.n	80073fc <_strtod_l+0x49c>
 80077a0:	f04f 32ff 	mov.w	r2, #4294967295
 80077a4:	fa02 f303 	lsl.w	r3, r2, r3
 80077a8:	ea03 0808 	and.w	r8, r3, r8
 80077ac:	e6db      	b.n	8007566 <_strtod_l+0x606>
 80077ae:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80077b2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80077b6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80077ba:	35e2      	adds	r5, #226	; 0xe2
 80077bc:	fa07 f505 	lsl.w	r5, r7, r5
 80077c0:	970f      	str	r7, [sp, #60]	; 0x3c
 80077c2:	e742      	b.n	800764a <_strtod_l+0x6ea>
 80077c4:	2301      	movs	r3, #1
 80077c6:	2500      	movs	r5, #0
 80077c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80077ca:	e73e      	b.n	800764a <_strtod_l+0x6ea>
 80077cc:	463a      	mov	r2, r7
 80077ce:	4650      	mov	r0, sl
 80077d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80077d2:	f001 f82d 	bl	8008830 <__lshift>
 80077d6:	901c      	str	r0, [sp, #112]	; 0x70
 80077d8:	2800      	cmp	r0, #0
 80077da:	f47f af64 	bne.w	80076a6 <_strtod_l+0x746>
 80077de:	e602      	b.n	80073e6 <_strtod_l+0x486>
 80077e0:	0800c380 	.word	0x0800c380
 80077e4:	fffffc02 	.word	0xfffffc02
 80077e8:	7ff00000 	.word	0x7ff00000
 80077ec:	39500000 	.word	0x39500000
 80077f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80077f4:	d166      	bne.n	80078c4 <_strtod_l+0x964>
 80077f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077fc:	b35a      	cbz	r2, 8007856 <_strtod_l+0x8f6>
 80077fe:	4a9c      	ldr	r2, [pc, #624]	; (8007a70 <_strtod_l+0xb10>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d12c      	bne.n	800785e <_strtod_l+0x8fe>
 8007804:	9b05      	ldr	r3, [sp, #20]
 8007806:	4640      	mov	r0, r8
 8007808:	b303      	cbz	r3, 800784c <_strtod_l+0x8ec>
 800780a:	464b      	mov	r3, r9
 800780c:	4a99      	ldr	r2, [pc, #612]	; (8007a74 <_strtod_l+0xb14>)
 800780e:	f04f 31ff 	mov.w	r1, #4294967295
 8007812:	401a      	ands	r2, r3
 8007814:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007818:	d81b      	bhi.n	8007852 <_strtod_l+0x8f2>
 800781a:	0d12      	lsrs	r2, r2, #20
 800781c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007820:	fa01 f303 	lsl.w	r3, r1, r3
 8007824:	4298      	cmp	r0, r3
 8007826:	d11a      	bne.n	800785e <_strtod_l+0x8fe>
 8007828:	4b93      	ldr	r3, [pc, #588]	; (8007a78 <_strtod_l+0xb18>)
 800782a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800782c:	429a      	cmp	r2, r3
 800782e:	d102      	bne.n	8007836 <_strtod_l+0x8d6>
 8007830:	3001      	adds	r0, #1
 8007832:	f43f add8 	beq.w	80073e6 <_strtod_l+0x486>
 8007836:	f04f 0800 	mov.w	r8, #0
 800783a:	4b8e      	ldr	r3, [pc, #568]	; (8007a74 <_strtod_l+0xb14>)
 800783c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800783e:	401a      	ands	r2, r3
 8007840:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007844:	9b05      	ldr	r3, [sp, #20]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d196      	bne.n	8007778 <_strtod_l+0x818>
 800784a:	e5d7      	b.n	80073fc <_strtod_l+0x49c>
 800784c:	f04f 33ff 	mov.w	r3, #4294967295
 8007850:	e7e8      	b.n	8007824 <_strtod_l+0x8c4>
 8007852:	460b      	mov	r3, r1
 8007854:	e7e6      	b.n	8007824 <_strtod_l+0x8c4>
 8007856:	ea53 0308 	orrs.w	r3, r3, r8
 800785a:	f43f af7d 	beq.w	8007758 <_strtod_l+0x7f8>
 800785e:	b1e5      	cbz	r5, 800789a <_strtod_l+0x93a>
 8007860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007862:	421d      	tst	r5, r3
 8007864:	d0ee      	beq.n	8007844 <_strtod_l+0x8e4>
 8007866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007868:	4640      	mov	r0, r8
 800786a:	4649      	mov	r1, r9
 800786c:	9a05      	ldr	r2, [sp, #20]
 800786e:	b1c3      	cbz	r3, 80078a2 <_strtod_l+0x942>
 8007870:	f7ff fb55 	bl	8006f1e <sulp>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800787c:	f7f8 fc76 	bl	800016c <__adddf3>
 8007880:	4680      	mov	r8, r0
 8007882:	4689      	mov	r9, r1
 8007884:	e7de      	b.n	8007844 <_strtod_l+0x8e4>
 8007886:	4013      	ands	r3, r2
 8007888:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800788c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007890:	f04f 38ff 	mov.w	r8, #4294967295
 8007894:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007898:	e7d4      	b.n	8007844 <_strtod_l+0x8e4>
 800789a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800789c:	ea13 0f08 	tst.w	r3, r8
 80078a0:	e7e0      	b.n	8007864 <_strtod_l+0x904>
 80078a2:	f7ff fb3c 	bl	8006f1e <sulp>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078ae:	f7f8 fc5b 	bl	8000168 <__aeabi_dsub>
 80078b2:	2200      	movs	r2, #0
 80078b4:	2300      	movs	r3, #0
 80078b6:	4680      	mov	r8, r0
 80078b8:	4689      	mov	r9, r1
 80078ba:	f7f9 f875 	bl	80009a8 <__aeabi_dcmpeq>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d0c0      	beq.n	8007844 <_strtod_l+0x8e4>
 80078c2:	e602      	b.n	80074ca <_strtod_l+0x56a>
 80078c4:	4658      	mov	r0, fp
 80078c6:	9904      	ldr	r1, [sp, #16]
 80078c8:	f001 f9a0 	bl	8008c0c <__ratio>
 80078cc:	2200      	movs	r2, #0
 80078ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078d2:	4606      	mov	r6, r0
 80078d4:	460f      	mov	r7, r1
 80078d6:	f7f9 f87b 	bl	80009d0 <__aeabi_dcmple>
 80078da:	2800      	cmp	r0, #0
 80078dc:	d075      	beq.n	80079ca <_strtod_l+0xa6a>
 80078de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d047      	beq.n	8007974 <_strtod_l+0xa14>
 80078e4:	2600      	movs	r6, #0
 80078e6:	4f65      	ldr	r7, [pc, #404]	; (8007a7c <_strtod_l+0xb1c>)
 80078e8:	4d64      	ldr	r5, [pc, #400]	; (8007a7c <_strtod_l+0xb1c>)
 80078ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078f0:	0d1b      	lsrs	r3, r3, #20
 80078f2:	051b      	lsls	r3, r3, #20
 80078f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80078f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078f8:	4b61      	ldr	r3, [pc, #388]	; (8007a80 <_strtod_l+0xb20>)
 80078fa:	429a      	cmp	r2, r3
 80078fc:	f040 80c8 	bne.w	8007a90 <_strtod_l+0xb30>
 8007900:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007904:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790a:	4640      	mov	r0, r8
 800790c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007910:	4649      	mov	r1, r9
 8007912:	f001 f8a5 	bl	8008a60 <__ulp>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	4630      	mov	r0, r6
 800791c:	4639      	mov	r1, r7
 800791e:	f7f8 fddb 	bl	80004d8 <__aeabi_dmul>
 8007922:	4642      	mov	r2, r8
 8007924:	464b      	mov	r3, r9
 8007926:	f7f8 fc21 	bl	800016c <__adddf3>
 800792a:	460b      	mov	r3, r1
 800792c:	4951      	ldr	r1, [pc, #324]	; (8007a74 <_strtod_l+0xb14>)
 800792e:	4a55      	ldr	r2, [pc, #340]	; (8007a84 <_strtod_l+0xb24>)
 8007930:	4019      	ands	r1, r3
 8007932:	4291      	cmp	r1, r2
 8007934:	4680      	mov	r8, r0
 8007936:	d95e      	bls.n	80079f6 <_strtod_l+0xa96>
 8007938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800793a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800793e:	4293      	cmp	r3, r2
 8007940:	d103      	bne.n	800794a <_strtod_l+0x9ea>
 8007942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007944:	3301      	adds	r3, #1
 8007946:	f43f ad4e 	beq.w	80073e6 <_strtod_l+0x486>
 800794a:	f04f 38ff 	mov.w	r8, #4294967295
 800794e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007a78 <_strtod_l+0xb18>
 8007952:	4650      	mov	r0, sl
 8007954:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007956:	f000 fd53 	bl	8008400 <_Bfree>
 800795a:	4650      	mov	r0, sl
 800795c:	9906      	ldr	r1, [sp, #24]
 800795e:	f000 fd4f 	bl	8008400 <_Bfree>
 8007962:	4650      	mov	r0, sl
 8007964:	9904      	ldr	r1, [sp, #16]
 8007966:	f000 fd4b 	bl	8008400 <_Bfree>
 800796a:	4659      	mov	r1, fp
 800796c:	4650      	mov	r0, sl
 800796e:	f000 fd47 	bl	8008400 <_Bfree>
 8007972:	e61c      	b.n	80075ae <_strtod_l+0x64e>
 8007974:	f1b8 0f00 	cmp.w	r8, #0
 8007978:	d119      	bne.n	80079ae <_strtod_l+0xa4e>
 800797a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800797c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007980:	b9e3      	cbnz	r3, 80079bc <_strtod_l+0xa5c>
 8007982:	2200      	movs	r2, #0
 8007984:	4630      	mov	r0, r6
 8007986:	4639      	mov	r1, r7
 8007988:	4b3c      	ldr	r3, [pc, #240]	; (8007a7c <_strtod_l+0xb1c>)
 800798a:	f7f9 f817 	bl	80009bc <__aeabi_dcmplt>
 800798e:	b9c8      	cbnz	r0, 80079c4 <_strtod_l+0xa64>
 8007990:	2200      	movs	r2, #0
 8007992:	4630      	mov	r0, r6
 8007994:	4639      	mov	r1, r7
 8007996:	4b3c      	ldr	r3, [pc, #240]	; (8007a88 <_strtod_l+0xb28>)
 8007998:	f7f8 fd9e 	bl	80004d8 <__aeabi_dmul>
 800799c:	4604      	mov	r4, r0
 800799e:	460d      	mov	r5, r1
 80079a0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80079a4:	9418      	str	r4, [sp, #96]	; 0x60
 80079a6:	9319      	str	r3, [sp, #100]	; 0x64
 80079a8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80079ac:	e79d      	b.n	80078ea <_strtod_l+0x98a>
 80079ae:	f1b8 0f01 	cmp.w	r8, #1
 80079b2:	d103      	bne.n	80079bc <_strtod_l+0xa5c>
 80079b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f43f ad87 	beq.w	80074ca <_strtod_l+0x56a>
 80079bc:	2600      	movs	r6, #0
 80079be:	2400      	movs	r4, #0
 80079c0:	4f32      	ldr	r7, [pc, #200]	; (8007a8c <_strtod_l+0xb2c>)
 80079c2:	e791      	b.n	80078e8 <_strtod_l+0x988>
 80079c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80079c6:	4d30      	ldr	r5, [pc, #192]	; (8007a88 <_strtod_l+0xb28>)
 80079c8:	e7ea      	b.n	80079a0 <_strtod_l+0xa40>
 80079ca:	4b2f      	ldr	r3, [pc, #188]	; (8007a88 <_strtod_l+0xb28>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	4630      	mov	r0, r6
 80079d0:	4639      	mov	r1, r7
 80079d2:	f7f8 fd81 	bl	80004d8 <__aeabi_dmul>
 80079d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079d8:	4604      	mov	r4, r0
 80079da:	460d      	mov	r5, r1
 80079dc:	b933      	cbnz	r3, 80079ec <_strtod_l+0xa8c>
 80079de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079e2:	9010      	str	r0, [sp, #64]	; 0x40
 80079e4:	9311      	str	r3, [sp, #68]	; 0x44
 80079e6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80079ea:	e77e      	b.n	80078ea <_strtod_l+0x98a>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80079f4:	e7f7      	b.n	80079e6 <_strtod_l+0xa86>
 80079f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80079fa:	9b05      	ldr	r3, [sp, #20]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1a8      	bne.n	8007952 <_strtod_l+0x9f2>
 8007a00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a06:	0d1b      	lsrs	r3, r3, #20
 8007a08:	051b      	lsls	r3, r3, #20
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d1a1      	bne.n	8007952 <_strtod_l+0x9f2>
 8007a0e:	4620      	mov	r0, r4
 8007a10:	4629      	mov	r1, r5
 8007a12:	f7f9 fb7d 	bl	8001110 <__aeabi_d2lz>
 8007a16:	f7f8 fd31 	bl	800047c <__aeabi_l2d>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4620      	mov	r0, r4
 8007a20:	4629      	mov	r1, r5
 8007a22:	f7f8 fba1 	bl	8000168 <__aeabi_dsub>
 8007a26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a2c:	ea43 0308 	orr.w	r3, r3, r8
 8007a30:	4313      	orrs	r3, r2
 8007a32:	4604      	mov	r4, r0
 8007a34:	460d      	mov	r5, r1
 8007a36:	d066      	beq.n	8007b06 <_strtod_l+0xba6>
 8007a38:	a309      	add	r3, pc, #36	; (adr r3, 8007a60 <_strtod_l+0xb00>)
 8007a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3e:	f7f8 ffbd 	bl	80009bc <__aeabi_dcmplt>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	f47f acda 	bne.w	80073fc <_strtod_l+0x49c>
 8007a48:	a307      	add	r3, pc, #28	; (adr r3, 8007a68 <_strtod_l+0xb08>)
 8007a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4e:	4620      	mov	r0, r4
 8007a50:	4629      	mov	r1, r5
 8007a52:	f7f8 ffd1 	bl	80009f8 <__aeabi_dcmpgt>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	f43f af7b 	beq.w	8007952 <_strtod_l+0x9f2>
 8007a5c:	e4ce      	b.n	80073fc <_strtod_l+0x49c>
 8007a5e:	bf00      	nop
 8007a60:	94a03595 	.word	0x94a03595
 8007a64:	3fdfffff 	.word	0x3fdfffff
 8007a68:	35afe535 	.word	0x35afe535
 8007a6c:	3fe00000 	.word	0x3fe00000
 8007a70:	000fffff 	.word	0x000fffff
 8007a74:	7ff00000 	.word	0x7ff00000
 8007a78:	7fefffff 	.word	0x7fefffff
 8007a7c:	3ff00000 	.word	0x3ff00000
 8007a80:	7fe00000 	.word	0x7fe00000
 8007a84:	7c9fffff 	.word	0x7c9fffff
 8007a88:	3fe00000 	.word	0x3fe00000
 8007a8c:	bff00000 	.word	0xbff00000
 8007a90:	9b05      	ldr	r3, [sp, #20]
 8007a92:	b313      	cbz	r3, 8007ada <_strtod_l+0xb7a>
 8007a94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a9a:	d81e      	bhi.n	8007ada <_strtod_l+0xb7a>
 8007a9c:	a326      	add	r3, pc, #152	; (adr r3, 8007b38 <_strtod_l+0xbd8>)
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	f7f8 ff93 	bl	80009d0 <__aeabi_dcmple>
 8007aaa:	b190      	cbz	r0, 8007ad2 <_strtod_l+0xb72>
 8007aac:	4629      	mov	r1, r5
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f7f8 ffea 	bl	8000a88 <__aeabi_d2uiz>
 8007ab4:	2801      	cmp	r0, #1
 8007ab6:	bf38      	it	cc
 8007ab8:	2001      	movcc	r0, #1
 8007aba:	f7f8 fc93 	bl	80003e4 <__aeabi_ui2d>
 8007abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ac0:	4604      	mov	r4, r0
 8007ac2:	460d      	mov	r5, r1
 8007ac4:	b9d3      	cbnz	r3, 8007afc <_strtod_l+0xb9c>
 8007ac6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007aca:	9012      	str	r0, [sp, #72]	; 0x48
 8007acc:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ace:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007ad2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ad4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007ad8:	1a9f      	subs	r7, r3, r2
 8007ada:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ade:	f000 ffbf 	bl	8008a60 <__ulp>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	4639      	mov	r1, r7
 8007aea:	f7f8 fcf5 	bl	80004d8 <__aeabi_dmul>
 8007aee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007af2:	f7f8 fb3b 	bl	800016c <__adddf3>
 8007af6:	4680      	mov	r8, r0
 8007af8:	4689      	mov	r9, r1
 8007afa:	e77e      	b.n	80079fa <_strtod_l+0xa9a>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007b04:	e7e3      	b.n	8007ace <_strtod_l+0xb6e>
 8007b06:	a30e      	add	r3, pc, #56	; (adr r3, 8007b40 <_strtod_l+0xbe0>)
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f7f8 ff56 	bl	80009bc <__aeabi_dcmplt>
 8007b10:	e7a1      	b.n	8007a56 <_strtod_l+0xaf6>
 8007b12:	2300      	movs	r3, #0
 8007b14:	930c      	str	r3, [sp, #48]	; 0x30
 8007b16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	f7ff ba65 	b.w	8006fea <_strtod_l+0x8a>
 8007b20:	2b65      	cmp	r3, #101	; 0x65
 8007b22:	f43f ab5c 	beq.w	80071de <_strtod_l+0x27e>
 8007b26:	2b45      	cmp	r3, #69	; 0x45
 8007b28:	f43f ab59 	beq.w	80071de <_strtod_l+0x27e>
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f7ff bb8d 	b.w	800724c <_strtod_l+0x2ec>
 8007b32:	bf00      	nop
 8007b34:	f3af 8000 	nop.w
 8007b38:	ffc00000 	.word	0xffc00000
 8007b3c:	41dfffff 	.word	0x41dfffff
 8007b40:	94a03595 	.word	0x94a03595
 8007b44:	3fcfffff 	.word	0x3fcfffff

08007b48 <_strtod_r>:
 8007b48:	4b01      	ldr	r3, [pc, #4]	; (8007b50 <_strtod_r+0x8>)
 8007b4a:	f7ff ba09 	b.w	8006f60 <_strtod_l>
 8007b4e:	bf00      	nop
 8007b50:	20000074 	.word	0x20000074

08007b54 <strtod>:
 8007b54:	460a      	mov	r2, r1
 8007b56:	4601      	mov	r1, r0
 8007b58:	4802      	ldr	r0, [pc, #8]	; (8007b64 <strtod+0x10>)
 8007b5a:	4b03      	ldr	r3, [pc, #12]	; (8007b68 <strtod+0x14>)
 8007b5c:	6800      	ldr	r0, [r0, #0]
 8007b5e:	f7ff b9ff 	b.w	8006f60 <_strtod_l>
 8007b62:	bf00      	nop
 8007b64:	2000000c 	.word	0x2000000c
 8007b68:	20000074 	.word	0x20000074

08007b6c <_strtol_l.isra.0>:
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b72:	4686      	mov	lr, r0
 8007b74:	d001      	beq.n	8007b7a <_strtol_l.isra.0+0xe>
 8007b76:	2b24      	cmp	r3, #36	; 0x24
 8007b78:	d906      	bls.n	8007b88 <_strtol_l.isra.0+0x1c>
 8007b7a:	f7fe ff43 	bl	8006a04 <__errno>
 8007b7e:	2316      	movs	r3, #22
 8007b80:	6003      	str	r3, [r0, #0]
 8007b82:	2000      	movs	r0, #0
 8007b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b88:	468c      	mov	ip, r1
 8007b8a:	4e3a      	ldr	r6, [pc, #232]	; (8007c74 <_strtol_l.isra.0+0x108>)
 8007b8c:	4660      	mov	r0, ip
 8007b8e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007b92:	5da5      	ldrb	r5, [r4, r6]
 8007b94:	f015 0508 	ands.w	r5, r5, #8
 8007b98:	d1f8      	bne.n	8007b8c <_strtol_l.isra.0+0x20>
 8007b9a:	2c2d      	cmp	r4, #45	; 0x2d
 8007b9c:	d133      	bne.n	8007c06 <_strtol_l.isra.0+0x9a>
 8007b9e:	f04f 0801 	mov.w	r8, #1
 8007ba2:	f89c 4000 	ldrb.w	r4, [ip]
 8007ba6:	f100 0c02 	add.w	ip, r0, #2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d05d      	beq.n	8007c6a <_strtol_l.isra.0+0xfe>
 8007bae:	2b10      	cmp	r3, #16
 8007bb0:	d10c      	bne.n	8007bcc <_strtol_l.isra.0+0x60>
 8007bb2:	2c30      	cmp	r4, #48	; 0x30
 8007bb4:	d10a      	bne.n	8007bcc <_strtol_l.isra.0+0x60>
 8007bb6:	f89c 0000 	ldrb.w	r0, [ip]
 8007bba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007bbe:	2858      	cmp	r0, #88	; 0x58
 8007bc0:	d14e      	bne.n	8007c60 <_strtol_l.isra.0+0xf4>
 8007bc2:	2310      	movs	r3, #16
 8007bc4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8007bc8:	f10c 0c02 	add.w	ip, ip, #2
 8007bcc:	2500      	movs	r5, #0
 8007bce:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8007bd2:	3f01      	subs	r7, #1
 8007bd4:	fbb7 f9f3 	udiv	r9, r7, r3
 8007bd8:	4628      	mov	r0, r5
 8007bda:	fb03 7a19 	mls	sl, r3, r9, r7
 8007bde:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8007be2:	2e09      	cmp	r6, #9
 8007be4:	d818      	bhi.n	8007c18 <_strtol_l.isra.0+0xac>
 8007be6:	4634      	mov	r4, r6
 8007be8:	42a3      	cmp	r3, r4
 8007bea:	dd24      	ble.n	8007c36 <_strtol_l.isra.0+0xca>
 8007bec:	2d00      	cmp	r5, #0
 8007bee:	db1f      	blt.n	8007c30 <_strtol_l.isra.0+0xc4>
 8007bf0:	4581      	cmp	r9, r0
 8007bf2:	d31d      	bcc.n	8007c30 <_strtol_l.isra.0+0xc4>
 8007bf4:	d101      	bne.n	8007bfa <_strtol_l.isra.0+0x8e>
 8007bf6:	45a2      	cmp	sl, r4
 8007bf8:	db1a      	blt.n	8007c30 <_strtol_l.isra.0+0xc4>
 8007bfa:	2501      	movs	r5, #1
 8007bfc:	fb00 4003 	mla	r0, r0, r3, r4
 8007c00:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007c04:	e7eb      	b.n	8007bde <_strtol_l.isra.0+0x72>
 8007c06:	2c2b      	cmp	r4, #43	; 0x2b
 8007c08:	bf08      	it	eq
 8007c0a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8007c0e:	46a8      	mov	r8, r5
 8007c10:	bf08      	it	eq
 8007c12:	f100 0c02 	addeq.w	ip, r0, #2
 8007c16:	e7c8      	b.n	8007baa <_strtol_l.isra.0+0x3e>
 8007c18:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8007c1c:	2e19      	cmp	r6, #25
 8007c1e:	d801      	bhi.n	8007c24 <_strtol_l.isra.0+0xb8>
 8007c20:	3c37      	subs	r4, #55	; 0x37
 8007c22:	e7e1      	b.n	8007be8 <_strtol_l.isra.0+0x7c>
 8007c24:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007c28:	2e19      	cmp	r6, #25
 8007c2a:	d804      	bhi.n	8007c36 <_strtol_l.isra.0+0xca>
 8007c2c:	3c57      	subs	r4, #87	; 0x57
 8007c2e:	e7db      	b.n	8007be8 <_strtol_l.isra.0+0x7c>
 8007c30:	f04f 35ff 	mov.w	r5, #4294967295
 8007c34:	e7e4      	b.n	8007c00 <_strtol_l.isra.0+0x94>
 8007c36:	2d00      	cmp	r5, #0
 8007c38:	da08      	bge.n	8007c4c <_strtol_l.isra.0+0xe0>
 8007c3a:	2322      	movs	r3, #34	; 0x22
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	f8ce 3000 	str.w	r3, [lr]
 8007c42:	2a00      	cmp	r2, #0
 8007c44:	d09e      	beq.n	8007b84 <_strtol_l.isra.0+0x18>
 8007c46:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007c4a:	e007      	b.n	8007c5c <_strtol_l.isra.0+0xf0>
 8007c4c:	f1b8 0f00 	cmp.w	r8, #0
 8007c50:	d000      	beq.n	8007c54 <_strtol_l.isra.0+0xe8>
 8007c52:	4240      	negs	r0, r0
 8007c54:	2a00      	cmp	r2, #0
 8007c56:	d095      	beq.n	8007b84 <_strtol_l.isra.0+0x18>
 8007c58:	2d00      	cmp	r5, #0
 8007c5a:	d1f4      	bne.n	8007c46 <_strtol_l.isra.0+0xda>
 8007c5c:	6011      	str	r1, [r2, #0]
 8007c5e:	e791      	b.n	8007b84 <_strtol_l.isra.0+0x18>
 8007c60:	2430      	movs	r4, #48	; 0x30
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1b2      	bne.n	8007bcc <_strtol_l.isra.0+0x60>
 8007c66:	2308      	movs	r3, #8
 8007c68:	e7b0      	b.n	8007bcc <_strtol_l.isra.0+0x60>
 8007c6a:	2c30      	cmp	r4, #48	; 0x30
 8007c6c:	d0a3      	beq.n	8007bb6 <_strtol_l.isra.0+0x4a>
 8007c6e:	230a      	movs	r3, #10
 8007c70:	e7ac      	b.n	8007bcc <_strtol_l.isra.0+0x60>
 8007c72:	bf00      	nop
 8007c74:	0800c3a9 	.word	0x0800c3a9

08007c78 <_strtol_r>:
 8007c78:	f7ff bf78 	b.w	8007b6c <_strtol_l.isra.0>

08007c7c <strtol>:
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	460a      	mov	r2, r1
 8007c80:	4601      	mov	r1, r0
 8007c82:	4802      	ldr	r0, [pc, #8]	; (8007c8c <strtol+0x10>)
 8007c84:	6800      	ldr	r0, [r0, #0]
 8007c86:	f7ff bf71 	b.w	8007b6c <_strtol_l.isra.0>
 8007c8a:	bf00      	nop
 8007c8c:	2000000c 	.word	0x2000000c

08007c90 <rshift>:
 8007c90:	6903      	ldr	r3, [r0, #16]
 8007c92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007c9a:	f100 0414 	add.w	r4, r0, #20
 8007c9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007ca2:	dd46      	ble.n	8007d32 <rshift+0xa2>
 8007ca4:	f011 011f 	ands.w	r1, r1, #31
 8007ca8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007cac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007cb0:	d10c      	bne.n	8007ccc <rshift+0x3c>
 8007cb2:	4629      	mov	r1, r5
 8007cb4:	f100 0710 	add.w	r7, r0, #16
 8007cb8:	42b1      	cmp	r1, r6
 8007cba:	d335      	bcc.n	8007d28 <rshift+0x98>
 8007cbc:	1a9b      	subs	r3, r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	1eea      	subs	r2, r5, #3
 8007cc2:	4296      	cmp	r6, r2
 8007cc4:	bf38      	it	cc
 8007cc6:	2300      	movcc	r3, #0
 8007cc8:	4423      	add	r3, r4
 8007cca:	e015      	b.n	8007cf8 <rshift+0x68>
 8007ccc:	46a1      	mov	r9, r4
 8007cce:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007cd2:	f1c1 0820 	rsb	r8, r1, #32
 8007cd6:	40cf      	lsrs	r7, r1
 8007cd8:	f105 0e04 	add.w	lr, r5, #4
 8007cdc:	4576      	cmp	r6, lr
 8007cde:	46f4      	mov	ip, lr
 8007ce0:	d816      	bhi.n	8007d10 <rshift+0x80>
 8007ce2:	1a9b      	subs	r3, r3, r2
 8007ce4:	009a      	lsls	r2, r3, #2
 8007ce6:	3a04      	subs	r2, #4
 8007ce8:	3501      	adds	r5, #1
 8007cea:	42ae      	cmp	r6, r5
 8007cec:	bf38      	it	cc
 8007cee:	2200      	movcc	r2, #0
 8007cf0:	18a3      	adds	r3, r4, r2
 8007cf2:	50a7      	str	r7, [r4, r2]
 8007cf4:	b107      	cbz	r7, 8007cf8 <rshift+0x68>
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	42a3      	cmp	r3, r4
 8007cfa:	eba3 0204 	sub.w	r2, r3, r4
 8007cfe:	bf08      	it	eq
 8007d00:	2300      	moveq	r3, #0
 8007d02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007d06:	6102      	str	r2, [r0, #16]
 8007d08:	bf08      	it	eq
 8007d0a:	6143      	streq	r3, [r0, #20]
 8007d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d10:	f8dc c000 	ldr.w	ip, [ip]
 8007d14:	fa0c fc08 	lsl.w	ip, ip, r8
 8007d18:	ea4c 0707 	orr.w	r7, ip, r7
 8007d1c:	f849 7b04 	str.w	r7, [r9], #4
 8007d20:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d24:	40cf      	lsrs	r7, r1
 8007d26:	e7d9      	b.n	8007cdc <rshift+0x4c>
 8007d28:	f851 cb04 	ldr.w	ip, [r1], #4
 8007d2c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007d30:	e7c2      	b.n	8007cb8 <rshift+0x28>
 8007d32:	4623      	mov	r3, r4
 8007d34:	e7e0      	b.n	8007cf8 <rshift+0x68>

08007d36 <__hexdig_fun>:
 8007d36:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007d3a:	2b09      	cmp	r3, #9
 8007d3c:	d802      	bhi.n	8007d44 <__hexdig_fun+0xe>
 8007d3e:	3820      	subs	r0, #32
 8007d40:	b2c0      	uxtb	r0, r0
 8007d42:	4770      	bx	lr
 8007d44:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007d48:	2b05      	cmp	r3, #5
 8007d4a:	d801      	bhi.n	8007d50 <__hexdig_fun+0x1a>
 8007d4c:	3847      	subs	r0, #71	; 0x47
 8007d4e:	e7f7      	b.n	8007d40 <__hexdig_fun+0xa>
 8007d50:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007d54:	2b05      	cmp	r3, #5
 8007d56:	d801      	bhi.n	8007d5c <__hexdig_fun+0x26>
 8007d58:	3827      	subs	r0, #39	; 0x27
 8007d5a:	e7f1      	b.n	8007d40 <__hexdig_fun+0xa>
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	4770      	bx	lr

08007d60 <__gethex>:
 8007d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d64:	b08b      	sub	sp, #44	; 0x2c
 8007d66:	9306      	str	r3, [sp, #24]
 8007d68:	4bb9      	ldr	r3, [pc, #740]	; (8008050 <__gethex+0x2f0>)
 8007d6a:	9002      	str	r0, [sp, #8]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	468b      	mov	fp, r1
 8007d70:	4618      	mov	r0, r3
 8007d72:	4690      	mov	r8, r2
 8007d74:	9303      	str	r3, [sp, #12]
 8007d76:	f7f8 f9eb 	bl	8000150 <strlen>
 8007d7a:	4682      	mov	sl, r0
 8007d7c:	9b03      	ldr	r3, [sp, #12]
 8007d7e:	f8db 2000 	ldr.w	r2, [fp]
 8007d82:	4403      	add	r3, r0
 8007d84:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007d88:	9307      	str	r3, [sp, #28]
 8007d8a:	1c93      	adds	r3, r2, #2
 8007d8c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007d90:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007d94:	32fe      	adds	r2, #254	; 0xfe
 8007d96:	18d1      	adds	r1, r2, r3
 8007d98:	461f      	mov	r7, r3
 8007d9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007d9e:	9101      	str	r1, [sp, #4]
 8007da0:	2830      	cmp	r0, #48	; 0x30
 8007da2:	d0f8      	beq.n	8007d96 <__gethex+0x36>
 8007da4:	f7ff ffc7 	bl	8007d36 <__hexdig_fun>
 8007da8:	4604      	mov	r4, r0
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d13a      	bne.n	8007e24 <__gethex+0xc4>
 8007dae:	4652      	mov	r2, sl
 8007db0:	4638      	mov	r0, r7
 8007db2:	9903      	ldr	r1, [sp, #12]
 8007db4:	f001 fb0c 	bl	80093d0 <strncmp>
 8007db8:	4605      	mov	r5, r0
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d166      	bne.n	8007e8c <__gethex+0x12c>
 8007dbe:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007dc2:	eb07 060a 	add.w	r6, r7, sl
 8007dc6:	f7ff ffb6 	bl	8007d36 <__hexdig_fun>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	d060      	beq.n	8007e90 <__gethex+0x130>
 8007dce:	4633      	mov	r3, r6
 8007dd0:	7818      	ldrb	r0, [r3, #0]
 8007dd2:	461f      	mov	r7, r3
 8007dd4:	2830      	cmp	r0, #48	; 0x30
 8007dd6:	f103 0301 	add.w	r3, r3, #1
 8007dda:	d0f9      	beq.n	8007dd0 <__gethex+0x70>
 8007ddc:	f7ff ffab 	bl	8007d36 <__hexdig_fun>
 8007de0:	2301      	movs	r3, #1
 8007de2:	fab0 f480 	clz	r4, r0
 8007de6:	4635      	mov	r5, r6
 8007de8:	0964      	lsrs	r4, r4, #5
 8007dea:	9301      	str	r3, [sp, #4]
 8007dec:	463a      	mov	r2, r7
 8007dee:	4616      	mov	r6, r2
 8007df0:	7830      	ldrb	r0, [r6, #0]
 8007df2:	3201      	adds	r2, #1
 8007df4:	f7ff ff9f 	bl	8007d36 <__hexdig_fun>
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	d1f8      	bne.n	8007dee <__gethex+0x8e>
 8007dfc:	4652      	mov	r2, sl
 8007dfe:	4630      	mov	r0, r6
 8007e00:	9903      	ldr	r1, [sp, #12]
 8007e02:	f001 fae5 	bl	80093d0 <strncmp>
 8007e06:	b980      	cbnz	r0, 8007e2a <__gethex+0xca>
 8007e08:	b94d      	cbnz	r5, 8007e1e <__gethex+0xbe>
 8007e0a:	eb06 050a 	add.w	r5, r6, sl
 8007e0e:	462a      	mov	r2, r5
 8007e10:	4616      	mov	r6, r2
 8007e12:	7830      	ldrb	r0, [r6, #0]
 8007e14:	3201      	adds	r2, #1
 8007e16:	f7ff ff8e 	bl	8007d36 <__hexdig_fun>
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	d1f8      	bne.n	8007e10 <__gethex+0xb0>
 8007e1e:	1bad      	subs	r5, r5, r6
 8007e20:	00ad      	lsls	r5, r5, #2
 8007e22:	e004      	b.n	8007e2e <__gethex+0xce>
 8007e24:	2400      	movs	r4, #0
 8007e26:	4625      	mov	r5, r4
 8007e28:	e7e0      	b.n	8007dec <__gethex+0x8c>
 8007e2a:	2d00      	cmp	r5, #0
 8007e2c:	d1f7      	bne.n	8007e1e <__gethex+0xbe>
 8007e2e:	7833      	ldrb	r3, [r6, #0]
 8007e30:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e34:	2b50      	cmp	r3, #80	; 0x50
 8007e36:	d139      	bne.n	8007eac <__gethex+0x14c>
 8007e38:	7873      	ldrb	r3, [r6, #1]
 8007e3a:	2b2b      	cmp	r3, #43	; 0x2b
 8007e3c:	d02a      	beq.n	8007e94 <__gethex+0x134>
 8007e3e:	2b2d      	cmp	r3, #45	; 0x2d
 8007e40:	d02c      	beq.n	8007e9c <__gethex+0x13c>
 8007e42:	f04f 0900 	mov.w	r9, #0
 8007e46:	1c71      	adds	r1, r6, #1
 8007e48:	7808      	ldrb	r0, [r1, #0]
 8007e4a:	f7ff ff74 	bl	8007d36 <__hexdig_fun>
 8007e4e:	1e43      	subs	r3, r0, #1
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b18      	cmp	r3, #24
 8007e54:	d82a      	bhi.n	8007eac <__gethex+0x14c>
 8007e56:	f1a0 0210 	sub.w	r2, r0, #16
 8007e5a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007e5e:	f7ff ff6a 	bl	8007d36 <__hexdig_fun>
 8007e62:	1e43      	subs	r3, r0, #1
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b18      	cmp	r3, #24
 8007e68:	d91b      	bls.n	8007ea2 <__gethex+0x142>
 8007e6a:	f1b9 0f00 	cmp.w	r9, #0
 8007e6e:	d000      	beq.n	8007e72 <__gethex+0x112>
 8007e70:	4252      	negs	r2, r2
 8007e72:	4415      	add	r5, r2
 8007e74:	f8cb 1000 	str.w	r1, [fp]
 8007e78:	b1d4      	cbz	r4, 8007eb0 <__gethex+0x150>
 8007e7a:	9b01      	ldr	r3, [sp, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bf14      	ite	ne
 8007e80:	2700      	movne	r7, #0
 8007e82:	2706      	moveq	r7, #6
 8007e84:	4638      	mov	r0, r7
 8007e86:	b00b      	add	sp, #44	; 0x2c
 8007e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8c:	463e      	mov	r6, r7
 8007e8e:	4625      	mov	r5, r4
 8007e90:	2401      	movs	r4, #1
 8007e92:	e7cc      	b.n	8007e2e <__gethex+0xce>
 8007e94:	f04f 0900 	mov.w	r9, #0
 8007e98:	1cb1      	adds	r1, r6, #2
 8007e9a:	e7d5      	b.n	8007e48 <__gethex+0xe8>
 8007e9c:	f04f 0901 	mov.w	r9, #1
 8007ea0:	e7fa      	b.n	8007e98 <__gethex+0x138>
 8007ea2:	230a      	movs	r3, #10
 8007ea4:	fb03 0202 	mla	r2, r3, r2, r0
 8007ea8:	3a10      	subs	r2, #16
 8007eaa:	e7d6      	b.n	8007e5a <__gethex+0xfa>
 8007eac:	4631      	mov	r1, r6
 8007eae:	e7e1      	b.n	8007e74 <__gethex+0x114>
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	1bf3      	subs	r3, r6, r7
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	2b07      	cmp	r3, #7
 8007eb8:	dc0a      	bgt.n	8007ed0 <__gethex+0x170>
 8007eba:	9802      	ldr	r0, [sp, #8]
 8007ebc:	f000 fa60 	bl	8008380 <_Balloc>
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	b940      	cbnz	r0, 8007ed6 <__gethex+0x176>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	21de      	movs	r1, #222	; 0xde
 8007ec8:	4b62      	ldr	r3, [pc, #392]	; (8008054 <__gethex+0x2f4>)
 8007eca:	4863      	ldr	r0, [pc, #396]	; (8008058 <__gethex+0x2f8>)
 8007ecc:	f001 faa0 	bl	8009410 <__assert_func>
 8007ed0:	3101      	adds	r1, #1
 8007ed2:	105b      	asrs	r3, r3, #1
 8007ed4:	e7ef      	b.n	8007eb6 <__gethex+0x156>
 8007ed6:	f04f 0b00 	mov.w	fp, #0
 8007eda:	f100 0914 	add.w	r9, r0, #20
 8007ede:	f1ca 0301 	rsb	r3, sl, #1
 8007ee2:	f8cd 9010 	str.w	r9, [sp, #16]
 8007ee6:	f8cd b004 	str.w	fp, [sp, #4]
 8007eea:	9308      	str	r3, [sp, #32]
 8007eec:	42b7      	cmp	r7, r6
 8007eee:	d33f      	bcc.n	8007f70 <__gethex+0x210>
 8007ef0:	9f04      	ldr	r7, [sp, #16]
 8007ef2:	9b01      	ldr	r3, [sp, #4]
 8007ef4:	f847 3b04 	str.w	r3, [r7], #4
 8007ef8:	eba7 0709 	sub.w	r7, r7, r9
 8007efc:	10bf      	asrs	r7, r7, #2
 8007efe:	6127      	str	r7, [r4, #16]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 fb33 	bl	800856c <__hi0bits>
 8007f06:	017f      	lsls	r7, r7, #5
 8007f08:	f8d8 6000 	ldr.w	r6, [r8]
 8007f0c:	1a3f      	subs	r7, r7, r0
 8007f0e:	42b7      	cmp	r7, r6
 8007f10:	dd62      	ble.n	8007fd8 <__gethex+0x278>
 8007f12:	1bbf      	subs	r7, r7, r6
 8007f14:	4639      	mov	r1, r7
 8007f16:	4620      	mov	r0, r4
 8007f18:	f000 fec9 	bl	8008cae <__any_on>
 8007f1c:	4682      	mov	sl, r0
 8007f1e:	b1a8      	cbz	r0, 8007f4c <__gethex+0x1ec>
 8007f20:	f04f 0a01 	mov.w	sl, #1
 8007f24:	1e7b      	subs	r3, r7, #1
 8007f26:	1159      	asrs	r1, r3, #5
 8007f28:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007f2c:	f003 021f 	and.w	r2, r3, #31
 8007f30:	fa0a f202 	lsl.w	r2, sl, r2
 8007f34:	420a      	tst	r2, r1
 8007f36:	d009      	beq.n	8007f4c <__gethex+0x1ec>
 8007f38:	4553      	cmp	r3, sl
 8007f3a:	dd05      	ble.n	8007f48 <__gethex+0x1e8>
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	1eb9      	subs	r1, r7, #2
 8007f40:	f000 feb5 	bl	8008cae <__any_on>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d144      	bne.n	8007fd2 <__gethex+0x272>
 8007f48:	f04f 0a02 	mov.w	sl, #2
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f7ff fe9e 	bl	8007c90 <rshift>
 8007f54:	443d      	add	r5, r7
 8007f56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f5a:	42ab      	cmp	r3, r5
 8007f5c:	da4a      	bge.n	8007ff4 <__gethex+0x294>
 8007f5e:	4621      	mov	r1, r4
 8007f60:	9802      	ldr	r0, [sp, #8]
 8007f62:	f000 fa4d 	bl	8008400 <_Bfree>
 8007f66:	2300      	movs	r3, #0
 8007f68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f6a:	27a3      	movs	r7, #163	; 0xa3
 8007f6c:	6013      	str	r3, [r2, #0]
 8007f6e:	e789      	b.n	8007e84 <__gethex+0x124>
 8007f70:	1e73      	subs	r3, r6, #1
 8007f72:	9a07      	ldr	r2, [sp, #28]
 8007f74:	9305      	str	r3, [sp, #20]
 8007f76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d019      	beq.n	8007fb2 <__gethex+0x252>
 8007f7e:	f1bb 0f20 	cmp.w	fp, #32
 8007f82:	d107      	bne.n	8007f94 <__gethex+0x234>
 8007f84:	9b04      	ldr	r3, [sp, #16]
 8007f86:	9a01      	ldr	r2, [sp, #4]
 8007f88:	f843 2b04 	str.w	r2, [r3], #4
 8007f8c:	9304      	str	r3, [sp, #16]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	469b      	mov	fp, r3
 8007f92:	9301      	str	r3, [sp, #4]
 8007f94:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007f98:	f7ff fecd 	bl	8007d36 <__hexdig_fun>
 8007f9c:	9b01      	ldr	r3, [sp, #4]
 8007f9e:	f000 000f 	and.w	r0, r0, #15
 8007fa2:	fa00 f00b 	lsl.w	r0, r0, fp
 8007fa6:	4303      	orrs	r3, r0
 8007fa8:	9301      	str	r3, [sp, #4]
 8007faa:	f10b 0b04 	add.w	fp, fp, #4
 8007fae:	9b05      	ldr	r3, [sp, #20]
 8007fb0:	e00d      	b.n	8007fce <__gethex+0x26e>
 8007fb2:	9b05      	ldr	r3, [sp, #20]
 8007fb4:	9a08      	ldr	r2, [sp, #32]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	42bb      	cmp	r3, r7
 8007fba:	d3e0      	bcc.n	8007f7e <__gethex+0x21e>
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	4652      	mov	r2, sl
 8007fc0:	9903      	ldr	r1, [sp, #12]
 8007fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc4:	f001 fa04 	bl	80093d0 <strncmp>
 8007fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d1d7      	bne.n	8007f7e <__gethex+0x21e>
 8007fce:	461e      	mov	r6, r3
 8007fd0:	e78c      	b.n	8007eec <__gethex+0x18c>
 8007fd2:	f04f 0a03 	mov.w	sl, #3
 8007fd6:	e7b9      	b.n	8007f4c <__gethex+0x1ec>
 8007fd8:	da09      	bge.n	8007fee <__gethex+0x28e>
 8007fda:	1bf7      	subs	r7, r6, r7
 8007fdc:	4621      	mov	r1, r4
 8007fde:	463a      	mov	r2, r7
 8007fe0:	9802      	ldr	r0, [sp, #8]
 8007fe2:	f000 fc25 	bl	8008830 <__lshift>
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	1bed      	subs	r5, r5, r7
 8007fea:	f100 0914 	add.w	r9, r0, #20
 8007fee:	f04f 0a00 	mov.w	sl, #0
 8007ff2:	e7b0      	b.n	8007f56 <__gethex+0x1f6>
 8007ff4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007ff8:	42a8      	cmp	r0, r5
 8007ffa:	dd71      	ble.n	80080e0 <__gethex+0x380>
 8007ffc:	1b45      	subs	r5, r0, r5
 8007ffe:	42ae      	cmp	r6, r5
 8008000:	dc34      	bgt.n	800806c <__gethex+0x30c>
 8008002:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008006:	2b02      	cmp	r3, #2
 8008008:	d028      	beq.n	800805c <__gethex+0x2fc>
 800800a:	2b03      	cmp	r3, #3
 800800c:	d02a      	beq.n	8008064 <__gethex+0x304>
 800800e:	2b01      	cmp	r3, #1
 8008010:	d115      	bne.n	800803e <__gethex+0x2de>
 8008012:	42ae      	cmp	r6, r5
 8008014:	d113      	bne.n	800803e <__gethex+0x2de>
 8008016:	2e01      	cmp	r6, #1
 8008018:	d10b      	bne.n	8008032 <__gethex+0x2d2>
 800801a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800801e:	9a06      	ldr	r2, [sp, #24]
 8008020:	2762      	movs	r7, #98	; 0x62
 8008022:	6013      	str	r3, [r2, #0]
 8008024:	2301      	movs	r3, #1
 8008026:	6123      	str	r3, [r4, #16]
 8008028:	f8c9 3000 	str.w	r3, [r9]
 800802c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800802e:	601c      	str	r4, [r3, #0]
 8008030:	e728      	b.n	8007e84 <__gethex+0x124>
 8008032:	4620      	mov	r0, r4
 8008034:	1e71      	subs	r1, r6, #1
 8008036:	f000 fe3a 	bl	8008cae <__any_on>
 800803a:	2800      	cmp	r0, #0
 800803c:	d1ed      	bne.n	800801a <__gethex+0x2ba>
 800803e:	4621      	mov	r1, r4
 8008040:	9802      	ldr	r0, [sp, #8]
 8008042:	f000 f9dd 	bl	8008400 <_Bfree>
 8008046:	2300      	movs	r3, #0
 8008048:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800804a:	2750      	movs	r7, #80	; 0x50
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	e719      	b.n	8007e84 <__gethex+0x124>
 8008050:	0800c524 	.word	0x0800c524
 8008054:	0800c4a9 	.word	0x0800c4a9
 8008058:	0800c4ba 	.word	0x0800c4ba
 800805c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1ed      	bne.n	800803e <__gethex+0x2de>
 8008062:	e7da      	b.n	800801a <__gethex+0x2ba>
 8008064:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1d7      	bne.n	800801a <__gethex+0x2ba>
 800806a:	e7e8      	b.n	800803e <__gethex+0x2de>
 800806c:	1e6f      	subs	r7, r5, #1
 800806e:	f1ba 0f00 	cmp.w	sl, #0
 8008072:	d132      	bne.n	80080da <__gethex+0x37a>
 8008074:	b127      	cbz	r7, 8008080 <__gethex+0x320>
 8008076:	4639      	mov	r1, r7
 8008078:	4620      	mov	r0, r4
 800807a:	f000 fe18 	bl	8008cae <__any_on>
 800807e:	4682      	mov	sl, r0
 8008080:	2101      	movs	r1, #1
 8008082:	117b      	asrs	r3, r7, #5
 8008084:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008088:	f007 071f 	and.w	r7, r7, #31
 800808c:	fa01 f707 	lsl.w	r7, r1, r7
 8008090:	421f      	tst	r7, r3
 8008092:	f04f 0702 	mov.w	r7, #2
 8008096:	4629      	mov	r1, r5
 8008098:	4620      	mov	r0, r4
 800809a:	bf18      	it	ne
 800809c:	f04a 0a02 	orrne.w	sl, sl, #2
 80080a0:	1b76      	subs	r6, r6, r5
 80080a2:	f7ff fdf5 	bl	8007c90 <rshift>
 80080a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80080aa:	f1ba 0f00 	cmp.w	sl, #0
 80080ae:	d048      	beq.n	8008142 <__gethex+0x3e2>
 80080b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d015      	beq.n	80080e4 <__gethex+0x384>
 80080b8:	2b03      	cmp	r3, #3
 80080ba:	d017      	beq.n	80080ec <__gethex+0x38c>
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d109      	bne.n	80080d4 <__gethex+0x374>
 80080c0:	f01a 0f02 	tst.w	sl, #2
 80080c4:	d006      	beq.n	80080d4 <__gethex+0x374>
 80080c6:	f8d9 0000 	ldr.w	r0, [r9]
 80080ca:	ea4a 0a00 	orr.w	sl, sl, r0
 80080ce:	f01a 0f01 	tst.w	sl, #1
 80080d2:	d10e      	bne.n	80080f2 <__gethex+0x392>
 80080d4:	f047 0710 	orr.w	r7, r7, #16
 80080d8:	e033      	b.n	8008142 <__gethex+0x3e2>
 80080da:	f04f 0a01 	mov.w	sl, #1
 80080de:	e7cf      	b.n	8008080 <__gethex+0x320>
 80080e0:	2701      	movs	r7, #1
 80080e2:	e7e2      	b.n	80080aa <__gethex+0x34a>
 80080e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080e6:	f1c3 0301 	rsb	r3, r3, #1
 80080ea:	9315      	str	r3, [sp, #84]	; 0x54
 80080ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d0f0      	beq.n	80080d4 <__gethex+0x374>
 80080f2:	f04f 0c00 	mov.w	ip, #0
 80080f6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80080fa:	f104 0314 	add.w	r3, r4, #20
 80080fe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008102:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008106:	4618      	mov	r0, r3
 8008108:	f853 2b04 	ldr.w	r2, [r3], #4
 800810c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008110:	d01c      	beq.n	800814c <__gethex+0x3ec>
 8008112:	3201      	adds	r2, #1
 8008114:	6002      	str	r2, [r0, #0]
 8008116:	2f02      	cmp	r7, #2
 8008118:	f104 0314 	add.w	r3, r4, #20
 800811c:	d13d      	bne.n	800819a <__gethex+0x43a>
 800811e:	f8d8 2000 	ldr.w	r2, [r8]
 8008122:	3a01      	subs	r2, #1
 8008124:	42b2      	cmp	r2, r6
 8008126:	d10a      	bne.n	800813e <__gethex+0x3de>
 8008128:	2201      	movs	r2, #1
 800812a:	1171      	asrs	r1, r6, #5
 800812c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008130:	f006 061f 	and.w	r6, r6, #31
 8008134:	fa02 f606 	lsl.w	r6, r2, r6
 8008138:	421e      	tst	r6, r3
 800813a:	bf18      	it	ne
 800813c:	4617      	movne	r7, r2
 800813e:	f047 0720 	orr.w	r7, r7, #32
 8008142:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008144:	601c      	str	r4, [r3, #0]
 8008146:	9b06      	ldr	r3, [sp, #24]
 8008148:	601d      	str	r5, [r3, #0]
 800814a:	e69b      	b.n	8007e84 <__gethex+0x124>
 800814c:	4299      	cmp	r1, r3
 800814e:	f843 cc04 	str.w	ip, [r3, #-4]
 8008152:	d8d8      	bhi.n	8008106 <__gethex+0x3a6>
 8008154:	68a3      	ldr	r3, [r4, #8]
 8008156:	459b      	cmp	fp, r3
 8008158:	db17      	blt.n	800818a <__gethex+0x42a>
 800815a:	6861      	ldr	r1, [r4, #4]
 800815c:	9802      	ldr	r0, [sp, #8]
 800815e:	3101      	adds	r1, #1
 8008160:	f000 f90e 	bl	8008380 <_Balloc>
 8008164:	4681      	mov	r9, r0
 8008166:	b918      	cbnz	r0, 8008170 <__gethex+0x410>
 8008168:	4602      	mov	r2, r0
 800816a:	2184      	movs	r1, #132	; 0x84
 800816c:	4b19      	ldr	r3, [pc, #100]	; (80081d4 <__gethex+0x474>)
 800816e:	e6ac      	b.n	8007eca <__gethex+0x16a>
 8008170:	6922      	ldr	r2, [r4, #16]
 8008172:	f104 010c 	add.w	r1, r4, #12
 8008176:	3202      	adds	r2, #2
 8008178:	0092      	lsls	r2, r2, #2
 800817a:	300c      	adds	r0, #12
 800817c:	f7fe fc6c 	bl	8006a58 <memcpy>
 8008180:	4621      	mov	r1, r4
 8008182:	9802      	ldr	r0, [sp, #8]
 8008184:	f000 f93c 	bl	8008400 <_Bfree>
 8008188:	464c      	mov	r4, r9
 800818a:	6923      	ldr	r3, [r4, #16]
 800818c:	1c5a      	adds	r2, r3, #1
 800818e:	6122      	str	r2, [r4, #16]
 8008190:	2201      	movs	r2, #1
 8008192:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008196:	615a      	str	r2, [r3, #20]
 8008198:	e7bd      	b.n	8008116 <__gethex+0x3b6>
 800819a:	6922      	ldr	r2, [r4, #16]
 800819c:	455a      	cmp	r2, fp
 800819e:	dd0b      	ble.n	80081b8 <__gethex+0x458>
 80081a0:	2101      	movs	r1, #1
 80081a2:	4620      	mov	r0, r4
 80081a4:	f7ff fd74 	bl	8007c90 <rshift>
 80081a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80081ac:	3501      	adds	r5, #1
 80081ae:	42ab      	cmp	r3, r5
 80081b0:	f6ff aed5 	blt.w	8007f5e <__gethex+0x1fe>
 80081b4:	2701      	movs	r7, #1
 80081b6:	e7c2      	b.n	800813e <__gethex+0x3de>
 80081b8:	f016 061f 	ands.w	r6, r6, #31
 80081bc:	d0fa      	beq.n	80081b4 <__gethex+0x454>
 80081be:	449a      	add	sl, r3
 80081c0:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80081c4:	f000 f9d2 	bl	800856c <__hi0bits>
 80081c8:	f1c6 0620 	rsb	r6, r6, #32
 80081cc:	42b0      	cmp	r0, r6
 80081ce:	dbe7      	blt.n	80081a0 <__gethex+0x440>
 80081d0:	e7f0      	b.n	80081b4 <__gethex+0x454>
 80081d2:	bf00      	nop
 80081d4:	0800c4a9 	.word	0x0800c4a9

080081d8 <L_shift>:
 80081d8:	f1c2 0208 	rsb	r2, r2, #8
 80081dc:	0092      	lsls	r2, r2, #2
 80081de:	b570      	push	{r4, r5, r6, lr}
 80081e0:	f1c2 0620 	rsb	r6, r2, #32
 80081e4:	6843      	ldr	r3, [r0, #4]
 80081e6:	6804      	ldr	r4, [r0, #0]
 80081e8:	fa03 f506 	lsl.w	r5, r3, r6
 80081ec:	432c      	orrs	r4, r5
 80081ee:	40d3      	lsrs	r3, r2
 80081f0:	6004      	str	r4, [r0, #0]
 80081f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80081f6:	4288      	cmp	r0, r1
 80081f8:	d3f4      	bcc.n	80081e4 <L_shift+0xc>
 80081fa:	bd70      	pop	{r4, r5, r6, pc}

080081fc <__match>:
 80081fc:	b530      	push	{r4, r5, lr}
 80081fe:	6803      	ldr	r3, [r0, #0]
 8008200:	3301      	adds	r3, #1
 8008202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008206:	b914      	cbnz	r4, 800820e <__match+0x12>
 8008208:	6003      	str	r3, [r0, #0]
 800820a:	2001      	movs	r0, #1
 800820c:	bd30      	pop	{r4, r5, pc}
 800820e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008212:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008216:	2d19      	cmp	r5, #25
 8008218:	bf98      	it	ls
 800821a:	3220      	addls	r2, #32
 800821c:	42a2      	cmp	r2, r4
 800821e:	d0f0      	beq.n	8008202 <__match+0x6>
 8008220:	2000      	movs	r0, #0
 8008222:	e7f3      	b.n	800820c <__match+0x10>

08008224 <__hexnan>:
 8008224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008228:	2500      	movs	r5, #0
 800822a:	680b      	ldr	r3, [r1, #0]
 800822c:	4682      	mov	sl, r0
 800822e:	115e      	asrs	r6, r3, #5
 8008230:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008234:	f013 031f 	ands.w	r3, r3, #31
 8008238:	bf18      	it	ne
 800823a:	3604      	addne	r6, #4
 800823c:	1f37      	subs	r7, r6, #4
 800823e:	4690      	mov	r8, r2
 8008240:	46b9      	mov	r9, r7
 8008242:	463c      	mov	r4, r7
 8008244:	46ab      	mov	fp, r5
 8008246:	b087      	sub	sp, #28
 8008248:	6801      	ldr	r1, [r0, #0]
 800824a:	9301      	str	r3, [sp, #4]
 800824c:	f846 5c04 	str.w	r5, [r6, #-4]
 8008250:	9502      	str	r5, [sp, #8]
 8008252:	784a      	ldrb	r2, [r1, #1]
 8008254:	1c4b      	adds	r3, r1, #1
 8008256:	9303      	str	r3, [sp, #12]
 8008258:	b342      	cbz	r2, 80082ac <__hexnan+0x88>
 800825a:	4610      	mov	r0, r2
 800825c:	9105      	str	r1, [sp, #20]
 800825e:	9204      	str	r2, [sp, #16]
 8008260:	f7ff fd69 	bl	8007d36 <__hexdig_fun>
 8008264:	2800      	cmp	r0, #0
 8008266:	d14f      	bne.n	8008308 <__hexnan+0xe4>
 8008268:	9a04      	ldr	r2, [sp, #16]
 800826a:	9905      	ldr	r1, [sp, #20]
 800826c:	2a20      	cmp	r2, #32
 800826e:	d818      	bhi.n	80082a2 <__hexnan+0x7e>
 8008270:	9b02      	ldr	r3, [sp, #8]
 8008272:	459b      	cmp	fp, r3
 8008274:	dd13      	ble.n	800829e <__hexnan+0x7a>
 8008276:	454c      	cmp	r4, r9
 8008278:	d206      	bcs.n	8008288 <__hexnan+0x64>
 800827a:	2d07      	cmp	r5, #7
 800827c:	dc04      	bgt.n	8008288 <__hexnan+0x64>
 800827e:	462a      	mov	r2, r5
 8008280:	4649      	mov	r1, r9
 8008282:	4620      	mov	r0, r4
 8008284:	f7ff ffa8 	bl	80081d8 <L_shift>
 8008288:	4544      	cmp	r4, r8
 800828a:	d950      	bls.n	800832e <__hexnan+0x10a>
 800828c:	2300      	movs	r3, #0
 800828e:	f1a4 0904 	sub.w	r9, r4, #4
 8008292:	f844 3c04 	str.w	r3, [r4, #-4]
 8008296:	461d      	mov	r5, r3
 8008298:	464c      	mov	r4, r9
 800829a:	f8cd b008 	str.w	fp, [sp, #8]
 800829e:	9903      	ldr	r1, [sp, #12]
 80082a0:	e7d7      	b.n	8008252 <__hexnan+0x2e>
 80082a2:	2a29      	cmp	r2, #41	; 0x29
 80082a4:	d156      	bne.n	8008354 <__hexnan+0x130>
 80082a6:	3102      	adds	r1, #2
 80082a8:	f8ca 1000 	str.w	r1, [sl]
 80082ac:	f1bb 0f00 	cmp.w	fp, #0
 80082b0:	d050      	beq.n	8008354 <__hexnan+0x130>
 80082b2:	454c      	cmp	r4, r9
 80082b4:	d206      	bcs.n	80082c4 <__hexnan+0xa0>
 80082b6:	2d07      	cmp	r5, #7
 80082b8:	dc04      	bgt.n	80082c4 <__hexnan+0xa0>
 80082ba:	462a      	mov	r2, r5
 80082bc:	4649      	mov	r1, r9
 80082be:	4620      	mov	r0, r4
 80082c0:	f7ff ff8a 	bl	80081d8 <L_shift>
 80082c4:	4544      	cmp	r4, r8
 80082c6:	d934      	bls.n	8008332 <__hexnan+0x10e>
 80082c8:	4623      	mov	r3, r4
 80082ca:	f1a8 0204 	sub.w	r2, r8, #4
 80082ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80082d2:	429f      	cmp	r7, r3
 80082d4:	f842 1f04 	str.w	r1, [r2, #4]!
 80082d8:	d2f9      	bcs.n	80082ce <__hexnan+0xaa>
 80082da:	1b3b      	subs	r3, r7, r4
 80082dc:	f023 0303 	bic.w	r3, r3, #3
 80082e0:	3304      	adds	r3, #4
 80082e2:	3401      	adds	r4, #1
 80082e4:	3e03      	subs	r6, #3
 80082e6:	42b4      	cmp	r4, r6
 80082e8:	bf88      	it	hi
 80082ea:	2304      	movhi	r3, #4
 80082ec:	2200      	movs	r2, #0
 80082ee:	4443      	add	r3, r8
 80082f0:	f843 2b04 	str.w	r2, [r3], #4
 80082f4:	429f      	cmp	r7, r3
 80082f6:	d2fb      	bcs.n	80082f0 <__hexnan+0xcc>
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	b91b      	cbnz	r3, 8008304 <__hexnan+0xe0>
 80082fc:	4547      	cmp	r7, r8
 80082fe:	d127      	bne.n	8008350 <__hexnan+0x12c>
 8008300:	2301      	movs	r3, #1
 8008302:	603b      	str	r3, [r7, #0]
 8008304:	2005      	movs	r0, #5
 8008306:	e026      	b.n	8008356 <__hexnan+0x132>
 8008308:	3501      	adds	r5, #1
 800830a:	2d08      	cmp	r5, #8
 800830c:	f10b 0b01 	add.w	fp, fp, #1
 8008310:	dd06      	ble.n	8008320 <__hexnan+0xfc>
 8008312:	4544      	cmp	r4, r8
 8008314:	d9c3      	bls.n	800829e <__hexnan+0x7a>
 8008316:	2300      	movs	r3, #0
 8008318:	2501      	movs	r5, #1
 800831a:	f844 3c04 	str.w	r3, [r4, #-4]
 800831e:	3c04      	subs	r4, #4
 8008320:	6822      	ldr	r2, [r4, #0]
 8008322:	f000 000f 	and.w	r0, r0, #15
 8008326:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800832a:	6022      	str	r2, [r4, #0]
 800832c:	e7b7      	b.n	800829e <__hexnan+0x7a>
 800832e:	2508      	movs	r5, #8
 8008330:	e7b5      	b.n	800829e <__hexnan+0x7a>
 8008332:	9b01      	ldr	r3, [sp, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d0df      	beq.n	80082f8 <__hexnan+0xd4>
 8008338:	f04f 32ff 	mov.w	r2, #4294967295
 800833c:	f1c3 0320 	rsb	r3, r3, #32
 8008340:	fa22 f303 	lsr.w	r3, r2, r3
 8008344:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008348:	401a      	ands	r2, r3
 800834a:	f846 2c04 	str.w	r2, [r6, #-4]
 800834e:	e7d3      	b.n	80082f8 <__hexnan+0xd4>
 8008350:	3f04      	subs	r7, #4
 8008352:	e7d1      	b.n	80082f8 <__hexnan+0xd4>
 8008354:	2004      	movs	r0, #4
 8008356:	b007      	add	sp, #28
 8008358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800835c <__ascii_mbtowc>:
 800835c:	b082      	sub	sp, #8
 800835e:	b901      	cbnz	r1, 8008362 <__ascii_mbtowc+0x6>
 8008360:	a901      	add	r1, sp, #4
 8008362:	b142      	cbz	r2, 8008376 <__ascii_mbtowc+0x1a>
 8008364:	b14b      	cbz	r3, 800837a <__ascii_mbtowc+0x1e>
 8008366:	7813      	ldrb	r3, [r2, #0]
 8008368:	600b      	str	r3, [r1, #0]
 800836a:	7812      	ldrb	r2, [r2, #0]
 800836c:	1e10      	subs	r0, r2, #0
 800836e:	bf18      	it	ne
 8008370:	2001      	movne	r0, #1
 8008372:	b002      	add	sp, #8
 8008374:	4770      	bx	lr
 8008376:	4610      	mov	r0, r2
 8008378:	e7fb      	b.n	8008372 <__ascii_mbtowc+0x16>
 800837a:	f06f 0001 	mvn.w	r0, #1
 800837e:	e7f8      	b.n	8008372 <__ascii_mbtowc+0x16>

08008380 <_Balloc>:
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008384:	4604      	mov	r4, r0
 8008386:	460d      	mov	r5, r1
 8008388:	b976      	cbnz	r6, 80083a8 <_Balloc+0x28>
 800838a:	2010      	movs	r0, #16
 800838c:	f001 f870 	bl	8009470 <malloc>
 8008390:	4602      	mov	r2, r0
 8008392:	6260      	str	r0, [r4, #36]	; 0x24
 8008394:	b920      	cbnz	r0, 80083a0 <_Balloc+0x20>
 8008396:	2166      	movs	r1, #102	; 0x66
 8008398:	4b17      	ldr	r3, [pc, #92]	; (80083f8 <_Balloc+0x78>)
 800839a:	4818      	ldr	r0, [pc, #96]	; (80083fc <_Balloc+0x7c>)
 800839c:	f001 f838 	bl	8009410 <__assert_func>
 80083a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083a4:	6006      	str	r6, [r0, #0]
 80083a6:	60c6      	str	r6, [r0, #12]
 80083a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80083aa:	68f3      	ldr	r3, [r6, #12]
 80083ac:	b183      	cbz	r3, 80083d0 <_Balloc+0x50>
 80083ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083b6:	b9b8      	cbnz	r0, 80083e8 <_Balloc+0x68>
 80083b8:	2101      	movs	r1, #1
 80083ba:	fa01 f605 	lsl.w	r6, r1, r5
 80083be:	1d72      	adds	r2, r6, #5
 80083c0:	4620      	mov	r0, r4
 80083c2:	0092      	lsls	r2, r2, #2
 80083c4:	f000 fc94 	bl	8008cf0 <_calloc_r>
 80083c8:	b160      	cbz	r0, 80083e4 <_Balloc+0x64>
 80083ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083ce:	e00e      	b.n	80083ee <_Balloc+0x6e>
 80083d0:	2221      	movs	r2, #33	; 0x21
 80083d2:	2104      	movs	r1, #4
 80083d4:	4620      	mov	r0, r4
 80083d6:	f000 fc8b 	bl	8008cf0 <_calloc_r>
 80083da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083dc:	60f0      	str	r0, [r6, #12]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1e4      	bne.n	80083ae <_Balloc+0x2e>
 80083e4:	2000      	movs	r0, #0
 80083e6:	bd70      	pop	{r4, r5, r6, pc}
 80083e8:	6802      	ldr	r2, [r0, #0]
 80083ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083ee:	2300      	movs	r3, #0
 80083f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083f4:	e7f7      	b.n	80083e6 <_Balloc+0x66>
 80083f6:	bf00      	nop
 80083f8:	0800c538 	.word	0x0800c538
 80083fc:	0800c54f 	.word	0x0800c54f

08008400 <_Bfree>:
 8008400:	b570      	push	{r4, r5, r6, lr}
 8008402:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008404:	4605      	mov	r5, r0
 8008406:	460c      	mov	r4, r1
 8008408:	b976      	cbnz	r6, 8008428 <_Bfree+0x28>
 800840a:	2010      	movs	r0, #16
 800840c:	f001 f830 	bl	8009470 <malloc>
 8008410:	4602      	mov	r2, r0
 8008412:	6268      	str	r0, [r5, #36]	; 0x24
 8008414:	b920      	cbnz	r0, 8008420 <_Bfree+0x20>
 8008416:	218a      	movs	r1, #138	; 0x8a
 8008418:	4b08      	ldr	r3, [pc, #32]	; (800843c <_Bfree+0x3c>)
 800841a:	4809      	ldr	r0, [pc, #36]	; (8008440 <_Bfree+0x40>)
 800841c:	f000 fff8 	bl	8009410 <__assert_func>
 8008420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008424:	6006      	str	r6, [r0, #0]
 8008426:	60c6      	str	r6, [r0, #12]
 8008428:	b13c      	cbz	r4, 800843a <_Bfree+0x3a>
 800842a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800842c:	6862      	ldr	r2, [r4, #4]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008434:	6021      	str	r1, [r4, #0]
 8008436:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800843a:	bd70      	pop	{r4, r5, r6, pc}
 800843c:	0800c538 	.word	0x0800c538
 8008440:	0800c54f 	.word	0x0800c54f

08008444 <__multadd>:
 8008444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008448:	4698      	mov	r8, r3
 800844a:	460c      	mov	r4, r1
 800844c:	2300      	movs	r3, #0
 800844e:	690e      	ldr	r6, [r1, #16]
 8008450:	4607      	mov	r7, r0
 8008452:	f101 0014 	add.w	r0, r1, #20
 8008456:	6805      	ldr	r5, [r0, #0]
 8008458:	3301      	adds	r3, #1
 800845a:	b2a9      	uxth	r1, r5
 800845c:	fb02 8101 	mla	r1, r2, r1, r8
 8008460:	0c2d      	lsrs	r5, r5, #16
 8008462:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008466:	fb02 c505 	mla	r5, r2, r5, ip
 800846a:	b289      	uxth	r1, r1
 800846c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008470:	429e      	cmp	r6, r3
 8008472:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008476:	f840 1b04 	str.w	r1, [r0], #4
 800847a:	dcec      	bgt.n	8008456 <__multadd+0x12>
 800847c:	f1b8 0f00 	cmp.w	r8, #0
 8008480:	d022      	beq.n	80084c8 <__multadd+0x84>
 8008482:	68a3      	ldr	r3, [r4, #8]
 8008484:	42b3      	cmp	r3, r6
 8008486:	dc19      	bgt.n	80084bc <__multadd+0x78>
 8008488:	6861      	ldr	r1, [r4, #4]
 800848a:	4638      	mov	r0, r7
 800848c:	3101      	adds	r1, #1
 800848e:	f7ff ff77 	bl	8008380 <_Balloc>
 8008492:	4605      	mov	r5, r0
 8008494:	b928      	cbnz	r0, 80084a2 <__multadd+0x5e>
 8008496:	4602      	mov	r2, r0
 8008498:	21b5      	movs	r1, #181	; 0xb5
 800849a:	4b0d      	ldr	r3, [pc, #52]	; (80084d0 <__multadd+0x8c>)
 800849c:	480d      	ldr	r0, [pc, #52]	; (80084d4 <__multadd+0x90>)
 800849e:	f000 ffb7 	bl	8009410 <__assert_func>
 80084a2:	6922      	ldr	r2, [r4, #16]
 80084a4:	f104 010c 	add.w	r1, r4, #12
 80084a8:	3202      	adds	r2, #2
 80084aa:	0092      	lsls	r2, r2, #2
 80084ac:	300c      	adds	r0, #12
 80084ae:	f7fe fad3 	bl	8006a58 <memcpy>
 80084b2:	4621      	mov	r1, r4
 80084b4:	4638      	mov	r0, r7
 80084b6:	f7ff ffa3 	bl	8008400 <_Bfree>
 80084ba:	462c      	mov	r4, r5
 80084bc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80084c0:	3601      	adds	r6, #1
 80084c2:	f8c3 8014 	str.w	r8, [r3, #20]
 80084c6:	6126      	str	r6, [r4, #16]
 80084c8:	4620      	mov	r0, r4
 80084ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084ce:	bf00      	nop
 80084d0:	0800c4a9 	.word	0x0800c4a9
 80084d4:	0800c54f 	.word	0x0800c54f

080084d8 <__s2b>:
 80084d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084dc:	4615      	mov	r5, r2
 80084de:	2209      	movs	r2, #9
 80084e0:	461f      	mov	r7, r3
 80084e2:	3308      	adds	r3, #8
 80084e4:	460c      	mov	r4, r1
 80084e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80084ea:	4606      	mov	r6, r0
 80084ec:	2201      	movs	r2, #1
 80084ee:	2100      	movs	r1, #0
 80084f0:	429a      	cmp	r2, r3
 80084f2:	db09      	blt.n	8008508 <__s2b+0x30>
 80084f4:	4630      	mov	r0, r6
 80084f6:	f7ff ff43 	bl	8008380 <_Balloc>
 80084fa:	b940      	cbnz	r0, 800850e <__s2b+0x36>
 80084fc:	4602      	mov	r2, r0
 80084fe:	21ce      	movs	r1, #206	; 0xce
 8008500:	4b18      	ldr	r3, [pc, #96]	; (8008564 <__s2b+0x8c>)
 8008502:	4819      	ldr	r0, [pc, #100]	; (8008568 <__s2b+0x90>)
 8008504:	f000 ff84 	bl	8009410 <__assert_func>
 8008508:	0052      	lsls	r2, r2, #1
 800850a:	3101      	adds	r1, #1
 800850c:	e7f0      	b.n	80084f0 <__s2b+0x18>
 800850e:	9b08      	ldr	r3, [sp, #32]
 8008510:	2d09      	cmp	r5, #9
 8008512:	6143      	str	r3, [r0, #20]
 8008514:	f04f 0301 	mov.w	r3, #1
 8008518:	6103      	str	r3, [r0, #16]
 800851a:	dd16      	ble.n	800854a <__s2b+0x72>
 800851c:	f104 0909 	add.w	r9, r4, #9
 8008520:	46c8      	mov	r8, r9
 8008522:	442c      	add	r4, r5
 8008524:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008528:	4601      	mov	r1, r0
 800852a:	220a      	movs	r2, #10
 800852c:	4630      	mov	r0, r6
 800852e:	3b30      	subs	r3, #48	; 0x30
 8008530:	f7ff ff88 	bl	8008444 <__multadd>
 8008534:	45a0      	cmp	r8, r4
 8008536:	d1f5      	bne.n	8008524 <__s2b+0x4c>
 8008538:	f1a5 0408 	sub.w	r4, r5, #8
 800853c:	444c      	add	r4, r9
 800853e:	1b2d      	subs	r5, r5, r4
 8008540:	1963      	adds	r3, r4, r5
 8008542:	42bb      	cmp	r3, r7
 8008544:	db04      	blt.n	8008550 <__s2b+0x78>
 8008546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800854a:	2509      	movs	r5, #9
 800854c:	340a      	adds	r4, #10
 800854e:	e7f6      	b.n	800853e <__s2b+0x66>
 8008550:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008554:	4601      	mov	r1, r0
 8008556:	220a      	movs	r2, #10
 8008558:	4630      	mov	r0, r6
 800855a:	3b30      	subs	r3, #48	; 0x30
 800855c:	f7ff ff72 	bl	8008444 <__multadd>
 8008560:	e7ee      	b.n	8008540 <__s2b+0x68>
 8008562:	bf00      	nop
 8008564:	0800c4a9 	.word	0x0800c4a9
 8008568:	0800c54f 	.word	0x0800c54f

0800856c <__hi0bits>:
 800856c:	0c02      	lsrs	r2, r0, #16
 800856e:	0412      	lsls	r2, r2, #16
 8008570:	4603      	mov	r3, r0
 8008572:	b9ca      	cbnz	r2, 80085a8 <__hi0bits+0x3c>
 8008574:	0403      	lsls	r3, r0, #16
 8008576:	2010      	movs	r0, #16
 8008578:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800857c:	bf04      	itt	eq
 800857e:	021b      	lsleq	r3, r3, #8
 8008580:	3008      	addeq	r0, #8
 8008582:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008586:	bf04      	itt	eq
 8008588:	011b      	lsleq	r3, r3, #4
 800858a:	3004      	addeq	r0, #4
 800858c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008590:	bf04      	itt	eq
 8008592:	009b      	lsleq	r3, r3, #2
 8008594:	3002      	addeq	r0, #2
 8008596:	2b00      	cmp	r3, #0
 8008598:	db05      	blt.n	80085a6 <__hi0bits+0x3a>
 800859a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800859e:	f100 0001 	add.w	r0, r0, #1
 80085a2:	bf08      	it	eq
 80085a4:	2020      	moveq	r0, #32
 80085a6:	4770      	bx	lr
 80085a8:	2000      	movs	r0, #0
 80085aa:	e7e5      	b.n	8008578 <__hi0bits+0xc>

080085ac <__lo0bits>:
 80085ac:	6803      	ldr	r3, [r0, #0]
 80085ae:	4602      	mov	r2, r0
 80085b0:	f013 0007 	ands.w	r0, r3, #7
 80085b4:	d00b      	beq.n	80085ce <__lo0bits+0x22>
 80085b6:	07d9      	lsls	r1, r3, #31
 80085b8:	d422      	bmi.n	8008600 <__lo0bits+0x54>
 80085ba:	0798      	lsls	r0, r3, #30
 80085bc:	bf49      	itett	mi
 80085be:	085b      	lsrmi	r3, r3, #1
 80085c0:	089b      	lsrpl	r3, r3, #2
 80085c2:	2001      	movmi	r0, #1
 80085c4:	6013      	strmi	r3, [r2, #0]
 80085c6:	bf5c      	itt	pl
 80085c8:	2002      	movpl	r0, #2
 80085ca:	6013      	strpl	r3, [r2, #0]
 80085cc:	4770      	bx	lr
 80085ce:	b299      	uxth	r1, r3
 80085d0:	b909      	cbnz	r1, 80085d6 <__lo0bits+0x2a>
 80085d2:	2010      	movs	r0, #16
 80085d4:	0c1b      	lsrs	r3, r3, #16
 80085d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80085da:	bf04      	itt	eq
 80085dc:	0a1b      	lsreq	r3, r3, #8
 80085de:	3008      	addeq	r0, #8
 80085e0:	0719      	lsls	r1, r3, #28
 80085e2:	bf04      	itt	eq
 80085e4:	091b      	lsreq	r3, r3, #4
 80085e6:	3004      	addeq	r0, #4
 80085e8:	0799      	lsls	r1, r3, #30
 80085ea:	bf04      	itt	eq
 80085ec:	089b      	lsreq	r3, r3, #2
 80085ee:	3002      	addeq	r0, #2
 80085f0:	07d9      	lsls	r1, r3, #31
 80085f2:	d403      	bmi.n	80085fc <__lo0bits+0x50>
 80085f4:	085b      	lsrs	r3, r3, #1
 80085f6:	f100 0001 	add.w	r0, r0, #1
 80085fa:	d003      	beq.n	8008604 <__lo0bits+0x58>
 80085fc:	6013      	str	r3, [r2, #0]
 80085fe:	4770      	bx	lr
 8008600:	2000      	movs	r0, #0
 8008602:	4770      	bx	lr
 8008604:	2020      	movs	r0, #32
 8008606:	4770      	bx	lr

08008608 <__i2b>:
 8008608:	b510      	push	{r4, lr}
 800860a:	460c      	mov	r4, r1
 800860c:	2101      	movs	r1, #1
 800860e:	f7ff feb7 	bl	8008380 <_Balloc>
 8008612:	4602      	mov	r2, r0
 8008614:	b928      	cbnz	r0, 8008622 <__i2b+0x1a>
 8008616:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800861a:	4b04      	ldr	r3, [pc, #16]	; (800862c <__i2b+0x24>)
 800861c:	4804      	ldr	r0, [pc, #16]	; (8008630 <__i2b+0x28>)
 800861e:	f000 fef7 	bl	8009410 <__assert_func>
 8008622:	2301      	movs	r3, #1
 8008624:	6144      	str	r4, [r0, #20]
 8008626:	6103      	str	r3, [r0, #16]
 8008628:	bd10      	pop	{r4, pc}
 800862a:	bf00      	nop
 800862c:	0800c4a9 	.word	0x0800c4a9
 8008630:	0800c54f 	.word	0x0800c54f

08008634 <__multiply>:
 8008634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008638:	4614      	mov	r4, r2
 800863a:	690a      	ldr	r2, [r1, #16]
 800863c:	6923      	ldr	r3, [r4, #16]
 800863e:	460d      	mov	r5, r1
 8008640:	429a      	cmp	r2, r3
 8008642:	bfbe      	ittt	lt
 8008644:	460b      	movlt	r3, r1
 8008646:	4625      	movlt	r5, r4
 8008648:	461c      	movlt	r4, r3
 800864a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800864e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008652:	68ab      	ldr	r3, [r5, #8]
 8008654:	6869      	ldr	r1, [r5, #4]
 8008656:	eb0a 0709 	add.w	r7, sl, r9
 800865a:	42bb      	cmp	r3, r7
 800865c:	b085      	sub	sp, #20
 800865e:	bfb8      	it	lt
 8008660:	3101      	addlt	r1, #1
 8008662:	f7ff fe8d 	bl	8008380 <_Balloc>
 8008666:	b930      	cbnz	r0, 8008676 <__multiply+0x42>
 8008668:	4602      	mov	r2, r0
 800866a:	f240 115d 	movw	r1, #349	; 0x15d
 800866e:	4b41      	ldr	r3, [pc, #260]	; (8008774 <__multiply+0x140>)
 8008670:	4841      	ldr	r0, [pc, #260]	; (8008778 <__multiply+0x144>)
 8008672:	f000 fecd 	bl	8009410 <__assert_func>
 8008676:	f100 0614 	add.w	r6, r0, #20
 800867a:	4633      	mov	r3, r6
 800867c:	2200      	movs	r2, #0
 800867e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008682:	4543      	cmp	r3, r8
 8008684:	d31e      	bcc.n	80086c4 <__multiply+0x90>
 8008686:	f105 0c14 	add.w	ip, r5, #20
 800868a:	f104 0314 	add.w	r3, r4, #20
 800868e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008692:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008696:	9202      	str	r2, [sp, #8]
 8008698:	ebac 0205 	sub.w	r2, ip, r5
 800869c:	3a15      	subs	r2, #21
 800869e:	f022 0203 	bic.w	r2, r2, #3
 80086a2:	3204      	adds	r2, #4
 80086a4:	f105 0115 	add.w	r1, r5, #21
 80086a8:	458c      	cmp	ip, r1
 80086aa:	bf38      	it	cc
 80086ac:	2204      	movcc	r2, #4
 80086ae:	9201      	str	r2, [sp, #4]
 80086b0:	9a02      	ldr	r2, [sp, #8]
 80086b2:	9303      	str	r3, [sp, #12]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d808      	bhi.n	80086ca <__multiply+0x96>
 80086b8:	2f00      	cmp	r7, #0
 80086ba:	dc55      	bgt.n	8008768 <__multiply+0x134>
 80086bc:	6107      	str	r7, [r0, #16]
 80086be:	b005      	add	sp, #20
 80086c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c4:	f843 2b04 	str.w	r2, [r3], #4
 80086c8:	e7db      	b.n	8008682 <__multiply+0x4e>
 80086ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80086ce:	f1ba 0f00 	cmp.w	sl, #0
 80086d2:	d020      	beq.n	8008716 <__multiply+0xe2>
 80086d4:	46b1      	mov	r9, r6
 80086d6:	2200      	movs	r2, #0
 80086d8:	f105 0e14 	add.w	lr, r5, #20
 80086dc:	f85e 4b04 	ldr.w	r4, [lr], #4
 80086e0:	f8d9 b000 	ldr.w	fp, [r9]
 80086e4:	b2a1      	uxth	r1, r4
 80086e6:	fa1f fb8b 	uxth.w	fp, fp
 80086ea:	fb0a b101 	mla	r1, sl, r1, fp
 80086ee:	4411      	add	r1, r2
 80086f0:	f8d9 2000 	ldr.w	r2, [r9]
 80086f4:	0c24      	lsrs	r4, r4, #16
 80086f6:	0c12      	lsrs	r2, r2, #16
 80086f8:	fb0a 2404 	mla	r4, sl, r4, r2
 80086fc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008700:	b289      	uxth	r1, r1
 8008702:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008706:	45f4      	cmp	ip, lr
 8008708:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800870c:	f849 1b04 	str.w	r1, [r9], #4
 8008710:	d8e4      	bhi.n	80086dc <__multiply+0xa8>
 8008712:	9901      	ldr	r1, [sp, #4]
 8008714:	5072      	str	r2, [r6, r1]
 8008716:	9a03      	ldr	r2, [sp, #12]
 8008718:	3304      	adds	r3, #4
 800871a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800871e:	f1b9 0f00 	cmp.w	r9, #0
 8008722:	d01f      	beq.n	8008764 <__multiply+0x130>
 8008724:	46b6      	mov	lr, r6
 8008726:	f04f 0a00 	mov.w	sl, #0
 800872a:	6834      	ldr	r4, [r6, #0]
 800872c:	f105 0114 	add.w	r1, r5, #20
 8008730:	880a      	ldrh	r2, [r1, #0]
 8008732:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008736:	b2a4      	uxth	r4, r4
 8008738:	fb09 b202 	mla	r2, r9, r2, fp
 800873c:	4492      	add	sl, r2
 800873e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008742:	f84e 4b04 	str.w	r4, [lr], #4
 8008746:	f851 4b04 	ldr.w	r4, [r1], #4
 800874a:	f8be 2000 	ldrh.w	r2, [lr]
 800874e:	0c24      	lsrs	r4, r4, #16
 8008750:	fb09 2404 	mla	r4, r9, r4, r2
 8008754:	458c      	cmp	ip, r1
 8008756:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800875a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800875e:	d8e7      	bhi.n	8008730 <__multiply+0xfc>
 8008760:	9a01      	ldr	r2, [sp, #4]
 8008762:	50b4      	str	r4, [r6, r2]
 8008764:	3604      	adds	r6, #4
 8008766:	e7a3      	b.n	80086b0 <__multiply+0x7c>
 8008768:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1a5      	bne.n	80086bc <__multiply+0x88>
 8008770:	3f01      	subs	r7, #1
 8008772:	e7a1      	b.n	80086b8 <__multiply+0x84>
 8008774:	0800c4a9 	.word	0x0800c4a9
 8008778:	0800c54f 	.word	0x0800c54f

0800877c <__pow5mult>:
 800877c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008780:	4615      	mov	r5, r2
 8008782:	f012 0203 	ands.w	r2, r2, #3
 8008786:	4606      	mov	r6, r0
 8008788:	460f      	mov	r7, r1
 800878a:	d007      	beq.n	800879c <__pow5mult+0x20>
 800878c:	4c25      	ldr	r4, [pc, #148]	; (8008824 <__pow5mult+0xa8>)
 800878e:	3a01      	subs	r2, #1
 8008790:	2300      	movs	r3, #0
 8008792:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008796:	f7ff fe55 	bl	8008444 <__multadd>
 800879a:	4607      	mov	r7, r0
 800879c:	10ad      	asrs	r5, r5, #2
 800879e:	d03d      	beq.n	800881c <__pow5mult+0xa0>
 80087a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80087a2:	b97c      	cbnz	r4, 80087c4 <__pow5mult+0x48>
 80087a4:	2010      	movs	r0, #16
 80087a6:	f000 fe63 	bl	8009470 <malloc>
 80087aa:	4602      	mov	r2, r0
 80087ac:	6270      	str	r0, [r6, #36]	; 0x24
 80087ae:	b928      	cbnz	r0, 80087bc <__pow5mult+0x40>
 80087b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80087b4:	4b1c      	ldr	r3, [pc, #112]	; (8008828 <__pow5mult+0xac>)
 80087b6:	481d      	ldr	r0, [pc, #116]	; (800882c <__pow5mult+0xb0>)
 80087b8:	f000 fe2a 	bl	8009410 <__assert_func>
 80087bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087c0:	6004      	str	r4, [r0, #0]
 80087c2:	60c4      	str	r4, [r0, #12]
 80087c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80087c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087cc:	b94c      	cbnz	r4, 80087e2 <__pow5mult+0x66>
 80087ce:	f240 2171 	movw	r1, #625	; 0x271
 80087d2:	4630      	mov	r0, r6
 80087d4:	f7ff ff18 	bl	8008608 <__i2b>
 80087d8:	2300      	movs	r3, #0
 80087da:	4604      	mov	r4, r0
 80087dc:	f8c8 0008 	str.w	r0, [r8, #8]
 80087e0:	6003      	str	r3, [r0, #0]
 80087e2:	f04f 0900 	mov.w	r9, #0
 80087e6:	07eb      	lsls	r3, r5, #31
 80087e8:	d50a      	bpl.n	8008800 <__pow5mult+0x84>
 80087ea:	4639      	mov	r1, r7
 80087ec:	4622      	mov	r2, r4
 80087ee:	4630      	mov	r0, r6
 80087f0:	f7ff ff20 	bl	8008634 <__multiply>
 80087f4:	4680      	mov	r8, r0
 80087f6:	4639      	mov	r1, r7
 80087f8:	4630      	mov	r0, r6
 80087fa:	f7ff fe01 	bl	8008400 <_Bfree>
 80087fe:	4647      	mov	r7, r8
 8008800:	106d      	asrs	r5, r5, #1
 8008802:	d00b      	beq.n	800881c <__pow5mult+0xa0>
 8008804:	6820      	ldr	r0, [r4, #0]
 8008806:	b938      	cbnz	r0, 8008818 <__pow5mult+0x9c>
 8008808:	4622      	mov	r2, r4
 800880a:	4621      	mov	r1, r4
 800880c:	4630      	mov	r0, r6
 800880e:	f7ff ff11 	bl	8008634 <__multiply>
 8008812:	6020      	str	r0, [r4, #0]
 8008814:	f8c0 9000 	str.w	r9, [r0]
 8008818:	4604      	mov	r4, r0
 800881a:	e7e4      	b.n	80087e6 <__pow5mult+0x6a>
 800881c:	4638      	mov	r0, r7
 800881e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008822:	bf00      	nop
 8008824:	0800c6a0 	.word	0x0800c6a0
 8008828:	0800c538 	.word	0x0800c538
 800882c:	0800c54f 	.word	0x0800c54f

08008830 <__lshift>:
 8008830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008834:	460c      	mov	r4, r1
 8008836:	4607      	mov	r7, r0
 8008838:	4691      	mov	r9, r2
 800883a:	6923      	ldr	r3, [r4, #16]
 800883c:	6849      	ldr	r1, [r1, #4]
 800883e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008842:	68a3      	ldr	r3, [r4, #8]
 8008844:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008848:	f108 0601 	add.w	r6, r8, #1
 800884c:	42b3      	cmp	r3, r6
 800884e:	db0b      	blt.n	8008868 <__lshift+0x38>
 8008850:	4638      	mov	r0, r7
 8008852:	f7ff fd95 	bl	8008380 <_Balloc>
 8008856:	4605      	mov	r5, r0
 8008858:	b948      	cbnz	r0, 800886e <__lshift+0x3e>
 800885a:	4602      	mov	r2, r0
 800885c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008860:	4b27      	ldr	r3, [pc, #156]	; (8008900 <__lshift+0xd0>)
 8008862:	4828      	ldr	r0, [pc, #160]	; (8008904 <__lshift+0xd4>)
 8008864:	f000 fdd4 	bl	8009410 <__assert_func>
 8008868:	3101      	adds	r1, #1
 800886a:	005b      	lsls	r3, r3, #1
 800886c:	e7ee      	b.n	800884c <__lshift+0x1c>
 800886e:	2300      	movs	r3, #0
 8008870:	f100 0114 	add.w	r1, r0, #20
 8008874:	f100 0210 	add.w	r2, r0, #16
 8008878:	4618      	mov	r0, r3
 800887a:	4553      	cmp	r3, sl
 800887c:	db33      	blt.n	80088e6 <__lshift+0xb6>
 800887e:	6920      	ldr	r0, [r4, #16]
 8008880:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008884:	f104 0314 	add.w	r3, r4, #20
 8008888:	f019 091f 	ands.w	r9, r9, #31
 800888c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008890:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008894:	d02b      	beq.n	80088ee <__lshift+0xbe>
 8008896:	468a      	mov	sl, r1
 8008898:	2200      	movs	r2, #0
 800889a:	f1c9 0e20 	rsb	lr, r9, #32
 800889e:	6818      	ldr	r0, [r3, #0]
 80088a0:	fa00 f009 	lsl.w	r0, r0, r9
 80088a4:	4302      	orrs	r2, r0
 80088a6:	f84a 2b04 	str.w	r2, [sl], #4
 80088aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ae:	459c      	cmp	ip, r3
 80088b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80088b4:	d8f3      	bhi.n	800889e <__lshift+0x6e>
 80088b6:	ebac 0304 	sub.w	r3, ip, r4
 80088ba:	3b15      	subs	r3, #21
 80088bc:	f023 0303 	bic.w	r3, r3, #3
 80088c0:	3304      	adds	r3, #4
 80088c2:	f104 0015 	add.w	r0, r4, #21
 80088c6:	4584      	cmp	ip, r0
 80088c8:	bf38      	it	cc
 80088ca:	2304      	movcc	r3, #4
 80088cc:	50ca      	str	r2, [r1, r3]
 80088ce:	b10a      	cbz	r2, 80088d4 <__lshift+0xa4>
 80088d0:	f108 0602 	add.w	r6, r8, #2
 80088d4:	3e01      	subs	r6, #1
 80088d6:	4638      	mov	r0, r7
 80088d8:	4621      	mov	r1, r4
 80088da:	612e      	str	r6, [r5, #16]
 80088dc:	f7ff fd90 	bl	8008400 <_Bfree>
 80088e0:	4628      	mov	r0, r5
 80088e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80088ea:	3301      	adds	r3, #1
 80088ec:	e7c5      	b.n	800887a <__lshift+0x4a>
 80088ee:	3904      	subs	r1, #4
 80088f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80088f4:	459c      	cmp	ip, r3
 80088f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80088fa:	d8f9      	bhi.n	80088f0 <__lshift+0xc0>
 80088fc:	e7ea      	b.n	80088d4 <__lshift+0xa4>
 80088fe:	bf00      	nop
 8008900:	0800c4a9 	.word	0x0800c4a9
 8008904:	0800c54f 	.word	0x0800c54f

08008908 <__mcmp>:
 8008908:	4603      	mov	r3, r0
 800890a:	690a      	ldr	r2, [r1, #16]
 800890c:	6900      	ldr	r0, [r0, #16]
 800890e:	b530      	push	{r4, r5, lr}
 8008910:	1a80      	subs	r0, r0, r2
 8008912:	d10d      	bne.n	8008930 <__mcmp+0x28>
 8008914:	3314      	adds	r3, #20
 8008916:	3114      	adds	r1, #20
 8008918:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800891c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008920:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008924:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008928:	4295      	cmp	r5, r2
 800892a:	d002      	beq.n	8008932 <__mcmp+0x2a>
 800892c:	d304      	bcc.n	8008938 <__mcmp+0x30>
 800892e:	2001      	movs	r0, #1
 8008930:	bd30      	pop	{r4, r5, pc}
 8008932:	42a3      	cmp	r3, r4
 8008934:	d3f4      	bcc.n	8008920 <__mcmp+0x18>
 8008936:	e7fb      	b.n	8008930 <__mcmp+0x28>
 8008938:	f04f 30ff 	mov.w	r0, #4294967295
 800893c:	e7f8      	b.n	8008930 <__mcmp+0x28>
	...

08008940 <__mdiff>:
 8008940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008944:	460c      	mov	r4, r1
 8008946:	4606      	mov	r6, r0
 8008948:	4611      	mov	r1, r2
 800894a:	4620      	mov	r0, r4
 800894c:	4692      	mov	sl, r2
 800894e:	f7ff ffdb 	bl	8008908 <__mcmp>
 8008952:	1e05      	subs	r5, r0, #0
 8008954:	d111      	bne.n	800897a <__mdiff+0x3a>
 8008956:	4629      	mov	r1, r5
 8008958:	4630      	mov	r0, r6
 800895a:	f7ff fd11 	bl	8008380 <_Balloc>
 800895e:	4602      	mov	r2, r0
 8008960:	b928      	cbnz	r0, 800896e <__mdiff+0x2e>
 8008962:	f240 2132 	movw	r1, #562	; 0x232
 8008966:	4b3c      	ldr	r3, [pc, #240]	; (8008a58 <__mdiff+0x118>)
 8008968:	483c      	ldr	r0, [pc, #240]	; (8008a5c <__mdiff+0x11c>)
 800896a:	f000 fd51 	bl	8009410 <__assert_func>
 800896e:	2301      	movs	r3, #1
 8008970:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008974:	4610      	mov	r0, r2
 8008976:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897a:	bfa4      	itt	ge
 800897c:	4653      	movge	r3, sl
 800897e:	46a2      	movge	sl, r4
 8008980:	4630      	mov	r0, r6
 8008982:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008986:	bfa6      	itte	ge
 8008988:	461c      	movge	r4, r3
 800898a:	2500      	movge	r5, #0
 800898c:	2501      	movlt	r5, #1
 800898e:	f7ff fcf7 	bl	8008380 <_Balloc>
 8008992:	4602      	mov	r2, r0
 8008994:	b918      	cbnz	r0, 800899e <__mdiff+0x5e>
 8008996:	f44f 7110 	mov.w	r1, #576	; 0x240
 800899a:	4b2f      	ldr	r3, [pc, #188]	; (8008a58 <__mdiff+0x118>)
 800899c:	e7e4      	b.n	8008968 <__mdiff+0x28>
 800899e:	f100 0814 	add.w	r8, r0, #20
 80089a2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80089a6:	60c5      	str	r5, [r0, #12]
 80089a8:	f04f 0c00 	mov.w	ip, #0
 80089ac:	f10a 0514 	add.w	r5, sl, #20
 80089b0:	f10a 0010 	add.w	r0, sl, #16
 80089b4:	46c2      	mov	sl, r8
 80089b6:	6926      	ldr	r6, [r4, #16]
 80089b8:	f104 0914 	add.w	r9, r4, #20
 80089bc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80089c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80089c4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80089c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80089cc:	fa1f f18b 	uxth.w	r1, fp
 80089d0:	4461      	add	r1, ip
 80089d2:	fa1f fc83 	uxth.w	ip, r3
 80089d6:	0c1b      	lsrs	r3, r3, #16
 80089d8:	eba1 010c 	sub.w	r1, r1, ip
 80089dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80089e0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80089e4:	b289      	uxth	r1, r1
 80089e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80089ea:	454e      	cmp	r6, r9
 80089ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80089f0:	f84a 3b04 	str.w	r3, [sl], #4
 80089f4:	d8e6      	bhi.n	80089c4 <__mdiff+0x84>
 80089f6:	1b33      	subs	r3, r6, r4
 80089f8:	3b15      	subs	r3, #21
 80089fa:	f023 0303 	bic.w	r3, r3, #3
 80089fe:	3415      	adds	r4, #21
 8008a00:	3304      	adds	r3, #4
 8008a02:	42a6      	cmp	r6, r4
 8008a04:	bf38      	it	cc
 8008a06:	2304      	movcc	r3, #4
 8008a08:	441d      	add	r5, r3
 8008a0a:	4443      	add	r3, r8
 8008a0c:	461e      	mov	r6, r3
 8008a0e:	462c      	mov	r4, r5
 8008a10:	4574      	cmp	r4, lr
 8008a12:	d30e      	bcc.n	8008a32 <__mdiff+0xf2>
 8008a14:	f10e 0103 	add.w	r1, lr, #3
 8008a18:	1b49      	subs	r1, r1, r5
 8008a1a:	f021 0103 	bic.w	r1, r1, #3
 8008a1e:	3d03      	subs	r5, #3
 8008a20:	45ae      	cmp	lr, r5
 8008a22:	bf38      	it	cc
 8008a24:	2100      	movcc	r1, #0
 8008a26:	4419      	add	r1, r3
 8008a28:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008a2c:	b18b      	cbz	r3, 8008a52 <__mdiff+0x112>
 8008a2e:	6117      	str	r7, [r2, #16]
 8008a30:	e7a0      	b.n	8008974 <__mdiff+0x34>
 8008a32:	f854 8b04 	ldr.w	r8, [r4], #4
 8008a36:	fa1f f188 	uxth.w	r1, r8
 8008a3a:	4461      	add	r1, ip
 8008a3c:	1408      	asrs	r0, r1, #16
 8008a3e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008a42:	b289      	uxth	r1, r1
 8008a44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a4c:	f846 1b04 	str.w	r1, [r6], #4
 8008a50:	e7de      	b.n	8008a10 <__mdiff+0xd0>
 8008a52:	3f01      	subs	r7, #1
 8008a54:	e7e8      	b.n	8008a28 <__mdiff+0xe8>
 8008a56:	bf00      	nop
 8008a58:	0800c4a9 	.word	0x0800c4a9
 8008a5c:	0800c54f 	.word	0x0800c54f

08008a60 <__ulp>:
 8008a60:	4b11      	ldr	r3, [pc, #68]	; (8008aa8 <__ulp+0x48>)
 8008a62:	400b      	ands	r3, r1
 8008a64:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	dd02      	ble.n	8008a72 <__ulp+0x12>
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	4619      	mov	r1, r3
 8008a70:	4770      	bx	lr
 8008a72:	425b      	negs	r3, r3
 8008a74:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008a78:	f04f 0000 	mov.w	r0, #0
 8008a7c:	f04f 0100 	mov.w	r1, #0
 8008a80:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008a84:	da04      	bge.n	8008a90 <__ulp+0x30>
 8008a86:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a8a:	fa43 f102 	asr.w	r1, r3, r2
 8008a8e:	4770      	bx	lr
 8008a90:	f1a2 0314 	sub.w	r3, r2, #20
 8008a94:	2b1e      	cmp	r3, #30
 8008a96:	bfd6      	itet	le
 8008a98:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008a9c:	2301      	movgt	r3, #1
 8008a9e:	fa22 f303 	lsrle.w	r3, r2, r3
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	7ff00000 	.word	0x7ff00000

08008aac <__b2d>:
 8008aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ab0:	6907      	ldr	r7, [r0, #16]
 8008ab2:	f100 0914 	add.w	r9, r0, #20
 8008ab6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008aba:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008abe:	f1a7 0804 	sub.w	r8, r7, #4
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f7ff fd52 	bl	800856c <__hi0bits>
 8008ac8:	f1c0 0320 	rsb	r3, r0, #32
 8008acc:	280a      	cmp	r0, #10
 8008ace:	600b      	str	r3, [r1, #0]
 8008ad0:	491f      	ldr	r1, [pc, #124]	; (8008b50 <__b2d+0xa4>)
 8008ad2:	dc17      	bgt.n	8008b04 <__b2d+0x58>
 8008ad4:	45c1      	cmp	r9, r8
 8008ad6:	bf28      	it	cs
 8008ad8:	2200      	movcs	r2, #0
 8008ada:	f1c0 0c0b 	rsb	ip, r0, #11
 8008ade:	fa26 f30c 	lsr.w	r3, r6, ip
 8008ae2:	bf38      	it	cc
 8008ae4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008ae8:	ea43 0501 	orr.w	r5, r3, r1
 8008aec:	f100 0315 	add.w	r3, r0, #21
 8008af0:	fa06 f303 	lsl.w	r3, r6, r3
 8008af4:	fa22 f20c 	lsr.w	r2, r2, ip
 8008af8:	ea43 0402 	orr.w	r4, r3, r2
 8008afc:	4620      	mov	r0, r4
 8008afe:	4629      	mov	r1, r5
 8008b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b04:	45c1      	cmp	r9, r8
 8008b06:	bf2e      	itee	cs
 8008b08:	2200      	movcs	r2, #0
 8008b0a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008b0e:	f1a7 0808 	subcc.w	r8, r7, #8
 8008b12:	f1b0 030b 	subs.w	r3, r0, #11
 8008b16:	d016      	beq.n	8008b46 <__b2d+0x9a>
 8008b18:	f1c3 0720 	rsb	r7, r3, #32
 8008b1c:	fa22 f107 	lsr.w	r1, r2, r7
 8008b20:	45c8      	cmp	r8, r9
 8008b22:	fa06 f603 	lsl.w	r6, r6, r3
 8008b26:	ea46 0601 	orr.w	r6, r6, r1
 8008b2a:	bf94      	ite	ls
 8008b2c:	2100      	movls	r1, #0
 8008b2e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008b32:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008b36:	fa02 f003 	lsl.w	r0, r2, r3
 8008b3a:	40f9      	lsrs	r1, r7
 8008b3c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008b40:	ea40 0401 	orr.w	r4, r0, r1
 8008b44:	e7da      	b.n	8008afc <__b2d+0x50>
 8008b46:	4614      	mov	r4, r2
 8008b48:	ea46 0501 	orr.w	r5, r6, r1
 8008b4c:	e7d6      	b.n	8008afc <__b2d+0x50>
 8008b4e:	bf00      	nop
 8008b50:	3ff00000 	.word	0x3ff00000

08008b54 <__d2b>:
 8008b54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008b58:	2101      	movs	r1, #1
 8008b5a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008b5e:	4690      	mov	r8, r2
 8008b60:	461d      	mov	r5, r3
 8008b62:	f7ff fc0d 	bl	8008380 <_Balloc>
 8008b66:	4604      	mov	r4, r0
 8008b68:	b930      	cbnz	r0, 8008b78 <__d2b+0x24>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	f240 310a 	movw	r1, #778	; 0x30a
 8008b70:	4b24      	ldr	r3, [pc, #144]	; (8008c04 <__d2b+0xb0>)
 8008b72:	4825      	ldr	r0, [pc, #148]	; (8008c08 <__d2b+0xb4>)
 8008b74:	f000 fc4c 	bl	8009410 <__assert_func>
 8008b78:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008b7c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008b80:	bb2d      	cbnz	r5, 8008bce <__d2b+0x7a>
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	f1b8 0300 	subs.w	r3, r8, #0
 8008b88:	d026      	beq.n	8008bd8 <__d2b+0x84>
 8008b8a:	4668      	mov	r0, sp
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	f7ff fd0d 	bl	80085ac <__lo0bits>
 8008b92:	9900      	ldr	r1, [sp, #0]
 8008b94:	b1f0      	cbz	r0, 8008bd4 <__d2b+0x80>
 8008b96:	9a01      	ldr	r2, [sp, #4]
 8008b98:	f1c0 0320 	rsb	r3, r0, #32
 8008b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba0:	430b      	orrs	r3, r1
 8008ba2:	40c2      	lsrs	r2, r0
 8008ba4:	6163      	str	r3, [r4, #20]
 8008ba6:	9201      	str	r2, [sp, #4]
 8008ba8:	9b01      	ldr	r3, [sp, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	bf14      	ite	ne
 8008bae:	2102      	movne	r1, #2
 8008bb0:	2101      	moveq	r1, #1
 8008bb2:	61a3      	str	r3, [r4, #24]
 8008bb4:	6121      	str	r1, [r4, #16]
 8008bb6:	b1c5      	cbz	r5, 8008bea <__d2b+0x96>
 8008bb8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008bbc:	4405      	add	r5, r0
 8008bbe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008bc2:	603d      	str	r5, [r7, #0]
 8008bc4:	6030      	str	r0, [r6, #0]
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	b002      	add	sp, #8
 8008bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bd2:	e7d6      	b.n	8008b82 <__d2b+0x2e>
 8008bd4:	6161      	str	r1, [r4, #20]
 8008bd6:	e7e7      	b.n	8008ba8 <__d2b+0x54>
 8008bd8:	a801      	add	r0, sp, #4
 8008bda:	f7ff fce7 	bl	80085ac <__lo0bits>
 8008bde:	2101      	movs	r1, #1
 8008be0:	9b01      	ldr	r3, [sp, #4]
 8008be2:	6121      	str	r1, [r4, #16]
 8008be4:	6163      	str	r3, [r4, #20]
 8008be6:	3020      	adds	r0, #32
 8008be8:	e7e5      	b.n	8008bb6 <__d2b+0x62>
 8008bea:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008bee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bf2:	6038      	str	r0, [r7, #0]
 8008bf4:	6918      	ldr	r0, [r3, #16]
 8008bf6:	f7ff fcb9 	bl	800856c <__hi0bits>
 8008bfa:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008bfe:	6031      	str	r1, [r6, #0]
 8008c00:	e7e1      	b.n	8008bc6 <__d2b+0x72>
 8008c02:	bf00      	nop
 8008c04:	0800c4a9 	.word	0x0800c4a9
 8008c08:	0800c54f 	.word	0x0800c54f

08008c0c <__ratio>:
 8008c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c10:	4688      	mov	r8, r1
 8008c12:	4669      	mov	r1, sp
 8008c14:	4681      	mov	r9, r0
 8008c16:	f7ff ff49 	bl	8008aac <__b2d>
 8008c1a:	460f      	mov	r7, r1
 8008c1c:	4604      	mov	r4, r0
 8008c1e:	460d      	mov	r5, r1
 8008c20:	4640      	mov	r0, r8
 8008c22:	a901      	add	r1, sp, #4
 8008c24:	f7ff ff42 	bl	8008aac <__b2d>
 8008c28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c2c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008c30:	468b      	mov	fp, r1
 8008c32:	eba3 0c02 	sub.w	ip, r3, r2
 8008c36:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008c3a:	1a9b      	subs	r3, r3, r2
 8008c3c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	bfd5      	itete	le
 8008c44:	460a      	movle	r2, r1
 8008c46:	462a      	movgt	r2, r5
 8008c48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c4c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008c50:	bfd8      	it	le
 8008c52:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008c56:	465b      	mov	r3, fp
 8008c58:	4602      	mov	r2, r0
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f7f7 fd65 	bl	800072c <__aeabi_ddiv>
 8008c62:	b003      	add	sp, #12
 8008c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c68 <__copybits>:
 8008c68:	3901      	subs	r1, #1
 8008c6a:	b570      	push	{r4, r5, r6, lr}
 8008c6c:	1149      	asrs	r1, r1, #5
 8008c6e:	6914      	ldr	r4, [r2, #16]
 8008c70:	3101      	adds	r1, #1
 8008c72:	f102 0314 	add.w	r3, r2, #20
 8008c76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c7e:	1f05      	subs	r5, r0, #4
 8008c80:	42a3      	cmp	r3, r4
 8008c82:	d30c      	bcc.n	8008c9e <__copybits+0x36>
 8008c84:	1aa3      	subs	r3, r4, r2
 8008c86:	3b11      	subs	r3, #17
 8008c88:	f023 0303 	bic.w	r3, r3, #3
 8008c8c:	3211      	adds	r2, #17
 8008c8e:	42a2      	cmp	r2, r4
 8008c90:	bf88      	it	hi
 8008c92:	2300      	movhi	r3, #0
 8008c94:	4418      	add	r0, r3
 8008c96:	2300      	movs	r3, #0
 8008c98:	4288      	cmp	r0, r1
 8008c9a:	d305      	bcc.n	8008ca8 <__copybits+0x40>
 8008c9c:	bd70      	pop	{r4, r5, r6, pc}
 8008c9e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008ca2:	f845 6f04 	str.w	r6, [r5, #4]!
 8008ca6:	e7eb      	b.n	8008c80 <__copybits+0x18>
 8008ca8:	f840 3b04 	str.w	r3, [r0], #4
 8008cac:	e7f4      	b.n	8008c98 <__copybits+0x30>

08008cae <__any_on>:
 8008cae:	f100 0214 	add.w	r2, r0, #20
 8008cb2:	6900      	ldr	r0, [r0, #16]
 8008cb4:	114b      	asrs	r3, r1, #5
 8008cb6:	4298      	cmp	r0, r3
 8008cb8:	b510      	push	{r4, lr}
 8008cba:	db11      	blt.n	8008ce0 <__any_on+0x32>
 8008cbc:	dd0a      	ble.n	8008cd4 <__any_on+0x26>
 8008cbe:	f011 011f 	ands.w	r1, r1, #31
 8008cc2:	d007      	beq.n	8008cd4 <__any_on+0x26>
 8008cc4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008cc8:	fa24 f001 	lsr.w	r0, r4, r1
 8008ccc:	fa00 f101 	lsl.w	r1, r0, r1
 8008cd0:	428c      	cmp	r4, r1
 8008cd2:	d10b      	bne.n	8008cec <__any_on+0x3e>
 8008cd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d803      	bhi.n	8008ce4 <__any_on+0x36>
 8008cdc:	2000      	movs	r0, #0
 8008cde:	bd10      	pop	{r4, pc}
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	e7f7      	b.n	8008cd4 <__any_on+0x26>
 8008ce4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ce8:	2900      	cmp	r1, #0
 8008cea:	d0f5      	beq.n	8008cd8 <__any_on+0x2a>
 8008cec:	2001      	movs	r0, #1
 8008cee:	e7f6      	b.n	8008cde <__any_on+0x30>

08008cf0 <_calloc_r>:
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	fb02 f501 	mul.w	r5, r2, r1
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	f000 f808 	bl	8008d0c <_malloc_r>
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	b118      	cbz	r0, 8008d08 <_calloc_r+0x18>
 8008d00:	462a      	mov	r2, r5
 8008d02:	2100      	movs	r1, #0
 8008d04:	f7fd feb6 	bl	8006a74 <memset>
 8008d08:	4620      	mov	r0, r4
 8008d0a:	bd38      	pop	{r3, r4, r5, pc}

08008d0c <_malloc_r>:
 8008d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0e:	1ccd      	adds	r5, r1, #3
 8008d10:	f025 0503 	bic.w	r5, r5, #3
 8008d14:	3508      	adds	r5, #8
 8008d16:	2d0c      	cmp	r5, #12
 8008d18:	bf38      	it	cc
 8008d1a:	250c      	movcc	r5, #12
 8008d1c:	2d00      	cmp	r5, #0
 8008d1e:	4606      	mov	r6, r0
 8008d20:	db01      	blt.n	8008d26 <_malloc_r+0x1a>
 8008d22:	42a9      	cmp	r1, r5
 8008d24:	d903      	bls.n	8008d2e <_malloc_r+0x22>
 8008d26:	230c      	movs	r3, #12
 8008d28:	6033      	str	r3, [r6, #0]
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d2e:	f000 fbcf 	bl	80094d0 <__malloc_lock>
 8008d32:	4921      	ldr	r1, [pc, #132]	; (8008db8 <_malloc_r+0xac>)
 8008d34:	680a      	ldr	r2, [r1, #0]
 8008d36:	4614      	mov	r4, r2
 8008d38:	b99c      	cbnz	r4, 8008d62 <_malloc_r+0x56>
 8008d3a:	4f20      	ldr	r7, [pc, #128]	; (8008dbc <_malloc_r+0xb0>)
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	b923      	cbnz	r3, 8008d4a <_malloc_r+0x3e>
 8008d40:	4621      	mov	r1, r4
 8008d42:	4630      	mov	r0, r6
 8008d44:	f000 fb34 	bl	80093b0 <_sbrk_r>
 8008d48:	6038      	str	r0, [r7, #0]
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	f000 fb2f 	bl	80093b0 <_sbrk_r>
 8008d52:	1c43      	adds	r3, r0, #1
 8008d54:	d123      	bne.n	8008d9e <_malloc_r+0x92>
 8008d56:	230c      	movs	r3, #12
 8008d58:	4630      	mov	r0, r6
 8008d5a:	6033      	str	r3, [r6, #0]
 8008d5c:	f000 fbbe 	bl	80094dc <__malloc_unlock>
 8008d60:	e7e3      	b.n	8008d2a <_malloc_r+0x1e>
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	1b5b      	subs	r3, r3, r5
 8008d66:	d417      	bmi.n	8008d98 <_malloc_r+0x8c>
 8008d68:	2b0b      	cmp	r3, #11
 8008d6a:	d903      	bls.n	8008d74 <_malloc_r+0x68>
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	441c      	add	r4, r3
 8008d70:	6025      	str	r5, [r4, #0]
 8008d72:	e004      	b.n	8008d7e <_malloc_r+0x72>
 8008d74:	6863      	ldr	r3, [r4, #4]
 8008d76:	42a2      	cmp	r2, r4
 8008d78:	bf0c      	ite	eq
 8008d7a:	600b      	streq	r3, [r1, #0]
 8008d7c:	6053      	strne	r3, [r2, #4]
 8008d7e:	4630      	mov	r0, r6
 8008d80:	f000 fbac 	bl	80094dc <__malloc_unlock>
 8008d84:	f104 000b 	add.w	r0, r4, #11
 8008d88:	1d23      	adds	r3, r4, #4
 8008d8a:	f020 0007 	bic.w	r0, r0, #7
 8008d8e:	1ac2      	subs	r2, r0, r3
 8008d90:	d0cc      	beq.n	8008d2c <_malloc_r+0x20>
 8008d92:	1a1b      	subs	r3, r3, r0
 8008d94:	50a3      	str	r3, [r4, r2]
 8008d96:	e7c9      	b.n	8008d2c <_malloc_r+0x20>
 8008d98:	4622      	mov	r2, r4
 8008d9a:	6864      	ldr	r4, [r4, #4]
 8008d9c:	e7cc      	b.n	8008d38 <_malloc_r+0x2c>
 8008d9e:	1cc4      	adds	r4, r0, #3
 8008da0:	f024 0403 	bic.w	r4, r4, #3
 8008da4:	42a0      	cmp	r0, r4
 8008da6:	d0e3      	beq.n	8008d70 <_malloc_r+0x64>
 8008da8:	1a21      	subs	r1, r4, r0
 8008daa:	4630      	mov	r0, r6
 8008dac:	f000 fb00 	bl	80093b0 <_sbrk_r>
 8008db0:	3001      	adds	r0, #1
 8008db2:	d1dd      	bne.n	8008d70 <_malloc_r+0x64>
 8008db4:	e7cf      	b.n	8008d56 <_malloc_r+0x4a>
 8008db6:	bf00      	nop
 8008db8:	20000270 	.word	0x20000270
 8008dbc:	20000274 	.word	0x20000274

08008dc0 <__ssputs_r>:
 8008dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc4:	688e      	ldr	r6, [r1, #8]
 8008dc6:	4682      	mov	sl, r0
 8008dc8:	429e      	cmp	r6, r3
 8008dca:	460c      	mov	r4, r1
 8008dcc:	4690      	mov	r8, r2
 8008dce:	461f      	mov	r7, r3
 8008dd0:	d838      	bhi.n	8008e44 <__ssputs_r+0x84>
 8008dd2:	898a      	ldrh	r2, [r1, #12]
 8008dd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008dd8:	d032      	beq.n	8008e40 <__ssputs_r+0x80>
 8008dda:	6825      	ldr	r5, [r4, #0]
 8008ddc:	6909      	ldr	r1, [r1, #16]
 8008dde:	3301      	adds	r3, #1
 8008de0:	eba5 0901 	sub.w	r9, r5, r1
 8008de4:	6965      	ldr	r5, [r4, #20]
 8008de6:	444b      	add	r3, r9
 8008de8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008df0:	106d      	asrs	r5, r5, #1
 8008df2:	429d      	cmp	r5, r3
 8008df4:	bf38      	it	cc
 8008df6:	461d      	movcc	r5, r3
 8008df8:	0553      	lsls	r3, r2, #21
 8008dfa:	d531      	bpl.n	8008e60 <__ssputs_r+0xa0>
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	f7ff ff85 	bl	8008d0c <_malloc_r>
 8008e02:	4606      	mov	r6, r0
 8008e04:	b950      	cbnz	r0, 8008e1c <__ssputs_r+0x5c>
 8008e06:	230c      	movs	r3, #12
 8008e08:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0c:	f8ca 3000 	str.w	r3, [sl]
 8008e10:	89a3      	ldrh	r3, [r4, #12]
 8008e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e16:	81a3      	strh	r3, [r4, #12]
 8008e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e1c:	464a      	mov	r2, r9
 8008e1e:	6921      	ldr	r1, [r4, #16]
 8008e20:	f7fd fe1a 	bl	8006a58 <memcpy>
 8008e24:	89a3      	ldrh	r3, [r4, #12]
 8008e26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e2e:	81a3      	strh	r3, [r4, #12]
 8008e30:	6126      	str	r6, [r4, #16]
 8008e32:	444e      	add	r6, r9
 8008e34:	6026      	str	r6, [r4, #0]
 8008e36:	463e      	mov	r6, r7
 8008e38:	6165      	str	r5, [r4, #20]
 8008e3a:	eba5 0509 	sub.w	r5, r5, r9
 8008e3e:	60a5      	str	r5, [r4, #8]
 8008e40:	42be      	cmp	r6, r7
 8008e42:	d900      	bls.n	8008e46 <__ssputs_r+0x86>
 8008e44:	463e      	mov	r6, r7
 8008e46:	4632      	mov	r2, r6
 8008e48:	4641      	mov	r1, r8
 8008e4a:	6820      	ldr	r0, [r4, #0]
 8008e4c:	f000 fb26 	bl	800949c <memmove>
 8008e50:	68a3      	ldr	r3, [r4, #8]
 8008e52:	6822      	ldr	r2, [r4, #0]
 8008e54:	1b9b      	subs	r3, r3, r6
 8008e56:	4432      	add	r2, r6
 8008e58:	2000      	movs	r0, #0
 8008e5a:	60a3      	str	r3, [r4, #8]
 8008e5c:	6022      	str	r2, [r4, #0]
 8008e5e:	e7db      	b.n	8008e18 <__ssputs_r+0x58>
 8008e60:	462a      	mov	r2, r5
 8008e62:	f000 fb8d 	bl	8009580 <_realloc_r>
 8008e66:	4606      	mov	r6, r0
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d1e1      	bne.n	8008e30 <__ssputs_r+0x70>
 8008e6c:	4650      	mov	r0, sl
 8008e6e:	6921      	ldr	r1, [r4, #16]
 8008e70:	f000 fb3a 	bl	80094e8 <_free_r>
 8008e74:	e7c7      	b.n	8008e06 <__ssputs_r+0x46>
	...

08008e78 <_svfiprintf_r>:
 8008e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e7c:	4698      	mov	r8, r3
 8008e7e:	898b      	ldrh	r3, [r1, #12]
 8008e80:	4607      	mov	r7, r0
 8008e82:	061b      	lsls	r3, r3, #24
 8008e84:	460d      	mov	r5, r1
 8008e86:	4614      	mov	r4, r2
 8008e88:	b09d      	sub	sp, #116	; 0x74
 8008e8a:	d50e      	bpl.n	8008eaa <_svfiprintf_r+0x32>
 8008e8c:	690b      	ldr	r3, [r1, #16]
 8008e8e:	b963      	cbnz	r3, 8008eaa <_svfiprintf_r+0x32>
 8008e90:	2140      	movs	r1, #64	; 0x40
 8008e92:	f7ff ff3b 	bl	8008d0c <_malloc_r>
 8008e96:	6028      	str	r0, [r5, #0]
 8008e98:	6128      	str	r0, [r5, #16]
 8008e9a:	b920      	cbnz	r0, 8008ea6 <_svfiprintf_r+0x2e>
 8008e9c:	230c      	movs	r3, #12
 8008e9e:	603b      	str	r3, [r7, #0]
 8008ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea4:	e0d1      	b.n	800904a <_svfiprintf_r+0x1d2>
 8008ea6:	2340      	movs	r3, #64	; 0x40
 8008ea8:	616b      	str	r3, [r5, #20]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	9309      	str	r3, [sp, #36]	; 0x24
 8008eae:	2320      	movs	r3, #32
 8008eb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008eb4:	2330      	movs	r3, #48	; 0x30
 8008eb6:	f04f 0901 	mov.w	r9, #1
 8008eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ebe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009064 <_svfiprintf_r+0x1ec>
 8008ec2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ec6:	4623      	mov	r3, r4
 8008ec8:	469a      	mov	sl, r3
 8008eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ece:	b10a      	cbz	r2, 8008ed4 <_svfiprintf_r+0x5c>
 8008ed0:	2a25      	cmp	r2, #37	; 0x25
 8008ed2:	d1f9      	bne.n	8008ec8 <_svfiprintf_r+0x50>
 8008ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ed8:	d00b      	beq.n	8008ef2 <_svfiprintf_r+0x7a>
 8008eda:	465b      	mov	r3, fp
 8008edc:	4622      	mov	r2, r4
 8008ede:	4629      	mov	r1, r5
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	f7ff ff6d 	bl	8008dc0 <__ssputs_r>
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	f000 80aa 	beq.w	8009040 <_svfiprintf_r+0x1c8>
 8008eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eee:	445a      	add	r2, fp
 8008ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f000 80a2 	beq.w	8009040 <_svfiprintf_r+0x1c8>
 8008efc:	2300      	movs	r3, #0
 8008efe:	f04f 32ff 	mov.w	r2, #4294967295
 8008f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f06:	f10a 0a01 	add.w	sl, sl, #1
 8008f0a:	9304      	str	r3, [sp, #16]
 8008f0c:	9307      	str	r3, [sp, #28]
 8008f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f12:	931a      	str	r3, [sp, #104]	; 0x68
 8008f14:	4654      	mov	r4, sl
 8008f16:	2205      	movs	r2, #5
 8008f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f1c:	4851      	ldr	r0, [pc, #324]	; (8009064 <_svfiprintf_r+0x1ec>)
 8008f1e:	f000 faaf 	bl	8009480 <memchr>
 8008f22:	9a04      	ldr	r2, [sp, #16]
 8008f24:	b9d8      	cbnz	r0, 8008f5e <_svfiprintf_r+0xe6>
 8008f26:	06d0      	lsls	r0, r2, #27
 8008f28:	bf44      	itt	mi
 8008f2a:	2320      	movmi	r3, #32
 8008f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f30:	0711      	lsls	r1, r2, #28
 8008f32:	bf44      	itt	mi
 8008f34:	232b      	movmi	r3, #43	; 0x2b
 8008f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f40:	d015      	beq.n	8008f6e <_svfiprintf_r+0xf6>
 8008f42:	4654      	mov	r4, sl
 8008f44:	2000      	movs	r0, #0
 8008f46:	f04f 0c0a 	mov.w	ip, #10
 8008f4a:	9a07      	ldr	r2, [sp, #28]
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f52:	3b30      	subs	r3, #48	; 0x30
 8008f54:	2b09      	cmp	r3, #9
 8008f56:	d94e      	bls.n	8008ff6 <_svfiprintf_r+0x17e>
 8008f58:	b1b0      	cbz	r0, 8008f88 <_svfiprintf_r+0x110>
 8008f5a:	9207      	str	r2, [sp, #28]
 8008f5c:	e014      	b.n	8008f88 <_svfiprintf_r+0x110>
 8008f5e:	eba0 0308 	sub.w	r3, r0, r8
 8008f62:	fa09 f303 	lsl.w	r3, r9, r3
 8008f66:	4313      	orrs	r3, r2
 8008f68:	46a2      	mov	sl, r4
 8008f6a:	9304      	str	r3, [sp, #16]
 8008f6c:	e7d2      	b.n	8008f14 <_svfiprintf_r+0x9c>
 8008f6e:	9b03      	ldr	r3, [sp, #12]
 8008f70:	1d19      	adds	r1, r3, #4
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	9103      	str	r1, [sp, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	bfbb      	ittet	lt
 8008f7a:	425b      	neglt	r3, r3
 8008f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8008f80:	9307      	strge	r3, [sp, #28]
 8008f82:	9307      	strlt	r3, [sp, #28]
 8008f84:	bfb8      	it	lt
 8008f86:	9204      	strlt	r2, [sp, #16]
 8008f88:	7823      	ldrb	r3, [r4, #0]
 8008f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8008f8c:	d10c      	bne.n	8008fa8 <_svfiprintf_r+0x130>
 8008f8e:	7863      	ldrb	r3, [r4, #1]
 8008f90:	2b2a      	cmp	r3, #42	; 0x2a
 8008f92:	d135      	bne.n	8009000 <_svfiprintf_r+0x188>
 8008f94:	9b03      	ldr	r3, [sp, #12]
 8008f96:	3402      	adds	r4, #2
 8008f98:	1d1a      	adds	r2, r3, #4
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	9203      	str	r2, [sp, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	bfb8      	it	lt
 8008fa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fa6:	9305      	str	r3, [sp, #20]
 8008fa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009074 <_svfiprintf_r+0x1fc>
 8008fac:	2203      	movs	r2, #3
 8008fae:	4650      	mov	r0, sl
 8008fb0:	7821      	ldrb	r1, [r4, #0]
 8008fb2:	f000 fa65 	bl	8009480 <memchr>
 8008fb6:	b140      	cbz	r0, 8008fca <_svfiprintf_r+0x152>
 8008fb8:	2340      	movs	r3, #64	; 0x40
 8008fba:	eba0 000a 	sub.w	r0, r0, sl
 8008fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8008fc2:	9b04      	ldr	r3, [sp, #16]
 8008fc4:	3401      	adds	r4, #1
 8008fc6:	4303      	orrs	r3, r0
 8008fc8:	9304      	str	r3, [sp, #16]
 8008fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fce:	2206      	movs	r2, #6
 8008fd0:	4825      	ldr	r0, [pc, #148]	; (8009068 <_svfiprintf_r+0x1f0>)
 8008fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fd6:	f000 fa53 	bl	8009480 <memchr>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d038      	beq.n	8009050 <_svfiprintf_r+0x1d8>
 8008fde:	4b23      	ldr	r3, [pc, #140]	; (800906c <_svfiprintf_r+0x1f4>)
 8008fe0:	bb1b      	cbnz	r3, 800902a <_svfiprintf_r+0x1b2>
 8008fe2:	9b03      	ldr	r3, [sp, #12]
 8008fe4:	3307      	adds	r3, #7
 8008fe6:	f023 0307 	bic.w	r3, r3, #7
 8008fea:	3308      	adds	r3, #8
 8008fec:	9303      	str	r3, [sp, #12]
 8008fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff0:	4433      	add	r3, r6
 8008ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff4:	e767      	b.n	8008ec6 <_svfiprintf_r+0x4e>
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	2001      	movs	r0, #1
 8008ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ffe:	e7a5      	b.n	8008f4c <_svfiprintf_r+0xd4>
 8009000:	2300      	movs	r3, #0
 8009002:	f04f 0c0a 	mov.w	ip, #10
 8009006:	4619      	mov	r1, r3
 8009008:	3401      	adds	r4, #1
 800900a:	9305      	str	r3, [sp, #20]
 800900c:	4620      	mov	r0, r4
 800900e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009012:	3a30      	subs	r2, #48	; 0x30
 8009014:	2a09      	cmp	r2, #9
 8009016:	d903      	bls.n	8009020 <_svfiprintf_r+0x1a8>
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0c5      	beq.n	8008fa8 <_svfiprintf_r+0x130>
 800901c:	9105      	str	r1, [sp, #20]
 800901e:	e7c3      	b.n	8008fa8 <_svfiprintf_r+0x130>
 8009020:	4604      	mov	r4, r0
 8009022:	2301      	movs	r3, #1
 8009024:	fb0c 2101 	mla	r1, ip, r1, r2
 8009028:	e7f0      	b.n	800900c <_svfiprintf_r+0x194>
 800902a:	ab03      	add	r3, sp, #12
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	462a      	mov	r2, r5
 8009030:	4638      	mov	r0, r7
 8009032:	4b0f      	ldr	r3, [pc, #60]	; (8009070 <_svfiprintf_r+0x1f8>)
 8009034:	a904      	add	r1, sp, #16
 8009036:	f3af 8000 	nop.w
 800903a:	1c42      	adds	r2, r0, #1
 800903c:	4606      	mov	r6, r0
 800903e:	d1d6      	bne.n	8008fee <_svfiprintf_r+0x176>
 8009040:	89ab      	ldrh	r3, [r5, #12]
 8009042:	065b      	lsls	r3, r3, #25
 8009044:	f53f af2c 	bmi.w	8008ea0 <_svfiprintf_r+0x28>
 8009048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800904a:	b01d      	add	sp, #116	; 0x74
 800904c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009050:	ab03      	add	r3, sp, #12
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	462a      	mov	r2, r5
 8009056:	4638      	mov	r0, r7
 8009058:	4b05      	ldr	r3, [pc, #20]	; (8009070 <_svfiprintf_r+0x1f8>)
 800905a:	a904      	add	r1, sp, #16
 800905c:	f000 f87c 	bl	8009158 <_printf_i>
 8009060:	e7eb      	b.n	800903a <_svfiprintf_r+0x1c2>
 8009062:	bf00      	nop
 8009064:	0800c6ac 	.word	0x0800c6ac
 8009068:	0800c6b6 	.word	0x0800c6b6
 800906c:	00000000 	.word	0x00000000
 8009070:	08008dc1 	.word	0x08008dc1
 8009074:	0800c6b2 	.word	0x0800c6b2

08009078 <_printf_common>:
 8009078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800907c:	4616      	mov	r6, r2
 800907e:	4699      	mov	r9, r3
 8009080:	688a      	ldr	r2, [r1, #8]
 8009082:	690b      	ldr	r3, [r1, #16]
 8009084:	4607      	mov	r7, r0
 8009086:	4293      	cmp	r3, r2
 8009088:	bfb8      	it	lt
 800908a:	4613      	movlt	r3, r2
 800908c:	6033      	str	r3, [r6, #0]
 800908e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009092:	460c      	mov	r4, r1
 8009094:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009098:	b10a      	cbz	r2, 800909e <_printf_common+0x26>
 800909a:	3301      	adds	r3, #1
 800909c:	6033      	str	r3, [r6, #0]
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	0699      	lsls	r1, r3, #26
 80090a2:	bf42      	ittt	mi
 80090a4:	6833      	ldrmi	r3, [r6, #0]
 80090a6:	3302      	addmi	r3, #2
 80090a8:	6033      	strmi	r3, [r6, #0]
 80090aa:	6825      	ldr	r5, [r4, #0]
 80090ac:	f015 0506 	ands.w	r5, r5, #6
 80090b0:	d106      	bne.n	80090c0 <_printf_common+0x48>
 80090b2:	f104 0a19 	add.w	sl, r4, #25
 80090b6:	68e3      	ldr	r3, [r4, #12]
 80090b8:	6832      	ldr	r2, [r6, #0]
 80090ba:	1a9b      	subs	r3, r3, r2
 80090bc:	42ab      	cmp	r3, r5
 80090be:	dc28      	bgt.n	8009112 <_printf_common+0x9a>
 80090c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090c4:	1e13      	subs	r3, r2, #0
 80090c6:	6822      	ldr	r2, [r4, #0]
 80090c8:	bf18      	it	ne
 80090ca:	2301      	movne	r3, #1
 80090cc:	0692      	lsls	r2, r2, #26
 80090ce:	d42d      	bmi.n	800912c <_printf_common+0xb4>
 80090d0:	4649      	mov	r1, r9
 80090d2:	4638      	mov	r0, r7
 80090d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090d8:	47c0      	blx	r8
 80090da:	3001      	adds	r0, #1
 80090dc:	d020      	beq.n	8009120 <_printf_common+0xa8>
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	68e5      	ldr	r5, [r4, #12]
 80090e2:	f003 0306 	and.w	r3, r3, #6
 80090e6:	2b04      	cmp	r3, #4
 80090e8:	bf18      	it	ne
 80090ea:	2500      	movne	r5, #0
 80090ec:	6832      	ldr	r2, [r6, #0]
 80090ee:	f04f 0600 	mov.w	r6, #0
 80090f2:	68a3      	ldr	r3, [r4, #8]
 80090f4:	bf08      	it	eq
 80090f6:	1aad      	subeq	r5, r5, r2
 80090f8:	6922      	ldr	r2, [r4, #16]
 80090fa:	bf08      	it	eq
 80090fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009100:	4293      	cmp	r3, r2
 8009102:	bfc4      	itt	gt
 8009104:	1a9b      	subgt	r3, r3, r2
 8009106:	18ed      	addgt	r5, r5, r3
 8009108:	341a      	adds	r4, #26
 800910a:	42b5      	cmp	r5, r6
 800910c:	d11a      	bne.n	8009144 <_printf_common+0xcc>
 800910e:	2000      	movs	r0, #0
 8009110:	e008      	b.n	8009124 <_printf_common+0xac>
 8009112:	2301      	movs	r3, #1
 8009114:	4652      	mov	r2, sl
 8009116:	4649      	mov	r1, r9
 8009118:	4638      	mov	r0, r7
 800911a:	47c0      	blx	r8
 800911c:	3001      	adds	r0, #1
 800911e:	d103      	bne.n	8009128 <_printf_common+0xb0>
 8009120:	f04f 30ff 	mov.w	r0, #4294967295
 8009124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009128:	3501      	adds	r5, #1
 800912a:	e7c4      	b.n	80090b6 <_printf_common+0x3e>
 800912c:	2030      	movs	r0, #48	; 0x30
 800912e:	18e1      	adds	r1, r4, r3
 8009130:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009134:	1c5a      	adds	r2, r3, #1
 8009136:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800913a:	4422      	add	r2, r4
 800913c:	3302      	adds	r3, #2
 800913e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009142:	e7c5      	b.n	80090d0 <_printf_common+0x58>
 8009144:	2301      	movs	r3, #1
 8009146:	4622      	mov	r2, r4
 8009148:	4649      	mov	r1, r9
 800914a:	4638      	mov	r0, r7
 800914c:	47c0      	blx	r8
 800914e:	3001      	adds	r0, #1
 8009150:	d0e6      	beq.n	8009120 <_printf_common+0xa8>
 8009152:	3601      	adds	r6, #1
 8009154:	e7d9      	b.n	800910a <_printf_common+0x92>
	...

08009158 <_printf_i>:
 8009158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800915c:	460c      	mov	r4, r1
 800915e:	7e27      	ldrb	r7, [r4, #24]
 8009160:	4691      	mov	r9, r2
 8009162:	2f78      	cmp	r7, #120	; 0x78
 8009164:	4680      	mov	r8, r0
 8009166:	469a      	mov	sl, r3
 8009168:	990c      	ldr	r1, [sp, #48]	; 0x30
 800916a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800916e:	d807      	bhi.n	8009180 <_printf_i+0x28>
 8009170:	2f62      	cmp	r7, #98	; 0x62
 8009172:	d80a      	bhi.n	800918a <_printf_i+0x32>
 8009174:	2f00      	cmp	r7, #0
 8009176:	f000 80d9 	beq.w	800932c <_printf_i+0x1d4>
 800917a:	2f58      	cmp	r7, #88	; 0x58
 800917c:	f000 80a4 	beq.w	80092c8 <_printf_i+0x170>
 8009180:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009184:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009188:	e03a      	b.n	8009200 <_printf_i+0xa8>
 800918a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800918e:	2b15      	cmp	r3, #21
 8009190:	d8f6      	bhi.n	8009180 <_printf_i+0x28>
 8009192:	a001      	add	r0, pc, #4	; (adr r0, 8009198 <_printf_i+0x40>)
 8009194:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009198:	080091f1 	.word	0x080091f1
 800919c:	08009205 	.word	0x08009205
 80091a0:	08009181 	.word	0x08009181
 80091a4:	08009181 	.word	0x08009181
 80091a8:	08009181 	.word	0x08009181
 80091ac:	08009181 	.word	0x08009181
 80091b0:	08009205 	.word	0x08009205
 80091b4:	08009181 	.word	0x08009181
 80091b8:	08009181 	.word	0x08009181
 80091bc:	08009181 	.word	0x08009181
 80091c0:	08009181 	.word	0x08009181
 80091c4:	08009313 	.word	0x08009313
 80091c8:	08009235 	.word	0x08009235
 80091cc:	080092f5 	.word	0x080092f5
 80091d0:	08009181 	.word	0x08009181
 80091d4:	08009181 	.word	0x08009181
 80091d8:	08009335 	.word	0x08009335
 80091dc:	08009181 	.word	0x08009181
 80091e0:	08009235 	.word	0x08009235
 80091e4:	08009181 	.word	0x08009181
 80091e8:	08009181 	.word	0x08009181
 80091ec:	080092fd 	.word	0x080092fd
 80091f0:	680b      	ldr	r3, [r1, #0]
 80091f2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091f6:	1d1a      	adds	r2, r3, #4
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	600a      	str	r2, [r1, #0]
 80091fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009200:	2301      	movs	r3, #1
 8009202:	e0a4      	b.n	800934e <_printf_i+0x1f6>
 8009204:	6825      	ldr	r5, [r4, #0]
 8009206:	6808      	ldr	r0, [r1, #0]
 8009208:	062e      	lsls	r6, r5, #24
 800920a:	f100 0304 	add.w	r3, r0, #4
 800920e:	d50a      	bpl.n	8009226 <_printf_i+0xce>
 8009210:	6805      	ldr	r5, [r0, #0]
 8009212:	600b      	str	r3, [r1, #0]
 8009214:	2d00      	cmp	r5, #0
 8009216:	da03      	bge.n	8009220 <_printf_i+0xc8>
 8009218:	232d      	movs	r3, #45	; 0x2d
 800921a:	426d      	negs	r5, r5
 800921c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009220:	230a      	movs	r3, #10
 8009222:	485e      	ldr	r0, [pc, #376]	; (800939c <_printf_i+0x244>)
 8009224:	e019      	b.n	800925a <_printf_i+0x102>
 8009226:	f015 0f40 	tst.w	r5, #64	; 0x40
 800922a:	6805      	ldr	r5, [r0, #0]
 800922c:	600b      	str	r3, [r1, #0]
 800922e:	bf18      	it	ne
 8009230:	b22d      	sxthne	r5, r5
 8009232:	e7ef      	b.n	8009214 <_printf_i+0xbc>
 8009234:	680b      	ldr	r3, [r1, #0]
 8009236:	6825      	ldr	r5, [r4, #0]
 8009238:	1d18      	adds	r0, r3, #4
 800923a:	6008      	str	r0, [r1, #0]
 800923c:	0628      	lsls	r0, r5, #24
 800923e:	d501      	bpl.n	8009244 <_printf_i+0xec>
 8009240:	681d      	ldr	r5, [r3, #0]
 8009242:	e002      	b.n	800924a <_printf_i+0xf2>
 8009244:	0669      	lsls	r1, r5, #25
 8009246:	d5fb      	bpl.n	8009240 <_printf_i+0xe8>
 8009248:	881d      	ldrh	r5, [r3, #0]
 800924a:	2f6f      	cmp	r7, #111	; 0x6f
 800924c:	bf0c      	ite	eq
 800924e:	2308      	moveq	r3, #8
 8009250:	230a      	movne	r3, #10
 8009252:	4852      	ldr	r0, [pc, #328]	; (800939c <_printf_i+0x244>)
 8009254:	2100      	movs	r1, #0
 8009256:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800925a:	6866      	ldr	r6, [r4, #4]
 800925c:	2e00      	cmp	r6, #0
 800925e:	bfa8      	it	ge
 8009260:	6821      	ldrge	r1, [r4, #0]
 8009262:	60a6      	str	r6, [r4, #8]
 8009264:	bfa4      	itt	ge
 8009266:	f021 0104 	bicge.w	r1, r1, #4
 800926a:	6021      	strge	r1, [r4, #0]
 800926c:	b90d      	cbnz	r5, 8009272 <_printf_i+0x11a>
 800926e:	2e00      	cmp	r6, #0
 8009270:	d04d      	beq.n	800930e <_printf_i+0x1b6>
 8009272:	4616      	mov	r6, r2
 8009274:	fbb5 f1f3 	udiv	r1, r5, r3
 8009278:	fb03 5711 	mls	r7, r3, r1, r5
 800927c:	5dc7      	ldrb	r7, [r0, r7]
 800927e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009282:	462f      	mov	r7, r5
 8009284:	42bb      	cmp	r3, r7
 8009286:	460d      	mov	r5, r1
 8009288:	d9f4      	bls.n	8009274 <_printf_i+0x11c>
 800928a:	2b08      	cmp	r3, #8
 800928c:	d10b      	bne.n	80092a6 <_printf_i+0x14e>
 800928e:	6823      	ldr	r3, [r4, #0]
 8009290:	07df      	lsls	r7, r3, #31
 8009292:	d508      	bpl.n	80092a6 <_printf_i+0x14e>
 8009294:	6923      	ldr	r3, [r4, #16]
 8009296:	6861      	ldr	r1, [r4, #4]
 8009298:	4299      	cmp	r1, r3
 800929a:	bfde      	ittt	le
 800929c:	2330      	movle	r3, #48	; 0x30
 800929e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80092a6:	1b92      	subs	r2, r2, r6
 80092a8:	6122      	str	r2, [r4, #16]
 80092aa:	464b      	mov	r3, r9
 80092ac:	4621      	mov	r1, r4
 80092ae:	4640      	mov	r0, r8
 80092b0:	f8cd a000 	str.w	sl, [sp]
 80092b4:	aa03      	add	r2, sp, #12
 80092b6:	f7ff fedf 	bl	8009078 <_printf_common>
 80092ba:	3001      	adds	r0, #1
 80092bc:	d14c      	bne.n	8009358 <_printf_i+0x200>
 80092be:	f04f 30ff 	mov.w	r0, #4294967295
 80092c2:	b004      	add	sp, #16
 80092c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c8:	4834      	ldr	r0, [pc, #208]	; (800939c <_printf_i+0x244>)
 80092ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092ce:	680e      	ldr	r6, [r1, #0]
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80092d6:	061f      	lsls	r7, r3, #24
 80092d8:	600e      	str	r6, [r1, #0]
 80092da:	d514      	bpl.n	8009306 <_printf_i+0x1ae>
 80092dc:	07d9      	lsls	r1, r3, #31
 80092de:	bf44      	itt	mi
 80092e0:	f043 0320 	orrmi.w	r3, r3, #32
 80092e4:	6023      	strmi	r3, [r4, #0]
 80092e6:	b91d      	cbnz	r5, 80092f0 <_printf_i+0x198>
 80092e8:	6823      	ldr	r3, [r4, #0]
 80092ea:	f023 0320 	bic.w	r3, r3, #32
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	2310      	movs	r3, #16
 80092f2:	e7af      	b.n	8009254 <_printf_i+0xfc>
 80092f4:	6823      	ldr	r3, [r4, #0]
 80092f6:	f043 0320 	orr.w	r3, r3, #32
 80092fa:	6023      	str	r3, [r4, #0]
 80092fc:	2378      	movs	r3, #120	; 0x78
 80092fe:	4828      	ldr	r0, [pc, #160]	; (80093a0 <_printf_i+0x248>)
 8009300:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009304:	e7e3      	b.n	80092ce <_printf_i+0x176>
 8009306:	065e      	lsls	r6, r3, #25
 8009308:	bf48      	it	mi
 800930a:	b2ad      	uxthmi	r5, r5
 800930c:	e7e6      	b.n	80092dc <_printf_i+0x184>
 800930e:	4616      	mov	r6, r2
 8009310:	e7bb      	b.n	800928a <_printf_i+0x132>
 8009312:	680b      	ldr	r3, [r1, #0]
 8009314:	6826      	ldr	r6, [r4, #0]
 8009316:	1d1d      	adds	r5, r3, #4
 8009318:	6960      	ldr	r0, [r4, #20]
 800931a:	600d      	str	r5, [r1, #0]
 800931c:	0635      	lsls	r5, r6, #24
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	d501      	bpl.n	8009326 <_printf_i+0x1ce>
 8009322:	6018      	str	r0, [r3, #0]
 8009324:	e002      	b.n	800932c <_printf_i+0x1d4>
 8009326:	0671      	lsls	r1, r6, #25
 8009328:	d5fb      	bpl.n	8009322 <_printf_i+0x1ca>
 800932a:	8018      	strh	r0, [r3, #0]
 800932c:	2300      	movs	r3, #0
 800932e:	4616      	mov	r6, r2
 8009330:	6123      	str	r3, [r4, #16]
 8009332:	e7ba      	b.n	80092aa <_printf_i+0x152>
 8009334:	680b      	ldr	r3, [r1, #0]
 8009336:	1d1a      	adds	r2, r3, #4
 8009338:	600a      	str	r2, [r1, #0]
 800933a:	681e      	ldr	r6, [r3, #0]
 800933c:	2100      	movs	r1, #0
 800933e:	4630      	mov	r0, r6
 8009340:	6862      	ldr	r2, [r4, #4]
 8009342:	f000 f89d 	bl	8009480 <memchr>
 8009346:	b108      	cbz	r0, 800934c <_printf_i+0x1f4>
 8009348:	1b80      	subs	r0, r0, r6
 800934a:	6060      	str	r0, [r4, #4]
 800934c:	6863      	ldr	r3, [r4, #4]
 800934e:	6123      	str	r3, [r4, #16]
 8009350:	2300      	movs	r3, #0
 8009352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009356:	e7a8      	b.n	80092aa <_printf_i+0x152>
 8009358:	4632      	mov	r2, r6
 800935a:	4649      	mov	r1, r9
 800935c:	4640      	mov	r0, r8
 800935e:	6923      	ldr	r3, [r4, #16]
 8009360:	47d0      	blx	sl
 8009362:	3001      	adds	r0, #1
 8009364:	d0ab      	beq.n	80092be <_printf_i+0x166>
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	079b      	lsls	r3, r3, #30
 800936a:	d413      	bmi.n	8009394 <_printf_i+0x23c>
 800936c:	68e0      	ldr	r0, [r4, #12]
 800936e:	9b03      	ldr	r3, [sp, #12]
 8009370:	4298      	cmp	r0, r3
 8009372:	bfb8      	it	lt
 8009374:	4618      	movlt	r0, r3
 8009376:	e7a4      	b.n	80092c2 <_printf_i+0x16a>
 8009378:	2301      	movs	r3, #1
 800937a:	4632      	mov	r2, r6
 800937c:	4649      	mov	r1, r9
 800937e:	4640      	mov	r0, r8
 8009380:	47d0      	blx	sl
 8009382:	3001      	adds	r0, #1
 8009384:	d09b      	beq.n	80092be <_printf_i+0x166>
 8009386:	3501      	adds	r5, #1
 8009388:	68e3      	ldr	r3, [r4, #12]
 800938a:	9903      	ldr	r1, [sp, #12]
 800938c:	1a5b      	subs	r3, r3, r1
 800938e:	42ab      	cmp	r3, r5
 8009390:	dcf2      	bgt.n	8009378 <_printf_i+0x220>
 8009392:	e7eb      	b.n	800936c <_printf_i+0x214>
 8009394:	2500      	movs	r5, #0
 8009396:	f104 0619 	add.w	r6, r4, #25
 800939a:	e7f5      	b.n	8009388 <_printf_i+0x230>
 800939c:	0800c6bd 	.word	0x0800c6bd
 80093a0:	0800c6ce 	.word	0x0800c6ce

080093a4 <nan>:
 80093a4:	2000      	movs	r0, #0
 80093a6:	4901      	ldr	r1, [pc, #4]	; (80093ac <nan+0x8>)
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	7ff80000 	.word	0x7ff80000

080093b0 <_sbrk_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	2300      	movs	r3, #0
 80093b4:	4d05      	ldr	r5, [pc, #20]	; (80093cc <_sbrk_r+0x1c>)
 80093b6:	4604      	mov	r4, r0
 80093b8:	4608      	mov	r0, r1
 80093ba:	602b      	str	r3, [r5, #0]
 80093bc:	f7f9 f9fc 	bl	80027b8 <_sbrk>
 80093c0:	1c43      	adds	r3, r0, #1
 80093c2:	d102      	bne.n	80093ca <_sbrk_r+0x1a>
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	b103      	cbz	r3, 80093ca <_sbrk_r+0x1a>
 80093c8:	6023      	str	r3, [r4, #0]
 80093ca:	bd38      	pop	{r3, r4, r5, pc}
 80093cc:	200004cc 	.word	0x200004cc

080093d0 <strncmp>:
 80093d0:	b510      	push	{r4, lr}
 80093d2:	b16a      	cbz	r2, 80093f0 <strncmp+0x20>
 80093d4:	3901      	subs	r1, #1
 80093d6:	1884      	adds	r4, r0, r2
 80093d8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80093dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d103      	bne.n	80093ec <strncmp+0x1c>
 80093e4:	42a0      	cmp	r0, r4
 80093e6:	d001      	beq.n	80093ec <strncmp+0x1c>
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1f5      	bne.n	80093d8 <strncmp+0x8>
 80093ec:	1a98      	subs	r0, r3, r2
 80093ee:	bd10      	pop	{r4, pc}
 80093f0:	4610      	mov	r0, r2
 80093f2:	e7fc      	b.n	80093ee <strncmp+0x1e>

080093f4 <__ascii_wctomb>:
 80093f4:	4603      	mov	r3, r0
 80093f6:	4608      	mov	r0, r1
 80093f8:	b141      	cbz	r1, 800940c <__ascii_wctomb+0x18>
 80093fa:	2aff      	cmp	r2, #255	; 0xff
 80093fc:	d904      	bls.n	8009408 <__ascii_wctomb+0x14>
 80093fe:	228a      	movs	r2, #138	; 0x8a
 8009400:	f04f 30ff 	mov.w	r0, #4294967295
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	4770      	bx	lr
 8009408:	2001      	movs	r0, #1
 800940a:	700a      	strb	r2, [r1, #0]
 800940c:	4770      	bx	lr
	...

08009410 <__assert_func>:
 8009410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009412:	4614      	mov	r4, r2
 8009414:	461a      	mov	r2, r3
 8009416:	4b09      	ldr	r3, [pc, #36]	; (800943c <__assert_func+0x2c>)
 8009418:	4605      	mov	r5, r0
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68d8      	ldr	r0, [r3, #12]
 800941e:	b14c      	cbz	r4, 8009434 <__assert_func+0x24>
 8009420:	4b07      	ldr	r3, [pc, #28]	; (8009440 <__assert_func+0x30>)
 8009422:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009426:	9100      	str	r1, [sp, #0]
 8009428:	462b      	mov	r3, r5
 800942a:	4906      	ldr	r1, [pc, #24]	; (8009444 <__assert_func+0x34>)
 800942c:	f000 f80e 	bl	800944c <fiprintf>
 8009430:	f000 fae4 	bl	80099fc <abort>
 8009434:	4b04      	ldr	r3, [pc, #16]	; (8009448 <__assert_func+0x38>)
 8009436:	461c      	mov	r4, r3
 8009438:	e7f3      	b.n	8009422 <__assert_func+0x12>
 800943a:	bf00      	nop
 800943c:	2000000c 	.word	0x2000000c
 8009440:	0800c6df 	.word	0x0800c6df
 8009444:	0800c6ec 	.word	0x0800c6ec
 8009448:	0800c71a 	.word	0x0800c71a

0800944c <fiprintf>:
 800944c:	b40e      	push	{r1, r2, r3}
 800944e:	b503      	push	{r0, r1, lr}
 8009450:	4601      	mov	r1, r0
 8009452:	ab03      	add	r3, sp, #12
 8009454:	4805      	ldr	r0, [pc, #20]	; (800946c <fiprintf+0x20>)
 8009456:	f853 2b04 	ldr.w	r2, [r3], #4
 800945a:	6800      	ldr	r0, [r0, #0]
 800945c:	9301      	str	r3, [sp, #4]
 800945e:	f000 f8dd 	bl	800961c <_vfiprintf_r>
 8009462:	b002      	add	sp, #8
 8009464:	f85d eb04 	ldr.w	lr, [sp], #4
 8009468:	b003      	add	sp, #12
 800946a:	4770      	bx	lr
 800946c:	2000000c 	.word	0x2000000c

08009470 <malloc>:
 8009470:	4b02      	ldr	r3, [pc, #8]	; (800947c <malloc+0xc>)
 8009472:	4601      	mov	r1, r0
 8009474:	6818      	ldr	r0, [r3, #0]
 8009476:	f7ff bc49 	b.w	8008d0c <_malloc_r>
 800947a:	bf00      	nop
 800947c:	2000000c 	.word	0x2000000c

08009480 <memchr>:
 8009480:	4603      	mov	r3, r0
 8009482:	b510      	push	{r4, lr}
 8009484:	b2c9      	uxtb	r1, r1
 8009486:	4402      	add	r2, r0
 8009488:	4293      	cmp	r3, r2
 800948a:	4618      	mov	r0, r3
 800948c:	d101      	bne.n	8009492 <memchr+0x12>
 800948e:	2000      	movs	r0, #0
 8009490:	e003      	b.n	800949a <memchr+0x1a>
 8009492:	7804      	ldrb	r4, [r0, #0]
 8009494:	3301      	adds	r3, #1
 8009496:	428c      	cmp	r4, r1
 8009498:	d1f6      	bne.n	8009488 <memchr+0x8>
 800949a:	bd10      	pop	{r4, pc}

0800949c <memmove>:
 800949c:	4288      	cmp	r0, r1
 800949e:	b510      	push	{r4, lr}
 80094a0:	eb01 0402 	add.w	r4, r1, r2
 80094a4:	d902      	bls.n	80094ac <memmove+0x10>
 80094a6:	4284      	cmp	r4, r0
 80094a8:	4623      	mov	r3, r4
 80094aa:	d807      	bhi.n	80094bc <memmove+0x20>
 80094ac:	1e43      	subs	r3, r0, #1
 80094ae:	42a1      	cmp	r1, r4
 80094b0:	d008      	beq.n	80094c4 <memmove+0x28>
 80094b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094ba:	e7f8      	b.n	80094ae <memmove+0x12>
 80094bc:	4601      	mov	r1, r0
 80094be:	4402      	add	r2, r0
 80094c0:	428a      	cmp	r2, r1
 80094c2:	d100      	bne.n	80094c6 <memmove+0x2a>
 80094c4:	bd10      	pop	{r4, pc}
 80094c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094ce:	e7f7      	b.n	80094c0 <memmove+0x24>

080094d0 <__malloc_lock>:
 80094d0:	4801      	ldr	r0, [pc, #4]	; (80094d8 <__malloc_lock+0x8>)
 80094d2:	f000 bc53 	b.w	8009d7c <__retarget_lock_acquire_recursive>
 80094d6:	bf00      	nop
 80094d8:	200004d4 	.word	0x200004d4

080094dc <__malloc_unlock>:
 80094dc:	4801      	ldr	r0, [pc, #4]	; (80094e4 <__malloc_unlock+0x8>)
 80094de:	f000 bc4e 	b.w	8009d7e <__retarget_lock_release_recursive>
 80094e2:	bf00      	nop
 80094e4:	200004d4 	.word	0x200004d4

080094e8 <_free_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	4605      	mov	r5, r0
 80094ec:	2900      	cmp	r1, #0
 80094ee:	d043      	beq.n	8009578 <_free_r+0x90>
 80094f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094f4:	1f0c      	subs	r4, r1, #4
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	bfb8      	it	lt
 80094fa:	18e4      	addlt	r4, r4, r3
 80094fc:	f7ff ffe8 	bl	80094d0 <__malloc_lock>
 8009500:	4a1e      	ldr	r2, [pc, #120]	; (800957c <_free_r+0x94>)
 8009502:	6813      	ldr	r3, [r2, #0]
 8009504:	4610      	mov	r0, r2
 8009506:	b933      	cbnz	r3, 8009516 <_free_r+0x2e>
 8009508:	6063      	str	r3, [r4, #4]
 800950a:	6014      	str	r4, [r2, #0]
 800950c:	4628      	mov	r0, r5
 800950e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009512:	f7ff bfe3 	b.w	80094dc <__malloc_unlock>
 8009516:	42a3      	cmp	r3, r4
 8009518:	d90a      	bls.n	8009530 <_free_r+0x48>
 800951a:	6821      	ldr	r1, [r4, #0]
 800951c:	1862      	adds	r2, r4, r1
 800951e:	4293      	cmp	r3, r2
 8009520:	bf01      	itttt	eq
 8009522:	681a      	ldreq	r2, [r3, #0]
 8009524:	685b      	ldreq	r3, [r3, #4]
 8009526:	1852      	addeq	r2, r2, r1
 8009528:	6022      	streq	r2, [r4, #0]
 800952a:	6063      	str	r3, [r4, #4]
 800952c:	6004      	str	r4, [r0, #0]
 800952e:	e7ed      	b.n	800950c <_free_r+0x24>
 8009530:	461a      	mov	r2, r3
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	b10b      	cbz	r3, 800953a <_free_r+0x52>
 8009536:	42a3      	cmp	r3, r4
 8009538:	d9fa      	bls.n	8009530 <_free_r+0x48>
 800953a:	6811      	ldr	r1, [r2, #0]
 800953c:	1850      	adds	r0, r2, r1
 800953e:	42a0      	cmp	r0, r4
 8009540:	d10b      	bne.n	800955a <_free_r+0x72>
 8009542:	6820      	ldr	r0, [r4, #0]
 8009544:	4401      	add	r1, r0
 8009546:	1850      	adds	r0, r2, r1
 8009548:	4283      	cmp	r3, r0
 800954a:	6011      	str	r1, [r2, #0]
 800954c:	d1de      	bne.n	800950c <_free_r+0x24>
 800954e:	6818      	ldr	r0, [r3, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	4401      	add	r1, r0
 8009554:	6011      	str	r1, [r2, #0]
 8009556:	6053      	str	r3, [r2, #4]
 8009558:	e7d8      	b.n	800950c <_free_r+0x24>
 800955a:	d902      	bls.n	8009562 <_free_r+0x7a>
 800955c:	230c      	movs	r3, #12
 800955e:	602b      	str	r3, [r5, #0]
 8009560:	e7d4      	b.n	800950c <_free_r+0x24>
 8009562:	6820      	ldr	r0, [r4, #0]
 8009564:	1821      	adds	r1, r4, r0
 8009566:	428b      	cmp	r3, r1
 8009568:	bf01      	itttt	eq
 800956a:	6819      	ldreq	r1, [r3, #0]
 800956c:	685b      	ldreq	r3, [r3, #4]
 800956e:	1809      	addeq	r1, r1, r0
 8009570:	6021      	streq	r1, [r4, #0]
 8009572:	6063      	str	r3, [r4, #4]
 8009574:	6054      	str	r4, [r2, #4]
 8009576:	e7c9      	b.n	800950c <_free_r+0x24>
 8009578:	bd38      	pop	{r3, r4, r5, pc}
 800957a:	bf00      	nop
 800957c:	20000270 	.word	0x20000270

08009580 <_realloc_r>:
 8009580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009582:	4607      	mov	r7, r0
 8009584:	4614      	mov	r4, r2
 8009586:	460e      	mov	r6, r1
 8009588:	b921      	cbnz	r1, 8009594 <_realloc_r+0x14>
 800958a:	4611      	mov	r1, r2
 800958c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009590:	f7ff bbbc 	b.w	8008d0c <_malloc_r>
 8009594:	b922      	cbnz	r2, 80095a0 <_realloc_r+0x20>
 8009596:	f7ff ffa7 	bl	80094e8 <_free_r>
 800959a:	4625      	mov	r5, r4
 800959c:	4628      	mov	r0, r5
 800959e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095a0:	f000 fc52 	bl	8009e48 <_malloc_usable_size_r>
 80095a4:	42a0      	cmp	r0, r4
 80095a6:	d20f      	bcs.n	80095c8 <_realloc_r+0x48>
 80095a8:	4621      	mov	r1, r4
 80095aa:	4638      	mov	r0, r7
 80095ac:	f7ff fbae 	bl	8008d0c <_malloc_r>
 80095b0:	4605      	mov	r5, r0
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d0f2      	beq.n	800959c <_realloc_r+0x1c>
 80095b6:	4631      	mov	r1, r6
 80095b8:	4622      	mov	r2, r4
 80095ba:	f7fd fa4d 	bl	8006a58 <memcpy>
 80095be:	4631      	mov	r1, r6
 80095c0:	4638      	mov	r0, r7
 80095c2:	f7ff ff91 	bl	80094e8 <_free_r>
 80095c6:	e7e9      	b.n	800959c <_realloc_r+0x1c>
 80095c8:	4635      	mov	r5, r6
 80095ca:	e7e7      	b.n	800959c <_realloc_r+0x1c>

080095cc <__sfputc_r>:
 80095cc:	6893      	ldr	r3, [r2, #8]
 80095ce:	b410      	push	{r4}
 80095d0:	3b01      	subs	r3, #1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	6093      	str	r3, [r2, #8]
 80095d6:	da07      	bge.n	80095e8 <__sfputc_r+0x1c>
 80095d8:	6994      	ldr	r4, [r2, #24]
 80095da:	42a3      	cmp	r3, r4
 80095dc:	db01      	blt.n	80095e2 <__sfputc_r+0x16>
 80095de:	290a      	cmp	r1, #10
 80095e0:	d102      	bne.n	80095e8 <__sfputc_r+0x1c>
 80095e2:	bc10      	pop	{r4}
 80095e4:	f000 b94a 	b.w	800987c <__swbuf_r>
 80095e8:	6813      	ldr	r3, [r2, #0]
 80095ea:	1c58      	adds	r0, r3, #1
 80095ec:	6010      	str	r0, [r2, #0]
 80095ee:	7019      	strb	r1, [r3, #0]
 80095f0:	4608      	mov	r0, r1
 80095f2:	bc10      	pop	{r4}
 80095f4:	4770      	bx	lr

080095f6 <__sfputs_r>:
 80095f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f8:	4606      	mov	r6, r0
 80095fa:	460f      	mov	r7, r1
 80095fc:	4614      	mov	r4, r2
 80095fe:	18d5      	adds	r5, r2, r3
 8009600:	42ac      	cmp	r4, r5
 8009602:	d101      	bne.n	8009608 <__sfputs_r+0x12>
 8009604:	2000      	movs	r0, #0
 8009606:	e007      	b.n	8009618 <__sfputs_r+0x22>
 8009608:	463a      	mov	r2, r7
 800960a:	4630      	mov	r0, r6
 800960c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009610:	f7ff ffdc 	bl	80095cc <__sfputc_r>
 8009614:	1c43      	adds	r3, r0, #1
 8009616:	d1f3      	bne.n	8009600 <__sfputs_r+0xa>
 8009618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800961c <_vfiprintf_r>:
 800961c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009620:	460d      	mov	r5, r1
 8009622:	4614      	mov	r4, r2
 8009624:	4698      	mov	r8, r3
 8009626:	4606      	mov	r6, r0
 8009628:	b09d      	sub	sp, #116	; 0x74
 800962a:	b118      	cbz	r0, 8009634 <_vfiprintf_r+0x18>
 800962c:	6983      	ldr	r3, [r0, #24]
 800962e:	b90b      	cbnz	r3, 8009634 <_vfiprintf_r+0x18>
 8009630:	f000 fb06 	bl	8009c40 <__sinit>
 8009634:	4b89      	ldr	r3, [pc, #548]	; (800985c <_vfiprintf_r+0x240>)
 8009636:	429d      	cmp	r5, r3
 8009638:	d11b      	bne.n	8009672 <_vfiprintf_r+0x56>
 800963a:	6875      	ldr	r5, [r6, #4]
 800963c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800963e:	07d9      	lsls	r1, r3, #31
 8009640:	d405      	bmi.n	800964e <_vfiprintf_r+0x32>
 8009642:	89ab      	ldrh	r3, [r5, #12]
 8009644:	059a      	lsls	r2, r3, #22
 8009646:	d402      	bmi.n	800964e <_vfiprintf_r+0x32>
 8009648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800964a:	f000 fb97 	bl	8009d7c <__retarget_lock_acquire_recursive>
 800964e:	89ab      	ldrh	r3, [r5, #12]
 8009650:	071b      	lsls	r3, r3, #28
 8009652:	d501      	bpl.n	8009658 <_vfiprintf_r+0x3c>
 8009654:	692b      	ldr	r3, [r5, #16]
 8009656:	b9eb      	cbnz	r3, 8009694 <_vfiprintf_r+0x78>
 8009658:	4629      	mov	r1, r5
 800965a:	4630      	mov	r0, r6
 800965c:	f000 f960 	bl	8009920 <__swsetup_r>
 8009660:	b1c0      	cbz	r0, 8009694 <_vfiprintf_r+0x78>
 8009662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009664:	07dc      	lsls	r4, r3, #31
 8009666:	d50e      	bpl.n	8009686 <_vfiprintf_r+0x6a>
 8009668:	f04f 30ff 	mov.w	r0, #4294967295
 800966c:	b01d      	add	sp, #116	; 0x74
 800966e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009672:	4b7b      	ldr	r3, [pc, #492]	; (8009860 <_vfiprintf_r+0x244>)
 8009674:	429d      	cmp	r5, r3
 8009676:	d101      	bne.n	800967c <_vfiprintf_r+0x60>
 8009678:	68b5      	ldr	r5, [r6, #8]
 800967a:	e7df      	b.n	800963c <_vfiprintf_r+0x20>
 800967c:	4b79      	ldr	r3, [pc, #484]	; (8009864 <_vfiprintf_r+0x248>)
 800967e:	429d      	cmp	r5, r3
 8009680:	bf08      	it	eq
 8009682:	68f5      	ldreq	r5, [r6, #12]
 8009684:	e7da      	b.n	800963c <_vfiprintf_r+0x20>
 8009686:	89ab      	ldrh	r3, [r5, #12]
 8009688:	0598      	lsls	r0, r3, #22
 800968a:	d4ed      	bmi.n	8009668 <_vfiprintf_r+0x4c>
 800968c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800968e:	f000 fb76 	bl	8009d7e <__retarget_lock_release_recursive>
 8009692:	e7e9      	b.n	8009668 <_vfiprintf_r+0x4c>
 8009694:	2300      	movs	r3, #0
 8009696:	9309      	str	r3, [sp, #36]	; 0x24
 8009698:	2320      	movs	r3, #32
 800969a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800969e:	2330      	movs	r3, #48	; 0x30
 80096a0:	f04f 0901 	mov.w	r9, #1
 80096a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80096a8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009868 <_vfiprintf_r+0x24c>
 80096ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096b0:	4623      	mov	r3, r4
 80096b2:	469a      	mov	sl, r3
 80096b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096b8:	b10a      	cbz	r2, 80096be <_vfiprintf_r+0xa2>
 80096ba:	2a25      	cmp	r2, #37	; 0x25
 80096bc:	d1f9      	bne.n	80096b2 <_vfiprintf_r+0x96>
 80096be:	ebba 0b04 	subs.w	fp, sl, r4
 80096c2:	d00b      	beq.n	80096dc <_vfiprintf_r+0xc0>
 80096c4:	465b      	mov	r3, fp
 80096c6:	4622      	mov	r2, r4
 80096c8:	4629      	mov	r1, r5
 80096ca:	4630      	mov	r0, r6
 80096cc:	f7ff ff93 	bl	80095f6 <__sfputs_r>
 80096d0:	3001      	adds	r0, #1
 80096d2:	f000 80aa 	beq.w	800982a <_vfiprintf_r+0x20e>
 80096d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096d8:	445a      	add	r2, fp
 80096da:	9209      	str	r2, [sp, #36]	; 0x24
 80096dc:	f89a 3000 	ldrb.w	r3, [sl]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 80a2 	beq.w	800982a <_vfiprintf_r+0x20e>
 80096e6:	2300      	movs	r3, #0
 80096e8:	f04f 32ff 	mov.w	r2, #4294967295
 80096ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096f0:	f10a 0a01 	add.w	sl, sl, #1
 80096f4:	9304      	str	r3, [sp, #16]
 80096f6:	9307      	str	r3, [sp, #28]
 80096f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096fc:	931a      	str	r3, [sp, #104]	; 0x68
 80096fe:	4654      	mov	r4, sl
 8009700:	2205      	movs	r2, #5
 8009702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009706:	4858      	ldr	r0, [pc, #352]	; (8009868 <_vfiprintf_r+0x24c>)
 8009708:	f7ff feba 	bl	8009480 <memchr>
 800970c:	9a04      	ldr	r2, [sp, #16]
 800970e:	b9d8      	cbnz	r0, 8009748 <_vfiprintf_r+0x12c>
 8009710:	06d1      	lsls	r1, r2, #27
 8009712:	bf44      	itt	mi
 8009714:	2320      	movmi	r3, #32
 8009716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800971a:	0713      	lsls	r3, r2, #28
 800971c:	bf44      	itt	mi
 800971e:	232b      	movmi	r3, #43	; 0x2b
 8009720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009724:	f89a 3000 	ldrb.w	r3, [sl]
 8009728:	2b2a      	cmp	r3, #42	; 0x2a
 800972a:	d015      	beq.n	8009758 <_vfiprintf_r+0x13c>
 800972c:	4654      	mov	r4, sl
 800972e:	2000      	movs	r0, #0
 8009730:	f04f 0c0a 	mov.w	ip, #10
 8009734:	9a07      	ldr	r2, [sp, #28]
 8009736:	4621      	mov	r1, r4
 8009738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800973c:	3b30      	subs	r3, #48	; 0x30
 800973e:	2b09      	cmp	r3, #9
 8009740:	d94e      	bls.n	80097e0 <_vfiprintf_r+0x1c4>
 8009742:	b1b0      	cbz	r0, 8009772 <_vfiprintf_r+0x156>
 8009744:	9207      	str	r2, [sp, #28]
 8009746:	e014      	b.n	8009772 <_vfiprintf_r+0x156>
 8009748:	eba0 0308 	sub.w	r3, r0, r8
 800974c:	fa09 f303 	lsl.w	r3, r9, r3
 8009750:	4313      	orrs	r3, r2
 8009752:	46a2      	mov	sl, r4
 8009754:	9304      	str	r3, [sp, #16]
 8009756:	e7d2      	b.n	80096fe <_vfiprintf_r+0xe2>
 8009758:	9b03      	ldr	r3, [sp, #12]
 800975a:	1d19      	adds	r1, r3, #4
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	9103      	str	r1, [sp, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	bfbb      	ittet	lt
 8009764:	425b      	neglt	r3, r3
 8009766:	f042 0202 	orrlt.w	r2, r2, #2
 800976a:	9307      	strge	r3, [sp, #28]
 800976c:	9307      	strlt	r3, [sp, #28]
 800976e:	bfb8      	it	lt
 8009770:	9204      	strlt	r2, [sp, #16]
 8009772:	7823      	ldrb	r3, [r4, #0]
 8009774:	2b2e      	cmp	r3, #46	; 0x2e
 8009776:	d10c      	bne.n	8009792 <_vfiprintf_r+0x176>
 8009778:	7863      	ldrb	r3, [r4, #1]
 800977a:	2b2a      	cmp	r3, #42	; 0x2a
 800977c:	d135      	bne.n	80097ea <_vfiprintf_r+0x1ce>
 800977e:	9b03      	ldr	r3, [sp, #12]
 8009780:	3402      	adds	r4, #2
 8009782:	1d1a      	adds	r2, r3, #4
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	9203      	str	r2, [sp, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	bfb8      	it	lt
 800978c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009790:	9305      	str	r3, [sp, #20]
 8009792:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009878 <_vfiprintf_r+0x25c>
 8009796:	2203      	movs	r2, #3
 8009798:	4650      	mov	r0, sl
 800979a:	7821      	ldrb	r1, [r4, #0]
 800979c:	f7ff fe70 	bl	8009480 <memchr>
 80097a0:	b140      	cbz	r0, 80097b4 <_vfiprintf_r+0x198>
 80097a2:	2340      	movs	r3, #64	; 0x40
 80097a4:	eba0 000a 	sub.w	r0, r0, sl
 80097a8:	fa03 f000 	lsl.w	r0, r3, r0
 80097ac:	9b04      	ldr	r3, [sp, #16]
 80097ae:	3401      	adds	r4, #1
 80097b0:	4303      	orrs	r3, r0
 80097b2:	9304      	str	r3, [sp, #16]
 80097b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097b8:	2206      	movs	r2, #6
 80097ba:	482c      	ldr	r0, [pc, #176]	; (800986c <_vfiprintf_r+0x250>)
 80097bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097c0:	f7ff fe5e 	bl	8009480 <memchr>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d03f      	beq.n	8009848 <_vfiprintf_r+0x22c>
 80097c8:	4b29      	ldr	r3, [pc, #164]	; (8009870 <_vfiprintf_r+0x254>)
 80097ca:	bb1b      	cbnz	r3, 8009814 <_vfiprintf_r+0x1f8>
 80097cc:	9b03      	ldr	r3, [sp, #12]
 80097ce:	3307      	adds	r3, #7
 80097d0:	f023 0307 	bic.w	r3, r3, #7
 80097d4:	3308      	adds	r3, #8
 80097d6:	9303      	str	r3, [sp, #12]
 80097d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097da:	443b      	add	r3, r7
 80097dc:	9309      	str	r3, [sp, #36]	; 0x24
 80097de:	e767      	b.n	80096b0 <_vfiprintf_r+0x94>
 80097e0:	460c      	mov	r4, r1
 80097e2:	2001      	movs	r0, #1
 80097e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80097e8:	e7a5      	b.n	8009736 <_vfiprintf_r+0x11a>
 80097ea:	2300      	movs	r3, #0
 80097ec:	f04f 0c0a 	mov.w	ip, #10
 80097f0:	4619      	mov	r1, r3
 80097f2:	3401      	adds	r4, #1
 80097f4:	9305      	str	r3, [sp, #20]
 80097f6:	4620      	mov	r0, r4
 80097f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097fc:	3a30      	subs	r2, #48	; 0x30
 80097fe:	2a09      	cmp	r2, #9
 8009800:	d903      	bls.n	800980a <_vfiprintf_r+0x1ee>
 8009802:	2b00      	cmp	r3, #0
 8009804:	d0c5      	beq.n	8009792 <_vfiprintf_r+0x176>
 8009806:	9105      	str	r1, [sp, #20]
 8009808:	e7c3      	b.n	8009792 <_vfiprintf_r+0x176>
 800980a:	4604      	mov	r4, r0
 800980c:	2301      	movs	r3, #1
 800980e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009812:	e7f0      	b.n	80097f6 <_vfiprintf_r+0x1da>
 8009814:	ab03      	add	r3, sp, #12
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	462a      	mov	r2, r5
 800981a:	4630      	mov	r0, r6
 800981c:	4b15      	ldr	r3, [pc, #84]	; (8009874 <_vfiprintf_r+0x258>)
 800981e:	a904      	add	r1, sp, #16
 8009820:	f3af 8000 	nop.w
 8009824:	4607      	mov	r7, r0
 8009826:	1c78      	adds	r0, r7, #1
 8009828:	d1d6      	bne.n	80097d8 <_vfiprintf_r+0x1bc>
 800982a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800982c:	07d9      	lsls	r1, r3, #31
 800982e:	d405      	bmi.n	800983c <_vfiprintf_r+0x220>
 8009830:	89ab      	ldrh	r3, [r5, #12]
 8009832:	059a      	lsls	r2, r3, #22
 8009834:	d402      	bmi.n	800983c <_vfiprintf_r+0x220>
 8009836:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009838:	f000 faa1 	bl	8009d7e <__retarget_lock_release_recursive>
 800983c:	89ab      	ldrh	r3, [r5, #12]
 800983e:	065b      	lsls	r3, r3, #25
 8009840:	f53f af12 	bmi.w	8009668 <_vfiprintf_r+0x4c>
 8009844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009846:	e711      	b.n	800966c <_vfiprintf_r+0x50>
 8009848:	ab03      	add	r3, sp, #12
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	462a      	mov	r2, r5
 800984e:	4630      	mov	r0, r6
 8009850:	4b08      	ldr	r3, [pc, #32]	; (8009874 <_vfiprintf_r+0x258>)
 8009852:	a904      	add	r1, sp, #16
 8009854:	f7ff fc80 	bl	8009158 <_printf_i>
 8009858:	e7e4      	b.n	8009824 <_vfiprintf_r+0x208>
 800985a:	bf00      	nop
 800985c:	0800c73c 	.word	0x0800c73c
 8009860:	0800c75c 	.word	0x0800c75c
 8009864:	0800c71c 	.word	0x0800c71c
 8009868:	0800c6ac 	.word	0x0800c6ac
 800986c:	0800c6b6 	.word	0x0800c6b6
 8009870:	00000000 	.word	0x00000000
 8009874:	080095f7 	.word	0x080095f7
 8009878:	0800c6b2 	.word	0x0800c6b2

0800987c <__swbuf_r>:
 800987c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987e:	460e      	mov	r6, r1
 8009880:	4614      	mov	r4, r2
 8009882:	4605      	mov	r5, r0
 8009884:	b118      	cbz	r0, 800988e <__swbuf_r+0x12>
 8009886:	6983      	ldr	r3, [r0, #24]
 8009888:	b90b      	cbnz	r3, 800988e <__swbuf_r+0x12>
 800988a:	f000 f9d9 	bl	8009c40 <__sinit>
 800988e:	4b21      	ldr	r3, [pc, #132]	; (8009914 <__swbuf_r+0x98>)
 8009890:	429c      	cmp	r4, r3
 8009892:	d12b      	bne.n	80098ec <__swbuf_r+0x70>
 8009894:	686c      	ldr	r4, [r5, #4]
 8009896:	69a3      	ldr	r3, [r4, #24]
 8009898:	60a3      	str	r3, [r4, #8]
 800989a:	89a3      	ldrh	r3, [r4, #12]
 800989c:	071a      	lsls	r2, r3, #28
 800989e:	d52f      	bpl.n	8009900 <__swbuf_r+0x84>
 80098a0:	6923      	ldr	r3, [r4, #16]
 80098a2:	b36b      	cbz	r3, 8009900 <__swbuf_r+0x84>
 80098a4:	6923      	ldr	r3, [r4, #16]
 80098a6:	6820      	ldr	r0, [r4, #0]
 80098a8:	b2f6      	uxtb	r6, r6
 80098aa:	1ac0      	subs	r0, r0, r3
 80098ac:	6963      	ldr	r3, [r4, #20]
 80098ae:	4637      	mov	r7, r6
 80098b0:	4283      	cmp	r3, r0
 80098b2:	dc04      	bgt.n	80098be <__swbuf_r+0x42>
 80098b4:	4621      	mov	r1, r4
 80098b6:	4628      	mov	r0, r5
 80098b8:	f000 f92e 	bl	8009b18 <_fflush_r>
 80098bc:	bb30      	cbnz	r0, 800990c <__swbuf_r+0x90>
 80098be:	68a3      	ldr	r3, [r4, #8]
 80098c0:	3001      	adds	r0, #1
 80098c2:	3b01      	subs	r3, #1
 80098c4:	60a3      	str	r3, [r4, #8]
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	1c5a      	adds	r2, r3, #1
 80098ca:	6022      	str	r2, [r4, #0]
 80098cc:	701e      	strb	r6, [r3, #0]
 80098ce:	6963      	ldr	r3, [r4, #20]
 80098d0:	4283      	cmp	r3, r0
 80098d2:	d004      	beq.n	80098de <__swbuf_r+0x62>
 80098d4:	89a3      	ldrh	r3, [r4, #12]
 80098d6:	07db      	lsls	r3, r3, #31
 80098d8:	d506      	bpl.n	80098e8 <__swbuf_r+0x6c>
 80098da:	2e0a      	cmp	r6, #10
 80098dc:	d104      	bne.n	80098e8 <__swbuf_r+0x6c>
 80098de:	4621      	mov	r1, r4
 80098e0:	4628      	mov	r0, r5
 80098e2:	f000 f919 	bl	8009b18 <_fflush_r>
 80098e6:	b988      	cbnz	r0, 800990c <__swbuf_r+0x90>
 80098e8:	4638      	mov	r0, r7
 80098ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098ec:	4b0a      	ldr	r3, [pc, #40]	; (8009918 <__swbuf_r+0x9c>)
 80098ee:	429c      	cmp	r4, r3
 80098f0:	d101      	bne.n	80098f6 <__swbuf_r+0x7a>
 80098f2:	68ac      	ldr	r4, [r5, #8]
 80098f4:	e7cf      	b.n	8009896 <__swbuf_r+0x1a>
 80098f6:	4b09      	ldr	r3, [pc, #36]	; (800991c <__swbuf_r+0xa0>)
 80098f8:	429c      	cmp	r4, r3
 80098fa:	bf08      	it	eq
 80098fc:	68ec      	ldreq	r4, [r5, #12]
 80098fe:	e7ca      	b.n	8009896 <__swbuf_r+0x1a>
 8009900:	4621      	mov	r1, r4
 8009902:	4628      	mov	r0, r5
 8009904:	f000 f80c 	bl	8009920 <__swsetup_r>
 8009908:	2800      	cmp	r0, #0
 800990a:	d0cb      	beq.n	80098a4 <__swbuf_r+0x28>
 800990c:	f04f 37ff 	mov.w	r7, #4294967295
 8009910:	e7ea      	b.n	80098e8 <__swbuf_r+0x6c>
 8009912:	bf00      	nop
 8009914:	0800c73c 	.word	0x0800c73c
 8009918:	0800c75c 	.word	0x0800c75c
 800991c:	0800c71c 	.word	0x0800c71c

08009920 <__swsetup_r>:
 8009920:	4b32      	ldr	r3, [pc, #200]	; (80099ec <__swsetup_r+0xcc>)
 8009922:	b570      	push	{r4, r5, r6, lr}
 8009924:	681d      	ldr	r5, [r3, #0]
 8009926:	4606      	mov	r6, r0
 8009928:	460c      	mov	r4, r1
 800992a:	b125      	cbz	r5, 8009936 <__swsetup_r+0x16>
 800992c:	69ab      	ldr	r3, [r5, #24]
 800992e:	b913      	cbnz	r3, 8009936 <__swsetup_r+0x16>
 8009930:	4628      	mov	r0, r5
 8009932:	f000 f985 	bl	8009c40 <__sinit>
 8009936:	4b2e      	ldr	r3, [pc, #184]	; (80099f0 <__swsetup_r+0xd0>)
 8009938:	429c      	cmp	r4, r3
 800993a:	d10f      	bne.n	800995c <__swsetup_r+0x3c>
 800993c:	686c      	ldr	r4, [r5, #4]
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009944:	0719      	lsls	r1, r3, #28
 8009946:	d42c      	bmi.n	80099a2 <__swsetup_r+0x82>
 8009948:	06dd      	lsls	r5, r3, #27
 800994a:	d411      	bmi.n	8009970 <__swsetup_r+0x50>
 800994c:	2309      	movs	r3, #9
 800994e:	6033      	str	r3, [r6, #0]
 8009950:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009954:	f04f 30ff 	mov.w	r0, #4294967295
 8009958:	81a3      	strh	r3, [r4, #12]
 800995a:	e03e      	b.n	80099da <__swsetup_r+0xba>
 800995c:	4b25      	ldr	r3, [pc, #148]	; (80099f4 <__swsetup_r+0xd4>)
 800995e:	429c      	cmp	r4, r3
 8009960:	d101      	bne.n	8009966 <__swsetup_r+0x46>
 8009962:	68ac      	ldr	r4, [r5, #8]
 8009964:	e7eb      	b.n	800993e <__swsetup_r+0x1e>
 8009966:	4b24      	ldr	r3, [pc, #144]	; (80099f8 <__swsetup_r+0xd8>)
 8009968:	429c      	cmp	r4, r3
 800996a:	bf08      	it	eq
 800996c:	68ec      	ldreq	r4, [r5, #12]
 800996e:	e7e6      	b.n	800993e <__swsetup_r+0x1e>
 8009970:	0758      	lsls	r0, r3, #29
 8009972:	d512      	bpl.n	800999a <__swsetup_r+0x7a>
 8009974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009976:	b141      	cbz	r1, 800998a <__swsetup_r+0x6a>
 8009978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800997c:	4299      	cmp	r1, r3
 800997e:	d002      	beq.n	8009986 <__swsetup_r+0x66>
 8009980:	4630      	mov	r0, r6
 8009982:	f7ff fdb1 	bl	80094e8 <_free_r>
 8009986:	2300      	movs	r3, #0
 8009988:	6363      	str	r3, [r4, #52]	; 0x34
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009990:	81a3      	strh	r3, [r4, #12]
 8009992:	2300      	movs	r3, #0
 8009994:	6063      	str	r3, [r4, #4]
 8009996:	6923      	ldr	r3, [r4, #16]
 8009998:	6023      	str	r3, [r4, #0]
 800999a:	89a3      	ldrh	r3, [r4, #12]
 800999c:	f043 0308 	orr.w	r3, r3, #8
 80099a0:	81a3      	strh	r3, [r4, #12]
 80099a2:	6923      	ldr	r3, [r4, #16]
 80099a4:	b94b      	cbnz	r3, 80099ba <__swsetup_r+0x9a>
 80099a6:	89a3      	ldrh	r3, [r4, #12]
 80099a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099b0:	d003      	beq.n	80099ba <__swsetup_r+0x9a>
 80099b2:	4621      	mov	r1, r4
 80099b4:	4630      	mov	r0, r6
 80099b6:	f000 fa07 	bl	8009dc8 <__smakebuf_r>
 80099ba:	89a0      	ldrh	r0, [r4, #12]
 80099bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099c0:	f010 0301 	ands.w	r3, r0, #1
 80099c4:	d00a      	beq.n	80099dc <__swsetup_r+0xbc>
 80099c6:	2300      	movs	r3, #0
 80099c8:	60a3      	str	r3, [r4, #8]
 80099ca:	6963      	ldr	r3, [r4, #20]
 80099cc:	425b      	negs	r3, r3
 80099ce:	61a3      	str	r3, [r4, #24]
 80099d0:	6923      	ldr	r3, [r4, #16]
 80099d2:	b943      	cbnz	r3, 80099e6 <__swsetup_r+0xc6>
 80099d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099d8:	d1ba      	bne.n	8009950 <__swsetup_r+0x30>
 80099da:	bd70      	pop	{r4, r5, r6, pc}
 80099dc:	0781      	lsls	r1, r0, #30
 80099de:	bf58      	it	pl
 80099e0:	6963      	ldrpl	r3, [r4, #20]
 80099e2:	60a3      	str	r3, [r4, #8]
 80099e4:	e7f4      	b.n	80099d0 <__swsetup_r+0xb0>
 80099e6:	2000      	movs	r0, #0
 80099e8:	e7f7      	b.n	80099da <__swsetup_r+0xba>
 80099ea:	bf00      	nop
 80099ec:	2000000c 	.word	0x2000000c
 80099f0:	0800c73c 	.word	0x0800c73c
 80099f4:	0800c75c 	.word	0x0800c75c
 80099f8:	0800c71c 	.word	0x0800c71c

080099fc <abort>:
 80099fc:	2006      	movs	r0, #6
 80099fe:	b508      	push	{r3, lr}
 8009a00:	f000 fa52 	bl	8009ea8 <raise>
 8009a04:	2001      	movs	r0, #1
 8009a06:	f7f8 fe64 	bl	80026d2 <_exit>
	...

08009a0c <__sflush_r>:
 8009a0c:	898a      	ldrh	r2, [r1, #12]
 8009a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a12:	4605      	mov	r5, r0
 8009a14:	0710      	lsls	r0, r2, #28
 8009a16:	460c      	mov	r4, r1
 8009a18:	d458      	bmi.n	8009acc <__sflush_r+0xc0>
 8009a1a:	684b      	ldr	r3, [r1, #4]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	dc05      	bgt.n	8009a2c <__sflush_r+0x20>
 8009a20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	dc02      	bgt.n	8009a2c <__sflush_r+0x20>
 8009a26:	2000      	movs	r0, #0
 8009a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a2e:	2e00      	cmp	r6, #0
 8009a30:	d0f9      	beq.n	8009a26 <__sflush_r+0x1a>
 8009a32:	2300      	movs	r3, #0
 8009a34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a38:	682f      	ldr	r7, [r5, #0]
 8009a3a:	602b      	str	r3, [r5, #0]
 8009a3c:	d032      	beq.n	8009aa4 <__sflush_r+0x98>
 8009a3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	075a      	lsls	r2, r3, #29
 8009a44:	d505      	bpl.n	8009a52 <__sflush_r+0x46>
 8009a46:	6863      	ldr	r3, [r4, #4]
 8009a48:	1ac0      	subs	r0, r0, r3
 8009a4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a4c:	b10b      	cbz	r3, 8009a52 <__sflush_r+0x46>
 8009a4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a50:	1ac0      	subs	r0, r0, r3
 8009a52:	2300      	movs	r3, #0
 8009a54:	4602      	mov	r2, r0
 8009a56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a58:	4628      	mov	r0, r5
 8009a5a:	6a21      	ldr	r1, [r4, #32]
 8009a5c:	47b0      	blx	r6
 8009a5e:	1c43      	adds	r3, r0, #1
 8009a60:	89a3      	ldrh	r3, [r4, #12]
 8009a62:	d106      	bne.n	8009a72 <__sflush_r+0x66>
 8009a64:	6829      	ldr	r1, [r5, #0]
 8009a66:	291d      	cmp	r1, #29
 8009a68:	d82c      	bhi.n	8009ac4 <__sflush_r+0xb8>
 8009a6a:	4a2a      	ldr	r2, [pc, #168]	; (8009b14 <__sflush_r+0x108>)
 8009a6c:	40ca      	lsrs	r2, r1
 8009a6e:	07d6      	lsls	r6, r2, #31
 8009a70:	d528      	bpl.n	8009ac4 <__sflush_r+0xb8>
 8009a72:	2200      	movs	r2, #0
 8009a74:	6062      	str	r2, [r4, #4]
 8009a76:	6922      	ldr	r2, [r4, #16]
 8009a78:	04d9      	lsls	r1, r3, #19
 8009a7a:	6022      	str	r2, [r4, #0]
 8009a7c:	d504      	bpl.n	8009a88 <__sflush_r+0x7c>
 8009a7e:	1c42      	adds	r2, r0, #1
 8009a80:	d101      	bne.n	8009a86 <__sflush_r+0x7a>
 8009a82:	682b      	ldr	r3, [r5, #0]
 8009a84:	b903      	cbnz	r3, 8009a88 <__sflush_r+0x7c>
 8009a86:	6560      	str	r0, [r4, #84]	; 0x54
 8009a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a8a:	602f      	str	r7, [r5, #0]
 8009a8c:	2900      	cmp	r1, #0
 8009a8e:	d0ca      	beq.n	8009a26 <__sflush_r+0x1a>
 8009a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a94:	4299      	cmp	r1, r3
 8009a96:	d002      	beq.n	8009a9e <__sflush_r+0x92>
 8009a98:	4628      	mov	r0, r5
 8009a9a:	f7ff fd25 	bl	80094e8 <_free_r>
 8009a9e:	2000      	movs	r0, #0
 8009aa0:	6360      	str	r0, [r4, #52]	; 0x34
 8009aa2:	e7c1      	b.n	8009a28 <__sflush_r+0x1c>
 8009aa4:	6a21      	ldr	r1, [r4, #32]
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	47b0      	blx	r6
 8009aac:	1c41      	adds	r1, r0, #1
 8009aae:	d1c7      	bne.n	8009a40 <__sflush_r+0x34>
 8009ab0:	682b      	ldr	r3, [r5, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d0c4      	beq.n	8009a40 <__sflush_r+0x34>
 8009ab6:	2b1d      	cmp	r3, #29
 8009ab8:	d001      	beq.n	8009abe <__sflush_r+0xb2>
 8009aba:	2b16      	cmp	r3, #22
 8009abc:	d101      	bne.n	8009ac2 <__sflush_r+0xb6>
 8009abe:	602f      	str	r7, [r5, #0]
 8009ac0:	e7b1      	b.n	8009a26 <__sflush_r+0x1a>
 8009ac2:	89a3      	ldrh	r3, [r4, #12]
 8009ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ac8:	81a3      	strh	r3, [r4, #12]
 8009aca:	e7ad      	b.n	8009a28 <__sflush_r+0x1c>
 8009acc:	690f      	ldr	r7, [r1, #16]
 8009ace:	2f00      	cmp	r7, #0
 8009ad0:	d0a9      	beq.n	8009a26 <__sflush_r+0x1a>
 8009ad2:	0793      	lsls	r3, r2, #30
 8009ad4:	bf18      	it	ne
 8009ad6:	2300      	movne	r3, #0
 8009ad8:	680e      	ldr	r6, [r1, #0]
 8009ada:	bf08      	it	eq
 8009adc:	694b      	ldreq	r3, [r1, #20]
 8009ade:	eba6 0807 	sub.w	r8, r6, r7
 8009ae2:	600f      	str	r7, [r1, #0]
 8009ae4:	608b      	str	r3, [r1, #8]
 8009ae6:	f1b8 0f00 	cmp.w	r8, #0
 8009aea:	dd9c      	ble.n	8009a26 <__sflush_r+0x1a>
 8009aec:	4643      	mov	r3, r8
 8009aee:	463a      	mov	r2, r7
 8009af0:	4628      	mov	r0, r5
 8009af2:	6a21      	ldr	r1, [r4, #32]
 8009af4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009af6:	47b0      	blx	r6
 8009af8:	2800      	cmp	r0, #0
 8009afa:	dc06      	bgt.n	8009b0a <__sflush_r+0xfe>
 8009afc:	89a3      	ldrh	r3, [r4, #12]
 8009afe:	f04f 30ff 	mov.w	r0, #4294967295
 8009b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b06:	81a3      	strh	r3, [r4, #12]
 8009b08:	e78e      	b.n	8009a28 <__sflush_r+0x1c>
 8009b0a:	4407      	add	r7, r0
 8009b0c:	eba8 0800 	sub.w	r8, r8, r0
 8009b10:	e7e9      	b.n	8009ae6 <__sflush_r+0xda>
 8009b12:	bf00      	nop
 8009b14:	20400001 	.word	0x20400001

08009b18 <_fflush_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	690b      	ldr	r3, [r1, #16]
 8009b1c:	4605      	mov	r5, r0
 8009b1e:	460c      	mov	r4, r1
 8009b20:	b913      	cbnz	r3, 8009b28 <_fflush_r+0x10>
 8009b22:	2500      	movs	r5, #0
 8009b24:	4628      	mov	r0, r5
 8009b26:	bd38      	pop	{r3, r4, r5, pc}
 8009b28:	b118      	cbz	r0, 8009b32 <_fflush_r+0x1a>
 8009b2a:	6983      	ldr	r3, [r0, #24]
 8009b2c:	b90b      	cbnz	r3, 8009b32 <_fflush_r+0x1a>
 8009b2e:	f000 f887 	bl	8009c40 <__sinit>
 8009b32:	4b14      	ldr	r3, [pc, #80]	; (8009b84 <_fflush_r+0x6c>)
 8009b34:	429c      	cmp	r4, r3
 8009b36:	d11b      	bne.n	8009b70 <_fflush_r+0x58>
 8009b38:	686c      	ldr	r4, [r5, #4]
 8009b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d0ef      	beq.n	8009b22 <_fflush_r+0xa>
 8009b42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b44:	07d0      	lsls	r0, r2, #31
 8009b46:	d404      	bmi.n	8009b52 <_fflush_r+0x3a>
 8009b48:	0599      	lsls	r1, r3, #22
 8009b4a:	d402      	bmi.n	8009b52 <_fflush_r+0x3a>
 8009b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b4e:	f000 f915 	bl	8009d7c <__retarget_lock_acquire_recursive>
 8009b52:	4628      	mov	r0, r5
 8009b54:	4621      	mov	r1, r4
 8009b56:	f7ff ff59 	bl	8009a0c <__sflush_r>
 8009b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	07da      	lsls	r2, r3, #31
 8009b60:	d4e0      	bmi.n	8009b24 <_fflush_r+0xc>
 8009b62:	89a3      	ldrh	r3, [r4, #12]
 8009b64:	059b      	lsls	r3, r3, #22
 8009b66:	d4dd      	bmi.n	8009b24 <_fflush_r+0xc>
 8009b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b6a:	f000 f908 	bl	8009d7e <__retarget_lock_release_recursive>
 8009b6e:	e7d9      	b.n	8009b24 <_fflush_r+0xc>
 8009b70:	4b05      	ldr	r3, [pc, #20]	; (8009b88 <_fflush_r+0x70>)
 8009b72:	429c      	cmp	r4, r3
 8009b74:	d101      	bne.n	8009b7a <_fflush_r+0x62>
 8009b76:	68ac      	ldr	r4, [r5, #8]
 8009b78:	e7df      	b.n	8009b3a <_fflush_r+0x22>
 8009b7a:	4b04      	ldr	r3, [pc, #16]	; (8009b8c <_fflush_r+0x74>)
 8009b7c:	429c      	cmp	r4, r3
 8009b7e:	bf08      	it	eq
 8009b80:	68ec      	ldreq	r4, [r5, #12]
 8009b82:	e7da      	b.n	8009b3a <_fflush_r+0x22>
 8009b84:	0800c73c 	.word	0x0800c73c
 8009b88:	0800c75c 	.word	0x0800c75c
 8009b8c:	0800c71c 	.word	0x0800c71c

08009b90 <std>:
 8009b90:	2300      	movs	r3, #0
 8009b92:	b510      	push	{r4, lr}
 8009b94:	4604      	mov	r4, r0
 8009b96:	e9c0 3300 	strd	r3, r3, [r0]
 8009b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b9e:	6083      	str	r3, [r0, #8]
 8009ba0:	8181      	strh	r1, [r0, #12]
 8009ba2:	6643      	str	r3, [r0, #100]	; 0x64
 8009ba4:	81c2      	strh	r2, [r0, #14]
 8009ba6:	6183      	str	r3, [r0, #24]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	2208      	movs	r2, #8
 8009bac:	305c      	adds	r0, #92	; 0x5c
 8009bae:	f7fc ff61 	bl	8006a74 <memset>
 8009bb2:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <std+0x38>)
 8009bb4:	6224      	str	r4, [r4, #32]
 8009bb6:	6263      	str	r3, [r4, #36]	; 0x24
 8009bb8:	4b04      	ldr	r3, [pc, #16]	; (8009bcc <std+0x3c>)
 8009bba:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bbc:	4b04      	ldr	r3, [pc, #16]	; (8009bd0 <std+0x40>)
 8009bbe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bc0:	4b04      	ldr	r3, [pc, #16]	; (8009bd4 <std+0x44>)
 8009bc2:	6323      	str	r3, [r4, #48]	; 0x30
 8009bc4:	bd10      	pop	{r4, pc}
 8009bc6:	bf00      	nop
 8009bc8:	08009ee1 	.word	0x08009ee1
 8009bcc:	08009f03 	.word	0x08009f03
 8009bd0:	08009f3b 	.word	0x08009f3b
 8009bd4:	08009f5f 	.word	0x08009f5f

08009bd8 <_cleanup_r>:
 8009bd8:	4901      	ldr	r1, [pc, #4]	; (8009be0 <_cleanup_r+0x8>)
 8009bda:	f000 b8af 	b.w	8009d3c <_fwalk_reent>
 8009bde:	bf00      	nop
 8009be0:	08009b19 	.word	0x08009b19

08009be4 <__sfmoreglue>:
 8009be4:	b570      	push	{r4, r5, r6, lr}
 8009be6:	2568      	movs	r5, #104	; 0x68
 8009be8:	1e4a      	subs	r2, r1, #1
 8009bea:	4355      	muls	r5, r2
 8009bec:	460e      	mov	r6, r1
 8009bee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bf2:	f7ff f88b 	bl	8008d0c <_malloc_r>
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	b140      	cbz	r0, 8009c0c <__sfmoreglue+0x28>
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	e9c0 1600 	strd	r1, r6, [r0]
 8009c00:	300c      	adds	r0, #12
 8009c02:	60a0      	str	r0, [r4, #8]
 8009c04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c08:	f7fc ff34 	bl	8006a74 <memset>
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	bd70      	pop	{r4, r5, r6, pc}

08009c10 <__sfp_lock_acquire>:
 8009c10:	4801      	ldr	r0, [pc, #4]	; (8009c18 <__sfp_lock_acquire+0x8>)
 8009c12:	f000 b8b3 	b.w	8009d7c <__retarget_lock_acquire_recursive>
 8009c16:	bf00      	nop
 8009c18:	200004d8 	.word	0x200004d8

08009c1c <__sfp_lock_release>:
 8009c1c:	4801      	ldr	r0, [pc, #4]	; (8009c24 <__sfp_lock_release+0x8>)
 8009c1e:	f000 b8ae 	b.w	8009d7e <__retarget_lock_release_recursive>
 8009c22:	bf00      	nop
 8009c24:	200004d8 	.word	0x200004d8

08009c28 <__sinit_lock_acquire>:
 8009c28:	4801      	ldr	r0, [pc, #4]	; (8009c30 <__sinit_lock_acquire+0x8>)
 8009c2a:	f000 b8a7 	b.w	8009d7c <__retarget_lock_acquire_recursive>
 8009c2e:	bf00      	nop
 8009c30:	200004d3 	.word	0x200004d3

08009c34 <__sinit_lock_release>:
 8009c34:	4801      	ldr	r0, [pc, #4]	; (8009c3c <__sinit_lock_release+0x8>)
 8009c36:	f000 b8a2 	b.w	8009d7e <__retarget_lock_release_recursive>
 8009c3a:	bf00      	nop
 8009c3c:	200004d3 	.word	0x200004d3

08009c40 <__sinit>:
 8009c40:	b510      	push	{r4, lr}
 8009c42:	4604      	mov	r4, r0
 8009c44:	f7ff fff0 	bl	8009c28 <__sinit_lock_acquire>
 8009c48:	69a3      	ldr	r3, [r4, #24]
 8009c4a:	b11b      	cbz	r3, 8009c54 <__sinit+0x14>
 8009c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c50:	f7ff bff0 	b.w	8009c34 <__sinit_lock_release>
 8009c54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c58:	6523      	str	r3, [r4, #80]	; 0x50
 8009c5a:	4b13      	ldr	r3, [pc, #76]	; (8009ca8 <__sinit+0x68>)
 8009c5c:	4a13      	ldr	r2, [pc, #76]	; (8009cac <__sinit+0x6c>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c62:	42a3      	cmp	r3, r4
 8009c64:	bf08      	it	eq
 8009c66:	2301      	moveq	r3, #1
 8009c68:	4620      	mov	r0, r4
 8009c6a:	bf08      	it	eq
 8009c6c:	61a3      	streq	r3, [r4, #24]
 8009c6e:	f000 f81f 	bl	8009cb0 <__sfp>
 8009c72:	6060      	str	r0, [r4, #4]
 8009c74:	4620      	mov	r0, r4
 8009c76:	f000 f81b 	bl	8009cb0 <__sfp>
 8009c7a:	60a0      	str	r0, [r4, #8]
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f000 f817 	bl	8009cb0 <__sfp>
 8009c82:	2200      	movs	r2, #0
 8009c84:	2104      	movs	r1, #4
 8009c86:	60e0      	str	r0, [r4, #12]
 8009c88:	6860      	ldr	r0, [r4, #4]
 8009c8a:	f7ff ff81 	bl	8009b90 <std>
 8009c8e:	2201      	movs	r2, #1
 8009c90:	2109      	movs	r1, #9
 8009c92:	68a0      	ldr	r0, [r4, #8]
 8009c94:	f7ff ff7c 	bl	8009b90 <std>
 8009c98:	2202      	movs	r2, #2
 8009c9a:	2112      	movs	r1, #18
 8009c9c:	68e0      	ldr	r0, [r4, #12]
 8009c9e:	f7ff ff77 	bl	8009b90 <std>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	61a3      	str	r3, [r4, #24]
 8009ca6:	e7d1      	b.n	8009c4c <__sinit+0xc>
 8009ca8:	0800c33c 	.word	0x0800c33c
 8009cac:	08009bd9 	.word	0x08009bd9

08009cb0 <__sfp>:
 8009cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb2:	4607      	mov	r7, r0
 8009cb4:	f7ff ffac 	bl	8009c10 <__sfp_lock_acquire>
 8009cb8:	4b1e      	ldr	r3, [pc, #120]	; (8009d34 <__sfp+0x84>)
 8009cba:	681e      	ldr	r6, [r3, #0]
 8009cbc:	69b3      	ldr	r3, [r6, #24]
 8009cbe:	b913      	cbnz	r3, 8009cc6 <__sfp+0x16>
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	f7ff ffbd 	bl	8009c40 <__sinit>
 8009cc6:	3648      	adds	r6, #72	; 0x48
 8009cc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	d503      	bpl.n	8009cd8 <__sfp+0x28>
 8009cd0:	6833      	ldr	r3, [r6, #0]
 8009cd2:	b30b      	cbz	r3, 8009d18 <__sfp+0x68>
 8009cd4:	6836      	ldr	r6, [r6, #0]
 8009cd6:	e7f7      	b.n	8009cc8 <__sfp+0x18>
 8009cd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009cdc:	b9d5      	cbnz	r5, 8009d14 <__sfp+0x64>
 8009cde:	4b16      	ldr	r3, [pc, #88]	; (8009d38 <__sfp+0x88>)
 8009ce0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ce4:	60e3      	str	r3, [r4, #12]
 8009ce6:	6665      	str	r5, [r4, #100]	; 0x64
 8009ce8:	f000 f847 	bl	8009d7a <__retarget_lock_init_recursive>
 8009cec:	f7ff ff96 	bl	8009c1c <__sfp_lock_release>
 8009cf0:	2208      	movs	r2, #8
 8009cf2:	4629      	mov	r1, r5
 8009cf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009cf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009cfc:	6025      	str	r5, [r4, #0]
 8009cfe:	61a5      	str	r5, [r4, #24]
 8009d00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d04:	f7fc feb6 	bl	8006a74 <memset>
 8009d08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d10:	4620      	mov	r0, r4
 8009d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d14:	3468      	adds	r4, #104	; 0x68
 8009d16:	e7d9      	b.n	8009ccc <__sfp+0x1c>
 8009d18:	2104      	movs	r1, #4
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	f7ff ff62 	bl	8009be4 <__sfmoreglue>
 8009d20:	4604      	mov	r4, r0
 8009d22:	6030      	str	r0, [r6, #0]
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d1d5      	bne.n	8009cd4 <__sfp+0x24>
 8009d28:	f7ff ff78 	bl	8009c1c <__sfp_lock_release>
 8009d2c:	230c      	movs	r3, #12
 8009d2e:	603b      	str	r3, [r7, #0]
 8009d30:	e7ee      	b.n	8009d10 <__sfp+0x60>
 8009d32:	bf00      	nop
 8009d34:	0800c33c 	.word	0x0800c33c
 8009d38:	ffff0001 	.word	0xffff0001

08009d3c <_fwalk_reent>:
 8009d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d40:	4606      	mov	r6, r0
 8009d42:	4688      	mov	r8, r1
 8009d44:	2700      	movs	r7, #0
 8009d46:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d4e:	f1b9 0901 	subs.w	r9, r9, #1
 8009d52:	d505      	bpl.n	8009d60 <_fwalk_reent+0x24>
 8009d54:	6824      	ldr	r4, [r4, #0]
 8009d56:	2c00      	cmp	r4, #0
 8009d58:	d1f7      	bne.n	8009d4a <_fwalk_reent+0xe>
 8009d5a:	4638      	mov	r0, r7
 8009d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d60:	89ab      	ldrh	r3, [r5, #12]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d907      	bls.n	8009d76 <_fwalk_reent+0x3a>
 8009d66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	d003      	beq.n	8009d76 <_fwalk_reent+0x3a>
 8009d6e:	4629      	mov	r1, r5
 8009d70:	4630      	mov	r0, r6
 8009d72:	47c0      	blx	r8
 8009d74:	4307      	orrs	r7, r0
 8009d76:	3568      	adds	r5, #104	; 0x68
 8009d78:	e7e9      	b.n	8009d4e <_fwalk_reent+0x12>

08009d7a <__retarget_lock_init_recursive>:
 8009d7a:	4770      	bx	lr

08009d7c <__retarget_lock_acquire_recursive>:
 8009d7c:	4770      	bx	lr

08009d7e <__retarget_lock_release_recursive>:
 8009d7e:	4770      	bx	lr

08009d80 <__swhatbuf_r>:
 8009d80:	b570      	push	{r4, r5, r6, lr}
 8009d82:	460e      	mov	r6, r1
 8009d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d88:	4614      	mov	r4, r2
 8009d8a:	2900      	cmp	r1, #0
 8009d8c:	461d      	mov	r5, r3
 8009d8e:	b096      	sub	sp, #88	; 0x58
 8009d90:	da07      	bge.n	8009da2 <__swhatbuf_r+0x22>
 8009d92:	2300      	movs	r3, #0
 8009d94:	602b      	str	r3, [r5, #0]
 8009d96:	89b3      	ldrh	r3, [r6, #12]
 8009d98:	061a      	lsls	r2, r3, #24
 8009d9a:	d410      	bmi.n	8009dbe <__swhatbuf_r+0x3e>
 8009d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009da0:	e00e      	b.n	8009dc0 <__swhatbuf_r+0x40>
 8009da2:	466a      	mov	r2, sp
 8009da4:	f000 f902 	bl	8009fac <_fstat_r>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	dbf2      	blt.n	8009d92 <__swhatbuf_r+0x12>
 8009dac:	9a01      	ldr	r2, [sp, #4]
 8009dae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009db2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009db6:	425a      	negs	r2, r3
 8009db8:	415a      	adcs	r2, r3
 8009dba:	602a      	str	r2, [r5, #0]
 8009dbc:	e7ee      	b.n	8009d9c <__swhatbuf_r+0x1c>
 8009dbe:	2340      	movs	r3, #64	; 0x40
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	6023      	str	r3, [r4, #0]
 8009dc4:	b016      	add	sp, #88	; 0x58
 8009dc6:	bd70      	pop	{r4, r5, r6, pc}

08009dc8 <__smakebuf_r>:
 8009dc8:	898b      	ldrh	r3, [r1, #12]
 8009dca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dcc:	079d      	lsls	r5, r3, #30
 8009dce:	4606      	mov	r6, r0
 8009dd0:	460c      	mov	r4, r1
 8009dd2:	d507      	bpl.n	8009de4 <__smakebuf_r+0x1c>
 8009dd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009dd8:	6023      	str	r3, [r4, #0]
 8009dda:	6123      	str	r3, [r4, #16]
 8009ddc:	2301      	movs	r3, #1
 8009dde:	6163      	str	r3, [r4, #20]
 8009de0:	b002      	add	sp, #8
 8009de2:	bd70      	pop	{r4, r5, r6, pc}
 8009de4:	466a      	mov	r2, sp
 8009de6:	ab01      	add	r3, sp, #4
 8009de8:	f7ff ffca 	bl	8009d80 <__swhatbuf_r>
 8009dec:	9900      	ldr	r1, [sp, #0]
 8009dee:	4605      	mov	r5, r0
 8009df0:	4630      	mov	r0, r6
 8009df2:	f7fe ff8b 	bl	8008d0c <_malloc_r>
 8009df6:	b948      	cbnz	r0, 8009e0c <__smakebuf_r+0x44>
 8009df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dfc:	059a      	lsls	r2, r3, #22
 8009dfe:	d4ef      	bmi.n	8009de0 <__smakebuf_r+0x18>
 8009e00:	f023 0303 	bic.w	r3, r3, #3
 8009e04:	f043 0302 	orr.w	r3, r3, #2
 8009e08:	81a3      	strh	r3, [r4, #12]
 8009e0a:	e7e3      	b.n	8009dd4 <__smakebuf_r+0xc>
 8009e0c:	4b0d      	ldr	r3, [pc, #52]	; (8009e44 <__smakebuf_r+0x7c>)
 8009e0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e10:	89a3      	ldrh	r3, [r4, #12]
 8009e12:	6020      	str	r0, [r4, #0]
 8009e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e18:	81a3      	strh	r3, [r4, #12]
 8009e1a:	9b00      	ldr	r3, [sp, #0]
 8009e1c:	6120      	str	r0, [r4, #16]
 8009e1e:	6163      	str	r3, [r4, #20]
 8009e20:	9b01      	ldr	r3, [sp, #4]
 8009e22:	b15b      	cbz	r3, 8009e3c <__smakebuf_r+0x74>
 8009e24:	4630      	mov	r0, r6
 8009e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e2a:	f000 f8d1 	bl	8009fd0 <_isatty_r>
 8009e2e:	b128      	cbz	r0, 8009e3c <__smakebuf_r+0x74>
 8009e30:	89a3      	ldrh	r3, [r4, #12]
 8009e32:	f023 0303 	bic.w	r3, r3, #3
 8009e36:	f043 0301 	orr.w	r3, r3, #1
 8009e3a:	81a3      	strh	r3, [r4, #12]
 8009e3c:	89a0      	ldrh	r0, [r4, #12]
 8009e3e:	4305      	orrs	r5, r0
 8009e40:	81a5      	strh	r5, [r4, #12]
 8009e42:	e7cd      	b.n	8009de0 <__smakebuf_r+0x18>
 8009e44:	08009bd9 	.word	0x08009bd9

08009e48 <_malloc_usable_size_r>:
 8009e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e4c:	1f18      	subs	r0, r3, #4
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	bfbc      	itt	lt
 8009e52:	580b      	ldrlt	r3, [r1, r0]
 8009e54:	18c0      	addlt	r0, r0, r3
 8009e56:	4770      	bx	lr

08009e58 <_raise_r>:
 8009e58:	291f      	cmp	r1, #31
 8009e5a:	b538      	push	{r3, r4, r5, lr}
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	460d      	mov	r5, r1
 8009e60:	d904      	bls.n	8009e6c <_raise_r+0x14>
 8009e62:	2316      	movs	r3, #22
 8009e64:	6003      	str	r3, [r0, #0]
 8009e66:	f04f 30ff 	mov.w	r0, #4294967295
 8009e6a:	bd38      	pop	{r3, r4, r5, pc}
 8009e6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e6e:	b112      	cbz	r2, 8009e76 <_raise_r+0x1e>
 8009e70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e74:	b94b      	cbnz	r3, 8009e8a <_raise_r+0x32>
 8009e76:	4620      	mov	r0, r4
 8009e78:	f000 f830 	bl	8009edc <_getpid_r>
 8009e7c:	462a      	mov	r2, r5
 8009e7e:	4601      	mov	r1, r0
 8009e80:	4620      	mov	r0, r4
 8009e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e86:	f000 b817 	b.w	8009eb8 <_kill_r>
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d00a      	beq.n	8009ea4 <_raise_r+0x4c>
 8009e8e:	1c59      	adds	r1, r3, #1
 8009e90:	d103      	bne.n	8009e9a <_raise_r+0x42>
 8009e92:	2316      	movs	r3, #22
 8009e94:	6003      	str	r3, [r0, #0]
 8009e96:	2001      	movs	r0, #1
 8009e98:	e7e7      	b.n	8009e6a <_raise_r+0x12>
 8009e9a:	2400      	movs	r4, #0
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ea2:	4798      	blx	r3
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	e7e0      	b.n	8009e6a <_raise_r+0x12>

08009ea8 <raise>:
 8009ea8:	4b02      	ldr	r3, [pc, #8]	; (8009eb4 <raise+0xc>)
 8009eaa:	4601      	mov	r1, r0
 8009eac:	6818      	ldr	r0, [r3, #0]
 8009eae:	f7ff bfd3 	b.w	8009e58 <_raise_r>
 8009eb2:	bf00      	nop
 8009eb4:	2000000c 	.word	0x2000000c

08009eb8 <_kill_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	2300      	movs	r3, #0
 8009ebc:	4d06      	ldr	r5, [pc, #24]	; (8009ed8 <_kill_r+0x20>)
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	4608      	mov	r0, r1
 8009ec2:	4611      	mov	r1, r2
 8009ec4:	602b      	str	r3, [r5, #0]
 8009ec6:	f7f8 fbf4 	bl	80026b2 <_kill>
 8009eca:	1c43      	adds	r3, r0, #1
 8009ecc:	d102      	bne.n	8009ed4 <_kill_r+0x1c>
 8009ece:	682b      	ldr	r3, [r5, #0]
 8009ed0:	b103      	cbz	r3, 8009ed4 <_kill_r+0x1c>
 8009ed2:	6023      	str	r3, [r4, #0]
 8009ed4:	bd38      	pop	{r3, r4, r5, pc}
 8009ed6:	bf00      	nop
 8009ed8:	200004cc 	.word	0x200004cc

08009edc <_getpid_r>:
 8009edc:	f7f8 bbe2 	b.w	80026a4 <_getpid>

08009ee0 <__sread>:
 8009ee0:	b510      	push	{r4, lr}
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee8:	f000 f894 	bl	800a014 <_read_r>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	bfab      	itete	ge
 8009ef0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ef4:	181b      	addge	r3, r3, r0
 8009ef6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009efa:	bfac      	ite	ge
 8009efc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009efe:	81a3      	strhlt	r3, [r4, #12]
 8009f00:	bd10      	pop	{r4, pc}

08009f02 <__swrite>:
 8009f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f06:	461f      	mov	r7, r3
 8009f08:	898b      	ldrh	r3, [r1, #12]
 8009f0a:	4605      	mov	r5, r0
 8009f0c:	05db      	lsls	r3, r3, #23
 8009f0e:	460c      	mov	r4, r1
 8009f10:	4616      	mov	r6, r2
 8009f12:	d505      	bpl.n	8009f20 <__swrite+0x1e>
 8009f14:	2302      	movs	r3, #2
 8009f16:	2200      	movs	r2, #0
 8009f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f1c:	f000 f868 	bl	8009ff0 <_lseek_r>
 8009f20:	89a3      	ldrh	r3, [r4, #12]
 8009f22:	4632      	mov	r2, r6
 8009f24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f28:	81a3      	strh	r3, [r4, #12]
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	463b      	mov	r3, r7
 8009f2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f36:	f000 b817 	b.w	8009f68 <_write_r>

08009f3a <__sseek>:
 8009f3a:	b510      	push	{r4, lr}
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f42:	f000 f855 	bl	8009ff0 <_lseek_r>
 8009f46:	1c43      	adds	r3, r0, #1
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	bf15      	itete	ne
 8009f4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f56:	81a3      	strheq	r3, [r4, #12]
 8009f58:	bf18      	it	ne
 8009f5a:	81a3      	strhne	r3, [r4, #12]
 8009f5c:	bd10      	pop	{r4, pc}

08009f5e <__sclose>:
 8009f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f62:	f000 b813 	b.w	8009f8c <_close_r>
	...

08009f68 <_write_r>:
 8009f68:	b538      	push	{r3, r4, r5, lr}
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	4608      	mov	r0, r1
 8009f6e:	4611      	mov	r1, r2
 8009f70:	2200      	movs	r2, #0
 8009f72:	4d05      	ldr	r5, [pc, #20]	; (8009f88 <_write_r+0x20>)
 8009f74:	602a      	str	r2, [r5, #0]
 8009f76:	461a      	mov	r2, r3
 8009f78:	f7f8 fbd2 	bl	8002720 <_write>
 8009f7c:	1c43      	adds	r3, r0, #1
 8009f7e:	d102      	bne.n	8009f86 <_write_r+0x1e>
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	b103      	cbz	r3, 8009f86 <_write_r+0x1e>
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	bd38      	pop	{r3, r4, r5, pc}
 8009f88:	200004cc 	.word	0x200004cc

08009f8c <_close_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	2300      	movs	r3, #0
 8009f90:	4d05      	ldr	r5, [pc, #20]	; (8009fa8 <_close_r+0x1c>)
 8009f92:	4604      	mov	r4, r0
 8009f94:	4608      	mov	r0, r1
 8009f96:	602b      	str	r3, [r5, #0]
 8009f98:	f7f8 fbde 	bl	8002758 <_close>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	d102      	bne.n	8009fa6 <_close_r+0x1a>
 8009fa0:	682b      	ldr	r3, [r5, #0]
 8009fa2:	b103      	cbz	r3, 8009fa6 <_close_r+0x1a>
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	bd38      	pop	{r3, r4, r5, pc}
 8009fa8:	200004cc 	.word	0x200004cc

08009fac <_fstat_r>:
 8009fac:	b538      	push	{r3, r4, r5, lr}
 8009fae:	2300      	movs	r3, #0
 8009fb0:	4d06      	ldr	r5, [pc, #24]	; (8009fcc <_fstat_r+0x20>)
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	4608      	mov	r0, r1
 8009fb6:	4611      	mov	r1, r2
 8009fb8:	602b      	str	r3, [r5, #0]
 8009fba:	f7f8 fbd8 	bl	800276e <_fstat>
 8009fbe:	1c43      	adds	r3, r0, #1
 8009fc0:	d102      	bne.n	8009fc8 <_fstat_r+0x1c>
 8009fc2:	682b      	ldr	r3, [r5, #0]
 8009fc4:	b103      	cbz	r3, 8009fc8 <_fstat_r+0x1c>
 8009fc6:	6023      	str	r3, [r4, #0]
 8009fc8:	bd38      	pop	{r3, r4, r5, pc}
 8009fca:	bf00      	nop
 8009fcc:	200004cc 	.word	0x200004cc

08009fd0 <_isatty_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	4d05      	ldr	r5, [pc, #20]	; (8009fec <_isatty_r+0x1c>)
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	4608      	mov	r0, r1
 8009fda:	602b      	str	r3, [r5, #0]
 8009fdc:	f7f8 fbd6 	bl	800278c <_isatty>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	d102      	bne.n	8009fea <_isatty_r+0x1a>
 8009fe4:	682b      	ldr	r3, [r5, #0]
 8009fe6:	b103      	cbz	r3, 8009fea <_isatty_r+0x1a>
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	bd38      	pop	{r3, r4, r5, pc}
 8009fec:	200004cc 	.word	0x200004cc

08009ff0 <_lseek_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	4608      	mov	r0, r1
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	4d05      	ldr	r5, [pc, #20]	; (800a010 <_lseek_r+0x20>)
 8009ffc:	602a      	str	r2, [r5, #0]
 8009ffe:	461a      	mov	r2, r3
 800a000:	f7f8 fbce 	bl	80027a0 <_lseek>
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	d102      	bne.n	800a00e <_lseek_r+0x1e>
 800a008:	682b      	ldr	r3, [r5, #0]
 800a00a:	b103      	cbz	r3, 800a00e <_lseek_r+0x1e>
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	bd38      	pop	{r3, r4, r5, pc}
 800a010:	200004cc 	.word	0x200004cc

0800a014 <_read_r>:
 800a014:	b538      	push	{r3, r4, r5, lr}
 800a016:	4604      	mov	r4, r0
 800a018:	4608      	mov	r0, r1
 800a01a:	4611      	mov	r1, r2
 800a01c:	2200      	movs	r2, #0
 800a01e:	4d05      	ldr	r5, [pc, #20]	; (800a034 <_read_r+0x20>)
 800a020:	602a      	str	r2, [r5, #0]
 800a022:	461a      	mov	r2, r3
 800a024:	f7f8 fb5f 	bl	80026e6 <_read>
 800a028:	1c43      	adds	r3, r0, #1
 800a02a:	d102      	bne.n	800a032 <_read_r+0x1e>
 800a02c:	682b      	ldr	r3, [r5, #0]
 800a02e:	b103      	cbz	r3, 800a032 <_read_r+0x1e>
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	bd38      	pop	{r3, r4, r5, pc}
 800a034:	200004cc 	.word	0x200004cc

0800a038 <sin>:
 800a038:	b530      	push	{r4, r5, lr}
 800a03a:	4a20      	ldr	r2, [pc, #128]	; (800a0bc <sin+0x84>)
 800a03c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a040:	4293      	cmp	r3, r2
 800a042:	b087      	sub	sp, #28
 800a044:	dc06      	bgt.n	800a054 <sin+0x1c>
 800a046:	2300      	movs	r3, #0
 800a048:	2200      	movs	r2, #0
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	2300      	movs	r3, #0
 800a04e:	f001 fef7 	bl	800be40 <__kernel_sin>
 800a052:	e006      	b.n	800a062 <sin+0x2a>
 800a054:	4a1a      	ldr	r2, [pc, #104]	; (800a0c0 <sin+0x88>)
 800a056:	4293      	cmp	r3, r2
 800a058:	dd05      	ble.n	800a066 <sin+0x2e>
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	f7f6 f883 	bl	8000168 <__aeabi_dsub>
 800a062:	b007      	add	sp, #28
 800a064:	bd30      	pop	{r4, r5, pc}
 800a066:	aa02      	add	r2, sp, #8
 800a068:	f001 f846 	bl	800b0f8 <__ieee754_rem_pio2>
 800a06c:	f000 0003 	and.w	r0, r0, #3
 800a070:	2801      	cmp	r0, #1
 800a072:	d009      	beq.n	800a088 <sin+0x50>
 800a074:	2802      	cmp	r0, #2
 800a076:	d00e      	beq.n	800a096 <sin+0x5e>
 800a078:	b9c0      	cbnz	r0, 800a0ac <sin+0x74>
 800a07a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a07e:	2301      	movs	r3, #1
 800a080:	9300      	str	r3, [sp, #0]
 800a082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a086:	e7e2      	b.n	800a04e <sin+0x16>
 800a088:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a08c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a090:	f001 face 	bl	800b630 <__kernel_cos>
 800a094:	e7e5      	b.n	800a062 <sin+0x2a>
 800a096:	2301      	movs	r3, #1
 800a098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0a2:	f001 fecd 	bl	800be40 <__kernel_sin>
 800a0a6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a0aa:	e7da      	b.n	800a062 <sin+0x2a>
 800a0ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0b4:	f001 fabc 	bl	800b630 <__kernel_cos>
 800a0b8:	e7f5      	b.n	800a0a6 <sin+0x6e>
 800a0ba:	bf00      	nop
 800a0bc:	3fe921fb 	.word	0x3fe921fb
 800a0c0:	7fefffff 	.word	0x7fefffff

0800a0c4 <asin>:
 800a0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	460d      	mov	r5, r1
 800a0ca:	f000 f901 	bl	800a2d0 <__ieee754_asin>
 800a0ce:	4b11      	ldr	r3, [pc, #68]	; (800a114 <asin+0x50>)
 800a0d0:	4606      	mov	r6, r0
 800a0d2:	f993 3000 	ldrsb.w	r3, [r3]
 800a0d6:	460f      	mov	r7, r1
 800a0d8:	3301      	adds	r3, #1
 800a0da:	d018      	beq.n	800a10e <asin+0x4a>
 800a0dc:	4622      	mov	r2, r4
 800a0de:	462b      	mov	r3, r5
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	f7f6 fc92 	bl	8000a0c <__aeabi_dcmpun>
 800a0e8:	b988      	cbnz	r0, 800a10e <asin+0x4a>
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	f001 ff5d 	bl	800bfac <fabs>
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	4b08      	ldr	r3, [pc, #32]	; (800a118 <asin+0x54>)
 800a0f6:	f7f6 fc7f 	bl	80009f8 <__aeabi_dcmpgt>
 800a0fa:	b140      	cbz	r0, 800a10e <asin+0x4a>
 800a0fc:	f7fc fc82 	bl	8006a04 <__errno>
 800a100:	2321      	movs	r3, #33	; 0x21
 800a102:	6003      	str	r3, [r0, #0]
 800a104:	4805      	ldr	r0, [pc, #20]	; (800a11c <asin+0x58>)
 800a106:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a10a:	f7ff b94b 	b.w	80093a4 <nan>
 800a10e:	4630      	mov	r0, r6
 800a110:	4639      	mov	r1, r7
 800a112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a114:	200001e0 	.word	0x200001e0
 800a118:	3ff00000 	.word	0x3ff00000
 800a11c:	0800c71a 	.word	0x0800c71a

0800a120 <pow>:
 800a120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a124:	461f      	mov	r7, r3
 800a126:	4680      	mov	r8, r0
 800a128:	4689      	mov	r9, r1
 800a12a:	4616      	mov	r6, r2
 800a12c:	f000 facc 	bl	800a6c8 <__ieee754_pow>
 800a130:	4b4d      	ldr	r3, [pc, #308]	; (800a268 <pow+0x148>)
 800a132:	4604      	mov	r4, r0
 800a134:	f993 3000 	ldrsb.w	r3, [r3]
 800a138:	460d      	mov	r5, r1
 800a13a:	3301      	adds	r3, #1
 800a13c:	d015      	beq.n	800a16a <pow+0x4a>
 800a13e:	4632      	mov	r2, r6
 800a140:	463b      	mov	r3, r7
 800a142:	4630      	mov	r0, r6
 800a144:	4639      	mov	r1, r7
 800a146:	f7f6 fc61 	bl	8000a0c <__aeabi_dcmpun>
 800a14a:	b970      	cbnz	r0, 800a16a <pow+0x4a>
 800a14c:	4642      	mov	r2, r8
 800a14e:	464b      	mov	r3, r9
 800a150:	4640      	mov	r0, r8
 800a152:	4649      	mov	r1, r9
 800a154:	f7f6 fc5a 	bl	8000a0c <__aeabi_dcmpun>
 800a158:	2200      	movs	r2, #0
 800a15a:	2300      	movs	r3, #0
 800a15c:	b148      	cbz	r0, 800a172 <pow+0x52>
 800a15e:	4630      	mov	r0, r6
 800a160:	4639      	mov	r1, r7
 800a162:	f7f6 fc21 	bl	80009a8 <__aeabi_dcmpeq>
 800a166:	2800      	cmp	r0, #0
 800a168:	d17b      	bne.n	800a262 <pow+0x142>
 800a16a:	4620      	mov	r0, r4
 800a16c:	4629      	mov	r1, r5
 800a16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a172:	4640      	mov	r0, r8
 800a174:	4649      	mov	r1, r9
 800a176:	f7f6 fc17 	bl	80009a8 <__aeabi_dcmpeq>
 800a17a:	b1e0      	cbz	r0, 800a1b6 <pow+0x96>
 800a17c:	2200      	movs	r2, #0
 800a17e:	2300      	movs	r3, #0
 800a180:	4630      	mov	r0, r6
 800a182:	4639      	mov	r1, r7
 800a184:	f7f6 fc10 	bl	80009a8 <__aeabi_dcmpeq>
 800a188:	2800      	cmp	r0, #0
 800a18a:	d16a      	bne.n	800a262 <pow+0x142>
 800a18c:	4630      	mov	r0, r6
 800a18e:	4639      	mov	r1, r7
 800a190:	f001 ff0f 	bl	800bfb2 <finite>
 800a194:	2800      	cmp	r0, #0
 800a196:	d0e8      	beq.n	800a16a <pow+0x4a>
 800a198:	2200      	movs	r2, #0
 800a19a:	2300      	movs	r3, #0
 800a19c:	4630      	mov	r0, r6
 800a19e:	4639      	mov	r1, r7
 800a1a0:	f7f6 fc0c 	bl	80009bc <__aeabi_dcmplt>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d0e0      	beq.n	800a16a <pow+0x4a>
 800a1a8:	f7fc fc2c 	bl	8006a04 <__errno>
 800a1ac:	2321      	movs	r3, #33	; 0x21
 800a1ae:	2400      	movs	r4, #0
 800a1b0:	6003      	str	r3, [r0, #0]
 800a1b2:	4d2e      	ldr	r5, [pc, #184]	; (800a26c <pow+0x14c>)
 800a1b4:	e7d9      	b.n	800a16a <pow+0x4a>
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	f001 fefa 	bl	800bfb2 <finite>
 800a1be:	bba8      	cbnz	r0, 800a22c <pow+0x10c>
 800a1c0:	4640      	mov	r0, r8
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	f001 fef5 	bl	800bfb2 <finite>
 800a1c8:	b380      	cbz	r0, 800a22c <pow+0x10c>
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	4639      	mov	r1, r7
 800a1ce:	f001 fef0 	bl	800bfb2 <finite>
 800a1d2:	b358      	cbz	r0, 800a22c <pow+0x10c>
 800a1d4:	4622      	mov	r2, r4
 800a1d6:	462b      	mov	r3, r5
 800a1d8:	4620      	mov	r0, r4
 800a1da:	4629      	mov	r1, r5
 800a1dc:	f7f6 fc16 	bl	8000a0c <__aeabi_dcmpun>
 800a1e0:	b160      	cbz	r0, 800a1fc <pow+0xdc>
 800a1e2:	f7fc fc0f 	bl	8006a04 <__errno>
 800a1e6:	2321      	movs	r3, #33	; 0x21
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	6003      	str	r3, [r0, #0]
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	4610      	mov	r0, r2
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	f7f6 fa9b 	bl	800072c <__aeabi_ddiv>
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	460d      	mov	r5, r1
 800a1fa:	e7b6      	b.n	800a16a <pow+0x4a>
 800a1fc:	f7fc fc02 	bl	8006a04 <__errno>
 800a200:	2322      	movs	r3, #34	; 0x22
 800a202:	2200      	movs	r2, #0
 800a204:	6003      	str	r3, [r0, #0]
 800a206:	4649      	mov	r1, r9
 800a208:	2300      	movs	r3, #0
 800a20a:	4640      	mov	r0, r8
 800a20c:	f7f6 fbd6 	bl	80009bc <__aeabi_dcmplt>
 800a210:	2400      	movs	r4, #0
 800a212:	b148      	cbz	r0, 800a228 <pow+0x108>
 800a214:	4630      	mov	r0, r6
 800a216:	4639      	mov	r1, r7
 800a218:	f001 ff52 	bl	800c0c0 <rint>
 800a21c:	4632      	mov	r2, r6
 800a21e:	463b      	mov	r3, r7
 800a220:	f7f6 fbc2 	bl	80009a8 <__aeabi_dcmpeq>
 800a224:	2800      	cmp	r0, #0
 800a226:	d0c4      	beq.n	800a1b2 <pow+0x92>
 800a228:	4d11      	ldr	r5, [pc, #68]	; (800a270 <pow+0x150>)
 800a22a:	e79e      	b.n	800a16a <pow+0x4a>
 800a22c:	2200      	movs	r2, #0
 800a22e:	2300      	movs	r3, #0
 800a230:	4620      	mov	r0, r4
 800a232:	4629      	mov	r1, r5
 800a234:	f7f6 fbb8 	bl	80009a8 <__aeabi_dcmpeq>
 800a238:	2800      	cmp	r0, #0
 800a23a:	d096      	beq.n	800a16a <pow+0x4a>
 800a23c:	4640      	mov	r0, r8
 800a23e:	4649      	mov	r1, r9
 800a240:	f001 feb7 	bl	800bfb2 <finite>
 800a244:	2800      	cmp	r0, #0
 800a246:	d090      	beq.n	800a16a <pow+0x4a>
 800a248:	4630      	mov	r0, r6
 800a24a:	4639      	mov	r1, r7
 800a24c:	f001 feb1 	bl	800bfb2 <finite>
 800a250:	2800      	cmp	r0, #0
 800a252:	d08a      	beq.n	800a16a <pow+0x4a>
 800a254:	f7fc fbd6 	bl	8006a04 <__errno>
 800a258:	2322      	movs	r3, #34	; 0x22
 800a25a:	2400      	movs	r4, #0
 800a25c:	2500      	movs	r5, #0
 800a25e:	6003      	str	r3, [r0, #0]
 800a260:	e783      	b.n	800a16a <pow+0x4a>
 800a262:	2400      	movs	r4, #0
 800a264:	4d03      	ldr	r5, [pc, #12]	; (800a274 <pow+0x154>)
 800a266:	e780      	b.n	800a16a <pow+0x4a>
 800a268:	200001e0 	.word	0x200001e0
 800a26c:	fff00000 	.word	0xfff00000
 800a270:	7ff00000 	.word	0x7ff00000
 800a274:	3ff00000 	.word	0x3ff00000

0800a278 <sqrt>:
 800a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27a:	4606      	mov	r6, r0
 800a27c:	460f      	mov	r7, r1
 800a27e:	f001 f92b 	bl	800b4d8 <__ieee754_sqrt>
 800a282:	4b12      	ldr	r3, [pc, #72]	; (800a2cc <sqrt+0x54>)
 800a284:	4604      	mov	r4, r0
 800a286:	f993 3000 	ldrsb.w	r3, [r3]
 800a28a:	460d      	mov	r5, r1
 800a28c:	3301      	adds	r3, #1
 800a28e:	d019      	beq.n	800a2c4 <sqrt+0x4c>
 800a290:	4632      	mov	r2, r6
 800a292:	463b      	mov	r3, r7
 800a294:	4630      	mov	r0, r6
 800a296:	4639      	mov	r1, r7
 800a298:	f7f6 fbb8 	bl	8000a0c <__aeabi_dcmpun>
 800a29c:	b990      	cbnz	r0, 800a2c4 <sqrt+0x4c>
 800a29e:	2200      	movs	r2, #0
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	4639      	mov	r1, r7
 800a2a6:	f7f6 fb89 	bl	80009bc <__aeabi_dcmplt>
 800a2aa:	b158      	cbz	r0, 800a2c4 <sqrt+0x4c>
 800a2ac:	f7fc fbaa 	bl	8006a04 <__errno>
 800a2b0:	2321      	movs	r3, #33	; 0x21
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	6003      	str	r3, [r0, #0]
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	4610      	mov	r0, r2
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	f7f6 fa36 	bl	800072c <__aeabi_ddiv>
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	460d      	mov	r5, r1
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	200001e0 	.word	0x200001e0

0800a2d0 <__ieee754_asin>:
 800a2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d4:	4bc4      	ldr	r3, [pc, #784]	; (800a5e8 <__ieee754_asin+0x318>)
 800a2d6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a2da:	b087      	sub	sp, #28
 800a2dc:	429e      	cmp	r6, r3
 800a2de:	4602      	mov	r2, r0
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	460d      	mov	r5, r1
 800a2e4:	9105      	str	r1, [sp, #20]
 800a2e6:	dd29      	ble.n	800a33c <__ieee754_asin+0x6c>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 800a2ee:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800a2f2:	4333      	orrs	r3, r6
 800a2f4:	d114      	bne.n	800a320 <__ieee754_asin+0x50>
 800a2f6:	a3a2      	add	r3, pc, #648	; (adr r3, 800a580 <__ieee754_asin+0x2b0>)
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	f7f6 f8ec 	bl	80004d8 <__aeabi_dmul>
 800a300:	a3a1      	add	r3, pc, #644	; (adr r3, 800a588 <__ieee754_asin+0x2b8>)
 800a302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a306:	4606      	mov	r6, r0
 800a308:	460f      	mov	r7, r1
 800a30a:	4620      	mov	r0, r4
 800a30c:	4629      	mov	r1, r5
 800a30e:	f7f6 f8e3 	bl	80004d8 <__aeabi_dmul>
 800a312:	4602      	mov	r2, r0
 800a314:	460b      	mov	r3, r1
 800a316:	4630      	mov	r0, r6
 800a318:	4639      	mov	r1, r7
 800a31a:	f7f5 ff27 	bl	800016c <__adddf3>
 800a31e:	e006      	b.n	800a32e <__ieee754_asin+0x5e>
 800a320:	460b      	mov	r3, r1
 800a322:	f7f5 ff21 	bl	8000168 <__aeabi_dsub>
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
 800a32a:	f7f6 f9ff 	bl	800072c <__aeabi_ddiv>
 800a32e:	4604      	mov	r4, r0
 800a330:	460d      	mov	r5, r1
 800a332:	4620      	mov	r0, r4
 800a334:	4629      	mov	r1, r5
 800a336:	b007      	add	sp, #28
 800a338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a33c:	4bab      	ldr	r3, [pc, #684]	; (800a5ec <__ieee754_asin+0x31c>)
 800a33e:	429e      	cmp	r6, r3
 800a340:	dc0e      	bgt.n	800a360 <__ieee754_asin+0x90>
 800a342:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a346:	f280 80ab 	bge.w	800a4a0 <__ieee754_asin+0x1d0>
 800a34a:	a391      	add	r3, pc, #580	; (adr r3, 800a590 <__ieee754_asin+0x2c0>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f7f5 ff0c 	bl	800016c <__adddf3>
 800a354:	2200      	movs	r2, #0
 800a356:	4ba6      	ldr	r3, [pc, #664]	; (800a5f0 <__ieee754_asin+0x320>)
 800a358:	f7f6 fb4e 	bl	80009f8 <__aeabi_dcmpgt>
 800a35c:	2800      	cmp	r0, #0
 800a35e:	d1e8      	bne.n	800a332 <__ieee754_asin+0x62>
 800a360:	4620      	mov	r0, r4
 800a362:	4629      	mov	r1, r5
 800a364:	f001 fe22 	bl	800bfac <fabs>
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	2000      	movs	r0, #0
 800a36e:	49a0      	ldr	r1, [pc, #640]	; (800a5f0 <__ieee754_asin+0x320>)
 800a370:	f7f5 fefa 	bl	8000168 <__aeabi_dsub>
 800a374:	2200      	movs	r2, #0
 800a376:	4b9f      	ldr	r3, [pc, #636]	; (800a5f4 <__ieee754_asin+0x324>)
 800a378:	f7f6 f8ae 	bl	80004d8 <__aeabi_dmul>
 800a37c:	a386      	add	r3, pc, #536	; (adr r3, 800a598 <__ieee754_asin+0x2c8>)
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	4604      	mov	r4, r0
 800a384:	460d      	mov	r5, r1
 800a386:	f7f6 f8a7 	bl	80004d8 <__aeabi_dmul>
 800a38a:	a385      	add	r3, pc, #532	; (adr r3, 800a5a0 <__ieee754_asin+0x2d0>)
 800a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a390:	f7f5 feec 	bl	800016c <__adddf3>
 800a394:	4622      	mov	r2, r4
 800a396:	462b      	mov	r3, r5
 800a398:	f7f6 f89e 	bl	80004d8 <__aeabi_dmul>
 800a39c:	a382      	add	r3, pc, #520	; (adr r3, 800a5a8 <__ieee754_asin+0x2d8>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	f7f5 fee1 	bl	8000168 <__aeabi_dsub>
 800a3a6:	4622      	mov	r2, r4
 800a3a8:	462b      	mov	r3, r5
 800a3aa:	f7f6 f895 	bl	80004d8 <__aeabi_dmul>
 800a3ae:	a380      	add	r3, pc, #512	; (adr r3, 800a5b0 <__ieee754_asin+0x2e0>)
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	f7f5 feda 	bl	800016c <__adddf3>
 800a3b8:	4622      	mov	r2, r4
 800a3ba:	462b      	mov	r3, r5
 800a3bc:	f7f6 f88c 	bl	80004d8 <__aeabi_dmul>
 800a3c0:	a37d      	add	r3, pc, #500	; (adr r3, 800a5b8 <__ieee754_asin+0x2e8>)
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	f7f5 fecf 	bl	8000168 <__aeabi_dsub>
 800a3ca:	4622      	mov	r2, r4
 800a3cc:	462b      	mov	r3, r5
 800a3ce:	f7f6 f883 	bl	80004d8 <__aeabi_dmul>
 800a3d2:	a37b      	add	r3, pc, #492	; (adr r3, 800a5c0 <__ieee754_asin+0x2f0>)
 800a3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d8:	f7f5 fec8 	bl	800016c <__adddf3>
 800a3dc:	4622      	mov	r2, r4
 800a3de:	462b      	mov	r3, r5
 800a3e0:	f7f6 f87a 	bl	80004d8 <__aeabi_dmul>
 800a3e4:	a378      	add	r3, pc, #480	; (adr r3, 800a5c8 <__ieee754_asin+0x2f8>)
 800a3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ea:	e9cd 0100 	strd	r0, r1, [sp]
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	f7f6 f871 	bl	80004d8 <__aeabi_dmul>
 800a3f6:	a376      	add	r3, pc, #472	; (adr r3, 800a5d0 <__ieee754_asin+0x300>)
 800a3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fc:	f7f5 feb4 	bl	8000168 <__aeabi_dsub>
 800a400:	4622      	mov	r2, r4
 800a402:	462b      	mov	r3, r5
 800a404:	f7f6 f868 	bl	80004d8 <__aeabi_dmul>
 800a408:	a373      	add	r3, pc, #460	; (adr r3, 800a5d8 <__ieee754_asin+0x308>)
 800a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40e:	f7f5 fead 	bl	800016c <__adddf3>
 800a412:	4622      	mov	r2, r4
 800a414:	462b      	mov	r3, r5
 800a416:	f7f6 f85f 	bl	80004d8 <__aeabi_dmul>
 800a41a:	a371      	add	r3, pc, #452	; (adr r3, 800a5e0 <__ieee754_asin+0x310>)
 800a41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a420:	f7f5 fea2 	bl	8000168 <__aeabi_dsub>
 800a424:	4622      	mov	r2, r4
 800a426:	462b      	mov	r3, r5
 800a428:	f7f6 f856 	bl	80004d8 <__aeabi_dmul>
 800a42c:	4b70      	ldr	r3, [pc, #448]	; (800a5f0 <__ieee754_asin+0x320>)
 800a42e:	2200      	movs	r2, #0
 800a430:	f7f5 fe9c 	bl	800016c <__adddf3>
 800a434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a438:	4620      	mov	r0, r4
 800a43a:	4629      	mov	r1, r5
 800a43c:	f001 f84c 	bl	800b4d8 <__ieee754_sqrt>
 800a440:	4b6d      	ldr	r3, [pc, #436]	; (800a5f8 <__ieee754_asin+0x328>)
 800a442:	4682      	mov	sl, r0
 800a444:	429e      	cmp	r6, r3
 800a446:	468b      	mov	fp, r1
 800a448:	f340 80d8 	ble.w	800a5fc <__ieee754_asin+0x32c>
 800a44c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a450:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a454:	f7f6 f96a 	bl	800072c <__aeabi_ddiv>
 800a458:	4652      	mov	r2, sl
 800a45a:	465b      	mov	r3, fp
 800a45c:	f7f6 f83c 	bl	80004d8 <__aeabi_dmul>
 800a460:	4652      	mov	r2, sl
 800a462:	465b      	mov	r3, fp
 800a464:	f7f5 fe82 	bl	800016c <__adddf3>
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	f7f5 fe7e 	bl	800016c <__adddf3>
 800a470:	a345      	add	r3, pc, #276	; (adr r3, 800a588 <__ieee754_asin+0x2b8>)
 800a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a476:	f7f5 fe77 	bl	8000168 <__aeabi_dsub>
 800a47a:	4602      	mov	r2, r0
 800a47c:	460b      	mov	r3, r1
 800a47e:	a140      	add	r1, pc, #256	; (adr r1, 800a580 <__ieee754_asin+0x2b0>)
 800a480:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a484:	f7f5 fe70 	bl	8000168 <__aeabi_dsub>
 800a488:	9b05      	ldr	r3, [sp, #20]
 800a48a:	4604      	mov	r4, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	bfdc      	itt	le
 800a490:	4602      	movle	r2, r0
 800a492:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800a496:	460d      	mov	r5, r1
 800a498:	bfdc      	itt	le
 800a49a:	4614      	movle	r4, r2
 800a49c:	461d      	movle	r5, r3
 800a49e:	e748      	b.n	800a332 <__ieee754_asin+0x62>
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	f7f6 f819 	bl	80004d8 <__aeabi_dmul>
 800a4a6:	a33c      	add	r3, pc, #240	; (adr r3, 800a598 <__ieee754_asin+0x2c8>)
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	4606      	mov	r6, r0
 800a4ae:	460f      	mov	r7, r1
 800a4b0:	f7f6 f812 	bl	80004d8 <__aeabi_dmul>
 800a4b4:	a33a      	add	r3, pc, #232	; (adr r3, 800a5a0 <__ieee754_asin+0x2d0>)
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	f7f5 fe57 	bl	800016c <__adddf3>
 800a4be:	4632      	mov	r2, r6
 800a4c0:	463b      	mov	r3, r7
 800a4c2:	f7f6 f809 	bl	80004d8 <__aeabi_dmul>
 800a4c6:	a338      	add	r3, pc, #224	; (adr r3, 800a5a8 <__ieee754_asin+0x2d8>)
 800a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4cc:	f7f5 fe4c 	bl	8000168 <__aeabi_dsub>
 800a4d0:	4632      	mov	r2, r6
 800a4d2:	463b      	mov	r3, r7
 800a4d4:	f7f6 f800 	bl	80004d8 <__aeabi_dmul>
 800a4d8:	a335      	add	r3, pc, #212	; (adr r3, 800a5b0 <__ieee754_asin+0x2e0>)
 800a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4de:	f7f5 fe45 	bl	800016c <__adddf3>
 800a4e2:	4632      	mov	r2, r6
 800a4e4:	463b      	mov	r3, r7
 800a4e6:	f7f5 fff7 	bl	80004d8 <__aeabi_dmul>
 800a4ea:	a333      	add	r3, pc, #204	; (adr r3, 800a5b8 <__ieee754_asin+0x2e8>)
 800a4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f0:	f7f5 fe3a 	bl	8000168 <__aeabi_dsub>
 800a4f4:	4632      	mov	r2, r6
 800a4f6:	463b      	mov	r3, r7
 800a4f8:	f7f5 ffee 	bl	80004d8 <__aeabi_dmul>
 800a4fc:	a330      	add	r3, pc, #192	; (adr r3, 800a5c0 <__ieee754_asin+0x2f0>)
 800a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a502:	f7f5 fe33 	bl	800016c <__adddf3>
 800a506:	4632      	mov	r2, r6
 800a508:	463b      	mov	r3, r7
 800a50a:	f7f5 ffe5 	bl	80004d8 <__aeabi_dmul>
 800a50e:	a32e      	add	r3, pc, #184	; (adr r3, 800a5c8 <__ieee754_asin+0x2f8>)
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	4680      	mov	r8, r0
 800a516:	4689      	mov	r9, r1
 800a518:	4630      	mov	r0, r6
 800a51a:	4639      	mov	r1, r7
 800a51c:	f7f5 ffdc 	bl	80004d8 <__aeabi_dmul>
 800a520:	a32b      	add	r3, pc, #172	; (adr r3, 800a5d0 <__ieee754_asin+0x300>)
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	f7f5 fe1f 	bl	8000168 <__aeabi_dsub>
 800a52a:	4632      	mov	r2, r6
 800a52c:	463b      	mov	r3, r7
 800a52e:	f7f5 ffd3 	bl	80004d8 <__aeabi_dmul>
 800a532:	a329      	add	r3, pc, #164	; (adr r3, 800a5d8 <__ieee754_asin+0x308>)
 800a534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a538:	f7f5 fe18 	bl	800016c <__adddf3>
 800a53c:	4632      	mov	r2, r6
 800a53e:	463b      	mov	r3, r7
 800a540:	f7f5 ffca 	bl	80004d8 <__aeabi_dmul>
 800a544:	a326      	add	r3, pc, #152	; (adr r3, 800a5e0 <__ieee754_asin+0x310>)
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	f7f5 fe0d 	bl	8000168 <__aeabi_dsub>
 800a54e:	4632      	mov	r2, r6
 800a550:	463b      	mov	r3, r7
 800a552:	f7f5 ffc1 	bl	80004d8 <__aeabi_dmul>
 800a556:	2200      	movs	r2, #0
 800a558:	4b25      	ldr	r3, [pc, #148]	; (800a5f0 <__ieee754_asin+0x320>)
 800a55a:	f7f5 fe07 	bl	800016c <__adddf3>
 800a55e:	4602      	mov	r2, r0
 800a560:	460b      	mov	r3, r1
 800a562:	4640      	mov	r0, r8
 800a564:	4649      	mov	r1, r9
 800a566:	f7f6 f8e1 	bl	800072c <__aeabi_ddiv>
 800a56a:	4622      	mov	r2, r4
 800a56c:	462b      	mov	r3, r5
 800a56e:	f7f5 ffb3 	bl	80004d8 <__aeabi_dmul>
 800a572:	4602      	mov	r2, r0
 800a574:	460b      	mov	r3, r1
 800a576:	4620      	mov	r0, r4
 800a578:	4629      	mov	r1, r5
 800a57a:	e6ce      	b.n	800a31a <__ieee754_asin+0x4a>
 800a57c:	f3af 8000 	nop.w
 800a580:	54442d18 	.word	0x54442d18
 800a584:	3ff921fb 	.word	0x3ff921fb
 800a588:	33145c07 	.word	0x33145c07
 800a58c:	3c91a626 	.word	0x3c91a626
 800a590:	8800759c 	.word	0x8800759c
 800a594:	7e37e43c 	.word	0x7e37e43c
 800a598:	0dfdf709 	.word	0x0dfdf709
 800a59c:	3f023de1 	.word	0x3f023de1
 800a5a0:	7501b288 	.word	0x7501b288
 800a5a4:	3f49efe0 	.word	0x3f49efe0
 800a5a8:	b5688f3b 	.word	0xb5688f3b
 800a5ac:	3fa48228 	.word	0x3fa48228
 800a5b0:	0e884455 	.word	0x0e884455
 800a5b4:	3fc9c155 	.word	0x3fc9c155
 800a5b8:	03eb6f7d 	.word	0x03eb6f7d
 800a5bc:	3fd4d612 	.word	0x3fd4d612
 800a5c0:	55555555 	.word	0x55555555
 800a5c4:	3fc55555 	.word	0x3fc55555
 800a5c8:	b12e9282 	.word	0xb12e9282
 800a5cc:	3fb3b8c5 	.word	0x3fb3b8c5
 800a5d0:	1b8d0159 	.word	0x1b8d0159
 800a5d4:	3fe6066c 	.word	0x3fe6066c
 800a5d8:	9c598ac8 	.word	0x9c598ac8
 800a5dc:	40002ae5 	.word	0x40002ae5
 800a5e0:	1c8a2d4b 	.word	0x1c8a2d4b
 800a5e4:	40033a27 	.word	0x40033a27
 800a5e8:	3fefffff 	.word	0x3fefffff
 800a5ec:	3fdfffff 	.word	0x3fdfffff
 800a5f0:	3ff00000 	.word	0x3ff00000
 800a5f4:	3fe00000 	.word	0x3fe00000
 800a5f8:	3fef3332 	.word	0x3fef3332
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	f7f5 fdb4 	bl	800016c <__adddf3>
 800a604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a608:	4606      	mov	r6, r0
 800a60a:	460f      	mov	r7, r1
 800a60c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a610:	f7f6 f88c 	bl	800072c <__aeabi_ddiv>
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	4630      	mov	r0, r6
 800a61a:	4639      	mov	r1, r7
 800a61c:	f7f5 ff5c 	bl	80004d8 <__aeabi_dmul>
 800a620:	f04f 0800 	mov.w	r8, #0
 800a624:	4606      	mov	r6, r0
 800a626:	460f      	mov	r7, r1
 800a628:	4642      	mov	r2, r8
 800a62a:	465b      	mov	r3, fp
 800a62c:	4640      	mov	r0, r8
 800a62e:	4659      	mov	r1, fp
 800a630:	f7f5 ff52 	bl	80004d8 <__aeabi_dmul>
 800a634:	4602      	mov	r2, r0
 800a636:	460b      	mov	r3, r1
 800a638:	4620      	mov	r0, r4
 800a63a:	4629      	mov	r1, r5
 800a63c:	f7f5 fd94 	bl	8000168 <__aeabi_dsub>
 800a640:	4642      	mov	r2, r8
 800a642:	4604      	mov	r4, r0
 800a644:	460d      	mov	r5, r1
 800a646:	465b      	mov	r3, fp
 800a648:	4650      	mov	r0, sl
 800a64a:	4659      	mov	r1, fp
 800a64c:	f7f5 fd8e 	bl	800016c <__adddf3>
 800a650:	4602      	mov	r2, r0
 800a652:	460b      	mov	r3, r1
 800a654:	4620      	mov	r0, r4
 800a656:	4629      	mov	r1, r5
 800a658:	f7f6 f868 	bl	800072c <__aeabi_ddiv>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	f7f5 fd84 	bl	800016c <__adddf3>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	a113      	add	r1, pc, #76	; (adr r1, 800a6b8 <__ieee754_asin+0x3e8>)
 800a66a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a66e:	f7f5 fd7b 	bl	8000168 <__aeabi_dsub>
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	4630      	mov	r0, r6
 800a678:	4639      	mov	r1, r7
 800a67a:	f7f5 fd75 	bl	8000168 <__aeabi_dsub>
 800a67e:	4642      	mov	r2, r8
 800a680:	4604      	mov	r4, r0
 800a682:	460d      	mov	r5, r1
 800a684:	465b      	mov	r3, fp
 800a686:	4640      	mov	r0, r8
 800a688:	4659      	mov	r1, fp
 800a68a:	f7f5 fd6f 	bl	800016c <__adddf3>
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	a10b      	add	r1, pc, #44	; (adr r1, 800a6c0 <__ieee754_asin+0x3f0>)
 800a694:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a698:	f7f5 fd66 	bl	8000168 <__aeabi_dsub>
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	f7f5 fd60 	bl	8000168 <__aeabi_dsub>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	a104      	add	r1, pc, #16	; (adr r1, 800a6c0 <__ieee754_asin+0x3f0>)
 800a6ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6b2:	e6e7      	b.n	800a484 <__ieee754_asin+0x1b4>
 800a6b4:	f3af 8000 	nop.w
 800a6b8:	33145c07 	.word	0x33145c07
 800a6bc:	3c91a626 	.word	0x3c91a626
 800a6c0:	54442d18 	.word	0x54442d18
 800a6c4:	3fe921fb 	.word	0x3fe921fb

0800a6c8 <__ieee754_pow>:
 800a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6cc:	b093      	sub	sp, #76	; 0x4c
 800a6ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6d2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800a6d6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a6da:	ea55 0302 	orrs.w	r3, r5, r2
 800a6de:	4607      	mov	r7, r0
 800a6e0:	4688      	mov	r8, r1
 800a6e2:	f000 84bf 	beq.w	800b064 <__ieee754_pow+0x99c>
 800a6e6:	4b7e      	ldr	r3, [pc, #504]	; (800a8e0 <__ieee754_pow+0x218>)
 800a6e8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a6ec:	429c      	cmp	r4, r3
 800a6ee:	4689      	mov	r9, r1
 800a6f0:	4682      	mov	sl, r0
 800a6f2:	dc09      	bgt.n	800a708 <__ieee754_pow+0x40>
 800a6f4:	d103      	bne.n	800a6fe <__ieee754_pow+0x36>
 800a6f6:	b978      	cbnz	r0, 800a718 <__ieee754_pow+0x50>
 800a6f8:	42a5      	cmp	r5, r4
 800a6fa:	dd02      	ble.n	800a702 <__ieee754_pow+0x3a>
 800a6fc:	e00c      	b.n	800a718 <__ieee754_pow+0x50>
 800a6fe:	429d      	cmp	r5, r3
 800a700:	dc02      	bgt.n	800a708 <__ieee754_pow+0x40>
 800a702:	429d      	cmp	r5, r3
 800a704:	d10e      	bne.n	800a724 <__ieee754_pow+0x5c>
 800a706:	b16a      	cbz	r2, 800a724 <__ieee754_pow+0x5c>
 800a708:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a70c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a710:	ea54 030a 	orrs.w	r3, r4, sl
 800a714:	f000 84a6 	beq.w	800b064 <__ieee754_pow+0x99c>
 800a718:	4872      	ldr	r0, [pc, #456]	; (800a8e4 <__ieee754_pow+0x21c>)
 800a71a:	b013      	add	sp, #76	; 0x4c
 800a71c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a720:	f7fe be40 	b.w	80093a4 <nan>
 800a724:	f1b9 0f00 	cmp.w	r9, #0
 800a728:	da39      	bge.n	800a79e <__ieee754_pow+0xd6>
 800a72a:	4b6f      	ldr	r3, [pc, #444]	; (800a8e8 <__ieee754_pow+0x220>)
 800a72c:	429d      	cmp	r5, r3
 800a72e:	dc54      	bgt.n	800a7da <__ieee754_pow+0x112>
 800a730:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a734:	429d      	cmp	r5, r3
 800a736:	f340 84a6 	ble.w	800b086 <__ieee754_pow+0x9be>
 800a73a:	152b      	asrs	r3, r5, #20
 800a73c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a740:	2b14      	cmp	r3, #20
 800a742:	dd0f      	ble.n	800a764 <__ieee754_pow+0x9c>
 800a744:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a748:	fa22 f103 	lsr.w	r1, r2, r3
 800a74c:	fa01 f303 	lsl.w	r3, r1, r3
 800a750:	4293      	cmp	r3, r2
 800a752:	f040 8498 	bne.w	800b086 <__ieee754_pow+0x9be>
 800a756:	f001 0101 	and.w	r1, r1, #1
 800a75a:	f1c1 0302 	rsb	r3, r1, #2
 800a75e:	9300      	str	r3, [sp, #0]
 800a760:	b182      	cbz	r2, 800a784 <__ieee754_pow+0xbc>
 800a762:	e05e      	b.n	800a822 <__ieee754_pow+0x15a>
 800a764:	2a00      	cmp	r2, #0
 800a766:	d15a      	bne.n	800a81e <__ieee754_pow+0x156>
 800a768:	f1c3 0314 	rsb	r3, r3, #20
 800a76c:	fa45 f103 	asr.w	r1, r5, r3
 800a770:	fa01 f303 	lsl.w	r3, r1, r3
 800a774:	42ab      	cmp	r3, r5
 800a776:	f040 8483 	bne.w	800b080 <__ieee754_pow+0x9b8>
 800a77a:	f001 0101 	and.w	r1, r1, #1
 800a77e:	f1c1 0302 	rsb	r3, r1, #2
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	4b59      	ldr	r3, [pc, #356]	; (800a8ec <__ieee754_pow+0x224>)
 800a786:	429d      	cmp	r5, r3
 800a788:	d130      	bne.n	800a7ec <__ieee754_pow+0x124>
 800a78a:	2e00      	cmp	r6, #0
 800a78c:	f280 8474 	bge.w	800b078 <__ieee754_pow+0x9b0>
 800a790:	463a      	mov	r2, r7
 800a792:	4643      	mov	r3, r8
 800a794:	2000      	movs	r0, #0
 800a796:	4955      	ldr	r1, [pc, #340]	; (800a8ec <__ieee754_pow+0x224>)
 800a798:	f7f5 ffc8 	bl	800072c <__aeabi_ddiv>
 800a79c:	e02f      	b.n	800a7fe <__ieee754_pow+0x136>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	2a00      	cmp	r2, #0
 800a7a4:	d13d      	bne.n	800a822 <__ieee754_pow+0x15a>
 800a7a6:	4b4e      	ldr	r3, [pc, #312]	; (800a8e0 <__ieee754_pow+0x218>)
 800a7a8:	429d      	cmp	r5, r3
 800a7aa:	d1eb      	bne.n	800a784 <__ieee754_pow+0xbc>
 800a7ac:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a7b0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a7b4:	ea53 030a 	orrs.w	r3, r3, sl
 800a7b8:	f000 8454 	beq.w	800b064 <__ieee754_pow+0x99c>
 800a7bc:	4b4c      	ldr	r3, [pc, #304]	; (800a8f0 <__ieee754_pow+0x228>)
 800a7be:	429c      	cmp	r4, r3
 800a7c0:	dd0d      	ble.n	800a7de <__ieee754_pow+0x116>
 800a7c2:	2e00      	cmp	r6, #0
 800a7c4:	f280 8454 	bge.w	800b070 <__ieee754_pow+0x9a8>
 800a7c8:	f04f 0b00 	mov.w	fp, #0
 800a7cc:	f04f 0c00 	mov.w	ip, #0
 800a7d0:	4658      	mov	r0, fp
 800a7d2:	4661      	mov	r1, ip
 800a7d4:	b013      	add	sp, #76	; 0x4c
 800a7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7da:	2302      	movs	r3, #2
 800a7dc:	e7e0      	b.n	800a7a0 <__ieee754_pow+0xd8>
 800a7de:	2e00      	cmp	r6, #0
 800a7e0:	daf2      	bge.n	800a7c8 <__ieee754_pow+0x100>
 800a7e2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800a7e6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800a7ea:	e7f1      	b.n	800a7d0 <__ieee754_pow+0x108>
 800a7ec:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800a7f0:	d108      	bne.n	800a804 <__ieee754_pow+0x13c>
 800a7f2:	463a      	mov	r2, r7
 800a7f4:	4643      	mov	r3, r8
 800a7f6:	4638      	mov	r0, r7
 800a7f8:	4641      	mov	r1, r8
 800a7fa:	f7f5 fe6d 	bl	80004d8 <__aeabi_dmul>
 800a7fe:	4683      	mov	fp, r0
 800a800:	468c      	mov	ip, r1
 800a802:	e7e5      	b.n	800a7d0 <__ieee754_pow+0x108>
 800a804:	4b3b      	ldr	r3, [pc, #236]	; (800a8f4 <__ieee754_pow+0x22c>)
 800a806:	429e      	cmp	r6, r3
 800a808:	d10b      	bne.n	800a822 <__ieee754_pow+0x15a>
 800a80a:	f1b9 0f00 	cmp.w	r9, #0
 800a80e:	db08      	blt.n	800a822 <__ieee754_pow+0x15a>
 800a810:	4638      	mov	r0, r7
 800a812:	4641      	mov	r1, r8
 800a814:	b013      	add	sp, #76	; 0x4c
 800a816:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81a:	f000 be5d 	b.w	800b4d8 <__ieee754_sqrt>
 800a81e:	2300      	movs	r3, #0
 800a820:	9300      	str	r3, [sp, #0]
 800a822:	4638      	mov	r0, r7
 800a824:	4641      	mov	r1, r8
 800a826:	f001 fbc1 	bl	800bfac <fabs>
 800a82a:	4683      	mov	fp, r0
 800a82c:	468c      	mov	ip, r1
 800a82e:	f1ba 0f00 	cmp.w	sl, #0
 800a832:	d129      	bne.n	800a888 <__ieee754_pow+0x1c0>
 800a834:	b124      	cbz	r4, 800a840 <__ieee754_pow+0x178>
 800a836:	4b2d      	ldr	r3, [pc, #180]	; (800a8ec <__ieee754_pow+0x224>)
 800a838:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d123      	bne.n	800a888 <__ieee754_pow+0x1c0>
 800a840:	2e00      	cmp	r6, #0
 800a842:	da07      	bge.n	800a854 <__ieee754_pow+0x18c>
 800a844:	465a      	mov	r2, fp
 800a846:	4663      	mov	r3, ip
 800a848:	2000      	movs	r0, #0
 800a84a:	4928      	ldr	r1, [pc, #160]	; (800a8ec <__ieee754_pow+0x224>)
 800a84c:	f7f5 ff6e 	bl	800072c <__aeabi_ddiv>
 800a850:	4683      	mov	fp, r0
 800a852:	468c      	mov	ip, r1
 800a854:	f1b9 0f00 	cmp.w	r9, #0
 800a858:	daba      	bge.n	800a7d0 <__ieee754_pow+0x108>
 800a85a:	9b00      	ldr	r3, [sp, #0]
 800a85c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a860:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a864:	4323      	orrs	r3, r4
 800a866:	d108      	bne.n	800a87a <__ieee754_pow+0x1b2>
 800a868:	465a      	mov	r2, fp
 800a86a:	4663      	mov	r3, ip
 800a86c:	4658      	mov	r0, fp
 800a86e:	4661      	mov	r1, ip
 800a870:	f7f5 fc7a 	bl	8000168 <__aeabi_dsub>
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	e78e      	b.n	800a798 <__ieee754_pow+0xd0>
 800a87a:	9b00      	ldr	r3, [sp, #0]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d1a7      	bne.n	800a7d0 <__ieee754_pow+0x108>
 800a880:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800a884:	469c      	mov	ip, r3
 800a886:	e7a3      	b.n	800a7d0 <__ieee754_pow+0x108>
 800a888:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800a88c:	3b01      	subs	r3, #1
 800a88e:	930c      	str	r3, [sp, #48]	; 0x30
 800a890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a892:	9b00      	ldr	r3, [sp, #0]
 800a894:	4313      	orrs	r3, r2
 800a896:	d104      	bne.n	800a8a2 <__ieee754_pow+0x1da>
 800a898:	463a      	mov	r2, r7
 800a89a:	4643      	mov	r3, r8
 800a89c:	4638      	mov	r0, r7
 800a89e:	4641      	mov	r1, r8
 800a8a0:	e7e6      	b.n	800a870 <__ieee754_pow+0x1a8>
 800a8a2:	4b15      	ldr	r3, [pc, #84]	; (800a8f8 <__ieee754_pow+0x230>)
 800a8a4:	429d      	cmp	r5, r3
 800a8a6:	f340 80f9 	ble.w	800aa9c <__ieee754_pow+0x3d4>
 800a8aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a8ae:	429d      	cmp	r5, r3
 800a8b0:	4b0f      	ldr	r3, [pc, #60]	; (800a8f0 <__ieee754_pow+0x228>)
 800a8b2:	dd09      	ble.n	800a8c8 <__ieee754_pow+0x200>
 800a8b4:	429c      	cmp	r4, r3
 800a8b6:	dc0c      	bgt.n	800a8d2 <__ieee754_pow+0x20a>
 800a8b8:	2e00      	cmp	r6, #0
 800a8ba:	da85      	bge.n	800a7c8 <__ieee754_pow+0x100>
 800a8bc:	a306      	add	r3, pc, #24	; (adr r3, 800a8d8 <__ieee754_pow+0x210>)
 800a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c2:	4610      	mov	r0, r2
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	e798      	b.n	800a7fa <__ieee754_pow+0x132>
 800a8c8:	429c      	cmp	r4, r3
 800a8ca:	dbf5      	blt.n	800a8b8 <__ieee754_pow+0x1f0>
 800a8cc:	4b07      	ldr	r3, [pc, #28]	; (800a8ec <__ieee754_pow+0x224>)
 800a8ce:	429c      	cmp	r4, r3
 800a8d0:	dd14      	ble.n	800a8fc <__ieee754_pow+0x234>
 800a8d2:	2e00      	cmp	r6, #0
 800a8d4:	dcf2      	bgt.n	800a8bc <__ieee754_pow+0x1f4>
 800a8d6:	e777      	b.n	800a7c8 <__ieee754_pow+0x100>
 800a8d8:	8800759c 	.word	0x8800759c
 800a8dc:	7e37e43c 	.word	0x7e37e43c
 800a8e0:	7ff00000 	.word	0x7ff00000
 800a8e4:	0800c71a 	.word	0x0800c71a
 800a8e8:	433fffff 	.word	0x433fffff
 800a8ec:	3ff00000 	.word	0x3ff00000
 800a8f0:	3fefffff 	.word	0x3fefffff
 800a8f4:	3fe00000 	.word	0x3fe00000
 800a8f8:	41e00000 	.word	0x41e00000
 800a8fc:	4661      	mov	r1, ip
 800a8fe:	2200      	movs	r2, #0
 800a900:	4658      	mov	r0, fp
 800a902:	4b61      	ldr	r3, [pc, #388]	; (800aa88 <__ieee754_pow+0x3c0>)
 800a904:	f7f5 fc30 	bl	8000168 <__aeabi_dsub>
 800a908:	a355      	add	r3, pc, #340	; (adr r3, 800aa60 <__ieee754_pow+0x398>)
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	4604      	mov	r4, r0
 800a910:	460d      	mov	r5, r1
 800a912:	f7f5 fde1 	bl	80004d8 <__aeabi_dmul>
 800a916:	a354      	add	r3, pc, #336	; (adr r3, 800aa68 <__ieee754_pow+0x3a0>)
 800a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91c:	4606      	mov	r6, r0
 800a91e:	460f      	mov	r7, r1
 800a920:	4620      	mov	r0, r4
 800a922:	4629      	mov	r1, r5
 800a924:	f7f5 fdd8 	bl	80004d8 <__aeabi_dmul>
 800a928:	2200      	movs	r2, #0
 800a92a:	4682      	mov	sl, r0
 800a92c:	468b      	mov	fp, r1
 800a92e:	4620      	mov	r0, r4
 800a930:	4629      	mov	r1, r5
 800a932:	4b56      	ldr	r3, [pc, #344]	; (800aa8c <__ieee754_pow+0x3c4>)
 800a934:	f7f5 fdd0 	bl	80004d8 <__aeabi_dmul>
 800a938:	4602      	mov	r2, r0
 800a93a:	460b      	mov	r3, r1
 800a93c:	a14c      	add	r1, pc, #304	; (adr r1, 800aa70 <__ieee754_pow+0x3a8>)
 800a93e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a942:	f7f5 fc11 	bl	8000168 <__aeabi_dsub>
 800a946:	4622      	mov	r2, r4
 800a948:	462b      	mov	r3, r5
 800a94a:	f7f5 fdc5 	bl	80004d8 <__aeabi_dmul>
 800a94e:	4602      	mov	r2, r0
 800a950:	460b      	mov	r3, r1
 800a952:	2000      	movs	r0, #0
 800a954:	494e      	ldr	r1, [pc, #312]	; (800aa90 <__ieee754_pow+0x3c8>)
 800a956:	f7f5 fc07 	bl	8000168 <__aeabi_dsub>
 800a95a:	4622      	mov	r2, r4
 800a95c:	462b      	mov	r3, r5
 800a95e:	4680      	mov	r8, r0
 800a960:	4689      	mov	r9, r1
 800a962:	4620      	mov	r0, r4
 800a964:	4629      	mov	r1, r5
 800a966:	f7f5 fdb7 	bl	80004d8 <__aeabi_dmul>
 800a96a:	4602      	mov	r2, r0
 800a96c:	460b      	mov	r3, r1
 800a96e:	4640      	mov	r0, r8
 800a970:	4649      	mov	r1, r9
 800a972:	f7f5 fdb1 	bl	80004d8 <__aeabi_dmul>
 800a976:	a340      	add	r3, pc, #256	; (adr r3, 800aa78 <__ieee754_pow+0x3b0>)
 800a978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97c:	f7f5 fdac 	bl	80004d8 <__aeabi_dmul>
 800a980:	4602      	mov	r2, r0
 800a982:	460b      	mov	r3, r1
 800a984:	4650      	mov	r0, sl
 800a986:	4659      	mov	r1, fp
 800a988:	f7f5 fbee 	bl	8000168 <__aeabi_dsub>
 800a98c:	f04f 0a00 	mov.w	sl, #0
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	4604      	mov	r4, r0
 800a996:	460d      	mov	r5, r1
 800a998:	4630      	mov	r0, r6
 800a99a:	4639      	mov	r1, r7
 800a99c:	f7f5 fbe6 	bl	800016c <__adddf3>
 800a9a0:	4632      	mov	r2, r6
 800a9a2:	463b      	mov	r3, r7
 800a9a4:	4650      	mov	r0, sl
 800a9a6:	468b      	mov	fp, r1
 800a9a8:	f7f5 fbde 	bl	8000168 <__aeabi_dsub>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	4629      	mov	r1, r5
 800a9b4:	f7f5 fbd8 	bl	8000168 <__aeabi_dsub>
 800a9b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a9bc:	9b00      	ldr	r3, [sp, #0]
 800a9be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	f04f 0600 	mov.w	r6, #0
 800a9c8:	f04f 0200 	mov.w	r2, #0
 800a9cc:	bf0c      	ite	eq
 800a9ce:	4b31      	ldreq	r3, [pc, #196]	; (800aa94 <__ieee754_pow+0x3cc>)
 800a9d0:	4b2d      	ldrne	r3, [pc, #180]	; (800aa88 <__ieee754_pow+0x3c0>)
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	460d      	mov	r5, r1
 800a9d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9da:	e9cd 2300 	strd	r2, r3, [sp]
 800a9de:	4632      	mov	r2, r6
 800a9e0:	463b      	mov	r3, r7
 800a9e2:	f7f5 fbc1 	bl	8000168 <__aeabi_dsub>
 800a9e6:	4652      	mov	r2, sl
 800a9e8:	465b      	mov	r3, fp
 800a9ea:	f7f5 fd75 	bl	80004d8 <__aeabi_dmul>
 800a9ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9f2:	4680      	mov	r8, r0
 800a9f4:	4689      	mov	r9, r1
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	f7f5 fd6d 	bl	80004d8 <__aeabi_dmul>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	460b      	mov	r3, r1
 800aa02:	4640      	mov	r0, r8
 800aa04:	4649      	mov	r1, r9
 800aa06:	f7f5 fbb1 	bl	800016c <__adddf3>
 800aa0a:	4632      	mov	r2, r6
 800aa0c:	463b      	mov	r3, r7
 800aa0e:	4680      	mov	r8, r0
 800aa10:	4689      	mov	r9, r1
 800aa12:	4650      	mov	r0, sl
 800aa14:	4659      	mov	r1, fp
 800aa16:	f7f5 fd5f 	bl	80004d8 <__aeabi_dmul>
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	460d      	mov	r5, r1
 800aa1e:	460b      	mov	r3, r1
 800aa20:	4602      	mov	r2, r0
 800aa22:	4649      	mov	r1, r9
 800aa24:	4640      	mov	r0, r8
 800aa26:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800aa2a:	f7f5 fb9f 	bl	800016c <__adddf3>
 800aa2e:	4b1a      	ldr	r3, [pc, #104]	; (800aa98 <__ieee754_pow+0x3d0>)
 800aa30:	4682      	mov	sl, r0
 800aa32:	4299      	cmp	r1, r3
 800aa34:	460f      	mov	r7, r1
 800aa36:	460e      	mov	r6, r1
 800aa38:	f340 82ed 	ble.w	800b016 <__ieee754_pow+0x94e>
 800aa3c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800aa40:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800aa44:	4303      	orrs	r3, r0
 800aa46:	f000 81e7 	beq.w	800ae18 <__ieee754_pow+0x750>
 800aa4a:	a30d      	add	r3, pc, #52	; (adr r3, 800aa80 <__ieee754_pow+0x3b8>)
 800aa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa54:	f7f5 fd40 	bl	80004d8 <__aeabi_dmul>
 800aa58:	a309      	add	r3, pc, #36	; (adr r3, 800aa80 <__ieee754_pow+0x3b8>)
 800aa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5e:	e6cc      	b.n	800a7fa <__ieee754_pow+0x132>
 800aa60:	60000000 	.word	0x60000000
 800aa64:	3ff71547 	.word	0x3ff71547
 800aa68:	f85ddf44 	.word	0xf85ddf44
 800aa6c:	3e54ae0b 	.word	0x3e54ae0b
 800aa70:	55555555 	.word	0x55555555
 800aa74:	3fd55555 	.word	0x3fd55555
 800aa78:	652b82fe 	.word	0x652b82fe
 800aa7c:	3ff71547 	.word	0x3ff71547
 800aa80:	8800759c 	.word	0x8800759c
 800aa84:	7e37e43c 	.word	0x7e37e43c
 800aa88:	3ff00000 	.word	0x3ff00000
 800aa8c:	3fd00000 	.word	0x3fd00000
 800aa90:	3fe00000 	.word	0x3fe00000
 800aa94:	bff00000 	.word	0xbff00000
 800aa98:	408fffff 	.word	0x408fffff
 800aa9c:	4bd4      	ldr	r3, [pc, #848]	; (800adf0 <__ieee754_pow+0x728>)
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	ea09 0303 	and.w	r3, r9, r3
 800aaa4:	b943      	cbnz	r3, 800aab8 <__ieee754_pow+0x3f0>
 800aaa6:	4658      	mov	r0, fp
 800aaa8:	4661      	mov	r1, ip
 800aaaa:	4bd2      	ldr	r3, [pc, #840]	; (800adf4 <__ieee754_pow+0x72c>)
 800aaac:	f7f5 fd14 	bl	80004d8 <__aeabi_dmul>
 800aab0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800aab4:	4683      	mov	fp, r0
 800aab6:	460c      	mov	r4, r1
 800aab8:	1523      	asrs	r3, r4, #20
 800aaba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aabe:	4413      	add	r3, r2
 800aac0:	930b      	str	r3, [sp, #44]	; 0x2c
 800aac2:	4bcd      	ldr	r3, [pc, #820]	; (800adf8 <__ieee754_pow+0x730>)
 800aac4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800aac8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800aacc:	429c      	cmp	r4, r3
 800aace:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aad2:	dd08      	ble.n	800aae6 <__ieee754_pow+0x41e>
 800aad4:	4bc9      	ldr	r3, [pc, #804]	; (800adfc <__ieee754_pow+0x734>)
 800aad6:	429c      	cmp	r4, r3
 800aad8:	f340 819c 	ble.w	800ae14 <__ieee754_pow+0x74c>
 800aadc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aade:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800aae2:	3301      	adds	r3, #1
 800aae4:	930b      	str	r3, [sp, #44]	; 0x2c
 800aae6:	2600      	movs	r6, #0
 800aae8:	00f3      	lsls	r3, r6, #3
 800aaea:	930d      	str	r3, [sp, #52]	; 0x34
 800aaec:	4bc4      	ldr	r3, [pc, #784]	; (800ae00 <__ieee754_pow+0x738>)
 800aaee:	4658      	mov	r0, fp
 800aaf0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aaf4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aaf8:	4629      	mov	r1, r5
 800aafa:	461a      	mov	r2, r3
 800aafc:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800ab00:	4623      	mov	r3, r4
 800ab02:	f7f5 fb31 	bl	8000168 <__aeabi_dsub>
 800ab06:	46da      	mov	sl, fp
 800ab08:	462b      	mov	r3, r5
 800ab0a:	4652      	mov	r2, sl
 800ab0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ab10:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab14:	f7f5 fb2a 	bl	800016c <__adddf3>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	49b9      	ldr	r1, [pc, #740]	; (800ae04 <__ieee754_pow+0x73c>)
 800ab20:	f7f5 fe04 	bl	800072c <__aeabi_ddiv>
 800ab24:	4602      	mov	r2, r0
 800ab26:	460b      	mov	r3, r1
 800ab28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ab30:	f7f5 fcd2 	bl	80004d8 <__aeabi_dmul>
 800ab34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab38:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800ab3c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ab40:	2300      	movs	r3, #0
 800ab42:	2200      	movs	r2, #0
 800ab44:	46ab      	mov	fp, r5
 800ab46:	106d      	asrs	r5, r5, #1
 800ab48:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ab4c:	9304      	str	r3, [sp, #16]
 800ab4e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ab52:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ab56:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800ab5a:	4640      	mov	r0, r8
 800ab5c:	4649      	mov	r1, r9
 800ab5e:	4614      	mov	r4, r2
 800ab60:	461d      	mov	r5, r3
 800ab62:	f7f5 fcb9 	bl	80004d8 <__aeabi_dmul>
 800ab66:	4602      	mov	r2, r0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ab6e:	f7f5 fafb 	bl	8000168 <__aeabi_dsub>
 800ab72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab76:	4606      	mov	r6, r0
 800ab78:	460f      	mov	r7, r1
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	f7f5 faf3 	bl	8000168 <__aeabi_dsub>
 800ab82:	4602      	mov	r2, r0
 800ab84:	460b      	mov	r3, r1
 800ab86:	4650      	mov	r0, sl
 800ab88:	4659      	mov	r1, fp
 800ab8a:	f7f5 faed 	bl	8000168 <__aeabi_dsub>
 800ab8e:	4642      	mov	r2, r8
 800ab90:	464b      	mov	r3, r9
 800ab92:	f7f5 fca1 	bl	80004d8 <__aeabi_dmul>
 800ab96:	4602      	mov	r2, r0
 800ab98:	460b      	mov	r3, r1
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	4639      	mov	r1, r7
 800ab9e:	f7f5 fae3 	bl	8000168 <__aeabi_dsub>
 800aba2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aba6:	f7f5 fc97 	bl	80004d8 <__aeabi_dmul>
 800abaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800abb2:	4610      	mov	r0, r2
 800abb4:	4619      	mov	r1, r3
 800abb6:	f7f5 fc8f 	bl	80004d8 <__aeabi_dmul>
 800abba:	a37b      	add	r3, pc, #492	; (adr r3, 800ada8 <__ieee754_pow+0x6e0>)
 800abbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc0:	4604      	mov	r4, r0
 800abc2:	460d      	mov	r5, r1
 800abc4:	f7f5 fc88 	bl	80004d8 <__aeabi_dmul>
 800abc8:	a379      	add	r3, pc, #484	; (adr r3, 800adb0 <__ieee754_pow+0x6e8>)
 800abca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abce:	f7f5 facd 	bl	800016c <__adddf3>
 800abd2:	4622      	mov	r2, r4
 800abd4:	462b      	mov	r3, r5
 800abd6:	f7f5 fc7f 	bl	80004d8 <__aeabi_dmul>
 800abda:	a377      	add	r3, pc, #476	; (adr r3, 800adb8 <__ieee754_pow+0x6f0>)
 800abdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe0:	f7f5 fac4 	bl	800016c <__adddf3>
 800abe4:	4622      	mov	r2, r4
 800abe6:	462b      	mov	r3, r5
 800abe8:	f7f5 fc76 	bl	80004d8 <__aeabi_dmul>
 800abec:	a374      	add	r3, pc, #464	; (adr r3, 800adc0 <__ieee754_pow+0x6f8>)
 800abee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf2:	f7f5 fabb 	bl	800016c <__adddf3>
 800abf6:	4622      	mov	r2, r4
 800abf8:	462b      	mov	r3, r5
 800abfa:	f7f5 fc6d 	bl	80004d8 <__aeabi_dmul>
 800abfe:	a372      	add	r3, pc, #456	; (adr r3, 800adc8 <__ieee754_pow+0x700>)
 800ac00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac04:	f7f5 fab2 	bl	800016c <__adddf3>
 800ac08:	4622      	mov	r2, r4
 800ac0a:	462b      	mov	r3, r5
 800ac0c:	f7f5 fc64 	bl	80004d8 <__aeabi_dmul>
 800ac10:	a36f      	add	r3, pc, #444	; (adr r3, 800add0 <__ieee754_pow+0x708>)
 800ac12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac16:	f7f5 faa9 	bl	800016c <__adddf3>
 800ac1a:	4622      	mov	r2, r4
 800ac1c:	4606      	mov	r6, r0
 800ac1e:	460f      	mov	r7, r1
 800ac20:	462b      	mov	r3, r5
 800ac22:	4620      	mov	r0, r4
 800ac24:	4629      	mov	r1, r5
 800ac26:	f7f5 fc57 	bl	80004d8 <__aeabi_dmul>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	4630      	mov	r0, r6
 800ac30:	4639      	mov	r1, r7
 800ac32:	f7f5 fc51 	bl	80004d8 <__aeabi_dmul>
 800ac36:	4604      	mov	r4, r0
 800ac38:	460d      	mov	r5, r1
 800ac3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac3e:	4642      	mov	r2, r8
 800ac40:	464b      	mov	r3, r9
 800ac42:	f7f5 fa93 	bl	800016c <__adddf3>
 800ac46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ac4a:	f7f5 fc45 	bl	80004d8 <__aeabi_dmul>
 800ac4e:	4622      	mov	r2, r4
 800ac50:	462b      	mov	r3, r5
 800ac52:	f7f5 fa8b 	bl	800016c <__adddf3>
 800ac56:	4642      	mov	r2, r8
 800ac58:	4606      	mov	r6, r0
 800ac5a:	460f      	mov	r7, r1
 800ac5c:	464b      	mov	r3, r9
 800ac5e:	4640      	mov	r0, r8
 800ac60:	4649      	mov	r1, r9
 800ac62:	f7f5 fc39 	bl	80004d8 <__aeabi_dmul>
 800ac66:	2200      	movs	r2, #0
 800ac68:	4b67      	ldr	r3, [pc, #412]	; (800ae08 <__ieee754_pow+0x740>)
 800ac6a:	4682      	mov	sl, r0
 800ac6c:	468b      	mov	fp, r1
 800ac6e:	f7f5 fa7d 	bl	800016c <__adddf3>
 800ac72:	4632      	mov	r2, r6
 800ac74:	463b      	mov	r3, r7
 800ac76:	f7f5 fa79 	bl	800016c <__adddf3>
 800ac7a:	9c04      	ldr	r4, [sp, #16]
 800ac7c:	460d      	mov	r5, r1
 800ac7e:	4622      	mov	r2, r4
 800ac80:	460b      	mov	r3, r1
 800ac82:	4640      	mov	r0, r8
 800ac84:	4649      	mov	r1, r9
 800ac86:	f7f5 fc27 	bl	80004d8 <__aeabi_dmul>
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	4680      	mov	r8, r0
 800ac8e:	4689      	mov	r9, r1
 800ac90:	4620      	mov	r0, r4
 800ac92:	4629      	mov	r1, r5
 800ac94:	4b5c      	ldr	r3, [pc, #368]	; (800ae08 <__ieee754_pow+0x740>)
 800ac96:	f7f5 fa67 	bl	8000168 <__aeabi_dsub>
 800ac9a:	4652      	mov	r2, sl
 800ac9c:	465b      	mov	r3, fp
 800ac9e:	f7f5 fa63 	bl	8000168 <__aeabi_dsub>
 800aca2:	4602      	mov	r2, r0
 800aca4:	460b      	mov	r3, r1
 800aca6:	4630      	mov	r0, r6
 800aca8:	4639      	mov	r1, r7
 800acaa:	f7f5 fa5d 	bl	8000168 <__aeabi_dsub>
 800acae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acb2:	f7f5 fc11 	bl	80004d8 <__aeabi_dmul>
 800acb6:	4622      	mov	r2, r4
 800acb8:	4606      	mov	r6, r0
 800acba:	460f      	mov	r7, r1
 800acbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800acc0:	462b      	mov	r3, r5
 800acc2:	f7f5 fc09 	bl	80004d8 <__aeabi_dmul>
 800acc6:	4602      	mov	r2, r0
 800acc8:	460b      	mov	r3, r1
 800acca:	4630      	mov	r0, r6
 800accc:	4639      	mov	r1, r7
 800acce:	f7f5 fa4d 	bl	800016c <__adddf3>
 800acd2:	4606      	mov	r6, r0
 800acd4:	460f      	mov	r7, r1
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	4640      	mov	r0, r8
 800acdc:	4649      	mov	r1, r9
 800acde:	f7f5 fa45 	bl	800016c <__adddf3>
 800ace2:	a33d      	add	r3, pc, #244	; (adr r3, 800add8 <__ieee754_pow+0x710>)
 800ace4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace8:	9c04      	ldr	r4, [sp, #16]
 800acea:	460d      	mov	r5, r1
 800acec:	4620      	mov	r0, r4
 800acee:	f7f5 fbf3 	bl	80004d8 <__aeabi_dmul>
 800acf2:	4642      	mov	r2, r8
 800acf4:	464b      	mov	r3, r9
 800acf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800acfa:	4620      	mov	r0, r4
 800acfc:	4629      	mov	r1, r5
 800acfe:	f7f5 fa33 	bl	8000168 <__aeabi_dsub>
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	4630      	mov	r0, r6
 800ad08:	4639      	mov	r1, r7
 800ad0a:	f7f5 fa2d 	bl	8000168 <__aeabi_dsub>
 800ad0e:	a334      	add	r3, pc, #208	; (adr r3, 800ade0 <__ieee754_pow+0x718>)
 800ad10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad14:	f7f5 fbe0 	bl	80004d8 <__aeabi_dmul>
 800ad18:	a333      	add	r3, pc, #204	; (adr r3, 800ade8 <__ieee754_pow+0x720>)
 800ad1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1e:	4606      	mov	r6, r0
 800ad20:	460f      	mov	r7, r1
 800ad22:	4620      	mov	r0, r4
 800ad24:	4629      	mov	r1, r5
 800ad26:	f7f5 fbd7 	bl	80004d8 <__aeabi_dmul>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	4630      	mov	r0, r6
 800ad30:	4639      	mov	r1, r7
 800ad32:	f7f5 fa1b 	bl	800016c <__adddf3>
 800ad36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad38:	4b34      	ldr	r3, [pc, #208]	; (800ae0c <__ieee754_pow+0x744>)
 800ad3a:	4413      	add	r3, r2
 800ad3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad40:	f7f5 fa14 	bl	800016c <__adddf3>
 800ad44:	4680      	mov	r8, r0
 800ad46:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ad48:	4689      	mov	r9, r1
 800ad4a:	f7f5 fb5b 	bl	8000404 <__aeabi_i2d>
 800ad4e:	4604      	mov	r4, r0
 800ad50:	460d      	mov	r5, r1
 800ad52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad54:	4b2e      	ldr	r3, [pc, #184]	; (800ae10 <__ieee754_pow+0x748>)
 800ad56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad5a:	4413      	add	r3, r2
 800ad5c:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ad60:	4642      	mov	r2, r8
 800ad62:	464b      	mov	r3, r9
 800ad64:	f7f5 fa02 	bl	800016c <__adddf3>
 800ad68:	4632      	mov	r2, r6
 800ad6a:	463b      	mov	r3, r7
 800ad6c:	f7f5 f9fe 	bl	800016c <__adddf3>
 800ad70:	4622      	mov	r2, r4
 800ad72:	462b      	mov	r3, r5
 800ad74:	f7f5 f9fa 	bl	800016c <__adddf3>
 800ad78:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ad7c:	4622      	mov	r2, r4
 800ad7e:	462b      	mov	r3, r5
 800ad80:	4650      	mov	r0, sl
 800ad82:	468b      	mov	fp, r1
 800ad84:	f7f5 f9f0 	bl	8000168 <__aeabi_dsub>
 800ad88:	4632      	mov	r2, r6
 800ad8a:	463b      	mov	r3, r7
 800ad8c:	f7f5 f9ec 	bl	8000168 <__aeabi_dsub>
 800ad90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad94:	f7f5 f9e8 	bl	8000168 <__aeabi_dsub>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	4640      	mov	r0, r8
 800ad9e:	4649      	mov	r1, r9
 800ada0:	e608      	b.n	800a9b4 <__ieee754_pow+0x2ec>
 800ada2:	bf00      	nop
 800ada4:	f3af 8000 	nop.w
 800ada8:	4a454eef 	.word	0x4a454eef
 800adac:	3fca7e28 	.word	0x3fca7e28
 800adb0:	93c9db65 	.word	0x93c9db65
 800adb4:	3fcd864a 	.word	0x3fcd864a
 800adb8:	a91d4101 	.word	0xa91d4101
 800adbc:	3fd17460 	.word	0x3fd17460
 800adc0:	518f264d 	.word	0x518f264d
 800adc4:	3fd55555 	.word	0x3fd55555
 800adc8:	db6fabff 	.word	0xdb6fabff
 800adcc:	3fdb6db6 	.word	0x3fdb6db6
 800add0:	33333303 	.word	0x33333303
 800add4:	3fe33333 	.word	0x3fe33333
 800add8:	e0000000 	.word	0xe0000000
 800addc:	3feec709 	.word	0x3feec709
 800ade0:	dc3a03fd 	.word	0xdc3a03fd
 800ade4:	3feec709 	.word	0x3feec709
 800ade8:	145b01f5 	.word	0x145b01f5
 800adec:	be3e2fe0 	.word	0xbe3e2fe0
 800adf0:	7ff00000 	.word	0x7ff00000
 800adf4:	43400000 	.word	0x43400000
 800adf8:	0003988e 	.word	0x0003988e
 800adfc:	000bb679 	.word	0x000bb679
 800ae00:	0800c780 	.word	0x0800c780
 800ae04:	3ff00000 	.word	0x3ff00000
 800ae08:	40080000 	.word	0x40080000
 800ae0c:	0800c7a0 	.word	0x0800c7a0
 800ae10:	0800c790 	.word	0x0800c790
 800ae14:	2601      	movs	r6, #1
 800ae16:	e667      	b.n	800aae8 <__ieee754_pow+0x420>
 800ae18:	a39d      	add	r3, pc, #628	; (adr r3, 800b090 <__ieee754_pow+0x9c8>)
 800ae1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1e:	4640      	mov	r0, r8
 800ae20:	4649      	mov	r1, r9
 800ae22:	f7f5 f9a3 	bl	800016c <__adddf3>
 800ae26:	4622      	mov	r2, r4
 800ae28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae2c:	462b      	mov	r3, r5
 800ae2e:	4650      	mov	r0, sl
 800ae30:	4639      	mov	r1, r7
 800ae32:	f7f5 f999 	bl	8000168 <__aeabi_dsub>
 800ae36:	4602      	mov	r2, r0
 800ae38:	460b      	mov	r3, r1
 800ae3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae3e:	f7f5 fddb 	bl	80009f8 <__aeabi_dcmpgt>
 800ae42:	2800      	cmp	r0, #0
 800ae44:	f47f ae01 	bne.w	800aa4a <__ieee754_pow+0x382>
 800ae48:	4aa5      	ldr	r2, [pc, #660]	; (800b0e0 <__ieee754_pow+0xa18>)
 800ae4a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	f340 8103 	ble.w	800b05a <__ieee754_pow+0x992>
 800ae54:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ae58:	2000      	movs	r0, #0
 800ae5a:	151b      	asrs	r3, r3, #20
 800ae5c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ae60:	fa4a f303 	asr.w	r3, sl, r3
 800ae64:	4433      	add	r3, r6
 800ae66:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ae6a:	4f9e      	ldr	r7, [pc, #632]	; (800b0e4 <__ieee754_pow+0xa1c>)
 800ae6c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ae70:	4117      	asrs	r7, r2
 800ae72:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ae76:	ea23 0107 	bic.w	r1, r3, r7
 800ae7a:	f1c2 0214 	rsb	r2, r2, #20
 800ae7e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ae82:	460b      	mov	r3, r1
 800ae84:	fa4a fa02 	asr.w	sl, sl, r2
 800ae88:	2e00      	cmp	r6, #0
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	4629      	mov	r1, r5
 800ae8e:	4620      	mov	r0, r4
 800ae90:	bfb8      	it	lt
 800ae92:	f1ca 0a00 	rsblt	sl, sl, #0
 800ae96:	f7f5 f967 	bl	8000168 <__aeabi_dsub>
 800ae9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aea2:	2400      	movs	r4, #0
 800aea4:	4642      	mov	r2, r8
 800aea6:	464b      	mov	r3, r9
 800aea8:	f7f5 f960 	bl	800016c <__adddf3>
 800aeac:	a37a      	add	r3, pc, #488	; (adr r3, 800b098 <__ieee754_pow+0x9d0>)
 800aeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	460d      	mov	r5, r1
 800aeb6:	f7f5 fb0f 	bl	80004d8 <__aeabi_dmul>
 800aeba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aebe:	4606      	mov	r6, r0
 800aec0:	460f      	mov	r7, r1
 800aec2:	4620      	mov	r0, r4
 800aec4:	4629      	mov	r1, r5
 800aec6:	f7f5 f94f 	bl	8000168 <__aeabi_dsub>
 800aeca:	4602      	mov	r2, r0
 800aecc:	460b      	mov	r3, r1
 800aece:	4640      	mov	r0, r8
 800aed0:	4649      	mov	r1, r9
 800aed2:	f7f5 f949 	bl	8000168 <__aeabi_dsub>
 800aed6:	a372      	add	r3, pc, #456	; (adr r3, 800b0a0 <__ieee754_pow+0x9d8>)
 800aed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aedc:	f7f5 fafc 	bl	80004d8 <__aeabi_dmul>
 800aee0:	a371      	add	r3, pc, #452	; (adr r3, 800b0a8 <__ieee754_pow+0x9e0>)
 800aee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee6:	4680      	mov	r8, r0
 800aee8:	4689      	mov	r9, r1
 800aeea:	4620      	mov	r0, r4
 800aeec:	4629      	mov	r1, r5
 800aeee:	f7f5 faf3 	bl	80004d8 <__aeabi_dmul>
 800aef2:	4602      	mov	r2, r0
 800aef4:	460b      	mov	r3, r1
 800aef6:	4640      	mov	r0, r8
 800aef8:	4649      	mov	r1, r9
 800aefa:	f7f5 f937 	bl	800016c <__adddf3>
 800aefe:	4604      	mov	r4, r0
 800af00:	460d      	mov	r5, r1
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	4630      	mov	r0, r6
 800af08:	4639      	mov	r1, r7
 800af0a:	f7f5 f92f 	bl	800016c <__adddf3>
 800af0e:	4632      	mov	r2, r6
 800af10:	463b      	mov	r3, r7
 800af12:	4680      	mov	r8, r0
 800af14:	4689      	mov	r9, r1
 800af16:	f7f5 f927 	bl	8000168 <__aeabi_dsub>
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
 800af1e:	4620      	mov	r0, r4
 800af20:	4629      	mov	r1, r5
 800af22:	f7f5 f921 	bl	8000168 <__aeabi_dsub>
 800af26:	4642      	mov	r2, r8
 800af28:	4606      	mov	r6, r0
 800af2a:	460f      	mov	r7, r1
 800af2c:	464b      	mov	r3, r9
 800af2e:	4640      	mov	r0, r8
 800af30:	4649      	mov	r1, r9
 800af32:	f7f5 fad1 	bl	80004d8 <__aeabi_dmul>
 800af36:	a35e      	add	r3, pc, #376	; (adr r3, 800b0b0 <__ieee754_pow+0x9e8>)
 800af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3c:	4604      	mov	r4, r0
 800af3e:	460d      	mov	r5, r1
 800af40:	f7f5 faca 	bl	80004d8 <__aeabi_dmul>
 800af44:	a35c      	add	r3, pc, #368	; (adr r3, 800b0b8 <__ieee754_pow+0x9f0>)
 800af46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4a:	f7f5 f90d 	bl	8000168 <__aeabi_dsub>
 800af4e:	4622      	mov	r2, r4
 800af50:	462b      	mov	r3, r5
 800af52:	f7f5 fac1 	bl	80004d8 <__aeabi_dmul>
 800af56:	a35a      	add	r3, pc, #360	; (adr r3, 800b0c0 <__ieee754_pow+0x9f8>)
 800af58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5c:	f7f5 f906 	bl	800016c <__adddf3>
 800af60:	4622      	mov	r2, r4
 800af62:	462b      	mov	r3, r5
 800af64:	f7f5 fab8 	bl	80004d8 <__aeabi_dmul>
 800af68:	a357      	add	r3, pc, #348	; (adr r3, 800b0c8 <__ieee754_pow+0xa00>)
 800af6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6e:	f7f5 f8fb 	bl	8000168 <__aeabi_dsub>
 800af72:	4622      	mov	r2, r4
 800af74:	462b      	mov	r3, r5
 800af76:	f7f5 faaf 	bl	80004d8 <__aeabi_dmul>
 800af7a:	a355      	add	r3, pc, #340	; (adr r3, 800b0d0 <__ieee754_pow+0xa08>)
 800af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af80:	f7f5 f8f4 	bl	800016c <__adddf3>
 800af84:	4622      	mov	r2, r4
 800af86:	462b      	mov	r3, r5
 800af88:	f7f5 faa6 	bl	80004d8 <__aeabi_dmul>
 800af8c:	4602      	mov	r2, r0
 800af8e:	460b      	mov	r3, r1
 800af90:	4640      	mov	r0, r8
 800af92:	4649      	mov	r1, r9
 800af94:	f7f5 f8e8 	bl	8000168 <__aeabi_dsub>
 800af98:	4604      	mov	r4, r0
 800af9a:	460d      	mov	r5, r1
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4640      	mov	r0, r8
 800afa2:	4649      	mov	r1, r9
 800afa4:	f7f5 fa98 	bl	80004d8 <__aeabi_dmul>
 800afa8:	2200      	movs	r2, #0
 800afaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800afb2:	4620      	mov	r0, r4
 800afb4:	4629      	mov	r1, r5
 800afb6:	f7f5 f8d7 	bl	8000168 <__aeabi_dsub>
 800afba:	4602      	mov	r2, r0
 800afbc:	460b      	mov	r3, r1
 800afbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afc2:	f7f5 fbb3 	bl	800072c <__aeabi_ddiv>
 800afc6:	4632      	mov	r2, r6
 800afc8:	4604      	mov	r4, r0
 800afca:	460d      	mov	r5, r1
 800afcc:	463b      	mov	r3, r7
 800afce:	4640      	mov	r0, r8
 800afd0:	4649      	mov	r1, r9
 800afd2:	f7f5 fa81 	bl	80004d8 <__aeabi_dmul>
 800afd6:	4632      	mov	r2, r6
 800afd8:	463b      	mov	r3, r7
 800afda:	f7f5 f8c7 	bl	800016c <__adddf3>
 800afde:	4602      	mov	r2, r0
 800afe0:	460b      	mov	r3, r1
 800afe2:	4620      	mov	r0, r4
 800afe4:	4629      	mov	r1, r5
 800afe6:	f7f5 f8bf 	bl	8000168 <__aeabi_dsub>
 800afea:	4642      	mov	r2, r8
 800afec:	464b      	mov	r3, r9
 800afee:	f7f5 f8bb 	bl	8000168 <__aeabi_dsub>
 800aff2:	4602      	mov	r2, r0
 800aff4:	460b      	mov	r3, r1
 800aff6:	2000      	movs	r0, #0
 800aff8:	493b      	ldr	r1, [pc, #236]	; (800b0e8 <__ieee754_pow+0xa20>)
 800affa:	f7f5 f8b5 	bl	8000168 <__aeabi_dsub>
 800affe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b002:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b006:	da2b      	bge.n	800b060 <__ieee754_pow+0x998>
 800b008:	4652      	mov	r2, sl
 800b00a:	f001 f8e5 	bl	800c1d8 <scalbn>
 800b00e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b012:	f7ff bbf2 	b.w	800a7fa <__ieee754_pow+0x132>
 800b016:	4b35      	ldr	r3, [pc, #212]	; (800b0ec <__ieee754_pow+0xa24>)
 800b018:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b01c:	429f      	cmp	r7, r3
 800b01e:	f77f af13 	ble.w	800ae48 <__ieee754_pow+0x780>
 800b022:	4b33      	ldr	r3, [pc, #204]	; (800b0f0 <__ieee754_pow+0xa28>)
 800b024:	440b      	add	r3, r1
 800b026:	4303      	orrs	r3, r0
 800b028:	d00b      	beq.n	800b042 <__ieee754_pow+0x97a>
 800b02a:	a32b      	add	r3, pc, #172	; (adr r3, 800b0d8 <__ieee754_pow+0xa10>)
 800b02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b030:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b034:	f7f5 fa50 	bl	80004d8 <__aeabi_dmul>
 800b038:	a327      	add	r3, pc, #156	; (adr r3, 800b0d8 <__ieee754_pow+0xa10>)
 800b03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03e:	f7ff bbdc 	b.w	800a7fa <__ieee754_pow+0x132>
 800b042:	4622      	mov	r2, r4
 800b044:	462b      	mov	r3, r5
 800b046:	f7f5 f88f 	bl	8000168 <__aeabi_dsub>
 800b04a:	4642      	mov	r2, r8
 800b04c:	464b      	mov	r3, r9
 800b04e:	f7f5 fcc9 	bl	80009e4 <__aeabi_dcmpge>
 800b052:	2800      	cmp	r0, #0
 800b054:	f43f aef8 	beq.w	800ae48 <__ieee754_pow+0x780>
 800b058:	e7e7      	b.n	800b02a <__ieee754_pow+0x962>
 800b05a:	f04f 0a00 	mov.w	sl, #0
 800b05e:	e71e      	b.n	800ae9e <__ieee754_pow+0x7d6>
 800b060:	4621      	mov	r1, r4
 800b062:	e7d4      	b.n	800b00e <__ieee754_pow+0x946>
 800b064:	f04f 0b00 	mov.w	fp, #0
 800b068:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b0e8 <__ieee754_pow+0xa20>
 800b06c:	f7ff bbb0 	b.w	800a7d0 <__ieee754_pow+0x108>
 800b070:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b074:	f7ff bbac 	b.w	800a7d0 <__ieee754_pow+0x108>
 800b078:	4638      	mov	r0, r7
 800b07a:	4641      	mov	r1, r8
 800b07c:	f7ff bbbf 	b.w	800a7fe <__ieee754_pow+0x136>
 800b080:	9200      	str	r2, [sp, #0]
 800b082:	f7ff bb7f 	b.w	800a784 <__ieee754_pow+0xbc>
 800b086:	2300      	movs	r3, #0
 800b088:	f7ff bb69 	b.w	800a75e <__ieee754_pow+0x96>
 800b08c:	f3af 8000 	nop.w
 800b090:	652b82fe 	.word	0x652b82fe
 800b094:	3c971547 	.word	0x3c971547
 800b098:	00000000 	.word	0x00000000
 800b09c:	3fe62e43 	.word	0x3fe62e43
 800b0a0:	fefa39ef 	.word	0xfefa39ef
 800b0a4:	3fe62e42 	.word	0x3fe62e42
 800b0a8:	0ca86c39 	.word	0x0ca86c39
 800b0ac:	be205c61 	.word	0xbe205c61
 800b0b0:	72bea4d0 	.word	0x72bea4d0
 800b0b4:	3e663769 	.word	0x3e663769
 800b0b8:	c5d26bf1 	.word	0xc5d26bf1
 800b0bc:	3ebbbd41 	.word	0x3ebbbd41
 800b0c0:	af25de2c 	.word	0xaf25de2c
 800b0c4:	3f11566a 	.word	0x3f11566a
 800b0c8:	16bebd93 	.word	0x16bebd93
 800b0cc:	3f66c16c 	.word	0x3f66c16c
 800b0d0:	5555553e 	.word	0x5555553e
 800b0d4:	3fc55555 	.word	0x3fc55555
 800b0d8:	c2f8f359 	.word	0xc2f8f359
 800b0dc:	01a56e1f 	.word	0x01a56e1f
 800b0e0:	3fe00000 	.word	0x3fe00000
 800b0e4:	000fffff 	.word	0x000fffff
 800b0e8:	3ff00000 	.word	0x3ff00000
 800b0ec:	4090cbff 	.word	0x4090cbff
 800b0f0:	3f6f3400 	.word	0x3f6f3400
 800b0f4:	00000000 	.word	0x00000000

0800b0f8 <__ieee754_rem_pio2>:
 800b0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fc:	4614      	mov	r4, r2
 800b0fe:	4ac4      	ldr	r2, [pc, #784]	; (800b410 <__ieee754_rem_pio2+0x318>)
 800b100:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800b104:	b08d      	sub	sp, #52	; 0x34
 800b106:	4592      	cmp	sl, r2
 800b108:	9104      	str	r1, [sp, #16]
 800b10a:	dc07      	bgt.n	800b11c <__ieee754_rem_pio2+0x24>
 800b10c:	2200      	movs	r2, #0
 800b10e:	2300      	movs	r3, #0
 800b110:	e9c4 0100 	strd	r0, r1, [r4]
 800b114:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b118:	2500      	movs	r5, #0
 800b11a:	e024      	b.n	800b166 <__ieee754_rem_pio2+0x6e>
 800b11c:	4abd      	ldr	r2, [pc, #756]	; (800b414 <__ieee754_rem_pio2+0x31c>)
 800b11e:	4592      	cmp	sl, r2
 800b120:	dc72      	bgt.n	800b208 <__ieee754_rem_pio2+0x110>
 800b122:	9b04      	ldr	r3, [sp, #16]
 800b124:	4dbc      	ldr	r5, [pc, #752]	; (800b418 <__ieee754_rem_pio2+0x320>)
 800b126:	2b00      	cmp	r3, #0
 800b128:	a3ab      	add	r3, pc, #684	; (adr r3, 800b3d8 <__ieee754_rem_pio2+0x2e0>)
 800b12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12e:	dd36      	ble.n	800b19e <__ieee754_rem_pio2+0xa6>
 800b130:	f7f5 f81a 	bl	8000168 <__aeabi_dsub>
 800b134:	45aa      	cmp	sl, r5
 800b136:	4606      	mov	r6, r0
 800b138:	460f      	mov	r7, r1
 800b13a:	d018      	beq.n	800b16e <__ieee754_rem_pio2+0x76>
 800b13c:	a3a8      	add	r3, pc, #672	; (adr r3, 800b3e0 <__ieee754_rem_pio2+0x2e8>)
 800b13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b142:	f7f5 f811 	bl	8000168 <__aeabi_dsub>
 800b146:	4602      	mov	r2, r0
 800b148:	460b      	mov	r3, r1
 800b14a:	4630      	mov	r0, r6
 800b14c:	e9c4 2300 	strd	r2, r3, [r4]
 800b150:	4639      	mov	r1, r7
 800b152:	f7f5 f809 	bl	8000168 <__aeabi_dsub>
 800b156:	a3a2      	add	r3, pc, #648	; (adr r3, 800b3e0 <__ieee754_rem_pio2+0x2e8>)
 800b158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15c:	f7f5 f804 	bl	8000168 <__aeabi_dsub>
 800b160:	2501      	movs	r5, #1
 800b162:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b166:	4628      	mov	r0, r5
 800b168:	b00d      	add	sp, #52	; 0x34
 800b16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b16e:	a39e      	add	r3, pc, #632	; (adr r3, 800b3e8 <__ieee754_rem_pio2+0x2f0>)
 800b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b174:	f7f4 fff8 	bl	8000168 <__aeabi_dsub>
 800b178:	a39d      	add	r3, pc, #628	; (adr r3, 800b3f0 <__ieee754_rem_pio2+0x2f8>)
 800b17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17e:	4606      	mov	r6, r0
 800b180:	460f      	mov	r7, r1
 800b182:	f7f4 fff1 	bl	8000168 <__aeabi_dsub>
 800b186:	4602      	mov	r2, r0
 800b188:	460b      	mov	r3, r1
 800b18a:	4630      	mov	r0, r6
 800b18c:	e9c4 2300 	strd	r2, r3, [r4]
 800b190:	4639      	mov	r1, r7
 800b192:	f7f4 ffe9 	bl	8000168 <__aeabi_dsub>
 800b196:	a396      	add	r3, pc, #600	; (adr r3, 800b3f0 <__ieee754_rem_pio2+0x2f8>)
 800b198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19c:	e7de      	b.n	800b15c <__ieee754_rem_pio2+0x64>
 800b19e:	f7f4 ffe5 	bl	800016c <__adddf3>
 800b1a2:	45aa      	cmp	sl, r5
 800b1a4:	4606      	mov	r6, r0
 800b1a6:	460f      	mov	r7, r1
 800b1a8:	d016      	beq.n	800b1d8 <__ieee754_rem_pio2+0xe0>
 800b1aa:	a38d      	add	r3, pc, #564	; (adr r3, 800b3e0 <__ieee754_rem_pio2+0x2e8>)
 800b1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b0:	f7f4 ffdc 	bl	800016c <__adddf3>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	e9c4 2300 	strd	r2, r3, [r4]
 800b1be:	4639      	mov	r1, r7
 800b1c0:	f7f4 ffd2 	bl	8000168 <__aeabi_dsub>
 800b1c4:	a386      	add	r3, pc, #536	; (adr r3, 800b3e0 <__ieee754_rem_pio2+0x2e8>)
 800b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ca:	f7f4 ffcf 	bl	800016c <__adddf3>
 800b1ce:	f04f 35ff 	mov.w	r5, #4294967295
 800b1d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b1d6:	e7c6      	b.n	800b166 <__ieee754_rem_pio2+0x6e>
 800b1d8:	a383      	add	r3, pc, #524	; (adr r3, 800b3e8 <__ieee754_rem_pio2+0x2f0>)
 800b1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1de:	f7f4 ffc5 	bl	800016c <__adddf3>
 800b1e2:	a383      	add	r3, pc, #524	; (adr r3, 800b3f0 <__ieee754_rem_pio2+0x2f8>)
 800b1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e8:	4606      	mov	r6, r0
 800b1ea:	460f      	mov	r7, r1
 800b1ec:	f7f4 ffbe 	bl	800016c <__adddf3>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	e9c4 2300 	strd	r2, r3, [r4]
 800b1fa:	4639      	mov	r1, r7
 800b1fc:	f7f4 ffb4 	bl	8000168 <__aeabi_dsub>
 800b200:	a37b      	add	r3, pc, #492	; (adr r3, 800b3f0 <__ieee754_rem_pio2+0x2f8>)
 800b202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b206:	e7e0      	b.n	800b1ca <__ieee754_rem_pio2+0xd2>
 800b208:	4a84      	ldr	r2, [pc, #528]	; (800b41c <__ieee754_rem_pio2+0x324>)
 800b20a:	4592      	cmp	sl, r2
 800b20c:	f300 80d5 	bgt.w	800b3ba <__ieee754_rem_pio2+0x2c2>
 800b210:	f000 fecc 	bl	800bfac <fabs>
 800b214:	a378      	add	r3, pc, #480	; (adr r3, 800b3f8 <__ieee754_rem_pio2+0x300>)
 800b216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21a:	4606      	mov	r6, r0
 800b21c:	460f      	mov	r7, r1
 800b21e:	f7f5 f95b 	bl	80004d8 <__aeabi_dmul>
 800b222:	2200      	movs	r2, #0
 800b224:	4b7e      	ldr	r3, [pc, #504]	; (800b420 <__ieee754_rem_pio2+0x328>)
 800b226:	f7f4 ffa1 	bl	800016c <__adddf3>
 800b22a:	f7f5 fc05 	bl	8000a38 <__aeabi_d2iz>
 800b22e:	4605      	mov	r5, r0
 800b230:	f7f5 f8e8 	bl	8000404 <__aeabi_i2d>
 800b234:	4602      	mov	r2, r0
 800b236:	460b      	mov	r3, r1
 800b238:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b23c:	a366      	add	r3, pc, #408	; (adr r3, 800b3d8 <__ieee754_rem_pio2+0x2e0>)
 800b23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b242:	f7f5 f949 	bl	80004d8 <__aeabi_dmul>
 800b246:	4602      	mov	r2, r0
 800b248:	460b      	mov	r3, r1
 800b24a:	4630      	mov	r0, r6
 800b24c:	4639      	mov	r1, r7
 800b24e:	f7f4 ff8b 	bl	8000168 <__aeabi_dsub>
 800b252:	a363      	add	r3, pc, #396	; (adr r3, 800b3e0 <__ieee754_rem_pio2+0x2e8>)
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	4680      	mov	r8, r0
 800b25a:	4689      	mov	r9, r1
 800b25c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b260:	f7f5 f93a 	bl	80004d8 <__aeabi_dmul>
 800b264:	2d1f      	cmp	r5, #31
 800b266:	4606      	mov	r6, r0
 800b268:	460f      	mov	r7, r1
 800b26a:	dc0e      	bgt.n	800b28a <__ieee754_rem_pio2+0x192>
 800b26c:	4b6d      	ldr	r3, [pc, #436]	; (800b424 <__ieee754_rem_pio2+0x32c>)
 800b26e:	1e6a      	subs	r2, r5, #1
 800b270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b274:	4553      	cmp	r3, sl
 800b276:	d008      	beq.n	800b28a <__ieee754_rem_pio2+0x192>
 800b278:	4632      	mov	r2, r6
 800b27a:	463b      	mov	r3, r7
 800b27c:	4640      	mov	r0, r8
 800b27e:	4649      	mov	r1, r9
 800b280:	f7f4 ff72 	bl	8000168 <__aeabi_dsub>
 800b284:	e9c4 0100 	strd	r0, r1, [r4]
 800b288:	e013      	b.n	800b2b2 <__ieee754_rem_pio2+0x1ba>
 800b28a:	463b      	mov	r3, r7
 800b28c:	4632      	mov	r2, r6
 800b28e:	4640      	mov	r0, r8
 800b290:	4649      	mov	r1, r9
 800b292:	f7f4 ff69 	bl	8000168 <__aeabi_dsub>
 800b296:	ea4f 532a 	mov.w	r3, sl, asr #20
 800b29a:	9305      	str	r3, [sp, #20]
 800b29c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b2a0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800b2a4:	f1ba 0f10 	cmp.w	sl, #16
 800b2a8:	dc1f      	bgt.n	800b2ea <__ieee754_rem_pio2+0x1f2>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	e9c4 2300 	strd	r2, r3, [r4]
 800b2b2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800b2b6:	4640      	mov	r0, r8
 800b2b8:	4653      	mov	r3, sl
 800b2ba:	4649      	mov	r1, r9
 800b2bc:	f7f4 ff54 	bl	8000168 <__aeabi_dsub>
 800b2c0:	4632      	mov	r2, r6
 800b2c2:	463b      	mov	r3, r7
 800b2c4:	f7f4 ff50 	bl	8000168 <__aeabi_dsub>
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b2ce:	9904      	ldr	r1, [sp, #16]
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	2900      	cmp	r1, #0
 800b2d4:	f6bf af47 	bge.w	800b166 <__ieee754_rem_pio2+0x6e>
 800b2d8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800b2dc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b2e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2e4:	60e3      	str	r3, [r4, #12]
 800b2e6:	426d      	negs	r5, r5
 800b2e8:	e73d      	b.n	800b166 <__ieee754_rem_pio2+0x6e>
 800b2ea:	a33f      	add	r3, pc, #252	; (adr r3, 800b3e8 <__ieee754_rem_pio2+0x2f0>)
 800b2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2f4:	f7f5 f8f0 	bl	80004d8 <__aeabi_dmul>
 800b2f8:	4606      	mov	r6, r0
 800b2fa:	460f      	mov	r7, r1
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	460b      	mov	r3, r1
 800b300:	4640      	mov	r0, r8
 800b302:	4649      	mov	r1, r9
 800b304:	f7f4 ff30 	bl	8000168 <__aeabi_dsub>
 800b308:	4602      	mov	r2, r0
 800b30a:	460b      	mov	r3, r1
 800b30c:	4682      	mov	sl, r0
 800b30e:	468b      	mov	fp, r1
 800b310:	4640      	mov	r0, r8
 800b312:	4649      	mov	r1, r9
 800b314:	f7f4 ff28 	bl	8000168 <__aeabi_dsub>
 800b318:	4632      	mov	r2, r6
 800b31a:	463b      	mov	r3, r7
 800b31c:	f7f4 ff24 	bl	8000168 <__aeabi_dsub>
 800b320:	a333      	add	r3, pc, #204	; (adr r3, 800b3f0 <__ieee754_rem_pio2+0x2f8>)
 800b322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b326:	4606      	mov	r6, r0
 800b328:	460f      	mov	r7, r1
 800b32a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b32e:	f7f5 f8d3 	bl	80004d8 <__aeabi_dmul>
 800b332:	4632      	mov	r2, r6
 800b334:	463b      	mov	r3, r7
 800b336:	f7f4 ff17 	bl	8000168 <__aeabi_dsub>
 800b33a:	4602      	mov	r2, r0
 800b33c:	460b      	mov	r3, r1
 800b33e:	4606      	mov	r6, r0
 800b340:	460f      	mov	r7, r1
 800b342:	4650      	mov	r0, sl
 800b344:	4659      	mov	r1, fp
 800b346:	f7f4 ff0f 	bl	8000168 <__aeabi_dsub>
 800b34a:	9a05      	ldr	r2, [sp, #20]
 800b34c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	2b31      	cmp	r3, #49	; 0x31
 800b354:	dc06      	bgt.n	800b364 <__ieee754_rem_pio2+0x26c>
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	46d0      	mov	r8, sl
 800b35c:	46d9      	mov	r9, fp
 800b35e:	e9c4 2300 	strd	r2, r3, [r4]
 800b362:	e7a6      	b.n	800b2b2 <__ieee754_rem_pio2+0x1ba>
 800b364:	a326      	add	r3, pc, #152	; (adr r3, 800b400 <__ieee754_rem_pio2+0x308>)
 800b366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b36e:	f7f5 f8b3 	bl	80004d8 <__aeabi_dmul>
 800b372:	4606      	mov	r6, r0
 800b374:	460f      	mov	r7, r1
 800b376:	4602      	mov	r2, r0
 800b378:	460b      	mov	r3, r1
 800b37a:	4650      	mov	r0, sl
 800b37c:	4659      	mov	r1, fp
 800b37e:	f7f4 fef3 	bl	8000168 <__aeabi_dsub>
 800b382:	4602      	mov	r2, r0
 800b384:	460b      	mov	r3, r1
 800b386:	4680      	mov	r8, r0
 800b388:	4689      	mov	r9, r1
 800b38a:	4650      	mov	r0, sl
 800b38c:	4659      	mov	r1, fp
 800b38e:	f7f4 feeb 	bl	8000168 <__aeabi_dsub>
 800b392:	4632      	mov	r2, r6
 800b394:	463b      	mov	r3, r7
 800b396:	f7f4 fee7 	bl	8000168 <__aeabi_dsub>
 800b39a:	a31b      	add	r3, pc, #108	; (adr r3, 800b408 <__ieee754_rem_pio2+0x310>)
 800b39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	460f      	mov	r7, r1
 800b3a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3a8:	f7f5 f896 	bl	80004d8 <__aeabi_dmul>
 800b3ac:	4632      	mov	r2, r6
 800b3ae:	463b      	mov	r3, r7
 800b3b0:	f7f4 feda 	bl	8000168 <__aeabi_dsub>
 800b3b4:	4606      	mov	r6, r0
 800b3b6:	460f      	mov	r7, r1
 800b3b8:	e75e      	b.n	800b278 <__ieee754_rem_pio2+0x180>
 800b3ba:	4a1b      	ldr	r2, [pc, #108]	; (800b428 <__ieee754_rem_pio2+0x330>)
 800b3bc:	4592      	cmp	sl, r2
 800b3be:	dd35      	ble.n	800b42c <__ieee754_rem_pio2+0x334>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	f7f4 fed0 	bl	8000168 <__aeabi_dsub>
 800b3c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b3cc:	e9c4 0100 	strd	r0, r1, [r4]
 800b3d0:	e6a2      	b.n	800b118 <__ieee754_rem_pio2+0x20>
 800b3d2:	bf00      	nop
 800b3d4:	f3af 8000 	nop.w
 800b3d8:	54400000 	.word	0x54400000
 800b3dc:	3ff921fb 	.word	0x3ff921fb
 800b3e0:	1a626331 	.word	0x1a626331
 800b3e4:	3dd0b461 	.word	0x3dd0b461
 800b3e8:	1a600000 	.word	0x1a600000
 800b3ec:	3dd0b461 	.word	0x3dd0b461
 800b3f0:	2e037073 	.word	0x2e037073
 800b3f4:	3ba3198a 	.word	0x3ba3198a
 800b3f8:	6dc9c883 	.word	0x6dc9c883
 800b3fc:	3fe45f30 	.word	0x3fe45f30
 800b400:	2e000000 	.word	0x2e000000
 800b404:	3ba3198a 	.word	0x3ba3198a
 800b408:	252049c1 	.word	0x252049c1
 800b40c:	397b839a 	.word	0x397b839a
 800b410:	3fe921fb 	.word	0x3fe921fb
 800b414:	4002d97b 	.word	0x4002d97b
 800b418:	3ff921fb 	.word	0x3ff921fb
 800b41c:	413921fb 	.word	0x413921fb
 800b420:	3fe00000 	.word	0x3fe00000
 800b424:	0800c7b0 	.word	0x0800c7b0
 800b428:	7fefffff 	.word	0x7fefffff
 800b42c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800b430:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b434:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800b438:	460f      	mov	r7, r1
 800b43a:	4606      	mov	r6, r0
 800b43c:	f7f5 fafc 	bl	8000a38 <__aeabi_d2iz>
 800b440:	f7f4 ffe0 	bl	8000404 <__aeabi_i2d>
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	4630      	mov	r0, r6
 800b44a:	4639      	mov	r1, r7
 800b44c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b450:	f7f4 fe8a 	bl	8000168 <__aeabi_dsub>
 800b454:	2200      	movs	r2, #0
 800b456:	4b1e      	ldr	r3, [pc, #120]	; (800b4d0 <__ieee754_rem_pio2+0x3d8>)
 800b458:	f7f5 f83e 	bl	80004d8 <__aeabi_dmul>
 800b45c:	460f      	mov	r7, r1
 800b45e:	4606      	mov	r6, r0
 800b460:	f7f5 faea 	bl	8000a38 <__aeabi_d2iz>
 800b464:	f7f4 ffce 	bl	8000404 <__aeabi_i2d>
 800b468:	4602      	mov	r2, r0
 800b46a:	460b      	mov	r3, r1
 800b46c:	4630      	mov	r0, r6
 800b46e:	4639      	mov	r1, r7
 800b470:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b474:	f7f4 fe78 	bl	8000168 <__aeabi_dsub>
 800b478:	2200      	movs	r2, #0
 800b47a:	4b15      	ldr	r3, [pc, #84]	; (800b4d0 <__ieee754_rem_pio2+0x3d8>)
 800b47c:	f7f5 f82c 	bl	80004d8 <__aeabi_dmul>
 800b480:	f04f 0803 	mov.w	r8, #3
 800b484:	2600      	movs	r6, #0
 800b486:	2700      	movs	r7, #0
 800b488:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b48c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800b490:	4632      	mov	r2, r6
 800b492:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800b496:	463b      	mov	r3, r7
 800b498:	46c2      	mov	sl, r8
 800b49a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b49e:	f7f5 fa83 	bl	80009a8 <__aeabi_dcmpeq>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d1f4      	bne.n	800b490 <__ieee754_rem_pio2+0x398>
 800b4a6:	4b0b      	ldr	r3, [pc, #44]	; (800b4d4 <__ieee754_rem_pio2+0x3dc>)
 800b4a8:	462a      	mov	r2, r5
 800b4aa:	9301      	str	r3, [sp, #4]
 800b4ac:	2302      	movs	r3, #2
 800b4ae:	4621      	mov	r1, r4
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	a806      	add	r0, sp, #24
 800b4b4:	4653      	mov	r3, sl
 800b4b6:	f000 f979 	bl	800b7ac <__kernel_rem_pio2>
 800b4ba:	9b04      	ldr	r3, [sp, #16]
 800b4bc:	4605      	mov	r5, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	f6bf ae51 	bge.w	800b166 <__ieee754_rem_pio2+0x6e>
 800b4c4:	6863      	ldr	r3, [r4, #4]
 800b4c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b4ca:	6063      	str	r3, [r4, #4]
 800b4cc:	68e3      	ldr	r3, [r4, #12]
 800b4ce:	e707      	b.n	800b2e0 <__ieee754_rem_pio2+0x1e8>
 800b4d0:	41700000 	.word	0x41700000
 800b4d4:	0800c830 	.word	0x0800c830

0800b4d8 <__ieee754_sqrt>:
 800b4d8:	f8df c150 	ldr.w	ip, [pc, #336]	; 800b62c <__ieee754_sqrt+0x154>
 800b4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e0:	ea3c 0c01 	bics.w	ip, ip, r1
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	460d      	mov	r5, r1
 800b4ea:	460a      	mov	r2, r1
 800b4ec:	4607      	mov	r7, r0
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	d10e      	bne.n	800b510 <__ieee754_sqrt+0x38>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	f7f4 fff0 	bl	80004d8 <__aeabi_dmul>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	4629      	mov	r1, r5
 800b500:	f7f4 fe34 	bl	800016c <__adddf3>
 800b504:	4606      	mov	r6, r0
 800b506:	460d      	mov	r5, r1
 800b508:	4630      	mov	r0, r6
 800b50a:	4629      	mov	r1, r5
 800b50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b510:	2900      	cmp	r1, #0
 800b512:	dc0d      	bgt.n	800b530 <__ieee754_sqrt+0x58>
 800b514:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b518:	ea5c 0707 	orrs.w	r7, ip, r7
 800b51c:	d0f4      	beq.n	800b508 <__ieee754_sqrt+0x30>
 800b51e:	b139      	cbz	r1, 800b530 <__ieee754_sqrt+0x58>
 800b520:	4602      	mov	r2, r0
 800b522:	f7f4 fe21 	bl	8000168 <__aeabi_dsub>
 800b526:	4602      	mov	r2, r0
 800b528:	460b      	mov	r3, r1
 800b52a:	f7f5 f8ff 	bl	800072c <__aeabi_ddiv>
 800b52e:	e7e9      	b.n	800b504 <__ieee754_sqrt+0x2c>
 800b530:	1512      	asrs	r2, r2, #20
 800b532:	d074      	beq.n	800b61e <__ieee754_sqrt+0x146>
 800b534:	2000      	movs	r0, #0
 800b536:	07d5      	lsls	r5, r2, #31
 800b538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b53c:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800b540:	bf5e      	ittt	pl
 800b542:	0fe3      	lsrpl	r3, r4, #31
 800b544:	0064      	lslpl	r4, r4, #1
 800b546:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800b54a:	0fe3      	lsrs	r3, r4, #31
 800b54c:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b550:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800b554:	2516      	movs	r5, #22
 800b556:	4601      	mov	r1, r0
 800b558:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b55c:	1076      	asrs	r6, r6, #1
 800b55e:	0064      	lsls	r4, r4, #1
 800b560:	188f      	adds	r7, r1, r2
 800b562:	429f      	cmp	r7, r3
 800b564:	bfde      	ittt	le
 800b566:	1bdb      	suble	r3, r3, r7
 800b568:	18b9      	addle	r1, r7, r2
 800b56a:	1880      	addle	r0, r0, r2
 800b56c:	005b      	lsls	r3, r3, #1
 800b56e:	3d01      	subs	r5, #1
 800b570:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b574:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b578:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b57c:	d1f0      	bne.n	800b560 <__ieee754_sqrt+0x88>
 800b57e:	462a      	mov	r2, r5
 800b580:	f04f 0e20 	mov.w	lr, #32
 800b584:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800b588:	428b      	cmp	r3, r1
 800b58a:	eb07 0c05 	add.w	ip, r7, r5
 800b58e:	dc02      	bgt.n	800b596 <__ieee754_sqrt+0xbe>
 800b590:	d113      	bne.n	800b5ba <__ieee754_sqrt+0xe2>
 800b592:	45a4      	cmp	ip, r4
 800b594:	d811      	bhi.n	800b5ba <__ieee754_sqrt+0xe2>
 800b596:	f1bc 0f00 	cmp.w	ip, #0
 800b59a:	eb0c 0507 	add.w	r5, ip, r7
 800b59e:	da43      	bge.n	800b628 <__ieee754_sqrt+0x150>
 800b5a0:	2d00      	cmp	r5, #0
 800b5a2:	db41      	blt.n	800b628 <__ieee754_sqrt+0x150>
 800b5a4:	f101 0801 	add.w	r8, r1, #1
 800b5a8:	1a5b      	subs	r3, r3, r1
 800b5aa:	4641      	mov	r1, r8
 800b5ac:	45a4      	cmp	ip, r4
 800b5ae:	bf88      	it	hi
 800b5b0:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b5b4:	eba4 040c 	sub.w	r4, r4, ip
 800b5b8:	443a      	add	r2, r7
 800b5ba:	005b      	lsls	r3, r3, #1
 800b5bc:	f1be 0e01 	subs.w	lr, lr, #1
 800b5c0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b5c4:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800b5c8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b5cc:	d1dc      	bne.n	800b588 <__ieee754_sqrt+0xb0>
 800b5ce:	4323      	orrs	r3, r4
 800b5d0:	d006      	beq.n	800b5e0 <__ieee754_sqrt+0x108>
 800b5d2:	1c54      	adds	r4, r2, #1
 800b5d4:	bf0b      	itete	eq
 800b5d6:	4672      	moveq	r2, lr
 800b5d8:	3201      	addne	r2, #1
 800b5da:	3001      	addeq	r0, #1
 800b5dc:	f022 0201 	bicne.w	r2, r2, #1
 800b5e0:	1043      	asrs	r3, r0, #1
 800b5e2:	07c1      	lsls	r1, r0, #31
 800b5e4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b5e8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b5ec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b5f0:	bf48      	it	mi
 800b5f2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b5f6:	4610      	mov	r0, r2
 800b5f8:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800b5fc:	e782      	b.n	800b504 <__ieee754_sqrt+0x2c>
 800b5fe:	0ae3      	lsrs	r3, r4, #11
 800b600:	3915      	subs	r1, #21
 800b602:	0564      	lsls	r4, r4, #21
 800b604:	2b00      	cmp	r3, #0
 800b606:	d0fa      	beq.n	800b5fe <__ieee754_sqrt+0x126>
 800b608:	02de      	lsls	r6, r3, #11
 800b60a:	d50a      	bpl.n	800b622 <__ieee754_sqrt+0x14a>
 800b60c:	f1c2 0020 	rsb	r0, r2, #32
 800b610:	fa24 f000 	lsr.w	r0, r4, r0
 800b614:	1e55      	subs	r5, r2, #1
 800b616:	4094      	lsls	r4, r2
 800b618:	4303      	orrs	r3, r0
 800b61a:	1b4a      	subs	r2, r1, r5
 800b61c:	e78a      	b.n	800b534 <__ieee754_sqrt+0x5c>
 800b61e:	4611      	mov	r1, r2
 800b620:	e7f0      	b.n	800b604 <__ieee754_sqrt+0x12c>
 800b622:	005b      	lsls	r3, r3, #1
 800b624:	3201      	adds	r2, #1
 800b626:	e7ef      	b.n	800b608 <__ieee754_sqrt+0x130>
 800b628:	4688      	mov	r8, r1
 800b62a:	e7bd      	b.n	800b5a8 <__ieee754_sqrt+0xd0>
 800b62c:	7ff00000 	.word	0x7ff00000

0800b630 <__kernel_cos>:
 800b630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b634:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b638:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b63c:	4680      	mov	r8, r0
 800b63e:	460f      	mov	r7, r1
 800b640:	e9cd 2300 	strd	r2, r3, [sp]
 800b644:	da04      	bge.n	800b650 <__kernel_cos+0x20>
 800b646:	f7f5 f9f7 	bl	8000a38 <__aeabi_d2iz>
 800b64a:	2800      	cmp	r0, #0
 800b64c:	f000 8086 	beq.w	800b75c <__kernel_cos+0x12c>
 800b650:	4642      	mov	r2, r8
 800b652:	463b      	mov	r3, r7
 800b654:	4640      	mov	r0, r8
 800b656:	4639      	mov	r1, r7
 800b658:	f7f4 ff3e 	bl	80004d8 <__aeabi_dmul>
 800b65c:	2200      	movs	r2, #0
 800b65e:	4b4e      	ldr	r3, [pc, #312]	; (800b798 <__kernel_cos+0x168>)
 800b660:	4604      	mov	r4, r0
 800b662:	460d      	mov	r5, r1
 800b664:	f7f4 ff38 	bl	80004d8 <__aeabi_dmul>
 800b668:	a33f      	add	r3, pc, #252	; (adr r3, 800b768 <__kernel_cos+0x138>)
 800b66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66e:	4682      	mov	sl, r0
 800b670:	468b      	mov	fp, r1
 800b672:	4620      	mov	r0, r4
 800b674:	4629      	mov	r1, r5
 800b676:	f7f4 ff2f 	bl	80004d8 <__aeabi_dmul>
 800b67a:	a33d      	add	r3, pc, #244	; (adr r3, 800b770 <__kernel_cos+0x140>)
 800b67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b680:	f7f4 fd74 	bl	800016c <__adddf3>
 800b684:	4622      	mov	r2, r4
 800b686:	462b      	mov	r3, r5
 800b688:	f7f4 ff26 	bl	80004d8 <__aeabi_dmul>
 800b68c:	a33a      	add	r3, pc, #232	; (adr r3, 800b778 <__kernel_cos+0x148>)
 800b68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b692:	f7f4 fd69 	bl	8000168 <__aeabi_dsub>
 800b696:	4622      	mov	r2, r4
 800b698:	462b      	mov	r3, r5
 800b69a:	f7f4 ff1d 	bl	80004d8 <__aeabi_dmul>
 800b69e:	a338      	add	r3, pc, #224	; (adr r3, 800b780 <__kernel_cos+0x150>)
 800b6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a4:	f7f4 fd62 	bl	800016c <__adddf3>
 800b6a8:	4622      	mov	r2, r4
 800b6aa:	462b      	mov	r3, r5
 800b6ac:	f7f4 ff14 	bl	80004d8 <__aeabi_dmul>
 800b6b0:	a335      	add	r3, pc, #212	; (adr r3, 800b788 <__kernel_cos+0x158>)
 800b6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b6:	f7f4 fd57 	bl	8000168 <__aeabi_dsub>
 800b6ba:	4622      	mov	r2, r4
 800b6bc:	462b      	mov	r3, r5
 800b6be:	f7f4 ff0b 	bl	80004d8 <__aeabi_dmul>
 800b6c2:	a333      	add	r3, pc, #204	; (adr r3, 800b790 <__kernel_cos+0x160>)
 800b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c8:	f7f4 fd50 	bl	800016c <__adddf3>
 800b6cc:	4622      	mov	r2, r4
 800b6ce:	462b      	mov	r3, r5
 800b6d0:	f7f4 ff02 	bl	80004d8 <__aeabi_dmul>
 800b6d4:	4622      	mov	r2, r4
 800b6d6:	462b      	mov	r3, r5
 800b6d8:	f7f4 fefe 	bl	80004d8 <__aeabi_dmul>
 800b6dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	460d      	mov	r5, r1
 800b6e4:	4640      	mov	r0, r8
 800b6e6:	4639      	mov	r1, r7
 800b6e8:	f7f4 fef6 	bl	80004d8 <__aeabi_dmul>
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f7f4 fd38 	bl	8000168 <__aeabi_dsub>
 800b6f8:	4b28      	ldr	r3, [pc, #160]	; (800b79c <__kernel_cos+0x16c>)
 800b6fa:	4680      	mov	r8, r0
 800b6fc:	429e      	cmp	r6, r3
 800b6fe:	4689      	mov	r9, r1
 800b700:	dc0e      	bgt.n	800b720 <__kernel_cos+0xf0>
 800b702:	4602      	mov	r2, r0
 800b704:	460b      	mov	r3, r1
 800b706:	4650      	mov	r0, sl
 800b708:	4659      	mov	r1, fp
 800b70a:	f7f4 fd2d 	bl	8000168 <__aeabi_dsub>
 800b70e:	4602      	mov	r2, r0
 800b710:	2000      	movs	r0, #0
 800b712:	460b      	mov	r3, r1
 800b714:	4922      	ldr	r1, [pc, #136]	; (800b7a0 <__kernel_cos+0x170>)
 800b716:	f7f4 fd27 	bl	8000168 <__aeabi_dsub>
 800b71a:	b003      	add	sp, #12
 800b71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b720:	2400      	movs	r4, #0
 800b722:	4b20      	ldr	r3, [pc, #128]	; (800b7a4 <__kernel_cos+0x174>)
 800b724:	4622      	mov	r2, r4
 800b726:	429e      	cmp	r6, r3
 800b728:	bfcc      	ite	gt
 800b72a:	4d1f      	ldrgt	r5, [pc, #124]	; (800b7a8 <__kernel_cos+0x178>)
 800b72c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b730:	462b      	mov	r3, r5
 800b732:	2000      	movs	r0, #0
 800b734:	491a      	ldr	r1, [pc, #104]	; (800b7a0 <__kernel_cos+0x170>)
 800b736:	f7f4 fd17 	bl	8000168 <__aeabi_dsub>
 800b73a:	4622      	mov	r2, r4
 800b73c:	4606      	mov	r6, r0
 800b73e:	460f      	mov	r7, r1
 800b740:	462b      	mov	r3, r5
 800b742:	4650      	mov	r0, sl
 800b744:	4659      	mov	r1, fp
 800b746:	f7f4 fd0f 	bl	8000168 <__aeabi_dsub>
 800b74a:	4642      	mov	r2, r8
 800b74c:	464b      	mov	r3, r9
 800b74e:	f7f4 fd0b 	bl	8000168 <__aeabi_dsub>
 800b752:	4602      	mov	r2, r0
 800b754:	460b      	mov	r3, r1
 800b756:	4630      	mov	r0, r6
 800b758:	4639      	mov	r1, r7
 800b75a:	e7dc      	b.n	800b716 <__kernel_cos+0xe6>
 800b75c:	2000      	movs	r0, #0
 800b75e:	4910      	ldr	r1, [pc, #64]	; (800b7a0 <__kernel_cos+0x170>)
 800b760:	e7db      	b.n	800b71a <__kernel_cos+0xea>
 800b762:	bf00      	nop
 800b764:	f3af 8000 	nop.w
 800b768:	be8838d4 	.word	0xbe8838d4
 800b76c:	bda8fae9 	.word	0xbda8fae9
 800b770:	bdb4b1c4 	.word	0xbdb4b1c4
 800b774:	3e21ee9e 	.word	0x3e21ee9e
 800b778:	809c52ad 	.word	0x809c52ad
 800b77c:	3e927e4f 	.word	0x3e927e4f
 800b780:	19cb1590 	.word	0x19cb1590
 800b784:	3efa01a0 	.word	0x3efa01a0
 800b788:	16c15177 	.word	0x16c15177
 800b78c:	3f56c16c 	.word	0x3f56c16c
 800b790:	5555554c 	.word	0x5555554c
 800b794:	3fa55555 	.word	0x3fa55555
 800b798:	3fe00000 	.word	0x3fe00000
 800b79c:	3fd33332 	.word	0x3fd33332
 800b7a0:	3ff00000 	.word	0x3ff00000
 800b7a4:	3fe90000 	.word	0x3fe90000
 800b7a8:	3fd20000 	.word	0x3fd20000

0800b7ac <__kernel_rem_pio2>:
 800b7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b7b4:	9308      	str	r3, [sp, #32]
 800b7b6:	9101      	str	r1, [sp, #4]
 800b7b8:	4bc0      	ldr	r3, [pc, #768]	; (800babc <__kernel_rem_pio2+0x310>)
 800b7ba:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b7bc:	f112 0f14 	cmn.w	r2, #20
 800b7c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b7c4:	bfa8      	it	ge
 800b7c6:	1ed4      	subge	r4, r2, #3
 800b7c8:	9304      	str	r3, [sp, #16]
 800b7ca:	9b08      	ldr	r3, [sp, #32]
 800b7cc:	bfb8      	it	lt
 800b7ce:	2400      	movlt	r4, #0
 800b7d0:	f103 33ff 	add.w	r3, r3, #4294967295
 800b7d4:	9306      	str	r3, [sp, #24]
 800b7d6:	bfa4      	itt	ge
 800b7d8:	2318      	movge	r3, #24
 800b7da:	fb94 f4f3 	sdivge	r4, r4, r3
 800b7de:	f06f 0317 	mvn.w	r3, #23
 800b7e2:	fb04 3303 	mla	r3, r4, r3, r3
 800b7e6:	eb03 0a02 	add.w	sl, r3, r2
 800b7ea:	9a06      	ldr	r2, [sp, #24]
 800b7ec:	9b04      	ldr	r3, [sp, #16]
 800b7ee:	1aa7      	subs	r7, r4, r2
 800b7f0:	eb03 0802 	add.w	r8, r3, r2
 800b7f4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b7f6:	2500      	movs	r5, #0
 800b7f8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	2300      	movs	r3, #0
 800b800:	9009      	str	r0, [sp, #36]	; 0x24
 800b802:	ae20      	add	r6, sp, #128	; 0x80
 800b804:	4545      	cmp	r5, r8
 800b806:	dd19      	ble.n	800b83c <__kernel_rem_pio2+0x90>
 800b808:	9b08      	ldr	r3, [sp, #32]
 800b80a:	aa20      	add	r2, sp, #128	; 0x80
 800b80c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b810:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b814:	f1c3 0301 	rsb	r3, r3, #1
 800b818:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b81c:	9307      	str	r3, [sp, #28]
 800b81e:	9b07      	ldr	r3, [sp, #28]
 800b820:	9a04      	ldr	r2, [sp, #16]
 800b822:	4443      	add	r3, r8
 800b824:	429a      	cmp	r2, r3
 800b826:	db35      	blt.n	800b894 <__kernel_rem_pio2+0xe8>
 800b828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b82a:	2200      	movs	r2, #0
 800b82c:	f1a3 0908 	sub.w	r9, r3, #8
 800b830:	2300      	movs	r3, #0
 800b832:	462f      	mov	r7, r5
 800b834:	2600      	movs	r6, #0
 800b836:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b83a:	e01f      	b.n	800b87c <__kernel_rem_pio2+0xd0>
 800b83c:	42ef      	cmn	r7, r5
 800b83e:	d40b      	bmi.n	800b858 <__kernel_rem_pio2+0xac>
 800b840:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b844:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b848:	f7f4 fddc 	bl	8000404 <__aeabi_i2d>
 800b84c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b850:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b854:	3501      	adds	r5, #1
 800b856:	e7d5      	b.n	800b804 <__kernel_rem_pio2+0x58>
 800b858:	4610      	mov	r0, r2
 800b85a:	4619      	mov	r1, r3
 800b85c:	e7f8      	b.n	800b850 <__kernel_rem_pio2+0xa4>
 800b85e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b862:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800b866:	f7f4 fe37 	bl	80004d8 <__aeabi_dmul>
 800b86a:	4602      	mov	r2, r0
 800b86c:	460b      	mov	r3, r1
 800b86e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b872:	f7f4 fc7b 	bl	800016c <__adddf3>
 800b876:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b87a:	3601      	adds	r6, #1
 800b87c:	9b06      	ldr	r3, [sp, #24]
 800b87e:	3f08      	subs	r7, #8
 800b880:	429e      	cmp	r6, r3
 800b882:	ddec      	ble.n	800b85e <__kernel_rem_pio2+0xb2>
 800b884:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b888:	3508      	adds	r5, #8
 800b88a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800b88e:	f108 0801 	add.w	r8, r8, #1
 800b892:	e7c4      	b.n	800b81e <__kernel_rem_pio2+0x72>
 800b894:	9b04      	ldr	r3, [sp, #16]
 800b896:	aa0c      	add	r2, sp, #48	; 0x30
 800b898:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b89c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b89e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b8a0:	9f04      	ldr	r7, [sp, #16]
 800b8a2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b8a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b8a8:	463e      	mov	r6, r7
 800b8aa:	ab98      	add	r3, sp, #608	; 0x260
 800b8ac:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800b8b0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b8b4:	f8cd b008 	str.w	fp, [sp, #8]
 800b8b8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800b8bc:	2e00      	cmp	r6, #0
 800b8be:	dc71      	bgt.n	800b9a4 <__kernel_rem_pio2+0x1f8>
 800b8c0:	4652      	mov	r2, sl
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	4629      	mov	r1, r5
 800b8c6:	f000 fc87 	bl	800c1d8 <scalbn>
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	460d      	mov	r5, r1
 800b8d4:	f7f4 fe00 	bl	80004d8 <__aeabi_dmul>
 800b8d8:	f000 fb72 	bl	800bfc0 <floor>
 800b8dc:	2200      	movs	r2, #0
 800b8de:	4b78      	ldr	r3, [pc, #480]	; (800bac0 <__kernel_rem_pio2+0x314>)
 800b8e0:	f7f4 fdfa 	bl	80004d8 <__aeabi_dmul>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	4629      	mov	r1, r5
 800b8ec:	f7f4 fc3c 	bl	8000168 <__aeabi_dsub>
 800b8f0:	460d      	mov	r5, r1
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	f7f5 f8a0 	bl	8000a38 <__aeabi_d2iz>
 800b8f8:	9007      	str	r0, [sp, #28]
 800b8fa:	f7f4 fd83 	bl	8000404 <__aeabi_i2d>
 800b8fe:	4602      	mov	r2, r0
 800b900:	460b      	mov	r3, r1
 800b902:	4620      	mov	r0, r4
 800b904:	4629      	mov	r1, r5
 800b906:	f7f4 fc2f 	bl	8000168 <__aeabi_dsub>
 800b90a:	f1ba 0f00 	cmp.w	sl, #0
 800b90e:	4680      	mov	r8, r0
 800b910:	4689      	mov	r9, r1
 800b912:	dd70      	ble.n	800b9f6 <__kernel_rem_pio2+0x24a>
 800b914:	1e7a      	subs	r2, r7, #1
 800b916:	ab0c      	add	r3, sp, #48	; 0x30
 800b918:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b91c:	9c07      	ldr	r4, [sp, #28]
 800b91e:	f1ca 0118 	rsb	r1, sl, #24
 800b922:	fa40 f301 	asr.w	r3, r0, r1
 800b926:	441c      	add	r4, r3
 800b928:	408b      	lsls	r3, r1
 800b92a:	1ac0      	subs	r0, r0, r3
 800b92c:	ab0c      	add	r3, sp, #48	; 0x30
 800b92e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b932:	f1ca 0317 	rsb	r3, sl, #23
 800b936:	9407      	str	r4, [sp, #28]
 800b938:	fa40 f303 	asr.w	r3, r0, r3
 800b93c:	9302      	str	r3, [sp, #8]
 800b93e:	9b02      	ldr	r3, [sp, #8]
 800b940:	2b00      	cmp	r3, #0
 800b942:	dd66      	ble.n	800ba12 <__kernel_rem_pio2+0x266>
 800b944:	2200      	movs	r2, #0
 800b946:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b94a:	4614      	mov	r4, r2
 800b94c:	9b07      	ldr	r3, [sp, #28]
 800b94e:	3301      	adds	r3, #1
 800b950:	9307      	str	r3, [sp, #28]
 800b952:	4297      	cmp	r7, r2
 800b954:	f300 809f 	bgt.w	800ba96 <__kernel_rem_pio2+0x2ea>
 800b958:	f1ba 0f00 	cmp.w	sl, #0
 800b95c:	dd07      	ble.n	800b96e <__kernel_rem_pio2+0x1c2>
 800b95e:	f1ba 0f01 	cmp.w	sl, #1
 800b962:	f000 80b9 	beq.w	800bad8 <__kernel_rem_pio2+0x32c>
 800b966:	f1ba 0f02 	cmp.w	sl, #2
 800b96a:	f000 80bf 	beq.w	800baec <__kernel_rem_pio2+0x340>
 800b96e:	9b02      	ldr	r3, [sp, #8]
 800b970:	2b02      	cmp	r3, #2
 800b972:	d14e      	bne.n	800ba12 <__kernel_rem_pio2+0x266>
 800b974:	4642      	mov	r2, r8
 800b976:	464b      	mov	r3, r9
 800b978:	2000      	movs	r0, #0
 800b97a:	4952      	ldr	r1, [pc, #328]	; (800bac4 <__kernel_rem_pio2+0x318>)
 800b97c:	f7f4 fbf4 	bl	8000168 <__aeabi_dsub>
 800b980:	4680      	mov	r8, r0
 800b982:	4689      	mov	r9, r1
 800b984:	2c00      	cmp	r4, #0
 800b986:	d044      	beq.n	800ba12 <__kernel_rem_pio2+0x266>
 800b988:	4652      	mov	r2, sl
 800b98a:	2000      	movs	r0, #0
 800b98c:	494d      	ldr	r1, [pc, #308]	; (800bac4 <__kernel_rem_pio2+0x318>)
 800b98e:	f000 fc23 	bl	800c1d8 <scalbn>
 800b992:	4602      	mov	r2, r0
 800b994:	460b      	mov	r3, r1
 800b996:	4640      	mov	r0, r8
 800b998:	4649      	mov	r1, r9
 800b99a:	f7f4 fbe5 	bl	8000168 <__aeabi_dsub>
 800b99e:	4680      	mov	r8, r0
 800b9a0:	4689      	mov	r9, r1
 800b9a2:	e036      	b.n	800ba12 <__kernel_rem_pio2+0x266>
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	4b48      	ldr	r3, [pc, #288]	; (800bac8 <__kernel_rem_pio2+0x31c>)
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	f7f4 fd94 	bl	80004d8 <__aeabi_dmul>
 800b9b0:	f7f5 f842 	bl	8000a38 <__aeabi_d2iz>
 800b9b4:	f7f4 fd26 	bl	8000404 <__aeabi_i2d>
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	4b44      	ldr	r3, [pc, #272]	; (800bacc <__kernel_rem_pio2+0x320>)
 800b9bc:	4680      	mov	r8, r0
 800b9be:	4689      	mov	r9, r1
 800b9c0:	f7f4 fd8a 	bl	80004d8 <__aeabi_dmul>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	4629      	mov	r1, r5
 800b9cc:	f7f4 fbcc 	bl	8000168 <__aeabi_dsub>
 800b9d0:	f7f5 f832 	bl	8000a38 <__aeabi_d2iz>
 800b9d4:	9b02      	ldr	r3, [sp, #8]
 800b9d6:	3e01      	subs	r6, #1
 800b9d8:	f843 0b04 	str.w	r0, [r3], #4
 800b9dc:	9302      	str	r3, [sp, #8]
 800b9de:	ab70      	add	r3, sp, #448	; 0x1c0
 800b9e0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b9e4:	4640      	mov	r0, r8
 800b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ea:	4649      	mov	r1, r9
 800b9ec:	f7f4 fbbe 	bl	800016c <__adddf3>
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	460d      	mov	r5, r1
 800b9f4:	e762      	b.n	800b8bc <__kernel_rem_pio2+0x110>
 800b9f6:	d105      	bne.n	800ba04 <__kernel_rem_pio2+0x258>
 800b9f8:	1e7b      	subs	r3, r7, #1
 800b9fa:	aa0c      	add	r2, sp, #48	; 0x30
 800b9fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ba00:	15c3      	asrs	r3, r0, #23
 800ba02:	e79b      	b.n	800b93c <__kernel_rem_pio2+0x190>
 800ba04:	2200      	movs	r2, #0
 800ba06:	4b32      	ldr	r3, [pc, #200]	; (800bad0 <__kernel_rem_pio2+0x324>)
 800ba08:	f7f4 ffec 	bl	80009e4 <__aeabi_dcmpge>
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	d13f      	bne.n	800ba90 <__kernel_rem_pio2+0x2e4>
 800ba10:	9002      	str	r0, [sp, #8]
 800ba12:	2200      	movs	r2, #0
 800ba14:	2300      	movs	r3, #0
 800ba16:	4640      	mov	r0, r8
 800ba18:	4649      	mov	r1, r9
 800ba1a:	f7f4 ffc5 	bl	80009a8 <__aeabi_dcmpeq>
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	f000 80b5 	beq.w	800bb8e <__kernel_rem_pio2+0x3e2>
 800ba24:	1e7c      	subs	r4, r7, #1
 800ba26:	4623      	mov	r3, r4
 800ba28:	2200      	movs	r2, #0
 800ba2a:	9904      	ldr	r1, [sp, #16]
 800ba2c:	428b      	cmp	r3, r1
 800ba2e:	da64      	bge.n	800bafa <__kernel_rem_pio2+0x34e>
 800ba30:	2a00      	cmp	r2, #0
 800ba32:	d078      	beq.n	800bb26 <__kernel_rem_pio2+0x37a>
 800ba34:	ab0c      	add	r3, sp, #48	; 0x30
 800ba36:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ba3a:	f1aa 0a18 	sub.w	sl, sl, #24
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f000 80a3 	beq.w	800bb8a <__kernel_rem_pio2+0x3de>
 800ba44:	4652      	mov	r2, sl
 800ba46:	2000      	movs	r0, #0
 800ba48:	491e      	ldr	r1, [pc, #120]	; (800bac4 <__kernel_rem_pio2+0x318>)
 800ba4a:	f000 fbc5 	bl	800c1d8 <scalbn>
 800ba4e:	46a2      	mov	sl, r4
 800ba50:	4606      	mov	r6, r0
 800ba52:	460f      	mov	r7, r1
 800ba54:	f04f 0800 	mov.w	r8, #0
 800ba58:	00e3      	lsls	r3, r4, #3
 800ba5a:	9306      	str	r3, [sp, #24]
 800ba5c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800bac8 <__kernel_rem_pio2+0x31c>
 800ba60:	ab70      	add	r3, sp, #448	; 0x1c0
 800ba62:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800ba66:	f1ba 0f00 	cmp.w	sl, #0
 800ba6a:	f280 80c6 	bge.w	800bbfa <__kernel_rem_pio2+0x44e>
 800ba6e:	4627      	mov	r7, r4
 800ba70:	f04f 0800 	mov.w	r8, #0
 800ba74:	2f00      	cmp	r7, #0
 800ba76:	f2c0 80f3 	blt.w	800bc60 <__kernel_rem_pio2+0x4b4>
 800ba7a:	4b16      	ldr	r3, [pc, #88]	; (800bad4 <__kernel_rem_pio2+0x328>)
 800ba7c:	f04f 0a00 	mov.w	sl, #0
 800ba80:	461d      	mov	r5, r3
 800ba82:	ab70      	add	r3, sp, #448	; 0x1c0
 800ba84:	f04f 0b00 	mov.w	fp, #0
 800ba88:	2600      	movs	r6, #0
 800ba8a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800ba8e:	e0d9      	b.n	800bc44 <__kernel_rem_pio2+0x498>
 800ba90:	2302      	movs	r3, #2
 800ba92:	9302      	str	r3, [sp, #8]
 800ba94:	e756      	b.n	800b944 <__kernel_rem_pio2+0x198>
 800ba96:	f8db 3000 	ldr.w	r3, [fp]
 800ba9a:	b954      	cbnz	r4, 800bab2 <__kernel_rem_pio2+0x306>
 800ba9c:	b123      	cbz	r3, 800baa8 <__kernel_rem_pio2+0x2fc>
 800ba9e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800baa2:	f8cb 3000 	str.w	r3, [fp]
 800baa6:	2301      	movs	r3, #1
 800baa8:	461c      	mov	r4, r3
 800baaa:	3201      	adds	r2, #1
 800baac:	f10b 0b04 	add.w	fp, fp, #4
 800bab0:	e74f      	b.n	800b952 <__kernel_rem_pio2+0x1a6>
 800bab2:	1acb      	subs	r3, r1, r3
 800bab4:	f8cb 3000 	str.w	r3, [fp]
 800bab8:	4623      	mov	r3, r4
 800baba:	e7f5      	b.n	800baa8 <__kernel_rem_pio2+0x2fc>
 800babc:	0800c978 	.word	0x0800c978
 800bac0:	40200000 	.word	0x40200000
 800bac4:	3ff00000 	.word	0x3ff00000
 800bac8:	3e700000 	.word	0x3e700000
 800bacc:	41700000 	.word	0x41700000
 800bad0:	3fe00000 	.word	0x3fe00000
 800bad4:	0800c938 	.word	0x0800c938
 800bad8:	1e7a      	subs	r2, r7, #1
 800bada:	ab0c      	add	r3, sp, #48	; 0x30
 800badc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bae4:	a90c      	add	r1, sp, #48	; 0x30
 800bae6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800baea:	e740      	b.n	800b96e <__kernel_rem_pio2+0x1c2>
 800baec:	1e7a      	subs	r2, r7, #1
 800baee:	ab0c      	add	r3, sp, #48	; 0x30
 800baf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800baf8:	e7f4      	b.n	800bae4 <__kernel_rem_pio2+0x338>
 800bafa:	a90c      	add	r1, sp, #48	; 0x30
 800bafc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bb00:	3b01      	subs	r3, #1
 800bb02:	430a      	orrs	r2, r1
 800bb04:	e791      	b.n	800ba2a <__kernel_rem_pio2+0x27e>
 800bb06:	3401      	adds	r4, #1
 800bb08:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bb0c:	2a00      	cmp	r2, #0
 800bb0e:	d0fa      	beq.n	800bb06 <__kernel_rem_pio2+0x35a>
 800bb10:	9b08      	ldr	r3, [sp, #32]
 800bb12:	1c7e      	adds	r6, r7, #1
 800bb14:	18fd      	adds	r5, r7, r3
 800bb16:	ab20      	add	r3, sp, #128	; 0x80
 800bb18:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bb1c:	443c      	add	r4, r7
 800bb1e:	42b4      	cmp	r4, r6
 800bb20:	da04      	bge.n	800bb2c <__kernel_rem_pio2+0x380>
 800bb22:	4627      	mov	r7, r4
 800bb24:	e6c0      	b.n	800b8a8 <__kernel_rem_pio2+0xfc>
 800bb26:	2401      	movs	r4, #1
 800bb28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb2a:	e7ed      	b.n	800bb08 <__kernel_rem_pio2+0x35c>
 800bb2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb2e:	462f      	mov	r7, r5
 800bb30:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bb34:	f7f4 fc66 	bl	8000404 <__aeabi_i2d>
 800bb38:	f04f 0b00 	mov.w	fp, #0
 800bb3c:	f04f 0800 	mov.w	r8, #0
 800bb40:	f04f 0900 	mov.w	r9, #0
 800bb44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb46:	e8e7 0102 	strd	r0, r1, [r7], #8
 800bb4a:	3b08      	subs	r3, #8
 800bb4c:	9302      	str	r3, [sp, #8]
 800bb4e:	9b06      	ldr	r3, [sp, #24]
 800bb50:	459b      	cmp	fp, r3
 800bb52:	dd07      	ble.n	800bb64 <__kernel_rem_pio2+0x3b8>
 800bb54:	ab70      	add	r3, sp, #448	; 0x1c0
 800bb56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bb5a:	463d      	mov	r5, r7
 800bb5c:	e9c3 8900 	strd	r8, r9, [r3]
 800bb60:	3601      	adds	r6, #1
 800bb62:	e7dc      	b.n	800bb1e <__kernel_rem_pio2+0x372>
 800bb64:	9902      	ldr	r1, [sp, #8]
 800bb66:	f10b 0b01 	add.w	fp, fp, #1
 800bb6a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800bb6e:	9102      	str	r1, [sp, #8]
 800bb70:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800bb74:	f7f4 fcb0 	bl	80004d8 <__aeabi_dmul>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	4640      	mov	r0, r8
 800bb7e:	4649      	mov	r1, r9
 800bb80:	f7f4 faf4 	bl	800016c <__adddf3>
 800bb84:	4680      	mov	r8, r0
 800bb86:	4689      	mov	r9, r1
 800bb88:	e7e1      	b.n	800bb4e <__kernel_rem_pio2+0x3a2>
 800bb8a:	3c01      	subs	r4, #1
 800bb8c:	e752      	b.n	800ba34 <__kernel_rem_pio2+0x288>
 800bb8e:	f1ca 0200 	rsb	r2, sl, #0
 800bb92:	4640      	mov	r0, r8
 800bb94:	4649      	mov	r1, r9
 800bb96:	f000 fb1f 	bl	800c1d8 <scalbn>
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	4ba5      	ldr	r3, [pc, #660]	; (800be34 <__kernel_rem_pio2+0x688>)
 800bb9e:	4604      	mov	r4, r0
 800bba0:	460d      	mov	r5, r1
 800bba2:	f7f4 ff1f 	bl	80009e4 <__aeabi_dcmpge>
 800bba6:	b1f8      	cbz	r0, 800bbe8 <__kernel_rem_pio2+0x43c>
 800bba8:	2200      	movs	r2, #0
 800bbaa:	4ba3      	ldr	r3, [pc, #652]	; (800be38 <__kernel_rem_pio2+0x68c>)
 800bbac:	4620      	mov	r0, r4
 800bbae:	4629      	mov	r1, r5
 800bbb0:	f7f4 fc92 	bl	80004d8 <__aeabi_dmul>
 800bbb4:	f7f4 ff40 	bl	8000a38 <__aeabi_d2iz>
 800bbb8:	4606      	mov	r6, r0
 800bbba:	f7f4 fc23 	bl	8000404 <__aeabi_i2d>
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	4b9c      	ldr	r3, [pc, #624]	; (800be34 <__kernel_rem_pio2+0x688>)
 800bbc2:	f7f4 fc89 	bl	80004d8 <__aeabi_dmul>
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	4602      	mov	r2, r0
 800bbca:	4629      	mov	r1, r5
 800bbcc:	4620      	mov	r0, r4
 800bbce:	f7f4 facb 	bl	8000168 <__aeabi_dsub>
 800bbd2:	f7f4 ff31 	bl	8000a38 <__aeabi_d2iz>
 800bbd6:	1c7c      	adds	r4, r7, #1
 800bbd8:	ab0c      	add	r3, sp, #48	; 0x30
 800bbda:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800bbde:	f10a 0a18 	add.w	sl, sl, #24
 800bbe2:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800bbe6:	e72d      	b.n	800ba44 <__kernel_rem_pio2+0x298>
 800bbe8:	4620      	mov	r0, r4
 800bbea:	4629      	mov	r1, r5
 800bbec:	f7f4 ff24 	bl	8000a38 <__aeabi_d2iz>
 800bbf0:	ab0c      	add	r3, sp, #48	; 0x30
 800bbf2:	463c      	mov	r4, r7
 800bbf4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800bbf8:	e724      	b.n	800ba44 <__kernel_rem_pio2+0x298>
 800bbfa:	ab0c      	add	r3, sp, #48	; 0x30
 800bbfc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800bc00:	f7f4 fc00 	bl	8000404 <__aeabi_i2d>
 800bc04:	4632      	mov	r2, r6
 800bc06:	463b      	mov	r3, r7
 800bc08:	f7f4 fc66 	bl	80004d8 <__aeabi_dmul>
 800bc0c:	4642      	mov	r2, r8
 800bc0e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800bc12:	464b      	mov	r3, r9
 800bc14:	4630      	mov	r0, r6
 800bc16:	4639      	mov	r1, r7
 800bc18:	f7f4 fc5e 	bl	80004d8 <__aeabi_dmul>
 800bc1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc20:	4606      	mov	r6, r0
 800bc22:	460f      	mov	r7, r1
 800bc24:	e71f      	b.n	800ba66 <__kernel_rem_pio2+0x2ba>
 800bc26:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800bc2a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800bc2e:	f7f4 fc53 	bl	80004d8 <__aeabi_dmul>
 800bc32:	4602      	mov	r2, r0
 800bc34:	460b      	mov	r3, r1
 800bc36:	4650      	mov	r0, sl
 800bc38:	4659      	mov	r1, fp
 800bc3a:	f7f4 fa97 	bl	800016c <__adddf3>
 800bc3e:	4682      	mov	sl, r0
 800bc40:	468b      	mov	fp, r1
 800bc42:	3601      	adds	r6, #1
 800bc44:	9b04      	ldr	r3, [sp, #16]
 800bc46:	429e      	cmp	r6, r3
 800bc48:	dc01      	bgt.n	800bc4e <__kernel_rem_pio2+0x4a2>
 800bc4a:	45b0      	cmp	r8, r6
 800bc4c:	daeb      	bge.n	800bc26 <__kernel_rem_pio2+0x47a>
 800bc4e:	ab48      	add	r3, sp, #288	; 0x120
 800bc50:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bc54:	e9c3 ab00 	strd	sl, fp, [r3]
 800bc58:	3f01      	subs	r7, #1
 800bc5a:	f108 0801 	add.w	r8, r8, #1
 800bc5e:	e709      	b.n	800ba74 <__kernel_rem_pio2+0x2c8>
 800bc60:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800bc62:	2b02      	cmp	r3, #2
 800bc64:	dc09      	bgt.n	800bc7a <__kernel_rem_pio2+0x4ce>
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	dc34      	bgt.n	800bcd4 <__kernel_rem_pio2+0x528>
 800bc6a:	d05e      	beq.n	800bd2a <__kernel_rem_pio2+0x57e>
 800bc6c:	9b07      	ldr	r3, [sp, #28]
 800bc6e:	f003 0007 	and.w	r0, r3, #7
 800bc72:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800bc76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc7a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800bc7c:	2b03      	cmp	r3, #3
 800bc7e:	d1f5      	bne.n	800bc6c <__kernel_rem_pio2+0x4c0>
 800bc80:	9a06      	ldr	r2, [sp, #24]
 800bc82:	ab48      	add	r3, sp, #288	; 0x120
 800bc84:	441a      	add	r2, r3
 800bc86:	4615      	mov	r5, r2
 800bc88:	4692      	mov	sl, r2
 800bc8a:	46a3      	mov	fp, r4
 800bc8c:	f1bb 0f00 	cmp.w	fp, #0
 800bc90:	dc7a      	bgt.n	800bd88 <__kernel_rem_pio2+0x5dc>
 800bc92:	46aa      	mov	sl, r5
 800bc94:	46a3      	mov	fp, r4
 800bc96:	f1bb 0f01 	cmp.w	fp, #1
 800bc9a:	f300 8094 	bgt.w	800bdc6 <__kernel_rem_pio2+0x61a>
 800bc9e:	2700      	movs	r7, #0
 800bca0:	463e      	mov	r6, r7
 800bca2:	2c01      	cmp	r4, #1
 800bca4:	f300 80ae 	bgt.w	800be04 <__kernel_rem_pio2+0x658>
 800bca8:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800bcac:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800bcb0:	9b02      	ldr	r3, [sp, #8]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	f040 80b0 	bne.w	800be18 <__kernel_rem_pio2+0x66c>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	462a      	mov	r2, r5
 800bcbc:	9801      	ldr	r0, [sp, #4]
 800bcbe:	e9c0 2300 	strd	r2, r3, [r0]
 800bcc2:	4622      	mov	r2, r4
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bcca:	463a      	mov	r2, r7
 800bccc:	4633      	mov	r3, r6
 800bcce:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bcd2:	e7cb      	b.n	800bc6c <__kernel_rem_pio2+0x4c0>
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	9a06      	ldr	r2, [sp, #24]
 800bcd8:	ab48      	add	r3, sp, #288	; 0x120
 800bcda:	441a      	add	r2, r3
 800bcdc:	4615      	mov	r5, r2
 800bcde:	46a0      	mov	r8, r4
 800bce0:	4601      	mov	r1, r0
 800bce2:	f1b8 0f00 	cmp.w	r8, #0
 800bce6:	da3c      	bge.n	800bd62 <__kernel_rem_pio2+0x5b6>
 800bce8:	9b02      	ldr	r3, [sp, #8]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d040      	beq.n	800bd70 <__kernel_rem_pio2+0x5c4>
 800bcee:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	462b      	mov	r3, r5
 800bcf6:	9d01      	ldr	r5, [sp, #4]
 800bcf8:	2601      	movs	r6, #1
 800bcfa:	e9c5 2300 	strd	r2, r3, [r5]
 800bcfe:	460b      	mov	r3, r1
 800bd00:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800bd04:	f7f4 fa30 	bl	8000168 <__aeabi_dsub>
 800bd08:	4684      	mov	ip, r0
 800bd0a:	460f      	mov	r7, r1
 800bd0c:	ad48      	add	r5, sp, #288	; 0x120
 800bd0e:	42b4      	cmp	r4, r6
 800bd10:	f105 0508 	add.w	r5, r5, #8
 800bd14:	da2e      	bge.n	800bd74 <__kernel_rem_pio2+0x5c8>
 800bd16:	9b02      	ldr	r3, [sp, #8]
 800bd18:	b10b      	cbz	r3, 800bd1e <__kernel_rem_pio2+0x572>
 800bd1a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800bd1e:	4662      	mov	r2, ip
 800bd20:	463b      	mov	r3, r7
 800bd22:	9901      	ldr	r1, [sp, #4]
 800bd24:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800bd28:	e7a0      	b.n	800bc6c <__kernel_rem_pio2+0x4c0>
 800bd2a:	9a06      	ldr	r2, [sp, #24]
 800bd2c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800bd2e:	ab48      	add	r3, sp, #288	; 0x120
 800bd30:	441a      	add	r2, r3
 800bd32:	4615      	mov	r5, r2
 800bd34:	4637      	mov	r7, r6
 800bd36:	2c00      	cmp	r4, #0
 800bd38:	da09      	bge.n	800bd4e <__kernel_rem_pio2+0x5a2>
 800bd3a:	9b02      	ldr	r3, [sp, #8]
 800bd3c:	b10b      	cbz	r3, 800bd42 <__kernel_rem_pio2+0x596>
 800bd3e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800bd42:	4632      	mov	r2, r6
 800bd44:	463b      	mov	r3, r7
 800bd46:	9901      	ldr	r1, [sp, #4]
 800bd48:	e9c1 2300 	strd	r2, r3, [r1]
 800bd4c:	e78e      	b.n	800bc6c <__kernel_rem_pio2+0x4c0>
 800bd4e:	4630      	mov	r0, r6
 800bd50:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bd54:	4639      	mov	r1, r7
 800bd56:	f7f4 fa09 	bl	800016c <__adddf3>
 800bd5a:	3c01      	subs	r4, #1
 800bd5c:	4606      	mov	r6, r0
 800bd5e:	460f      	mov	r7, r1
 800bd60:	e7e9      	b.n	800bd36 <__kernel_rem_pio2+0x58a>
 800bd62:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bd66:	f7f4 fa01 	bl	800016c <__adddf3>
 800bd6a:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd6e:	e7b8      	b.n	800bce2 <__kernel_rem_pio2+0x536>
 800bd70:	460d      	mov	r5, r1
 800bd72:	e7be      	b.n	800bcf2 <__kernel_rem_pio2+0x546>
 800bd74:	4660      	mov	r0, ip
 800bd76:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd7a:	4639      	mov	r1, r7
 800bd7c:	f7f4 f9f6 	bl	800016c <__adddf3>
 800bd80:	3601      	adds	r6, #1
 800bd82:	4684      	mov	ip, r0
 800bd84:	460f      	mov	r7, r1
 800bd86:	e7c2      	b.n	800bd0e <__kernel_rem_pio2+0x562>
 800bd88:	e9da 6700 	ldrd	r6, r7, [sl]
 800bd8c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800bd90:	4632      	mov	r2, r6
 800bd92:	463b      	mov	r3, r7
 800bd94:	4640      	mov	r0, r8
 800bd96:	4649      	mov	r1, r9
 800bd98:	f7f4 f9e8 	bl	800016c <__adddf3>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	460b      	mov	r3, r1
 800bda0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bda4:	4640      	mov	r0, r8
 800bda6:	4649      	mov	r1, r9
 800bda8:	f7f4 f9de 	bl	8000168 <__aeabi_dsub>
 800bdac:	4632      	mov	r2, r6
 800bdae:	463b      	mov	r3, r7
 800bdb0:	f7f4 f9dc 	bl	800016c <__adddf3>
 800bdb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdb8:	e86a 0102 	strd	r0, r1, [sl], #-8
 800bdbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bdc0:	e9ca 2300 	strd	r2, r3, [sl]
 800bdc4:	e762      	b.n	800bc8c <__kernel_rem_pio2+0x4e0>
 800bdc6:	e9da 8900 	ldrd	r8, r9, [sl]
 800bdca:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800bdce:	4642      	mov	r2, r8
 800bdd0:	464b      	mov	r3, r9
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	4639      	mov	r1, r7
 800bdd6:	f7f4 f9c9 	bl	800016c <__adddf3>
 800bdda:	4602      	mov	r2, r0
 800bddc:	460b      	mov	r3, r1
 800bdde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bde2:	4630      	mov	r0, r6
 800bde4:	4639      	mov	r1, r7
 800bde6:	f7f4 f9bf 	bl	8000168 <__aeabi_dsub>
 800bdea:	4642      	mov	r2, r8
 800bdec:	464b      	mov	r3, r9
 800bdee:	f7f4 f9bd 	bl	800016c <__adddf3>
 800bdf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdf6:	e86a 0102 	strd	r0, r1, [sl], #-8
 800bdfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bdfe:	e9ca 2300 	strd	r2, r3, [sl]
 800be02:	e748      	b.n	800bc96 <__kernel_rem_pio2+0x4ea>
 800be04:	4638      	mov	r0, r7
 800be06:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800be0a:	4631      	mov	r1, r6
 800be0c:	f7f4 f9ae 	bl	800016c <__adddf3>
 800be10:	3c01      	subs	r4, #1
 800be12:	4607      	mov	r7, r0
 800be14:	460e      	mov	r6, r1
 800be16:	e744      	b.n	800bca2 <__kernel_rem_pio2+0x4f6>
 800be18:	9b01      	ldr	r3, [sp, #4]
 800be1a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800be1e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800be22:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800be26:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800be2a:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800be2e:	601d      	str	r5, [r3, #0]
 800be30:	615e      	str	r6, [r3, #20]
 800be32:	e71b      	b.n	800bc6c <__kernel_rem_pio2+0x4c0>
 800be34:	41700000 	.word	0x41700000
 800be38:	3e700000 	.word	0x3e700000
 800be3c:	00000000 	.word	0x00000000

0800be40 <__kernel_sin>:
 800be40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be44:	b086      	sub	sp, #24
 800be46:	e9cd 2300 	strd	r2, r3, [sp]
 800be4a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be4e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800be52:	4682      	mov	sl, r0
 800be54:	460c      	mov	r4, r1
 800be56:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800be58:	da03      	bge.n	800be62 <__kernel_sin+0x22>
 800be5a:	f7f4 fded 	bl	8000a38 <__aeabi_d2iz>
 800be5e:	2800      	cmp	r0, #0
 800be60:	d050      	beq.n	800bf04 <__kernel_sin+0xc4>
 800be62:	4652      	mov	r2, sl
 800be64:	4623      	mov	r3, r4
 800be66:	4650      	mov	r0, sl
 800be68:	4621      	mov	r1, r4
 800be6a:	f7f4 fb35 	bl	80004d8 <__aeabi_dmul>
 800be6e:	4606      	mov	r6, r0
 800be70:	460f      	mov	r7, r1
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	4650      	mov	r0, sl
 800be78:	4621      	mov	r1, r4
 800be7a:	f7f4 fb2d 	bl	80004d8 <__aeabi_dmul>
 800be7e:	a33e      	add	r3, pc, #248	; (adr r3, 800bf78 <__kernel_sin+0x138>)
 800be80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be84:	4680      	mov	r8, r0
 800be86:	4689      	mov	r9, r1
 800be88:	4630      	mov	r0, r6
 800be8a:	4639      	mov	r1, r7
 800be8c:	f7f4 fb24 	bl	80004d8 <__aeabi_dmul>
 800be90:	a33b      	add	r3, pc, #236	; (adr r3, 800bf80 <__kernel_sin+0x140>)
 800be92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be96:	f7f4 f967 	bl	8000168 <__aeabi_dsub>
 800be9a:	4632      	mov	r2, r6
 800be9c:	463b      	mov	r3, r7
 800be9e:	f7f4 fb1b 	bl	80004d8 <__aeabi_dmul>
 800bea2:	a339      	add	r3, pc, #228	; (adr r3, 800bf88 <__kernel_sin+0x148>)
 800bea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea8:	f7f4 f960 	bl	800016c <__adddf3>
 800beac:	4632      	mov	r2, r6
 800beae:	463b      	mov	r3, r7
 800beb0:	f7f4 fb12 	bl	80004d8 <__aeabi_dmul>
 800beb4:	a336      	add	r3, pc, #216	; (adr r3, 800bf90 <__kernel_sin+0x150>)
 800beb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beba:	f7f4 f955 	bl	8000168 <__aeabi_dsub>
 800bebe:	4632      	mov	r2, r6
 800bec0:	463b      	mov	r3, r7
 800bec2:	f7f4 fb09 	bl	80004d8 <__aeabi_dmul>
 800bec6:	a334      	add	r3, pc, #208	; (adr r3, 800bf98 <__kernel_sin+0x158>)
 800bec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800becc:	f7f4 f94e 	bl	800016c <__adddf3>
 800bed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bed4:	b9dd      	cbnz	r5, 800bf0e <__kernel_sin+0xce>
 800bed6:	4602      	mov	r2, r0
 800bed8:	460b      	mov	r3, r1
 800beda:	4630      	mov	r0, r6
 800bedc:	4639      	mov	r1, r7
 800bede:	f7f4 fafb 	bl	80004d8 <__aeabi_dmul>
 800bee2:	a32f      	add	r3, pc, #188	; (adr r3, 800bfa0 <__kernel_sin+0x160>)
 800bee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee8:	f7f4 f93e 	bl	8000168 <__aeabi_dsub>
 800beec:	4642      	mov	r2, r8
 800beee:	464b      	mov	r3, r9
 800bef0:	f7f4 faf2 	bl	80004d8 <__aeabi_dmul>
 800bef4:	4602      	mov	r2, r0
 800bef6:	460b      	mov	r3, r1
 800bef8:	4650      	mov	r0, sl
 800befa:	4621      	mov	r1, r4
 800befc:	f7f4 f936 	bl	800016c <__adddf3>
 800bf00:	4682      	mov	sl, r0
 800bf02:	460c      	mov	r4, r1
 800bf04:	4650      	mov	r0, sl
 800bf06:	4621      	mov	r1, r4
 800bf08:	b006      	add	sp, #24
 800bf0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf0e:	2200      	movs	r2, #0
 800bf10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf14:	4b24      	ldr	r3, [pc, #144]	; (800bfa8 <__kernel_sin+0x168>)
 800bf16:	f7f4 fadf 	bl	80004d8 <__aeabi_dmul>
 800bf1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf22:	4640      	mov	r0, r8
 800bf24:	4649      	mov	r1, r9
 800bf26:	f7f4 fad7 	bl	80004d8 <__aeabi_dmul>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf32:	f7f4 f919 	bl	8000168 <__aeabi_dsub>
 800bf36:	4632      	mov	r2, r6
 800bf38:	463b      	mov	r3, r7
 800bf3a:	f7f4 facd 	bl	80004d8 <__aeabi_dmul>
 800bf3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf42:	f7f4 f911 	bl	8000168 <__aeabi_dsub>
 800bf46:	a316      	add	r3, pc, #88	; (adr r3, 800bfa0 <__kernel_sin+0x160>)
 800bf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4c:	4606      	mov	r6, r0
 800bf4e:	460f      	mov	r7, r1
 800bf50:	4640      	mov	r0, r8
 800bf52:	4649      	mov	r1, r9
 800bf54:	f7f4 fac0 	bl	80004d8 <__aeabi_dmul>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	4639      	mov	r1, r7
 800bf60:	f7f4 f904 	bl	800016c <__adddf3>
 800bf64:	4602      	mov	r2, r0
 800bf66:	460b      	mov	r3, r1
 800bf68:	4650      	mov	r0, sl
 800bf6a:	4621      	mov	r1, r4
 800bf6c:	f7f4 f8fc 	bl	8000168 <__aeabi_dsub>
 800bf70:	e7c6      	b.n	800bf00 <__kernel_sin+0xc0>
 800bf72:	bf00      	nop
 800bf74:	f3af 8000 	nop.w
 800bf78:	5acfd57c 	.word	0x5acfd57c
 800bf7c:	3de5d93a 	.word	0x3de5d93a
 800bf80:	8a2b9ceb 	.word	0x8a2b9ceb
 800bf84:	3e5ae5e6 	.word	0x3e5ae5e6
 800bf88:	57b1fe7d 	.word	0x57b1fe7d
 800bf8c:	3ec71de3 	.word	0x3ec71de3
 800bf90:	19c161d5 	.word	0x19c161d5
 800bf94:	3f2a01a0 	.word	0x3f2a01a0
 800bf98:	1110f8a6 	.word	0x1110f8a6
 800bf9c:	3f811111 	.word	0x3f811111
 800bfa0:	55555549 	.word	0x55555549
 800bfa4:	3fc55555 	.word	0x3fc55555
 800bfa8:	3fe00000 	.word	0x3fe00000

0800bfac <fabs>:
 800bfac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bfb0:	4770      	bx	lr

0800bfb2 <finite>:
 800bfb2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800bfb6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bfba:	0fc0      	lsrs	r0, r0, #31
 800bfbc:	4770      	bx	lr
	...

0800bfc0 <floor>:
 800bfc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfc4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800bfc8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800bfcc:	2e13      	cmp	r6, #19
 800bfce:	4602      	mov	r2, r0
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	4607      	mov	r7, r0
 800bfd4:	460c      	mov	r4, r1
 800bfd6:	4605      	mov	r5, r0
 800bfd8:	dc34      	bgt.n	800c044 <floor+0x84>
 800bfda:	2e00      	cmp	r6, #0
 800bfdc:	da15      	bge.n	800c00a <floor+0x4a>
 800bfde:	a334      	add	r3, pc, #208	; (adr r3, 800c0b0 <floor+0xf0>)
 800bfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe4:	f7f4 f8c2 	bl	800016c <__adddf3>
 800bfe8:	2200      	movs	r2, #0
 800bfea:	2300      	movs	r3, #0
 800bfec:	f7f4 fd04 	bl	80009f8 <__aeabi_dcmpgt>
 800bff0:	b140      	cbz	r0, 800c004 <floor+0x44>
 800bff2:	2c00      	cmp	r4, #0
 800bff4:	da59      	bge.n	800c0aa <floor+0xea>
 800bff6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bffa:	ea57 0503 	orrs.w	r5, r7, r3
 800bffe:	d001      	beq.n	800c004 <floor+0x44>
 800c000:	2500      	movs	r5, #0
 800c002:	4c2d      	ldr	r4, [pc, #180]	; (800c0b8 <floor+0xf8>)
 800c004:	4623      	mov	r3, r4
 800c006:	462f      	mov	r7, r5
 800c008:	e025      	b.n	800c056 <floor+0x96>
 800c00a:	4a2c      	ldr	r2, [pc, #176]	; (800c0bc <floor+0xfc>)
 800c00c:	fa42 f806 	asr.w	r8, r2, r6
 800c010:	ea01 0208 	and.w	r2, r1, r8
 800c014:	4302      	orrs	r2, r0
 800c016:	d01e      	beq.n	800c056 <floor+0x96>
 800c018:	a325      	add	r3, pc, #148	; (adr r3, 800c0b0 <floor+0xf0>)
 800c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01e:	f7f4 f8a5 	bl	800016c <__adddf3>
 800c022:	2200      	movs	r2, #0
 800c024:	2300      	movs	r3, #0
 800c026:	f7f4 fce7 	bl	80009f8 <__aeabi_dcmpgt>
 800c02a:	2800      	cmp	r0, #0
 800c02c:	d0ea      	beq.n	800c004 <floor+0x44>
 800c02e:	2c00      	cmp	r4, #0
 800c030:	bfbe      	ittt	lt
 800c032:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c036:	fa43 f606 	asrlt.w	r6, r3, r6
 800c03a:	19a4      	addlt	r4, r4, r6
 800c03c:	2500      	movs	r5, #0
 800c03e:	ea24 0408 	bic.w	r4, r4, r8
 800c042:	e7df      	b.n	800c004 <floor+0x44>
 800c044:	2e33      	cmp	r6, #51	; 0x33
 800c046:	dd0a      	ble.n	800c05e <floor+0x9e>
 800c048:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c04c:	d103      	bne.n	800c056 <floor+0x96>
 800c04e:	f7f4 f88d 	bl	800016c <__adddf3>
 800c052:	4607      	mov	r7, r0
 800c054:	460b      	mov	r3, r1
 800c056:	4638      	mov	r0, r7
 800c058:	4619      	mov	r1, r3
 800c05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c05e:	f04f 32ff 	mov.w	r2, #4294967295
 800c062:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c066:	fa22 f808 	lsr.w	r8, r2, r8
 800c06a:	ea18 0f00 	tst.w	r8, r0
 800c06e:	d0f2      	beq.n	800c056 <floor+0x96>
 800c070:	a30f      	add	r3, pc, #60	; (adr r3, 800c0b0 <floor+0xf0>)
 800c072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c076:	f7f4 f879 	bl	800016c <__adddf3>
 800c07a:	2200      	movs	r2, #0
 800c07c:	2300      	movs	r3, #0
 800c07e:	f7f4 fcbb 	bl	80009f8 <__aeabi_dcmpgt>
 800c082:	2800      	cmp	r0, #0
 800c084:	d0be      	beq.n	800c004 <floor+0x44>
 800c086:	2c00      	cmp	r4, #0
 800c088:	da02      	bge.n	800c090 <floor+0xd0>
 800c08a:	2e14      	cmp	r6, #20
 800c08c:	d103      	bne.n	800c096 <floor+0xd6>
 800c08e:	3401      	adds	r4, #1
 800c090:	ea25 0508 	bic.w	r5, r5, r8
 800c094:	e7b6      	b.n	800c004 <floor+0x44>
 800c096:	2301      	movs	r3, #1
 800c098:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c09c:	fa03 f606 	lsl.w	r6, r3, r6
 800c0a0:	4435      	add	r5, r6
 800c0a2:	42bd      	cmp	r5, r7
 800c0a4:	bf38      	it	cc
 800c0a6:	18e4      	addcc	r4, r4, r3
 800c0a8:	e7f2      	b.n	800c090 <floor+0xd0>
 800c0aa:	2500      	movs	r5, #0
 800c0ac:	462c      	mov	r4, r5
 800c0ae:	e7a9      	b.n	800c004 <floor+0x44>
 800c0b0:	8800759c 	.word	0x8800759c
 800c0b4:	7e37e43c 	.word	0x7e37e43c
 800c0b8:	bff00000 	.word	0xbff00000
 800c0bc:	000fffff 	.word	0x000fffff

0800c0c0 <rint>:
 800c0c0:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800c0c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0c6:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800c0ca:	2f13      	cmp	r7, #19
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	460c      	mov	r4, r1
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800c0d8:	dc59      	bgt.n	800c18e <rint+0xce>
 800c0da:	2f00      	cmp	r7, #0
 800c0dc:	da2a      	bge.n	800c134 <rint+0x74>
 800c0de:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c0e2:	4301      	orrs	r1, r0
 800c0e4:	d022      	beq.n	800c12c <rint+0x6c>
 800c0e6:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800c0ea:	4301      	orrs	r1, r0
 800c0ec:	424d      	negs	r5, r1
 800c0ee:	430d      	orrs	r5, r1
 800c0f0:	4936      	ldr	r1, [pc, #216]	; (800c1cc <rint+0x10c>)
 800c0f2:	0c5c      	lsrs	r4, r3, #17
 800c0f4:	0b2d      	lsrs	r5, r5, #12
 800c0f6:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800c0fa:	0464      	lsls	r4, r4, #17
 800c0fc:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c100:	ea45 0304 	orr.w	r3, r5, r4
 800c104:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c108:	4620      	mov	r0, r4
 800c10a:	4629      	mov	r1, r5
 800c10c:	f7f4 f82e 	bl	800016c <__adddf3>
 800c110:	e9cd 0100 	strd	r0, r1, [sp]
 800c114:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c118:	462b      	mov	r3, r5
 800c11a:	4622      	mov	r2, r4
 800c11c:	f7f4 f824 	bl	8000168 <__aeabi_dsub>
 800c120:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c124:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800c128:	4602      	mov	r2, r0
 800c12a:	460b      	mov	r3, r1
 800c12c:	4610      	mov	r0, r2
 800c12e:	4619      	mov	r1, r3
 800c130:	b003      	add	sp, #12
 800c132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c134:	4926      	ldr	r1, [pc, #152]	; (800c1d0 <rint+0x110>)
 800c136:	4139      	asrs	r1, r7
 800c138:	ea03 0001 	and.w	r0, r3, r1
 800c13c:	4310      	orrs	r0, r2
 800c13e:	d0f5      	beq.n	800c12c <rint+0x6c>
 800c140:	084b      	lsrs	r3, r1, #1
 800c142:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800c146:	ea52 0501 	orrs.w	r5, r2, r1
 800c14a:	d00c      	beq.n	800c166 <rint+0xa6>
 800c14c:	ea24 0303 	bic.w	r3, r4, r3
 800c150:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800c154:	2f13      	cmp	r7, #19
 800c156:	bf0c      	ite	eq
 800c158:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800c15c:	2500      	movne	r5, #0
 800c15e:	fa44 f707 	asr.w	r7, r4, r7
 800c162:	ea43 0407 	orr.w	r4, r3, r7
 800c166:	4919      	ldr	r1, [pc, #100]	; (800c1cc <rint+0x10c>)
 800c168:	4623      	mov	r3, r4
 800c16a:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800c16e:	462a      	mov	r2, r5
 800c170:	e9d6 4500 	ldrd	r4, r5, [r6]
 800c174:	4620      	mov	r0, r4
 800c176:	4629      	mov	r1, r5
 800c178:	f7f3 fff8 	bl	800016c <__adddf3>
 800c17c:	e9cd 0100 	strd	r0, r1, [sp]
 800c180:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c184:	4622      	mov	r2, r4
 800c186:	462b      	mov	r3, r5
 800c188:	f7f3 ffee 	bl	8000168 <__aeabi_dsub>
 800c18c:	e7cc      	b.n	800c128 <rint+0x68>
 800c18e:	2f33      	cmp	r7, #51	; 0x33
 800c190:	dd05      	ble.n	800c19e <rint+0xde>
 800c192:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800c196:	d1c9      	bne.n	800c12c <rint+0x6c>
 800c198:	f7f3 ffe8 	bl	800016c <__adddf3>
 800c19c:	e7c4      	b.n	800c128 <rint+0x68>
 800c19e:	f04f 31ff 	mov.w	r1, #4294967295
 800c1a2:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800c1a6:	fa21 f10c 	lsr.w	r1, r1, ip
 800c1aa:	4208      	tst	r0, r1
 800c1ac:	d0be      	beq.n	800c12c <rint+0x6c>
 800c1ae:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800c1b2:	bf18      	it	ne
 800c1b4:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800c1b8:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800c1bc:	bf1e      	ittt	ne
 800c1be:	ea20 0303 	bicne.w	r3, r0, r3
 800c1c2:	fa45 fc0c 	asrne.w	ip, r5, ip
 800c1c6:	ea43 050c 	orrne.w	r5, r3, ip
 800c1ca:	e7cc      	b.n	800c166 <rint+0xa6>
 800c1cc:	0800c988 	.word	0x0800c988
 800c1d0:	000fffff 	.word	0x000fffff
 800c1d4:	00000000 	.word	0x00000000

0800c1d8 <scalbn>:
 800c1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1da:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800c1de:	4604      	mov	r4, r0
 800c1e0:	460d      	mov	r5, r1
 800c1e2:	4617      	mov	r7, r2
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	b996      	cbnz	r6, 800c20e <scalbn+0x36>
 800c1e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c1ec:	4303      	orrs	r3, r0
 800c1ee:	d039      	beq.n	800c264 <scalbn+0x8c>
 800c1f0:	4b35      	ldr	r3, [pc, #212]	; (800c2c8 <scalbn+0xf0>)
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f7f4 f970 	bl	80004d8 <__aeabi_dmul>
 800c1f8:	4b34      	ldr	r3, [pc, #208]	; (800c2cc <scalbn+0xf4>)
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	429f      	cmp	r7, r3
 800c1fe:	460d      	mov	r5, r1
 800c200:	da0f      	bge.n	800c222 <scalbn+0x4a>
 800c202:	a32d      	add	r3, pc, #180	; (adr r3, 800c2b8 <scalbn+0xe0>)
 800c204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c208:	f7f4 f966 	bl	80004d8 <__aeabi_dmul>
 800c20c:	e006      	b.n	800c21c <scalbn+0x44>
 800c20e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c212:	4296      	cmp	r6, r2
 800c214:	d10a      	bne.n	800c22c <scalbn+0x54>
 800c216:	4602      	mov	r2, r0
 800c218:	f7f3 ffa8 	bl	800016c <__adddf3>
 800c21c:	4604      	mov	r4, r0
 800c21e:	460d      	mov	r5, r1
 800c220:	e020      	b.n	800c264 <scalbn+0x8c>
 800c222:	460b      	mov	r3, r1
 800c224:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c228:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800c22c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800c230:	19b9      	adds	r1, r7, r6
 800c232:	4291      	cmp	r1, r2
 800c234:	dd0e      	ble.n	800c254 <scalbn+0x7c>
 800c236:	a322      	add	r3, pc, #136	; (adr r3, 800c2c0 <scalbn+0xe8>)
 800c238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c240:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c244:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c248:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c24c:	4820      	ldr	r0, [pc, #128]	; (800c2d0 <scalbn+0xf8>)
 800c24e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c252:	e7d9      	b.n	800c208 <scalbn+0x30>
 800c254:	2900      	cmp	r1, #0
 800c256:	dd08      	ble.n	800c26a <scalbn+0x92>
 800c258:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c25c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c260:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c264:	4620      	mov	r0, r4
 800c266:	4629      	mov	r1, r5
 800c268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c26a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800c26e:	da16      	bge.n	800c29e <scalbn+0xc6>
 800c270:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c274:	429f      	cmp	r7, r3
 800c276:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800c27a:	dd08      	ble.n	800c28e <scalbn+0xb6>
 800c27c:	4c15      	ldr	r4, [pc, #84]	; (800c2d4 <scalbn+0xfc>)
 800c27e:	4814      	ldr	r0, [pc, #80]	; (800c2d0 <scalbn+0xf8>)
 800c280:	f363 74df 	bfi	r4, r3, #31, #1
 800c284:	a30e      	add	r3, pc, #56	; (adr r3, 800c2c0 <scalbn+0xe8>)
 800c286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28a:	4621      	mov	r1, r4
 800c28c:	e7bc      	b.n	800c208 <scalbn+0x30>
 800c28e:	4c12      	ldr	r4, [pc, #72]	; (800c2d8 <scalbn+0x100>)
 800c290:	4812      	ldr	r0, [pc, #72]	; (800c2dc <scalbn+0x104>)
 800c292:	f363 74df 	bfi	r4, r3, #31, #1
 800c296:	a308      	add	r3, pc, #32	; (adr r3, 800c2b8 <scalbn+0xe0>)
 800c298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29c:	e7f5      	b.n	800c28a <scalbn+0xb2>
 800c29e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c2a2:	3136      	adds	r1, #54	; 0x36
 800c2a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c2a8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	4629      	mov	r1, r5
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	4b0b      	ldr	r3, [pc, #44]	; (800c2e0 <scalbn+0x108>)
 800c2b4:	e7a8      	b.n	800c208 <scalbn+0x30>
 800c2b6:	bf00      	nop
 800c2b8:	c2f8f359 	.word	0xc2f8f359
 800c2bc:	01a56e1f 	.word	0x01a56e1f
 800c2c0:	8800759c 	.word	0x8800759c
 800c2c4:	7e37e43c 	.word	0x7e37e43c
 800c2c8:	43500000 	.word	0x43500000
 800c2cc:	ffff3cb0 	.word	0xffff3cb0
 800c2d0:	8800759c 	.word	0x8800759c
 800c2d4:	7e37e43c 	.word	0x7e37e43c
 800c2d8:	01a56e1f 	.word	0x01a56e1f
 800c2dc:	c2f8f359 	.word	0xc2f8f359
 800c2e0:	3c900000 	.word	0x3c900000

0800c2e4 <_init>:
 800c2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e6:	bf00      	nop
 800c2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ea:	bc08      	pop	{r3}
 800c2ec:	469e      	mov	lr, r3
 800c2ee:	4770      	bx	lr

0800c2f0 <_fini>:
 800c2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f2:	bf00      	nop
 800c2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2f6:	bc08      	pop	{r3}
 800c2f8:	469e      	mov	lr, r3
 800c2fa:	4770      	bx	lr
