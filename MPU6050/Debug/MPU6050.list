
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067b4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080068c8  080068c8  000168c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ad0  08006ad0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006ad0  08006ad0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ad0  08006ad0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ad0  08006ad0  00016ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ad4  08006ad4  00016ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000074  08006b4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08006b4c  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096e1  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001833  00000000  00000000  0002977e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  0002afb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000878  00000000  00000000  0002b8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000137ee  00000000  00000000  0002c140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a40e  00000000  00000000  0003f92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c5dd  00000000  00000000  00049d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b6319  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a90  00000000  00000000  000b636c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080068ac 	.word	0x080068ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080068ac 	.word	0x080068ac

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop
 8000fd4:	0000      	movs	r0, r0
	...

08000fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fde:	f000 fcf5 	bl	80019cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe2:	f000 f9c7 	bl	8001374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe6:	f000 fa63 	bl	80014b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fea:	f000 fa09 	bl	8001400 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000fee:	f000 fa35 	bl	800145c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8000ff2:	f000 fab5 	bl	8001560 <MPU6050_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  prev_time = HAL_GetTick();
	MPU6050_Read_Accel();
 8000ff6:	f000 fafb 	bl	80015f0 <MPU6050_Read_Accel>
	MPU6050_Read_Gyro();
 8000ffa:	f000 fb3b 	bl	8001674 <MPU6050_Read_Gyro>

	degrees_pitch += Gy * 0.0000610687;
 8000ffe:	4bc0      	ldr	r3, [pc, #768]	; (8001300 <main+0x328>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fa08 	bl	8000418 <__aeabi_f2d>
 8001008:	4604      	mov	r4, r0
 800100a:	460d      	mov	r5, r1
 800100c:	4bbd      	ldr	r3, [pc, #756]	; (8001304 <main+0x32c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa01 	bl	8000418 <__aeabi_f2d>
 8001016:	a3ae      	add	r3, pc, #696	; (adr r3, 80012d0 <main+0x2f8>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff fa54 	bl	80004c8 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4620      	mov	r0, r4
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff f898 	bl	800015c <__adddf3>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fd20 	bl	8000a78 <__aeabi_d2f>
 8001038:	4603      	mov	r3, r0
 800103a:	4ab1      	ldr	r2, [pc, #708]	; (8001300 <main+0x328>)
 800103c:	6013      	str	r3, [r2, #0]
	degrees_roll  += Gx * 0.0000610687;
 800103e:	4bb2      	ldr	r3, [pc, #712]	; (8001308 <main+0x330>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff f9e8 	bl	8000418 <__aeabi_f2d>
 8001048:	4604      	mov	r4, r0
 800104a:	460d      	mov	r5, r1
 800104c:	4baf      	ldr	r3, [pc, #700]	; (800130c <main+0x334>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff f9e1 	bl	8000418 <__aeabi_f2d>
 8001056:	a39e      	add	r3, pc, #632	; (adr r3, 80012d0 <main+0x2f8>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff fa34 	bl	80004c8 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4620      	mov	r0, r4
 8001066:	4629      	mov	r1, r5
 8001068:	f7ff f878 	bl	800015c <__adddf3>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fd00 	bl	8000a78 <__aeabi_d2f>
 8001078:	4603      	mov	r3, r0
 800107a:	4aa3      	ldr	r2, [pc, #652]	; (8001308 <main+0x330>)
 800107c:	6013      	str	r3, [r2, #0]

	degrees_pitch += degrees_roll * sin(Gz * 0.000001066);
 800107e:	4ba0      	ldr	r3, [pc, #640]	; (8001300 <main+0x328>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f9c8 	bl	8000418 <__aeabi_f2d>
 8001088:	4604      	mov	r4, r0
 800108a:	460d      	mov	r5, r1
 800108c:	4b9e      	ldr	r3, [pc, #632]	; (8001308 <main+0x330>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f9c1 	bl	8000418 <__aeabi_f2d>
 8001096:	4680      	mov	r8, r0
 8001098:	4689      	mov	r9, r1
 800109a:	4b9d      	ldr	r3, [pc, #628]	; (8001310 <main+0x338>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f9ba 	bl	8000418 <__aeabi_f2d>
 80010a4:	a38c      	add	r3, pc, #560	; (adr r3, 80012d8 <main+0x300>)
 80010a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010aa:	f7ff fa0d 	bl	80004c8 <__aeabi_dmul>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	f004 f8ef 	bl	8005298 <sin>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4640      	mov	r0, r8
 80010c0:	4649      	mov	r1, r9
 80010c2:	f7ff fa01 	bl	80004c8 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4620      	mov	r0, r4
 80010cc:	4629      	mov	r1, r5
 80010ce:	f7ff f845 	bl	800015c <__adddf3>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	f7ff fccd 	bl	8000a78 <__aeabi_d2f>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a87      	ldr	r2, [pc, #540]	; (8001300 <main+0x328>)
 80010e2:	6013      	str	r3, [r2, #0]
	degrees_roll  -= degrees_pitch * sin(Gz * 0.000001066);
 80010e4:	4b88      	ldr	r3, [pc, #544]	; (8001308 <main+0x330>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff f995 	bl	8000418 <__aeabi_f2d>
 80010ee:	4604      	mov	r4, r0
 80010f0:	460d      	mov	r5, r1
 80010f2:	4b83      	ldr	r3, [pc, #524]	; (8001300 <main+0x328>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f98e 	bl	8000418 <__aeabi_f2d>
 80010fc:	4680      	mov	r8, r0
 80010fe:	4689      	mov	r9, r1
 8001100:	4b83      	ldr	r3, [pc, #524]	; (8001310 <main+0x338>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff f987 	bl	8000418 <__aeabi_f2d>
 800110a:	a373      	add	r3, pc, #460	; (adr r3, 80012d8 <main+0x300>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f7ff f9da 	bl	80004c8 <__aeabi_dmul>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	f004 f8bc 	bl	8005298 <sin>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4640      	mov	r0, r8
 8001126:	4649      	mov	r1, r9
 8001128:	f7ff f9ce 	bl	80004c8 <__aeabi_dmul>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4620      	mov	r0, r4
 8001132:	4629      	mov	r1, r5
 8001134:	f7ff f810 	bl	8000158 <__aeabi_dsub>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	f7ff fc9a 	bl	8000a78 <__aeabi_d2f>
 8001144:	4603      	mov	r3, r0
 8001146:	4a70      	ldr	r2, [pc, #448]	; (8001308 <main+0x330>)
 8001148:	6013      	str	r3, [r2, #0]

	acc_vector = sqrt((Ax * Ax) + (Ay * Ay) + (Az * Az));
 800114a:	4b72      	ldr	r3, [pc, #456]	; (8001314 <main+0x33c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a71      	ldr	r2, [pc, #452]	; (8001314 <main+0x33c>)
 8001150:	6812      	ldr	r2, [r2, #0]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fded 	bl	8000d34 <__aeabi_fmul>
 800115a:	4603      	mov	r3, r0
 800115c:	461c      	mov	r4, r3
 800115e:	4b6e      	ldr	r3, [pc, #440]	; (8001318 <main+0x340>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a6d      	ldr	r2, [pc, #436]	; (8001318 <main+0x340>)
 8001164:	6812      	ldr	r2, [r2, #0]
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fde3 	bl	8000d34 <__aeabi_fmul>
 800116e:	4603      	mov	r3, r0
 8001170:	4619      	mov	r1, r3
 8001172:	4620      	mov	r0, r4
 8001174:	f7ff fcd6 	bl	8000b24 <__addsf3>
 8001178:	4603      	mov	r3, r0
 800117a:	461c      	mov	r4, r3
 800117c:	4b67      	ldr	r3, [pc, #412]	; (800131c <main+0x344>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a66      	ldr	r2, [pc, #408]	; (800131c <main+0x344>)
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	4611      	mov	r1, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fdd4 	bl	8000d34 <__aeabi_fmul>
 800118c:	4603      	mov	r3, r0
 800118e:	4619      	mov	r1, r3
 8001190:	4620      	mov	r0, r4
 8001192:	f7ff fcc7 	bl	8000b24 <__addsf3>
 8001196:	4603      	mov	r3, r0
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f93d 	bl	8000418 <__aeabi_f2d>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f004 f8eb 	bl	8005380 <sqrt>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fc61 	bl	8000a78 <__aeabi_d2f>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a59      	ldr	r2, [pc, #356]	; (8001320 <main+0x348>)
 80011ba:	6013      	str	r3, [r2, #0]
	degrees_pitch_acc = asin((float) Ay/acc_vector) * 57.2957795;
 80011bc:	4b56      	ldr	r3, [pc, #344]	; (8001318 <main+0x340>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a57      	ldr	r2, [pc, #348]	; (8001320 <main+0x348>)
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fe68 	bl	8000e9c <__aeabi_fdiv>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f922 	bl	8000418 <__aeabi_f2d>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f004 f8a2 	bl	8005324 <asin>
 80011e0:	a33f      	add	r3, pc, #252	; (adr r3, 80012e0 <main+0x308>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff f96f 	bl	80004c8 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fc41 	bl	8000a78 <__aeabi_d2f>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a4a      	ldr	r2, [pc, #296]	; (8001324 <main+0x34c>)
 80011fa:	6013      	str	r3, [r2, #0]
	degrees_roll_acc  = asin((float) Ax/acc_vector) * -57.2957795;
 80011fc:	4b45      	ldr	r3, [pc, #276]	; (8001314 <main+0x33c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a47      	ldr	r2, [pc, #284]	; (8001320 <main+0x348>)
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fe48 	bl	8000e9c <__aeabi_fdiv>
 800120c:	4603      	mov	r3, r0
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f902 	bl	8000418 <__aeabi_f2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f004 f882 	bl	8005324 <asin>
 8001220:	a331      	add	r3, pc, #196	; (adr r3, 80012e8 <main+0x310>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	f7ff f94f 	bl	80004c8 <__aeabi_dmul>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fc21 	bl	8000a78 <__aeabi_d2f>
 8001236:	4603      	mov	r3, r0
 8001238:	4a3b      	ldr	r2, [pc, #236]	; (8001328 <main+0x350>)
 800123a:	6013      	str	r3, [r2, #0]

	degrees_pitch = degrees_pitch * 0.97 + degrees_pitch_acc * 0.03;
 800123c:	4b30      	ldr	r3, [pc, #192]	; (8001300 <main+0x328>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f8e9 	bl	8000418 <__aeabi_f2d>
 8001246:	a32a      	add	r3, pc, #168	; (adr r3, 80012f0 <main+0x318>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f93c 	bl	80004c8 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4614      	mov	r4, r2
 8001256:	461d      	mov	r5, r3
 8001258:	4b32      	ldr	r3, [pc, #200]	; (8001324 <main+0x34c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f8db 	bl	8000418 <__aeabi_f2d>
 8001262:	a325      	add	r3, pc, #148	; (adr r3, 80012f8 <main+0x320>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f92e 	bl	80004c8 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7fe ff72 	bl	800015c <__adddf3>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f7ff fbfa 	bl	8000a78 <__aeabi_d2f>
 8001284:	4603      	mov	r3, r0
 8001286:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <main+0x328>)
 8001288:	6013      	str	r3, [r2, #0]
	degrees_roll  = degrees_roll * 0.97 + degrees_roll_acc * 0.03;
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <main+0x330>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f8c2 	bl	8000418 <__aeabi_f2d>
 8001294:	a316      	add	r3, pc, #88	; (adr r3, 80012f0 <main+0x318>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7ff f915 	bl	80004c8 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4614      	mov	r4, r2
 80012a4:	461d      	mov	r5, r3
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <main+0x350>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f8b4 	bl	8000418 <__aeabi_f2d>
 80012b0:	a311      	add	r3, pc, #68	; (adr r3, 80012f8 <main+0x320>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7ff f907 	bl	80004c8 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4620      	mov	r0, r4
 80012c0:	4629      	mov	r1, r5
 80012c2:	f7fe ff4b 	bl	800015c <__adddf3>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	e02d      	b.n	800132c <main+0x354>
 80012d0:	46f9000a 	.word	0x46f9000a
 80012d4:	3f100240 	.word	0x3f100240
 80012d8:	652c6e62 	.word	0x652c6e62
 80012dc:	3eb1e26f 	.word	0x3eb1e26f
 80012e0:	1a47a9e3 	.word	0x1a47a9e3
 80012e4:	404ca5dc 	.word	0x404ca5dc
 80012e8:	1a47a9e3 	.word	0x1a47a9e3
 80012ec:	c04ca5dc 	.word	0xc04ca5dc
 80012f0:	70a3d70a 	.word	0x70a3d70a
 80012f4:	3fef0a3d 	.word	0x3fef0a3d
 80012f8:	eb851eb8 	.word	0xeb851eb8
 80012fc:	3f9eb851 	.word	0x3f9eb851
 8001300:	2000009c 	.word	0x2000009c
 8001304:	20000130 	.word	0x20000130
 8001308:	200000a0 	.word	0x200000a0
 800130c:	200000a4 	.word	0x200000a4
 8001310:	200001a8 	.word	0x200001a8
 8001314:	20000190 	.word	0x20000190
 8001318:	20000128 	.word	0x20000128
 800131c:	20000194 	.word	0x20000194
 8001320:	20000098 	.word	0x20000098
 8001324:	20000090 	.word	0x20000090
 8001328:	20000094 	.word	0x20000094
 800132c:	f7ff fba4 	bl	8000a78 <__aeabi_d2f>
 8001330:	4603      	mov	r3, r0
 8001332:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <main+0x388>)
 8001334:	6013      	str	r3, [r2, #0]

	formatted_pitch = degrees_pitch * 100;
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <main+0x38c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	490b      	ldr	r1, [pc, #44]	; (8001368 <main+0x390>)
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fcf9 	bl	8000d34 <__aeabi_fmul>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <main+0x394>)
 8001348:	601a      	str	r2, [r3, #0]
	formatted_roll = degrees_roll * 100;
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <main+0x388>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4906      	ldr	r1, [pc, #24]	; (8001368 <main+0x390>)
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fcef 	bl	8000d34 <__aeabi_fmul>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <main+0x398>)
 800135c:	601a      	str	r2, [r3, #0]
	MPU6050_Read_Accel();
 800135e:	e64a      	b.n	8000ff6 <main+0x1e>
 8001360:	200000a0 	.word	0x200000a0
 8001364:	2000009c 	.word	0x2000009c
 8001368:	42c80000 	.word	0x42c80000
 800136c:	2000019c 	.word	0x2000019c
 8001370:	20000118 	.word	0x20000118

08001374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b090      	sub	sp, #64	; 0x40
 8001378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137a:	f107 0318 	add.w	r3, r7, #24
 800137e:	2228      	movs	r2, #40	; 0x28
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f003 ff80 	bl	8005288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001396:	2301      	movs	r3, #1
 8001398:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800139a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a4:	2301      	movs	r3, #1
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a8:	2302      	movs	r3, #2
 80013aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b8:	f107 0318 	add.w	r3, r7, #24
 80013bc:	4618      	mov	r0, r3
 80013be:	f003 f9f7 	bl	80047b0 <HAL_RCC_OscConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013c8:	f000 f998 	bl	80016fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013cc:	230f      	movs	r3, #15
 80013ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d0:	2302      	movs	r3, #2
 80013d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2102      	movs	r1, #2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 fc62 	bl	8004cb0 <HAL_RCC_ClockConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013f2:	f000 f983 	bl	80016fc <Error_Handler>
  }
}
 80013f6:	bf00      	nop
 80013f8:	3740      	adds	r7, #64	; 0x40
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_I2C1_Init+0x50>)
 8001406:	4a13      	ldr	r2, [pc, #76]	; (8001454 <MX_I2C1_Init+0x54>)
 8001408:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_I2C1_Init+0x50>)
 800140c:	4a12      	ldr	r2, [pc, #72]	; (8001458 <MX_I2C1_Init+0x58>)
 800140e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_I2C1_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_I2C1_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_I2C1_Init+0x50>)
 800141e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001422:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <MX_I2C1_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_I2C1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <MX_I2C1_Init+0x50>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_I2C1_Init+0x50>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <MX_I2C1_Init+0x50>)
 800143e:	f000 fe53 	bl	80020e8 <HAL_I2C_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001448:	f000 f958 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200000b4 	.word	0x200000b4
 8001454:	40005400 	.word	0x40005400
 8001458:	00061a80 	.word	0x00061a80

0800145c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <MX_USART1_UART_Init+0x50>)
 8001464:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001468:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800146c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <MX_USART1_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001482:	220c      	movs	r2, #12
 8001484:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_USART1_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001494:	f003 fda6 	bl	8004fe4 <HAL_UART_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800149e:	f000 f92d 	bl	80016fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000140 	.word	0x20000140
 80014ac:	40013800 	.word	0x40013800

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 0310 	add.w	r3, r7, #16
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c4:	4b24      	ldr	r3, [pc, #144]	; (8001558 <MX_GPIO_Init+0xa8>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a23      	ldr	r2, [pc, #140]	; (8001558 <MX_GPIO_Init+0xa8>)
 80014ca:	f043 0310 	orr.w	r3, r3, #16
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b21      	ldr	r3, [pc, #132]	; (8001558 <MX_GPIO_Init+0xa8>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0310 	and.w	r3, r3, #16
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <MX_GPIO_Init+0xa8>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <MX_GPIO_Init+0xa8>)
 80014e2:	f043 0320 	orr.w	r3, r3, #32
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <MX_GPIO_Init+0xa8>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0320 	and.w	r3, r3, #32
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <MX_GPIO_Init+0xa8>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a17      	ldr	r2, [pc, #92]	; (8001558 <MX_GPIO_Init+0xa8>)
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <MX_GPIO_Init+0xa8>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <MX_GPIO_Init+0xa8>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a11      	ldr	r2, [pc, #68]	; (8001558 <MX_GPIO_Init+0xa8>)
 8001512:	f043 0308 	orr.w	r3, r3, #8
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <MX_GPIO_Init+0xa8>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152a:	480c      	ldr	r0, [pc, #48]	; (800155c <MX_GPIO_Init+0xac>)
 800152c:	f000 fdc4 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001536:	2301      	movs	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2302      	movs	r3, #2
 8001540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	4619      	mov	r1, r3
 8001548:	4804      	ldr	r0, [pc, #16]	; (800155c <MX_GPIO_Init+0xac>)
 800154a:	f000 fc31 	bl	8001db0 <HAL_GPIO_Init>

}
 800154e:	bf00      	nop
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	40011000 	.word	0x40011000

08001560 <MPU6050_Init>:

/* USER CODE BEGIN 4 */
void MPU6050_Init (void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af02      	add	r7, sp, #8
	  uint8_t PWR_MGMT_1[2] = {0x6B, 0x00};
 8001566:	236b      	movs	r3, #107	; 0x6b
 8001568:	81bb      	strh	r3, [r7, #12]
	  while (HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 2, 10) != HAL_OK);
 800156a:	bf00      	nop
 800156c:	f107 020c 	add.w	r2, r7, #12
 8001570:	230a      	movs	r3, #10
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2302      	movs	r3, #2
 8001576:	21d0      	movs	r1, #208	; 0xd0
 8001578:	481c      	ldr	r0, [pc, #112]	; (80015ec <MPU6050_Init+0x8c>)
 800157a:	f000 fee9 	bl	8002350 <HAL_I2C_Master_Transmit>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f3      	bne.n	800156c <MPU6050_Init+0xc>

	  uint8_t GYR_CONFIG[2] = {0x1B, 0x08};
 8001584:	f640 031b 	movw	r3, #2075	; 0x81b
 8001588:	813b      	strh	r3, [r7, #8]
	  while(HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, GYR_CONFIG, 2, 10) != HAL_OK);
 800158a:	bf00      	nop
 800158c:	f107 0208 	add.w	r2, r7, #8
 8001590:	230a      	movs	r3, #10
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2302      	movs	r3, #2
 8001596:	21d0      	movs	r1, #208	; 0xd0
 8001598:	4814      	ldr	r0, [pc, #80]	; (80015ec <MPU6050_Init+0x8c>)
 800159a:	f000 fed9 	bl	8002350 <HAL_I2C_Master_Transmit>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f3      	bne.n	800158c <MPU6050_Init+0x2c>

	  uint8_t ACC_CONFIG[2] = {0x1C, 0x10};
 80015a4:	f241 031c 	movw	r3, #4124	; 0x101c
 80015a8:	80bb      	strh	r3, [r7, #4]
	  while(HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, ACC_CONFIG, 2, 10) != HAL_OK);
 80015aa:	bf00      	nop
 80015ac:	1d3a      	adds	r2, r7, #4
 80015ae:	230a      	movs	r3, #10
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2302      	movs	r3, #2
 80015b4:	21d0      	movs	r1, #208	; 0xd0
 80015b6:	480d      	ldr	r0, [pc, #52]	; (80015ec <MPU6050_Init+0x8c>)
 80015b8:	f000 feca 	bl	8002350 <HAL_I2C_Master_Transmit>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f4      	bne.n	80015ac <MPU6050_Init+0x4c>

	  uint8_t LPF_CONFIG[2] = {0x1A, 0x03};
 80015c2:	f240 331a 	movw	r3, #794	; 0x31a
 80015c6:	803b      	strh	r3, [r7, #0]
	  while(HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, LPF_CONFIG, 2, 10) != HAL_OK);
 80015c8:	bf00      	nop
 80015ca:	463a      	mov	r2, r7
 80015cc:	230a      	movs	r3, #10
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2302      	movs	r3, #2
 80015d2:	21d0      	movs	r1, #208	; 0xd0
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <MPU6050_Init+0x8c>)
 80015d6:	f000 febb 	bl	8002350 <HAL_I2C_Master_Transmit>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f4      	bne.n	80015ca <MPU6050_Init+0x6a>
//		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
//		Data = 0x08;
//		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
//	}

}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200000b4 	.word	0x200000b4

080015f0 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel ()
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 100);
 80015f6:	2364      	movs	r3, #100	; 0x64
 80015f8:	9302      	str	r3, [sp, #8]
 80015fa:	2306      	movs	r3, #6
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	463b      	mov	r3, r7
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2301      	movs	r3, #1
 8001604:	223b      	movs	r2, #59	; 0x3b
 8001606:	21d0      	movs	r1, #208	; 0xd0
 8001608:	4816      	ldr	r0, [pc, #88]	; (8001664 <MPU6050_Read_Accel+0x74>)
 800160a:	f000 ff9f 	bl	800254c <HAL_I2C_Mem_Read>

	Ax = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800160e:	783b      	ldrb	r3, [r7, #0]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b21a      	sxth	r2, r3
 8001614:	787b      	ldrb	r3, [r7, #1]
 8001616:	b21b      	sxth	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b21b      	sxth	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fb35 	bl	8000c8c <__aeabi_i2f>
 8001622:	4603      	mov	r3, r0
 8001624:	4a10      	ldr	r2, [pc, #64]	; (8001668 <MPU6050_Read_Accel+0x78>)
 8001626:	6013      	str	r3, [r2, #0]
	Ay = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001628:	78bb      	ldrb	r3, [r7, #2]
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	b21a      	sxth	r2, r3
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	b21b      	sxth	r3, r3
 8001632:	4313      	orrs	r3, r2
 8001634:	b21b      	sxth	r3, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fb28 	bl	8000c8c <__aeabi_i2f>
 800163c:	4603      	mov	r3, r0
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <MPU6050_Read_Accel+0x7c>)
 8001640:	6013      	str	r3, [r2, #0]
	Az = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001642:	793b      	ldrb	r3, [r7, #4]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	b21a      	sxth	r2, r3
 8001648:	797b      	ldrb	r3, [r7, #5]
 800164a:	b21b      	sxth	r3, r3
 800164c:	4313      	orrs	r3, r2
 800164e:	b21b      	sxth	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fb1b 	bl	8000c8c <__aeabi_i2f>
 8001656:	4603      	mov	r3, r0
 8001658:	4a05      	ldr	r2, [pc, #20]	; (8001670 <MPU6050_Read_Accel+0x80>)
 800165a:	6013      	str	r3, [r2, #0]
	     for more details check ACCEL_CONFIG Register              ****/

//	Ax = Accel_X_RAW/2048.0;
//	Ay = Accel_Y_RAW/2048.0;
//	Az = Accel_Z_RAW/2048.0;
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200000b4 	.word	0x200000b4
 8001668:	20000190 	.word	0x20000190
 800166c:	20000128 	.word	0x20000128
 8001670:	20000194 	.word	0x20000194

08001674 <MPU6050_Read_Gyro>:
		min_val = data;
}


void MPU6050_Read_Gyro (void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	2306      	movs	r3, #6
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	463b      	mov	r3, r7
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2301      	movs	r3, #1
 800168a:	2243      	movs	r2, #67	; 0x43
 800168c:	21d0      	movs	r1, #208	; 0xd0
 800168e:	4817      	ldr	r0, [pc, #92]	; (80016ec <MPU6050_Read_Gyro+0x78>)
 8001690:	f000 ff5c 	bl	800254c <HAL_I2C_Mem_Read>

	Gx = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001694:	783b      	ldrb	r3, [r7, #0]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b21a      	sxth	r2, r3
 800169a:	787b      	ldrb	r3, [r7, #1]
 800169c:	b21b      	sxth	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff faf2 	bl	8000c8c <__aeabi_i2f>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <MPU6050_Read_Gyro+0x7c>)
 80016ac:	6013      	str	r3, [r2, #0]
	Gy = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80016ae:	78bb      	ldrb	r3, [r7, #2]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fae5 	bl	8000c8c <__aeabi_i2f>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <MPU6050_Read_Gyro+0x80>)
 80016c6:	6013      	str	r3, [r2, #0]
	Gz = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80016c8:	793b      	ldrb	r3, [r7, #4]
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	797b      	ldrb	r3, [r7, #5]
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	4313      	orrs	r3, r2
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fad8 	bl	8000c8c <__aeabi_i2f>
 80016dc:	4603      	mov	r3, r0
 80016de:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <MPU6050_Read_Gyro+0x84>)
 80016e0:	6013      	str	r3, [r2, #0]
	     for more details check GYRO_CONFIG Register              ****/

//	Gx = Gyro_X_RAW/131.0;
//	Gy = Gyro_Y_RAW/131.0;
//	Gz = Gyro_Z_RAW/131.0;
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200000b4 	.word	0x200000b4
 80016f0:	200000a4 	.word	0x200000a4
 80016f4:	20000130 	.word	0x20000130
 80016f8:	200001a8 	.word	0x200001a8

080016fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001700:	b672      	cpsid	i
}
 8001702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001704:	e7fe      	b.n	8001704 <Error_Handler+0x8>
	...

08001708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_MspInit+0x5c>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	4a14      	ldr	r2, [pc, #80]	; (8001764 <HAL_MspInit+0x5c>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6193      	str	r3, [r2, #24]
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_MspInit+0x5c>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_MspInit+0x5c>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	4a0e      	ldr	r2, [pc, #56]	; (8001764 <HAL_MspInit+0x5c>)
 800172c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001730:	61d3      	str	r3, [r2, #28]
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <HAL_MspInit+0x5c>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_MspInit+0x60>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_MspInit+0x60>)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	40021000 	.word	0x40021000
 8001768:	40010000 	.word	0x40010000

0800176c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a1d      	ldr	r2, [pc, #116]	; (80017fc <HAL_I2C_MspInit+0x90>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d133      	bne.n	80017f4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <HAL_I2C_MspInit+0x94>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a1b      	ldr	r2, [pc, #108]	; (8001800 <HAL_I2C_MspInit+0x94>)
 8001792:	f043 0308 	orr.w	r3, r3, #8
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_I2C_MspInit+0x94>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017a4:	23c0      	movs	r3, #192	; 0xc0
 80017a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a8:	2312      	movs	r3, #18
 80017aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	4619      	mov	r1, r3
 80017b6:	4813      	ldr	r0, [pc, #76]	; (8001804 <HAL_I2C_MspInit+0x98>)
 80017b8:	f000 fafa 	bl	8001db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_I2C_MspInit+0x94>)
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <HAL_I2C_MspInit+0x94>)
 80017c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017c6:	61d3      	str	r3, [r2, #28]
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_I2C_MspInit+0x94>)
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2100      	movs	r1, #0
 80017d8:	201f      	movs	r0, #31
 80017da:	f000 fa30 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017de:	201f      	movs	r0, #31
 80017e0:	f000 fa49 	bl	8001c76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2100      	movs	r1, #0
 80017e8:	2020      	movs	r0, #32
 80017ea:	f000 fa28 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80017ee:	2020      	movs	r0, #32
 80017f0:	f000 fa41 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017f4:	bf00      	nop
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40005400 	.word	0x40005400
 8001800:	40021000 	.word	0x40021000
 8001804:	40010c00 	.word	0x40010c00

08001808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <HAL_UART_MspInit+0x8c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d131      	bne.n	800188c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <HAL_UART_MspInit+0x90>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	4a1a      	ldr	r2, [pc, #104]	; (8001898 <HAL_UART_MspInit+0x90>)
 800182e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001832:	6193      	str	r3, [r2, #24]
 8001834:	4b18      	ldr	r3, [pc, #96]	; (8001898 <HAL_UART_MspInit+0x90>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_UART_MspInit+0x90>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a14      	ldr	r2, [pc, #80]	; (8001898 <HAL_UART_MspInit+0x90>)
 8001846:	f043 0304 	orr.w	r3, r3, #4
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_UART_MspInit+0x90>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800185c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001862:	2303      	movs	r3, #3
 8001864:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	4619      	mov	r1, r3
 800186c:	480b      	ldr	r0, [pc, #44]	; (800189c <HAL_UART_MspInit+0x94>)
 800186e:	f000 fa9f 	bl	8001db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	4619      	mov	r1, r3
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <HAL_UART_MspInit+0x94>)
 8001888:	f000 fa92 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800188c:	bf00      	nop
 800188e:	3720      	adds	r7, #32
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40013800 	.word	0x40013800
 8001898:	40021000 	.word	0x40021000
 800189c:	40010800 	.word	0x40010800

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <NMI_Handler+0x4>

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <MemManage_Handler+0x4>

080018b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <UsageFault_Handler+0x4>

080018be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr

080018ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e6:	f000 f8b7 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <I2C1_EV_IRQHandler+0x10>)
 80018f6:	f001 f865 	bl	80029c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200000b4 	.word	0x200000b4

08001904 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <I2C1_ER_IRQHandler+0x10>)
 800190a:	f001 f9c1 	bl	8002c90 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200000b4 	.word	0x200000b4

08001918 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <SystemInit+0x5c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a14      	ldr	r2, [pc, #80]	; (8001974 <SystemInit+0x5c>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <SystemInit+0x5c>)
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4911      	ldr	r1, [pc, #68]	; (8001974 <SystemInit+0x5c>)
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <SystemInit+0x60>)
 8001930:	4013      	ands	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <SystemInit+0x5c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <SystemInit+0x5c>)
 800193a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800193e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001942:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <SystemInit+0x5c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <SystemInit+0x5c>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <SystemInit+0x5c>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <SystemInit+0x5c>)
 8001956:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800195a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <SystemInit+0x5c>)
 800195e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001962:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <SystemInit+0x64>)
 8001966:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800196a:	609a      	str	r2, [r3, #8]
#endif 
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	40021000 	.word	0x40021000
 8001978:	f8ff0000 	.word	0xf8ff0000
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001980:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001982:	e003      	b.n	800198c <LoopCopyDataInit>

08001984 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001986:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001988:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800198a:	3104      	adds	r1, #4

0800198c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800198c:	480a      	ldr	r0, [pc, #40]	; (80019b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001990:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001992:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001994:	d3f6      	bcc.n	8001984 <CopyDataInit>
  ldr r2, =_sbss
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001998:	e002      	b.n	80019a0 <LoopFillZerobss>

0800199a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800199c:	f842 3b04 	str.w	r3, [r2], #4

080019a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80019a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80019a4:	d3f9      	bcc.n	800199a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019a6:	f7ff ffb7 	bl	8001918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019aa:	f003 fc49 	bl	8005240 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ae:	f7ff fb13 	bl	8000fd8 <main>
  bx lr
 80019b2:	4770      	bx	lr
  ldr r3, =_sidata
 80019b4:	08006ad8 	.word	0x08006ad8
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80019bc:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80019c0:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80019c4:	200001b4 	.word	0x200001b4

080019c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC1_2_IRQHandler>
	...

080019cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_Init+0x28>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <HAL_Init+0x28>)
 80019d6:	f043 0310 	orr.w	r3, r3, #16
 80019da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019dc:	2003      	movs	r0, #3
 80019de:	f000 f923 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e2:	2000      	movs	r0, #0
 80019e4:	f000 f808 	bl	80019f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e8:	f7ff fe8e 	bl	8001708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40022000 	.word	0x40022000

080019f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_InitTick+0x54>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x58>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f93b 	bl	8001c92 <HAL_SYSTICK_Config>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00e      	b.n	8001a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d80a      	bhi.n	8001a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f000 f903 	bl	8001c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <HAL_InitTick+0x5c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_IncTick+0x1c>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_IncTick+0x20>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a03      	ldr	r2, [pc, #12]	; (8001a78 <HAL_IncTick+0x20>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	20000008 	.word	0x20000008
 8001a78:	200001b0 	.word	0x200001b0

08001a7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a80:	4b02      	ldr	r3, [pc, #8]	; (8001a8c <HAL_GetTick+0x10>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	200001b0 	.word	0x200001b0

08001a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	60d3      	str	r3, [r2, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	f003 0307 	and.w	r3, r3, #7
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db0b      	blt.n	8001b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	f003 021f 	and.w	r2, r3, #31
 8001b0c:	4906      	ldr	r1, [pc, #24]	; (8001b28 <__NVIC_EnableIRQ+0x34>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	2001      	movs	r0, #1
 8001b16:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100

08001b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db0a      	blt.n	8001b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <__NVIC_SetPriority+0x4c>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	0112      	lsls	r2, r2, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b54:	e00a      	b.n	8001b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4908      	ldr	r1, [pc, #32]	; (8001b7c <__NVIC_SetPriority+0x50>)
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	3b04      	subs	r3, #4
 8001b64:	0112      	lsls	r2, r2, #4
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	440b      	add	r3, r1
 8001b6a:	761a      	strb	r2, [r3, #24]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000e100 	.word	0xe000e100
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f1c3 0307 	rsb	r3, r3, #7
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	bf28      	it	cs
 8001b9e:	2304      	movcs	r3, #4
 8001ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d902      	bls.n	8001bb0 <NVIC_EncodePriority+0x30>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3b03      	subs	r3, #3
 8001bae:	e000      	b.n	8001bb2 <NVIC_EncodePriority+0x32>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	4313      	orrs	r3, r2
         );
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf4:	d301      	bcc.n	8001bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00f      	b.n	8001c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <SysTick_Config+0x40>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c02:	210f      	movs	r1, #15
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f7ff ff90 	bl	8001b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SysTick_Config+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <SysTick_Config+0x40>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff2d 	bl	8001a90 <__NVIC_SetPriorityGrouping>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c50:	f7ff ff42 	bl	8001ad8 <__NVIC_GetPriorityGrouping>
 8001c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f7ff ff90 	bl	8001b80 <NVIC_EncodePriority>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff5f 	bl	8001b2c <__NVIC_SetPriority>
}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff35 	bl	8001af4 <__NVIC_EnableIRQ>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffa2 	bl	8001be4 <SysTick_Config>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d005      	beq.n	8001cce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	e051      	b.n	8001d72 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 020e 	bic.w	r2, r2, #14
 8001cdc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0201 	bic.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a22      	ldr	r2, [pc, #136]	; (8001d7c <HAL_DMA_Abort_IT+0xd0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d029      	beq.n	8001d4c <HAL_DMA_Abort_IT+0xa0>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a20      	ldr	r2, [pc, #128]	; (8001d80 <HAL_DMA_Abort_IT+0xd4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d022      	beq.n	8001d48 <HAL_DMA_Abort_IT+0x9c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <HAL_DMA_Abort_IT+0xd8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d01a      	beq.n	8001d42 <HAL_DMA_Abort_IT+0x96>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a1d      	ldr	r2, [pc, #116]	; (8001d88 <HAL_DMA_Abort_IT+0xdc>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d012      	beq.n	8001d3c <HAL_DMA_Abort_IT+0x90>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <HAL_DMA_Abort_IT+0xe0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d00a      	beq.n	8001d36 <HAL_DMA_Abort_IT+0x8a>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1a      	ldr	r2, [pc, #104]	; (8001d90 <HAL_DMA_Abort_IT+0xe4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d102      	bne.n	8001d30 <HAL_DMA_Abort_IT+0x84>
 8001d2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d2e:	e00e      	b.n	8001d4e <HAL_DMA_Abort_IT+0xa2>
 8001d30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d34:	e00b      	b.n	8001d4e <HAL_DMA_Abort_IT+0xa2>
 8001d36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d3a:	e008      	b.n	8001d4e <HAL_DMA_Abort_IT+0xa2>
 8001d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d40:	e005      	b.n	8001d4e <HAL_DMA_Abort_IT+0xa2>
 8001d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d46:	e002      	b.n	8001d4e <HAL_DMA_Abort_IT+0xa2>
 8001d48:	2310      	movs	r3, #16
 8001d4a:	e000      	b.n	8001d4e <HAL_DMA_Abort_IT+0xa2>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <HAL_DMA_Abort_IT+0xe8>)
 8001d50:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	4798      	blx	r3
    } 
  }
  return status;
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40020008 	.word	0x40020008
 8001d80:	4002001c 	.word	0x4002001c
 8001d84:	40020030 	.word	0x40020030
 8001d88:	40020044 	.word	0x40020044
 8001d8c:	40020058 	.word	0x40020058
 8001d90:	4002006c 	.word	0x4002006c
 8001d94:	40020000 	.word	0x40020000

08001d98 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b08b      	sub	sp, #44	; 0x2c
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc2:	e169      	b.n	8002098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	f040 8158 	bne.w	8002092 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4a9a      	ldr	r2, [pc, #616]	; (8002050 <HAL_GPIO_Init+0x2a0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d05e      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001dec:	4a98      	ldr	r2, [pc, #608]	; (8002050 <HAL_GPIO_Init+0x2a0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d875      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001df2:	4a98      	ldr	r2, [pc, #608]	; (8002054 <HAL_GPIO_Init+0x2a4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d058      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001df8:	4a96      	ldr	r2, [pc, #600]	; (8002054 <HAL_GPIO_Init+0x2a4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d86f      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001dfe:	4a96      	ldr	r2, [pc, #600]	; (8002058 <HAL_GPIO_Init+0x2a8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d052      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e04:	4a94      	ldr	r2, [pc, #592]	; (8002058 <HAL_GPIO_Init+0x2a8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d869      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e0a:	4a94      	ldr	r2, [pc, #592]	; (800205c <HAL_GPIO_Init+0x2ac>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d04c      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e10:	4a92      	ldr	r2, [pc, #584]	; (800205c <HAL_GPIO_Init+0x2ac>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d863      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e16:	4a92      	ldr	r2, [pc, #584]	; (8002060 <HAL_GPIO_Init+0x2b0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d046      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e1c:	4a90      	ldr	r2, [pc, #576]	; (8002060 <HAL_GPIO_Init+0x2b0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d85d      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e22:	2b12      	cmp	r3, #18
 8001e24:	d82a      	bhi.n	8001e7c <HAL_GPIO_Init+0xcc>
 8001e26:	2b12      	cmp	r3, #18
 8001e28:	d859      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e2a:	a201      	add	r2, pc, #4	; (adr r2, 8001e30 <HAL_GPIO_Init+0x80>)
 8001e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e30:	08001eab 	.word	0x08001eab
 8001e34:	08001e85 	.word	0x08001e85
 8001e38:	08001e97 	.word	0x08001e97
 8001e3c:	08001ed9 	.word	0x08001ed9
 8001e40:	08001edf 	.word	0x08001edf
 8001e44:	08001edf 	.word	0x08001edf
 8001e48:	08001edf 	.word	0x08001edf
 8001e4c:	08001edf 	.word	0x08001edf
 8001e50:	08001edf 	.word	0x08001edf
 8001e54:	08001edf 	.word	0x08001edf
 8001e58:	08001edf 	.word	0x08001edf
 8001e5c:	08001edf 	.word	0x08001edf
 8001e60:	08001edf 	.word	0x08001edf
 8001e64:	08001edf 	.word	0x08001edf
 8001e68:	08001edf 	.word	0x08001edf
 8001e6c:	08001edf 	.word	0x08001edf
 8001e70:	08001edf 	.word	0x08001edf
 8001e74:	08001e8d 	.word	0x08001e8d
 8001e78:	08001ea1 	.word	0x08001ea1
 8001e7c:	4a79      	ldr	r2, [pc, #484]	; (8002064 <HAL_GPIO_Init+0x2b4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e82:	e02c      	b.n	8001ede <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	623b      	str	r3, [r7, #32]
          break;
 8001e8a:	e029      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	3304      	adds	r3, #4
 8001e92:	623b      	str	r3, [r7, #32]
          break;
 8001e94:	e024      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	3308      	adds	r3, #8
 8001e9c:	623b      	str	r3, [r7, #32]
          break;
 8001e9e:	e01f      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	330c      	adds	r3, #12
 8001ea6:	623b      	str	r3, [r7, #32]
          break;
 8001ea8:	e01a      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	623b      	str	r3, [r7, #32]
          break;
 8001eb6:	e013      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d105      	bne.n	8001ecc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	611a      	str	r2, [r3, #16]
          break;
 8001eca:	e009      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	615a      	str	r2, [r3, #20]
          break;
 8001ed6:	e003      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
          break;
 8001edc:	e000      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          break;
 8001ede:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2bff      	cmp	r3, #255	; 0xff
 8001ee4:	d801      	bhi.n	8001eea <HAL_GPIO_Init+0x13a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	e001      	b.n	8001eee <HAL_GPIO_Init+0x13e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2bff      	cmp	r3, #255	; 0xff
 8001ef4:	d802      	bhi.n	8001efc <HAL_GPIO_Init+0x14c>
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	e002      	b.n	8001f02 <HAL_GPIO_Init+0x152>
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	3b08      	subs	r3, #8
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	210f      	movs	r1, #15
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	401a      	ands	r2, r3
 8001f14:	6a39      	ldr	r1, [r7, #32]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80b1 	beq.w	8002092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f30:	4b4d      	ldr	r3, [pc, #308]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4a4c      	ldr	r2, [pc, #304]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6193      	str	r3, [r2, #24]
 8001f3c:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f48:	4a48      	ldr	r2, [pc, #288]	; (800206c <HAL_GPIO_Init+0x2bc>)
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	220f      	movs	r2, #15
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a40      	ldr	r2, [pc, #256]	; (8002070 <HAL_GPIO_Init+0x2c0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d013      	beq.n	8001f9c <HAL_GPIO_Init+0x1ec>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3f      	ldr	r2, [pc, #252]	; (8002074 <HAL_GPIO_Init+0x2c4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00d      	beq.n	8001f98 <HAL_GPIO_Init+0x1e8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a3e      	ldr	r2, [pc, #248]	; (8002078 <HAL_GPIO_Init+0x2c8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d007      	beq.n	8001f94 <HAL_GPIO_Init+0x1e4>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a3d      	ldr	r2, [pc, #244]	; (800207c <HAL_GPIO_Init+0x2cc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_GPIO_Init+0x1e0>
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e006      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f90:	2304      	movs	r3, #4
 8001f92:	e004      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e002      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa0:	f002 0203 	and.w	r2, r2, #3
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	4093      	lsls	r3, r2
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fae:	492f      	ldr	r1, [pc, #188]	; (800206c <HAL_GPIO_Init+0x2bc>)
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	492c      	ldr	r1, [pc, #176]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fd6:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	4928      	ldr	r1, [pc, #160]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d006      	beq.n	8001ffe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ff0:	4b23      	ldr	r3, [pc, #140]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4922      	ldr	r1, [pc, #136]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ffe:	4b20      	ldr	r3, [pc, #128]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	43db      	mvns	r3, r3
 8002006:	491e      	ldr	r1, [pc, #120]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002008:	4013      	ands	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	4918      	ldr	r1, [pc, #96]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	608b      	str	r3, [r1, #8]
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	43db      	mvns	r3, r3
 800202e:	4914      	ldr	r1, [pc, #80]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002030:	4013      	ands	r3, r2
 8002032:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d021      	beq.n	8002084 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	490e      	ldr	r1, [pc, #56]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
 800204c:	e021      	b.n	8002092 <HAL_GPIO_Init+0x2e2>
 800204e:	bf00      	nop
 8002050:	10320000 	.word	0x10320000
 8002054:	10310000 	.word	0x10310000
 8002058:	10220000 	.word	0x10220000
 800205c:	10210000 	.word	0x10210000
 8002060:	10120000 	.word	0x10120000
 8002064:	10110000 	.word	0x10110000
 8002068:	40021000 	.word	0x40021000
 800206c:	40010000 	.word	0x40010000
 8002070:	40010800 	.word	0x40010800
 8002074:	40010c00 	.word	0x40010c00
 8002078:	40011000 	.word	0x40011000
 800207c:	40011400 	.word	0x40011400
 8002080:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_GPIO_Init+0x304>)
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	43db      	mvns	r3, r3
 800208c:	4909      	ldr	r1, [pc, #36]	; (80020b4 <HAL_GPIO_Init+0x304>)
 800208e:	4013      	ands	r3, r2
 8002090:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	3301      	adds	r3, #1
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	fa22 f303 	lsr.w	r3, r2, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f47f ae8e 	bne.w	8001dc4 <HAL_GPIO_Init+0x14>
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	372c      	adds	r7, #44	; 0x2c
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	40010400 	.word	0x40010400

080020b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
 80020c4:	4613      	mov	r3, r2
 80020c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c8:	787b      	ldrb	r3, [r7, #1]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ce:	887a      	ldrh	r2, [r7, #2]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020d4:	e003      	b.n	80020de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020d6:	887b      	ldrh	r3, [r7, #2]
 80020d8:	041a      	lsls	r2, r3, #16
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	611a      	str	r2, [r3, #16]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e11b      	b.n	8002332 <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff fb2c 	bl	800176c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2224      	movs	r2, #36	; 0x24
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0201 	bic.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800212c:	f002 ff14 	bl	8004f58 <HAL_RCC_GetPCLK1Freq>
 8002130:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4a81      	ldr	r2, [pc, #516]	; (800233c <HAL_I2C_Init+0x254>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d807      	bhi.n	800214c <HAL_I2C_Init+0x64>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4a80      	ldr	r2, [pc, #512]	; (8002340 <HAL_I2C_Init+0x258>)
 8002140:	4293      	cmp	r3, r2
 8002142:	bf94      	ite	ls
 8002144:	2301      	movls	r3, #1
 8002146:	2300      	movhi	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	e006      	b.n	800215a <HAL_I2C_Init+0x72>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4a7d      	ldr	r2, [pc, #500]	; (8002344 <HAL_I2C_Init+0x25c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	bf94      	ite	ls
 8002154:	2301      	movls	r3, #1
 8002156:	2300      	movhi	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e0e7      	b.n	8002332 <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4a78      	ldr	r2, [pc, #480]	; (8002348 <HAL_I2C_Init+0x260>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0c9b      	lsrs	r3, r3, #18
 800216c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	430a      	orrs	r2, r1
 8002180:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a6a      	ldr	r2, [pc, #424]	; (800233c <HAL_I2C_Init+0x254>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d802      	bhi.n	800219c <HAL_I2C_Init+0xb4>
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	3301      	adds	r3, #1
 800219a:	e009      	b.n	80021b0 <HAL_I2C_Init+0xc8>
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021a2:	fb02 f303 	mul.w	r3, r2, r3
 80021a6:	4a69      	ldr	r2, [pc, #420]	; (800234c <HAL_I2C_Init+0x264>)
 80021a8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ac:	099b      	lsrs	r3, r3, #6
 80021ae:	3301      	adds	r3, #1
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	430b      	orrs	r3, r1
 80021b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	495c      	ldr	r1, [pc, #368]	; (800233c <HAL_I2C_Init+0x254>)
 80021cc:	428b      	cmp	r3, r1
 80021ce:	d819      	bhi.n	8002204 <HAL_I2C_Init+0x11c>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1e59      	subs	r1, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	fbb1 f3f3 	udiv	r3, r1, r3
 80021de:	1c59      	adds	r1, r3, #1
 80021e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021e4:	400b      	ands	r3, r1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_I2C_Init+0x118>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1e59      	subs	r1, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021f8:	3301      	adds	r3, #1
 80021fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fe:	e051      	b.n	80022a4 <HAL_I2C_Init+0x1bc>
 8002200:	2304      	movs	r3, #4
 8002202:	e04f      	b.n	80022a4 <HAL_I2C_Init+0x1bc>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d111      	bne.n	8002230 <HAL_I2C_Init+0x148>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1e58      	subs	r0, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	440b      	add	r3, r1
 800221a:	fbb0 f3f3 	udiv	r3, r0, r3
 800221e:	3301      	adds	r3, #1
 8002220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf0c      	ite	eq
 8002228:	2301      	moveq	r3, #1
 800222a:	2300      	movne	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	e012      	b.n	8002256 <HAL_I2C_Init+0x16e>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1e58      	subs	r0, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6859      	ldr	r1, [r3, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	0099      	lsls	r1, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	fbb0 f3f3 	udiv	r3, r0, r3
 8002246:	3301      	adds	r3, #1
 8002248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800224c:	2b00      	cmp	r3, #0
 800224e:	bf0c      	ite	eq
 8002250:	2301      	moveq	r3, #1
 8002252:	2300      	movne	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_I2C_Init+0x176>
 800225a:	2301      	movs	r3, #1
 800225c:	e022      	b.n	80022a4 <HAL_I2C_Init+0x1bc>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10e      	bne.n	8002284 <HAL_I2C_Init+0x19c>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1e58      	subs	r0, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6859      	ldr	r1, [r3, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	440b      	add	r3, r1
 8002274:	fbb0 f3f3 	udiv	r3, r0, r3
 8002278:	3301      	adds	r3, #1
 800227a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800227e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002282:	e00f      	b.n	80022a4 <HAL_I2C_Init+0x1bc>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1e58      	subs	r0, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	0099      	lsls	r1, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	fbb0 f3f3 	udiv	r3, r0, r3
 800229a:	3301      	adds	r3, #1
 800229c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	6809      	ldr	r1, [r1, #0]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69da      	ldr	r2, [r3, #28]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6911      	ldr	r1, [r2, #16]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68d2      	ldr	r2, [r2, #12]
 80022de:	4311      	orrs	r1, r2
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	430b      	orrs	r3, r1
 80022e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	000186a0 	.word	0x000186a0
 8002340:	001e847f 	.word	0x001e847f
 8002344:	003d08ff 	.word	0x003d08ff
 8002348:	431bde83 	.word	0x431bde83
 800234c:	10624dd3 	.word	0x10624dd3

08002350 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af02      	add	r7, sp, #8
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	461a      	mov	r2, r3
 800235c:	460b      	mov	r3, r1
 800235e:	817b      	strh	r3, [r7, #10]
 8002360:	4613      	mov	r3, r2
 8002362:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002364:	f7ff fb8a 	bl	8001a7c <HAL_GetTick>
 8002368:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b20      	cmp	r3, #32
 8002374:	f040 80e0 	bne.w	8002538 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	2319      	movs	r3, #25
 800237e:	2201      	movs	r2, #1
 8002380:	4970      	ldr	r1, [pc, #448]	; (8002544 <HAL_I2C_Master_Transmit+0x1f4>)
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f002 f81d 	bl	80043c2 <I2C_WaitOnFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800238e:	2302      	movs	r3, #2
 8002390:	e0d3      	b.n	800253a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_I2C_Master_Transmit+0x50>
 800239c:	2302      	movs	r3, #2
 800239e:	e0cc      	b.n	800253a <HAL_I2C_Master_Transmit+0x1ea>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d007      	beq.n	80023c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0201 	orr.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2221      	movs	r2, #33	; 0x21
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2210      	movs	r2, #16
 80023e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	893a      	ldrh	r2, [r7, #8]
 80023f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4a50      	ldr	r2, [pc, #320]	; (8002548 <HAL_I2C_Master_Transmit+0x1f8>)
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002408:	8979      	ldrh	r1, [r7, #10]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	6a3a      	ldr	r2, [r7, #32]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f001 fe22 	bl	8004058 <I2C_MasterRequestWrite>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e08d      	b.n	800253a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002434:	e066      	b.n	8002504 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	6a39      	ldr	r1, [r7, #32]
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f002 f897 	bl	800456e <I2C_WaitOnTXEFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00d      	beq.n	8002462 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	2b04      	cmp	r3, #4
 800244c:	d107      	bne.n	800245e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800245c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e06b      	b.n	800253a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	781a      	ldrb	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b04      	cmp	r3, #4
 800249e:	d11b      	bne.n	80024d8 <HAL_I2C_Master_Transmit+0x188>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d017      	beq.n	80024d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	781a      	ldrb	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	6a39      	ldr	r1, [r7, #32]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f002 f887 	bl	80045f0 <I2C_WaitOnBTFFlagUntilTimeout>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00d      	beq.n	8002504 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d107      	bne.n	8002500 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e01a      	b.n	800253a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002508:	2b00      	cmp	r3, #0
 800250a:	d194      	bne.n	8002436 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800251a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	e000      	b.n	800253a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002538:	2302      	movs	r3, #2
  }
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	00100002 	.word	0x00100002
 8002548:	ffff0000 	.word	0xffff0000

0800254c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08c      	sub	sp, #48	; 0x30
 8002550:	af02      	add	r7, sp, #8
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	4608      	mov	r0, r1
 8002556:	4611      	mov	r1, r2
 8002558:	461a      	mov	r2, r3
 800255a:	4603      	mov	r3, r0
 800255c:	817b      	strh	r3, [r7, #10]
 800255e:	460b      	mov	r3, r1
 8002560:	813b      	strh	r3, [r7, #8]
 8002562:	4613      	mov	r3, r2
 8002564:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002566:	f7ff fa89 	bl	8001a7c <HAL_GetTick>
 800256a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b20      	cmp	r3, #32
 8002576:	f040 821e 	bne.w	80029b6 <HAL_I2C_Mem_Read+0x46a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2319      	movs	r3, #25
 8002580:	2201      	movs	r2, #1
 8002582:	4982      	ldr	r1, [pc, #520]	; (800278c <HAL_I2C_Mem_Read+0x240>)
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f001 ff1c 	bl	80043c2 <I2C_WaitOnFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002590:	2302      	movs	r3, #2
 8002592:	e211      	b.n	80029b8 <HAL_I2C_Mem_Read+0x46c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_I2C_Mem_Read+0x56>
 800259e:	2302      	movs	r3, #2
 80025a0:	e20a      	b.n	80029b8 <HAL_I2C_Mem_Read+0x46c>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d007      	beq.n	80025c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2222      	movs	r2, #34	; 0x22
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2240      	movs	r2, #64	; 0x40
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80025f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4a62      	ldr	r2, [pc, #392]	; (8002790 <HAL_I2C_Mem_Read+0x244>)
 8002608:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800260a:	88f8      	ldrh	r0, [r7, #6]
 800260c:	893a      	ldrh	r2, [r7, #8]
 800260e:	8979      	ldrh	r1, [r7, #10]
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	4603      	mov	r3, r0
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f001 fd92 	bl	8004144 <I2C_RequestMemoryRead>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e1c6      	b.n	80029b8 <HAL_I2C_Mem_Read+0x46c>
    }

    if (hi2c->XferSize == 0U)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	2b00      	cmp	r3, #0
 8002630:	d113      	bne.n	800265a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002632:	2300      	movs	r3, #0
 8002634:	623b      	str	r3, [r7, #32]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	623b      	str	r3, [r7, #32]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	623b      	str	r3, [r7, #32]
 8002646:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	e19a      	b.n	8002990 <HAL_I2C_Mem_Read+0x444>
    }
    else if (hi2c->XferSize == 1U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265e:	2b01      	cmp	r3, #1
 8002660:	d11e      	bne.n	80026a0 <HAL_I2C_Mem_Read+0x154>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002670:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002672:	b672      	cpsid	i
}
 8002674:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800269c:	b662      	cpsie	i
}
 800269e:	e035      	b.n	800270c <HAL_I2C_Mem_Read+0x1c0>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d11e      	bne.n	80026e6 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026b8:	b672      	cpsid	i
}
 80026ba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026bc:	2300      	movs	r3, #0
 80026be:	61bb      	str	r3, [r7, #24]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	61bb      	str	r3, [r7, #24]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026e2:	b662      	cpsie	i
}
 80026e4:	e012      	b.n	800270c <HAL_I2C_Mem_Read+0x1c0>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026f4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800270c:	e140      	b.n	8002990 <HAL_I2C_Mem_Read+0x444>
    {
      if (hi2c->XferSize <= 3U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002712:	2b03      	cmp	r3, #3
 8002714:	f200 80f9 	bhi.w	800290a <HAL_I2C_Mem_Read+0x3be>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	2b01      	cmp	r3, #1
 800271e:	d123      	bne.n	8002768 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002722:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f001 ffa4 	bl	8004672 <I2C_WaitOnRXNEFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e141      	b.n	80029b8 <HAL_I2C_Mem_Read+0x46c>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002766:	e113      	b.n	8002990 <HAL_I2C_Mem_Read+0x444>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276c:	2b02      	cmp	r3, #2
 800276e:	d152      	bne.n	8002816 <HAL_I2C_Mem_Read+0x2ca>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002776:	2200      	movs	r2, #0
 8002778:	4906      	ldr	r1, [pc, #24]	; (8002794 <HAL_I2C_Mem_Read+0x248>)
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f001 fe21 	bl	80043c2 <I2C_WaitOnFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e116      	b.n	80029b8 <HAL_I2C_Mem_Read+0x46c>
 800278a:	bf00      	nop
 800278c:	00100002 	.word	0x00100002
 8002790:	ffff0000 	.word	0xffff0000
 8002794:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002798:	b672      	cpsid	i
}
 800279a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027de:	b662      	cpsie	i
}
 80027e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002814:	e0bc      	b.n	8002990 <HAL_I2C_Mem_Read+0x444>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281c:	2200      	movs	r2, #0
 800281e:	4968      	ldr	r1, [pc, #416]	; (80029c0 <HAL_I2C_Mem_Read+0x474>)
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f001 fdce 	bl	80043c2 <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_I2C_Mem_Read+0x2e4>
          {
            return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0c3      	b.n	80029b8 <HAL_I2C_Mem_Read+0x46c>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800283e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002840:	b672      	cpsid	i
}
 8002842:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287c:	2200      	movs	r2, #0
 800287e:	4950      	ldr	r1, [pc, #320]	; (80029c0 <HAL_I2C_Mem_Read+0x474>)
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f001 fd9e 	bl	80043c2 <I2C_WaitOnFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_I2C_Mem_Read+0x344>
          {
            return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e093      	b.n	80029b8 <HAL_I2C_Mem_Read+0x46c>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800289e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028d2:	b662      	cpsie	i
}
 80028d4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002908:	e042      	b.n	8002990 <HAL_I2C_Mem_Read+0x444>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f001 feaf 	bl	8004672 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_Mem_Read+0x3d2>
        {
          return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e04c      	b.n	80029b8 <HAL_I2C_Mem_Read+0x46c>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b04      	cmp	r3, #4
 800295c:	d118      	bne.n	8002990 <HAL_I2C_Mem_Read+0x444>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002994:	2b00      	cmp	r3, #0
 8002996:	f47f aeba 	bne.w	800270e <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e000      	b.n	80029b8 <HAL_I2C_Mem_Read+0x46c>
  }
  else
  {
    return HAL_BUSY;
 80029b6:	2302      	movs	r3, #2
  }
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3728      	adds	r7, #40	; 0x28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	00010004 	.word	0x00010004

080029c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d003      	beq.n	80029fc <HAL_I2C_EV_IRQHandler+0x38>
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	2b40      	cmp	r3, #64	; 0x40
 80029f8:	f040 80b6 	bne.w	8002b68 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10d      	bne.n	8002a32 <HAL_I2C_EV_IRQHandler+0x6e>
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002a1c:	d003      	beq.n	8002a26 <HAL_I2C_EV_IRQHandler+0x62>
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002a24:	d101      	bne.n	8002a2a <HAL_I2C_EV_IRQHandler+0x66>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_I2C_EV_IRQHandler+0x68>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	f000 8127 	beq.w	8002c80 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00c      	beq.n	8002a56 <HAL_I2C_EV_IRQHandler+0x92>
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	0a5b      	lsrs	r3, r3, #9
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d006      	beq.n	8002a56 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f001 fe96 	bl	800477a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fd03 	bl	800345a <I2C_Master_SB>
 8002a54:	e087      	b.n	8002b66 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	08db      	lsrs	r3, r3, #3
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_I2C_EV_IRQHandler+0xb2>
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	0a5b      	lsrs	r3, r3, #9
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fd78 	bl	8003564 <I2C_Master_ADD10>
 8002a74:	e077      	b.n	8002b66 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d009      	beq.n	8002a96 <HAL_I2C_EV_IRQHandler+0xd2>
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	0a5b      	lsrs	r3, r3, #9
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fd91 	bl	80035b6 <I2C_Master_ADDR>
 8002a94:	e067      	b.n	8002b66 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	089b      	lsrs	r3, r3, #2
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d030      	beq.n	8002b04 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ab0:	f000 80e8 	beq.w	8002c84 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	09db      	lsrs	r3, r3, #7
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00f      	beq.n	8002ae0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	0a9b      	lsrs	r3, r3, #10
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	089b      	lsrs	r3, r3, #2
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d103      	bne.n	8002ae0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f9e4 	bl	8002ea6 <I2C_MasterTransmit_TXE>
 8002ade:	e042      	b.n	8002b66 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80cb 	beq.w	8002c84 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	0a5b      	lsrs	r3, r3, #9
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80c4 	beq.w	8002c84 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 faca 	bl	8003096 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b02:	e0bf      	b.n	8002c84 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b12:	f000 80b7 	beq.w	8002c84 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	099b      	lsrs	r3, r3, #6
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00f      	beq.n	8002b42 <HAL_I2C_EV_IRQHandler+0x17e>
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	0a9b      	lsrs	r3, r3, #10
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_I2C_EV_IRQHandler+0x17e>
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fb21 	bl	8003182 <I2C_MasterReceive_RXNE>
 8002b40:	e011      	b.n	8002b66 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 809a 	beq.w	8002c84 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	0a5b      	lsrs	r3, r3, #9
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 8093 	beq.w	8002c84 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fb91 	bl	8003286 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b64:	e08e      	b.n	8002c84 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002b66:	e08d      	b.n	8002c84 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d004      	beq.n	8002b7a <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	e007      	b.n	8002b8a <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	085b      	lsrs	r3, r3, #1
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d012      	beq.n	8002bbc <HAL_I2C_EV_IRQHandler+0x1f8>
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	0a5b      	lsrs	r3, r3, #9
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00c      	beq.n	8002bbc <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002bb2:	69b9      	ldr	r1, [r7, #24]
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 ff55 	bl	8003a64 <I2C_Slave_ADDR>
 8002bba:	e066      	b.n	8002c8a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d009      	beq.n	8002bdc <HAL_I2C_EV_IRQHandler+0x218>
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	0a5b      	lsrs	r3, r3, #9
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 ff89 	bl	8003aec <I2C_Slave_STOPF>
 8002bda:	e056      	b.n	8002c8a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bdc:	7bbb      	ldrb	r3, [r7, #14]
 8002bde:	2b21      	cmp	r3, #33	; 0x21
 8002be0:	d002      	beq.n	8002be8 <HAL_I2C_EV_IRQHandler+0x224>
 8002be2:	7bbb      	ldrb	r3, [r7, #14]
 8002be4:	2b29      	cmp	r3, #41	; 0x29
 8002be6:	d125      	bne.n	8002c34 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	09db      	lsrs	r3, r3, #7
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00f      	beq.n	8002c14 <HAL_I2C_EV_IRQHandler+0x250>
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	0a9b      	lsrs	r3, r3, #10
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d009      	beq.n	8002c14 <HAL_I2C_EV_IRQHandler+0x250>
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d103      	bne.n	8002c14 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fe6d 	bl	80038ec <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c12:	e039      	b.n	8002c88 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d033      	beq.n	8002c88 <HAL_I2C_EV_IRQHandler+0x2c4>
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	0a5b      	lsrs	r3, r3, #9
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d02d      	beq.n	8002c88 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fe9a 	bl	8003966 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c32:	e029      	b.n	8002c88 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	099b      	lsrs	r3, r3, #6
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00f      	beq.n	8002c60 <HAL_I2C_EV_IRQHandler+0x29c>
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	0a9b      	lsrs	r3, r3, #10
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d009      	beq.n	8002c60 <HAL_I2C_EV_IRQHandler+0x29c>
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d103      	bne.n	8002c60 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fea4 	bl	80039a6 <I2C_SlaveReceive_RXNE>
 8002c5e:	e014      	b.n	8002c8a <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00e      	beq.n	8002c8a <HAL_I2C_EV_IRQHandler+0x2c6>
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	0a5b      	lsrs	r3, r3, #9
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fed2 	bl	8003a22 <I2C_SlaveReceive_BTF>
 8002c7e:	e004      	b.n	8002c8a <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8002c80:	bf00      	nop
 8002c82:	e002      	b.n	8002c8a <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c84:	bf00      	nop
 8002c86:	e000      	b.n	8002c8a <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c88:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002c8a:	3720      	adds	r7, #32
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	0a1b      	lsrs	r3, r3, #8
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d016      	beq.n	8002ce6 <HAL_I2C_ER_IRQHandler+0x56>
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	0a1b      	lsrs	r3, r3, #8
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d010      	beq.n	8002ce6 <HAL_I2C_ER_IRQHandler+0x56>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002cd4:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	0a5b      	lsrs	r3, r3, #9
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00e      	beq.n	8002d10 <HAL_I2C_ER_IRQHandler+0x80>
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	0a1b      	lsrs	r3, r3, #8
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002d0e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	0a9b      	lsrs	r3, r3, #10
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d041      	beq.n	8002da0 <HAL_I2C_ER_IRQHandler+0x110>
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d03b      	beq.n	8002da0 <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d2e:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002d46:	7efb      	ldrb	r3, [r7, #27]
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d112      	bne.n	8002d72 <HAL_I2C_ER_IRQHandler+0xe2>
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10f      	bne.n	8002d72 <HAL_I2C_ER_IRQHandler+0xe2>
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	2b21      	cmp	r3, #33	; 0x21
 8002d56:	d008      	beq.n	8002d6a <HAL_I2C_ER_IRQHandler+0xda>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	2b29      	cmp	r3, #41	; 0x29
 8002d5c:	d005      	beq.n	8002d6a <HAL_I2C_ER_IRQHandler+0xda>
 8002d5e:	7cfb      	ldrb	r3, [r7, #19]
 8002d60:	2b28      	cmp	r3, #40	; 0x28
 8002d62:	d106      	bne.n	8002d72 <HAL_I2C_ER_IRQHandler+0xe2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b21      	cmp	r3, #33	; 0x21
 8002d68:	d103      	bne.n	8002d72 <HAL_I2C_ER_IRQHandler+0xe2>
    {
      I2C_Slave_AF(hi2c);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 ffee 	bl	8003d4c <I2C_Slave_AF>
 8002d70:	e016      	b.n	8002da0 <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d7a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	f043 0304 	orr.w	r3, r3, #4
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b10      	cmp	r3, #16
 8002d8e:	d107      	bne.n	8002da0 <HAL_I2C_ER_IRQHandler+0x110>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	0adb      	lsrs	r3, r3, #11
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00e      	beq.n	8002dca <HAL_I2C_ER_IRQHandler+0x13a>
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	0a1b      	lsrs	r3, r3, #8
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_I2C_ER_IRQHandler+0x13a>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	f043 0308 	orr.w	r3, r3, #8
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002dc8:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_I2C_ER_IRQHandler+0x152>
  {
    hi2c->ErrorCode |= error;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f001 f825 	bl	8003e2c <I2C_ITError>
  }
}
 8002de2:	bf00      	nop
 8002de4:	3728      	adds	r7, #40	; 0x28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr

08002dfc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	70fb      	strb	r3, [r7, #3]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ebc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d150      	bne.n	8002f6e <I2C_MasterTransmit_TXE+0xc8>
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	2b21      	cmp	r3, #33	; 0x21
 8002ed0:	d14d      	bne.n	8002f6e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d01d      	beq.n	8002f14 <I2C_MasterTransmit_TXE+0x6e>
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d01a      	beq.n	8002f14 <I2C_MasterTransmit_TXE+0x6e>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ee4:	d016      	beq.n	8002f14 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ef4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2211      	movs	r2, #17
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff ff6c 	bl	8002dea <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f12:	e0bc      	b.n	800308e <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f22:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f32:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b40      	cmp	r3, #64	; 0x40
 8002f4c:	d107      	bne.n	8002f5e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff ff81 	bl	8002e5e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f5c:	e097      	b.n	800308e <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ff3f 	bl	8002dea <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f6c:	e08f      	b.n	800308e <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	2b21      	cmp	r3, #33	; 0x21
 8002f72:	d007      	beq.n	8002f84 <I2C_MasterTransmit_TXE+0xde>
 8002f74:	7bbb      	ldrb	r3, [r7, #14]
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	f040 8089 	bne.w	800308e <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b22      	cmp	r3, #34	; 0x22
 8002f80:	f040 8085 	bne.w	800308e <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d108      	bne.n	8002fa0 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f9c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002f9e:	e076      	b.n	800308e <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b40      	cmp	r3, #64	; 0x40
 8002faa:	d15d      	bne.n	8003068 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d11d      	bne.n	8002ff0 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d10b      	bne.n	8002fd4 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fcc:	1c9a      	adds	r2, r3, #2
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fd2:	e05c      	b.n	800308e <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	121b      	asrs	r3, r3, #8
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fee:	e04e      	b.n	800308e <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d10b      	bne.n	8003010 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800300e:	e03e      	b.n	800308e <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003014:	2b02      	cmp	r3, #2
 8003016:	d13a      	bne.n	800308e <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b22      	cmp	r3, #34	; 0x22
 8003022:	d108      	bne.n	8003036 <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003032:	601a      	str	r2, [r3, #0]
}
 8003034:	e02b      	b.n	800308e <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b21      	cmp	r3, #33	; 0x21
 8003040:	d125      	bne.n	800308e <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	781a      	ldrb	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003066:	e012      	b.n	800308e <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	781a      	ldrb	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800308c:	e7ff      	b.n	800308e <I2C_MasterTransmit_TXE+0x1e8>
 800308e:	bf00      	nop
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b21      	cmp	r3, #33	; 0x21
 80030ae:	d164      	bne.n	800317a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d012      	beq.n	80030e0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	781a      	ldrb	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 80030de:	e04c      	b.n	800317a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d01d      	beq.n	8003122 <I2C_MasterTransmit_BTF+0x8c>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d01a      	beq.n	8003122 <I2C_MasterTransmit_BTF+0x8c>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030f2:	d016      	beq.n	8003122 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003102:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2211      	movs	r2, #17
 8003108:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff fe65 	bl	8002dea <HAL_I2C_MasterTxCpltCallback>
}
 8003120:	e02b      	b.n	800317a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003130:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003140:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d107      	bne.n	800316c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff fe7a 	bl	8002e5e <HAL_I2C_MemTxCpltCallback>
}
 800316a:	e006      	b.n	800317a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff fe38 	bl	8002dea <HAL_I2C_MasterTxCpltCallback>
}
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b22      	cmp	r3, #34	; 0x22
 8003194:	d173      	bne.n	800327e <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319a:	b29b      	uxth	r3, r3
 800319c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d920      	bls.n	80031e6 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d154      	bne.n	800327e <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80031e4:	e04b      	b.n	800327e <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d047      	beq.n	800327e <I2C_MasterReceive_RXNE+0xfc>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d002      	beq.n	80031fa <I2C_MasterReceive_RXNE+0x78>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d141      	bne.n	800327e <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003208:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003218:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b40      	cmp	r3, #64	; 0x40
 8003252:	d10a      	bne.n	800326a <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff fe04 	bl	8002e70 <HAL_I2C_MemRxCpltCallback>
}
 8003268:	e009      	b.n	800327e <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2212      	movs	r2, #18
 8003276:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff fdbf 	bl	8002dfc <HAL_I2C_MasterRxCpltCallback>
}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b04      	cmp	r3, #4
 800329c:	d11b      	bne.n	80032d6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ac:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80032d4:	e0bd      	b.n	8003452 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d129      	bne.n	8003334 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ee:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d00a      	beq.n	800330c <I2C_MasterReceive_BTF+0x86>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d007      	beq.n	800330c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691a      	ldr	r2, [r3, #16]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003332:	e08e      	b.n	8003452 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d176      	bne.n	800342c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d002      	beq.n	800334a <I2C_MasterReceive_BTF+0xc4>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b10      	cmp	r3, #16
 8003348:	d108      	bne.n	800335c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	e019      	b.n	8003390 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b04      	cmp	r3, #4
 8003360:	d002      	beq.n	8003368 <I2C_MasterReceive_BTF+0xe2>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d108      	bne.n	800337a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e00a      	b.n	8003390 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b10      	cmp	r3, #16
 800337e:	d007      	beq.n	8003390 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800338e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033ea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b40      	cmp	r3, #64	; 0x40
 80033fe:	d10a      	bne.n	8003416 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff fd2e 	bl	8002e70 <HAL_I2C_MemRxCpltCallback>
}
 8003414:	e01d      	b.n	8003452 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2212      	movs	r2, #18
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff fce9 	bl	8002dfc <HAL_I2C_MasterRxCpltCallback>
}
 800342a:	e012      	b.n	8003452 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003452:	bf00      	nop
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d117      	bne.n	800349e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	b2db      	uxtb	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003486:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003488:	e067      	b.n	800355a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	b2da      	uxtb	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	611a      	str	r2, [r3, #16]
}
 800349c:	e05d      	b.n	800355a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a6:	d133      	bne.n	8003510 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b21      	cmp	r3, #33	; 0x21
 80034b2:	d109      	bne.n	80034c8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	461a      	mov	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034c4:	611a      	str	r2, [r3, #16]
 80034c6:	e008      	b.n	80034da <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d103      	bne.n	80034ea <I2C_Master_SB+0x90>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d037      	beq.n	800355a <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d104      	bne.n	80034fe <I2C_Master_SB+0xa4>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d02d      	beq.n	800355a <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800350c:	605a      	str	r2, [r3, #4]
}
 800350e:	e024      	b.n	800355a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10e      	bne.n	8003536 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	b29b      	uxth	r3, r3
 800351e:	11db      	asrs	r3, r3, #7
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f003 0306 	and.w	r3, r3, #6
 8003526:	b2db      	uxtb	r3, r3
 8003528:	f063 030f 	orn	r3, r3, #15
 800352c:	b2da      	uxtb	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	611a      	str	r2, [r3, #16]
}
 8003534:	e011      	b.n	800355a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353a:	2b01      	cmp	r3, #1
 800353c:	d10d      	bne.n	800355a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	b29b      	uxth	r3, r3
 8003544:	11db      	asrs	r3, r3, #7
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f003 0306 	and.w	r3, r3, #6
 800354c:	b2db      	uxtb	r3, r3
 800354e:	f063 030e 	orn	r3, r3, #14
 8003552:	b2da      	uxtb	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	611a      	str	r2, [r3, #16]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	b2da      	uxtb	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357c:	2b00      	cmp	r3, #0
 800357e:	d103      	bne.n	8003588 <I2C_Master_ADD10+0x24>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	2b00      	cmp	r3, #0
 8003586:	d011      	beq.n	80035ac <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	2b00      	cmp	r3, #0
 8003590:	d104      	bne.n	800359c <I2C_Master_ADD10+0x38>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	2b00      	cmp	r3, #0
 800359a:	d007      	beq.n	80035ac <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035aa:	605a      	str	r2, [r3, #4]
    }
  }
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr

080035b6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b091      	sub	sp, #68	; 0x44
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b22      	cmp	r3, #34	; 0x22
 80035de:	f040 8174 	bne.w	80038ca <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10f      	bne.n	800360a <I2C_Master_ADDR+0x54>
 80035ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035ee:	2b40      	cmp	r3, #64	; 0x40
 80035f0:	d10b      	bne.n	800360a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f2:	2300      	movs	r3, #0
 80035f4:	633b      	str	r3, [r7, #48]	; 0x30
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	633b      	str	r3, [r7, #48]	; 0x30
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	633b      	str	r3, [r7, #48]	; 0x30
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	e16b      	b.n	80038e2 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360e:	2b00      	cmp	r3, #0
 8003610:	d11d      	bne.n	800364e <I2C_Master_ADDR+0x98>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800361a:	d118      	bne.n	800364e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800361c:	2300      	movs	r3, #0
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003640:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	651a      	str	r2, [r3, #80]	; 0x50
 800364c:	e149      	b.n	80038e2 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d113      	bne.n	8003680 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003658:	2300      	movs	r3, #0
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	62bb      	str	r3, [r7, #40]	; 0x28
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	e120      	b.n	80038c2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	f040 808a 	bne.w	80037a0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003692:	d137      	bne.n	8003704 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b2:	d113      	bne.n	80036dc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c4:	2300      	movs	r3, #0
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	e0f2      	b.n	80038c2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036dc:	2300      	movs	r3, #0
 80036de:	623b      	str	r3, [r7, #32]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	623b      	str	r3, [r7, #32]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	623b      	str	r3, [r7, #32]
 80036f0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e0de      	b.n	80038c2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003706:	2b08      	cmp	r3, #8
 8003708:	d02e      	beq.n	8003768 <I2C_Master_ADDR+0x1b2>
 800370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370c:	2b20      	cmp	r3, #32
 800370e:	d02b      	beq.n	8003768 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003712:	2b12      	cmp	r3, #18
 8003714:	d102      	bne.n	800371c <I2C_Master_ADDR+0x166>
 8003716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003718:	2b01      	cmp	r3, #1
 800371a:	d125      	bne.n	8003768 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371e:	2b04      	cmp	r3, #4
 8003720:	d00e      	beq.n	8003740 <I2C_Master_ADDR+0x18a>
 8003722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003724:	2b02      	cmp	r3, #2
 8003726:	d00b      	beq.n	8003740 <I2C_Master_ADDR+0x18a>
 8003728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372a:	2b10      	cmp	r3, #16
 800372c:	d008      	beq.n	8003740 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e007      	b.n	8003750 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800374e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003750:	2300      	movs	r3, #0
 8003752:	61fb      	str	r3, [r7, #28]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	61fb      	str	r3, [r7, #28]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	61fb      	str	r3, [r7, #28]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	e0ac      	b.n	80038c2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003776:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003778:	2300      	movs	r3, #0
 800377a:	61bb      	str	r3, [r7, #24]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	61bb      	str	r3, [r7, #24]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e090      	b.n	80038c2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d158      	bne.n	800385c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d021      	beq.n	80037f4 <I2C_Master_ADDR+0x23e>
 80037b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d01e      	beq.n	80037f4 <I2C_Master_ADDR+0x23e>
 80037b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d01b      	beq.n	80037f4 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e012      	b.n	800381a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003802:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003804:	2300      	movs	r3, #0
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003828:	d14b      	bne.n	80038c2 <I2C_Master_ADDR+0x30c>
 800382a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003830:	d00b      	beq.n	800384a <I2C_Master_ADDR+0x294>
 8003832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003834:	2b01      	cmp	r3, #1
 8003836:	d008      	beq.n	800384a <I2C_Master_ADDR+0x294>
 8003838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383a:	2b08      	cmp	r3, #8
 800383c:	d005      	beq.n	800384a <I2C_Master_ADDR+0x294>
 800383e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003840:	2b10      	cmp	r3, #16
 8003842:	d002      	beq.n	800384a <I2C_Master_ADDR+0x294>
 8003844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003846:	2b20      	cmp	r3, #32
 8003848:	d13b      	bne.n	80038c2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	e032      	b.n	80038c2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800386a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800387a:	d117      	bne.n	80038ac <I2C_Master_ADDR+0x2f6>
 800387c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003882:	d00b      	beq.n	800389c <I2C_Master_ADDR+0x2e6>
 8003884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003886:	2b01      	cmp	r3, #1
 8003888:	d008      	beq.n	800389c <I2C_Master_ADDR+0x2e6>
 800388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388c:	2b08      	cmp	r3, #8
 800388e:	d005      	beq.n	800389c <I2C_Master_ADDR+0x2e6>
 8003890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003892:	2b10      	cmp	r3, #16
 8003894:	d002      	beq.n	800389c <I2C_Master_ADDR+0x2e6>
 8003896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003898:	2b20      	cmp	r3, #32
 800389a:	d107      	bne.n	80038ac <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038aa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80038c8:	e00b      	b.n	80038e2 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	68bb      	ldr	r3, [r7, #8]
}
 80038e0:	e7ff      	b.n	80038e2 <I2C_Master_ADDR+0x32c>
 80038e2:	bf00      	nop
 80038e4:	3744      	adds	r7, #68	; 0x44
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr

080038ec <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d02b      	beq.n	800395e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	781a      	ldrb	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d114      	bne.n	800395e <I2C_SlaveTransmit_TXE+0x72>
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	2b29      	cmp	r3, #41	; 0x29
 8003938:	d111      	bne.n	800395e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003948:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2221      	movs	r2, #33	; 0x21
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2228      	movs	r2, #40	; 0x28
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff fa58 	bl	8002e0e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d011      	beq.n	800399c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d02c      	beq.n	8003a1a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d114      	bne.n	8003a1a <I2C_SlaveReceive_RXNE+0x74>
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b2a      	cmp	r3, #42	; 0x2a
 80039f4:	d111      	bne.n	8003a1a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a04:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2222      	movs	r2, #34	; 0x22
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2228      	movs	r2, #40	; 0x28
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff fa03 	bl	8002e20 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d012      	beq.n	8003a5a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a7e:	2b28      	cmp	r3, #40	; 0x28
 8003a80:	d127      	bne.n	8003ad2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a90:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	089b      	lsrs	r3, r3, #2
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	09db      	lsrs	r3, r3, #7
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d103      	bne.n	8003ab6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	81bb      	strh	r3, [r7, #12]
 8003ab4:	e002      	b.n	8003abc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ac4:	89ba      	ldrh	r2, [r7, #12]
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff f9b1 	bl	8002e32 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ad0:	e008      	b.n	8003ae4 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f06f 0202 	mvn.w	r2, #2
 8003ada:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003ae4:	bf00      	nop
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b0a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60bb      	str	r3, [r7, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b38:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b48:	d172      	bne.n	8003c30 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	2b22      	cmp	r3, #34	; 0x22
 8003b4e:	d002      	beq.n	8003b56 <I2C_Slave_STOPF+0x6a>
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	2b2a      	cmp	r3, #42	; 0x2a
 8003b54:	d135      	bne.n	8003bc2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f043 0204 	orr.w	r2, r3, #4
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b88:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe f902 	bl	8001d98 <HAL_DMA_GetState>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d049      	beq.n	8003c2e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	4a69      	ldr	r2, [pc, #420]	; (8003d44 <I2C_Slave_STOPF+0x258>)
 8003ba0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe f880 	bl	8001cac <HAL_DMA_Abort_IT>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d03d      	beq.n	8003c2e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bc0:	e035      	b.n	8003c2e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f043 0204 	orr.w	r2, r3, #4
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe f8cc 	bl	8001d98 <HAL_DMA_GetState>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d014      	beq.n	8003c30 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0a:	4a4e      	ldr	r2, [pc, #312]	; (8003d44 <I2C_Slave_STOPF+0x258>)
 8003c0c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe f84a 	bl	8001cac <HAL_DMA_Abort_IT>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d008      	beq.n	8003c30 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4798      	blx	r3
 8003c2c:	e000      	b.n	8003c30 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c2e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d03e      	beq.n	8003cb8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d112      	bne.n	8003c6e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c78:	2b40      	cmp	r3, #64	; 0x40
 8003c7a:	d112      	bne.n	8003ca2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691a      	ldr	r2, [r3, #16]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	f043 0204 	orr.w	r2, r3, #4
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f8b3 	bl	8003e2c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003cc6:	e039      	b.n	8003d3c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
 8003cca:	2b2a      	cmp	r3, #42	; 0x2a
 8003ccc:	d109      	bne.n	8003ce2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2228      	movs	r2, #40	; 0x28
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff f89f 	bl	8002e20 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b28      	cmp	r3, #40	; 0x28
 8003cec:	d111      	bne.n	8003d12 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a15      	ldr	r2, [pc, #84]	; (8003d48 <I2C_Slave_STOPF+0x25c>)
 8003cf2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff f89e 	bl	8002e4c <HAL_I2C_ListenCpltCallback>
}
 8003d10:	e014      	b.n	8003d3c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	2b22      	cmp	r3, #34	; 0x22
 8003d18:	d002      	beq.n	8003d20 <I2C_Slave_STOPF+0x234>
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
 8003d1c:	2b22      	cmp	r3, #34	; 0x22
 8003d1e:	d10d      	bne.n	8003d3c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff f872 	bl	8002e20 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	080042e5 	.word	0x080042e5
 8003d48:	ffff0000 	.word	0xffff0000

08003d4c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d002      	beq.n	8003d6e <I2C_Slave_AF+0x22>
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d129      	bne.n	8003dc2 <I2C_Slave_AF+0x76>
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	2b28      	cmp	r3, #40	; 0x28
 8003d72:	d126      	bne.n	8003dc2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a2c      	ldr	r2, [pc, #176]	; (8003e28 <I2C_Slave_AF+0xdc>)
 8003d78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d88:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d92:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff f846 	bl	8002e4c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003dc0:	e02e      	b.n	8003e20 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	2b21      	cmp	r3, #33	; 0x21
 8003dc6:	d126      	bne.n	8003e16 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <I2C_Slave_AF+0xdc>)
 8003dcc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2221      	movs	r2, #33	; 0x21
 8003dd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003df2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dfc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fe fffd 	bl	8002e0e <HAL_I2C_SlaveTxCpltCallback>
}
 8003e14:	e004      	b.n	8003e20 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e1e:	615a      	str	r2, [r3, #20]
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	ffff0000 	.word	0xffff0000

08003e2c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3a:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b10      	cmp	r3, #16
 8003e46:	d10a      	bne.n	8003e5e <I2C_ITError+0x32>
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b22      	cmp	r3, #34	; 0x22
 8003e4c:	d107      	bne.n	8003e5e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e5c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e64:	2b28      	cmp	r3, #40	; 0x28
 8003e66:	d107      	bne.n	8003e78 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2228      	movs	r2, #40	; 0x28
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e76:	e015      	b.n	8003ea4 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e86:	d006      	beq.n	8003e96 <I2C_ITError+0x6a>
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b60      	cmp	r3, #96	; 0x60
 8003e8c:	d003      	beq.n	8003e96 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb2:	d161      	bne.n	8003f78 <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d020      	beq.n	8003f12 <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed4:	4a5e      	ldr	r2, [pc, #376]	; (8004050 <I2C_ITError+0x224>)
 8003ed6:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fd fee5 	bl	8001cac <HAL_DMA_Abort_IT>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8089 	beq.w	8003ffc <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0201 	bic.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	4798      	blx	r3
 8003f10:	e074      	b.n	8003ffc <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	4a4e      	ldr	r2, [pc, #312]	; (8004050 <I2C_ITError+0x224>)
 8003f18:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fd fec4 	bl	8001cac <HAL_DMA_Abort_IT>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d068      	beq.n	8003ffc <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	2b40      	cmp	r3, #64	; 0x40
 8003f36:	d10b      	bne.n	8003f50 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0201 	bic.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f72:	4610      	mov	r0, r2
 8003f74:	4798      	blx	r3
 8003f76:	e041      	b.n	8003ffc <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b60      	cmp	r3, #96	; 0x60
 8003f82:	d125      	bne.n	8003fd0 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	d10b      	bne.n	8003fb8 <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0201 	bic.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7fe ff63 	bl	8002e94 <HAL_I2C_AbortCpltCallback>
 8003fce:	e015      	b.n	8003ffc <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b40      	cmp	r3, #64	; 0x40
 8003fdc:	d10b      	bne.n	8003ff6 <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fe ff43 	bl	8002e82 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004002:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b04      	cmp	r3, #4
 800400e:	d11b      	bne.n	8004048 <I2C_ITError+0x21c>
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	2b28      	cmp	r3, #40	; 0x28
 8004014:	d118      	bne.n	8004048 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004024:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <I2C_ITError+0x228>)
 800402a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fe ff02 	bl	8002e4c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004048:	bf00      	nop
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	080042e5 	.word	0x080042e5
 8004054:	ffff0000 	.word	0xffff0000

08004058 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	460b      	mov	r3, r1
 8004066:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d006      	beq.n	8004082 <I2C_MasterRequestWrite+0x2a>
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d003      	beq.n	8004082 <I2C_MasterRequestWrite+0x2a>
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004080:	d108      	bne.n	8004094 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	e00b      	b.n	80040ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	2b12      	cmp	r3, #18
 800409a:	d107      	bne.n	80040ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f982 	bl	80043c2 <I2C_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e035      	b.n	8004134 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040d0:	d108      	bne.n	80040e4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040d2:	897b      	ldrh	r3, [r7, #10]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	461a      	mov	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040e0:	611a      	str	r2, [r3, #16]
 80040e2:	e01b      	b.n	800411c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040e4:	897b      	ldrh	r3, [r7, #10]
 80040e6:	11db      	asrs	r3, r3, #7
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	f003 0306 	and.w	r3, r3, #6
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	f063 030f 	orn	r3, r3, #15
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	490e      	ldr	r1, [pc, #56]	; (800413c <I2C_MasterRequestWrite+0xe4>)
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f9b4 	bl	8004470 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e010      	b.n	8004134 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004112:	897b      	ldrh	r3, [r7, #10]
 8004114:	b2da      	uxtb	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	4907      	ldr	r1, [pc, #28]	; (8004140 <I2C_MasterRequestWrite+0xe8>)
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f9a4 	bl	8004470 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	00010008 	.word	0x00010008
 8004140:	00010002 	.word	0x00010002

08004144 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	4608      	mov	r0, r1
 800414e:	4611      	mov	r1, r2
 8004150:	461a      	mov	r2, r3
 8004152:	4603      	mov	r3, r0
 8004154:	817b      	strh	r3, [r7, #10]
 8004156:	460b      	mov	r3, r1
 8004158:	813b      	strh	r3, [r7, #8]
 800415a:	4613      	mov	r3, r2
 800415c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800416c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800417c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	2200      	movs	r2, #0
 8004186:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f919 	bl	80043c2 <I2C_WaitOnFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e09e      	b.n	80042d8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800419a:	897b      	ldrh	r3, [r7, #10]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	6a3a      	ldr	r2, [r7, #32]
 80041ae:	494c      	ldr	r1, [pc, #304]	; (80042e0 <I2C_RequestMemoryRead+0x19c>)
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f95d 	bl	8004470 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e08b      	b.n	80042d8 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d8:	6a39      	ldr	r1, [r7, #32]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f9c7 	bl	800456e <I2C_WaitOnTXEFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00d      	beq.n	8004202 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d107      	bne.n	80041fe <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e06a      	b.n	80042d8 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d105      	bne.n	8004214 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004208:	893b      	ldrh	r3, [r7, #8]
 800420a:	b2da      	uxtb	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	611a      	str	r2, [r3, #16]
 8004212:	e021      	b.n	8004258 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004214:	893b      	ldrh	r3, [r7, #8]
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	b29b      	uxth	r3, r3
 800421a:	b2da      	uxtb	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004224:	6a39      	ldr	r1, [r7, #32]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f9a1 	bl	800456e <I2C_WaitOnTXEFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00d      	beq.n	800424e <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	2b04      	cmp	r3, #4
 8004238:	d107      	bne.n	800424a <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004248:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e044      	b.n	80042d8 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800424e:	893b      	ldrh	r3, [r7, #8]
 8004250:	b2da      	uxtb	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800425a:	6a39      	ldr	r1, [r7, #32]
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f986 	bl	800456e <I2C_WaitOnTXEFlagUntilTimeout>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00d      	beq.n	8004284 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	2b04      	cmp	r3, #4
 800426e:	d107      	bne.n	8004280 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e029      	b.n	80042d8 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004292:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	2200      	movs	r2, #0
 800429c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f88e 	bl	80043c2 <I2C_WaitOnFlagUntilTimeout>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e013      	b.n	80042d8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042b0:	897b      	ldrh	r3, [r7, #10]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	6a3a      	ldr	r2, [r7, #32]
 80042c4:	4906      	ldr	r1, [pc, #24]	; (80042e0 <I2C_RequestMemoryRead+0x19c>)
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f8d2 	bl	8004470 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	00010002 	.word	0x00010002

080042e4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f8:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fe:	2200      	movs	r2, #0
 8004300:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	2200      	movs	r2, #0
 8004308:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004318:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004324:	2200      	movs	r2, #0
 8004326:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	2200      	movs	r2, #0
 800432e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0201 	bic.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b60      	cmp	r3, #96	; 0x60
 800434a:	d10e      	bne.n	800436a <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f7fe fd96 	bl	8002e94 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004368:	e027      	b.n	80043ba <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800436a:	7afb      	ldrb	r3, [r7, #11]
 800436c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004370:	2b28      	cmp	r3, #40	; 0x28
 8004372:	d117      	bne.n	80043a4 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004392:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2228      	movs	r2, #40	; 0x28
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80043a2:	e007      	b.n	80043b4 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7fe fd64 	bl	8002e82 <HAL_I2C_ErrorCallback>
}
 80043ba:	bf00      	nop
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b084      	sub	sp, #16
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	603b      	str	r3, [r7, #0]
 80043ce:	4613      	mov	r3, r2
 80043d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043d2:	e025      	b.n	8004420 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043da:	d021      	beq.n	8004420 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043dc:	f7fd fb4e 	bl	8001a7c <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d116      	bne.n	8004420 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	f043 0220 	orr.w	r2, r3, #32
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e023      	b.n	8004468 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	0c1b      	lsrs	r3, r3, #16
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b01      	cmp	r3, #1
 8004428:	d10d      	bne.n	8004446 <I2C_WaitOnFlagUntilTimeout+0x84>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	43da      	mvns	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4013      	ands	r3, r2
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf0c      	ite	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	2300      	movne	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	461a      	mov	r2, r3
 8004444:	e00c      	b.n	8004460 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	43da      	mvns	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	4013      	ands	r3, r2
 8004452:	b29b      	uxth	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	bf0c      	ite	eq
 8004458:	2301      	moveq	r3, #1
 800445a:	2300      	movne	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	461a      	mov	r2, r3
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	429a      	cmp	r2, r3
 8004464:	d0b6      	beq.n	80043d4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800447e:	e051      	b.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448e:	d123      	bne.n	80044d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800449e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	f043 0204 	orr.w	r2, r3, #4
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e046      	b.n	8004566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044de:	d021      	beq.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e0:	f7fd facc 	bl	8001a7c <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d302      	bcc.n	80044f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d116      	bne.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	f043 0220 	orr.w	r2, r3, #32
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e020      	b.n	8004566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	0c1b      	lsrs	r3, r3, #16
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b01      	cmp	r3, #1
 800452c:	d10c      	bne.n	8004548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	43da      	mvns	r2, r3
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4013      	ands	r3, r2
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	bf14      	ite	ne
 8004540:	2301      	movne	r3, #1
 8004542:	2300      	moveq	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	e00b      	b.n	8004560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	43da      	mvns	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4013      	ands	r3, r2
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	bf14      	ite	ne
 800455a:	2301      	movne	r3, #1
 800455c:	2300      	moveq	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d18d      	bne.n	8004480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800457a:	e02d      	b.n	80045d8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f8ce 	bl	800471e <I2C_IsAcknowledgeFailed>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e02d      	b.n	80045e8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004592:	d021      	beq.n	80045d8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004594:	f7fd fa72 	bl	8001a7c <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d302      	bcc.n	80045aa <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d116      	bne.n	80045d8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	f043 0220 	orr.w	r2, r3, #32
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e007      	b.n	80045e8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e2:	2b80      	cmp	r3, #128	; 0x80
 80045e4:	d1ca      	bne.n	800457c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045fc:	e02d      	b.n	800465a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f88d 	bl	800471e <I2C_IsAcknowledgeFailed>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e02d      	b.n	800466a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004614:	d021      	beq.n	800465a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004616:	f7fd fa31 	bl	8001a7c <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	429a      	cmp	r2, r3
 8004624:	d302      	bcc.n	800462c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d116      	bne.n	800465a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f043 0220 	orr.w	r2, r3, #32
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e007      	b.n	800466a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b04      	cmp	r3, #4
 8004666:	d1ca      	bne.n	80045fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	60f8      	str	r0, [r7, #12]
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800467e:	e042      	b.n	8004706 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b10      	cmp	r3, #16
 800468c:	d119      	bne.n	80046c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f06f 0210 	mvn.w	r2, #16
 8004696:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e029      	b.n	8004716 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c2:	f7fd f9db 	bl	8001a7c <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d302      	bcc.n	80046d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d116      	bne.n	8004706 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f043 0220 	orr.w	r2, r3, #32
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e007      	b.n	8004716 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004710:	2b40      	cmp	r3, #64	; 0x40
 8004712:	d1b5      	bne.n	8004680 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004734:	d11b      	bne.n	800476e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800473e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f043 0204 	orr.w	r2, r3, #4
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr

0800477a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800478a:	d103      	bne.n	8004794 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004792:	e007      	b.n	80047a4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800479c:	d102      	bne.n	80047a4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2208      	movs	r2, #8
 80047a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr
	...

080047b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e26c      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8087 	beq.w	80048de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047d0:	4b92      	ldr	r3, [pc, #584]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 030c 	and.w	r3, r3, #12
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d00c      	beq.n	80047f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047dc:	4b8f      	ldr	r3, [pc, #572]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 030c 	and.w	r3, r3, #12
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d112      	bne.n	800480e <HAL_RCC_OscConfig+0x5e>
 80047e8:	4b8c      	ldr	r3, [pc, #560]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f4:	d10b      	bne.n	800480e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f6:	4b89      	ldr	r3, [pc, #548]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d06c      	beq.n	80048dc <HAL_RCC_OscConfig+0x12c>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d168      	bne.n	80048dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e246      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004816:	d106      	bne.n	8004826 <HAL_RCC_OscConfig+0x76>
 8004818:	4b80      	ldr	r3, [pc, #512]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a7f      	ldr	r2, [pc, #508]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800481e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	e02e      	b.n	8004884 <HAL_RCC_OscConfig+0xd4>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10c      	bne.n	8004848 <HAL_RCC_OscConfig+0x98>
 800482e:	4b7b      	ldr	r3, [pc, #492]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a7a      	ldr	r2, [pc, #488]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	4b78      	ldr	r3, [pc, #480]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a77      	ldr	r2, [pc, #476]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	e01d      	b.n	8004884 <HAL_RCC_OscConfig+0xd4>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0xbc>
 8004852:	4b72      	ldr	r3, [pc, #456]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a71      	ldr	r2, [pc, #452]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	4b6f      	ldr	r3, [pc, #444]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a6e      	ldr	r2, [pc, #440]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	e00b      	b.n	8004884 <HAL_RCC_OscConfig+0xd4>
 800486c:	4b6b      	ldr	r3, [pc, #428]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a6a      	ldr	r2, [pc, #424]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	4b68      	ldr	r3, [pc, #416]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a67      	ldr	r2, [pc, #412]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800487e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004882:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d013      	beq.n	80048b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488c:	f7fd f8f6 	bl	8001a7c <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004894:	f7fd f8f2 	bl	8001a7c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b64      	cmp	r3, #100	; 0x64
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e1fa      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a6:	4b5d      	ldr	r3, [pc, #372]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0xe4>
 80048b2:	e014      	b.n	80048de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b4:	f7fd f8e2 	bl	8001a7c <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048bc:	f7fd f8de 	bl	8001a7c <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	; 0x64
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e1e6      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ce:	4b53      	ldr	r3, [pc, #332]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0x10c>
 80048da:	e000      	b.n	80048de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d063      	beq.n	80049b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048ea:	4b4c      	ldr	r3, [pc, #304]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00b      	beq.n	800490e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048f6:	4b49      	ldr	r3, [pc, #292]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 030c 	and.w	r3, r3, #12
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d11c      	bne.n	800493c <HAL_RCC_OscConfig+0x18c>
 8004902:	4b46      	ldr	r3, [pc, #280]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d116      	bne.n	800493c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800490e:	4b43      	ldr	r3, [pc, #268]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <HAL_RCC_OscConfig+0x176>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d001      	beq.n	8004926 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e1ba      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004926:	4b3d      	ldr	r3, [pc, #244]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4939      	ldr	r1, [pc, #228]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004936:	4313      	orrs	r3, r2
 8004938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800493a:	e03a      	b.n	80049b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d020      	beq.n	8004986 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004944:	4b36      	ldr	r3, [pc, #216]	; (8004a20 <HAL_RCC_OscConfig+0x270>)
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494a:	f7fd f897 	bl	8001a7c <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004952:	f7fd f893 	bl	8001a7c <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e19b      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004964:	4b2d      	ldr	r3, [pc, #180]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004970:	4b2a      	ldr	r3, [pc, #168]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4927      	ldr	r1, [pc, #156]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004980:	4313      	orrs	r3, r2
 8004982:	600b      	str	r3, [r1, #0]
 8004984:	e015      	b.n	80049b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004986:	4b26      	ldr	r3, [pc, #152]	; (8004a20 <HAL_RCC_OscConfig+0x270>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498c:	f7fd f876 	bl	8001a7c <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004994:	f7fd f872 	bl	8001a7c <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e17a      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049a6:	4b1d      	ldr	r3, [pc, #116]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d03a      	beq.n	8004a34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d019      	beq.n	80049fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049c6:	4b17      	ldr	r3, [pc, #92]	; (8004a24 <HAL_RCC_OscConfig+0x274>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049cc:	f7fd f856 	bl	8001a7c <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049d4:	f7fd f852 	bl	8001a7c <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e15a      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e6:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0f0      	beq.n	80049d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80049f2:	2001      	movs	r0, #1
 80049f4:	f000 fad8 	bl	8004fa8 <RCC_Delay>
 80049f8:	e01c      	b.n	8004a34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049fa:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <HAL_RCC_OscConfig+0x274>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a00:	f7fd f83c 	bl	8001a7c <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a06:	e00f      	b.n	8004a28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a08:	f7fd f838 	bl	8001a7c <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d908      	bls.n	8004a28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e140      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	42420000 	.word	0x42420000
 8004a24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a28:	4b9e      	ldr	r3, [pc, #632]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e9      	bne.n	8004a08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 80a6 	beq.w	8004b8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a42:	2300      	movs	r3, #0
 8004a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a46:	4b97      	ldr	r3, [pc, #604]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10d      	bne.n	8004a6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a52:	4b94      	ldr	r3, [pc, #592]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	4a93      	ldr	r2, [pc, #588]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	61d3      	str	r3, [r2, #28]
 8004a5e:	4b91      	ldr	r3, [pc, #580]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a66:	60bb      	str	r3, [r7, #8]
 8004a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a6e:	4b8e      	ldr	r3, [pc, #568]	; (8004ca8 <HAL_RCC_OscConfig+0x4f8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d118      	bne.n	8004aac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a7a:	4b8b      	ldr	r3, [pc, #556]	; (8004ca8 <HAL_RCC_OscConfig+0x4f8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a8a      	ldr	r2, [pc, #552]	; (8004ca8 <HAL_RCC_OscConfig+0x4f8>)
 8004a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a86:	f7fc fff9 	bl	8001a7c <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a8e:	f7fc fff5 	bl	8001a7c <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b64      	cmp	r3, #100	; 0x64
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e0fd      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa0:	4b81      	ldr	r3, [pc, #516]	; (8004ca8 <HAL_RCC_OscConfig+0x4f8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d106      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x312>
 8004ab4:	4b7b      	ldr	r3, [pc, #492]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	4a7a      	ldr	r2, [pc, #488]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	6213      	str	r3, [r2, #32]
 8004ac0:	e02d      	b.n	8004b1e <HAL_RCC_OscConfig+0x36e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10c      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x334>
 8004aca:	4b76      	ldr	r3, [pc, #472]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	4a75      	ldr	r2, [pc, #468]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004ad0:	f023 0301 	bic.w	r3, r3, #1
 8004ad4:	6213      	str	r3, [r2, #32]
 8004ad6:	4b73      	ldr	r3, [pc, #460]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	4a72      	ldr	r2, [pc, #456]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004adc:	f023 0304 	bic.w	r3, r3, #4
 8004ae0:	6213      	str	r3, [r2, #32]
 8004ae2:	e01c      	b.n	8004b1e <HAL_RCC_OscConfig+0x36e>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	2b05      	cmp	r3, #5
 8004aea:	d10c      	bne.n	8004b06 <HAL_RCC_OscConfig+0x356>
 8004aec:	4b6d      	ldr	r3, [pc, #436]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	4a6c      	ldr	r2, [pc, #432]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004af2:	f043 0304 	orr.w	r3, r3, #4
 8004af6:	6213      	str	r3, [r2, #32]
 8004af8:	4b6a      	ldr	r3, [pc, #424]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	4a69      	ldr	r2, [pc, #420]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	6213      	str	r3, [r2, #32]
 8004b04:	e00b      	b.n	8004b1e <HAL_RCC_OscConfig+0x36e>
 8004b06:	4b67      	ldr	r3, [pc, #412]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	4a66      	ldr	r2, [pc, #408]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	6213      	str	r3, [r2, #32]
 8004b12:	4b64      	ldr	r3, [pc, #400]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	4a63      	ldr	r2, [pc, #396]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004b18:	f023 0304 	bic.w	r3, r3, #4
 8004b1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d015      	beq.n	8004b52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b26:	f7fc ffa9 	bl	8001a7c <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2c:	e00a      	b.n	8004b44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b2e:	f7fc ffa5 	bl	8001a7c <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e0ab      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b44:	4b57      	ldr	r3, [pc, #348]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0ee      	beq.n	8004b2e <HAL_RCC_OscConfig+0x37e>
 8004b50:	e014      	b.n	8004b7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b52:	f7fc ff93 	bl	8001a7c <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b58:	e00a      	b.n	8004b70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b5a:	f7fc ff8f 	bl	8001a7c <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e095      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b70:	4b4c      	ldr	r3, [pc, #304]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1ee      	bne.n	8004b5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d105      	bne.n	8004b8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b82:	4b48      	ldr	r3, [pc, #288]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	4a47      	ldr	r2, [pc, #284]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 8081 	beq.w	8004c9a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b98:	4b42      	ldr	r3, [pc, #264]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 030c 	and.w	r3, r3, #12
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d061      	beq.n	8004c68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d146      	bne.n	8004c3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bac:	4b3f      	ldr	r3, [pc, #252]	; (8004cac <HAL_RCC_OscConfig+0x4fc>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb2:	f7fc ff63 	bl	8001a7c <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bb8:	e008      	b.n	8004bcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bba:	f7fc ff5f 	bl	8001a7c <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e067      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bcc:	4b35      	ldr	r3, [pc, #212]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f0      	bne.n	8004bba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be0:	d108      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004be2:	4b30      	ldr	r3, [pc, #192]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	492d      	ldr	r1, [pc, #180]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bf4:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a19      	ldr	r1, [r3, #32]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	430b      	orrs	r3, r1
 8004c06:	4927      	ldr	r1, [pc, #156]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c0c:	4b27      	ldr	r3, [pc, #156]	; (8004cac <HAL_RCC_OscConfig+0x4fc>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c12:	f7fc ff33 	bl	8001a7c <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c1a:	f7fc ff2f 	bl	8001a7c <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e037      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0f0      	beq.n	8004c1a <HAL_RCC_OscConfig+0x46a>
 8004c38:	e02f      	b.n	8004c9a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3a:	4b1c      	ldr	r3, [pc, #112]	; (8004cac <HAL_RCC_OscConfig+0x4fc>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c40:	f7fc ff1c 	bl	8001a7c <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c48:	f7fc ff18 	bl	8001a7c <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e020      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c5a:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0x498>
 8004c66:	e018      	b.n	8004c9a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e013      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d106      	bne.n	8004c96 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d001      	beq.n	8004c9a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	40007000 	.word	0x40007000
 8004cac:	42420060 	.word	0x42420060

08004cb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e0d0      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc4:	4b6a      	ldr	r3, [pc, #424]	; (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d910      	bls.n	8004cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd2:	4b67      	ldr	r3, [pc, #412]	; (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f023 0207 	bic.w	r2, r3, #7
 8004cda:	4965      	ldr	r1, [pc, #404]	; (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce2:	4b63      	ldr	r3, [pc, #396]	; (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d001      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0b8      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d020      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d0c:	4b59      	ldr	r3, [pc, #356]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4a58      	ldr	r2, [pc, #352]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d24:	4b53      	ldr	r3, [pc, #332]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4a52      	ldr	r2, [pc, #328]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004d2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d30:	4b50      	ldr	r3, [pc, #320]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	494d      	ldr	r1, [pc, #308]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d040      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d107      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d56:	4b47      	ldr	r3, [pc, #284]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d115      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e07f      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d107      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6e:	4b41      	ldr	r3, [pc, #260]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e073      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7e:	4b3d      	ldr	r3, [pc, #244]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e06b      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d8e:	4b39      	ldr	r3, [pc, #228]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f023 0203 	bic.w	r2, r3, #3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	4936      	ldr	r1, [pc, #216]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004da0:	f7fc fe6c 	bl	8001a7c <HAL_GetTick>
 8004da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da6:	e00a      	b.n	8004dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da8:	f7fc fe68 	bl	8001a7c <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e053      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dbe:	4b2d      	ldr	r3, [pc, #180]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 020c 	and.w	r2, r3, #12
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d1eb      	bne.n	8004da8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd0:	4b27      	ldr	r3, [pc, #156]	; (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d210      	bcs.n	8004e00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dde:	4b24      	ldr	r3, [pc, #144]	; (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 0207 	bic.w	r2, r3, #7
 8004de6:	4922      	ldr	r1, [pc, #136]	; (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dee:	4b20      	ldr	r3, [pc, #128]	; (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e032      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e0c:	4b19      	ldr	r3, [pc, #100]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4916      	ldr	r1, [pc, #88]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d009      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e2a:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	490e      	ldr	r1, [pc, #56]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e3e:	f000 f821 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004e42:	4602      	mov	r2, r0
 8004e44:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	490a      	ldr	r1, [pc, #40]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e50:	5ccb      	ldrb	r3, [r1, r3]
 8004e52:	fa22 f303 	lsr.w	r3, r2, r3
 8004e56:	4a09      	ldr	r2, [pc, #36]	; (8004e7c <HAL_RCC_ClockConfig+0x1cc>)
 8004e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e5a:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <HAL_RCC_ClockConfig+0x1d0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fc fdca 	bl	80019f8 <HAL_InitTick>

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40022000 	.word	0x40022000
 8004e74:	40021000 	.word	0x40021000
 8004e78:	080068d8 	.word	0x080068d8
 8004e7c:	20000000 	.word	0x20000000
 8004e80:	20000004 	.word	0x20000004

08004e84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e84:	b490      	push	{r4, r7}
 8004e86:	b08a      	sub	sp, #40	; 0x28
 8004e88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e8a:	4b2a      	ldr	r3, [pc, #168]	; (8004f34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e8c:	1d3c      	adds	r4, r7, #4
 8004e8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e94:	f240 2301 	movw	r3, #513	; 0x201
 8004e98:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004eae:	4b22      	ldr	r3, [pc, #136]	; (8004f38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d002      	beq.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d003      	beq.n	8004eca <HAL_RCC_GetSysClockFreq+0x46>
 8004ec2:	e02d      	b.n	8004f20 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ec4:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ec6:	623b      	str	r3, [r7, #32]
      break;
 8004ec8:	e02d      	b.n	8004f26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	0c9b      	lsrs	r3, r3, #18
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004edc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d013      	beq.n	8004f10 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ee8:	4b13      	ldr	r3, [pc, #76]	; (8004f38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	0c5b      	lsrs	r3, r3, #17
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004efc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	4a0e      	ldr	r2, [pc, #56]	; (8004f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f02:	fb02 f203 	mul.w	r2, r2, r3
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0e:	e004      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	4a0b      	ldr	r2, [pc, #44]	; (8004f40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f14:	fb02 f303 	mul.w	r3, r2, r3
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	623b      	str	r3, [r7, #32]
      break;
 8004f1e:	e002      	b.n	8004f26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f22:	623b      	str	r3, [r7, #32]
      break;
 8004f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f26:	6a3b      	ldr	r3, [r7, #32]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3728      	adds	r7, #40	; 0x28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bc90      	pop	{r4, r7}
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	080068c8 	.word	0x080068c8
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	007a1200 	.word	0x007a1200
 8004f40:	003d0900 	.word	0x003d0900

08004f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f48:	4b02      	ldr	r3, [pc, #8]	; (8004f54 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr
 8004f54:	20000000 	.word	0x20000000

08004f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f5c:	f7ff fff2 	bl	8004f44 <HAL_RCC_GetHCLKFreq>
 8004f60:	4602      	mov	r2, r0
 8004f62:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	0a1b      	lsrs	r3, r3, #8
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	4903      	ldr	r1, [pc, #12]	; (8004f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f6e:	5ccb      	ldrb	r3, [r1, r3]
 8004f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	080068e8 	.word	0x080068e8

08004f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f84:	f7ff ffde 	bl	8004f44 <HAL_RCC_GetHCLKFreq>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	0adb      	lsrs	r3, r3, #11
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	4903      	ldr	r1, [pc, #12]	; (8004fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f96:	5ccb      	ldrb	r3, [r1, r3]
 8004f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	080068e8 	.word	0x080068e8

08004fa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004fb0:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <RCC_Delay+0x34>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a0a      	ldr	r2, [pc, #40]	; (8004fe0 <RCC_Delay+0x38>)
 8004fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fba:	0a5b      	lsrs	r3, r3, #9
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	fb02 f303 	mul.w	r3, r2, r3
 8004fc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004fc4:	bf00      	nop
  }
  while (Delay --);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	1e5a      	subs	r2, r3, #1
 8004fca:	60fa      	str	r2, [r7, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1f9      	bne.n	8004fc4 <RCC_Delay+0x1c>
}
 8004fd0:	bf00      	nop
 8004fd2:	bf00      	nop
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr
 8004fdc:	20000000 	.word	0x20000000
 8004fe0:	10624dd3 	.word	0x10624dd3

08004fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e03f      	b.n	8005076 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7fc fbfc 	bl	8001808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2224      	movs	r2, #36	; 0x24
 8005014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f829 	bl	8005080 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800503c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695a      	ldr	r2, [r3, #20]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800504c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800505c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80050ba:	f023 030c 	bic.w	r3, r3, #12
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6812      	ldr	r2, [r2, #0]
 80050c2:	68f9      	ldr	r1, [r7, #12]
 80050c4:	430b      	orrs	r3, r1
 80050c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a52      	ldr	r2, [pc, #328]	; (800522c <UART_SetConfig+0x1ac>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d14e      	bne.n	8005186 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80050e8:	f7ff ff4a 	bl	8004f80 <HAL_RCC_GetPCLK2Freq>
 80050ec:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	009a      	lsls	r2, r3, #2
 80050f8:	441a      	add	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	fbb2 f3f3 	udiv	r3, r2, r3
 8005104:	4a4a      	ldr	r2, [pc, #296]	; (8005230 <UART_SetConfig+0x1b0>)
 8005106:	fba2 2303 	umull	r2, r3, r2, r3
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	0119      	lsls	r1, r3, #4
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	4613      	mov	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	009a      	lsls	r2, r3, #2
 8005118:	441a      	add	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	fbb2 f2f3 	udiv	r2, r2, r3
 8005124:	4b42      	ldr	r3, [pc, #264]	; (8005230 <UART_SetConfig+0x1b0>)
 8005126:	fba3 0302 	umull	r0, r3, r3, r2
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	2064      	movs	r0, #100	; 0x64
 800512e:	fb00 f303 	mul.w	r3, r0, r3
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	3332      	adds	r3, #50	; 0x32
 8005138:	4a3d      	ldr	r2, [pc, #244]	; (8005230 <UART_SetConfig+0x1b0>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005144:	4419      	add	r1, r3
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	4613      	mov	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	009a      	lsls	r2, r3, #2
 8005150:	441a      	add	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	fbb2 f2f3 	udiv	r2, r2, r3
 800515c:	4b34      	ldr	r3, [pc, #208]	; (8005230 <UART_SetConfig+0x1b0>)
 800515e:	fba3 0302 	umull	r0, r3, r3, r2
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	2064      	movs	r0, #100	; 0x64
 8005166:	fb00 f303 	mul.w	r3, r0, r3
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	3332      	adds	r3, #50	; 0x32
 8005170:	4a2f      	ldr	r2, [pc, #188]	; (8005230 <UART_SetConfig+0x1b0>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	f003 020f 	and.w	r2, r3, #15
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	440a      	add	r2, r1
 8005182:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005184:	e04d      	b.n	8005222 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005186:	f7ff fee7 	bl	8004f58 <HAL_RCC_GetPCLK1Freq>
 800518a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009a      	lsls	r2, r3, #2
 8005196:	441a      	add	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a2:	4a23      	ldr	r2, [pc, #140]	; (8005230 <UART_SetConfig+0x1b0>)
 80051a4:	fba2 2303 	umull	r2, r3, r2, r3
 80051a8:	095b      	lsrs	r3, r3, #5
 80051aa:	0119      	lsls	r1, r3, #4
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	009a      	lsls	r2, r3, #2
 80051b6:	441a      	add	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	fbb2 f2f3 	udiv	r2, r2, r3
 80051c2:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <UART_SetConfig+0x1b0>)
 80051c4:	fba3 0302 	umull	r0, r3, r3, r2
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	2064      	movs	r0, #100	; 0x64
 80051cc:	fb00 f303 	mul.w	r3, r0, r3
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	3332      	adds	r3, #50	; 0x32
 80051d6:	4a16      	ldr	r2, [pc, #88]	; (8005230 <UART_SetConfig+0x1b0>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051e2:	4419      	add	r1, r3
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	4613      	mov	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	009a      	lsls	r2, r3, #2
 80051ee:	441a      	add	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80051fa:	4b0d      	ldr	r3, [pc, #52]	; (8005230 <UART_SetConfig+0x1b0>)
 80051fc:	fba3 0302 	umull	r0, r3, r3, r2
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	2064      	movs	r0, #100	; 0x64
 8005204:	fb00 f303 	mul.w	r3, r0, r3
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	3332      	adds	r3, #50	; 0x32
 800520e:	4a08      	ldr	r2, [pc, #32]	; (8005230 <UART_SetConfig+0x1b0>)
 8005210:	fba2 2303 	umull	r2, r3, r2, r3
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	f003 020f 	and.w	r2, r3, #15
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	440a      	add	r2, r1
 8005220:	609a      	str	r2, [r3, #8]
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40013800 	.word	0x40013800
 8005230:	51eb851f 	.word	0x51eb851f

08005234 <__errno>:
 8005234:	4b01      	ldr	r3, [pc, #4]	; (800523c <__errno+0x8>)
 8005236:	6818      	ldr	r0, [r3, #0]
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	2000000c 	.word	0x2000000c

08005240 <__libc_init_array>:
 8005240:	b570      	push	{r4, r5, r6, lr}
 8005242:	2600      	movs	r6, #0
 8005244:	4d0c      	ldr	r5, [pc, #48]	; (8005278 <__libc_init_array+0x38>)
 8005246:	4c0d      	ldr	r4, [pc, #52]	; (800527c <__libc_init_array+0x3c>)
 8005248:	1b64      	subs	r4, r4, r5
 800524a:	10a4      	asrs	r4, r4, #2
 800524c:	42a6      	cmp	r6, r4
 800524e:	d109      	bne.n	8005264 <__libc_init_array+0x24>
 8005250:	f001 fb2c 	bl	80068ac <_init>
 8005254:	2600      	movs	r6, #0
 8005256:	4d0a      	ldr	r5, [pc, #40]	; (8005280 <__libc_init_array+0x40>)
 8005258:	4c0a      	ldr	r4, [pc, #40]	; (8005284 <__libc_init_array+0x44>)
 800525a:	1b64      	subs	r4, r4, r5
 800525c:	10a4      	asrs	r4, r4, #2
 800525e:	42a6      	cmp	r6, r4
 8005260:	d105      	bne.n	800526e <__libc_init_array+0x2e>
 8005262:	bd70      	pop	{r4, r5, r6, pc}
 8005264:	f855 3b04 	ldr.w	r3, [r5], #4
 8005268:	4798      	blx	r3
 800526a:	3601      	adds	r6, #1
 800526c:	e7ee      	b.n	800524c <__libc_init_array+0xc>
 800526e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005272:	4798      	blx	r3
 8005274:	3601      	adds	r6, #1
 8005276:	e7f2      	b.n	800525e <__libc_init_array+0x1e>
 8005278:	08006ad0 	.word	0x08006ad0
 800527c:	08006ad0 	.word	0x08006ad0
 8005280:	08006ad0 	.word	0x08006ad0
 8005284:	08006ad4 	.word	0x08006ad4

08005288 <memset>:
 8005288:	4603      	mov	r3, r0
 800528a:	4402      	add	r2, r0
 800528c:	4293      	cmp	r3, r2
 800528e:	d100      	bne.n	8005292 <memset+0xa>
 8005290:	4770      	bx	lr
 8005292:	f803 1b01 	strb.w	r1, [r3], #1
 8005296:	e7f9      	b.n	800528c <memset+0x4>

08005298 <sin>:
 8005298:	b530      	push	{r4, r5, lr}
 800529a:	4a20      	ldr	r2, [pc, #128]	; (800531c <sin+0x84>)
 800529c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80052a0:	4293      	cmp	r3, r2
 80052a2:	b087      	sub	sp, #28
 80052a4:	dc06      	bgt.n	80052b4 <sin+0x1c>
 80052a6:	2300      	movs	r3, #0
 80052a8:	2200      	movs	r2, #0
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	2300      	movs	r3, #0
 80052ae:	f001 f933 	bl	8006518 <__kernel_sin>
 80052b2:	e006      	b.n	80052c2 <sin+0x2a>
 80052b4:	4a1a      	ldr	r2, [pc, #104]	; (8005320 <sin+0x88>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	dd05      	ble.n	80052c6 <sin+0x2e>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	f7fa ff4b 	bl	8000158 <__aeabi_dsub>
 80052c2:	b007      	add	sp, #28
 80052c4:	bd30      	pop	{r4, r5, pc}
 80052c6:	aa02      	add	r2, sp, #8
 80052c8:	f000 fa82 	bl	80057d0 <__ieee754_rem_pio2>
 80052cc:	f000 0003 	and.w	r0, r0, #3
 80052d0:	2801      	cmp	r0, #1
 80052d2:	d009      	beq.n	80052e8 <sin+0x50>
 80052d4:	2802      	cmp	r0, #2
 80052d6:	d00e      	beq.n	80052f6 <sin+0x5e>
 80052d8:	b9c0      	cbnz	r0, 800530c <sin+0x74>
 80052da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052de:	2301      	movs	r3, #1
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052e6:	e7e2      	b.n	80052ae <sin+0x16>
 80052e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052f0:	f000 fd0a 	bl	8005d08 <__kernel_cos>
 80052f4:	e7e5      	b.n	80052c2 <sin+0x2a>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005302:	f001 f909 	bl	8006518 <__kernel_sin>
 8005306:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800530a:	e7da      	b.n	80052c2 <sin+0x2a>
 800530c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005314:	f000 fcf8 	bl	8005d08 <__kernel_cos>
 8005318:	e7f5      	b.n	8005306 <sin+0x6e>
 800531a:	bf00      	nop
 800531c:	3fe921fb 	.word	0x3fe921fb
 8005320:	7fefffff 	.word	0x7fefffff

08005324 <asin>:
 8005324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005326:	4604      	mov	r4, r0
 8005328:	460d      	mov	r5, r1
 800532a:	f000 f855 	bl	80053d8 <__ieee754_asin>
 800532e:	4b11      	ldr	r3, [pc, #68]	; (8005374 <asin+0x50>)
 8005330:	4606      	mov	r6, r0
 8005332:	f993 3000 	ldrsb.w	r3, [r3]
 8005336:	460f      	mov	r7, r1
 8005338:	3301      	adds	r3, #1
 800533a:	d018      	beq.n	800536e <asin+0x4a>
 800533c:	4622      	mov	r2, r4
 800533e:	462b      	mov	r3, r5
 8005340:	4620      	mov	r0, r4
 8005342:	4629      	mov	r1, r5
 8005344:	f7fb fb5a 	bl	80009fc <__aeabi_dcmpun>
 8005348:	b988      	cbnz	r0, 800536e <asin+0x4a>
 800534a:	4620      	mov	r0, r4
 800534c:	4629      	mov	r1, r5
 800534e:	f001 f999 	bl	8006684 <fabs>
 8005352:	2200      	movs	r2, #0
 8005354:	4b08      	ldr	r3, [pc, #32]	; (8005378 <asin+0x54>)
 8005356:	f7fb fb47 	bl	80009e8 <__aeabi_dcmpgt>
 800535a:	b140      	cbz	r0, 800536e <asin+0x4a>
 800535c:	f7ff ff6a 	bl	8005234 <__errno>
 8005360:	2321      	movs	r3, #33	; 0x21
 8005362:	6003      	str	r3, [r0, #0]
 8005364:	4805      	ldr	r0, [pc, #20]	; (800537c <asin+0x58>)
 8005366:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800536a:	f001 ba11 	b.w	8006790 <nan>
 800536e:	4630      	mov	r0, r6
 8005370:	4639      	mov	r1, r7
 8005372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005374:	20000070 	.word	0x20000070
 8005378:	3ff00000 	.word	0x3ff00000
 800537c:	080068f0 	.word	0x080068f0

08005380 <sqrt>:
 8005380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005382:	4606      	mov	r6, r0
 8005384:	460f      	mov	r7, r1
 8005386:	f000 fc13 	bl	8005bb0 <__ieee754_sqrt>
 800538a:	4b12      	ldr	r3, [pc, #72]	; (80053d4 <sqrt+0x54>)
 800538c:	4604      	mov	r4, r0
 800538e:	f993 3000 	ldrsb.w	r3, [r3]
 8005392:	460d      	mov	r5, r1
 8005394:	3301      	adds	r3, #1
 8005396:	d019      	beq.n	80053cc <sqrt+0x4c>
 8005398:	4632      	mov	r2, r6
 800539a:	463b      	mov	r3, r7
 800539c:	4630      	mov	r0, r6
 800539e:	4639      	mov	r1, r7
 80053a0:	f7fb fb2c 	bl	80009fc <__aeabi_dcmpun>
 80053a4:	b990      	cbnz	r0, 80053cc <sqrt+0x4c>
 80053a6:	2200      	movs	r2, #0
 80053a8:	2300      	movs	r3, #0
 80053aa:	4630      	mov	r0, r6
 80053ac:	4639      	mov	r1, r7
 80053ae:	f7fb fafd 	bl	80009ac <__aeabi_dcmplt>
 80053b2:	b158      	cbz	r0, 80053cc <sqrt+0x4c>
 80053b4:	f7ff ff3e 	bl	8005234 <__errno>
 80053b8:	2321      	movs	r3, #33	; 0x21
 80053ba:	2200      	movs	r2, #0
 80053bc:	6003      	str	r3, [r0, #0]
 80053be:	2300      	movs	r3, #0
 80053c0:	4610      	mov	r0, r2
 80053c2:	4619      	mov	r1, r3
 80053c4:	f7fb f9aa 	bl	800071c <__aeabi_ddiv>
 80053c8:	4604      	mov	r4, r0
 80053ca:	460d      	mov	r5, r1
 80053cc:	4620      	mov	r0, r4
 80053ce:	4629      	mov	r1, r5
 80053d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000070 	.word	0x20000070

080053d8 <__ieee754_asin>:
 80053d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053dc:	4bc4      	ldr	r3, [pc, #784]	; (80056f0 <__ieee754_asin+0x318>)
 80053de:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80053e2:	b087      	sub	sp, #28
 80053e4:	429e      	cmp	r6, r3
 80053e6:	4602      	mov	r2, r0
 80053e8:	4604      	mov	r4, r0
 80053ea:	460d      	mov	r5, r1
 80053ec:	9105      	str	r1, [sp, #20]
 80053ee:	dd29      	ble.n	8005444 <__ieee754_asin+0x6c>
 80053f0:	4603      	mov	r3, r0
 80053f2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80053f6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80053fa:	4333      	orrs	r3, r6
 80053fc:	d114      	bne.n	8005428 <__ieee754_asin+0x50>
 80053fe:	a3a2      	add	r3, pc, #648	; (adr r3, 8005688 <__ieee754_asin+0x2b0>)
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	f7fb f860 	bl	80004c8 <__aeabi_dmul>
 8005408:	a3a1      	add	r3, pc, #644	; (adr r3, 8005690 <__ieee754_asin+0x2b8>)
 800540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540e:	4606      	mov	r6, r0
 8005410:	460f      	mov	r7, r1
 8005412:	4620      	mov	r0, r4
 8005414:	4629      	mov	r1, r5
 8005416:	f7fb f857 	bl	80004c8 <__aeabi_dmul>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4630      	mov	r0, r6
 8005420:	4639      	mov	r1, r7
 8005422:	f7fa fe9b 	bl	800015c <__adddf3>
 8005426:	e006      	b.n	8005436 <__ieee754_asin+0x5e>
 8005428:	460b      	mov	r3, r1
 800542a:	f7fa fe95 	bl	8000158 <__aeabi_dsub>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	f7fb f973 	bl	800071c <__aeabi_ddiv>
 8005436:	4604      	mov	r4, r0
 8005438:	460d      	mov	r5, r1
 800543a:	4620      	mov	r0, r4
 800543c:	4629      	mov	r1, r5
 800543e:	b007      	add	sp, #28
 8005440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005444:	4bab      	ldr	r3, [pc, #684]	; (80056f4 <__ieee754_asin+0x31c>)
 8005446:	429e      	cmp	r6, r3
 8005448:	dc0e      	bgt.n	8005468 <__ieee754_asin+0x90>
 800544a:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800544e:	f280 80ab 	bge.w	80055a8 <__ieee754_asin+0x1d0>
 8005452:	a391      	add	r3, pc, #580	; (adr r3, 8005698 <__ieee754_asin+0x2c0>)
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	f7fa fe80 	bl	800015c <__adddf3>
 800545c:	2200      	movs	r2, #0
 800545e:	4ba6      	ldr	r3, [pc, #664]	; (80056f8 <__ieee754_asin+0x320>)
 8005460:	f7fb fac2 	bl	80009e8 <__aeabi_dcmpgt>
 8005464:	2800      	cmp	r0, #0
 8005466:	d1e8      	bne.n	800543a <__ieee754_asin+0x62>
 8005468:	4620      	mov	r0, r4
 800546a:	4629      	mov	r1, r5
 800546c:	f001 f90a 	bl	8006684 <fabs>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	2000      	movs	r0, #0
 8005476:	49a0      	ldr	r1, [pc, #640]	; (80056f8 <__ieee754_asin+0x320>)
 8005478:	f7fa fe6e 	bl	8000158 <__aeabi_dsub>
 800547c:	2200      	movs	r2, #0
 800547e:	4b9f      	ldr	r3, [pc, #636]	; (80056fc <__ieee754_asin+0x324>)
 8005480:	f7fb f822 	bl	80004c8 <__aeabi_dmul>
 8005484:	a386      	add	r3, pc, #536	; (adr r3, 80056a0 <__ieee754_asin+0x2c8>)
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	4604      	mov	r4, r0
 800548c:	460d      	mov	r5, r1
 800548e:	f7fb f81b 	bl	80004c8 <__aeabi_dmul>
 8005492:	a385      	add	r3, pc, #532	; (adr r3, 80056a8 <__ieee754_asin+0x2d0>)
 8005494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005498:	f7fa fe60 	bl	800015c <__adddf3>
 800549c:	4622      	mov	r2, r4
 800549e:	462b      	mov	r3, r5
 80054a0:	f7fb f812 	bl	80004c8 <__aeabi_dmul>
 80054a4:	a382      	add	r3, pc, #520	; (adr r3, 80056b0 <__ieee754_asin+0x2d8>)
 80054a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054aa:	f7fa fe55 	bl	8000158 <__aeabi_dsub>
 80054ae:	4622      	mov	r2, r4
 80054b0:	462b      	mov	r3, r5
 80054b2:	f7fb f809 	bl	80004c8 <__aeabi_dmul>
 80054b6:	a380      	add	r3, pc, #512	; (adr r3, 80056b8 <__ieee754_asin+0x2e0>)
 80054b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054bc:	f7fa fe4e 	bl	800015c <__adddf3>
 80054c0:	4622      	mov	r2, r4
 80054c2:	462b      	mov	r3, r5
 80054c4:	f7fb f800 	bl	80004c8 <__aeabi_dmul>
 80054c8:	a37d      	add	r3, pc, #500	; (adr r3, 80056c0 <__ieee754_asin+0x2e8>)
 80054ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ce:	f7fa fe43 	bl	8000158 <__aeabi_dsub>
 80054d2:	4622      	mov	r2, r4
 80054d4:	462b      	mov	r3, r5
 80054d6:	f7fa fff7 	bl	80004c8 <__aeabi_dmul>
 80054da:	a37b      	add	r3, pc, #492	; (adr r3, 80056c8 <__ieee754_asin+0x2f0>)
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	f7fa fe3c 	bl	800015c <__adddf3>
 80054e4:	4622      	mov	r2, r4
 80054e6:	462b      	mov	r3, r5
 80054e8:	f7fa ffee 	bl	80004c8 <__aeabi_dmul>
 80054ec:	a378      	add	r3, pc, #480	; (adr r3, 80056d0 <__ieee754_asin+0x2f8>)
 80054ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f2:	e9cd 0100 	strd	r0, r1, [sp]
 80054f6:	4620      	mov	r0, r4
 80054f8:	4629      	mov	r1, r5
 80054fa:	f7fa ffe5 	bl	80004c8 <__aeabi_dmul>
 80054fe:	a376      	add	r3, pc, #472	; (adr r3, 80056d8 <__ieee754_asin+0x300>)
 8005500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005504:	f7fa fe28 	bl	8000158 <__aeabi_dsub>
 8005508:	4622      	mov	r2, r4
 800550a:	462b      	mov	r3, r5
 800550c:	f7fa ffdc 	bl	80004c8 <__aeabi_dmul>
 8005510:	a373      	add	r3, pc, #460	; (adr r3, 80056e0 <__ieee754_asin+0x308>)
 8005512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005516:	f7fa fe21 	bl	800015c <__adddf3>
 800551a:	4622      	mov	r2, r4
 800551c:	462b      	mov	r3, r5
 800551e:	f7fa ffd3 	bl	80004c8 <__aeabi_dmul>
 8005522:	a371      	add	r3, pc, #452	; (adr r3, 80056e8 <__ieee754_asin+0x310>)
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	f7fa fe16 	bl	8000158 <__aeabi_dsub>
 800552c:	4622      	mov	r2, r4
 800552e:	462b      	mov	r3, r5
 8005530:	f7fa ffca 	bl	80004c8 <__aeabi_dmul>
 8005534:	4b70      	ldr	r3, [pc, #448]	; (80056f8 <__ieee754_asin+0x320>)
 8005536:	2200      	movs	r2, #0
 8005538:	f7fa fe10 	bl	800015c <__adddf3>
 800553c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005540:	4620      	mov	r0, r4
 8005542:	4629      	mov	r1, r5
 8005544:	f000 fb34 	bl	8005bb0 <__ieee754_sqrt>
 8005548:	4b6d      	ldr	r3, [pc, #436]	; (8005700 <__ieee754_asin+0x328>)
 800554a:	4682      	mov	sl, r0
 800554c:	429e      	cmp	r6, r3
 800554e:	468b      	mov	fp, r1
 8005550:	f340 80d8 	ble.w	8005704 <__ieee754_asin+0x32c>
 8005554:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005558:	e9dd 0100 	ldrd	r0, r1, [sp]
 800555c:	f7fb f8de 	bl	800071c <__aeabi_ddiv>
 8005560:	4652      	mov	r2, sl
 8005562:	465b      	mov	r3, fp
 8005564:	f7fa ffb0 	bl	80004c8 <__aeabi_dmul>
 8005568:	4652      	mov	r2, sl
 800556a:	465b      	mov	r3, fp
 800556c:	f7fa fdf6 	bl	800015c <__adddf3>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	f7fa fdf2 	bl	800015c <__adddf3>
 8005578:	a345      	add	r3, pc, #276	; (adr r3, 8005690 <__ieee754_asin+0x2b8>)
 800557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557e:	f7fa fdeb 	bl	8000158 <__aeabi_dsub>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	a140      	add	r1, pc, #256	; (adr r1, 8005688 <__ieee754_asin+0x2b0>)
 8005588:	e9d1 0100 	ldrd	r0, r1, [r1]
 800558c:	f7fa fde4 	bl	8000158 <__aeabi_dsub>
 8005590:	9b05      	ldr	r3, [sp, #20]
 8005592:	4604      	mov	r4, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	bfdc      	itt	le
 8005598:	4602      	movle	r2, r0
 800559a:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800559e:	460d      	mov	r5, r1
 80055a0:	bfdc      	itt	le
 80055a2:	4614      	movle	r4, r2
 80055a4:	461d      	movle	r5, r3
 80055a6:	e748      	b.n	800543a <__ieee754_asin+0x62>
 80055a8:	460b      	mov	r3, r1
 80055aa:	f7fa ff8d 	bl	80004c8 <__aeabi_dmul>
 80055ae:	a33c      	add	r3, pc, #240	; (adr r3, 80056a0 <__ieee754_asin+0x2c8>)
 80055b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b4:	4606      	mov	r6, r0
 80055b6:	460f      	mov	r7, r1
 80055b8:	f7fa ff86 	bl	80004c8 <__aeabi_dmul>
 80055bc:	a33a      	add	r3, pc, #232	; (adr r3, 80056a8 <__ieee754_asin+0x2d0>)
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	f7fa fdcb 	bl	800015c <__adddf3>
 80055c6:	4632      	mov	r2, r6
 80055c8:	463b      	mov	r3, r7
 80055ca:	f7fa ff7d 	bl	80004c8 <__aeabi_dmul>
 80055ce:	a338      	add	r3, pc, #224	; (adr r3, 80056b0 <__ieee754_asin+0x2d8>)
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	f7fa fdc0 	bl	8000158 <__aeabi_dsub>
 80055d8:	4632      	mov	r2, r6
 80055da:	463b      	mov	r3, r7
 80055dc:	f7fa ff74 	bl	80004c8 <__aeabi_dmul>
 80055e0:	a335      	add	r3, pc, #212	; (adr r3, 80056b8 <__ieee754_asin+0x2e0>)
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	f7fa fdb9 	bl	800015c <__adddf3>
 80055ea:	4632      	mov	r2, r6
 80055ec:	463b      	mov	r3, r7
 80055ee:	f7fa ff6b 	bl	80004c8 <__aeabi_dmul>
 80055f2:	a333      	add	r3, pc, #204	; (adr r3, 80056c0 <__ieee754_asin+0x2e8>)
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f7fa fdae 	bl	8000158 <__aeabi_dsub>
 80055fc:	4632      	mov	r2, r6
 80055fe:	463b      	mov	r3, r7
 8005600:	f7fa ff62 	bl	80004c8 <__aeabi_dmul>
 8005604:	a330      	add	r3, pc, #192	; (adr r3, 80056c8 <__ieee754_asin+0x2f0>)
 8005606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560a:	f7fa fda7 	bl	800015c <__adddf3>
 800560e:	4632      	mov	r2, r6
 8005610:	463b      	mov	r3, r7
 8005612:	f7fa ff59 	bl	80004c8 <__aeabi_dmul>
 8005616:	a32e      	add	r3, pc, #184	; (adr r3, 80056d0 <__ieee754_asin+0x2f8>)
 8005618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561c:	4680      	mov	r8, r0
 800561e:	4689      	mov	r9, r1
 8005620:	4630      	mov	r0, r6
 8005622:	4639      	mov	r1, r7
 8005624:	f7fa ff50 	bl	80004c8 <__aeabi_dmul>
 8005628:	a32b      	add	r3, pc, #172	; (adr r3, 80056d8 <__ieee754_asin+0x300>)
 800562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562e:	f7fa fd93 	bl	8000158 <__aeabi_dsub>
 8005632:	4632      	mov	r2, r6
 8005634:	463b      	mov	r3, r7
 8005636:	f7fa ff47 	bl	80004c8 <__aeabi_dmul>
 800563a:	a329      	add	r3, pc, #164	; (adr r3, 80056e0 <__ieee754_asin+0x308>)
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f7fa fd8c 	bl	800015c <__adddf3>
 8005644:	4632      	mov	r2, r6
 8005646:	463b      	mov	r3, r7
 8005648:	f7fa ff3e 	bl	80004c8 <__aeabi_dmul>
 800564c:	a326      	add	r3, pc, #152	; (adr r3, 80056e8 <__ieee754_asin+0x310>)
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005652:	f7fa fd81 	bl	8000158 <__aeabi_dsub>
 8005656:	4632      	mov	r2, r6
 8005658:	463b      	mov	r3, r7
 800565a:	f7fa ff35 	bl	80004c8 <__aeabi_dmul>
 800565e:	2200      	movs	r2, #0
 8005660:	4b25      	ldr	r3, [pc, #148]	; (80056f8 <__ieee754_asin+0x320>)
 8005662:	f7fa fd7b 	bl	800015c <__adddf3>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4640      	mov	r0, r8
 800566c:	4649      	mov	r1, r9
 800566e:	f7fb f855 	bl	800071c <__aeabi_ddiv>
 8005672:	4622      	mov	r2, r4
 8005674:	462b      	mov	r3, r5
 8005676:	f7fa ff27 	bl	80004c8 <__aeabi_dmul>
 800567a:	4602      	mov	r2, r0
 800567c:	460b      	mov	r3, r1
 800567e:	4620      	mov	r0, r4
 8005680:	4629      	mov	r1, r5
 8005682:	e6ce      	b.n	8005422 <__ieee754_asin+0x4a>
 8005684:	f3af 8000 	nop.w
 8005688:	54442d18 	.word	0x54442d18
 800568c:	3ff921fb 	.word	0x3ff921fb
 8005690:	33145c07 	.word	0x33145c07
 8005694:	3c91a626 	.word	0x3c91a626
 8005698:	8800759c 	.word	0x8800759c
 800569c:	7e37e43c 	.word	0x7e37e43c
 80056a0:	0dfdf709 	.word	0x0dfdf709
 80056a4:	3f023de1 	.word	0x3f023de1
 80056a8:	7501b288 	.word	0x7501b288
 80056ac:	3f49efe0 	.word	0x3f49efe0
 80056b0:	b5688f3b 	.word	0xb5688f3b
 80056b4:	3fa48228 	.word	0x3fa48228
 80056b8:	0e884455 	.word	0x0e884455
 80056bc:	3fc9c155 	.word	0x3fc9c155
 80056c0:	03eb6f7d 	.word	0x03eb6f7d
 80056c4:	3fd4d612 	.word	0x3fd4d612
 80056c8:	55555555 	.word	0x55555555
 80056cc:	3fc55555 	.word	0x3fc55555
 80056d0:	b12e9282 	.word	0xb12e9282
 80056d4:	3fb3b8c5 	.word	0x3fb3b8c5
 80056d8:	1b8d0159 	.word	0x1b8d0159
 80056dc:	3fe6066c 	.word	0x3fe6066c
 80056e0:	9c598ac8 	.word	0x9c598ac8
 80056e4:	40002ae5 	.word	0x40002ae5
 80056e8:	1c8a2d4b 	.word	0x1c8a2d4b
 80056ec:	40033a27 	.word	0x40033a27
 80056f0:	3fefffff 	.word	0x3fefffff
 80056f4:	3fdfffff 	.word	0x3fdfffff
 80056f8:	3ff00000 	.word	0x3ff00000
 80056fc:	3fe00000 	.word	0x3fe00000
 8005700:	3fef3332 	.word	0x3fef3332
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	f7fa fd28 	bl	800015c <__adddf3>
 800570c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005710:	4606      	mov	r6, r0
 8005712:	460f      	mov	r7, r1
 8005714:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005718:	f7fb f800 	bl	800071c <__aeabi_ddiv>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4630      	mov	r0, r6
 8005722:	4639      	mov	r1, r7
 8005724:	f7fa fed0 	bl	80004c8 <__aeabi_dmul>
 8005728:	f04f 0800 	mov.w	r8, #0
 800572c:	4606      	mov	r6, r0
 800572e:	460f      	mov	r7, r1
 8005730:	4642      	mov	r2, r8
 8005732:	465b      	mov	r3, fp
 8005734:	4640      	mov	r0, r8
 8005736:	4659      	mov	r1, fp
 8005738:	f7fa fec6 	bl	80004c8 <__aeabi_dmul>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4620      	mov	r0, r4
 8005742:	4629      	mov	r1, r5
 8005744:	f7fa fd08 	bl	8000158 <__aeabi_dsub>
 8005748:	4642      	mov	r2, r8
 800574a:	4604      	mov	r4, r0
 800574c:	460d      	mov	r5, r1
 800574e:	465b      	mov	r3, fp
 8005750:	4650      	mov	r0, sl
 8005752:	4659      	mov	r1, fp
 8005754:	f7fa fd02 	bl	800015c <__adddf3>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4620      	mov	r0, r4
 800575e:	4629      	mov	r1, r5
 8005760:	f7fa ffdc 	bl	800071c <__aeabi_ddiv>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	f7fa fcf8 	bl	800015c <__adddf3>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	a113      	add	r1, pc, #76	; (adr r1, 80057c0 <__ieee754_asin+0x3e8>)
 8005772:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005776:	f7fa fcef 	bl	8000158 <__aeabi_dsub>
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	4630      	mov	r0, r6
 8005780:	4639      	mov	r1, r7
 8005782:	f7fa fce9 	bl	8000158 <__aeabi_dsub>
 8005786:	4642      	mov	r2, r8
 8005788:	4604      	mov	r4, r0
 800578a:	460d      	mov	r5, r1
 800578c:	465b      	mov	r3, fp
 800578e:	4640      	mov	r0, r8
 8005790:	4659      	mov	r1, fp
 8005792:	f7fa fce3 	bl	800015c <__adddf3>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	a10b      	add	r1, pc, #44	; (adr r1, 80057c8 <__ieee754_asin+0x3f0>)
 800579c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057a0:	f7fa fcda 	bl	8000158 <__aeabi_dsub>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4620      	mov	r0, r4
 80057aa:	4629      	mov	r1, r5
 80057ac:	f7fa fcd4 	bl	8000158 <__aeabi_dsub>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	a104      	add	r1, pc, #16	; (adr r1, 80057c8 <__ieee754_asin+0x3f0>)
 80057b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057ba:	e6e7      	b.n	800558c <__ieee754_asin+0x1b4>
 80057bc:	f3af 8000 	nop.w
 80057c0:	33145c07 	.word	0x33145c07
 80057c4:	3c91a626 	.word	0x3c91a626
 80057c8:	54442d18 	.word	0x54442d18
 80057cc:	3fe921fb 	.word	0x3fe921fb

080057d0 <__ieee754_rem_pio2>:
 80057d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d4:	4614      	mov	r4, r2
 80057d6:	4ac4      	ldr	r2, [pc, #784]	; (8005ae8 <__ieee754_rem_pio2+0x318>)
 80057d8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80057dc:	b08d      	sub	sp, #52	; 0x34
 80057de:	4592      	cmp	sl, r2
 80057e0:	9104      	str	r1, [sp, #16]
 80057e2:	dc07      	bgt.n	80057f4 <__ieee754_rem_pio2+0x24>
 80057e4:	2200      	movs	r2, #0
 80057e6:	2300      	movs	r3, #0
 80057e8:	e9c4 0100 	strd	r0, r1, [r4]
 80057ec:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80057f0:	2500      	movs	r5, #0
 80057f2:	e024      	b.n	800583e <__ieee754_rem_pio2+0x6e>
 80057f4:	4abd      	ldr	r2, [pc, #756]	; (8005aec <__ieee754_rem_pio2+0x31c>)
 80057f6:	4592      	cmp	sl, r2
 80057f8:	dc72      	bgt.n	80058e0 <__ieee754_rem_pio2+0x110>
 80057fa:	9b04      	ldr	r3, [sp, #16]
 80057fc:	4dbc      	ldr	r5, [pc, #752]	; (8005af0 <__ieee754_rem_pio2+0x320>)
 80057fe:	2b00      	cmp	r3, #0
 8005800:	a3ab      	add	r3, pc, #684	; (adr r3, 8005ab0 <__ieee754_rem_pio2+0x2e0>)
 8005802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005806:	dd36      	ble.n	8005876 <__ieee754_rem_pio2+0xa6>
 8005808:	f7fa fca6 	bl	8000158 <__aeabi_dsub>
 800580c:	45aa      	cmp	sl, r5
 800580e:	4606      	mov	r6, r0
 8005810:	460f      	mov	r7, r1
 8005812:	d018      	beq.n	8005846 <__ieee754_rem_pio2+0x76>
 8005814:	a3a8      	add	r3, pc, #672	; (adr r3, 8005ab8 <__ieee754_rem_pio2+0x2e8>)
 8005816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581a:	f7fa fc9d 	bl	8000158 <__aeabi_dsub>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	4630      	mov	r0, r6
 8005824:	e9c4 2300 	strd	r2, r3, [r4]
 8005828:	4639      	mov	r1, r7
 800582a:	f7fa fc95 	bl	8000158 <__aeabi_dsub>
 800582e:	a3a2      	add	r3, pc, #648	; (adr r3, 8005ab8 <__ieee754_rem_pio2+0x2e8>)
 8005830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005834:	f7fa fc90 	bl	8000158 <__aeabi_dsub>
 8005838:	2501      	movs	r5, #1
 800583a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800583e:	4628      	mov	r0, r5
 8005840:	b00d      	add	sp, #52	; 0x34
 8005842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005846:	a39e      	add	r3, pc, #632	; (adr r3, 8005ac0 <__ieee754_rem_pio2+0x2f0>)
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	f7fa fc84 	bl	8000158 <__aeabi_dsub>
 8005850:	a39d      	add	r3, pc, #628	; (adr r3, 8005ac8 <__ieee754_rem_pio2+0x2f8>)
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	4606      	mov	r6, r0
 8005858:	460f      	mov	r7, r1
 800585a:	f7fa fc7d 	bl	8000158 <__aeabi_dsub>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4630      	mov	r0, r6
 8005864:	e9c4 2300 	strd	r2, r3, [r4]
 8005868:	4639      	mov	r1, r7
 800586a:	f7fa fc75 	bl	8000158 <__aeabi_dsub>
 800586e:	a396      	add	r3, pc, #600	; (adr r3, 8005ac8 <__ieee754_rem_pio2+0x2f8>)
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	e7de      	b.n	8005834 <__ieee754_rem_pio2+0x64>
 8005876:	f7fa fc71 	bl	800015c <__adddf3>
 800587a:	45aa      	cmp	sl, r5
 800587c:	4606      	mov	r6, r0
 800587e:	460f      	mov	r7, r1
 8005880:	d016      	beq.n	80058b0 <__ieee754_rem_pio2+0xe0>
 8005882:	a38d      	add	r3, pc, #564	; (adr r3, 8005ab8 <__ieee754_rem_pio2+0x2e8>)
 8005884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005888:	f7fa fc68 	bl	800015c <__adddf3>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4630      	mov	r0, r6
 8005892:	e9c4 2300 	strd	r2, r3, [r4]
 8005896:	4639      	mov	r1, r7
 8005898:	f7fa fc5e 	bl	8000158 <__aeabi_dsub>
 800589c:	a386      	add	r3, pc, #536	; (adr r3, 8005ab8 <__ieee754_rem_pio2+0x2e8>)
 800589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a2:	f7fa fc5b 	bl	800015c <__adddf3>
 80058a6:	f04f 35ff 	mov.w	r5, #4294967295
 80058aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80058ae:	e7c6      	b.n	800583e <__ieee754_rem_pio2+0x6e>
 80058b0:	a383      	add	r3, pc, #524	; (adr r3, 8005ac0 <__ieee754_rem_pio2+0x2f0>)
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	f7fa fc51 	bl	800015c <__adddf3>
 80058ba:	a383      	add	r3, pc, #524	; (adr r3, 8005ac8 <__ieee754_rem_pio2+0x2f8>)
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	4606      	mov	r6, r0
 80058c2:	460f      	mov	r7, r1
 80058c4:	f7fa fc4a 	bl	800015c <__adddf3>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4630      	mov	r0, r6
 80058ce:	e9c4 2300 	strd	r2, r3, [r4]
 80058d2:	4639      	mov	r1, r7
 80058d4:	f7fa fc40 	bl	8000158 <__aeabi_dsub>
 80058d8:	a37b      	add	r3, pc, #492	; (adr r3, 8005ac8 <__ieee754_rem_pio2+0x2f8>)
 80058da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058de:	e7e0      	b.n	80058a2 <__ieee754_rem_pio2+0xd2>
 80058e0:	4a84      	ldr	r2, [pc, #528]	; (8005af4 <__ieee754_rem_pio2+0x324>)
 80058e2:	4592      	cmp	sl, r2
 80058e4:	f300 80d5 	bgt.w	8005a92 <__ieee754_rem_pio2+0x2c2>
 80058e8:	f000 fecc 	bl	8006684 <fabs>
 80058ec:	a378      	add	r3, pc, #480	; (adr r3, 8005ad0 <__ieee754_rem_pio2+0x300>)
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	4606      	mov	r6, r0
 80058f4:	460f      	mov	r7, r1
 80058f6:	f7fa fde7 	bl	80004c8 <__aeabi_dmul>
 80058fa:	2200      	movs	r2, #0
 80058fc:	4b7e      	ldr	r3, [pc, #504]	; (8005af8 <__ieee754_rem_pio2+0x328>)
 80058fe:	f7fa fc2d 	bl	800015c <__adddf3>
 8005902:	f7fb f891 	bl	8000a28 <__aeabi_d2iz>
 8005906:	4605      	mov	r5, r0
 8005908:	f7fa fd74 	bl	80003f4 <__aeabi_i2d>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005914:	a366      	add	r3, pc, #408	; (adr r3, 8005ab0 <__ieee754_rem_pio2+0x2e0>)
 8005916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591a:	f7fa fdd5 	bl	80004c8 <__aeabi_dmul>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4630      	mov	r0, r6
 8005924:	4639      	mov	r1, r7
 8005926:	f7fa fc17 	bl	8000158 <__aeabi_dsub>
 800592a:	a363      	add	r3, pc, #396	; (adr r3, 8005ab8 <__ieee754_rem_pio2+0x2e8>)
 800592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005930:	4680      	mov	r8, r0
 8005932:	4689      	mov	r9, r1
 8005934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005938:	f7fa fdc6 	bl	80004c8 <__aeabi_dmul>
 800593c:	2d1f      	cmp	r5, #31
 800593e:	4606      	mov	r6, r0
 8005940:	460f      	mov	r7, r1
 8005942:	dc0e      	bgt.n	8005962 <__ieee754_rem_pio2+0x192>
 8005944:	4b6d      	ldr	r3, [pc, #436]	; (8005afc <__ieee754_rem_pio2+0x32c>)
 8005946:	1e6a      	subs	r2, r5, #1
 8005948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800594c:	4553      	cmp	r3, sl
 800594e:	d008      	beq.n	8005962 <__ieee754_rem_pio2+0x192>
 8005950:	4632      	mov	r2, r6
 8005952:	463b      	mov	r3, r7
 8005954:	4640      	mov	r0, r8
 8005956:	4649      	mov	r1, r9
 8005958:	f7fa fbfe 	bl	8000158 <__aeabi_dsub>
 800595c:	e9c4 0100 	strd	r0, r1, [r4]
 8005960:	e013      	b.n	800598a <__ieee754_rem_pio2+0x1ba>
 8005962:	463b      	mov	r3, r7
 8005964:	4632      	mov	r2, r6
 8005966:	4640      	mov	r0, r8
 8005968:	4649      	mov	r1, r9
 800596a:	f7fa fbf5 	bl	8000158 <__aeabi_dsub>
 800596e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8005972:	9305      	str	r3, [sp, #20]
 8005974:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005978:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800597c:	f1ba 0f10 	cmp.w	sl, #16
 8005980:	dc1f      	bgt.n	80059c2 <__ieee754_rem_pio2+0x1f2>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	e9c4 2300 	strd	r2, r3, [r4]
 800598a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800598e:	4640      	mov	r0, r8
 8005990:	4653      	mov	r3, sl
 8005992:	4649      	mov	r1, r9
 8005994:	f7fa fbe0 	bl	8000158 <__aeabi_dsub>
 8005998:	4632      	mov	r2, r6
 800599a:	463b      	mov	r3, r7
 800599c:	f7fa fbdc 	bl	8000158 <__aeabi_dsub>
 80059a0:	460b      	mov	r3, r1
 80059a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80059a6:	9904      	ldr	r1, [sp, #16]
 80059a8:	4602      	mov	r2, r0
 80059aa:	2900      	cmp	r1, #0
 80059ac:	f6bf af47 	bge.w	800583e <__ieee754_rem_pio2+0x6e>
 80059b0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80059b4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80059b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80059bc:	60e3      	str	r3, [r4, #12]
 80059be:	426d      	negs	r5, r5
 80059c0:	e73d      	b.n	800583e <__ieee754_rem_pio2+0x6e>
 80059c2:	a33f      	add	r3, pc, #252	; (adr r3, 8005ac0 <__ieee754_rem_pio2+0x2f0>)
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059cc:	f7fa fd7c 	bl	80004c8 <__aeabi_dmul>
 80059d0:	4606      	mov	r6, r0
 80059d2:	460f      	mov	r7, r1
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4640      	mov	r0, r8
 80059da:	4649      	mov	r1, r9
 80059dc:	f7fa fbbc 	bl	8000158 <__aeabi_dsub>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4682      	mov	sl, r0
 80059e6:	468b      	mov	fp, r1
 80059e8:	4640      	mov	r0, r8
 80059ea:	4649      	mov	r1, r9
 80059ec:	f7fa fbb4 	bl	8000158 <__aeabi_dsub>
 80059f0:	4632      	mov	r2, r6
 80059f2:	463b      	mov	r3, r7
 80059f4:	f7fa fbb0 	bl	8000158 <__aeabi_dsub>
 80059f8:	a333      	add	r3, pc, #204	; (adr r3, 8005ac8 <__ieee754_rem_pio2+0x2f8>)
 80059fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fe:	4606      	mov	r6, r0
 8005a00:	460f      	mov	r7, r1
 8005a02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a06:	f7fa fd5f 	bl	80004c8 <__aeabi_dmul>
 8005a0a:	4632      	mov	r2, r6
 8005a0c:	463b      	mov	r3, r7
 8005a0e:	f7fa fba3 	bl	8000158 <__aeabi_dsub>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4606      	mov	r6, r0
 8005a18:	460f      	mov	r7, r1
 8005a1a:	4650      	mov	r0, sl
 8005a1c:	4659      	mov	r1, fp
 8005a1e:	f7fa fb9b 	bl	8000158 <__aeabi_dsub>
 8005a22:	9a05      	ldr	r2, [sp, #20]
 8005a24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b31      	cmp	r3, #49	; 0x31
 8005a2c:	dc06      	bgt.n	8005a3c <__ieee754_rem_pio2+0x26c>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	46d0      	mov	r8, sl
 8005a34:	46d9      	mov	r9, fp
 8005a36:	e9c4 2300 	strd	r2, r3, [r4]
 8005a3a:	e7a6      	b.n	800598a <__ieee754_rem_pio2+0x1ba>
 8005a3c:	a326      	add	r3, pc, #152	; (adr r3, 8005ad8 <__ieee754_rem_pio2+0x308>)
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a46:	f7fa fd3f 	bl	80004c8 <__aeabi_dmul>
 8005a4a:	4606      	mov	r6, r0
 8005a4c:	460f      	mov	r7, r1
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4650      	mov	r0, sl
 8005a54:	4659      	mov	r1, fp
 8005a56:	f7fa fb7f 	bl	8000158 <__aeabi_dsub>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4680      	mov	r8, r0
 8005a60:	4689      	mov	r9, r1
 8005a62:	4650      	mov	r0, sl
 8005a64:	4659      	mov	r1, fp
 8005a66:	f7fa fb77 	bl	8000158 <__aeabi_dsub>
 8005a6a:	4632      	mov	r2, r6
 8005a6c:	463b      	mov	r3, r7
 8005a6e:	f7fa fb73 	bl	8000158 <__aeabi_dsub>
 8005a72:	a31b      	add	r3, pc, #108	; (adr r3, 8005ae0 <__ieee754_rem_pio2+0x310>)
 8005a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a78:	4606      	mov	r6, r0
 8005a7a:	460f      	mov	r7, r1
 8005a7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a80:	f7fa fd22 	bl	80004c8 <__aeabi_dmul>
 8005a84:	4632      	mov	r2, r6
 8005a86:	463b      	mov	r3, r7
 8005a88:	f7fa fb66 	bl	8000158 <__aeabi_dsub>
 8005a8c:	4606      	mov	r6, r0
 8005a8e:	460f      	mov	r7, r1
 8005a90:	e75e      	b.n	8005950 <__ieee754_rem_pio2+0x180>
 8005a92:	4a1b      	ldr	r2, [pc, #108]	; (8005b00 <__ieee754_rem_pio2+0x330>)
 8005a94:	4592      	cmp	sl, r2
 8005a96:	dd35      	ble.n	8005b04 <__ieee754_rem_pio2+0x334>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	f7fa fb5c 	bl	8000158 <__aeabi_dsub>
 8005aa0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005aa4:	e9c4 0100 	strd	r0, r1, [r4]
 8005aa8:	e6a2      	b.n	80057f0 <__ieee754_rem_pio2+0x20>
 8005aaa:	bf00      	nop
 8005aac:	f3af 8000 	nop.w
 8005ab0:	54400000 	.word	0x54400000
 8005ab4:	3ff921fb 	.word	0x3ff921fb
 8005ab8:	1a626331 	.word	0x1a626331
 8005abc:	3dd0b461 	.word	0x3dd0b461
 8005ac0:	1a600000 	.word	0x1a600000
 8005ac4:	3dd0b461 	.word	0x3dd0b461
 8005ac8:	2e037073 	.word	0x2e037073
 8005acc:	3ba3198a 	.word	0x3ba3198a
 8005ad0:	6dc9c883 	.word	0x6dc9c883
 8005ad4:	3fe45f30 	.word	0x3fe45f30
 8005ad8:	2e000000 	.word	0x2e000000
 8005adc:	3ba3198a 	.word	0x3ba3198a
 8005ae0:	252049c1 	.word	0x252049c1
 8005ae4:	397b839a 	.word	0x397b839a
 8005ae8:	3fe921fb 	.word	0x3fe921fb
 8005aec:	4002d97b 	.word	0x4002d97b
 8005af0:	3ff921fb 	.word	0x3ff921fb
 8005af4:	413921fb 	.word	0x413921fb
 8005af8:	3fe00000 	.word	0x3fe00000
 8005afc:	080068f4 	.word	0x080068f4
 8005b00:	7fefffff 	.word	0x7fefffff
 8005b04:	ea4f 552a 	mov.w	r5, sl, asr #20
 8005b08:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005b0c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8005b10:	460f      	mov	r7, r1
 8005b12:	4606      	mov	r6, r0
 8005b14:	f7fa ff88 	bl	8000a28 <__aeabi_d2iz>
 8005b18:	f7fa fc6c 	bl	80003f4 <__aeabi_i2d>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4630      	mov	r0, r6
 8005b22:	4639      	mov	r1, r7
 8005b24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b28:	f7fa fb16 	bl	8000158 <__aeabi_dsub>
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ba8 <__ieee754_rem_pio2+0x3d8>)
 8005b30:	f7fa fcca 	bl	80004c8 <__aeabi_dmul>
 8005b34:	460f      	mov	r7, r1
 8005b36:	4606      	mov	r6, r0
 8005b38:	f7fa ff76 	bl	8000a28 <__aeabi_d2iz>
 8005b3c:	f7fa fc5a 	bl	80003f4 <__aeabi_i2d>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4630      	mov	r0, r6
 8005b46:	4639      	mov	r1, r7
 8005b48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005b4c:	f7fa fb04 	bl	8000158 <__aeabi_dsub>
 8005b50:	2200      	movs	r2, #0
 8005b52:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <__ieee754_rem_pio2+0x3d8>)
 8005b54:	f7fa fcb8 	bl	80004c8 <__aeabi_dmul>
 8005b58:	f04f 0803 	mov.w	r8, #3
 8005b5c:	2600      	movs	r6, #0
 8005b5e:	2700      	movs	r7, #0
 8005b60:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005b64:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8005b68:	4632      	mov	r2, r6
 8005b6a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8005b6e:	463b      	mov	r3, r7
 8005b70:	46c2      	mov	sl, r8
 8005b72:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b76:	f7fa ff0f 	bl	8000998 <__aeabi_dcmpeq>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d1f4      	bne.n	8005b68 <__ieee754_rem_pio2+0x398>
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <__ieee754_rem_pio2+0x3dc>)
 8005b80:	462a      	mov	r2, r5
 8005b82:	9301      	str	r3, [sp, #4]
 8005b84:	2302      	movs	r3, #2
 8005b86:	4621      	mov	r1, r4
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	a806      	add	r0, sp, #24
 8005b8c:	4653      	mov	r3, sl
 8005b8e:	f000 f979 	bl	8005e84 <__kernel_rem_pio2>
 8005b92:	9b04      	ldr	r3, [sp, #16]
 8005b94:	4605      	mov	r5, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f6bf ae51 	bge.w	800583e <__ieee754_rem_pio2+0x6e>
 8005b9c:	6863      	ldr	r3, [r4, #4]
 8005b9e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005ba2:	6063      	str	r3, [r4, #4]
 8005ba4:	68e3      	ldr	r3, [r4, #12]
 8005ba6:	e707      	b.n	80059b8 <__ieee754_rem_pio2+0x1e8>
 8005ba8:	41700000 	.word	0x41700000
 8005bac:	08006974 	.word	0x08006974

08005bb0 <__ieee754_sqrt>:
 8005bb0:	f8df c150 	ldr.w	ip, [pc, #336]	; 8005d04 <__ieee754_sqrt+0x154>
 8005bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb8:	ea3c 0c01 	bics.w	ip, ip, r1
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	460d      	mov	r5, r1
 8005bc2:	460a      	mov	r2, r1
 8005bc4:	4607      	mov	r7, r0
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	d10e      	bne.n	8005be8 <__ieee754_sqrt+0x38>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	f7fa fc7c 	bl	80004c8 <__aeabi_dmul>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	f7fa fac0 	bl	800015c <__adddf3>
 8005bdc:	4606      	mov	r6, r0
 8005bde:	460d      	mov	r5, r1
 8005be0:	4630      	mov	r0, r6
 8005be2:	4629      	mov	r1, r5
 8005be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005be8:	2900      	cmp	r1, #0
 8005bea:	dc0d      	bgt.n	8005c08 <__ieee754_sqrt+0x58>
 8005bec:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005bf0:	ea5c 0707 	orrs.w	r7, ip, r7
 8005bf4:	d0f4      	beq.n	8005be0 <__ieee754_sqrt+0x30>
 8005bf6:	b139      	cbz	r1, 8005c08 <__ieee754_sqrt+0x58>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	f7fa faad 	bl	8000158 <__aeabi_dsub>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	f7fa fd8b 	bl	800071c <__aeabi_ddiv>
 8005c06:	e7e9      	b.n	8005bdc <__ieee754_sqrt+0x2c>
 8005c08:	1512      	asrs	r2, r2, #20
 8005c0a:	d074      	beq.n	8005cf6 <__ieee754_sqrt+0x146>
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	07d5      	lsls	r5, r2, #31
 8005c10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c14:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8005c18:	bf5e      	ittt	pl
 8005c1a:	0fe3      	lsrpl	r3, r4, #31
 8005c1c:	0064      	lslpl	r4, r4, #1
 8005c1e:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8005c22:	0fe3      	lsrs	r3, r4, #31
 8005c24:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005c28:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8005c2c:	2516      	movs	r5, #22
 8005c2e:	4601      	mov	r1, r0
 8005c30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005c34:	1076      	asrs	r6, r6, #1
 8005c36:	0064      	lsls	r4, r4, #1
 8005c38:	188f      	adds	r7, r1, r2
 8005c3a:	429f      	cmp	r7, r3
 8005c3c:	bfde      	ittt	le
 8005c3e:	1bdb      	suble	r3, r3, r7
 8005c40:	18b9      	addle	r1, r7, r2
 8005c42:	1880      	addle	r0, r0, r2
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	3d01      	subs	r5, #1
 8005c48:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005c4c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005c50:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005c54:	d1f0      	bne.n	8005c38 <__ieee754_sqrt+0x88>
 8005c56:	462a      	mov	r2, r5
 8005c58:	f04f 0e20 	mov.w	lr, #32
 8005c5c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8005c60:	428b      	cmp	r3, r1
 8005c62:	eb07 0c05 	add.w	ip, r7, r5
 8005c66:	dc02      	bgt.n	8005c6e <__ieee754_sqrt+0xbe>
 8005c68:	d113      	bne.n	8005c92 <__ieee754_sqrt+0xe2>
 8005c6a:	45a4      	cmp	ip, r4
 8005c6c:	d811      	bhi.n	8005c92 <__ieee754_sqrt+0xe2>
 8005c6e:	f1bc 0f00 	cmp.w	ip, #0
 8005c72:	eb0c 0507 	add.w	r5, ip, r7
 8005c76:	da43      	bge.n	8005d00 <__ieee754_sqrt+0x150>
 8005c78:	2d00      	cmp	r5, #0
 8005c7a:	db41      	blt.n	8005d00 <__ieee754_sqrt+0x150>
 8005c7c:	f101 0801 	add.w	r8, r1, #1
 8005c80:	1a5b      	subs	r3, r3, r1
 8005c82:	4641      	mov	r1, r8
 8005c84:	45a4      	cmp	ip, r4
 8005c86:	bf88      	it	hi
 8005c88:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005c8c:	eba4 040c 	sub.w	r4, r4, ip
 8005c90:	443a      	add	r2, r7
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	f1be 0e01 	subs.w	lr, lr, #1
 8005c98:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005c9c:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8005ca0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005ca4:	d1dc      	bne.n	8005c60 <__ieee754_sqrt+0xb0>
 8005ca6:	4323      	orrs	r3, r4
 8005ca8:	d006      	beq.n	8005cb8 <__ieee754_sqrt+0x108>
 8005caa:	1c54      	adds	r4, r2, #1
 8005cac:	bf0b      	itete	eq
 8005cae:	4672      	moveq	r2, lr
 8005cb0:	3201      	addne	r2, #1
 8005cb2:	3001      	addeq	r0, #1
 8005cb4:	f022 0201 	bicne.w	r2, r2, #1
 8005cb8:	1043      	asrs	r3, r0, #1
 8005cba:	07c1      	lsls	r1, r0, #31
 8005cbc:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005cc0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005cc4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005cc8:	bf48      	it	mi
 8005cca:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005cce:	4610      	mov	r0, r2
 8005cd0:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8005cd4:	e782      	b.n	8005bdc <__ieee754_sqrt+0x2c>
 8005cd6:	0ae3      	lsrs	r3, r4, #11
 8005cd8:	3915      	subs	r1, #21
 8005cda:	0564      	lsls	r4, r4, #21
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0fa      	beq.n	8005cd6 <__ieee754_sqrt+0x126>
 8005ce0:	02de      	lsls	r6, r3, #11
 8005ce2:	d50a      	bpl.n	8005cfa <__ieee754_sqrt+0x14a>
 8005ce4:	f1c2 0020 	rsb	r0, r2, #32
 8005ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8005cec:	1e55      	subs	r5, r2, #1
 8005cee:	4094      	lsls	r4, r2
 8005cf0:	4303      	orrs	r3, r0
 8005cf2:	1b4a      	subs	r2, r1, r5
 8005cf4:	e78a      	b.n	8005c0c <__ieee754_sqrt+0x5c>
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	e7f0      	b.n	8005cdc <__ieee754_sqrt+0x12c>
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	3201      	adds	r2, #1
 8005cfe:	e7ef      	b.n	8005ce0 <__ieee754_sqrt+0x130>
 8005d00:	4688      	mov	r8, r1
 8005d02:	e7bd      	b.n	8005c80 <__ieee754_sqrt+0xd0>
 8005d04:	7ff00000 	.word	0x7ff00000

08005d08 <__kernel_cos>:
 8005d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005d10:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005d14:	4680      	mov	r8, r0
 8005d16:	460f      	mov	r7, r1
 8005d18:	e9cd 2300 	strd	r2, r3, [sp]
 8005d1c:	da04      	bge.n	8005d28 <__kernel_cos+0x20>
 8005d1e:	f7fa fe83 	bl	8000a28 <__aeabi_d2iz>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	f000 8086 	beq.w	8005e34 <__kernel_cos+0x12c>
 8005d28:	4642      	mov	r2, r8
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	4640      	mov	r0, r8
 8005d2e:	4639      	mov	r1, r7
 8005d30:	f7fa fbca 	bl	80004c8 <__aeabi_dmul>
 8005d34:	2200      	movs	r2, #0
 8005d36:	4b4e      	ldr	r3, [pc, #312]	; (8005e70 <__kernel_cos+0x168>)
 8005d38:	4604      	mov	r4, r0
 8005d3a:	460d      	mov	r5, r1
 8005d3c:	f7fa fbc4 	bl	80004c8 <__aeabi_dmul>
 8005d40:	a33f      	add	r3, pc, #252	; (adr r3, 8005e40 <__kernel_cos+0x138>)
 8005d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d46:	4682      	mov	sl, r0
 8005d48:	468b      	mov	fp, r1
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	f7fa fbbb 	bl	80004c8 <__aeabi_dmul>
 8005d52:	a33d      	add	r3, pc, #244	; (adr r3, 8005e48 <__kernel_cos+0x140>)
 8005d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d58:	f7fa fa00 	bl	800015c <__adddf3>
 8005d5c:	4622      	mov	r2, r4
 8005d5e:	462b      	mov	r3, r5
 8005d60:	f7fa fbb2 	bl	80004c8 <__aeabi_dmul>
 8005d64:	a33a      	add	r3, pc, #232	; (adr r3, 8005e50 <__kernel_cos+0x148>)
 8005d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6a:	f7fa f9f5 	bl	8000158 <__aeabi_dsub>
 8005d6e:	4622      	mov	r2, r4
 8005d70:	462b      	mov	r3, r5
 8005d72:	f7fa fba9 	bl	80004c8 <__aeabi_dmul>
 8005d76:	a338      	add	r3, pc, #224	; (adr r3, 8005e58 <__kernel_cos+0x150>)
 8005d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7c:	f7fa f9ee 	bl	800015c <__adddf3>
 8005d80:	4622      	mov	r2, r4
 8005d82:	462b      	mov	r3, r5
 8005d84:	f7fa fba0 	bl	80004c8 <__aeabi_dmul>
 8005d88:	a335      	add	r3, pc, #212	; (adr r3, 8005e60 <__kernel_cos+0x158>)
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	f7fa f9e3 	bl	8000158 <__aeabi_dsub>
 8005d92:	4622      	mov	r2, r4
 8005d94:	462b      	mov	r3, r5
 8005d96:	f7fa fb97 	bl	80004c8 <__aeabi_dmul>
 8005d9a:	a333      	add	r3, pc, #204	; (adr r3, 8005e68 <__kernel_cos+0x160>)
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	f7fa f9dc 	bl	800015c <__adddf3>
 8005da4:	4622      	mov	r2, r4
 8005da6:	462b      	mov	r3, r5
 8005da8:	f7fa fb8e 	bl	80004c8 <__aeabi_dmul>
 8005dac:	4622      	mov	r2, r4
 8005dae:	462b      	mov	r3, r5
 8005db0:	f7fa fb8a 	bl	80004c8 <__aeabi_dmul>
 8005db4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005db8:	4604      	mov	r4, r0
 8005dba:	460d      	mov	r5, r1
 8005dbc:	4640      	mov	r0, r8
 8005dbe:	4639      	mov	r1, r7
 8005dc0:	f7fa fb82 	bl	80004c8 <__aeabi_dmul>
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	4629      	mov	r1, r5
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f7fa f9c4 	bl	8000158 <__aeabi_dsub>
 8005dd0:	4b28      	ldr	r3, [pc, #160]	; (8005e74 <__kernel_cos+0x16c>)
 8005dd2:	4680      	mov	r8, r0
 8005dd4:	429e      	cmp	r6, r3
 8005dd6:	4689      	mov	r9, r1
 8005dd8:	dc0e      	bgt.n	8005df8 <__kernel_cos+0xf0>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4650      	mov	r0, sl
 8005de0:	4659      	mov	r1, fp
 8005de2:	f7fa f9b9 	bl	8000158 <__aeabi_dsub>
 8005de6:	4602      	mov	r2, r0
 8005de8:	2000      	movs	r0, #0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4922      	ldr	r1, [pc, #136]	; (8005e78 <__kernel_cos+0x170>)
 8005dee:	f7fa f9b3 	bl	8000158 <__aeabi_dsub>
 8005df2:	b003      	add	sp, #12
 8005df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df8:	2400      	movs	r4, #0
 8005dfa:	4b20      	ldr	r3, [pc, #128]	; (8005e7c <__kernel_cos+0x174>)
 8005dfc:	4622      	mov	r2, r4
 8005dfe:	429e      	cmp	r6, r3
 8005e00:	bfcc      	ite	gt
 8005e02:	4d1f      	ldrgt	r5, [pc, #124]	; (8005e80 <__kernel_cos+0x178>)
 8005e04:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005e08:	462b      	mov	r3, r5
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	491a      	ldr	r1, [pc, #104]	; (8005e78 <__kernel_cos+0x170>)
 8005e0e:	f7fa f9a3 	bl	8000158 <__aeabi_dsub>
 8005e12:	4622      	mov	r2, r4
 8005e14:	4606      	mov	r6, r0
 8005e16:	460f      	mov	r7, r1
 8005e18:	462b      	mov	r3, r5
 8005e1a:	4650      	mov	r0, sl
 8005e1c:	4659      	mov	r1, fp
 8005e1e:	f7fa f99b 	bl	8000158 <__aeabi_dsub>
 8005e22:	4642      	mov	r2, r8
 8005e24:	464b      	mov	r3, r9
 8005e26:	f7fa f997 	bl	8000158 <__aeabi_dsub>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4630      	mov	r0, r6
 8005e30:	4639      	mov	r1, r7
 8005e32:	e7dc      	b.n	8005dee <__kernel_cos+0xe6>
 8005e34:	2000      	movs	r0, #0
 8005e36:	4910      	ldr	r1, [pc, #64]	; (8005e78 <__kernel_cos+0x170>)
 8005e38:	e7db      	b.n	8005df2 <__kernel_cos+0xea>
 8005e3a:	bf00      	nop
 8005e3c:	f3af 8000 	nop.w
 8005e40:	be8838d4 	.word	0xbe8838d4
 8005e44:	bda8fae9 	.word	0xbda8fae9
 8005e48:	bdb4b1c4 	.word	0xbdb4b1c4
 8005e4c:	3e21ee9e 	.word	0x3e21ee9e
 8005e50:	809c52ad 	.word	0x809c52ad
 8005e54:	3e927e4f 	.word	0x3e927e4f
 8005e58:	19cb1590 	.word	0x19cb1590
 8005e5c:	3efa01a0 	.word	0x3efa01a0
 8005e60:	16c15177 	.word	0x16c15177
 8005e64:	3f56c16c 	.word	0x3f56c16c
 8005e68:	5555554c 	.word	0x5555554c
 8005e6c:	3fa55555 	.word	0x3fa55555
 8005e70:	3fe00000 	.word	0x3fe00000
 8005e74:	3fd33332 	.word	0x3fd33332
 8005e78:	3ff00000 	.word	0x3ff00000
 8005e7c:	3fe90000 	.word	0x3fe90000
 8005e80:	3fd20000 	.word	0x3fd20000

08005e84 <__kernel_rem_pio2>:
 8005e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e88:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005e8c:	9308      	str	r3, [sp, #32]
 8005e8e:	9101      	str	r1, [sp, #4]
 8005e90:	4bc0      	ldr	r3, [pc, #768]	; (8006194 <__kernel_rem_pio2+0x310>)
 8005e92:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8005e94:	f112 0f14 	cmn.w	r2, #20
 8005e98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005e9c:	bfa8      	it	ge
 8005e9e:	1ed4      	subge	r4, r2, #3
 8005ea0:	9304      	str	r3, [sp, #16]
 8005ea2:	9b08      	ldr	r3, [sp, #32]
 8005ea4:	bfb8      	it	lt
 8005ea6:	2400      	movlt	r4, #0
 8005ea8:	f103 33ff 	add.w	r3, r3, #4294967295
 8005eac:	9306      	str	r3, [sp, #24]
 8005eae:	bfa4      	itt	ge
 8005eb0:	2318      	movge	r3, #24
 8005eb2:	fb94 f4f3 	sdivge	r4, r4, r3
 8005eb6:	f06f 0317 	mvn.w	r3, #23
 8005eba:	fb04 3303 	mla	r3, r4, r3, r3
 8005ebe:	eb03 0a02 	add.w	sl, r3, r2
 8005ec2:	9a06      	ldr	r2, [sp, #24]
 8005ec4:	9b04      	ldr	r3, [sp, #16]
 8005ec6:	1aa7      	subs	r7, r4, r2
 8005ec8:	eb03 0802 	add.w	r8, r3, r2
 8005ecc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005ece:	2500      	movs	r5, #0
 8005ed0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9009      	str	r0, [sp, #36]	; 0x24
 8005eda:	ae20      	add	r6, sp, #128	; 0x80
 8005edc:	4545      	cmp	r5, r8
 8005ede:	dd19      	ble.n	8005f14 <__kernel_rem_pio2+0x90>
 8005ee0:	9b08      	ldr	r3, [sp, #32]
 8005ee2:	aa20      	add	r2, sp, #128	; 0x80
 8005ee4:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005ee8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005eec:	f1c3 0301 	rsb	r3, r3, #1
 8005ef0:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005ef4:	9307      	str	r3, [sp, #28]
 8005ef6:	9b07      	ldr	r3, [sp, #28]
 8005ef8:	9a04      	ldr	r2, [sp, #16]
 8005efa:	4443      	add	r3, r8
 8005efc:	429a      	cmp	r2, r3
 8005efe:	db35      	blt.n	8005f6c <__kernel_rem_pio2+0xe8>
 8005f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f02:	2200      	movs	r2, #0
 8005f04:	f1a3 0908 	sub.w	r9, r3, #8
 8005f08:	2300      	movs	r3, #0
 8005f0a:	462f      	mov	r7, r5
 8005f0c:	2600      	movs	r6, #0
 8005f0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f12:	e01f      	b.n	8005f54 <__kernel_rem_pio2+0xd0>
 8005f14:	42ef      	cmn	r7, r5
 8005f16:	d40b      	bmi.n	8005f30 <__kernel_rem_pio2+0xac>
 8005f18:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005f1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f20:	f7fa fa68 	bl	80003f4 <__aeabi_i2d>
 8005f24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f28:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005f2c:	3501      	adds	r5, #1
 8005f2e:	e7d5      	b.n	8005edc <__kernel_rem_pio2+0x58>
 8005f30:	4610      	mov	r0, r2
 8005f32:	4619      	mov	r1, r3
 8005f34:	e7f8      	b.n	8005f28 <__kernel_rem_pio2+0xa4>
 8005f36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f3a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8005f3e:	f7fa fac3 	bl	80004c8 <__aeabi_dmul>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f4a:	f7fa f907 	bl	800015c <__adddf3>
 8005f4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f52:	3601      	adds	r6, #1
 8005f54:	9b06      	ldr	r3, [sp, #24]
 8005f56:	3f08      	subs	r7, #8
 8005f58:	429e      	cmp	r6, r3
 8005f5a:	ddec      	ble.n	8005f36 <__kernel_rem_pio2+0xb2>
 8005f5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f60:	3508      	adds	r5, #8
 8005f62:	e8eb 2302 	strd	r2, r3, [fp], #8
 8005f66:	f108 0801 	add.w	r8, r8, #1
 8005f6a:	e7c4      	b.n	8005ef6 <__kernel_rem_pio2+0x72>
 8005f6c:	9b04      	ldr	r3, [sp, #16]
 8005f6e:	aa0c      	add	r2, sp, #48	; 0x30
 8005f70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005f74:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f76:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005f78:	9f04      	ldr	r7, [sp, #16]
 8005f7a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f80:	463e      	mov	r6, r7
 8005f82:	ab98      	add	r3, sp, #608	; 0x260
 8005f84:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8005f88:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f8c:	f8cd b008 	str.w	fp, [sp, #8]
 8005f90:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8005f94:	2e00      	cmp	r6, #0
 8005f96:	dc71      	bgt.n	800607c <__kernel_rem_pio2+0x1f8>
 8005f98:	4652      	mov	r2, sl
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	f000 fbff 	bl	80067a0 <scalbn>
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005fa8:	4604      	mov	r4, r0
 8005faa:	460d      	mov	r5, r1
 8005fac:	f7fa fa8c 	bl	80004c8 <__aeabi_dmul>
 8005fb0:	f000 fb6e 	bl	8006690 <floor>
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	4b78      	ldr	r3, [pc, #480]	; (8006198 <__kernel_rem_pio2+0x314>)
 8005fb8:	f7fa fa86 	bl	80004c8 <__aeabi_dmul>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	4629      	mov	r1, r5
 8005fc4:	f7fa f8c8 	bl	8000158 <__aeabi_dsub>
 8005fc8:	460d      	mov	r5, r1
 8005fca:	4604      	mov	r4, r0
 8005fcc:	f7fa fd2c 	bl	8000a28 <__aeabi_d2iz>
 8005fd0:	9007      	str	r0, [sp, #28]
 8005fd2:	f7fa fa0f 	bl	80003f4 <__aeabi_i2d>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4620      	mov	r0, r4
 8005fdc:	4629      	mov	r1, r5
 8005fde:	f7fa f8bb 	bl	8000158 <__aeabi_dsub>
 8005fe2:	f1ba 0f00 	cmp.w	sl, #0
 8005fe6:	4680      	mov	r8, r0
 8005fe8:	4689      	mov	r9, r1
 8005fea:	dd70      	ble.n	80060ce <__kernel_rem_pio2+0x24a>
 8005fec:	1e7a      	subs	r2, r7, #1
 8005fee:	ab0c      	add	r3, sp, #48	; 0x30
 8005ff0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005ff4:	9c07      	ldr	r4, [sp, #28]
 8005ff6:	f1ca 0118 	rsb	r1, sl, #24
 8005ffa:	fa40 f301 	asr.w	r3, r0, r1
 8005ffe:	441c      	add	r4, r3
 8006000:	408b      	lsls	r3, r1
 8006002:	1ac0      	subs	r0, r0, r3
 8006004:	ab0c      	add	r3, sp, #48	; 0x30
 8006006:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800600a:	f1ca 0317 	rsb	r3, sl, #23
 800600e:	9407      	str	r4, [sp, #28]
 8006010:	fa40 f303 	asr.w	r3, r0, r3
 8006014:	9302      	str	r3, [sp, #8]
 8006016:	9b02      	ldr	r3, [sp, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	dd66      	ble.n	80060ea <__kernel_rem_pio2+0x266>
 800601c:	2200      	movs	r2, #0
 800601e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006022:	4614      	mov	r4, r2
 8006024:	9b07      	ldr	r3, [sp, #28]
 8006026:	3301      	adds	r3, #1
 8006028:	9307      	str	r3, [sp, #28]
 800602a:	4297      	cmp	r7, r2
 800602c:	f300 809f 	bgt.w	800616e <__kernel_rem_pio2+0x2ea>
 8006030:	f1ba 0f00 	cmp.w	sl, #0
 8006034:	dd07      	ble.n	8006046 <__kernel_rem_pio2+0x1c2>
 8006036:	f1ba 0f01 	cmp.w	sl, #1
 800603a:	f000 80b9 	beq.w	80061b0 <__kernel_rem_pio2+0x32c>
 800603e:	f1ba 0f02 	cmp.w	sl, #2
 8006042:	f000 80bf 	beq.w	80061c4 <__kernel_rem_pio2+0x340>
 8006046:	9b02      	ldr	r3, [sp, #8]
 8006048:	2b02      	cmp	r3, #2
 800604a:	d14e      	bne.n	80060ea <__kernel_rem_pio2+0x266>
 800604c:	4642      	mov	r2, r8
 800604e:	464b      	mov	r3, r9
 8006050:	2000      	movs	r0, #0
 8006052:	4952      	ldr	r1, [pc, #328]	; (800619c <__kernel_rem_pio2+0x318>)
 8006054:	f7fa f880 	bl	8000158 <__aeabi_dsub>
 8006058:	4680      	mov	r8, r0
 800605a:	4689      	mov	r9, r1
 800605c:	2c00      	cmp	r4, #0
 800605e:	d044      	beq.n	80060ea <__kernel_rem_pio2+0x266>
 8006060:	4652      	mov	r2, sl
 8006062:	2000      	movs	r0, #0
 8006064:	494d      	ldr	r1, [pc, #308]	; (800619c <__kernel_rem_pio2+0x318>)
 8006066:	f000 fb9b 	bl	80067a0 <scalbn>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	4640      	mov	r0, r8
 8006070:	4649      	mov	r1, r9
 8006072:	f7fa f871 	bl	8000158 <__aeabi_dsub>
 8006076:	4680      	mov	r8, r0
 8006078:	4689      	mov	r9, r1
 800607a:	e036      	b.n	80060ea <__kernel_rem_pio2+0x266>
 800607c:	2200      	movs	r2, #0
 800607e:	4b48      	ldr	r3, [pc, #288]	; (80061a0 <__kernel_rem_pio2+0x31c>)
 8006080:	4620      	mov	r0, r4
 8006082:	4629      	mov	r1, r5
 8006084:	f7fa fa20 	bl	80004c8 <__aeabi_dmul>
 8006088:	f7fa fcce 	bl	8000a28 <__aeabi_d2iz>
 800608c:	f7fa f9b2 	bl	80003f4 <__aeabi_i2d>
 8006090:	2200      	movs	r2, #0
 8006092:	4b44      	ldr	r3, [pc, #272]	; (80061a4 <__kernel_rem_pio2+0x320>)
 8006094:	4680      	mov	r8, r0
 8006096:	4689      	mov	r9, r1
 8006098:	f7fa fa16 	bl	80004c8 <__aeabi_dmul>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4620      	mov	r0, r4
 80060a2:	4629      	mov	r1, r5
 80060a4:	f7fa f858 	bl	8000158 <__aeabi_dsub>
 80060a8:	f7fa fcbe 	bl	8000a28 <__aeabi_d2iz>
 80060ac:	9b02      	ldr	r3, [sp, #8]
 80060ae:	3e01      	subs	r6, #1
 80060b0:	f843 0b04 	str.w	r0, [r3], #4
 80060b4:	9302      	str	r3, [sp, #8]
 80060b6:	ab70      	add	r3, sp, #448	; 0x1c0
 80060b8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80060bc:	4640      	mov	r0, r8
 80060be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c2:	4649      	mov	r1, r9
 80060c4:	f7fa f84a 	bl	800015c <__adddf3>
 80060c8:	4604      	mov	r4, r0
 80060ca:	460d      	mov	r5, r1
 80060cc:	e762      	b.n	8005f94 <__kernel_rem_pio2+0x110>
 80060ce:	d105      	bne.n	80060dc <__kernel_rem_pio2+0x258>
 80060d0:	1e7b      	subs	r3, r7, #1
 80060d2:	aa0c      	add	r2, sp, #48	; 0x30
 80060d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80060d8:	15c3      	asrs	r3, r0, #23
 80060da:	e79b      	b.n	8006014 <__kernel_rem_pio2+0x190>
 80060dc:	2200      	movs	r2, #0
 80060de:	4b32      	ldr	r3, [pc, #200]	; (80061a8 <__kernel_rem_pio2+0x324>)
 80060e0:	f7fa fc78 	bl	80009d4 <__aeabi_dcmpge>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d13f      	bne.n	8006168 <__kernel_rem_pio2+0x2e4>
 80060e8:	9002      	str	r0, [sp, #8]
 80060ea:	2200      	movs	r2, #0
 80060ec:	2300      	movs	r3, #0
 80060ee:	4640      	mov	r0, r8
 80060f0:	4649      	mov	r1, r9
 80060f2:	f7fa fc51 	bl	8000998 <__aeabi_dcmpeq>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	f000 80b5 	beq.w	8006266 <__kernel_rem_pio2+0x3e2>
 80060fc:	1e7c      	subs	r4, r7, #1
 80060fe:	4623      	mov	r3, r4
 8006100:	2200      	movs	r2, #0
 8006102:	9904      	ldr	r1, [sp, #16]
 8006104:	428b      	cmp	r3, r1
 8006106:	da64      	bge.n	80061d2 <__kernel_rem_pio2+0x34e>
 8006108:	2a00      	cmp	r2, #0
 800610a:	d078      	beq.n	80061fe <__kernel_rem_pio2+0x37a>
 800610c:	ab0c      	add	r3, sp, #48	; 0x30
 800610e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006112:	f1aa 0a18 	sub.w	sl, sl, #24
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 80a3 	beq.w	8006262 <__kernel_rem_pio2+0x3de>
 800611c:	4652      	mov	r2, sl
 800611e:	2000      	movs	r0, #0
 8006120:	491e      	ldr	r1, [pc, #120]	; (800619c <__kernel_rem_pio2+0x318>)
 8006122:	f000 fb3d 	bl	80067a0 <scalbn>
 8006126:	46a2      	mov	sl, r4
 8006128:	4606      	mov	r6, r0
 800612a:	460f      	mov	r7, r1
 800612c:	f04f 0800 	mov.w	r8, #0
 8006130:	00e3      	lsls	r3, r4, #3
 8006132:	9306      	str	r3, [sp, #24]
 8006134:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80061a0 <__kernel_rem_pio2+0x31c>
 8006138:	ab70      	add	r3, sp, #448	; 0x1c0
 800613a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800613e:	f1ba 0f00 	cmp.w	sl, #0
 8006142:	f280 80c6 	bge.w	80062d2 <__kernel_rem_pio2+0x44e>
 8006146:	4627      	mov	r7, r4
 8006148:	f04f 0800 	mov.w	r8, #0
 800614c:	2f00      	cmp	r7, #0
 800614e:	f2c0 80f3 	blt.w	8006338 <__kernel_rem_pio2+0x4b4>
 8006152:	4b16      	ldr	r3, [pc, #88]	; (80061ac <__kernel_rem_pio2+0x328>)
 8006154:	f04f 0a00 	mov.w	sl, #0
 8006158:	461d      	mov	r5, r3
 800615a:	ab70      	add	r3, sp, #448	; 0x1c0
 800615c:	f04f 0b00 	mov.w	fp, #0
 8006160:	2600      	movs	r6, #0
 8006162:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8006166:	e0d9      	b.n	800631c <__kernel_rem_pio2+0x498>
 8006168:	2302      	movs	r3, #2
 800616a:	9302      	str	r3, [sp, #8]
 800616c:	e756      	b.n	800601c <__kernel_rem_pio2+0x198>
 800616e:	f8db 3000 	ldr.w	r3, [fp]
 8006172:	b954      	cbnz	r4, 800618a <__kernel_rem_pio2+0x306>
 8006174:	b123      	cbz	r3, 8006180 <__kernel_rem_pio2+0x2fc>
 8006176:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800617a:	f8cb 3000 	str.w	r3, [fp]
 800617e:	2301      	movs	r3, #1
 8006180:	461c      	mov	r4, r3
 8006182:	3201      	adds	r2, #1
 8006184:	f10b 0b04 	add.w	fp, fp, #4
 8006188:	e74f      	b.n	800602a <__kernel_rem_pio2+0x1a6>
 800618a:	1acb      	subs	r3, r1, r3
 800618c:	f8cb 3000 	str.w	r3, [fp]
 8006190:	4623      	mov	r3, r4
 8006192:	e7f5      	b.n	8006180 <__kernel_rem_pio2+0x2fc>
 8006194:	08006ac0 	.word	0x08006ac0
 8006198:	40200000 	.word	0x40200000
 800619c:	3ff00000 	.word	0x3ff00000
 80061a0:	3e700000 	.word	0x3e700000
 80061a4:	41700000 	.word	0x41700000
 80061a8:	3fe00000 	.word	0x3fe00000
 80061ac:	08006a80 	.word	0x08006a80
 80061b0:	1e7a      	subs	r2, r7, #1
 80061b2:	ab0c      	add	r3, sp, #48	; 0x30
 80061b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80061bc:	a90c      	add	r1, sp, #48	; 0x30
 80061be:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80061c2:	e740      	b.n	8006046 <__kernel_rem_pio2+0x1c2>
 80061c4:	1e7a      	subs	r2, r7, #1
 80061c6:	ab0c      	add	r3, sp, #48	; 0x30
 80061c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061cc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80061d0:	e7f4      	b.n	80061bc <__kernel_rem_pio2+0x338>
 80061d2:	a90c      	add	r1, sp, #48	; 0x30
 80061d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80061d8:	3b01      	subs	r3, #1
 80061da:	430a      	orrs	r2, r1
 80061dc:	e791      	b.n	8006102 <__kernel_rem_pio2+0x27e>
 80061de:	3401      	adds	r4, #1
 80061e0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80061e4:	2a00      	cmp	r2, #0
 80061e6:	d0fa      	beq.n	80061de <__kernel_rem_pio2+0x35a>
 80061e8:	9b08      	ldr	r3, [sp, #32]
 80061ea:	1c7e      	adds	r6, r7, #1
 80061ec:	18fd      	adds	r5, r7, r3
 80061ee:	ab20      	add	r3, sp, #128	; 0x80
 80061f0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80061f4:	443c      	add	r4, r7
 80061f6:	42b4      	cmp	r4, r6
 80061f8:	da04      	bge.n	8006204 <__kernel_rem_pio2+0x380>
 80061fa:	4627      	mov	r7, r4
 80061fc:	e6c0      	b.n	8005f80 <__kernel_rem_pio2+0xfc>
 80061fe:	2401      	movs	r4, #1
 8006200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006202:	e7ed      	b.n	80061e0 <__kernel_rem_pio2+0x35c>
 8006204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006206:	462f      	mov	r7, r5
 8006208:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800620c:	f7fa f8f2 	bl	80003f4 <__aeabi_i2d>
 8006210:	f04f 0b00 	mov.w	fp, #0
 8006214:	f04f 0800 	mov.w	r8, #0
 8006218:	f04f 0900 	mov.w	r9, #0
 800621c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800621e:	e8e7 0102 	strd	r0, r1, [r7], #8
 8006222:	3b08      	subs	r3, #8
 8006224:	9302      	str	r3, [sp, #8]
 8006226:	9b06      	ldr	r3, [sp, #24]
 8006228:	459b      	cmp	fp, r3
 800622a:	dd07      	ble.n	800623c <__kernel_rem_pio2+0x3b8>
 800622c:	ab70      	add	r3, sp, #448	; 0x1c0
 800622e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006232:	463d      	mov	r5, r7
 8006234:	e9c3 8900 	strd	r8, r9, [r3]
 8006238:	3601      	adds	r6, #1
 800623a:	e7dc      	b.n	80061f6 <__kernel_rem_pio2+0x372>
 800623c:	9902      	ldr	r1, [sp, #8]
 800623e:	f10b 0b01 	add.w	fp, fp, #1
 8006242:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8006246:	9102      	str	r1, [sp, #8]
 8006248:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800624c:	f7fa f93c 	bl	80004c8 <__aeabi_dmul>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4640      	mov	r0, r8
 8006256:	4649      	mov	r1, r9
 8006258:	f7f9 ff80 	bl	800015c <__adddf3>
 800625c:	4680      	mov	r8, r0
 800625e:	4689      	mov	r9, r1
 8006260:	e7e1      	b.n	8006226 <__kernel_rem_pio2+0x3a2>
 8006262:	3c01      	subs	r4, #1
 8006264:	e752      	b.n	800610c <__kernel_rem_pio2+0x288>
 8006266:	f1ca 0200 	rsb	r2, sl, #0
 800626a:	4640      	mov	r0, r8
 800626c:	4649      	mov	r1, r9
 800626e:	f000 fa97 	bl	80067a0 <scalbn>
 8006272:	2200      	movs	r2, #0
 8006274:	4ba5      	ldr	r3, [pc, #660]	; (800650c <__kernel_rem_pio2+0x688>)
 8006276:	4604      	mov	r4, r0
 8006278:	460d      	mov	r5, r1
 800627a:	f7fa fbab 	bl	80009d4 <__aeabi_dcmpge>
 800627e:	b1f8      	cbz	r0, 80062c0 <__kernel_rem_pio2+0x43c>
 8006280:	2200      	movs	r2, #0
 8006282:	4ba3      	ldr	r3, [pc, #652]	; (8006510 <__kernel_rem_pio2+0x68c>)
 8006284:	4620      	mov	r0, r4
 8006286:	4629      	mov	r1, r5
 8006288:	f7fa f91e 	bl	80004c8 <__aeabi_dmul>
 800628c:	f7fa fbcc 	bl	8000a28 <__aeabi_d2iz>
 8006290:	4606      	mov	r6, r0
 8006292:	f7fa f8af 	bl	80003f4 <__aeabi_i2d>
 8006296:	2200      	movs	r2, #0
 8006298:	4b9c      	ldr	r3, [pc, #624]	; (800650c <__kernel_rem_pio2+0x688>)
 800629a:	f7fa f915 	bl	80004c8 <__aeabi_dmul>
 800629e:	460b      	mov	r3, r1
 80062a0:	4602      	mov	r2, r0
 80062a2:	4629      	mov	r1, r5
 80062a4:	4620      	mov	r0, r4
 80062a6:	f7f9 ff57 	bl	8000158 <__aeabi_dsub>
 80062aa:	f7fa fbbd 	bl	8000a28 <__aeabi_d2iz>
 80062ae:	1c7c      	adds	r4, r7, #1
 80062b0:	ab0c      	add	r3, sp, #48	; 0x30
 80062b2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80062b6:	f10a 0a18 	add.w	sl, sl, #24
 80062ba:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80062be:	e72d      	b.n	800611c <__kernel_rem_pio2+0x298>
 80062c0:	4620      	mov	r0, r4
 80062c2:	4629      	mov	r1, r5
 80062c4:	f7fa fbb0 	bl	8000a28 <__aeabi_d2iz>
 80062c8:	ab0c      	add	r3, sp, #48	; 0x30
 80062ca:	463c      	mov	r4, r7
 80062cc:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80062d0:	e724      	b.n	800611c <__kernel_rem_pio2+0x298>
 80062d2:	ab0c      	add	r3, sp, #48	; 0x30
 80062d4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80062d8:	f7fa f88c 	bl	80003f4 <__aeabi_i2d>
 80062dc:	4632      	mov	r2, r6
 80062de:	463b      	mov	r3, r7
 80062e0:	f7fa f8f2 	bl	80004c8 <__aeabi_dmul>
 80062e4:	4642      	mov	r2, r8
 80062e6:	e86b 0102 	strd	r0, r1, [fp], #-8
 80062ea:	464b      	mov	r3, r9
 80062ec:	4630      	mov	r0, r6
 80062ee:	4639      	mov	r1, r7
 80062f0:	f7fa f8ea 	bl	80004c8 <__aeabi_dmul>
 80062f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062f8:	4606      	mov	r6, r0
 80062fa:	460f      	mov	r7, r1
 80062fc:	e71f      	b.n	800613e <__kernel_rem_pio2+0x2ba>
 80062fe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006302:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8006306:	f7fa f8df 	bl	80004c8 <__aeabi_dmul>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4650      	mov	r0, sl
 8006310:	4659      	mov	r1, fp
 8006312:	f7f9 ff23 	bl	800015c <__adddf3>
 8006316:	4682      	mov	sl, r0
 8006318:	468b      	mov	fp, r1
 800631a:	3601      	adds	r6, #1
 800631c:	9b04      	ldr	r3, [sp, #16]
 800631e:	429e      	cmp	r6, r3
 8006320:	dc01      	bgt.n	8006326 <__kernel_rem_pio2+0x4a2>
 8006322:	45b0      	cmp	r8, r6
 8006324:	daeb      	bge.n	80062fe <__kernel_rem_pio2+0x47a>
 8006326:	ab48      	add	r3, sp, #288	; 0x120
 8006328:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800632c:	e9c3 ab00 	strd	sl, fp, [r3]
 8006330:	3f01      	subs	r7, #1
 8006332:	f108 0801 	add.w	r8, r8, #1
 8006336:	e709      	b.n	800614c <__kernel_rem_pio2+0x2c8>
 8006338:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800633a:	2b02      	cmp	r3, #2
 800633c:	dc09      	bgt.n	8006352 <__kernel_rem_pio2+0x4ce>
 800633e:	2b00      	cmp	r3, #0
 8006340:	dc34      	bgt.n	80063ac <__kernel_rem_pio2+0x528>
 8006342:	d05e      	beq.n	8006402 <__kernel_rem_pio2+0x57e>
 8006344:	9b07      	ldr	r3, [sp, #28]
 8006346:	f003 0007 	and.w	r0, r3, #7
 800634a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800634e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006352:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006354:	2b03      	cmp	r3, #3
 8006356:	d1f5      	bne.n	8006344 <__kernel_rem_pio2+0x4c0>
 8006358:	9a06      	ldr	r2, [sp, #24]
 800635a:	ab48      	add	r3, sp, #288	; 0x120
 800635c:	441a      	add	r2, r3
 800635e:	4615      	mov	r5, r2
 8006360:	4692      	mov	sl, r2
 8006362:	46a3      	mov	fp, r4
 8006364:	f1bb 0f00 	cmp.w	fp, #0
 8006368:	dc7a      	bgt.n	8006460 <__kernel_rem_pio2+0x5dc>
 800636a:	46aa      	mov	sl, r5
 800636c:	46a3      	mov	fp, r4
 800636e:	f1bb 0f01 	cmp.w	fp, #1
 8006372:	f300 8094 	bgt.w	800649e <__kernel_rem_pio2+0x61a>
 8006376:	2700      	movs	r7, #0
 8006378:	463e      	mov	r6, r7
 800637a:	2c01      	cmp	r4, #1
 800637c:	f300 80ae 	bgt.w	80064dc <__kernel_rem_pio2+0x658>
 8006380:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8006384:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8006388:	9b02      	ldr	r3, [sp, #8]
 800638a:	2b00      	cmp	r3, #0
 800638c:	f040 80b0 	bne.w	80064f0 <__kernel_rem_pio2+0x66c>
 8006390:	4603      	mov	r3, r0
 8006392:	462a      	mov	r2, r5
 8006394:	9801      	ldr	r0, [sp, #4]
 8006396:	e9c0 2300 	strd	r2, r3, [r0]
 800639a:	4622      	mov	r2, r4
 800639c:	460b      	mov	r3, r1
 800639e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80063a2:	463a      	mov	r2, r7
 80063a4:	4633      	mov	r3, r6
 80063a6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80063aa:	e7cb      	b.n	8006344 <__kernel_rem_pio2+0x4c0>
 80063ac:	2000      	movs	r0, #0
 80063ae:	9a06      	ldr	r2, [sp, #24]
 80063b0:	ab48      	add	r3, sp, #288	; 0x120
 80063b2:	441a      	add	r2, r3
 80063b4:	4615      	mov	r5, r2
 80063b6:	46a0      	mov	r8, r4
 80063b8:	4601      	mov	r1, r0
 80063ba:	f1b8 0f00 	cmp.w	r8, #0
 80063be:	da3c      	bge.n	800643a <__kernel_rem_pio2+0x5b6>
 80063c0:	9b02      	ldr	r3, [sp, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d040      	beq.n	8006448 <__kernel_rem_pio2+0x5c4>
 80063c6:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80063ca:	4602      	mov	r2, r0
 80063cc:	462b      	mov	r3, r5
 80063ce:	9d01      	ldr	r5, [sp, #4]
 80063d0:	2601      	movs	r6, #1
 80063d2:	e9c5 2300 	strd	r2, r3, [r5]
 80063d6:	460b      	mov	r3, r1
 80063d8:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80063dc:	f7f9 febc 	bl	8000158 <__aeabi_dsub>
 80063e0:	4684      	mov	ip, r0
 80063e2:	460f      	mov	r7, r1
 80063e4:	ad48      	add	r5, sp, #288	; 0x120
 80063e6:	42b4      	cmp	r4, r6
 80063e8:	f105 0508 	add.w	r5, r5, #8
 80063ec:	da2e      	bge.n	800644c <__kernel_rem_pio2+0x5c8>
 80063ee:	9b02      	ldr	r3, [sp, #8]
 80063f0:	b10b      	cbz	r3, 80063f6 <__kernel_rem_pio2+0x572>
 80063f2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80063f6:	4662      	mov	r2, ip
 80063f8:	463b      	mov	r3, r7
 80063fa:	9901      	ldr	r1, [sp, #4]
 80063fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006400:	e7a0      	b.n	8006344 <__kernel_rem_pio2+0x4c0>
 8006402:	9a06      	ldr	r2, [sp, #24]
 8006404:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8006406:	ab48      	add	r3, sp, #288	; 0x120
 8006408:	441a      	add	r2, r3
 800640a:	4615      	mov	r5, r2
 800640c:	4637      	mov	r7, r6
 800640e:	2c00      	cmp	r4, #0
 8006410:	da09      	bge.n	8006426 <__kernel_rem_pio2+0x5a2>
 8006412:	9b02      	ldr	r3, [sp, #8]
 8006414:	b10b      	cbz	r3, 800641a <__kernel_rem_pio2+0x596>
 8006416:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800641a:	4632      	mov	r2, r6
 800641c:	463b      	mov	r3, r7
 800641e:	9901      	ldr	r1, [sp, #4]
 8006420:	e9c1 2300 	strd	r2, r3, [r1]
 8006424:	e78e      	b.n	8006344 <__kernel_rem_pio2+0x4c0>
 8006426:	4630      	mov	r0, r6
 8006428:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800642c:	4639      	mov	r1, r7
 800642e:	f7f9 fe95 	bl	800015c <__adddf3>
 8006432:	3c01      	subs	r4, #1
 8006434:	4606      	mov	r6, r0
 8006436:	460f      	mov	r7, r1
 8006438:	e7e9      	b.n	800640e <__kernel_rem_pio2+0x58a>
 800643a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800643e:	f7f9 fe8d 	bl	800015c <__adddf3>
 8006442:	f108 38ff 	add.w	r8, r8, #4294967295
 8006446:	e7b8      	b.n	80063ba <__kernel_rem_pio2+0x536>
 8006448:	460d      	mov	r5, r1
 800644a:	e7be      	b.n	80063ca <__kernel_rem_pio2+0x546>
 800644c:	4660      	mov	r0, ip
 800644e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006452:	4639      	mov	r1, r7
 8006454:	f7f9 fe82 	bl	800015c <__adddf3>
 8006458:	3601      	adds	r6, #1
 800645a:	4684      	mov	ip, r0
 800645c:	460f      	mov	r7, r1
 800645e:	e7c2      	b.n	80063e6 <__kernel_rem_pio2+0x562>
 8006460:	e9da 6700 	ldrd	r6, r7, [sl]
 8006464:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8006468:	4632      	mov	r2, r6
 800646a:	463b      	mov	r3, r7
 800646c:	4640      	mov	r0, r8
 800646e:	4649      	mov	r1, r9
 8006470:	f7f9 fe74 	bl	800015c <__adddf3>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800647c:	4640      	mov	r0, r8
 800647e:	4649      	mov	r1, r9
 8006480:	f7f9 fe6a 	bl	8000158 <__aeabi_dsub>
 8006484:	4632      	mov	r2, r6
 8006486:	463b      	mov	r3, r7
 8006488:	f7f9 fe68 	bl	800015c <__adddf3>
 800648c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006490:	e86a 0102 	strd	r0, r1, [sl], #-8
 8006494:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006498:	e9ca 2300 	strd	r2, r3, [sl]
 800649c:	e762      	b.n	8006364 <__kernel_rem_pio2+0x4e0>
 800649e:	e9da 8900 	ldrd	r8, r9, [sl]
 80064a2:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80064a6:	4642      	mov	r2, r8
 80064a8:	464b      	mov	r3, r9
 80064aa:	4630      	mov	r0, r6
 80064ac:	4639      	mov	r1, r7
 80064ae:	f7f9 fe55 	bl	800015c <__adddf3>
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064ba:	4630      	mov	r0, r6
 80064bc:	4639      	mov	r1, r7
 80064be:	f7f9 fe4b 	bl	8000158 <__aeabi_dsub>
 80064c2:	4642      	mov	r2, r8
 80064c4:	464b      	mov	r3, r9
 80064c6:	f7f9 fe49 	bl	800015c <__adddf3>
 80064ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064ce:	e86a 0102 	strd	r0, r1, [sl], #-8
 80064d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064d6:	e9ca 2300 	strd	r2, r3, [sl]
 80064da:	e748      	b.n	800636e <__kernel_rem_pio2+0x4ea>
 80064dc:	4638      	mov	r0, r7
 80064de:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80064e2:	4631      	mov	r1, r6
 80064e4:	f7f9 fe3a 	bl	800015c <__adddf3>
 80064e8:	3c01      	subs	r4, #1
 80064ea:	4607      	mov	r7, r0
 80064ec:	460e      	mov	r6, r1
 80064ee:	e744      	b.n	800637a <__kernel_rem_pio2+0x4f6>
 80064f0:	9b01      	ldr	r3, [sp, #4]
 80064f2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80064f6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80064fa:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80064fe:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8006502:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8006506:	601d      	str	r5, [r3, #0]
 8006508:	615e      	str	r6, [r3, #20]
 800650a:	e71b      	b.n	8006344 <__kernel_rem_pio2+0x4c0>
 800650c:	41700000 	.word	0x41700000
 8006510:	3e700000 	.word	0x3e700000
 8006514:	00000000 	.word	0x00000000

08006518 <__kernel_sin>:
 8006518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800651c:	b086      	sub	sp, #24
 800651e:	e9cd 2300 	strd	r2, r3, [sp]
 8006522:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006526:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800652a:	4682      	mov	sl, r0
 800652c:	460c      	mov	r4, r1
 800652e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006530:	da03      	bge.n	800653a <__kernel_sin+0x22>
 8006532:	f7fa fa79 	bl	8000a28 <__aeabi_d2iz>
 8006536:	2800      	cmp	r0, #0
 8006538:	d050      	beq.n	80065dc <__kernel_sin+0xc4>
 800653a:	4652      	mov	r2, sl
 800653c:	4623      	mov	r3, r4
 800653e:	4650      	mov	r0, sl
 8006540:	4621      	mov	r1, r4
 8006542:	f7f9 ffc1 	bl	80004c8 <__aeabi_dmul>
 8006546:	4606      	mov	r6, r0
 8006548:	460f      	mov	r7, r1
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4650      	mov	r0, sl
 8006550:	4621      	mov	r1, r4
 8006552:	f7f9 ffb9 	bl	80004c8 <__aeabi_dmul>
 8006556:	a33e      	add	r3, pc, #248	; (adr r3, 8006650 <__kernel_sin+0x138>)
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	4680      	mov	r8, r0
 800655e:	4689      	mov	r9, r1
 8006560:	4630      	mov	r0, r6
 8006562:	4639      	mov	r1, r7
 8006564:	f7f9 ffb0 	bl	80004c8 <__aeabi_dmul>
 8006568:	a33b      	add	r3, pc, #236	; (adr r3, 8006658 <__kernel_sin+0x140>)
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f7f9 fdf3 	bl	8000158 <__aeabi_dsub>
 8006572:	4632      	mov	r2, r6
 8006574:	463b      	mov	r3, r7
 8006576:	f7f9 ffa7 	bl	80004c8 <__aeabi_dmul>
 800657a:	a339      	add	r3, pc, #228	; (adr r3, 8006660 <__kernel_sin+0x148>)
 800657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006580:	f7f9 fdec 	bl	800015c <__adddf3>
 8006584:	4632      	mov	r2, r6
 8006586:	463b      	mov	r3, r7
 8006588:	f7f9 ff9e 	bl	80004c8 <__aeabi_dmul>
 800658c:	a336      	add	r3, pc, #216	; (adr r3, 8006668 <__kernel_sin+0x150>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f7f9 fde1 	bl	8000158 <__aeabi_dsub>
 8006596:	4632      	mov	r2, r6
 8006598:	463b      	mov	r3, r7
 800659a:	f7f9 ff95 	bl	80004c8 <__aeabi_dmul>
 800659e:	a334      	add	r3, pc, #208	; (adr r3, 8006670 <__kernel_sin+0x158>)
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f7f9 fdda 	bl	800015c <__adddf3>
 80065a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065ac:	b9dd      	cbnz	r5, 80065e6 <__kernel_sin+0xce>
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	4630      	mov	r0, r6
 80065b4:	4639      	mov	r1, r7
 80065b6:	f7f9 ff87 	bl	80004c8 <__aeabi_dmul>
 80065ba:	a32f      	add	r3, pc, #188	; (adr r3, 8006678 <__kernel_sin+0x160>)
 80065bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c0:	f7f9 fdca 	bl	8000158 <__aeabi_dsub>
 80065c4:	4642      	mov	r2, r8
 80065c6:	464b      	mov	r3, r9
 80065c8:	f7f9 ff7e 	bl	80004c8 <__aeabi_dmul>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4650      	mov	r0, sl
 80065d2:	4621      	mov	r1, r4
 80065d4:	f7f9 fdc2 	bl	800015c <__adddf3>
 80065d8:	4682      	mov	sl, r0
 80065da:	460c      	mov	r4, r1
 80065dc:	4650      	mov	r0, sl
 80065de:	4621      	mov	r1, r4
 80065e0:	b006      	add	sp, #24
 80065e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e6:	2200      	movs	r2, #0
 80065e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065ec:	4b24      	ldr	r3, [pc, #144]	; (8006680 <__kernel_sin+0x168>)
 80065ee:	f7f9 ff6b 	bl	80004c8 <__aeabi_dmul>
 80065f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065fa:	4640      	mov	r0, r8
 80065fc:	4649      	mov	r1, r9
 80065fe:	f7f9 ff63 	bl	80004c8 <__aeabi_dmul>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800660a:	f7f9 fda5 	bl	8000158 <__aeabi_dsub>
 800660e:	4632      	mov	r2, r6
 8006610:	463b      	mov	r3, r7
 8006612:	f7f9 ff59 	bl	80004c8 <__aeabi_dmul>
 8006616:	e9dd 2300 	ldrd	r2, r3, [sp]
 800661a:	f7f9 fd9d 	bl	8000158 <__aeabi_dsub>
 800661e:	a316      	add	r3, pc, #88	; (adr r3, 8006678 <__kernel_sin+0x160>)
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	4606      	mov	r6, r0
 8006626:	460f      	mov	r7, r1
 8006628:	4640      	mov	r0, r8
 800662a:	4649      	mov	r1, r9
 800662c:	f7f9 ff4c 	bl	80004c8 <__aeabi_dmul>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	4630      	mov	r0, r6
 8006636:	4639      	mov	r1, r7
 8006638:	f7f9 fd90 	bl	800015c <__adddf3>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4650      	mov	r0, sl
 8006642:	4621      	mov	r1, r4
 8006644:	f7f9 fd88 	bl	8000158 <__aeabi_dsub>
 8006648:	e7c6      	b.n	80065d8 <__kernel_sin+0xc0>
 800664a:	bf00      	nop
 800664c:	f3af 8000 	nop.w
 8006650:	5acfd57c 	.word	0x5acfd57c
 8006654:	3de5d93a 	.word	0x3de5d93a
 8006658:	8a2b9ceb 	.word	0x8a2b9ceb
 800665c:	3e5ae5e6 	.word	0x3e5ae5e6
 8006660:	57b1fe7d 	.word	0x57b1fe7d
 8006664:	3ec71de3 	.word	0x3ec71de3
 8006668:	19c161d5 	.word	0x19c161d5
 800666c:	3f2a01a0 	.word	0x3f2a01a0
 8006670:	1110f8a6 	.word	0x1110f8a6
 8006674:	3f811111 	.word	0x3f811111
 8006678:	55555549 	.word	0x55555549
 800667c:	3fc55555 	.word	0x3fc55555
 8006680:	3fe00000 	.word	0x3fe00000

08006684 <fabs>:
 8006684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006688:	4770      	bx	lr
 800668a:	0000      	movs	r0, r0
 800668c:	0000      	movs	r0, r0
	...

08006690 <floor>:
 8006690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006694:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006698:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800669c:	2e13      	cmp	r6, #19
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4607      	mov	r7, r0
 80066a4:	460c      	mov	r4, r1
 80066a6:	4605      	mov	r5, r0
 80066a8:	dc34      	bgt.n	8006714 <floor+0x84>
 80066aa:	2e00      	cmp	r6, #0
 80066ac:	da15      	bge.n	80066da <floor+0x4a>
 80066ae:	a334      	add	r3, pc, #208	; (adr r3, 8006780 <floor+0xf0>)
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	f7f9 fd52 	bl	800015c <__adddf3>
 80066b8:	2200      	movs	r2, #0
 80066ba:	2300      	movs	r3, #0
 80066bc:	f7fa f994 	bl	80009e8 <__aeabi_dcmpgt>
 80066c0:	b140      	cbz	r0, 80066d4 <floor+0x44>
 80066c2:	2c00      	cmp	r4, #0
 80066c4:	da59      	bge.n	800677a <floor+0xea>
 80066c6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80066ca:	ea57 0503 	orrs.w	r5, r7, r3
 80066ce:	d001      	beq.n	80066d4 <floor+0x44>
 80066d0:	2500      	movs	r5, #0
 80066d2:	4c2d      	ldr	r4, [pc, #180]	; (8006788 <floor+0xf8>)
 80066d4:	4623      	mov	r3, r4
 80066d6:	462f      	mov	r7, r5
 80066d8:	e025      	b.n	8006726 <floor+0x96>
 80066da:	4a2c      	ldr	r2, [pc, #176]	; (800678c <floor+0xfc>)
 80066dc:	fa42 f806 	asr.w	r8, r2, r6
 80066e0:	ea01 0208 	and.w	r2, r1, r8
 80066e4:	4302      	orrs	r2, r0
 80066e6:	d01e      	beq.n	8006726 <floor+0x96>
 80066e8:	a325      	add	r3, pc, #148	; (adr r3, 8006780 <floor+0xf0>)
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	f7f9 fd35 	bl	800015c <__adddf3>
 80066f2:	2200      	movs	r2, #0
 80066f4:	2300      	movs	r3, #0
 80066f6:	f7fa f977 	bl	80009e8 <__aeabi_dcmpgt>
 80066fa:	2800      	cmp	r0, #0
 80066fc:	d0ea      	beq.n	80066d4 <floor+0x44>
 80066fe:	2c00      	cmp	r4, #0
 8006700:	bfbe      	ittt	lt
 8006702:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006706:	fa43 f606 	asrlt.w	r6, r3, r6
 800670a:	19a4      	addlt	r4, r4, r6
 800670c:	2500      	movs	r5, #0
 800670e:	ea24 0408 	bic.w	r4, r4, r8
 8006712:	e7df      	b.n	80066d4 <floor+0x44>
 8006714:	2e33      	cmp	r6, #51	; 0x33
 8006716:	dd0a      	ble.n	800672e <floor+0x9e>
 8006718:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800671c:	d103      	bne.n	8006726 <floor+0x96>
 800671e:	f7f9 fd1d 	bl	800015c <__adddf3>
 8006722:	4607      	mov	r7, r0
 8006724:	460b      	mov	r3, r1
 8006726:	4638      	mov	r0, r7
 8006728:	4619      	mov	r1, r3
 800672a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800672e:	f04f 32ff 	mov.w	r2, #4294967295
 8006732:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006736:	fa22 f808 	lsr.w	r8, r2, r8
 800673a:	ea18 0f00 	tst.w	r8, r0
 800673e:	d0f2      	beq.n	8006726 <floor+0x96>
 8006740:	a30f      	add	r3, pc, #60	; (adr r3, 8006780 <floor+0xf0>)
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	f7f9 fd09 	bl	800015c <__adddf3>
 800674a:	2200      	movs	r2, #0
 800674c:	2300      	movs	r3, #0
 800674e:	f7fa f94b 	bl	80009e8 <__aeabi_dcmpgt>
 8006752:	2800      	cmp	r0, #0
 8006754:	d0be      	beq.n	80066d4 <floor+0x44>
 8006756:	2c00      	cmp	r4, #0
 8006758:	da02      	bge.n	8006760 <floor+0xd0>
 800675a:	2e14      	cmp	r6, #20
 800675c:	d103      	bne.n	8006766 <floor+0xd6>
 800675e:	3401      	adds	r4, #1
 8006760:	ea25 0508 	bic.w	r5, r5, r8
 8006764:	e7b6      	b.n	80066d4 <floor+0x44>
 8006766:	2301      	movs	r3, #1
 8006768:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800676c:	fa03 f606 	lsl.w	r6, r3, r6
 8006770:	4435      	add	r5, r6
 8006772:	42bd      	cmp	r5, r7
 8006774:	bf38      	it	cc
 8006776:	18e4      	addcc	r4, r4, r3
 8006778:	e7f2      	b.n	8006760 <floor+0xd0>
 800677a:	2500      	movs	r5, #0
 800677c:	462c      	mov	r4, r5
 800677e:	e7a9      	b.n	80066d4 <floor+0x44>
 8006780:	8800759c 	.word	0x8800759c
 8006784:	7e37e43c 	.word	0x7e37e43c
 8006788:	bff00000 	.word	0xbff00000
 800678c:	000fffff 	.word	0x000fffff

08006790 <nan>:
 8006790:	2000      	movs	r0, #0
 8006792:	4901      	ldr	r1, [pc, #4]	; (8006798 <nan+0x8>)
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	7ff80000 	.word	0x7ff80000
 800679c:	00000000 	.word	0x00000000

080067a0 <scalbn>:
 80067a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80067a6:	4604      	mov	r4, r0
 80067a8:	460d      	mov	r5, r1
 80067aa:	4617      	mov	r7, r2
 80067ac:	460b      	mov	r3, r1
 80067ae:	b996      	cbnz	r6, 80067d6 <scalbn+0x36>
 80067b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80067b4:	4303      	orrs	r3, r0
 80067b6:	d039      	beq.n	800682c <scalbn+0x8c>
 80067b8:	4b35      	ldr	r3, [pc, #212]	; (8006890 <scalbn+0xf0>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	f7f9 fe84 	bl	80004c8 <__aeabi_dmul>
 80067c0:	4b34      	ldr	r3, [pc, #208]	; (8006894 <scalbn+0xf4>)
 80067c2:	4604      	mov	r4, r0
 80067c4:	429f      	cmp	r7, r3
 80067c6:	460d      	mov	r5, r1
 80067c8:	da0f      	bge.n	80067ea <scalbn+0x4a>
 80067ca:	a32d      	add	r3, pc, #180	; (adr r3, 8006880 <scalbn+0xe0>)
 80067cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d0:	f7f9 fe7a 	bl	80004c8 <__aeabi_dmul>
 80067d4:	e006      	b.n	80067e4 <scalbn+0x44>
 80067d6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80067da:	4296      	cmp	r6, r2
 80067dc:	d10a      	bne.n	80067f4 <scalbn+0x54>
 80067de:	4602      	mov	r2, r0
 80067e0:	f7f9 fcbc 	bl	800015c <__adddf3>
 80067e4:	4604      	mov	r4, r0
 80067e6:	460d      	mov	r5, r1
 80067e8:	e020      	b.n	800682c <scalbn+0x8c>
 80067ea:	460b      	mov	r3, r1
 80067ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80067f0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80067f4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80067f8:	19b9      	adds	r1, r7, r6
 80067fa:	4291      	cmp	r1, r2
 80067fc:	dd0e      	ble.n	800681c <scalbn+0x7c>
 80067fe:	a322      	add	r3, pc, #136	; (adr r3, 8006888 <scalbn+0xe8>)
 8006800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006804:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006808:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800680c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006810:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006814:	4820      	ldr	r0, [pc, #128]	; (8006898 <scalbn+0xf8>)
 8006816:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800681a:	e7d9      	b.n	80067d0 <scalbn+0x30>
 800681c:	2900      	cmp	r1, #0
 800681e:	dd08      	ble.n	8006832 <scalbn+0x92>
 8006820:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006824:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006828:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800682c:	4620      	mov	r0, r4
 800682e:	4629      	mov	r1, r5
 8006830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006832:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006836:	da16      	bge.n	8006866 <scalbn+0xc6>
 8006838:	f24c 3350 	movw	r3, #50000	; 0xc350
 800683c:	429f      	cmp	r7, r3
 800683e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006842:	dd08      	ble.n	8006856 <scalbn+0xb6>
 8006844:	4c15      	ldr	r4, [pc, #84]	; (800689c <scalbn+0xfc>)
 8006846:	4814      	ldr	r0, [pc, #80]	; (8006898 <scalbn+0xf8>)
 8006848:	f363 74df 	bfi	r4, r3, #31, #1
 800684c:	a30e      	add	r3, pc, #56	; (adr r3, 8006888 <scalbn+0xe8>)
 800684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006852:	4621      	mov	r1, r4
 8006854:	e7bc      	b.n	80067d0 <scalbn+0x30>
 8006856:	4c12      	ldr	r4, [pc, #72]	; (80068a0 <scalbn+0x100>)
 8006858:	4812      	ldr	r0, [pc, #72]	; (80068a4 <scalbn+0x104>)
 800685a:	f363 74df 	bfi	r4, r3, #31, #1
 800685e:	a308      	add	r3, pc, #32	; (adr r3, 8006880 <scalbn+0xe0>)
 8006860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006864:	e7f5      	b.n	8006852 <scalbn+0xb2>
 8006866:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800686a:	3136      	adds	r1, #54	; 0x36
 800686c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006870:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006874:	4620      	mov	r0, r4
 8006876:	4629      	mov	r1, r5
 8006878:	2200      	movs	r2, #0
 800687a:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <scalbn+0x108>)
 800687c:	e7a8      	b.n	80067d0 <scalbn+0x30>
 800687e:	bf00      	nop
 8006880:	c2f8f359 	.word	0xc2f8f359
 8006884:	01a56e1f 	.word	0x01a56e1f
 8006888:	8800759c 	.word	0x8800759c
 800688c:	7e37e43c 	.word	0x7e37e43c
 8006890:	43500000 	.word	0x43500000
 8006894:	ffff3cb0 	.word	0xffff3cb0
 8006898:	8800759c 	.word	0x8800759c
 800689c:	7e37e43c 	.word	0x7e37e43c
 80068a0:	01a56e1f 	.word	0x01a56e1f
 80068a4:	c2f8f359 	.word	0xc2f8f359
 80068a8:	3c900000 	.word	0x3c900000

080068ac <_init>:
 80068ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ae:	bf00      	nop
 80068b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068b2:	bc08      	pop	{r3}
 80068b4:	469e      	mov	lr, r3
 80068b6:	4770      	bx	lr

080068b8 <_fini>:
 80068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ba:	bf00      	nop
 80068bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068be:	bc08      	pop	{r3}
 80068c0:	469e      	mov	lr, r3
 80068c2:	4770      	bx	lr
